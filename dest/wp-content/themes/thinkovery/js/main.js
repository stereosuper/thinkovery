!function t(e,i,n){function r(o,a){if(!i[o]){if(!e[o]){var l="function"==typeof require&&require;if(!a&&l)return l(o,!0);if(s)return s(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var h=i[o]={exports:{}};e[o][0].call(h.exports,function(t){var i=e[o][1][t];return r(i?i:t)},h,h.exports,t,e,i,n)}return i[o].exports}for(var s="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");e.exports=function(t){function e(t,e,i){return[t.data("x")-e,t.data("y")-i]}var i,s;t.on("mouseenter",".btn, #menu-main a",function(t){i=n(this).find("> i"),i.data("x",i.position().left+i.width()/2).data("y",i.position().top+i.height()/2),n(this).data("x",n(this).offset().left).data("y",n(this).offset().top),s=e(i,t.pageX-n(this).data("x"),t.pageY-n(this).data("y")),r.to(i,.1,{x:-s[0]+"px",y:-s[1]+"px"})}).on("mousemove",".btn, #menu-main a",function(t){i=n(this).find("> i"),s=e(i,t.pageX-n(this).data("x"),t.pageY-n(this).data("y")),r.isTweening(i)||r.set(i,{x:-s[0]+"px",y:-s[1]+"px"})}).on("mouseleave",".btn, #menu-main a",function(){r.to(n(this).find("> i"),.3,{x:"0px",y:"0px"})})}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13}],2:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");window.requestAnimFrame=t("./requestAnimFrame.js");var s=t("./throttle.js");e.exports=function(){function t(){p.addClass("on"),d.hasClass("on")||(d.addClass("on"),u>580&&(r.to(m,.3,{opacity:1}),r.set(g,{opacity:0})))}function e(){p.removeClass("on"),d.hasClass("on")&&(d.removeClass("on"),u>580&&(r.to(m,.3,{opacity:0}),r.set(g,{opacity:1})))}function i(){f=n(document).scrollTop(),a=(f-10)/(c-h),l=227.7*a,f>10?(t(),u>580&&r.set(m,{x:l+"px",force3D:!0})):e()}function o(){u=n(window).outerWidth(),h=n(window).height(),c=n(document).height(),r.set(m,{opacity:0}),r.set(g,{opacity:1})}var a,l,u=n(window).outerWidth(),h=n(window).height(),c=n(document).height(),f=n(document).scrollTop(),p=n("#header"),d=n("#logo"),m=d.find("#logo-o"),g=d.find("#logo-o1");p.on("mouseenter",e).on("mouseleave",function(){f>10&&t()}),n(document).on("scroll",s(function(){requestAnimFrame(i)},10)),n(window).on("resize",s(function(){requestAnimFrame(o)},60))}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13,"./requestAnimFrame.js":16,"./throttle.js":20}],3:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./throttle.js");window.requestAnimFrame=t("./requestAnimFrame.js"),e.exports=function(t,e,i){function o(){t.length&&(p=n(window).scrollTop(),d=p+g,t.each(function(t){l=n(this),h=l.data("check-top"),c=l.data("check-bottom"),f=p*e/(m-g)-e/2,i&&(f=f*(t+2)/2),c-_>=p&&h+_<=d&&r.set(l,{y:f+"px",force3D:!0})}))}function a(){t.length&&t.each(function(){l=n(this),u=l.outerHeight(),h=l.offset().top,c=h+u,l.data({"check-top":h,"check-bottom":c})})}var l,u,h,c,f,p,d,m=n(document).height(),g=n(window).height(),_=0,_=0;a(),o(),t.length&&r.to(t,1,{opacity:.8}),n(document).on("scroll",s(function(){requestAnimFrame(o)},40)),n(window).on("resize",s(function(){g=n(window).height(),m=n(document).height(),requestAnimFrame(a),requestAnimFrame(o)},40))}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13,"./requestAnimFrame.js":16,"./throttle.js":20}],4:[function(t,e,i){t("./libs/jquery/dist/jquery.slim.min.js");e.exports=function(t,e,i,n,r){return containerH=t.outerHeight(),containerW=t.width(),containerRatio=containerH/containerW,posX=r.data("x"),posY=r.data("y"),containerRatio>e?(finalH=containerH,finalW=i*finalH/n,newX=finalW*posX/i-(finalW-containerW)/2,newY=finalH*posY/n):(finalW=containerW,finalH=n*finalW/i,newX=finalW*posX/i,newY=finalH*posY/n-(finalH-containerH)/2),ratioScale=finalH/n,[newX,newY,ratioScale]}},{"./libs/jquery/dist/jquery.slim.min.js":13}],5:[function(t,e,i){(function(i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");e.exports=function(){var t=document.createElement("script"),e=document.getElementsByTagName("script")[0],s=n(".wrapper-video"),o=[];i.onYouTubeIframeAPIReady=function(){function t(t){t.on("click",function(){r.to(n(this).find(".cover-video"),.5,{opacity:0,display:"none"}),o[n(this).index(".wrapper-video")].playVideo()})}s.each(function(e){o[e]=new YT.Player(n(this).find("iframe").get(0),{events:{onReady:t(n(this))}})})},t.src="https://www.youtube.com/iframe_api",e.parentNode.insertBefore(t,e)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13}],6:[function(t,e,i){(function(t){!function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,o,a,l,u,h=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=h("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},m=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),g={},_=function(s,o,a,l){this.sc=g[s]?g[s].sc:[],g[s]=this,this.gsClass=null,this.func=a;var u=[];this.check=function(c){for(var f,p,d,m,v,y=o.length,x=y;--y>-1;)(f=g[o[y]]||new _(o[y],[])).gsClass?(u[y]=f.gsClass,x--):c&&f.sc.push(this);if(0===x&&a){if(p=("com.greensock."+s).split("."),d=p.pop(),m=h(p.join("."))[d]=this.gsClass=a.apply(a,u),l)if(r[d]=n[d]=m,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return m});else if(v)if(s===i){e.exports=n[i]=m;for(y in n)m[y]=n[y]}else n[i]&&(n[i][d]=m);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new _(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var x=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?x.concat(e):x},!0),b=w.map={},T=w.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),u=l.length,h=(i||"easeIn,easeOut,easeInOut").split(",");--u>-1;)for(s=l[u],r=n?y("easing."+s,null,!0):c.easing[s]||{},o=h.length;--o>-1;)a=h[o],b[s+"."+a]=b[a+s]=r[a]=t.getRatio?t:t[a]||new t};for(a=w.prototype,a._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],o=s.length;--o>-1;)a=s[o]+",Power"+o,T(new w(null,null,1,o),a,"easeOut",!0),T(new w(null,null,2,o),a,"easeIn"+(0===o?",easeNone":"")),T(new w(null,null,3,o),a,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});a=P.prototype,a.addEventListener=function(t,e,i,n,r){r=r||0;var s,o,a=this._listeners[t],h=0;for(this!==l||u||l.wake(),null==a&&(this._listeners[t]=a=[]),o=a.length;--o>-1;)s=a[o],s.c===e&&s.s===i?a.splice(o,1):0===h&&s.pr<r&&(h=o+1);a.splice(h,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var k=t.requestAnimationFrame,S=t.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},O=C();for(s=["ms","moz","webkit","o"],o=s.length;--o>-1&&!k;)k=t[s[o]+"RequestAnimationFrame"],S=t[s[o]+"CancelAnimationFrame"]||t[s[o]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,o,a=this,h=C(),c=!(e===!1||!k)&&"auto",p=500,m=33,g="tick",_=function(t){var e,l,u=C()-O;u>p&&(h+=u-m),O+=u,a.time=(O-h)/1e3,e=a.time-o,(!i||e>0||t===!0)&&(a.frame++,o+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(_)),l&&a.dispatchEvent(g)};P.call(a),a.time=a.frame=0,a.tick=function(){_(!0)},a.lagSmoothing=function(t,e){p=t||1/f,m=Math.min(e,p,0)},a.sleep=function(){null!=r&&(c&&S?S(r):clearTimeout(r),n=d,r=null,a===l&&(u=!1))},a.wake=function(t){null!==r?a.sleep():t?h+=-O+(O=C()):a.frame>10&&(O=C()-p+5),n=0===i?d:c&&k?k:function(t){return setTimeout(t,1e3*(o-a.time)+1|0)},a===l&&(u=!0),_(2)},a.fps=function(t){return arguments.length?(i=t,s=1/(i||60),o=this.time+s,void a.wake()):i},a.useRAF=function(t){return arguments.length?(a.sleep(),c=t,void a.fps(i)):c},a.fps(t),setTimeout(function(){"auto"===c&&a.frame<5&&"hidden"!==document.visibilityState&&a.useRAF(!1)},1500)}),a=c.Ticker.prototype=new c.events.EventDispatcher,a.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){u||l.wake();var i=this.vars.useFrames?U:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,a=A.prototype,a._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var R=function(){u&&C()-O>2e3&&l.wake(),setTimeout(R,2e3)};R(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},a._enabled=function(t,e){return u||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=m(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(u||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(E.length&&Z(),this.render(t,e,!1),E.length&&Z())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(u||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});a=D.prototype=new A,a.constructor=D,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return u||l.wake(),this._totalTime};var M=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=M.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:M.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?H[M.defaultOverwrite]:"number"==typeof l?l>>0:H[l],(a||e instanceof Array||e.push&&m(e))&&"number"!=typeof e[0])for(this._targets=o=p(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)s=o[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(p(s))):(this._siblings[r]=Q(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=o[r--]=M.selector(s),"string"==typeof s&&o.splice(r+1,1)):o.splice(r--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)))},!0),N=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},F=function(t,e){var i,n={};for(i in t)V[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!Y[i]||Y[i]&&Y[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};a=M.prototype=new A,a.constructor=M,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,M.version="1.19.0",M.defaultEase=a._ease=new w(null,null,1,1),M.defaultOverwrite="auto",M.ticker=l,M.autoSleep=120,M.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},M.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(M.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var E=[],L={},j=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,X=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},I=function(t,e,i,n){var r,s,o,a,l,u,h,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(j)||[],s=e.match(j)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,a=0;a<l;a++)h=s[a],u=e.substr(f,e.indexOf(h,f)-f),p+=u||!a?u:",",f+=u.length,d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),h===r[a]||r.length<=a?p+=h:(p&&(c.push(p),p=""),o=parseFloat(r[a]),c.push(o),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:o,c:("="===h.charAt(1)?parseInt(h.charAt(0)+"1",10)*parseFloat(h.substr(2)):parseFloat(h)-o)||0,f:0,m:d&&d<4?Math.round:0}),f+=h.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=X,c},B=function(t,e,i,n,r,s,o,a,l){"function"==typeof n&&(n=n(l||0,t));var u,h,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(h=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=o?t[h](o):t[h]()),"string"==typeof c&&(o||isNaN(c))?(d.fp=o,u=I(c,n,a||M.defaultStringFilter,d),d={t:u,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},z=M._internals={isArray:m,isSelector:N,lazyTweens:E,blobDif:I},Y=M._plugins={},q=z.tweenLookup={},W=0,V=z.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},H={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},U=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Z=z.lazyRender=function(){var t,e=E.length;for(L={};--e>-1;)t=E[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);E.length=0};$._startTime=l.time,U._startTime=l.frame,$._active=U._active=!0,setTimeout(Z,1),A._updateRoot=M.render=function(){var t,e,i;if(E.length&&Z(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),U.render((l.frame-U._startTime)*U._timeScale,!1,!1),E.length&&Z(),l.frame>=G){G=l.frame+(parseInt(M.autoSleep,10)||120);for(i in q){for(e=q[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete q[i]}if(i=$._first,(!i||i._paused)&&M.autoSleep&&!U._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Q=function(t,e,i){var n,r,s=t._gsTweenID;if(q[s||(t._gsTweenID=s="t"+W++)]||(q[s]={target:t,tweens:[]}),e&&(n=q[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return q[s].tweens},K=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),o=M.onOverwrite,o&&(s=o(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var u,h=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(u=u||tt(e,0,d),0===tt(a,u,d)&&(c[p++]=a)):a._startTime<=h&&a._startTime+a.totalDuration()/a._timeScale>h&&((d||!a._initted)&&h-a._startTime<=2e-10||(c[p++]=a)));for(s=p;--s>-1;)if(a=c[s],2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};a._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,l=this._duration,u=!!o.immediateRender,h=o.ease;if(o.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in o.startAt)r[n]=o.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=u&&o.lazy!==!1,r.startAt=r.delay=null,this._startAt=M.to(this.target,0,r),u)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(u=!1),i={};for(n in o)V[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=u&&o.lazy!==!1,i.immediateRender=u,this._startAt=M.to(this.target,0,i),u){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=h=h?h instanceof w?h:"function"==typeof h?new w(h,o.easeParams):b[h]||M.defaultEase:M.defaultEase,o.easeParams instanceof Array&&h.config&&(this._ease=h.config.apply(h,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&M._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,s){var o,a,l,u,h,c;if(null==e)return!1;L[e._gsTweenID]&&Z(),this.vars.css||e.style&&e!==t&&e.nodeType&&Y.css&&this.vars.autoCSS!==!1&&F(this.vars,e);for(o in this.vars)if(c=this.vars[o],V[o])c&&(c instanceof Array||c.push&&m(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(Y[o]&&(u=new Y[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=h={_next:this._firstPT,t:u,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:u._priority,m:0},a=u._overwriteProps.length;--a>-1;)i[u._overwriteProps[a]]=this._firstPT;(u._priority||u._onInitAllProps)&&(l=!0),(u._onDisable||u._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else i[o]=B.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,u=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(u<0||t<=0&&t>=-1e-7||u===f&&"isPause"!==this.data)&&u!==t&&(i=!0,u>f&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||u===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&u>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(u>=0&&(u!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||u===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var h=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&h>=.5)&&(h=1-h),3===c&&(h*=2),1===p?h*=h:2===p?h*=h*h:3===p?h*=h*h*h:4===p&&(h*=h*h*h*h),1===c?this.ratio=1-h:2===c?this.ratio=h:t/l<.5?this.ratio=h/2:this.ratio=1-h/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,E.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&o!==f&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:M.selector(e)||e;var n,r,s,o,a,l,u,h,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((m(e)||N(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(u=t||a,h=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(M.onOverwrite||this.vars.onOverwrite)){for(s in u)a[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in u)(o=a[s])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(u)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),h&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&M._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(u||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Q(n[i],this,!0);else this._siblings=Q(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&M._onPluginEvent(t?"_onEnable":"_onDisable",this)},M.to=function(t,e,i){return new M(t,e,i)},M.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new M(t,e,i)},M.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new M(t,e,n)},M.delayedCall=function(t,e,i,n,r){return new M(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},M.set=function(t,e){return new M(t,0,e)},M.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:M.selector(t)||t;var i,n,r,s;if((m(t)||N(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(M.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Q(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},M.killTweensOf=M.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=M.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(a=et.prototype,et.version="1.19.0",et.API=2,a._firstPT=null,a._addTween=B,a.setRatio=X,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},M._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(Y[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),a=o.prototype=new et(i);a.constructor=o,o.API=t.API;for(e in s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,et.activate([o]),o},s=t._gsQueue){for(o=0;o<s.length;o++)s[o]();for(a in g)g[a].func||t.console.log("GSAP encountered missing dependency: "+a)}u=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenLite");
}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],7:[function(t,e,i){(function(t){var i="undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window;(i._gsQueue||(i._gsQueue=[])).push(function(){"use strict";i._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},r=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},s=function(t,e,n){i.call(this,t,e,n),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=s.prototype.render},o=1e-10,a=i._internals,l=a.isSelector,u=a.isArray,h=s.prototype=i.to({},.1,{}),c=[];s.version="1.19.0",h.constructor=s,h.kill()._gc=!1,s.killTweensOf=s.killDelayedCallsTo=i.killTweensOf,s.getTweensOf=i.getTweensOf,s.lagSmoothing=i.lagSmoothing,s.ticker=i.ticker,s.render=i.render,h.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),i.prototype.invalidate.call(this)},h.updateTo=function(t,e){var n,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(n in t)this.vars[n]=t[n];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var o=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(o,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var a,l=1/(1-r),u=this._firstPT;u;)a=u.s+u.c,u.c*=l,u.s=a-u.c,u=u._next;return this},h.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,r,s,l,u,h,c,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,m=this._totalTime,g=this._cycle,_=this._duration,v=this._rawPrevTime;if(t>=p-1e-7?(this._totalTime=p,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=_,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===_&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(v<0||t<=0&&t>=-1e-7||v===o&&"isPause"!==this.data)&&v!==t&&(i=!0,v>o&&(r="onReverseComplete")),this._rawPrevTime=f=!e||t||v===t?t:o)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==m||0===_&&v>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===_&&(this._initted||!this.vars.lazy||i)&&(v>=0&&(i=!0),this._rawPrevTime=f=!e||t||v===t?t:o)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=_+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=_-this._time),this._time>_?this._time=_:this._time<0&&(this._time=0)),this._easeType?(u=this._time/_,h=this._easeType,c=this._easePower,(1===h||3===h&&u>=.5)&&(u=1-u),3===h&&(u*=2),1===c?u*=u:2===c?u*=u*u:3===c?u*=u*u*u:4===c&&(u*=u*u*u*u),1===h?this.ratio=1-u:2===h?this.ratio=u:this._time/_<.5?this.ratio=u/2:this.ratio=1-u/2):this.ratio=this._ease.getRatio(this._time/_)),d===this._time&&!i&&g===this._cycle)return void(m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=d,this._totalTime=m,this._rawPrevTime=v,this._cycle=g,a.lazyTweens.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/_):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==d&&t>=0&&(this._active=!0),0===m&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==_||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,e,i),e||(this._totalTime!==m||r)&&this._callback("onUpdate")),this._cycle!==g&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===_&&this._rawPrevTime===o&&f!==o&&(this._rawPrevTime=0)))},s.to=function(t,e,i){return new s(t,e,i)},s.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new s(t,e,i)},s.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new s(t,e,n)},s.staggerTo=s.allTo=function(t,e,o,a,h,f,p){a=a||0;var d,m,g,_,v=0,y=[],x=function(){o.onComplete&&o.onComplete.apply(o.onCompleteScope||this,arguments),h.apply(p||o.callbackScope||this,f||c)},w=o.cycle,b=o.startAt&&o.startAt.cycle;for(u(t)||("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t))),t=t||[],a<0&&(t=n(t),t.reverse(),a*=-1),d=t.length-1,g=0;g<=d;g++){m={};for(_ in o)m[_]=o[_];if(w&&(r(m,t,g),null!=m.duration&&(e=m.duration,delete m.duration)),b){b=m.startAt={};for(_ in o.startAt)b[_]=o.startAt[_];r(m.startAt,t,g)}m.delay=v+(m.delay||0),g===d&&h&&(m.onComplete=x),y[g]=new s(t[g],e,m),v+=a}return y},s.staggerFrom=s.allFrom=function(t,e,i,n,r,o,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,s.staggerTo(t,e,i,n,r,o,a)},s.staggerFromTo=s.allFromTo=function(t,e,i,n,r,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,s.staggerTo(t,e,n,r,o,a,l)},s.delayedCall=function(t,e,i,n,r){return new s(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},s.set=function(t,e){return new s(t,0,e)},s.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var f=function(t,e){for(var n=[],r=0,s=t._first;s;)s instanceof i?n[r++]=s:(e&&(n[r++]=s),n=n.concat(f(s,e)),r=n.length),s=s._next;return n},p=s.getAllTweens=function(e){return f(t._rootTimeline,e).concat(f(t._rootFramesTimeline,e))};s.killAll=function(t,i,n,r){null==i&&(i=!0),null==n&&(n=!0);var s,o,a,l=p(0!=r),u=l.length,h=i&&n&&r;for(a=0;a<u;a++)o=l[a],(h||o instanceof e||(s=o.target===o.vars.onComplete)&&n||i&&!s)&&(t?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},s.killChildTweensOf=function(t,e){if(null!=t){var r,o,h,c,f,p=a.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t)),u(t))for(c=t.length;--c>-1;)s.killChildTweensOf(t[c],e);else{r=[];for(h in p)for(o=p[h].target.parentNode;o;)o===t&&(r=r.concat(p[h].tweens)),o=o.parentNode;for(f=r.length,c=0;c<f;c++)e&&r[c].totalTime(r[c].totalDuration()),r[c]._enabled(!1,!1)}}};var d=function(t,i,n,r){i=i!==!1,n=n!==!1,r=r!==!1;for(var s,o,a=p(r),l=i&&n&&r,u=a.length;--u>-1;)o=a[u],(l||o instanceof e||(s=o.target===o.vars.onComplete)&&n||i&&!s)&&o.paused(t)};return s.pauseAll=function(t,e,i){d(!0,t,e,i)},s.resumeAll=function(t,e,i){d(!1,t,e,i)},s.globalTimeScale=function(e){var n=t._rootTimeline,r=i.ticker.time;return arguments.length?(e=e||o,n._startTime=r-(r-n._startTime)*n._timeScale/e,n=t._rootFramesTimeline,r=i.ticker.frame,n._startTime=r-(r-n._startTime)*n._timeScale/e,n._timeScale=t._rootTimeline._timeScale=e,e):n._timeScale},h.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},h.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},h.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},h.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},h.totalDuration=function(t){return arguments.length?this._repeat===-1?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},h.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},h.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},h.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},s},!0),i._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,n){var r=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,n,r=this.vars;for(n in r)i=r[n],u(i)&&i.join("").indexOf("{self}")!==-1&&(r[n]=this._swapSelfInParams(i));u(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},s=1e-10,o=n._internals,a=r._internals={},l=o.isSelector,u=o.isArray,h=o.lazyTweens,c=o.lazyRender,f=i._gsDefine.globals,p=function(t){var e,i={};for(e in t)i[e]=t[e];return i},d=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r.call(e[i],i):r[i%r.length];delete t.cycle},m=a.pauseCallback=function(){},g=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},_=r.prototype=new e;return r.version="1.19.0",_.constructor=r,_.kill()._gc=_._forcingPlayhead=_._hasPause=!1,_.to=function(t,e,i,r){var s=i.repeat&&f.TweenMax||n;return e?this.add(new s(t,e,i),r):this.set(t,i,r)},_.from=function(t,e,i,r){return this.add((i.repeat&&f.TweenMax||n).from(t,e,i),r)},_.fromTo=function(t,e,i,r,s){var o=r.repeat&&f.TweenMax||n;return e?this.add(o.fromTo(t,e,i,r),s):this.set(t,r,s)},_.staggerTo=function(t,e,i,s,o,a,u,h){var c,f,m=new r({onComplete:a,onCompleteParams:u,callbackScope:h,smoothChildTiming:this.smoothChildTiming}),_=i.cycle;for("string"==typeof t&&(t=n.selector(t)||t),t=t||[],l(t)&&(t=g(t)),s=s||0,s<0&&(t=g(t),t.reverse(),s*=-1),f=0;f<t.length;f++)c=p(i),c.startAt&&(c.startAt=p(c.startAt),c.startAt.cycle&&d(c.startAt,t,f)),_&&(d(c,t,f),null!=c.duration&&(e=c.duration,delete c.duration)),m.to(t[f],e,c,f*s);return this.add(m,o)},_.staggerFrom=function(t,e,i,n,r,s,o,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,o,a)},_.staggerFromTo=function(t,e,i,n,r,s,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,o,a,l)},_.call=function(t,e,i,r){return this.add(n.delayedCall(0,t,e,i),r)},_.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new n(t,0,e),i)},r.exportRoot=function(t,e){t=t||{},null==t.smoothChildTiming&&(t.smoothChildTiming=!0);var i,s,o=new r(t),a=o._timeline;for(null==e&&(e=!0),a._remove(o,!0),o._startTime=0,o._rawPrevTime=o._time=o._totalTime=a._time,i=a._first;i;)s=i._next,e&&i instanceof n&&i.target===i.vars.onComplete||o.add(i,i._startTime-i._delay),i=s;return a.add(o,0),o},_.add=function(i,s,o,a){var l,h,c,f,p,d;if("number"!=typeof s&&(s=this._parseTimeOrLabel(s,0,!0,i)),!(i instanceof t)){if(i instanceof Array||i&&i.push&&u(i)){for(o=o||"normal",a=a||0,l=s,h=i.length,c=0;c<h;c++)u(f=i[c])&&(f=new r({tweens:f})),this.add(f,l),"string"!=typeof f&&"function"!=typeof f&&("sequence"===o?l=f._startTime+f.totalDuration()/f._timeScale:"start"===o&&(f._startTime-=f.delay())),l+=a;return this._uncache(!0)}if("string"==typeof i)return this.addLabel(i,s);if("function"!=typeof i)throw"Cannot add "+i+" into the timeline; it is not a tween, timeline, function, or string.";i=n.delayedCall(0,i)}if(e.prototype.add.call(this,i,s),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=this,d=p.rawTime()>i._startTime;p._timeline;)d&&p._timeline.smoothChildTiming?p.totalTime(p._totalTime,!0):p._gc&&p._enabled(!0,!1),p=p._timeline;return this},_.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&u(e)){for(var n=e.length;--n>-1;)this.remove(e[n]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},_._remove=function(t,i){e.prototype._remove.call(this,t,i);var n=this._last;return n?this._time>n._startTime+n._totalDuration/n._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},_.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},_.insert=_.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},_.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},_.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},_.addPause=function(t,e,i,r){var s=n.delayedCall(0,m,i,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},_.removeLabel=function(t){return delete this._labels[t],this},_.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},_._parseTimeOrLabel=function(e,i,n,r){var s;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&u(r)))for(s=r.length;--s>-1;)r[s]instanceof t&&r[s].timeline===this&&this.remove(r[s]);if("string"==typeof i)return this._parseTimeOrLabel(i,n&&"number"==typeof e&&null==this._labels[i]?e-this.duration():0,n);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=this.duration());else{if(s=e.indexOf("="),s===-1)return null==this._labels[e]?n?this._labels[e]=this.duration()+i:i:this._labels[e]+i;i=parseInt(e.charAt(s-1)+"1",10)*Number(e.substr(s+1)),e=s>1?this._parseTimeOrLabel(e.substr(0,s-1),0,n):this.duration()}return Number(e)+i},_.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),e!==!1)},_.stop=function(){return this.paused(!0)},_.gotoAndPlay=function(t,e){return this.play(t,e)},_.gotoAndStop=function(t,e){return this.pause(t,e)},_.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,o,a,l,u,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,m=this._startTime,g=this._timeScale,_=this._paused;if(t>=p-1e-7)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,a="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===s)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>s&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==d||0===this._duration&&this._rawPrevTime!==s&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(a="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=r=!0,a="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(l=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=d)for(n=this._first;n&&n._startTime<=t&&!u;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(u=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!u;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(u=n),n=n._prev;u&&(this._time=t=u._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==d&&this._first||i||l||u){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==d&&t>0&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),f=this._time,f>=d)for(n=this._first;n&&(o=n._next,f===this._time&&(!this._paused||_));)(n._active||n._startTime<=f&&!n._paused&&!n._gc)&&(u===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,f===this._time&&(!this._paused||_));){if(n._active||n._startTime<=d&&!n._paused&&!n._gc){if(u===n){for(u=n._prev;u&&u.endTime()>this._time;)u.render(u._reversed?u.totalDuration()-(t-u._startTime)*u._timeScale:(t-u._startTime)*u._timeScale,e,i),u=u._prev;u=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=o}this._onUpdate&&(e||(h.length&&c(),this._callback("onUpdate"))),a&&(this._gc||m!==this._startTime&&g===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(h.length&&c(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}},_._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof r&&t._hasPausedChild())return!0;t=t._next}return!1},_.getChildren=function(t,e,i,r){r=r||-9999999999;for(var s=[],o=this._first,a=0;o;)o._startTime<r||(o instanceof n?e!==!1&&(s[a++]=o):(i!==!1&&(s[a++]=o),t!==!1&&(s=s.concat(o.getChildren(!0,e,i)),a=s.length))),o=o._next;return s},_.getTweensOf=function(t,e){var i,r,s=this._gc,o=[],a=0;for(s&&this._enabled(!0,!0),i=n.getTweensOf(t),r=i.length;--r>-1;)(i[r].timeline===this||e&&this._contains(i[r]))&&(o[a++]=i[r]);return s&&this._enabled(!1,!0),o},_.recent=function(){return this._recent},_._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},_.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},_._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},_.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return t!==!1&&(this._labels={}),this._uncache(!0)},_.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},_._enabled=function(t,i){if(t===this._gc)for(var n=this._first;n;)n._enabled(t,!0),n=n._next;return e.prototype._enabled.call(this,t,i)},_.totalTime=function(e,i,n){this._forcingPlayhead=!0;var r=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},_.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},_.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused?this.add(r,r._startTime-r._delay):s=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),i=r._startTime+r._totalDuration/r._timeScale,i>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},_.paused=function(e){if(!e)for(var i=this._first,n=this._time;i;)i._startTime===n&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},_.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},_.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},r},!0),i._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,n){var r=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},s=1e-10,o=e._internals,a=o.lazyTweens,l=o.lazyRender,u=i._gsDefine.globals,h=new n(null,null,1,0),c=r.prototype=new t;return c.constructor=r,c.kill()._gc=!1,r.version="1.19.0",c.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},c.addCallback=function(t,i,n,r){return this.add(e.delayedCall(0,t,n,r),i)},c.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},c.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},c.tweenTo=function(t,i){i=i||{};var n,r,s,o={ease:h,useFrames:this.usesFrames(),immediateRender:!1},a=i.repeat&&u.TweenMax||e;for(r in i)o[r]=i[r];return o.time=this._parseTimeOrLabel(t),n=Math.abs(Number(o.time)-this._time)/this._timeScale||.001,s=new a(this,n,o),o.onStart=function(){s.target.paused(!0),s.vars.time!==s.target.time()&&n===s.duration()&&s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale),i.onStart&&s._callback("onStart")},s},c.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=i.immediateRender!==!1;var n=this.tweenTo(e,i);return n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},c.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,o,u,h,c,f,p,d=this._dirty?this.totalDuration():this._totalDuration,m=this._duration,g=this._time,_=this._totalTime,v=this._startTime,y=this._timeScale,x=this._rawPrevTime,w=this._paused,b=this._cycle;if(t>=d-1e-7)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,u="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||x<0||x===s)&&x!==t&&this._first&&(h=!0,x>s&&(u="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,this._yoyo&&0!==(1&this._cycle)?this._time=t=0:(this._time=m,t=m+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==g||0===m&&x!==s&&(x>0||t<0&&x>=0)&&!this._locked)&&(u="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=r=!0,u="onReverseComplete"):x>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=m||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(h=!0)}else if(0===m&&x<0&&(h=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=m+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&_<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!==(1&this._cycle)&&(this._time=m-this._time),this._time>m?(this._time=m,t=m+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(t=this._time,t>=g)for(n=this._first;n&&n._startTime<=t&&!f;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(f=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!f;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(f=n),n=n._prev;f&&(this._time=t=f._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var T=this._yoyo&&0!==(1&b),P=T===(this._yoyo&&0!==(1&this._cycle)),k=this._totalTime,S=this._cycle,C=this._rawPrevTime,O=this._time;if(this._totalTime=b*m,this._cycle<b?T=!T:this._totalTime+=m,this._time=g,this._rawPrevTime=0===m?x-1e-4:x,this._cycle=b,this._locked=!0,g=T?0:m,this.render(g,e,0===m),e||this._gc||this.vars.onRepeat&&this._callback("onRepeat"),g!==this._time)return;if(P&&(g=T?m+1e-4:-1e-4,this.render(g,!0,!1)),this._locked=!1,this._paused&&!w)return;this._time=O,this._totalTime=k,this._cycle=S,this._rawPrevTime=C}if(!(this._time!==g&&this._first||i||h||f))return void(_!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==_&&t>0&&(this._active=!0),0===_&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),p=this._time,p>=g)for(n=this._first;n&&(o=n._next,p===this._time&&(!this._paused||w));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(f===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,p===this._time&&(!this._paused||w));){if(n._active||n._startTime<=g&&!n._paused&&!n._gc){if(f===n){for(f=n._prev;f&&f.endTime()>this._time;)f.render(f._reversed?f.totalDuration()-(t-f._startTime)*f._timeScale:(t-f._startTime)*f._timeScale,e,i),f=f._prev;f=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=o}this._onUpdate&&(e||(a.length&&l(),this._callback("onUpdate"))),u&&(this._locked||this._gc||v!==this._startTime&&y===this._timeScale||(0===this._time||d>=this.totalDuration())&&(r&&(a.length&&l(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[u]&&this._callback(u)))},c.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],o=this.getChildren(t,e,i),a=0,l=o.length;for(n=0;n<l;n++)r=o[n],r.isActive()&&(s[a++]=r);return s},c.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},c.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},c.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},c.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},c.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},c.totalDuration=function(e){return arguments.length?this._repeat!==-1&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},c.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},c.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},c.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},c.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},c.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},r},!0),function(){var t=180/Math.PI,e=[],n=[],r=[],s={},o=i._gsDefine.globals,a=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},l=",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",u=function(t,e,i,n){var r={a:t},s={},o={},a={c:n},l=(t+e)/2,u=(e+i)/2,h=(i+n)/2,c=(l+u)/2,f=(u+h)/2,p=(f-c)/8;return r.b=l+(t-l)/4,s.b=c+p,r.c=s.a=(r.b+s.b)/2,s.c=o.a=(c+f)/2,o.b=f-p,a.b=h+(n-h)/4,o.c=a.a=(o.b+a.b)/2,[r,s,o,a]},h=function(t,i,s,o,a){var l,h,c,f,p,d,m,g,_,v,y,x,w,b=t.length-1,T=0,P=t[0].a;for(l=0;l<b;l++)p=t[T],h=p.a,c=p.d,f=t[T+1].d,a?(y=e[l],x=n[l],w=(x+y)*i*.25/(o?.5:r[l]||.5),d=c-(c-h)*(o?.5*i:0!==y?w/y:0),m=c+(f-c)*(o?.5*i:0!==x?w/x:0),g=c-(d+((m-d)*(3*y/(y+x)+.5)/4||0))):(d=c-(c-h)*i*.5,m=c+(f-c)*i*.5,g=c-(d+m)/2),d+=g,m+=g,p.c=_=d,0!==l?p.b=P:p.b=P=p.a+.6*(p.c-p.a),p.da=c-h,p.ca=_-h,p.ba=P-h,s?(v=u(h,P,_,c),t.splice(T,1,v[0],v[1],v[2],v[3]),T+=4):T++,P=m;p=t[T],p.b=P,p.c=P+.4*(p.d-P),p.da=p.d-p.a,p.ca=p.c-p.a,p.ba=P-p.a,s&&(v=u(p.a,P,p.c,p.d),t.splice(T,1,v[0],v[1],v[2],v[3]))},c=function(t,i,r,s){var o,l,u,h,c,f,p=[];if(s)for(t=[s].concat(t),l=t.length;--l>-1;)"string"==typeof(f=t[l][i])&&"="===f.charAt(1)&&(t[l][i]=s[i]+Number(f.charAt(0)+f.substr(2)));if(o=t.length-2,o<0)return p[0]=new a(t[0][i],0,0,t[o<-1?0:1][i]),p;for(l=0;l<o;l++)u=t[l][i],h=t[l+1][i],p[l]=new a(u,0,0,h),r&&(c=t[l+2][i],e[l]=(e[l]||0)+(h-u)*(h-u),n[l]=(n[l]||0)+(c-h)*(c-h));return p[l]=new a(t[l][i],0,0,t[l+1][i]),p},f=function(t,i,o,a,u,f){var p,d,m,g,_,v,y,x,w={},b=[],T=f||t[0];u="string"==typeof u?","+u+",":l,null==i&&(i=1);for(d in t[0])b.push(d);if(t.length>1){for(x=t[t.length-1],y=!0,p=b.length;--p>-1;)if(d=b[p],Math.abs(T[d]-x[d])>.05){y=!1;break}y&&(t=t.concat(),f&&t.unshift(f),t.push(t[1]),f=t[t.length-3])}for(e.length=n.length=r.length=0,p=b.length;--p>-1;)d=b[p],s[d]=u.indexOf(","+d+",")!==-1,w[d]=c(t,d,s[d],f);for(p=e.length;--p>-1;)e[p]=Math.sqrt(e[p]),n[p]=Math.sqrt(n[p]);if(!a){for(p=b.length;--p>-1;)if(s[d])for(m=w[b[p]],v=m.length-1,g=0;g<v;g++)_=m[g+1].da/n[g]+m[g].da/e[g]||0,r[g]=(r[g]||0)+_*_;for(p=r.length;--p>-1;)r[p]=Math.sqrt(r[p])}for(p=b.length,g=o?4:1;--p>-1;)d=b[p],m=w[d],h(m,i,o,a,s[d]),y&&(m.splice(0,g),m.splice(m.length-g,g));return w},p=function(t,e,i){e=e||"soft";var n,r,s,o,l,u,h,c,f,p,d,m={},g="cubic"===e?3:2,_="soft"===e,v=[];if(_&&i&&(t=[i].concat(t)),null==t||t.length<g+1)throw"invalid Bezier data";for(f in t[0])v.push(f);for(u=v.length;--u>-1;){for(f=v[u],m[f]=l=[],p=0,c=t.length,h=0;h<c;h++)n=null==i?t[h][f]:"string"==typeof(d=t[h][f])&&"="===d.charAt(1)?i[f]+Number(d.charAt(0)+d.substr(2)):Number(d),_&&h>1&&h<c-1&&(l[p++]=(n+l[p-2])/2),l[p++]=n;for(c=p-g+1,p=0,h=0;h<c;h+=g)n=l[h],r=l[h+1],s=l[h+2],o=2===g?0:l[h+3],l[p++]=d=3===g?new a(n,r,s,o):new a(n,(2*r+n)/3,(2*r+s)/3,s);l.length=p}return m},d=function(t,e,i){for(var n,r,s,o,a,l,u,h,c,f,p,d=1/i,m=t.length;--m>-1;)for(f=t[m],s=f.a,o=f.d-s,a=f.c-s,l=f.b-s,n=r=0,h=1;h<=i;h++)u=d*h,c=1-u,n=r-(r=(u*u*o+3*c*(u*a+c*l))*u),p=m*i+h-1,e[p]=(e[p]||0)+n*n},m=function(t,e){e=e>>0||6;var i,n,r,s,o=[],a=[],l=0,u=0,h=e-1,c=[],f=[];for(i in t)d(t[i],o,e);for(r=o.length,n=0;n<r;n++)l+=Math.sqrt(o[n]),s=n%e,f[s]=l,s===h&&(u+=l,
s=n/e>>0,c[s]=f,a[s]=u,l=0,f=[]);return{length:u,lengths:a,segments:c}},g=i._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.7",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,o,a,l=e.values||[],u={},h=l[0],c=e.autoRotate||i.vars.orientToBezier;this._autoRotate=c?c instanceof Array?c:[["x","y","rotation",c===!0?0:Number(c)||0]]:null;for(n in h)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],u[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||u[n]!==l[0][n]&&(a=u);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?f(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):p(l,e.type,u),this._segCount=this._beziers[n].length,this._timeRes){var d=m(this._beziers,this._timeRes);this._length=d.length,this._lengths=d.lengths,this._segments=d.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(c=this._autoRotate)for(this._initialRotations=[],c[0]instanceof Array||(this._autoRotate=c=[c]),s=c.length;--s>-1;){for(o=0;o<3;o++)n=c[s][o],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=c[s][2],this._initialRotations[s]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,n,r,s,o,a,l,u,h,c,f=this._segCount,p=this._func,d=this._target,m=e!==this._startRatio;if(this._timeRes){if(h=this._lengths,c=this._curSeg,e*=this._length,r=this._li,e>this._l2&&r<f-1){for(u=f-1;r<u&&(this._l2=h[++r])<=e;);this._l1=h[r-1],this._li=r,this._curSeg=c=this._segments[r],this._s2=c[this._s1=this._si=0]}else if(e<this._l1&&r>0){for(;r>0&&(this._l1=h[--r])>=e;);0===r&&e<this._l1?this._l1=0:r++,this._l2=h[r],this._li=r,this._curSeg=c=this._segments[r],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(i=r,e-=this._l1,r=this._si,e>this._s2&&r<c.length-1){for(u=c.length-1;r<u&&(this._s2=c[++r])<=e;);this._s1=c[r-1],this._si=r}else if(e<this._s1&&r>0){for(;r>0&&(this._s1=c[--r])>=e;);0===r&&e<this._s1?this._s1=0:r++,this._s2=c[r],this._si=r}a=(r+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else i=e<0?0:e>=1?f-1:f*e>>0,a=(e-i*(1/f))*f;for(n=1-a,r=this._props.length;--r>-1;)s=this._props[r],o=this._beziers[s][i],l=(a*a*o.da+3*n*(a*o.ca+n*o.ba))*a+o.a,this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l;if(this._autoRotate){var g,_,v,y,x,w,b,T=this._autoRotate;for(r=T.length;--r>-1;)s=T[r][2],w=T[r][3]||0,b=T[r][4]===!0?1:t,o=this._beziers[T[r][0]],g=this._beziers[T[r][1]],o&&g&&(o=o[i],g=g[i],_=o.a+(o.b-o.a)*a,y=o.b+(o.c-o.b)*a,_+=(y-_)*a,y+=(o.c+(o.d-o.c)*a-y)*a,v=g.a+(g.b-g.a)*a,x=g.b+(g.c-g.b)*a,v+=(x-v)*a,x+=(g.c+(g.d-g.c)*a-x)*a,l=m?Math.atan2(x-v,y-_)*b+w:this._initialRotations[r],this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l)}}}),_=g.prototype;g.bezierThrough=f,g.cubicToQuadratic=u,g._autoCSS=!0,g.quadraticToCubic=function(t,e,i){return new a(t,(2*e+t)/3,(2*e+i)/3,i)},g._cssRegister=function(){var t=o.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,o,a,l){e instanceof Array&&(e={values:e}),l=new g;var u,h,c,f=e.values,p=f.length-1,d=[],m={};if(p<0)return a;for(u=0;u<=p;u++)c=i(t,f[u],o,a,l,p!==u),d[u]=c.end;for(h in e)m[h]=e[h];return m.values=d,a=new r(t,"bezier",0,0,c.pt,2),a.data=c,a.plugin=l,a.setRatio=n,0===m.autoRotate&&(m.autoRotate=!0),!m.autoRotate||m.autoRotate instanceof Array||(u=m.autoRotate===!0?0:Number(m.autoRotate),m.autoRotate=null!=c.end.left?[["left","top","rotation",u,!1]]:null!=c.end.x&&[["x","y","rotation",u,!1]]),m.autoRotate&&(o._transform||o._enableTransforms(!1),c.autoRotate=o._target._gsTransform,c.proxy.rotation=c.autoRotate.rotation||0,o._overwriteProps.push("rotation")),l._onInitTween(c.proxy,m,o._tween),a}})}},_._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)e=t[i[n]],e&&"function"==typeof e&&(this._mod[i[n]]=e)},_._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)}}(),i._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var n,r,s,o,a=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},l=i._gsDefine.globals,u={},h=a.prototype=new t("css");h.constructor=a,a.version="1.19.0",a.API=2,a.defaultTransformPerspective=0,a.defaultSkewType="compensated",a.defaultSmoothOrigin=!0,h="px",a.suffixMap={top:h,right:h,bottom:h,left:h,width:h,height:h,fontSize:h,padding:h,margin:h,perspective:h,lineHeight:""};var c,f,p,d,m,g,_,v,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,x=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,w=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,T=/(?:\d|\-|\+|=|#|\.)*/g,P=/opacity *= *([^)]*)/i,k=/opacity:([^;]*)/i,S=/alpha\(opacity *=.+?\)/i,C=/^(rgb|hsl)/,O=/([A-Z])/g,A=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,D=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,N=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,F=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,E=/,(?=[^\)]*(?:\(|$))/gi,L=/[\s,\(]/i,j=Math.PI/180,X=180/Math.PI,I={},B=document,z=function(t){return B.createElementNS?B.createElementNS("http://www.w3.org/1999/xhtml",t):B.createElement(t)},Y=z("div"),q=z("img"),W=a._internals={_specialProps:u},V=navigator.userAgent,H=function(){var t=V.indexOf("Android"),e=z("a");return p=V.indexOf("Safari")!==-1&&V.indexOf("Chrome")===-1&&(t===-1||Number(V.substr(t+8,1))>3),m=p&&Number(V.substr(V.indexOf("Version/")+8,1))<6,d=V.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(V)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(V))&&(g=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),U=function(t){return P.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},$=function(t){window.console&&console.log(t)},G="",Z="",Q=function(t,e){e=e||Y;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Z=3===n?"ms":i[n],G="-"+Z.toLowerCase()+"-",Z+t):null},K=B.defaultView?B.defaultView.getComputedStyle:function(){},J=a.getStyle=function(t,e,i,n,r){var s;return H||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(O,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):U(t)},tt=W.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var o,l,u,h=M.test(i),c=t,f=Y.style,p=n<0,d=1===n;if(p&&(n=-n),d&&(n*=100),"%"===r&&i.indexOf("border")!==-1)o=n/100*(h?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[h?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(c=t.parentNode||B.body,l=c._gsCache,u=e.ticker.frame,l&&h&&l.time===u)return l.width*n/100;f[h?"width":"height"]=n+r}c.appendChild(Y),o=parseFloat(Y[h?"offsetWidth":"offsetHeight"]),c.removeChild(Y),h&&"%"===r&&a.cacheWidths!==!1&&(l=c._gsCache=c._gsCache||{},l.time=u,l.width=o/n*100),0!==o||s||(o=tt(t,i,n,r,!0))}return d&&(o/=100),p?-o:o},et=W.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(T,""))||0)},it=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)r=e[i],r.indexOf("-transform")!==-1&&At!==r||(s[r.replace(A,D)]=e.getPropertyValue(r));else for(i in e)i.indexOf("Transform")!==-1&&Ot!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(A,D)]=e[i]);return H||(s.opacity=U(t)),n=Yt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Dt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},nt=function(t,e,i,n,r){var s,o,a,l={},u=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&o.indexOf("Origin")===-1&&("number"!=typeof s&&"string"!=typeof s||(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(b,"")?s:0:et(t,o),void 0!==u[o]&&(a=new vt(u,o,u[o],a))));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},rt={width:["Left","Right"],height:["Top","Bottom"]},st=["marginLeft","marginRight","marginTop","marginBottom"],ot=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getBBox&&It(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(J(t,"padding"+r[s],i,!0))||0,n-=parseFloat(J(t,"border"+r[s]+"Width",i,!0))||0;return n},at=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":n[0],s=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(at(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&(r+"").indexOf("=")===-1)&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=r.indexOf("%")!==-1,e.oyp=s.indexOf("%")!==-1,e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ut=function(t,e){return"function"==typeof t&&(t=t(v,_)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ht=function(t,e,i,n){var r,s,o,a,l,u=1e-6;return"function"==typeof t&&(t=t(v,_)),null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),l="="===t.charAt(1),o=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(t.indexOf("rad")===-1?1:X)-(l?0:e),s.length&&(n&&(n[i]=e+o),t.indexOf("short")!==-1&&(o%=r,o!==o%(r/2)&&(o=o<0?o+r:o-r)),t.indexOf("_cw")!==-1&&o<0?o=(o+9999999999*r)%r-(o/r|0)*r:t.indexOf("ccw")!==-1&&o>0&&(o=(o-9999999999*r)%r-(o/r|0)*r)),a=e+o),a<u&&a>-u&&(a=0),a},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},pt=a.parseColor=function(t,e){var i,n,r,s,o,a,l,u,h,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(t.indexOf("=")!==-1)return t.match(x)}else o=Number(i[0])%360/360,a=Number(i[1])/100,l=Number(i[2])/100,r=l<=.5?l*(a+1):l+a-l*a,n=2*l-r,i.length>3&&(i[3]=Number(t[3])),i[0]=ft(o+1/3,n,r),i[1]=ft(o,n,r),i[2]=ft(o-1/3,n,r);else i=t.match(y)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,u=Math.max(n,r,s),h=Math.min(n,r,s),l=(u+h)/2,u===h?o=a=0:(c=u-h,a=l>.5?c/(2-u-h):c/(u+h),o=u===n?(r-s)/c+(r<s?6:0):u===r?(s-n)/c+2:(n-r)/c+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(mt)||[],o=0,a=s.length?"":t;for(i=0;i<s.length;i++)n=s[i],r=t.substr(o,t.indexOf(n,o)-o),o+=r.length+n.length,n=pt(n,e),3===n.length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},mt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(h in ct)mt+="|"+h+"\\b";mt=new RegExp(mt+")","gi"),a.colorStringFilter=function(t){var e,i=t[0]+t[1];mt.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=dt(t[0],e),t[1]=dt(t[1],e)),mt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=a.colorStringFilter);var gt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(mt)||[""])[0]:"",o=t.split(s).join("").match(w)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",u=t.indexOf(" ")!==-1?" ":",",h=o.length,c=h>0?o[0].replace(y,""):"";return h?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(d=t.replace(E,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(mt)||[s])[0],f=t.split(e).join("").match(w)||[],p=f.length,h>p--)for(;++p<h;)f[p]=i?f[(p-1)/2|0]:o[p];return a+f.join(u)+u+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(s=t.replace(E,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(e=t.match(w)||[],f=e.length,h>f--)for(;++f<h;)e[f]=i?e[(f-1)/2|0]:o[f];return a+e.join(u)+l}:function(t){return t}},_t=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,u=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=u[l]=u[l]||u[(l-1)/2>>0];return r.parse(e,a,s,o)}},vt=(W._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,l=o.firstMPT,u=1e-6;l;)e=a[l.v],l.r?e=Math.round(e):e<u&&e>-u&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod(a.rotation,this.t):a.rotation),1===t||0===t)for(l=o.firstMPT,s=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(W._parseToProxy=function(t,e,i,n,r,s){var o,a,l,u,h,c=n,f={},p={},d=i._transform,m=I;for(i._transform=null,I=e,n=h=i.parse(t,e,n,r),I=m,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(a=n.p,p[a]=n.s+n.c,f[a]=n.s,s||(u=new vt(n,"s",a,u,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,a=n.p+"_"+l,p[a]=n.data[l],f[a]=n[l],s||(u=new vt(n,l,a,u,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:u,pt:h}},W.CSSPropTween=function(t,e,i,r,s,a,l,u,h,c,f){this.t=t,this.p=e,this.s=i,this.c=r,this.n=l||e,t instanceof yt||o.push(this.n),this.r=u,this.type=a||0,h&&(this.pr=h,n=!0),this.b=void 0===c?i:c,this.e=void 0===f?i+r:f,s&&(this._next=s,s._prev=this)}),xt=function(t,e,i,n,r,s){var o=new yt(t,e,i,n-i,r,(-1),s);return o.b=i,o.e=o.xs0=n,o},wt=a.parseComplex=function(t,e,i,n,r,s,o,l,u,h){i=i||s||"","function"==typeof n&&(n=n(v,_)),o=new yt(t,e,0,0,o,h?2:1,null,(!1),l,i,n),n+="",r&&mt.test(n+i)&&(n=[i,n],a.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,m,g,w,b,T,P,k,S,C,O,A=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),D=A.length,M=c!==!1;for(n.indexOf(",")===-1&&i.indexOf(",")===-1||(A=A.join(" ").replace(E,", ").split(" "),R=R.join(" ").replace(E,", ").split(" "),D=A.length),D!==R.length&&(A=(s||"").split(" "),D=A.length),o.plugin=u,o.setRatio=h,mt.lastIndex=0,f=0;f<D;f++)if(m=A[f],g=R[f],T=parseFloat(m),T||0===T)o.appendXtra("",T,lt(g,T),g.replace(x,""),M&&g.indexOf("px")!==-1,!0);else if(r&&mt.test(m))C=g.indexOf(")")+1,C=")"+(C?g.substr(C):""),O=g.indexOf("hsl")!==-1&&H,m=pt(m,O),g=pt(g,O),P=m.length+g.length>6,P&&!H&&0===g[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(R[f]).join("transparent")):(H||(P=!1),O?o.appendXtra(P?"hsla(":"hsl(",m[0],lt(g[0],m[0]),",",!1,!0).appendXtra("",m[1],lt(g[1],m[1]),"%,",!1).appendXtra("",m[2],lt(g[2],m[2]),P?"%,":"%"+C,!1):o.appendXtra(P?"rgba(":"rgb(",m[0],g[0]-m[0],",",!0,!0).appendXtra("",m[1],g[1]-m[1],",",!0).appendXtra("",m[2],g[2]-m[2],P?",":C,!0),P&&(m=m.length<4?1:m[3],o.appendXtra("",m,(g.length<4?1:g[3])-m,C,!1))),mt.lastIndex=0;else if(w=m.match(y)){if(b=g.match(x),!b||b.length!==w.length)return o;for(d=0,p=0;p<w.length;p++)S=w[p],k=m.indexOf(S,d),o.appendXtra(m.substr(d,k-d),Number(S),lt(b[p],S),"",M&&"px"===m.substr(k+S.length,2),0===p),d=k+S.length;o["xs"+o.l]+=m.substr(d)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+g:g;if(n.indexOf("=")!==-1&&o.data){for(C=o.xs0+o.data.s,f=1;f<o.l;f++)C+=o["xs"+f]+o.data["xn"+f];o.e=C+o["xs"+f]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},bt=9;for(h=yt.prototype,h.l=h.pr=0;--bt>0;)h["xn"+bt]=0,h["xs"+bt]="";h.xs0="",h._next=h._prev=h.xfirst=h.data=h.plugin=h.setRatio=h.rxp=null,h.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new yt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var Tt=function(t,e){e=e||{},this.p=e.prefix?Q(t)||t:t,u[t]=u[this.p]=this,this.format=e.formatter||gt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=W._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;n<s.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,r=new Tt(s[n],e)},kt=W._registerPluginProp=function(t){if(!u[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,o,a){var h=l.com.greensock.plugins[e];return h?(h._cssRegister(),u[n].parse(t,i,n,r,s,o,a)):($("Error: "+e+" js file not loaded."),s)}})}};h=Tt.prototype,h.parseComplex=function(t,e,i,n,r,s){var o,a,l,u,h,c,f=this.keyword;if(this.multi&&(E.test(i)||E.test(e)?(a=e.replace(E,"|").split("|"),l=i.replace(E,"|").split("|")):f&&(a=[e],l=[i])),l){for(u=l.length>a.length?l.length:a.length,o=0;o<u;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(h=e.indexOf(f),c=i.indexOf(f),h!==c&&(c===-1?a[o]=a[o].split(f).join(""):h===-1&&(a[o]+=" "+f)));e=a.join(", "),i=l.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},h.parse=function(t,e,i,n,r,o,a){return this.parseComplex(t.style,this.format(J(t,this.p,s,!1,this.dflt)),this.format(e),r,o)},a.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,o,a,l){var u=new yt(t,r,0,0,o,2,r,(!1),i);return u.plugin=a,u.setRatio=e(t,n,s._tween,r),u},priority:i})},a.useSVGTransformAttr=p||d;var St,Ct="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ot=Q("transform"),At=G+"transform",Rt=Q("transformOrigin"),Dt=null!==Q("perspective"),Mt=W.Transform=function(){this.perspective=parseFloat(a.defaultTransformPerspective)||0,this.force3D=!(a.defaultForce3D===!1||!Dt)&&(a.defaultForce3D||"auto")},Nt=window.SVGElement,Ft=function(t,e,i){var n,r=B.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Et=B.documentElement,Lt=function(){var t,e,i,n=g||/Android/i.test(V)&&!window.chrome;return B.createElementNS&&!n&&(t=Ft("svg",Et),e=Ft("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[Ot]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Et.removeChild(t)),n}(),jt=function(t,e,i,n,r,s){var o,l,u,h,c,f,p,d,m,g,_,v,y,x,w=t._gsTransform,b=zt(t,!0);w&&(y=w.xOrigin,x=w.yOrigin),(!n||(o=n.split(" ")).length<2)&&(p=t.getBBox(),e=at(e).split(" "),o=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=h=parseFloat(o[0]),i.yOrigin=c=parseFloat(o[1]),n&&b!==Bt&&(f=b[0],p=b[1],d=b[2],m=b[3],g=b[4],_=b[5],v=f*m-p*d,l=h*(m/v)+c*(-d/v)+(d*_-m*g)/v,u=h*(-p/v)+c*(f/v)-(f*_-p*g)/v,h=i.xOrigin=o[0]=l,c=i.yOrigin=o[1]=u),w&&(s&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),r||r!==!1&&a.defaultSmoothOrigin!==!1?(l=h-y,u=c-x,w.xOffset+=l*b[0]+u*b[2]-l,w.yOffset+=l*b[1]+u*b[3]-u):w.xOffset=w.yOffset=0),s||t.setAttribute("data-svg-origin",o.join(" "))},Xt=function(t){try{return t.getBBox()}catch(t){}},It=function(t){return!!(Nt&&t.getBBox&&t.getCTM&&Xt(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},Bt=[1,0,0,1,0,0],zt=function(t,e){var i,n,r,s,o,a,l=t._gsTransform||new Mt,u=1e5,h=t.style;if(Ot?n=J(t,At,null,!0):t.currentStyle&&(n=t.currentStyle.filter.match(N),n=n&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,i&&Ot&&((a="none"===K(t).display)||!t.parentNode)&&(a&&(s=h.display,h.display="block"),t.parentNode||(o=1,Et.appendChild(t)),n=J(t,At,null,!0),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?h.display=s:a&&Ht(h,"display"),o&&Et.removeChild(t)),(l.svg||t.getBBox&&It(t))&&(i&&(h[Ot]+"").indexOf("matrix")!==-1&&(n=h[Ot],i=0),r=t.getAttribute("transform"),i&&r&&(r.indexOf("matrix")!==-1?(n=r,i=0):r.indexOf("translate")!==-1&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return Bt;for(r=(n||"").match(y)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(o=s-(s|=0))?(o*u+(o<0?-.5:.5)|0)/u+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Yt=W.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var s,o,l,u,h,c,f=n?t._gsTransform||new Mt:new Mt,p=f.scaleX<0,d=2e-5,m=1e5,g=Dt?parseFloat(J(t,Rt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,_=parseFloat(a.defaultTransformPerspective)||0;if(f.svg=!(!t.getBBox||!It(t)),f.svg&&(jt(t,J(t,Rt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),St=a.useSVGTransformAttr||Lt),s=zt(t),s!==Bt){if(16===s.length){var v,y,x,w,b,T=s[0],P=s[1],k=s[2],S=s[3],C=s[4],O=s[5],A=s[6],R=s[7],D=s[8],M=s[9],N=s[10],F=s[12],E=s[13],L=s[14],j=s[11],I=Math.atan2(A,N);f.zOrigin&&(L=-f.zOrigin,F=D*L-s[12],E=M*L-s[13],L=N*L+f.zOrigin-s[14]),f.rotationX=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),v=C*w+D*b,y=O*w+M*b,x=A*w+N*b,D=C*-b+D*w,M=O*-b+M*w,N=A*-b+N*w,j=R*-b+j*w,C=v,O=y,A=x),I=Math.atan2(-k,N),f.rotationY=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),v=T*w-D*b,y=P*w-M*b,x=k*w-N*b,M=P*b+M*w,N=k*b+N*w,j=S*b+j*w,T=v,P=y,k=x),I=Math.atan2(P,T),f.rotation=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),T=T*w+C*b,y=P*w+O*b,O=P*-b+O*w,A=k*-b+A*w,P=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),f.scaleX=(Math.sqrt(T*T+P*P)*m+.5|0)/m,f.scaleY=(Math.sqrt(O*O+M*M)*m+.5|0)/m,f.scaleZ=(Math.sqrt(A*A+N*N)*m+.5|0)/m,f.rotationX||f.rotationY?f.skewX=0:(f.skewX=C||O?Math.atan2(C,O)*X+f.rotation:f.skewX||0,Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180))),f.perspective=j?1/(j<0?-j:j):0,f.x=F,f.y=E,f.z=L,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*T-f.yOrigin*C),f.y-=f.yOrigin-(f.yOrigin*P-f.xOrigin*O))}else if(!Dt||r||!s.length||f.x!==s[4]||f.y!==s[5]||!f.rotationX&&!f.rotationY){var B=s.length>=6,z=B?s[0]:1,Y=s[1]||0,q=s[2]||0,W=B?s[3]:1;f.x=s[4]||0,f.y=s[5]||0,l=Math.sqrt(z*z+Y*Y),u=Math.sqrt(W*W+q*q),h=z||Y?Math.atan2(Y,z)*X:f.rotation||0,c=q||W?Math.atan2(q,W)*X+h:f.skewX||0,Math.abs(c)>90&&Math.abs(c)<270&&(p?(l*=-1,c+=h<=0?180:-180,h+=h<=0?180:-180):(u*=-1,c+=c<=0?180:-180)),f.scaleX=l,f.scaleY=u,f.rotation=h,f.skewX=c,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*z+f.yOrigin*q),f.y-=f.yOrigin-(f.xOrigin*Y+f.yOrigin*W))}f.zOrigin=g;for(o in f)f[o]<d&&f[o]>-d&&(f[o]=0)}return n&&(t._gsTransform=f,f.svg&&(St&&t.style[Ot]?e.delayedCall(.001,function(){Ht(t.style,Ot)}):!St&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},qt=function(t){var e,i,n=this.data,r=-n.rotation*j,s=r+n.skewX*j,o=1e5,a=(Math.cos(r)*n.scaleX*o|0)/o,l=(Math.sin(r)*n.scaleX*o|0)/o,u=(Math.sin(s)*-n.scaleY*o|0)/o,h=(Math.cos(s)*n.scaleY*o|0)/o,c=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-u,u=-i,e=f.filter,c.filter="";var p,d,m=this.t.offsetWidth,_=this.t.offsetHeight,v="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+u+", M22="+h,x=n.x+m*n.xPercent/100,w=n.y+_*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?m*n.ox*.01:n.ox)-m/2,d=(n.oyp?_*n.oy*.01:n.oy)-_/2,x+=p-(p*a+d*l),w+=d-(p*u+d*h)),v?(p=m/2,d=_/2,y+=", Dx="+(p-(p*a+d*l)+x)+", Dy="+(d-(p*u+d*h)+w)+")"):y+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?c.filter=e.replace(F,y):c.filter=y+" "+e,0!==t&&1!==t||1===a&&0===l&&0===u&&1===h&&(v&&y.indexOf("Dx=0, Dy=0")===-1||P.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&c.removeAttribute("filter")),!v){var b,k,S,C=g<8?1:-1;for(p=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((m-((a<0?-a:a)*m+(l<0?-l:l)*_))/2+x),n.ieOffsetY=Math.round((_-((h<0?-h:h)*_+(u<0?-u:u)*m))/2+w),bt=0;bt<4;bt++)k=st[bt],b=f[k],i=b.indexOf("px")!==-1?parseFloat(b):tt(this.t,k,parseFloat(b),b.replace(T,""))||0,S=i!==n[k]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?p-n.ieOffsetX:d-n.ieOffsetY,c[k]=(n[k]=Math.round(i-S*(0===bt||2===bt?1:C)))+"px"}}},Wt=W.set3DTransformRatio=W.setTransformRatio=function(t){var e,i,n,r,s,o,a,l,u,h,c,f,p,m,g,_,v,y,x,w,b,T,P,k=this.data,S=this.t.style,C=k.rotation,O=k.rotationX,A=k.rotationY,R=k.scaleX,D=k.scaleY,M=k.scaleZ,N=k.x,F=k.y,E=k.z,L=k.svg,X=k.perspective,I=k.force3D;if(((1===t||0===t)&&"auto"===I&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!I)&&!E&&!X&&!A&&!O&&1===M||St&&L||!Dt)return void(C||k.skewX||L?(C*=j,T=k.skewX*j,P=1e5,e=Math.cos(C)*R,r=Math.sin(C)*R,i=Math.sin(C-T)*-D,s=Math.cos(C-T)*D,T&&"simple"===k.skewType&&(v=Math.tan(T-k.skewY*j),v=Math.sqrt(1+v*v),i*=v,s*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v)),L&&(N+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,F+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset,St&&(k.xPercent||k.yPercent)&&(m=this.t.getBBox(),N+=.01*k.xPercent*m.width,F+=.01*k.yPercent*m.height),m=1e-6,N<m&&N>-m&&(N=0),F<m&&F>-m&&(F=0)),x=(e*P|0)/P+","+(r*P|0)/P+","+(i*P|0)/P+","+(s*P|0)/P+","+N+","+F+")",L&&St?this.t.setAttribute("transform","matrix("+x):S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+x):S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+D+","+N+","+F+")");if(d&&(m=1e-4,R<m&&R>-m&&(R=M=2e-5),D<m&&D>-m&&(D=M=2e-5),!X||k.z||k.rotationX||k.rotationY||(X=0)),C||k.skewX)C*=j,g=e=Math.cos(C),_=r=Math.sin(C),k.skewX&&(C-=k.skewX*j,g=Math.cos(C),_=Math.sin(C),"simple"===k.skewType&&(v=Math.tan((k.skewX-k.skewY)*j),v=Math.sqrt(1+v*v),g*=v,_*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v))),i=-_,s=g;else{if(!(A||O||1!==M||X||L))return void(S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) translate3d(":"translate3d(")+N+"px,"+F+"px,"+E+"px)"+(1!==R||1!==D?" scale("+R+","+D+")":""));e=s=1,i=r=0}u=1,n=o=a=l=h=c=0,f=X?-1/X:0,p=k.zOrigin,m=1e-6,w=",",b="0",C=A*j,C&&(g=Math.cos(C),_=Math.sin(C),a=-_,h=f*-_,n=e*_,o=r*_,u=g,f*=g,e*=g,r*=g),C=O*j,C&&(g=Math.cos(C),_=Math.sin(C),v=i*g+n*_,y=s*g+o*_,l=u*_,c=f*_,n=i*-_+n*g,o=s*-_+o*g,u*=g,f*=g,i=v,s=y),1!==M&&(n*=M,o*=M,u*=M,f*=M),1!==D&&(i*=D,s*=D,l*=D,c*=D),1!==R&&(e*=R,r*=R,a*=R,h*=R),(p||L)&&(p&&(N+=n*-p,F+=o*-p,E+=u*-p+p),L&&(N+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,F+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset),N<m&&N>-m&&(N=b),F<m&&F>-m&&(F=b),E<m&&E>-m&&(E=0)),x=k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix3d(":"matrix3d(",x+=(e<m&&e>-m?b:e)+w+(r<m&&r>-m?b:r)+w+(a<m&&a>-m?b:a),x+=w+(h<m&&h>-m?b:h)+w+(i<m&&i>-m?b:i)+w+(s<m&&s>-m?b:s),O||A||1!==M?(x+=w+(l<m&&l>-m?b:l)+w+(c<m&&c>-m?b:c)+w+(n<m&&n>-m?b:n),x+=w+(o<m&&o>-m?b:o)+w+(u<m&&u>-m?b:u)+w+(f<m&&f>-m?b:f)+w):x+=",0,0,0,0,1,0,",x+=N+w+F+w+E+w+(X?1+-E/X:1)+")",S[Ot]=x};h=Mt.prototype,h.x=h.y=h.z=h.skewX=h.skewY=h.rotation=h.rotationX=h.rotationY=h.zOrigin=h.xPercent=h.yPercent=h.xOffset=h.yOffset=0,h.scaleX=h.scaleY=h.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,r,o,l){if(n._lastParsedTransform===l)return r;n._lastParsedTransform=l;var u;"function"==typeof l[i]&&(u=l[i],l[i]=e);var h,c,f,p,d,m,g,y,x,w=t._gsTransform,b=t.style,T=1e-6,P=Ct.length,k=l,S={},C="transformOrigin",O=Yt(t,s,!0,k.parseTransform),A=k.transform&&("function"==typeof k.transform?k.transform(v,_):k.transform);if(n._transform=O,A&&"string"==typeof A&&Ot)c=Y.style,c[Ot]=A,c.display="block",c.position="absolute",B.body.appendChild(Y),h=Yt(Y,null,!1),O.svg&&(m=O.xOrigin,g=O.yOrigin,h.x-=O.xOffset,h.y-=O.yOffset,(k.transformOrigin||k.svgOrigin)&&(A={},jt(t,at(k.transformOrigin),A,k.svgOrigin,k.smoothOrigin,!0),m=A.xOrigin,g=A.yOrigin,h.x-=A.xOffset-O.xOffset,h.y-=A.yOffset-O.yOffset),(m||g)&&(y=zt(Y,!0),h.x-=m-(m*y[0]+g*y[2]),h.y-=g-(m*y[1]+g*y[3]))),B.body.removeChild(Y),h.perspective||(h.perspective=O.perspective),null!=k.xPercent&&(h.xPercent=ut(k.xPercent,O.xPercent)),null!=k.yPercent&&(h.yPercent=ut(k.yPercent,O.yPercent));else if("object"==typeof k){if(h={scaleX:ut(null!=k.scaleX?k.scaleX:k.scale,O.scaleX),scaleY:ut(null!=k.scaleY?k.scaleY:k.scale,O.scaleY),scaleZ:ut(k.scaleZ,O.scaleZ),x:ut(k.x,O.x),y:ut(k.y,O.y),z:ut(k.z,O.z),xPercent:ut(k.xPercent,O.xPercent),yPercent:ut(k.yPercent,O.yPercent),perspective:ut(k.transformPerspective,O.perspective)},d=k.directionalRotation,null!=d)if("object"==typeof d)for(c in d)k[c]=d[c];else k.rotation=d;"string"==typeof k.x&&k.x.indexOf("%")!==-1&&(h.x=0,h.xPercent=ut(k.x,O.xPercent)),"string"==typeof k.y&&k.y.indexOf("%")!==-1&&(h.y=0,h.yPercent=ut(k.y,O.yPercent)),h.rotation=ht("rotation"in k?k.rotation:"shortRotation"in k?k.shortRotation+"_short":"rotationZ"in k?k.rotationZ:O.rotation-O.skewY,O.rotation-O.skewY,"rotation",S),Dt&&(h.rotationX=ht("rotationX"in k?k.rotationX:"shortRotationX"in k?k.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",S),h.rotationY=ht("rotationY"in k?k.rotationY:"shortRotationY"in k?k.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",S)),h.skewX=ht(k.skewX,O.skewX-O.skewY),(h.skewY=ht(k.skewY,O.skewY))&&(h.skewX+=h.skewY,h.rotation+=h.skewY)}for(Dt&&null!=k.force3D&&(O.force3D=k.force3D,p=!0),O.skewType=k.skewType||O.skewType||a.defaultSkewType,f=O.force3D||O.z||O.rotationX||O.rotationY||h.z||h.rotationX||h.rotationY||h.perspective,f||null==k.scale||(h.scaleZ=1);--P>-1;)x=Ct[P],A=h[x]-O[x],
(A>T||A<-T||null!=k[x]||null!=I[x])&&(p=!0,r=new yt(O,x,O[x],A,r),x in S&&(r.e=S[x]),r.xs0=0,r.plugin=o,n._overwriteProps.push(r.n));return A=k.transformOrigin,O.svg&&(A||k.svgOrigin)&&(m=O.xOffset,g=O.yOffset,jt(t,at(A),h,k.svgOrigin,k.smoothOrigin),r=xt(O,"xOrigin",(w?O:h).xOrigin,h.xOrigin,r,C),r=xt(O,"yOrigin",(w?O:h).yOrigin,h.yOrigin,r,C),m===O.xOffset&&g===O.yOffset||(r=xt(O,"xOffset",w?m:O.xOffset,O.xOffset,r,C),r=xt(O,"yOffset",w?g:O.yOffset,O.yOffset,r,C)),A=St?null:"0px 0px"),(A||Dt&&f&&O.zOrigin)&&(Ot?(p=!0,x=Rt,A=(A||J(t,x,s,!1,"50% 50%"))+"",r=new yt(b,x,0,0,r,(-1),C),r.b=b[x],r.plugin=o,Dt?(c=O.zOrigin,A=A.split(" "),O.zOrigin=(A.length>2&&(0===c||"0px"!==A[2])?parseFloat(A[2]):c)||0,r.xs0=r.e=A[0]+" "+(A[1]||"50%")+" 0px",r=new yt(O,"zOrigin",0,0,r,(-1),r.n),r.b=c,r.xs0=r.e=O.zOrigin):r.xs0=r.e=A):at(A+"",O)),p&&(n._transformType=O.svg&&St||!f&&3!==this._transformType?2:3),u&&(l[i]=u),r},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,o,a){e=this.format(e);var l,u,h,c,f,p,d,m,g,_,v,y,x,w,b,T,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(g=parseFloat(t.offsetWidth),_=parseFloat(t.offsetHeight),l=e.split(" "),u=0;u<P.length;u++)this.p.indexOf("border")&&(P[u]=Q(P[u])),f=c=J(t,P[u],s,!1,"0px"),f.indexOf(" ")!==-1&&(c=f.split(" "),f=c[0],c=c[1]),p=h=l[u],d=parseFloat(f),y=f.substr((d+"").length),x="="===p.charAt(1),x?(m=parseInt(p.charAt(0)+"1",10),p=p.substr(2),m*=parseFloat(p),v=p.substr((m+"").length-(m<0?1:0))||""):(m=parseFloat(p),v=p.substr((m+"").length)),""===v&&(v=r[i]||y),v!==y&&(w=tt(t,"borderLeft",d,y),b=tt(t,"borderTop",d,y),"%"===v?(f=w/g*100+"%",c=b/_*100+"%"):"em"===v?(T=tt(t,"borderLeft",1,"em"),f=w/T+"em",c=b/T+"em"):(f=w+"px",c=b+"px"),x&&(p=parseFloat(f)+m+v,h=parseFloat(c)+m+v)),o=wt(k,P[u],f+" "+c,p+" "+h,!1,"0px",o);return o},prefix:!0,formatter:gt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,r,o){return wt(t.style,i,this.format(J(t,i,s,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:gt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,r,o){var a,l,u,h,c,f,p="background-position",d=s||K(t,null),m=this.format((d?g?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),_=this.format(e);if(m.indexOf("%")!==-1!=(_.indexOf("%")!==-1)&&_.split(",").length<2&&(f=J(t,"backgroundImage").replace(R,""),f&&"none"!==f)){for(a=m.split(" "),l=_.split(" "),q.setAttribute("src",f),u=2;--u>-1;)m=a[u],h=m.indexOf("%")!==-1,h!==(l[u].indexOf("%")!==-1)&&(c=0===u?t.offsetWidth-q.width:t.offsetHeight-q.height,a[u]=h?parseFloat(m)/100*c+"px":parseFloat(m)/c*100+"%");m=a.join(" ")}return this.parseComplex(t.style,m,_,r,o)},formatter:at}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",at(t.indexOf(" ")===-1?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:_t("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:_t("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,r,o){var a,l,u;return g<9?(l=t.currentStyle,u=g<8?" ":",",a="rect("+l.clipTop+u+l.clipRight+u+l.clipBottom+u+l.clipLeft+")",e=this.format(e).split(",").join(u)):(a=this.format(J(t,this.p,s,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,r,o)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,r,o){var a=J(t,"borderTopWidth",s,!1,"0px"),l=this.format(e).split(" "),u=l[0].replace(T,"");return"px"!==u&&(a=parseFloat(a)/tt(t,"borderTopWidth",1,u)+u),this.parseComplex(t.style,this.format(a+" "+J(t,"borderTopStyle",s,!1,"solid")+" "+J(t,"borderTopColor",s,!1,"#000")),l.join(" "),r,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(mt)||["#000"])[0]}}),Pt("borderWidth",{parser:_t("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new yt(o,a,0,0,r,(-1),i,(!1),0,o[a],e)}});var Vt=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(n.indexOf("atrix(")===-1&&n.indexOf("radient(")===-1&&n.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(S,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),n.indexOf("pacity")===-1?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(P,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,r,o){var a=parseFloat(J(t,"opacity",s,!1,"1")),l=t.style,u="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),u&&1===a&&"hidden"===J(t,"visibility",s)&&0!==e&&(a=0),H?r=new yt(l,"opacity",a,e-a,r):(r=new yt(l,"opacity",100*a,100*(e-a),r),r.xn1=u?1:0,l.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=o,r.setRatio=Vt),u&&(r=new yt(l,"visibility",0,0,r,(-1),null,(!1),0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),r.xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Ht=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(O,"-$1").toLowerCase())):t.removeAttribute(e))},Ut=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ht(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,i,r,o,a,l){var u,h,c,f,p,d=t.getAttribute("class")||"",m=t.style.cssText;if(o=r._classNamePT=new yt(t,i,0,0,o,2),o.setRatio=Ut,o.pr=-11,n=!0,o.b=d,h=it(t,s),c=t._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=o,o.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",o.e),u=nt(t,h,it(t),l,f),t.setAttribute("class",d),o.data=u.firstMPT,t.style.cssText=m,o=o.xfirst=r.parse(t,u.difs,o,a)}});var $t=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,a=u.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],u[i]&&(u[i].parse===a?r=!0:i="transformOrigin"===i?Rt:u[i].p),Ht(o,i);r&&(Ht(o,Ot),s=this.t._gsTransform,s&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,i,r,s){return s=new yt(t,i,0,0,s,2),s.setRatio=$t,s.e=e,s.pr=-10,s.data=r._tween,n=!0,s}}),h="bezier,throwProps,physicsProps,physics2D".split(","),bt=h.length;bt--;)kt(h[bt]);h=a.prototype,h._firstPT=h._lastParsedTransform=h._transform=null,h._onInitTween=function(t,e,i,l){if(!t.nodeType)return!1;this._target=_=t,this._tween=i,this._vars=e,v=l,c=e.autoRound,n=!1,r=e.suffixMap||a.suffixMap,s=K(t,""),o=this._overwriteProps;var h,d,g,y,x,w,b,T,P,S=t.style;if(f&&""===S.zIndex&&(h=J(t,"zIndex",s),"auto"!==h&&""!==h||this._addLazySet(S,"zIndex",0)),"string"==typeof e&&(y=S.cssText,h=it(t,s),S.cssText=y+";"+e,h=nt(t,h,it(t)).difs,!H&&k.test(e)&&(h.opacity=parseFloat(RegExp.$1)),e=h,S.cssText=y),e.className?this._firstPT=d=u.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(P=3===this._transformType,Ot?p&&(f=!0,""===S.zIndex&&(b=J(t,"zIndex",s),"auto"!==b&&""!==b||this._addLazySet(S,"zIndex",0)),m&&this._addLazySet(S,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):S.zoom=1,g=d;g&&g._next;)g=g._next;T=new yt(t,"transform",0,0,null,2),this._linkCSSP(T,null,g),T.setRatio=Ot?Wt:qt,T.data=this._transform||Yt(t,s,!0),T.tween=i,T.pr=-1,o.pop()}if(n){for(;d;){for(w=d._next,g=y;g&&g.pr>d.pr;)g=g._next;(d._prev=g?g._prev:x)?d._prev._next=d:y=d,(d._next=g)?g._prev=d:x=d,d=w}this._firstPT=y}return!0},h.parse=function(t,e,i,n){var o,a,l,h,f,p,d,m,g,y,x=t.style;for(o in e)p=e[o],"function"==typeof p&&(p=p(v,_)),a=u[o],a?i=a.parse(t,p,o,this,i,n,e):(f=J(t,o,s)+"",g="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||o.indexOf("Color")!==-1||g&&C.test(p)?(g||(p=pt(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=wt(x,o,f,p,!0,"transparent",i,0,n)):g&&L.test(p)?i=wt(x,o,f,p,!0,null,i,0,n):(l=parseFloat(f),d=l||0===l?f.substr((l+"").length):"",""!==f&&"auto"!==f||("width"===o||"height"===o?(l=ot(t,o,s),d="px"):"left"===o||"top"===o?(l=et(t,o,s),d="px"):(l="opacity"!==o?0:1,d="")),y=g&&"="===p.charAt(1),y?(h=parseInt(p.charAt(0)+"1",10),p=p.substr(2),h*=parseFloat(p),m=p.replace(T,"")):(h=parseFloat(p),m=g?p.replace(T,""):""),""===m&&(m=o in r?r[o]:d),p=h||0===h?(y?h+l:h)+m:e[o],d!==m&&""!==m&&(h||0===h)&&l&&(l=tt(t,o,l,d),"%"===m?(l/=tt(t,o,100,"%")/100,e.strictUnits!==!0&&(f=l+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?l/=tt(t,o,1,m):"px"!==m&&(h=tt(t,o,h,m),m="px"),y&&(h||0===h)&&(p=h+l+m)),y&&(h+=l),!l&&0!==l||!h&&0!==h?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(i=new yt(x,o,h||l||0,0,i,(-1),o,(!1),0,f,p),i.xs0="none"!==p||"display"!==o&&o.indexOf("Style")===-1?p:f):$("invalid "+o+" tween value: "+e[o]):(i=new yt(x,o,l,h-l,i,0,o,c!==!1&&("px"===m||"zIndex"===o),0,f,p),i.xs0=m))),n&&i&&!i.plugin&&(i.plugin=n);return i},h.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<s&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else r.type===-1?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&r.type!==-1)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},h._enableTransforms=function(t){this._transform=this._transform||Yt(this._target,s,!0),this._transformType=this._transform.svg&&St||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};h._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},h._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},h._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},h._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,s)};var Zt=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)Zt(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],o=s.type,s.style&&(e.push(it(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||Zt(s,e,i)};return a.cascadeTo=function(t,i,n){var r,s,o,a,l=e.to(t,i,n),u=[l],h=[],c=[],f=[],p=e._internals.reservedProps;for(t=l._targets||l.target,Zt(t,h,f),l.render(i,!0,!0),Zt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if(s=nt(f[r],h[r],c[r]),s.firstMPT){s=s.difs;for(o in n)p[o]&&(s[o]=n[o]);a={};for(o in s)a[o]=h[r][o];u.push(e.fromTo(f[r],i,a,s))}return u},t.activate([a]),a},!0),function(){var t=i._gsDefine.plugin({propName:"roundProps",version:"1.6.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),e=function(t){for(;t;)t.f||t.blob||(t.m=Math.round),t=t._next},n=t.prototype;n._onInitAllProps=function(){for(var t,i,n,r=this._tween,s=r.vars.roundProps.join?r.vars.roundProps:r.vars.roundProps.split(","),o=s.length,a={},l=r._propLookup.roundProps;--o>-1;)a[s[o]]=Math.round;for(o=s.length;--o>-1;)for(t=s[o],i=r._firstPT;i;)n=i._next,i.pg?i.t._mod(a):i.n===t&&(2===i.f&&i.t?e(i.t._firstPT):(this._add(i.t,t,i.s,i.c),n&&(n._prev=i._prev),i._prev?i._prev._next=n:r._firstPT===i&&(r._firstPT=n),i._next=i._prev=null,r._propLookup[t]=l)),i=n;return!1},n._add=function(t,e,i,n){this._addTween(t,e,i,i+n,e,Math.round),this._overwriteProps.push(e)}}(),function(){i._gsDefine.plugin({propName:"attr",API:2,version:"0.6.0",init:function(t,e,i,n){var r,s;if("function"!=typeof t.setAttribute)return!1;for(r in e)s=e[r],"function"==typeof s&&(s=s(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",s+"",r,!1,r),this._overwriteProps.push(r);return!0}})}(),i._gsDefine.plugin({propName:"directionalRotation",version:"0.3.0",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,s,o,a,l,u,h=e.useRadians===!0?2*Math.PI:360,c=1e-6;for(r in e)"useRadians"!==r&&(a=e[r],"function"==typeof a&&(a=a(n,t)),u=(a+"").split("_"),s=u[0],o=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),a=this.finals[r]="string"==typeof s&&"="===s.charAt(1)?o+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0,l=a-o,u.length&&(s=u.join("_"),s.indexOf("short")!==-1&&(l%=h,l!==l%(h/2)&&(l=l<0?l+h:l-h)),s.indexOf("_cw")!==-1&&l<0?l=(l+9999999999*h)%h-(l/h|0)*h:s.indexOf("ccw")!==-1&&l>0&&(l=(l-9999999999*h)%h-(l/h|0)*h)),(l>c||l<-c)&&(this._addTween(t,r,o,o+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,i._gsDefine("easing.Back",["easing.Ease"],function(t){var e,n,r,s=i.GreenSockGlobals||i,o=s.com.greensock,a=2*Math.PI,l=Math.PI/2,u=o._class,h=function(e,i){var n=u("easing."+e,function(){},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,n},c=t.register||function(){},f=function(t,e,i,n,r){var s=u("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return c(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(e,i){var n=u("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,r.config=function(t){return new n(t)},n},m=f("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),g=u("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),_=g.prototype=new t;return _.constructor=g,_.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},g.ease=new g(.7,.7),_.config=g.config=function(t,e,i){return new g(t,e,i)},e=u("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),_=e.prototype=new t,_.constructor=e,_.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},_.config=e.config=function(t){return new e(t)},n=u("easing.RoughEase",function(e){e=e||{};for(var i,n,r,s,o,a,l=e.taper||"none",u=[],h=0,c=0|(e.points||20),f=c,d=e.randomize!==!1,m=e.clamp===!0,g=e.template instanceof t?e.template:null,_="number"==typeof e.strength?.4*e.strength:.4;--f>-1;)i=d?Math.random():1/c*f,n=g?g.getRatio(i):i,"none"===l?r=_:"out"===l?(s=1-i,r=s*s*_):"in"===l?r=i*i*_:i<.5?(s=2*i,r=s*s*.5*_):(s=2*(1-i),r=s*s*.5*_),d?n+=Math.random()*r-.5*r:f%2?n+=.5*r:n-=.5*r,m&&(n>1?n=1:n<0&&(n=0)),u[h++]={x:i,y:n};for(u.sort(function(t,e){return t.x-e.x}),a=new p(1,1,null),f=c;--f>-1;)o=u[f],a=new p(o.x,o.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)},!0),_=n.prototype=new t,_.constructor=n,_.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},_.config=function(t){return new n(t)},n.ease=new n,f("Bounce",h("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),h("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),h("BounceInOut",function(t){var e=t<.5;return t=e?1-2*t:2*t-1,t=t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",h("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),h("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),h("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),r=function(e,i,n){var r=u("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||n)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),s=r.prototype=new t;return s.constructor=r,s.getRatio=i,s.config=function(t,e){return new r(t,e)},r},f("Elastic",r("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2))},.3),r("ElasticInOut",function(t){return(t*=2)<1?-.5*(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",h("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),h("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),h("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",h("SineOut",function(t){return Math.sin(t*l)}),h("SineIn",function(t){return-Math.cos(t*l)+1}),h("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),u("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),c(s.SlowMo,"SlowMo","ease,"),c(n,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),m},!0)}),i._gsDefine&&i._gsQueue.pop()(),function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,o,a,l,u,h=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=h("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},m=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),g={},_=function(s,o,a,l){this.sc=g[s]?g[s].sc:[],g[s]=this,this.gsClass=null,this.func=a;var u=[];this.check=function(c){for(var f,p,d,m,v,y=o.length,x=y;--y>-1;)(f=g[o[y]]||new _(o[y],[])).gsClass?(u[y]=f.gsClass,x--):c&&f.sc.push(this);if(0===x&&a){if(p=("com.greensock."+s).split("."),d=p.pop(),m=h(p.join("."))[d]=this.gsClass=a.apply(a,u),l)if(r[d]=n[d]=m,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return m});else if(v)if(s===i){e.exports=n[i]=m;for(y in n)m[y]=n[y]}else n[i]&&(n[i][d]=m);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new _(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var x=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?x.concat(e):x},!0),b=w.map={},T=w.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),u=l.length,h=(i||"easeIn,easeOut,easeInOut").split(",");--u>-1;)for(s=l[u],r=n?y("easing."+s,null,!0):c.easing[s]||{},o=h.length;--o>-1;)a=h[o],b[s+"."+a]=b[a+s]=r[a]=t.getRatio?t:t[a]||new t};for(a=w.prototype,a._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],o=s.length;--o>-1;)a=s[o]+",Power"+o,T(new w(null,null,1,o),a,"easeOut",!0),T(new w(null,null,2,o),a,"easeIn"+(0===o?",easeNone":"")),T(new w(null,null,3,o),a,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});a=P.prototype,a.addEventListener=function(t,e,i,n,r){r=r||0;var s,o,a=this._listeners[t],h=0;for(this!==l||u||l.wake(),null==a&&(this._listeners[t]=a=[]),o=a.length;--o>-1;)s=a[o],s.c===e&&s.s===i?a.splice(o,1):0===h&&s.pr<r&&(h=o+1);a.splice(h,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var k=t.requestAnimationFrame,S=t.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},O=C();for(s=["ms","moz","webkit","o"],o=s.length;--o>-1&&!k;)k=t[s[o]+"RequestAnimationFrame"],S=t[s[o]+"CancelAnimationFrame"]||t[s[o]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,o,a=this,h=C(),c=!(e===!1||!k)&&"auto",p=500,m=33,g="tick",_=function(t){var e,l,u=C()-O;u>p&&(h+=u-m),O+=u,a.time=(O-h)/1e3,e=a.time-o,(!i||e>0||t===!0)&&(a.frame++,o+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(_)),l&&a.dispatchEvent(g)};P.call(a),a.time=a.frame=0,a.tick=function(){_(!0)},a.lagSmoothing=function(t,e){p=t||1/f,m=Math.min(e,p,0)},a.sleep=function(){null!=r&&(c&&S?S(r):clearTimeout(r),n=d,r=null,a===l&&(u=!1))},a.wake=function(t){null!==r?a.sleep():t?h+=-O+(O=C()):a.frame>10&&(O=C()-p+5),n=0===i?d:c&&k?k:function(t){return setTimeout(t,1e3*(o-a.time)+1|0)},a===l&&(u=!0),_(2)},a.fps=function(t){return arguments.length?(i=t,s=1/(i||60),o=this.time+s,void a.wake()):i},a.useRAF=function(t){return arguments.length?(a.sleep(),c=t,void a.fps(i)):c},a.fps(t),setTimeout(function(){"auto"===c&&a.frame<5&&"hidden"!==document.visibilityState&&a.useRAF(!1)},1500)}),a=c.Ticker.prototype=new c.events.EventDispatcher,a.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){u||l.wake();var i=this.vars.useFrames?U:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,a=A.prototype,a._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var R=function(){u&&C()-O>2e3&&l.wake(),setTimeout(R,2e3)};R(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},a._enabled=function(t,e){return u||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=m(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(u||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(E.length&&Z(),this.render(t,e,!1),E.length&&Z())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(u||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});a=D.prototype=new A,a.constructor=D,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return u||l.wake(),this._totalTime};var M=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=M.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:M.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?H[M.defaultOverwrite]:"number"==typeof l?l>>0:H[l],(a||e instanceof Array||e.push&&m(e))&&"number"!=typeof e[0])for(this._targets=o=p(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)s=o[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(p(s))):(this._siblings[r]=Q(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=o[r--]=M.selector(s),"string"==typeof s&&o.splice(r+1,1)):o.splice(r--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)))},!0),N=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType);
},F=function(t,e){var i,n={};for(i in t)V[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!Y[i]||Y[i]&&Y[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};a=M.prototype=new A,a.constructor=M,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,M.version="1.19.0",M.defaultEase=a._ease=new w(null,null,1,1),M.defaultOverwrite="auto",M.ticker=l,M.autoSleep=120,M.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},M.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(M.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var E=[],L={},j=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,X=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},I=function(t,e,i,n){var r,s,o,a,l,u,h,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(j)||[],s=e.match(j)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,a=0;a<l;a++)h=s[a],u=e.substr(f,e.indexOf(h,f)-f),p+=u||!a?u:",",f+=u.length,d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),h===r[a]||r.length<=a?p+=h:(p&&(c.push(p),p=""),o=parseFloat(r[a]),c.push(o),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:o,c:("="===h.charAt(1)?parseInt(h.charAt(0)+"1",10)*parseFloat(h.substr(2)):parseFloat(h)-o)||0,f:0,m:d&&d<4?Math.round:0}),f+=h.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=X,c},B=function(t,e,i,n,r,s,o,a,l){"function"==typeof n&&(n=n(l||0,t));var u,h,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(h=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=o?t[h](o):t[h]()),"string"==typeof c&&(o||isNaN(c))?(d.fp=o,u=I(c,n,a||M.defaultStringFilter,d),d={t:u,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},z=M._internals={isArray:m,isSelector:N,lazyTweens:E,blobDif:I},Y=M._plugins={},q=z.tweenLookup={},W=0,V=z.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},H={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},U=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Z=z.lazyRender=function(){var t,e=E.length;for(L={};--e>-1;)t=E[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);E.length=0};$._startTime=l.time,U._startTime=l.frame,$._active=U._active=!0,setTimeout(Z,1),A._updateRoot=M.render=function(){var t,e,i;if(E.length&&Z(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),U.render((l.frame-U._startTime)*U._timeScale,!1,!1),E.length&&Z(),l.frame>=G){G=l.frame+(parseInt(M.autoSleep,10)||120);for(i in q){for(e=q[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete q[i]}if(i=$._first,(!i||i._paused)&&M.autoSleep&&!U._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Q=function(t,e,i){var n,r,s=t._gsTweenID;if(q[s||(t._gsTweenID=s="t"+W++)]||(q[s]={target:t,tweens:[]}),e&&(n=q[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return q[s].tweens},K=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),o=M.onOverwrite,o&&(s=o(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var u,h=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(u=u||tt(e,0,d),0===tt(a,u,d)&&(c[p++]=a)):a._startTime<=h&&a._startTime+a.totalDuration()/a._timeScale>h&&((d||!a._initted)&&h-a._startTime<=2e-10||(c[p++]=a)));for(s=p;--s>-1;)if(a=c[s],2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};a._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,l=this._duration,u=!!o.immediateRender,h=o.ease;if(o.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in o.startAt)r[n]=o.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=u&&o.lazy!==!1,r.startAt=r.delay=null,this._startAt=M.to(this.target,0,r),u)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(u=!1),i={};for(n in o)V[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=u&&o.lazy!==!1,i.immediateRender=u,this._startAt=M.to(this.target,0,i),u){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=h=h?h instanceof w?h:"function"==typeof h?new w(h,o.easeParams):b[h]||M.defaultEase:M.defaultEase,o.easeParams instanceof Array&&h.config&&(this._ease=h.config.apply(h,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&M._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,s){var o,a,l,u,h,c;if(null==e)return!1;L[e._gsTweenID]&&Z(),this.vars.css||e.style&&e!==t&&e.nodeType&&Y.css&&this.vars.autoCSS!==!1&&F(this.vars,e);for(o in this.vars)if(c=this.vars[o],V[o])c&&(c instanceof Array||c.push&&m(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(Y[o]&&(u=new Y[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=h={_next:this._firstPT,t:u,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:u._priority,m:0},a=u._overwriteProps.length;--a>-1;)i[u._overwriteProps[a]]=this._firstPT;(u._priority||u._onInitAllProps)&&(l=!0),(u._onDisable||u._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else i[o]=B.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,u=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(u<0||t<=0&&t>=-1e-7||u===f&&"isPause"!==this.data)&&u!==t&&(i=!0,u>f&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||u===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&u>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(u>=0&&(u!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||u===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var h=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&h>=.5)&&(h=1-h),3===c&&(h*=2),1===p?h*=h:2===p?h*=h*h:3===p?h*=h*h*h:4===p&&(h*=h*h*h*h),1===c?this.ratio=1-h:2===c?this.ratio=h:t/l<.5?this.ratio=h/2:this.ratio=1-h/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,E.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&o!==f&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:M.selector(e)||e;var n,r,s,o,a,l,u,h,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((m(e)||N(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(u=t||a,h=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(M.onOverwrite||this.vars.onOverwrite)){for(s in u)a[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in u)(o=a[s])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(u)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),h&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&M._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(u||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Q(n[i],this,!0);else this._siblings=Q(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&M._onPluginEvent(t?"_onEnable":"_onDisable",this)},M.to=function(t,e,i){return new M(t,e,i)},M.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new M(t,e,i)},M.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new M(t,e,n)},M.delayedCall=function(t,e,i,n,r){return new M(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},M.set=function(t,e){return new M(t,0,e)},M.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:M.selector(t)||t;var i,n,r,s;if((m(t)||N(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(M.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Q(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},M.killTweensOf=M.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=M.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(a=et.prototype,et.version="1.19.0",et.API=2,a._firstPT=null,a._addTween=B,a.setRatio=X,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},M._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(Y[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),a=o.prototype=new et(i);a.constructor=o,o.API=t.API;for(e in s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,et.activate([o]),o},s=t._gsQueue){for(o=0;o<s.length;o++)s[o]();for(a in g)g[a].func||t.console.log("GSAP encountered missing dependency: "+a)}u=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenMax")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],8:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("easing.CustomEase",["easing.Ease"],function(t){var e=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,i=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,n=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,r=/[cLlsS]/g,s="CustomEase only accepts Cubic Bezier data.",o=function(t,e,i,n,r,s,a,l,u,h,c){var f,p=(t+i)/2,d=(e+n)/2,m=(i+r)/2,g=(n+s)/2,_=(r+a)/2,v=(s+l)/2,y=(p+m)/2,x=(d+g)/2,w=(m+_)/2,b=(g+v)/2,T=(y+w)/2,P=(x+b)/2,k=a-t,S=l-e,C=Math.abs((i-a)*S-(n-l)*k),O=Math.abs((r-a)*S-(s-l)*k);return h||(h=[{x:t,y:e},{x:a,y:l}],c=1),h.splice(c||h.length-1,0,{x:T,y:P}),(C+O)*(C+O)>u*(k*k+S*S)&&(f=h.length,o(t,e,p,d,y,x,T,P,u,h,c),o(T,P,w,b,_,v,a,l,u,h,c+1+(h.length-f))),h},a=function(t){var e,r,o,a,l,u,h,c,f,p,d,m=(t+"").replace(n,function(t){var e=+t;return e<1e-4&&e>-1e-4?0:e}).match(i)||[],g=[],_=0,v=0,y=m.length,x=2;for(e=0;e<y;e++)if(f=a,isNaN(m[e])?(a=m[e].toUpperCase(),l=a!==m[e]):e--,r=+m[e+1],o=+m[e+2],l&&(r+=_,o+=v),e||(h=r,c=o),"M"===a)u&&u.length<8&&(g.length-=1,x=0),_=h=r,v=c=o,u=[r,o],x=2,g.push(u),e+=2,a="L";else if("C"===a)u||(u=[0,0]),u[x++]=r,u[x++]=o,l||(_=v=0),u[x++]=_+1*m[e+3],u[x++]=v+1*m[e+4],u[x++]=_+=1*m[e+5],u[x++]=v+=1*m[e+6],e+=6;else if("S"===a)"C"===f||"S"===f?(p=_-u[x-4],d=v-u[x-3],u[x++]=_+p,u[x++]=v+d):(u[x++]=_,u[x++]=v),u[x++]=r,u[x++]=o,l||(_=v=0),u[x++]=_+=1*m[e+3],u[x++]=v+=1*m[e+4],e+=4;else{if("L"!==a&&"Z"!==a)throw s;"Z"===a&&(r=h,o=c,u.closed=!0),("L"===a||Math.abs(_-r)>.5||Math.abs(v-o)>.5)&&(u[x++]=_+(r-_)/3,u[x++]=v+(o-v)/3,u[x++]=_+2*(r-_)/3,u[x++]=v+2*(o-v)/3,u[x++]=r,u[x++]=o,"L"===a&&(e+=2)),_=r,v=o}return g[0]},l=function(t){var e,i=t.length,n=999999999999;for(e=1;e<i;e+=6)+t[e]<n&&(n=+t[e]);return n},u=function(t,e,i){i||0===i||(i=Math.max(+t[t.length-1],+t[1]));var n,r=+t[0]*-1,s=-i,o=t.length,a=1/(+t[o-2]+r),u=-e||(Math.abs(+t[o-1]-+t[1])<.01*(+t[o-2]-+t[0])?l(t)+s:+t[o-1]+s);for(u=u?1/u:-a,n=0;n<o;n+=2)t[n]=(+t[n]+r)*a,t[n+1]=(+t[n+1]+s)*u},h=function(t){var e=this.lookup[t*this.l|0]||this.lookup[this.l-1];return e.nx<t&&(e=e.n),e.y+(t-e.x)/e.cx*e.cy},c=function(e,i,n){this._calcEnd=!0,this.id=e,e&&(t.map[e]=this),this.getRatio=h,this.setData(i,n)},f=c.prototype=new t;return f.constructor=c,f.setData=function(t,i){t=t||"0,0,1,1";var n,l,h,c,f,p,d,m,g,_,v=t.match(e),y=1,x=[];if(i=i||{},_=i.precision||1,this.data=t,this.lookup=[],this.points=x,this.fast=_<=1,(r.test(t)||t.indexOf("M")!==-1&&t.indexOf("C")===-1)&&(v=a(t)),n=v.length,4===n)v.unshift(0,0),v.push(1,1),n=8;else if((n-2)%6)throw s;for(0===+v[0]&&1===+v[n-2]||u(v,i.height,i.originY),this.rawBezier=v,c=2;c<n;c+=6)l={x:+v[c-2],y:+v[c-1]},h={x:+v[c+4],y:+v[c+5]},x.push(l,h),o(l.x,l.y,+v[c],+v[c+1],+v[c+2],+v[c+3],h.x,h.y,1/(2e5*_),x,x.length-1);for(n=x.length,c=0;c<n;c++)d=x[c],m=x[c-1]||d,d.x>m.x||m.y!==d.y&&m.x===d.x||d===m?(m.cx=d.x-m.x,m.cy=d.y-m.y,m.n=d,m.nx=d.x,this.fast&&c>1&&Math.abs(m.cy/m.cx-x[c-2].cy/x[c-2].cx)>2&&(this.fast=!1),m.cx<y&&(m.cx?y=m.cx:m.cx=.001)):(x.splice(c--,1),n--);if(n=1/y+1|0,this.l=n,f=1/n,p=0,d=x[0],this.fast){for(c=0;c<n;c++)g=c*f,d.nx<g&&(d=x[++p]),l=d.y+(g-d.x)/d.cx*d.cy,this.lookup[c]={x:g,cx:f,y:l,cy:0,nx:9},c&&(this.lookup[c-1].cy=l-this.lookup[c-1].y);this.lookup[n-1].cy=x[x.length-1].y-l}else for(c=0;c<n;c++)d.nx<c*f&&(d=x[++p]),this.lookup[c]=d;return this},f.getRatio=h,f.getSVGData=function(t){return c.getSVGData(this,t)},c.create=function(t,e,i){return new c(t,e,i)},c.version="0.2.0",c.bezierToPoints=o,c.get=function(e){return t.map[e]},c.getSVGData=function(e,i){i=i||{};var n,r,s,o,a,l,u,h,c,f,p=1e3,d=i.width||100,m=i.height||100,g=i.x||0,_=(i.y||0)+m,v=i.path;if(i.invert&&(m=-m,_=0),e=e.getRatio?e:t.map[e]||console.log("No ease found: ",e),e.rawBezier){for(n=[],u=e.rawBezier.length,s=0;s<u;s+=2)n.push(((g+e.rawBezier[s]*d)*p|0)/p+","+((_+e.rawBezier[s+1]*-m)*p|0)/p);n[0]="M"+n[0],n[1]="C"+n[1]}else for(n=["M"+g+","+_],u=Math.max(5,200*(i.precision||1)),o=1/u,u+=2,h=5/u,c=((g+o*d)*p|0)/p,f=((_+e.getRatio(o)*-m)*p|0)/p,r=(f-_)/(c-g),s=2;s<u;s++)a=((g+s*o*d)*p|0)/p,l=((_+e.getRatio(s*o)*-m)*p|0)/p,(Math.abs((l-f)/(a-c)-r)>h||s===u-1)&&(n.push(c+","+f),r=(l-f)/(a-c)),c=a,f=l;return v&&("string"==typeof v?document.querySelector(v):v).setAttribute("d",n.join(" ")),n.join(" ")},c},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("CustomEase")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],9:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,r,s,o,a=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},l=n._gsDefine.globals,u={},h=a.prototype=new t("css");h.constructor=a,a.version="1.19.0",a.API=2,a.defaultTransformPerspective=0,a.defaultSkewType="compensated",a.defaultSmoothOrigin=!0,h="px",a.suffixMap={top:h,right:h,bottom:h,left:h,width:h,height:h,fontSize:h,padding:h,margin:h,perspective:h,lineHeight:""};var c,f,p,d,m,g,_,v,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,x=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,w=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,T=/(?:\d|\-|\+|=|#|\.)*/g,P=/opacity *= *([^)]*)/i,k=/opacity:([^;]*)/i,S=/alpha\(opacity *=.+?\)/i,C=/^(rgb|hsl)/,O=/([A-Z])/g,A=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,D=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,N=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,F=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,E=/,(?=[^\)]*(?:\(|$))/gi,L=/[\s,\(]/i,j=Math.PI/180,X=180/Math.PI,I={},B=document,z=function(t){return B.createElementNS?B.createElementNS("http://www.w3.org/1999/xhtml",t):B.createElement(t)},Y=z("div"),q=z("img"),W=a._internals={_specialProps:u},V=navigator.userAgent,H=function(){var t=V.indexOf("Android"),e=z("a");return p=V.indexOf("Safari")!==-1&&V.indexOf("Chrome")===-1&&(t===-1||Number(V.substr(t+8,1))>3),m=p&&Number(V.substr(V.indexOf("Version/")+8,1))<6,d=V.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(V)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(V))&&(g=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),U=function(t){return P.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},$=function(t){window.console&&console.log(t)},G="",Z="",Q=function(t,e){e=e||Y;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Z=3===n?"ms":i[n],G="-"+Z.toLowerCase()+"-",Z+t):null},K=B.defaultView?B.defaultView.getComputedStyle:function(){},J=a.getStyle=function(t,e,i,n,r){var s;return H||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(O,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):U(t)},tt=W.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var o,l,u,h=M.test(i),c=t,f=Y.style,p=n<0,d=1===n;if(p&&(n=-n),d&&(n*=100),"%"===r&&i.indexOf("border")!==-1)o=n/100*(h?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[h?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(c=t.parentNode||B.body,l=c._gsCache,u=e.ticker.frame,l&&h&&l.time===u)return l.width*n/100;f[h?"width":"height"]=n+r}c.appendChild(Y),o=parseFloat(Y[h?"offsetWidth":"offsetHeight"]),c.removeChild(Y),h&&"%"===r&&a.cacheWidths!==!1&&(l=c._gsCache=c._gsCache||{},l.time=u,l.width=o/n*100),0!==o||s||(o=tt(t,i,n,r,!0))}return d&&(o/=100),p?-o:o},et=W.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(T,""))||0)},it=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)r=e[i],r.indexOf("-transform")!==-1&&At!==r||(s[r.replace(A,D)]=e.getPropertyValue(r));else for(i in e)i.indexOf("Transform")!==-1&&Ot!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(A,D)]=e[i]);return H||(s.opacity=U(t)),n=Yt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Dt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},nt=function(t,e,i,n,r){var s,o,a,l={},u=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&o.indexOf("Origin")===-1&&("number"!=typeof s&&"string"!=typeof s||(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(b,"")?s:0:et(t,o),void 0!==u[o]&&(a=new vt(u,o,u[o],a))));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},rt={width:["Left","Right"],height:["Top","Bottom"]},st=["marginLeft","marginRight","marginTop","marginBottom"],ot=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getBBox&&It(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(J(t,"padding"+r[s],i,!0))||0,n-=parseFloat(J(t,"border"+r[s]+"Width",i,!0))||0;return n},at=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":n[0],s=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(at(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&(r+"").indexOf("=")===-1)&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=r.indexOf("%")!==-1,e.oyp=s.indexOf("%")!==-1,e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ut=function(t,e){return"function"==typeof t&&(t=t(v,_)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ht=function(t,e,i,n){var r,s,o,a,l,u=1e-6;return"function"==typeof t&&(t=t(v,_)),null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),l="="===t.charAt(1),o=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(t.indexOf("rad")===-1?1:X)-(l?0:e),s.length&&(n&&(n[i]=e+o),t.indexOf("short")!==-1&&(o%=r,o!==o%(r/2)&&(o=o<0?o+r:o-r)),t.indexOf("_cw")!==-1&&o<0?o=(o+9999999999*r)%r-(o/r|0)*r:t.indexOf("ccw")!==-1&&o>0&&(o=(o-9999999999*r)%r-(o/r|0)*r)),a=e+o),a<u&&a>-u&&(a=0),a},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},pt=a.parseColor=function(t,e){var i,n,r,s,o,a,l,u,h,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(t.indexOf("=")!==-1)return t.match(x)}else o=Number(i[0])%360/360,a=Number(i[1])/100,l=Number(i[2])/100,r=l<=.5?l*(a+1):l+a-l*a,n=2*l-r,i.length>3&&(i[3]=Number(t[3])),i[0]=ft(o+1/3,n,r),i[1]=ft(o,n,r),i[2]=ft(o-1/3,n,r);else i=t.match(y)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,u=Math.max(n,r,s),h=Math.min(n,r,s),l=(u+h)/2,u===h?o=a=0:(c=u-h,a=l>.5?c/(2-u-h):c/(u+h),o=u===n?(r-s)/c+(r<s?6:0):u===r?(s-n)/c+2:(n-r)/c+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(mt)||[],o=0,a=s.length?"":t;for(i=0;i<s.length;i++)n=s[i],r=t.substr(o,t.indexOf(n,o)-o),o+=r.length+n.length,n=pt(n,e),3===n.length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},mt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(h in ct)mt+="|"+h+"\\b";mt=new RegExp(mt+")","gi"),a.colorStringFilter=function(t){var e,i=t[0]+t[1];mt.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=dt(t[0],e),t[1]=dt(t[1],e)),mt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=a.colorStringFilter);var gt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(mt)||[""])[0]:"",o=t.split(s).join("").match(w)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",u=t.indexOf(" ")!==-1?" ":",",h=o.length,c=h>0?o[0].replace(y,""):"";return h?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(d=t.replace(E,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(mt)||[s])[0],f=t.split(e).join("").match(w)||[],p=f.length,h>p--)for(;++p<h;)f[p]=i?f[(p-1)/2|0]:o[p];return a+f.join(u)+u+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(s=t.replace(E,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(e=t.match(w)||[],f=e.length,h>f--)for(;++f<h;)e[f]=i?e[(f-1)/2|0]:o[f];return a+e.join(u)+l}:function(t){return t}},_t=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,u=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=u[l]=u[l]||u[(l-1)/2>>0];return r.parse(e,a,s,o)}},vt=(W._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,l=o.firstMPT,u=1e-6;l;)e=a[l.v],l.r?e=Math.round(e):e<u&&e>-u&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod(a.rotation,this.t):a.rotation),1===t||0===t)for(l=o.firstMPT,s=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(W._parseToProxy=function(t,e,i,n,r,s){var o,a,l,u,h,c=n,f={},p={},d=i._transform,m=I;for(i._transform=null,I=e,n=h=i.parse(t,e,n,r),I=m,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(a=n.p,p[a]=n.s+n.c,f[a]=n.s,s||(u=new vt(n,"s",a,u,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,a=n.p+"_"+l,p[a]=n.data[l],f[a]=n[l],s||(u=new vt(n,l,a,u,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:u,pt:h}},W.CSSPropTween=function(t,e,n,r,s,a,l,u,h,c,f){this.t=t,this.p=e,this.s=n,this.c=r,this.n=l||e,t instanceof yt||o.push(this.n),this.r=u,this.type=a||0,h&&(this.pr=h,i=!0),this.b=void 0===c?n:c,this.e=void 0===f?n+r:f,s&&(this._next=s,s._prev=this)}),xt=function(t,e,i,n,r,s){var o=new yt(t,e,i,n-i,r,(-1),s);return o.b=i,o.e=o.xs0=n,o},wt=a.parseComplex=function(t,e,i,n,r,s,o,l,u,h){i=i||s||"","function"==typeof n&&(n=n(v,_)),o=new yt(t,e,0,0,o,h?2:1,null,(!1),l,i,n),n+="",r&&mt.test(n+i)&&(n=[i,n],a.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,m,g,w,b,T,P,k,S,C,O,A=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),D=A.length,M=c!==!1;for(n.indexOf(",")===-1&&i.indexOf(",")===-1||(A=A.join(" ").replace(E,", ").split(" "),R=R.join(" ").replace(E,", ").split(" "),D=A.length),D!==R.length&&(A=(s||"").split(" "),D=A.length),o.plugin=u,o.setRatio=h,mt.lastIndex=0,f=0;f<D;f++)if(m=A[f],g=R[f],T=parseFloat(m),T||0===T)o.appendXtra("",T,lt(g,T),g.replace(x,""),M&&g.indexOf("px")!==-1,!0);else if(r&&mt.test(m))C=g.indexOf(")")+1,C=")"+(C?g.substr(C):""),O=g.indexOf("hsl")!==-1&&H,m=pt(m,O),g=pt(g,O),P=m.length+g.length>6,P&&!H&&0===g[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(R[f]).join("transparent")):(H||(P=!1),O?o.appendXtra(P?"hsla(":"hsl(",m[0],lt(g[0],m[0]),",",!1,!0).appendXtra("",m[1],lt(g[1],m[1]),"%,",!1).appendXtra("",m[2],lt(g[2],m[2]),P?"%,":"%"+C,!1):o.appendXtra(P?"rgba(":"rgb(",m[0],g[0]-m[0],",",!0,!0).appendXtra("",m[1],g[1]-m[1],",",!0).appendXtra("",m[2],g[2]-m[2],P?",":C,!0),
P&&(m=m.length<4?1:m[3],o.appendXtra("",m,(g.length<4?1:g[3])-m,C,!1))),mt.lastIndex=0;else if(w=m.match(y)){if(b=g.match(x),!b||b.length!==w.length)return o;for(d=0,p=0;p<w.length;p++)S=w[p],k=m.indexOf(S,d),o.appendXtra(m.substr(d,k-d),Number(S),lt(b[p],S),"",M&&"px"===m.substr(k+S.length,2),0===p),d=k+S.length;o["xs"+o.l]+=m.substr(d)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+g:g;if(n.indexOf("=")!==-1&&o.data){for(C=o.xs0+o.data.s,f=1;f<o.l;f++)C+=o["xs"+f]+o.data["xn"+f];o.e=C+o["xs"+f]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},bt=9;for(h=yt.prototype,h.l=h.pr=0;--bt>0;)h["xn"+bt]=0,h["xs"+bt]="";h.xs0="",h._next=h._prev=h.xfirst=h.data=h.plugin=h.setRatio=h.rxp=null,h.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new yt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var Tt=function(t,e){e=e||{},this.p=e.prefix?Q(t)||t:t,u[t]=u[this.p]=this,this.format=e.formatter||gt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=W._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;n<s.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,r=new Tt(s[n],e)},kt=W._registerPluginProp=function(t){if(!u[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,o,a){var h=l.com.greensock.plugins[e];return h?(h._cssRegister(),u[n].parse(t,i,n,r,s,o,a)):($("Error: "+e+" js file not loaded."),s)}})}};h=Tt.prototype,h.parseComplex=function(t,e,i,n,r,s){var o,a,l,u,h,c,f=this.keyword;if(this.multi&&(E.test(i)||E.test(e)?(a=e.replace(E,"|").split("|"),l=i.replace(E,"|").split("|")):f&&(a=[e],l=[i])),l){for(u=l.length>a.length?l.length:a.length,o=0;o<u;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(h=e.indexOf(f),c=i.indexOf(f),h!==c&&(c===-1?a[o]=a[o].split(f).join(""):h===-1&&(a[o]+=" "+f)));e=a.join(", "),i=l.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},h.parse=function(t,e,i,n,r,o,a){return this.parseComplex(t.style,this.format(J(t,this.p,s,!1,this.dflt)),this.format(e),r,o)},a.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,o,a,l){var u=new yt(t,r,0,0,o,2,r,(!1),i);return u.plugin=a,u.setRatio=e(t,n,s._tween,r),u},priority:i})},a.useSVGTransformAttr=p||d;var St,Ct="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ot=Q("transform"),At=G+"transform",Rt=Q("transformOrigin"),Dt=null!==Q("perspective"),Mt=W.Transform=function(){this.perspective=parseFloat(a.defaultTransformPerspective)||0,this.force3D=!(a.defaultForce3D===!1||!Dt)&&(a.defaultForce3D||"auto")},Nt=window.SVGElement,Ft=function(t,e,i){var n,r=B.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Et=B.documentElement,Lt=function(){var t,e,i,n=g||/Android/i.test(V)&&!window.chrome;return B.createElementNS&&!n&&(t=Ft("svg",Et),e=Ft("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[Ot]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Et.removeChild(t)),n}(),jt=function(t,e,i,n,r,s){var o,l,u,h,c,f,p,d,m,g,_,v,y,x,w=t._gsTransform,b=zt(t,!0);w&&(y=w.xOrigin,x=w.yOrigin),(!n||(o=n.split(" ")).length<2)&&(p=t.getBBox(),e=at(e).split(" "),o=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=h=parseFloat(o[0]),i.yOrigin=c=parseFloat(o[1]),n&&b!==Bt&&(f=b[0],p=b[1],d=b[2],m=b[3],g=b[4],_=b[5],v=f*m-p*d,l=h*(m/v)+c*(-d/v)+(d*_-m*g)/v,u=h*(-p/v)+c*(f/v)-(f*_-p*g)/v,h=i.xOrigin=o[0]=l,c=i.yOrigin=o[1]=u),w&&(s&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),r||r!==!1&&a.defaultSmoothOrigin!==!1?(l=h-y,u=c-x,w.xOffset+=l*b[0]+u*b[2]-l,w.yOffset+=l*b[1]+u*b[3]-u):w.xOffset=w.yOffset=0),s||t.setAttribute("data-svg-origin",o.join(" "))},Xt=function(t){try{return t.getBBox()}catch(t){}},It=function(t){return!!(Nt&&t.getBBox&&t.getCTM&&Xt(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},Bt=[1,0,0,1,0,0],zt=function(t,e){var i,n,r,s,o,a,l=t._gsTransform||new Mt,u=1e5,h=t.style;if(Ot?n=J(t,At,null,!0):t.currentStyle&&(n=t.currentStyle.filter.match(N),n=n&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,i&&Ot&&((a="none"===K(t).display)||!t.parentNode)&&(a&&(s=h.display,h.display="block"),t.parentNode||(o=1,Et.appendChild(t)),n=J(t,At,null,!0),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?h.display=s:a&&Ht(h,"display"),o&&Et.removeChild(t)),(l.svg||t.getBBox&&It(t))&&(i&&(h[Ot]+"").indexOf("matrix")!==-1&&(n=h[Ot],i=0),r=t.getAttribute("transform"),i&&r&&(r.indexOf("matrix")!==-1?(n=r,i=0):r.indexOf("translate")!==-1&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return Bt;for(r=(n||"").match(y)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(o=s-(s|=0))?(o*u+(o<0?-.5:.5)|0)/u+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Yt=W.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var s,o,l,u,h,c,f=n?t._gsTransform||new Mt:new Mt,p=f.scaleX<0,d=2e-5,m=1e5,g=Dt?parseFloat(J(t,Rt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,_=parseFloat(a.defaultTransformPerspective)||0;if(f.svg=!(!t.getBBox||!It(t)),f.svg&&(jt(t,J(t,Rt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),St=a.useSVGTransformAttr||Lt),s=zt(t),s!==Bt){if(16===s.length){var v,y,x,w,b,T=s[0],P=s[1],k=s[2],S=s[3],C=s[4],O=s[5],A=s[6],R=s[7],D=s[8],M=s[9],N=s[10],F=s[12],E=s[13],L=s[14],j=s[11],I=Math.atan2(A,N);f.zOrigin&&(L=-f.zOrigin,F=D*L-s[12],E=M*L-s[13],L=N*L+f.zOrigin-s[14]),f.rotationX=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),v=C*w+D*b,y=O*w+M*b,x=A*w+N*b,D=C*-b+D*w,M=O*-b+M*w,N=A*-b+N*w,j=R*-b+j*w,C=v,O=y,A=x),I=Math.atan2(-k,N),f.rotationY=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),v=T*w-D*b,y=P*w-M*b,x=k*w-N*b,M=P*b+M*w,N=k*b+N*w,j=S*b+j*w,T=v,P=y,k=x),I=Math.atan2(P,T),f.rotation=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),T=T*w+C*b,y=P*w+O*b,O=P*-b+O*w,A=k*-b+A*w,P=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),f.scaleX=(Math.sqrt(T*T+P*P)*m+.5|0)/m,f.scaleY=(Math.sqrt(O*O+M*M)*m+.5|0)/m,f.scaleZ=(Math.sqrt(A*A+N*N)*m+.5|0)/m,f.rotationX||f.rotationY?f.skewX=0:(f.skewX=C||O?Math.atan2(C,O)*X+f.rotation:f.skewX||0,Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180))),f.perspective=j?1/(j<0?-j:j):0,f.x=F,f.y=E,f.z=L,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*T-f.yOrigin*C),f.y-=f.yOrigin-(f.yOrigin*P-f.xOrigin*O))}else if(!Dt||r||!s.length||f.x!==s[4]||f.y!==s[5]||!f.rotationX&&!f.rotationY){var B=s.length>=6,z=B?s[0]:1,Y=s[1]||0,q=s[2]||0,W=B?s[3]:1;f.x=s[4]||0,f.y=s[5]||0,l=Math.sqrt(z*z+Y*Y),u=Math.sqrt(W*W+q*q),h=z||Y?Math.atan2(Y,z)*X:f.rotation||0,c=q||W?Math.atan2(q,W)*X+h:f.skewX||0,Math.abs(c)>90&&Math.abs(c)<270&&(p?(l*=-1,c+=h<=0?180:-180,h+=h<=0?180:-180):(u*=-1,c+=c<=0?180:-180)),f.scaleX=l,f.scaleY=u,f.rotation=h,f.skewX=c,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*z+f.yOrigin*q),f.y-=f.yOrigin-(f.xOrigin*Y+f.yOrigin*W))}f.zOrigin=g;for(o in f)f[o]<d&&f[o]>-d&&(f[o]=0)}return n&&(t._gsTransform=f,f.svg&&(St&&t.style[Ot]?e.delayedCall(.001,function(){Ht(t.style,Ot)}):!St&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},qt=function(t){var e,i,n=this.data,r=-n.rotation*j,s=r+n.skewX*j,o=1e5,a=(Math.cos(r)*n.scaleX*o|0)/o,l=(Math.sin(r)*n.scaleX*o|0)/o,u=(Math.sin(s)*-n.scaleY*o|0)/o,h=(Math.cos(s)*n.scaleY*o|0)/o,c=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-u,u=-i,e=f.filter,c.filter="";var p,d,m=this.t.offsetWidth,_=this.t.offsetHeight,v="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+u+", M22="+h,x=n.x+m*n.xPercent/100,w=n.y+_*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?m*n.ox*.01:n.ox)-m/2,d=(n.oyp?_*n.oy*.01:n.oy)-_/2,x+=p-(p*a+d*l),w+=d-(p*u+d*h)),v?(p=m/2,d=_/2,y+=", Dx="+(p-(p*a+d*l)+x)+", Dy="+(d-(p*u+d*h)+w)+")"):y+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?c.filter=e.replace(F,y):c.filter=y+" "+e,0!==t&&1!==t||1===a&&0===l&&0===u&&1===h&&(v&&y.indexOf("Dx=0, Dy=0")===-1||P.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&c.removeAttribute("filter")),!v){var b,k,S,C=g<8?1:-1;for(p=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((m-((a<0?-a:a)*m+(l<0?-l:l)*_))/2+x),n.ieOffsetY=Math.round((_-((h<0?-h:h)*_+(u<0?-u:u)*m))/2+w),bt=0;bt<4;bt++)k=st[bt],b=f[k],i=b.indexOf("px")!==-1?parseFloat(b):tt(this.t,k,parseFloat(b),b.replace(T,""))||0,S=i!==n[k]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?p-n.ieOffsetX:d-n.ieOffsetY,c[k]=(n[k]=Math.round(i-S*(0===bt||2===bt?1:C)))+"px"}}},Wt=W.set3DTransformRatio=W.setTransformRatio=function(t){var e,i,n,r,s,o,a,l,u,h,c,f,p,m,g,_,v,y,x,w,b,T,P,k=this.data,S=this.t.style,C=k.rotation,O=k.rotationX,A=k.rotationY,R=k.scaleX,D=k.scaleY,M=k.scaleZ,N=k.x,F=k.y,E=k.z,L=k.svg,X=k.perspective,I=k.force3D;if(((1===t||0===t)&&"auto"===I&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!I)&&!E&&!X&&!A&&!O&&1===M||St&&L||!Dt)return void(C||k.skewX||L?(C*=j,T=k.skewX*j,P=1e5,e=Math.cos(C)*R,r=Math.sin(C)*R,i=Math.sin(C-T)*-D,s=Math.cos(C-T)*D,T&&"simple"===k.skewType&&(v=Math.tan(T-k.skewY*j),v=Math.sqrt(1+v*v),i*=v,s*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v)),L&&(N+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,F+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset,St&&(k.xPercent||k.yPercent)&&(m=this.t.getBBox(),N+=.01*k.xPercent*m.width,F+=.01*k.yPercent*m.height),m=1e-6,N<m&&N>-m&&(N=0),F<m&&F>-m&&(F=0)),x=(e*P|0)/P+","+(r*P|0)/P+","+(i*P|0)/P+","+(s*P|0)/P+","+N+","+F+")",L&&St?this.t.setAttribute("transform","matrix("+x):S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+x):S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+D+","+N+","+F+")");if(d&&(m=1e-4,R<m&&R>-m&&(R=M=2e-5),D<m&&D>-m&&(D=M=2e-5),!X||k.z||k.rotationX||k.rotationY||(X=0)),C||k.skewX)C*=j,g=e=Math.cos(C),_=r=Math.sin(C),k.skewX&&(C-=k.skewX*j,g=Math.cos(C),_=Math.sin(C),"simple"===k.skewType&&(v=Math.tan((k.skewX-k.skewY)*j),v=Math.sqrt(1+v*v),g*=v,_*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v))),i=-_,s=g;else{if(!(A||O||1!==M||X||L))return void(S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) translate3d(":"translate3d(")+N+"px,"+F+"px,"+E+"px)"+(1!==R||1!==D?" scale("+R+","+D+")":""));e=s=1,i=r=0}u=1,n=o=a=l=h=c=0,f=X?-1/X:0,p=k.zOrigin,m=1e-6,w=",",b="0",C=A*j,C&&(g=Math.cos(C),_=Math.sin(C),a=-_,h=f*-_,n=e*_,o=r*_,u=g,f*=g,e*=g,r*=g),C=O*j,C&&(g=Math.cos(C),_=Math.sin(C),v=i*g+n*_,y=s*g+o*_,l=u*_,c=f*_,n=i*-_+n*g,o=s*-_+o*g,u*=g,f*=g,i=v,s=y),1!==M&&(n*=M,o*=M,u*=M,f*=M),1!==D&&(i*=D,s*=D,l*=D,c*=D),1!==R&&(e*=R,r*=R,a*=R,h*=R),(p||L)&&(p&&(N+=n*-p,F+=o*-p,E+=u*-p+p),L&&(N+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,F+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset),N<m&&N>-m&&(N=b),F<m&&F>-m&&(F=b),E<m&&E>-m&&(E=0)),x=k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix3d(":"matrix3d(",x+=(e<m&&e>-m?b:e)+w+(r<m&&r>-m?b:r)+w+(a<m&&a>-m?b:a),x+=w+(h<m&&h>-m?b:h)+w+(i<m&&i>-m?b:i)+w+(s<m&&s>-m?b:s),O||A||1!==M?(x+=w+(l<m&&l>-m?b:l)+w+(c<m&&c>-m?b:c)+w+(n<m&&n>-m?b:n),x+=w+(o<m&&o>-m?b:o)+w+(u<m&&u>-m?b:u)+w+(f<m&&f>-m?b:f)+w):x+=",0,0,0,0,1,0,",x+=N+w+F+w+E+w+(X?1+-E/X:1)+")",S[Ot]=x};h=Mt.prototype,h.x=h.y=h.z=h.skewX=h.skewY=h.rotation=h.rotationX=h.rotationY=h.zOrigin=h.xPercent=h.yPercent=h.xOffset=h.yOffset=0,h.scaleX=h.scaleY=h.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,r,o,l){if(n._lastParsedTransform===l)return r;n._lastParsedTransform=l;var u;"function"==typeof l[i]&&(u=l[i],l[i]=e);var h,c,f,p,d,m,g,y,x,w=t._gsTransform,b=t.style,T=1e-6,P=Ct.length,k=l,S={},C="transformOrigin",O=Yt(t,s,!0,k.parseTransform),A=k.transform&&("function"==typeof k.transform?k.transform(v,_):k.transform);if(n._transform=O,A&&"string"==typeof A&&Ot)c=Y.style,c[Ot]=A,c.display="block",c.position="absolute",B.body.appendChild(Y),h=Yt(Y,null,!1),O.svg&&(m=O.xOrigin,g=O.yOrigin,h.x-=O.xOffset,h.y-=O.yOffset,(k.transformOrigin||k.svgOrigin)&&(A={},jt(t,at(k.transformOrigin),A,k.svgOrigin,k.smoothOrigin,!0),m=A.xOrigin,g=A.yOrigin,h.x-=A.xOffset-O.xOffset,h.y-=A.yOffset-O.yOffset),(m||g)&&(y=zt(Y,!0),h.x-=m-(m*y[0]+g*y[2]),h.y-=g-(m*y[1]+g*y[3]))),B.body.removeChild(Y),h.perspective||(h.perspective=O.perspective),null!=k.xPercent&&(h.xPercent=ut(k.xPercent,O.xPercent)),null!=k.yPercent&&(h.yPercent=ut(k.yPercent,O.yPercent));else if("object"==typeof k){if(h={scaleX:ut(null!=k.scaleX?k.scaleX:k.scale,O.scaleX),scaleY:ut(null!=k.scaleY?k.scaleY:k.scale,O.scaleY),scaleZ:ut(k.scaleZ,O.scaleZ),x:ut(k.x,O.x),y:ut(k.y,O.y),z:ut(k.z,O.z),xPercent:ut(k.xPercent,O.xPercent),yPercent:ut(k.yPercent,O.yPercent),perspective:ut(k.transformPerspective,O.perspective)},d=k.directionalRotation,null!=d)if("object"==typeof d)for(c in d)k[c]=d[c];else k.rotation=d;"string"==typeof k.x&&k.x.indexOf("%")!==-1&&(h.x=0,h.xPercent=ut(k.x,O.xPercent)),"string"==typeof k.y&&k.y.indexOf("%")!==-1&&(h.y=0,h.yPercent=ut(k.y,O.yPercent)),h.rotation=ht("rotation"in k?k.rotation:"shortRotation"in k?k.shortRotation+"_short":"rotationZ"in k?k.rotationZ:O.rotation-O.skewY,O.rotation-O.skewY,"rotation",S),Dt&&(h.rotationX=ht("rotationX"in k?k.rotationX:"shortRotationX"in k?k.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",S),h.rotationY=ht("rotationY"in k?k.rotationY:"shortRotationY"in k?k.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",S)),h.skewX=ht(k.skewX,O.skewX-O.skewY),(h.skewY=ht(k.skewY,O.skewY))&&(h.skewX+=h.skewY,h.rotation+=h.skewY)}for(Dt&&null!=k.force3D&&(O.force3D=k.force3D,p=!0),O.skewType=k.skewType||O.skewType||a.defaultSkewType,f=O.force3D||O.z||O.rotationX||O.rotationY||h.z||h.rotationX||h.rotationY||h.perspective,f||null==k.scale||(h.scaleZ=1);--P>-1;)x=Ct[P],A=h[x]-O[x],(A>T||A<-T||null!=k[x]||null!=I[x])&&(p=!0,r=new yt(O,x,O[x],A,r),x in S&&(r.e=S[x]),r.xs0=0,r.plugin=o,n._overwriteProps.push(r.n));return A=k.transformOrigin,O.svg&&(A||k.svgOrigin)&&(m=O.xOffset,g=O.yOffset,jt(t,at(A),h,k.svgOrigin,k.smoothOrigin),r=xt(O,"xOrigin",(w?O:h).xOrigin,h.xOrigin,r,C),r=xt(O,"yOrigin",(w?O:h).yOrigin,h.yOrigin,r,C),m===O.xOffset&&g===O.yOffset||(r=xt(O,"xOffset",w?m:O.xOffset,O.xOffset,r,C),r=xt(O,"yOffset",w?g:O.yOffset,O.yOffset,r,C)),A=St?null:"0px 0px"),(A||Dt&&f&&O.zOrigin)&&(Ot?(p=!0,x=Rt,A=(A||J(t,x,s,!1,"50% 50%"))+"",r=new yt(b,x,0,0,r,(-1),C),r.b=b[x],r.plugin=o,Dt?(c=O.zOrigin,A=A.split(" "),O.zOrigin=(A.length>2&&(0===c||"0px"!==A[2])?parseFloat(A[2]):c)||0,r.xs0=r.e=A[0]+" "+(A[1]||"50%")+" 0px",r=new yt(O,"zOrigin",0,0,r,(-1),r.n),r.b=c,r.xs0=r.e=O.zOrigin):r.xs0=r.e=A):at(A+"",O)),p&&(n._transformType=O.svg&&St||!f&&3!==this._transformType?2:3),u&&(l[i]=u),r},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,o,a){e=this.format(e);var l,u,h,c,f,p,d,m,g,_,v,y,x,w,b,T,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(g=parseFloat(t.offsetWidth),_=parseFloat(t.offsetHeight),l=e.split(" "),u=0;u<P.length;u++)this.p.indexOf("border")&&(P[u]=Q(P[u])),f=c=J(t,P[u],s,!1,"0px"),f.indexOf(" ")!==-1&&(c=f.split(" "),f=c[0],c=c[1]),p=h=l[u],d=parseFloat(f),y=f.substr((d+"").length),x="="===p.charAt(1),x?(m=parseInt(p.charAt(0)+"1",10),p=p.substr(2),m*=parseFloat(p),v=p.substr((m+"").length-(m<0?1:0))||""):(m=parseFloat(p),v=p.substr((m+"").length)),""===v&&(v=r[i]||y),v!==y&&(w=tt(t,"borderLeft",d,y),b=tt(t,"borderTop",d,y),"%"===v?(f=w/g*100+"%",c=b/_*100+"%"):"em"===v?(T=tt(t,"borderLeft",1,"em"),f=w/T+"em",c=b/T+"em"):(f=w+"px",c=b+"px"),x&&(p=parseFloat(f)+m+v,h=parseFloat(c)+m+v)),o=wt(k,P[u],f+" "+c,p+" "+h,!1,"0px",o);return o},prefix:!0,formatter:gt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,r,o){return wt(t.style,i,this.format(J(t,i,s,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:gt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,r,o){var a,l,u,h,c,f,p="background-position",d=s||K(t,null),m=this.format((d?g?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),_=this.format(e);if(m.indexOf("%")!==-1!=(_.indexOf("%")!==-1)&&_.split(",").length<2&&(f=J(t,"backgroundImage").replace(R,""),f&&"none"!==f)){for(a=m.split(" "),l=_.split(" "),q.setAttribute("src",f),u=2;--u>-1;)m=a[u],h=m.indexOf("%")!==-1,h!==(l[u].indexOf("%")!==-1)&&(c=0===u?t.offsetWidth-q.width:t.offsetHeight-q.height,a[u]=h?parseFloat(m)/100*c+"px":parseFloat(m)/c*100+"%");m=a.join(" ")}return this.parseComplex(t.style,m,_,r,o)},formatter:at}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",at(t.indexOf(" ")===-1?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:_t("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:_t("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,r,o){var a,l,u;return g<9?(l=t.currentStyle,u=g<8?" ":",",a="rect("+l.clipTop+u+l.clipRight+u+l.clipBottom+u+l.clipLeft+")",e=this.format(e).split(",").join(u)):(a=this.format(J(t,this.p,s,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,r,o)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,r,o){var a=J(t,"borderTopWidth",s,!1,"0px"),l=this.format(e).split(" "),u=l[0].replace(T,"");return"px"!==u&&(a=parseFloat(a)/tt(t,"borderTopWidth",1,u)+u),this.parseComplex(t.style,this.format(a+" "+J(t,"borderTopStyle",s,!1,"solid")+" "+J(t,"borderTopColor",s,!1,"#000")),l.join(" "),r,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(mt)||["#000"])[0]}}),Pt("borderWidth",{parser:_t("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new yt(o,a,0,0,r,(-1),i,(!1),0,o[a],e)}});var Vt=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(n.indexOf("atrix(")===-1&&n.indexOf("radient(")===-1&&n.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(S,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),n.indexOf("pacity")===-1?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(P,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,r,o){var a=parseFloat(J(t,"opacity",s,!1,"1")),l=t.style,u="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),u&&1===a&&"hidden"===J(t,"visibility",s)&&0!==e&&(a=0),H?r=new yt(l,"opacity",a,e-a,r):(r=new yt(l,"opacity",100*a,100*(e-a),r),r.xn1=u?1:0,l.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=o,r.setRatio=Vt),u&&(r=new yt(l,"visibility",0,0,r,(-1),null,(!1),0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),r.xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Ht=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(O,"-$1").toLowerCase())):t.removeAttribute(e))},Ut=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ht(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,n,r,o,a,l){var u,h,c,f,p,d=t.getAttribute("class")||"",m=t.style.cssText;if(o=r._classNamePT=new yt(t,n,0,0,o,2),o.setRatio=Ut,o.pr=-11,i=!0,o.b=d,h=it(t,s),c=t._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=o,o.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",o.e),u=nt(t,h,it(t),l,f),t.setAttribute("class",d),o.data=u.firstMPT,t.style.cssText=m,o=o.xfirst=r.parse(t,u.difs,o,a)}});var $t=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,a=u.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],u[i]&&(u[i].parse===a?r=!0:i="transformOrigin"===i?Rt:u[i].p),Ht(o,i);r&&(Ht(o,Ot),s=this.t._gsTransform,s&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,n,r,s){return s=new yt(t,n,0,0,s,2),s.setRatio=$t,s.e=e,s.pr=-10,s.data=r._tween,i=!0,s}}),h="bezier,throwProps,physicsProps,physics2D".split(","),bt=h.length;bt--;)kt(h[bt]);h=a.prototype,h._firstPT=h._lastParsedTransform=h._transform=null,h._onInitTween=function(t,e,n,l){if(!t.nodeType)return!1;this._target=_=t,this._tween=n,this._vars=e,v=l,c=e.autoRound,i=!1,r=e.suffixMap||a.suffixMap,s=K(t,""),o=this._overwriteProps;var h,d,g,y,x,w,b,T,P,S=t.style;if(f&&""===S.zIndex&&(h=J(t,"zIndex",s),"auto"!==h&&""!==h||this._addLazySet(S,"zIndex",0)),"string"==typeof e&&(y=S.cssText,h=it(t,s),S.cssText=y+";"+e,h=nt(t,h,it(t)).difs,!H&&k.test(e)&&(h.opacity=parseFloat(RegExp.$1)),e=h,S.cssText=y),e.className?this._firstPT=d=u.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(P=3===this._transformType,Ot?p&&(f=!0,""===S.zIndex&&(b=J(t,"zIndex",s),"auto"!==b&&""!==b||this._addLazySet(S,"zIndex",0)),m&&this._addLazySet(S,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):S.zoom=1,g=d;g&&g._next;)g=g._next;T=new yt(t,"transform",0,0,null,2),this._linkCSSP(T,null,g),T.setRatio=Ot?Wt:qt,T.data=this._transform||Yt(t,s,!0),T.tween=n,T.pr=-1,o.pop()}if(i){for(;d;){for(w=d._next,g=y;g&&g.pr>d.pr;)g=g._next;(d._prev=g?g._prev:x)?d._prev._next=d:y=d,(d._next=g)?g._prev=d:x=d,d=w}this._firstPT=y}return!0},h.parse=function(t,e,i,n){var o,a,l,h,f,p,d,m,g,y,x=t.style;for(o in e)p=e[o],"function"==typeof p&&(p=p(v,_)),a=u[o],a?i=a.parse(t,p,o,this,i,n,e):(f=J(t,o,s)+"",g="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||o.indexOf("Color")!==-1||g&&C.test(p)?(g||(p=pt(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=wt(x,o,f,p,!0,"transparent",i,0,n)):g&&L.test(p)?i=wt(x,o,f,p,!0,null,i,0,n):(l=parseFloat(f),d=l||0===l?f.substr((l+"").length):"",""!==f&&"auto"!==f||("width"===o||"height"===o?(l=ot(t,o,s),d="px"):"left"===o||"top"===o?(l=et(t,o,s),d="px"):(l="opacity"!==o?0:1,d="")),y=g&&"="===p.charAt(1),y?(h=parseInt(p.charAt(0)+"1",10),p=p.substr(2),h*=parseFloat(p),m=p.replace(T,"")):(h=parseFloat(p),m=g?p.replace(T,""):""),""===m&&(m=o in r?r[o]:d),p=h||0===h?(y?h+l:h)+m:e[o],d!==m&&""!==m&&(h||0===h)&&l&&(l=tt(t,o,l,d),"%"===m?(l/=tt(t,o,100,"%")/100,e.strictUnits!==!0&&(f=l+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?l/=tt(t,o,1,m):"px"!==m&&(h=tt(t,o,h,m),m="px"),y&&(h||0===h)&&(p=h+l+m)),y&&(h+=l),!l&&0!==l||!h&&0!==h?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(i=new yt(x,o,h||l||0,0,i,(-1),o,(!1),0,f,p),i.xs0="none"!==p||"display"!==o&&o.indexOf("Style")===-1?p:f):$("invalid "+o+" tween value: "+e[o]):(i=new yt(x,o,l,h-l,i,0,o,c!==!1&&("px"===m||"zIndex"===o),0,f,p),i.xs0=m))),n&&i&&!i.plugin&&(i.plugin=n);return i},h.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<s&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else r.type===-1?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&r.type!==-1)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},h._enableTransforms=function(t){this._transform=this._transform||Yt(this._target,s,!0),this._transformType=this._transform.svg&&St||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};h._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},h._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},h._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},h._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,s)};var Zt=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)Zt(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],o=s.type,s.style&&(e.push(it(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||Zt(s,e,i)};return a.cascadeTo=function(t,i,n){var r,s,o,a,l=e.to(t,i,n),u=[l],h=[],c=[],f=[],p=e._internals.reservedProps;for(t=l._targets||l.target,Zt(t,h,f),l.render(i,!0,!0),Zt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if(s=nt(f[r],h[r],c[r]),s.firstMPT){s=s.difs;for(o in n)p[o]&&(s[o]=n[o]);a={};for(o in s)a[o]=h[r][o];u.push(e.fromTo(f[r],i,a,s))}return u},t.activate([a]),a},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("CSSPlugin")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],10:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("plugins.ThrowPropsPlugin",["plugins.TweenPlugin","TweenLite","easing.Ease","utils.VelocityTracker"],function(t,e,i,r){var s,o,a,l,u=function(e,i){t.call(this,"throwProps"),this._overwriteProps.length=0},h=999999999999999,c=1e-10,f=n._gsDefine.globals,p=!1,d={x:1,y:1,z:2,scale:1,scaleX:1,scaleY:1,rotation:1,rotationZ:1,rotationX:2,rotationY:2,skewX:1,skewY:1,xPercent:1,yPercent:1},m=function(t,e,i,n){for(var r,s,o=e.length,a=0,l=h;--o>-1;)r=e[o],s=r-t,s<0&&(s=-s),s<l&&r>=n&&r<=i&&(a=o,l=s);return e[a]},g=function(t,e,i,n){if("auto"===t.end)return t;i=isNaN(i)?h:i,n=isNaN(n)?-h:n;var r="function"==typeof t.end?t.end(e):t.end instanceof Array?m(e,t.end,i,n):Number(t.end);return r>i?r=i:r<n&&(r=n),{max:r,min:r,unitFactor:t.unitFactor}},_=function(t,e,i){for(var n in e)void 0===t[n]&&n!==i&&(t[n]=e[n]);return t},v=u.calculateChange=function(t,n,r,s){null==s&&(s=.05);var o=n instanceof i?n:n?new i(n):e.defaultEase;return r*s*t/o.getRatio(s)},y=u.calculateDuration=function(t,n,r,s,o){o=o||.05;var a=s instanceof i?s:s?new i(s):e.defaultEase;return Math.abs((n-t)*a.getRatio(o)/r/o)},x=u.calculateTweenDuration=function(t,n,s,o,a,l){if("string"==typeof t&&(t=e.selector(t)),!t)return 0;null==s&&(s=10),null==o&&(o=.2),null==a&&(a=1),t.length&&(t=t[0]||t);var h,f,d,m,x,w,b,T,P,k,S=0,C=9999999999,O=n.throwProps||n,A=n.ease instanceof i?n.ease:n.ease?new i(n.ease):e.defaultEase,R=isNaN(O.checkpoint)?.05:Number(O.checkpoint),D=isNaN(O.resistance)?u.defaultResistance:Number(O.resistance);for(h in O)"resistance"!==h&&"checkpoint"!==h&&"preventOvershoot"!==h&&(f=O[h],"object"!=typeof f&&(P=P||r.getByTarget(t),P&&P.isTrackingProp(h)?f="number"==typeof f?{velocity:f}:{velocity:P.getVelocity(h)}:(m=Number(f)||0,d=m*D>0?m/D:m/-D)),"object"==typeof f&&(void 0!==f.velocity&&"number"==typeof f.velocity?m=Number(f.velocity)||0:(P=P||r.getByTarget(t),m=P&&P.isTrackingProp(h)?P.getVelocity(h):0),x=isNaN(f.resistance)?D:Number(f.resistance),d=m*x>0?m/x:m/-x,w="function"==typeof t[h]?t[h.indexOf("set")||"function"!=typeof t["get"+h.substr(3)]?h:"get"+h.substr(3)]():t[h]||0,b=w+v(m,A,d,R),void 0!==f.end&&(f=g(f,b,f.max,f.min),(l||p)&&(O[h]=_(f,O[h],"end"))),void 0!==f.max&&b>Number(f.max)+c?(k=f.unitFactor||u.defaultUnitFactors[h]||1,T=w>f.max&&f.min!==f.max||m*k>-15&&m*k<45?o+.1*(s-o):y(w,f.max,m,A,R),T+a<C&&(C=T+a)):void 0!==f.min&&b<Number(f.min)-c&&(k=f.unitFactor||u.defaultUnitFactors[h]||1,T=w<f.min&&f.min!==f.max||m*k>-45&&m*k<15?o+.1*(s-o):y(w,f.min,m,A,R),T+a<C&&(C=T+a)),T>S&&(S=T)),d>S&&(S=d));return S>C&&(S=C),S>s?s:S<o?o:S},w=u.prototype=new t("throwProps");return w.constructor=u,u.version="0.10.0",u.API=2,u._autoCSS=!0,u.defaultResistance=100,u.defaultUnitFactors={time:1e3,totalTime:1e3},u.track=function(t,e,i){return r.track(t,e,i)},u.untrack=function(t,e){r.untrack(t,e)},u.isTracking=function(t,e){return r.isTracking(t,e)},u.getVelocity=function(t,e){var i=r.getByTarget(t);return i?i.getVelocity(e):NaN},u._cssRegister=function(){var t=f.com.greensock.plugins.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,a=e.CSSPropTween;e._registerComplexSpecialProp("throwProps",{parser:function(t,e,l,h,c,f){f=new u;var p,m,g,_,v,y={},x={},w={},b={},T={},P={};o={};for(g in e)"resistance"!==g&&"preventOvershoot"!==g&&(m=e[g],
"object"==typeof m?(void 0!==m.velocity&&"number"==typeof m.velocity?y[g]=Number(m.velocity)||0:(v=v||r.getByTarget(t),y[g]=v&&v.isTrackingProp(g)?v.getVelocity(g):0),void 0!==m.end&&(b[g]=m.end),void 0!==m.min&&(x[g]=m.min),void 0!==m.max&&(w[g]=m.max),m.preventOvershoot&&(P[g]=!0),void 0!==m.resistance&&(p=!0,T[g]=m.resistance)):"number"==typeof m?y[g]=m:(v=v||r.getByTarget(t),v&&v.isTrackingProp(g)?y[g]=v.getVelocity(g):y[g]=m||0),d[g]&&h._enableTransforms(2===d[g]));_=i(t,y,h,c,f),s=_.proxy,y=_.end;for(g in s)o[g]={velocity:y[g],min:x[g],max:w[g],end:b[g],resistance:T[g],preventOvershoot:P[g]};return null!=e.resistance&&(o.resistance=e.resistance),e.preventOvershoot&&(o.preventOvershoot=!0),c=new a(t,"throwProps",0,0,_.pt,2),h._overwriteProps.pop(),c.plugin=f,c.setRatio=n,c.data=_,f._onInitTween(s,o,h._tween),c}})}},u.to=function(t,i,n,r,u){i.throwProps||(i={throwProps:i}),0===u&&(i.throwProps.preventOvershoot=!0),p=!0;var h=new e(t,r||1,i);return h.render(0,!0,!0),h.vars.css?(h.duration(x(s,{throwProps:o,ease:i.ease},n,r,u)),h._delay&&!h.vars.immediateRender?h.invalidate():a._onInitTween(s,l,h),p=!1,h):(h.kill(),h=new e(t,x(t,i,n,r,u),i),p=!1,h)},w._onInitTween=function(t,e,i,n){this.target=t,this._props=[],a=this,l=e;var s,o,u,h,c,f,d,m,y,x=i._ease,w=isNaN(e.checkpoint)?.05:Number(e.checkpoint),b=i._duration,T=e.preventOvershoot,P=0;for(s in e)if("resistance"!==s&&"checkpoint"!==s&&"preventOvershoot"!==s){if(o=e[s],"function"==typeof o&&(o=o(n,t)),"number"==typeof o)c=Number(o)||0;else if("object"!=typeof o||isNaN(o.velocity)){if(y=y||r.getByTarget(t),!y||!y.isTrackingProp(s))throw"ERROR: No velocity was defined in the throwProps tween of "+t+" property: "+s;c=y.getVelocity(s)}else c=Number(o.velocity);f=v(c,x,b,w),m=0,h="function"==typeof t[s],u=h?t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)]():t[s],"object"==typeof o&&(d=u+f,void 0!==o.end&&(o=g(o,d,o.max,o.min),p&&(e[s]=_(o,e[s],"end"))),void 0!==o.max&&Number(o.max)<d?T||o.preventOvershoot?f=o.max-u:m=o.max-u-f:void 0!==o.min&&Number(o.min)>d&&(T||o.preventOvershoot?f=o.min-u:m=o.min-u-f)),this._overwriteProps[P]=s,this._props[P++]={p:s,s:u,c1:f,c2:m,f:h,r:!1}}return!0},w._kill=function(e){for(var i=this._props.length;--i>-1;)null!=e[this._props[i].p]&&this._props.splice(i,1);return t.prototype._kill.call(this,e)},w._mod=function(t){for(var e,i=this._props,n=i.length;--n>-1;)e=t[i[n].p]||t.throwProps,"function"==typeof e&&(i[n].m=e)},w.setRatio=function(t){for(var e,i,n=this._props.length;--n>-1;)e=this._props[n],i=e.s+e.c1*t+e.c2*t*t,e.m?i=e.m(i,this.target):1===t&&(i=(1e4*i+(i<0?-.5:.5)|0)/1e4),e.f?this.target[e.p](i):this.target[e.p]=i},t.activate([u]),u},!0),n._gsDefine("utils.VelocityTracker",["TweenLite"],function(t){var e,i,n,r,s=/([A-Z])/g,o={},a={x:1,y:1,z:2,scale:1,scaleX:1,scaleY:1,rotation:1,rotationZ:1,rotationX:2,rotationY:2,skewX:1,skewY:1,xPercent:1,yPercent:1},l=document.defaultView?document.defaultView.getComputedStyle:function(){},u=function(t,e,i){var n=(t._gsTransform||o)[e];return n||0===n?n:(t.style[e]?n=t.style[e]:(i=i||l(t,null))?n=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(s,"-$1").toLowerCase()):t.currentStyle&&(n=t.currentStyle[e]),parseFloat(n)||0)},h=t.ticker,c=function(t,e,i){this.p=t,this.f=e,this.v1=this.v2=0,this.t1=this.t2=h.time,this.css=!1,this.type="",this._prev=null,i&&(this._next=i,i._prev=this)},f=function(){var t,i,s=e,o=h.time;if(o-n>=.03)for(r=n,n=o;s;){for(i=s._firstVP;i;)t=i.css?u(s.target,i.p):i.f?s.target[i.p]():s.target[i.p],(t!==i.v1||o-i.t1>.15)&&(i.v2=i.v1,i.v1=t,i.t2=i.t1,i.t1=o),i=i._next;s=s._next}},p=function(t){this._lookup={},this.target=t,this.elem=!(!t.style||!t.nodeType),i||(h.addEventListener("tick",f,null,!1,-100),n=r=h.time,i=!0),e&&(this._next=e,e._prev=this),e=this},d=p.getByTarget=function(t){for(var i=e;i;){if(i.target===t)return i;i=i._next}},m=p.prototype;return m.addProp=function(e,i){if(!this._lookup[e]){var n=this.target,r="function"==typeof n[e],s=r?this._altProp(e):e,o=this._firstVP;this._firstVP=this._lookup[e]=this._lookup[s]=o=new c(s!==e&&0===e.indexOf("set")?s:e,r,o),o.css=this.elem&&(void 0!==this.target.style[o.p]||a[o.p]),o.css&&a[o.p]&&!n._gsTransform&&t.set(n,{x:"+=0",overwrite:!1}),o.type=i||o.css&&0===e.indexOf("rotation")?"deg":"",o.v1=o.v2=o.css?u(n,o.p):r?n[o.p]():n[o.p]}},m.removeProp=function(t){var e=this._lookup[t];e&&(e._prev?e._prev._next=e._next:e===this._firstVP&&(this._firstVP=e._next),e._next&&(e._next._prev=e._prev),this._lookup[t]=0,e.f&&(this._lookup[this._altProp(t)]=0))},m.isTrackingProp=function(t){return this._lookup[t]instanceof c},m.getVelocity=function(t){var e,i,n,r=this._lookup[t],s=this.target;if(!r)throw"The velocity of "+t+" is not being tracked.";return e=r.css?u(s,r.p):r.f?s[r.p]():s[r.p],i=e-r.v2,"rad"!==r.type&&"deg"!==r.type||(n="rad"===r.type?2*Math.PI:360,i%=n,i!==i%(n/2)&&(i=i<0?i+n:i-n)),i/(h.time-r.t2)},m._altProp=function(t){var e=t.substr(0,3),i=("get"===e?"set":"set"===e?"get":e)+t.substr(3);return"function"==typeof this.target[i]?i:t},p.getByTarget=function(i){var n=e;for("string"==typeof i&&(i=t.selector(i)),i.length&&i!==window&&i[0]&&i[0].style&&!i.nodeType&&(i=i[0]);n;){if(n.target===i)return n;n=n._next}},p.track=function(t,e,i){var n=d(t),r=e.split(","),s=r.length;for(i=(i||"").split(","),n||(n=new p(t));--s>-1;)n.addProp(r[s],i[s]||i[0]);return n},p.untrack=function(t,i){var n=d(t),r=(i||"").split(","),s=r.length;if(n){for(;--s>-1;)n.removeProp(r[s]);n._firstVP&&i||(n._prev?n._prev._next=n._next:n===e&&(e=n._next),n._next&&(n._next._prev=n._prev))}},p.isTracking=function(t,e){var i=d(t);return!!i&&(!(e||!i._firstVP)||i.isTrackingProp(e))},p},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("ThrowPropsPlugin")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],11:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("utils.Draggable",["events.EventDispatcher","TweenLite","plugins.CSSPlugin"],function(t,e,i){var r,s,o,a,l,u,h,c,f,p={css:{}},d={css:{}},m={css:{}},g={css:{}},_=n._gsDefine.globals,v={},y=document,x=y.documentElement||{},w=function(t){return y.createElementNS?y.createElementNS("http://www.w3.org/1999/xhtml",t):y.createElement(t)},b=w("div"),T=[],P=function(){return!1},k=180/Math.PI,S=999999999999999,C=Date.now||function(){return(new Date).getTime()},O=!(y.addEventListener||!y.all),A=y.createElement("div"),R=[],D={},M=0,N=/^(?:a|input|textarea|button|select)$/i,F=0,E=navigator.userAgent.toLowerCase().indexOf("android")!==-1,L=0,j={},X={},I=function(t){if("string"==typeof t&&(t=e.selector(t)),!t||t.nodeType)return[t];var i,n=[],r=t.length;for(i=0;i!==r;n.push(t[i++]));return n},B=function(t){var e,i={};for(e in t)i[e]=t[e];return i},z=function(){for(var t=R.length;--t>-1;)R[t]()},Y=function(t){R.push(t),1===R.length&&e.ticker.addEventListener("tick",z,this,!1,1)},q=function(t){for(var i=R.length;--i>-1;)R[i]===t&&R.splice(i,1);e.to(W,0,{overwrite:"all",delay:15,onComplete:W})},W=function(){R.length||e.ticker.removeEventListener("tick",z)},V=function(t,e){var i;for(i in e)void 0===t[i]&&(t[i]=e[i]);return t},H=function(){return null!=window.pageYOffset?window.pageYOffset:null!=y.scrollTop?y.scrollTop:x.scrollTop||y.body.scrollTop||0},U=function(){return null!=window.pageXOffset?window.pageXOffset:null!=y.scrollLeft?y.scrollLeft:x.scrollLeft||y.body.scrollLeft||0},$=function(t,e){Et(t,"scroll",e),Z(t.parentNode)||$(t.parentNode,e)},G=function(t,e){Lt(t,"scroll",e),Z(t.parentNode)||G(t.parentNode,e)},Z=function(t){return!(t&&t!==x&&t!==y&&t!==y.body&&t!==window&&t.nodeType&&t.parentNode)},Q=function(t,e){var i="x"===e?"Width":"Height",n="scroll"+i,r="client"+i,s=y.body;return Math.max(0,Z(t)?Math.max(x[n],s[n])-(window["inner"+i]||x[r]||s[r]):t[n]-t[r])},K=function(t){var e=Z(t),i=Q(t,"x"),n=Q(t,"y");e?t=X:K(t.parentNode),t._gsMaxScrollX=i,t._gsMaxScrollY=n,t._gsScrollX=t.scrollLeft||0,t._gsScrollY=t.scrollTop||0},J=function(t,e){return t=t||window.event,v.pageX=t.clientX+y.body.scrollLeft+x.scrollLeft,v.pageY=t.clientY+y.body.scrollTop+x.scrollTop,e&&(t.returnValue=!1),v},tt=function(t){return t?("string"==typeof t&&(t=e.selector(t)),t.length&&t!==window&&t[0]&&t[0].style&&!t.nodeType&&(t=t[0]),t===window||t.nodeType&&t.style?t:null):t},et=function(t,e){var i,n,s,o=t.style;if(void 0===o[e]){for(s=["O","Moz","ms","Ms","Webkit"],n=5,i=e.charAt(0).toUpperCase()+e.substr(1);--n>-1&&void 0===o[s[n]+i];);if(n<0)return"";r=3===n?"ms":s[n],e=r+i}return e},it=function(t,e,i){var n=t.style;n&&(void 0===n[e]&&(e=et(t,e)),null==i?n.removeProperty?n.removeProperty(e.replace(/([A-Z])/g,"-$1").toLowerCase()):n.removeAttribute(e):void 0!==n[e]&&(n[e]=i))},nt=y.defaultView?y.defaultView.getComputedStyle:P,rt=/(?:Left|Right|Width)/i,st=/(?:\d|\-|\+|=|#|\.)*/g,ot=function(t,e,i,n,r){if("px"===n||!n)return i;if("auto"===n||!i)return 0;var s,o=rt.test(e),a=t,l=b.style,u=i<0;return u&&(i=-i),"%"===n&&e.indexOf("border")!==-1?s=i/100*(o?t.clientWidth:t.clientHeight):(l.cssText="border:0 solid red;position:"+lt(t,"position",!0)+";line-height:0;","%"!==n&&a.appendChild?l[o?"borderLeftWidth":"borderTopWidth"]=i+n:(a=t.parentNode||y.body,l[o?"width":"height"]=i+n),a.appendChild(b),s=parseFloat(b[o?"offsetWidth":"offsetHeight"]),a.removeChild(b),0!==s||r||(s=ot(t,e,i,n,!0))),u?-s:s},at=function(t,e){if("absolute"!==lt(t,"position",!0))return 0;var i="left"===e?"Left":"Top",n=lt(t,"margin"+i,!0);return t["offset"+i]-(ot(t,e,parseFloat(n),(n+"").replace(st,""))||0)},lt=function(t,e,i){var n,r=(t._gsTransform||{})[e];return r||0===r?r:(t.style[e]?r=t.style[e]:(n=nt(t))?(r=n.getPropertyValue(e.replace(/([A-Z])/g,"-$1").toLowerCase()),r=r||n.length?r:n[e]):t.currentStyle&&(r=t.currentStyle[e]),"auto"!==r||"top"!==e&&"left"!==e||(r=at(t,e)),i?r:parseFloat(r)||0)},ut=function(t,e,i){var n=t.vars,r=n[i],s=t._listeners[e];"function"==typeof r&&r.apply(n[i+"Scope"]||n.callbackScope||t,n[i+"Params"]||[t.pointerEvent]),s&&t.dispatchEvent(e)},ht=function(t,e){var i,n,r,s=tt(t);return s?Rt(s,e):void 0!==t.left?(r=Pt(e),{left:t.left-r.x,top:t.top-r.y,width:t.width,height:t.height}):(n=t.min||t.minX||t.minRotation||0,i=t.min||t.minY||0,{left:n,top:i,width:(t.max||t.maxX||t.maxRotation||0)-n,height:(t.max||t.maxY||0)-i})},ct=function(){if(!y.createElementNS)return a=0,void(l=!1);var t,e,i,n,r=w("div"),s=y.createElementNS("http://www.w3.org/2000/svg","svg"),o=w("div"),f=r.style,p=y.body||x;y.body&&dt&&(f.position="absolute",p.appendChild(o),o.appendChild(r),n=r.offsetParent,o.style[dt]="rotate(1deg)",c=r.offsetParent===n,o.style.position="absolute",f.height="10px",n=r.offsetTop,o.style.border="5px solid red",h=n!==r.offsetTop,p.removeChild(o)),f=s.style,s.setAttributeNS(null,"width","400px"),s.setAttributeNS(null,"height","400px"),s.setAttributeNS(null,"viewBox","0 0 400 400"),f.display="block",f.boxSizing="border-box",f.border="0px solid red",f.transform="none",r.style.cssText="width:100px;height:100px;overflow:scroll;-ms-overflow-style:none;",p.appendChild(r),r.appendChild(s),i=s.createSVGPoint().matrixTransform(s.getScreenCTM()),e=i.y,r.scrollTop=100,i.x=i.y=0,i=i.matrixTransform(s.getScreenCTM()),u=e-i.y<100.1?0:e-i.y-150,r.removeChild(s),p.removeChild(r),p.appendChild(s),t=s.getScreenCTM(),e=t.e,f.border="50px solid red",t=s.getScreenCTM(),0===e&&0===t.e&&0===t.f&&1===t.a?(a=1,l=!0):(a=e!==t.e?1:0,l=1!==t.a),p.removeChild(s)},ft=""!==et(b,"perspective"),pt=et(b,"transformOrigin").replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),dt=et(b,"transform"),mt=dt.replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),gt={},_t={},vt=window.SVGElement,yt=function(t){return!!(vt&&"function"==typeof t.getBBox&&t.getCTM&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},xt=(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent))&&parseFloat(RegExp.$1)<11,wt=[],bt=[],Tt=function(t){if(!t.getBoundingClientRect||!t.parentNode||!dt)return{offsetTop:0,offsetLeft:0,scaleX:1,scaleY:1,offsetParent:x};if(Vt.cacheSVGData!==!1&&t._dCache&&t._dCache.lastUpdate===e.ticker.frame)return t._dCache;var i,n,r,s,o,h,c,f,p,d,m,g,_=t,v=kt(t);if(v.lastUpdate=e.ticker.frame,t.getBBox&&!v.isSVGRoot){for(_=t.parentNode,i=t.getBBox();_&&"svg"!==(_.nodeName+"").toLowerCase();)_=_.parentNode;return s=Tt(_),v.offsetTop=i.y*s.scaleY,v.offsetLeft=i.x*s.scaleX,v.scaleX=s.scaleX,v.scaleY=s.scaleY,v.offsetParent=_||x,v}for(r=v.offsetParent,r===y.body&&(r=x),bt.length=wt.length=0;_&&(o=lt(_,dt,!0),"matrix(1, 0, 0, 1, 0, 0)"!==o&&"none"!==o&&"translate3d(0px, 0px, 0px)"!==o&&(bt.push(_),wt.push(_.style[dt]),_.style[dt]="none"),_!==r);)_=_.parentNode;for(n=r.getBoundingClientRect(),o=t.getScreenCTM(),f=t.createSVGPoint(),c=f.matrixTransform(o),f.x=f.y=10,f=f.matrixTransform(o),v.scaleX=(f.x-c.x)/10,v.scaleY=(f.y-c.y)/10,void 0===a&&ct(),v.borderBox&&!l&&t.getAttribute("width")&&(s=nt(t)||{},p=parseFloat(s.borderLeftWidth)+parseFloat(s.borderRightWidth)||0,d=parseFloat(s.borderTopWidth)+parseFloat(s.borderBottomWidth)||0,m=parseFloat(s.width)||0,g=parseFloat(s.height)||0,v.scaleX*=(m-p)/m,v.scaleY*=(g-d)/g),u?(i=t.getBoundingClientRect(),v.offsetLeft=i.left-n.left,v.offsetTop=i.top-n.top):(v.offsetLeft=c.x-n.left,v.offsetTop=c.y-n.top),v.offsetParent=r,h=bt.length;--h>-1;)bt[h].style[dt]=wt[h];return v},Pt=function(t,i){if(i=i||{},!t||t===x||!t.parentNode||t===window)return{x:0,y:0};var n=nt(t),r=pt&&n?n.getPropertyValue(pt):"50% 50%",s=r.split(" "),o=r.indexOf("left")!==-1?"0%":r.indexOf("right")!==-1?"100%":s[0],a=r.indexOf("top")!==-1?"0%":r.indexOf("bottom")!==-1?"100%":s[1];return"center"!==a&&null!=a||(a="50%"),("center"===o||isNaN(parseFloat(o)))&&(o="50%"),t.getBBox&&yt(t)?(t._gsTransform||(e.set(t,{x:"+=0",overwrite:!1}),void 0===t._gsTransform.xOrigin&&console.log("Draggable requires at least GSAP 1.17.0")),r=t.getBBox(),i.x=t._gsTransform.xOrigin-r.x,i.y=t._gsTransform.yOrigin-r.y):(t.getBBox&&(o+a).indexOf("%")!==-1&&(t=t.getBBox(),t={offsetWidth:t.width,offsetHeight:t.height}),i.x=o.indexOf("%")!==-1?t.offsetWidth*parseFloat(o)/100:parseFloat(o),i.y=a.indexOf("%")!==-1?t.offsetHeight*parseFloat(a)/100:parseFloat(a)),i},kt=function(t){if(Vt.cacheSVGData!==!1&&t._dCache&&t._dCache.lastUpdate===e.ticker.frame)return t._dCache;var i,n=t._dCache=t._dCache||{},r=nt(t),s=t.getBBox&&yt(t),o="svg"===(t.nodeName+"").toLowerCase();if(n.isSVG=s,n.isSVGRoot=o,n.borderBox="border-box"===r.boxSizing,n.computedStyle=r,o)i=t.parentNode||x,i.insertBefore(b,t),n.offsetParent=b.offsetParent||x,i.removeChild(b);else if(s){for(i=t.parentNode;i&&"svg"!==(i.nodeName+"").toLowerCase();)i=i.parentNode;n.offsetParent=i}else n.offsetParent=t.offsetParent;return n},St=function(t,e,i,n){if(t===window||!t||!t.style||!t.parentNode)return[1,0,0,1,0,0];var r,s,o,l,u,f,p,d,m,g,_,v,w,b,T=t._dCache||kt(t),P=t.parentNode,k=P._dCache||kt(P),S=T.computedStyle,C=T.isSVG?k.offsetParent:P.offsetParent;return r=T.isSVG&&(t.style[dt]+"").indexOf("matrix")!==-1?t.style[dt]:S?S.getPropertyValue(mt):t.currentStyle?t.currentStyle[dt]:"1,0,0,1,0,0",t.getBBox&&(t.getAttribute("transform")+"").indexOf("matrix")!==-1&&(r=t.getAttribute("transform")),r=(r+"").match(/(?:\-|\.|\b)(\d|\.|e\-)+/g)||[1,0,0,1,0,0],r.length>6&&(r=[r[0],r[1],r[4],r[5],r[12],r[13]]),n?r[4]=r[5]=0:T.isSVG&&(u=t._gsTransform)&&(u.xOrigin||u.yOrigin)&&(r[0]=parseFloat(r[0]),r[1]=parseFloat(r[1]),r[2]=parseFloat(r[2]),r[3]=parseFloat(r[3]),r[4]=parseFloat(r[4])-(u.xOrigin-(u.xOrigin*r[0]+u.yOrigin*r[2])),r[5]=parseFloat(r[5])-(u.yOrigin-(u.xOrigin*r[1]+u.yOrigin*r[3]))),e&&(void 0===a&&ct(),o=T.isSVG||T.isSVGRoot?Tt(t):t,T.isSVG?(l=t.getBBox(),g=k.isSVGRoot?{x:0,y:0}:P.getBBox(),o={offsetLeft:l.x-g.x,offsetTop:l.y-g.y,offsetParent:T.offsetParent}):T.isSVGRoot?(_=parseInt(S.borderTopWidth,10)||0,v=parseInt(S.borderLeftWidth,10)||0,w=(r[0]-a)*v+r[2]*_,b=r[1]*v+(r[3]-a)*_,f=e.x,p=e.y,d=f-(f*r[0]+p*r[2]),m=p-(f*r[1]+p*r[3]),r[4]=parseFloat(r[4])+d,r[5]=parseFloat(r[5])+m,e.x-=d,e.y-=m,f=o.scaleX,p=o.scaleY,e.x*=f,e.y*=p,r[0]*=f,r[1]*=p,r[2]*=f,r[3]*=p,xt||(e.x+=w,e.y+=b)):!h&&t.offsetParent&&(e.x+=parseInt(lt(t.offsetParent,"borderLeftWidth"),10)||0,e.y+=parseInt(lt(t.offsetParent,"borderTopWidth"),10)||0),s=P===x||P===y.body,r[4]=Number(r[4])+e.x+(o.offsetLeft||0)-i.x-(s?0:P.scrollLeft||0),r[5]=Number(r[5])+e.y+(o.offsetTop||0)-i.y-(s?0:P.scrollTop||0),P&&"fixed"===lt(t,"position",S)&&(r[4]+=U(),r[5]+=H()),!P||P===x||C!==o.offsetParent||k.isSVG||c&&"100100"!==St(P).join("")||(o=k.isSVGRoot?Tt(P):P,r[4]-=o.offsetLeft||0,r[5]-=o.offsetTop||0,h||!k.offsetParent||T.isSVG||T.isSVGRoot||(r[4]-=parseInt(lt(k.offsetParent,"borderLeftWidth"),10)||0,r[5]-=parseInt(lt(k.offsetParent,"borderTopWidth"),10)||0))),r},Ct=function(t,e){if(!t||t===window||!t.parentNode)return[1,0,0,1,0,0];for(var i,n,r,s,o,a,l,u,h=Pt(t,gt),c=Pt(t.parentNode,_t),f=St(t,h,c);(t=t.parentNode)&&t.parentNode&&t!==x;)h=c,c=Pt(t.parentNode,h===gt?_t:gt),l=St(t,h,c),i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],f[0]=i*l[0]+n*l[2],f[1]=i*l[1]+n*l[3],f[2]=r*l[0]+s*l[2],f[3]=r*l[1]+s*l[3],f[4]=o*l[0]+a*l[2]+l[4],f[5]=o*l[1]+a*l[3]+l[5];return e&&(i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],u=i*s-n*r,f[0]=s/u,f[1]=-n/u,f[2]=-r/u,f[3]=i/u,f[4]=(r*a-s*o)/u,f[5]=-(i*a-n*o)/u),f},Ot=function(t,e,i,n,r){t=tt(t);var s=Ct(t,!1,r),o=e.x,a=e.y;return i&&(Pt(t,e),o-=e.x,a-=e.y),n=n===!0?e:n||{},n.x=o*s[0]+a*s[2]+s[4],n.y=o*s[1]+a*s[3]+s[5],n},At=function(t,e,i){var n=t.x*e[0]+t.y*e[2]+e[4],r=t.x*e[1]+t.y*e[3]+e[5];return t.x=n*i[0]+r*i[2]+i[4],t.y=n*i[1]+r*i[3]+i[5],t},Rt=function(t,e,i){if(!(t=tt(t)))return null;e=tt(e);var n,r,s,o,a,l,u,h,c,f,p,d,m,g,_,v,w,b,T,P,k,S,C=t.getBBox&&yt(t);if(t===window)o=H(),r=U(),s=r+(x.clientWidth||t.innerWidth||y.body.clientWidth||0),a=o+((t.innerHeight||0)-20<x.clientHeight?x.clientHeight:t.innerHeight||y.body.clientHeight||0);else{if(void 0===e||e===window)return t.getBoundingClientRect();n=Pt(t),r=-n.x,o=-n.y,C?(d=t.getBBox(),m=d.width,g=d.height):"svg"!==(t.nodeName+"").toLowerCase()&&t.offsetWidth?(m=t.offsetWidth,g=t.offsetHeight):(k=nt(t),m=parseFloat(k.width),g=parseFloat(k.height)),s=r+m,a=o+g,"svg"!==t.nodeName.toLowerCase()||O||(_=Tt(t),S=_.computedStyle||{},b=(t.getAttribute("viewBox")||"0 0").split(" "),T=parseFloat(b[0]),P=parseFloat(b[1]),v=parseFloat(S.borderLeftWidth)||0,w=parseFloat(S.borderTopWidth)||0,s-=m-(m-v)/_.scaleX-T,a-=g-(g-w)/_.scaleY-P,r-=v/_.scaleX-T,o-=w/_.scaleY-P,k&&(s+=(parseFloat(S.borderRightWidth)+v)/_.scaleX,a+=(w+parseFloat(S.borderBottomWidth))/_.scaleY))}return t===e?{left:r,top:o,width:s-r,height:a-o}:(l=Ct(t),u=Ct(e,!0),h=At({x:r,y:o},l,u),c=At({x:s,y:o},l,u),f=At({x:s,y:a},l,u),p=At({x:r,y:a},l,u),r=Math.min(h.x,c.x,f.x,p.x),o=Math.min(h.y,c.y,f.y,p.y),j.x=j.y=0,i&&Pt(e,j),{left:r+j.x,top:o+j.y,width:Math.max(h.x,c.x,f.x,p.x)-r,height:Math.max(h.y,c.y,f.y,p.y)-o})},Dt=function(t){return!!(t&&t.length&&t[0]&&(t[0].nodeType&&t[0].style&&!t.nodeType||t[0].length&&t[0][0]))},Mt=function(t){var e,i,n,r=[],s=t.length;for(e=0;e<s;e++)if(i=t[e],Dt(i))for(n=i.length,n=0;n<i.length;n++)r.push(i[n]);else i&&0!==i.length&&r.push(i);return r},Nt="ontouchstart"in x&&"orientation"in window,Ft=function(t){for(var e=t.split(","),i=(void 0!==b.onpointerdown?"pointerdown,pointermove,pointerup,pointercancel":void 0!==b.onmspointerdown?"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel":t).split(","),n={},r=8;--r>-1;)n[e[r]]=i[r],n[i[r]]=e[r];return n}("touchstart,touchmove,touchend,touchcancel"),Et=function(t,e,i,n){t.addEventListener?t.addEventListener(Ft[e]||e,i,n):t.attachEvent&&t.attachEvent("on"+e,i)},Lt=function(t,e,i){t.removeEventListener?t.removeEventListener(Ft[e]||e,i):t.detachEvent&&t.detachEvent("on"+e,i)},jt=function(t,e){for(var i=t.length;--i>-1;)if(t[i].identifier===e)return!0;return!1},Xt=function(t){s=t.touches&&F<t.touches.length,Lt(t.target,"touchend",Xt)},It=function(t){s=t.touches&&F<t.touches.length,Et(t.target,"touchend",Xt)},Bt=function(t,e,i,n,r,s){var o,a,l,u={};if(e)if(1!==r&&e instanceof Array){for(u.end=o=[],l=e.length,a=0;a<l;a++)o[a]=e[a]*r;i+=1.1,n-=1.1}else"function"==typeof e?u.end=function(i){return e.call(t,i)*r}:u.end=e;return(i||0===i)&&(u.max=i),(n||0===n)&&(u.min=n),s&&(u.velocity=0),u},zt=function(t){var e;return!(!t||!t.getAttribute||"BODY"===t.nodeName)&&(!("true"!==(e=t.getAttribute("data-clickable"))&&("false"===e||!t.onclick&&!N.test(t.nodeName+"")&&"true"!==t.getAttribute("contentEditable")))||zt(t.parentNode))},Yt=function(t,e){for(var i,n=t.length;--n>-1;)i=t[n],i.ondragstart=i.onselectstart=e?null:P,it(i,"userSelect",e?"text":"none")},qt=function(){var t,e=y.createElement("div"),i=y.createElement("div"),n=i.style,r=y.body||b;return n.display="inline-block",n.position="relative",e.style.cssText=i.innerHTML="width:90px; height:40px; padding:10px; overflow:auto; visibility: hidden",e.appendChild(i),r.appendChild(e),f=i.offsetHeight+18>e.scrollHeight,n.width="100%",dt||(n.paddingRight="500px",t=e.scrollLeft=e.scrollWidth-e.clientWidth,n.left="-90px",t=t!==e.scrollLeft),r.removeChild(e),t}(),Wt=function(t,i){t=tt(t),i=i||{};var n,r,s,o,a,l,u=y.createElement("div"),h=u.style,c=t.firstChild,p=0,d=0,m=t.scrollTop,g=t.scrollLeft,_=t.scrollWidth,v=t.scrollHeight,x=0,w=0,b=0;ft&&i.force3D!==!1?(a="translate3d(",l="px,0px)"):dt&&(a="translate(",l="px)"),this.scrollTop=function(t,e){return arguments.length?void this.top(-t,e):-this.top()},this.scrollLeft=function(t,e){return arguments.length?void this.left(-t,e):-this.left()},this.left=function(n,r){if(!arguments.length)return-(t.scrollLeft+d);var s=t.scrollLeft-g,o=d;return(s>2||s<-2)&&!r?(g=t.scrollLeft,e.killTweensOf(this,!0,{left:1,scrollLeft:1}),this.left(-g),void(i.onKill&&i.onKill())):(n=-n,n<0?(d=n-.5|0,n=0):n>w?(d=n-w|0,n=w):d=0,(d||o)&&(a?this._suspendTransforms||(h[dt]=a+-d+"px,"+-p+l):h.left=-d+"px",qt&&d+x>=0&&(h.paddingRight=d+x+"px")),t.scrollLeft=0|n,void(g=t.scrollLeft))},this.top=function(n,r){if(!arguments.length)return-(t.scrollTop+p);var s=t.scrollTop-m,o=p;return(s>2||s<-2)&&!r?(m=t.scrollTop,e.killTweensOf(this,!0,{top:1,scrollTop:1}),this.top(-m),void(i.onKill&&i.onKill())):(n=-n,n<0?(p=n-.5|0,n=0):n>b?(p=n-b|0,n=b):p=0,(p||o)&&(a?this._suspendTransforms||(h[dt]=a+-d+"px,"+-p+l):h.top=-p+"px"),t.scrollTop=0|n,void(m=t.scrollTop))},this.maxScrollTop=function(){return b},this.maxScrollLeft=function(){return w},this.disable=function(){for(c=u.firstChild;c;)o=c.nextSibling,t.appendChild(c),c=o;t===u.parentNode&&t.removeChild(u)},this.enable=function(){if(c=t.firstChild,c!==u){for(;c;)o=c.nextSibling,u.appendChild(c),c=o;t.appendChild(u),this.calibrate()}},this.calibrate=function(e){var i,o,a=t.clientWidth===n;m=t.scrollTop,g=t.scrollLeft,a&&t.clientHeight===r&&u.offsetHeight===s&&_===t.scrollWidth&&v===t.scrollHeight&&!e||((p||d)&&(i=this.left(),o=this.top(),this.left(-t.scrollLeft),this.top(-t.scrollTop)),a&&!e||(h.display="block",h.width="auto",h.paddingRight="0px",x=Math.max(0,t.scrollWidth-t.clientWidth),x&&(x+=lt(t,"paddingLeft")+(f?lt(t,"paddingRight"):0))),h.display="inline-block",h.position="relative",h.overflow="visible",h.verticalAlign="top",h.width="100%",h.paddingRight=x+"px",f&&(h.paddingBottom=lt(t,"paddingBottom",!0)),O&&(h.zoom="1"),n=t.clientWidth,r=t.clientHeight,_=t.scrollWidth,v=t.scrollHeight,w=t.scrollWidth-n,b=t.scrollHeight-r,s=u.offsetHeight,h.display="block",(i||o)&&(this.left(i),this.top(o)))},this.content=u,this.element=t,this._suspendTransforms=!1,this.enable()},Vt=function(n,r){t.call(this,n),n=tt(n),o||(o=_.com.greensock.plugins.ThrowPropsPlugin),this.vars=r=B(r||{}),this.target=n,this.x=this.y=this.rotation=0,this.dragResistance=parseFloat(r.dragResistance)||0,this.edgeResistance=isNaN(r.edgeResistance)?1:parseFloat(r.edgeResistance)||0,this.lockAxis=r.lockAxis,this.autoScroll=r.autoScroll||0,this.lockedAxis=null,this.allowEventDefault=!!r.allowEventDefault;var a,l,u,h,c,f,v,w,b,P,R,N,j,z,W,H,U,Q,et,nt,rt,st,ot,at,ct,ft,pt,dt,mt,gt,_t,vt,yt,xt=(r.type||(O?"top,left":"x,y")).toLowerCase(),wt=xt.indexOf("x")!==-1||xt.indexOf("y")!==-1,bt=xt.indexOf("rotation")!==-1,Tt=bt?"rotation":wt?"x":"left",Pt=wt?"y":"top",kt=xt.indexOf("x")!==-1||xt.indexOf("left")!==-1||"scroll"===xt,St=xt.indexOf("y")!==-1||xt.indexOf("top")!==-1||"scroll"===xt,At=r.minimumMovement||2,Rt=this,Dt=I(r.trigger||r.handle||n),Mt={},Xt=0,qt=!1,Ht=r.clickableTest||zt,Ut=0,$t=function(t){if(Rt.autoScroll&&Rt.isDragging&&(qt||Q)){var e,i,r,s,o,a,u,h,c=n,f=15*Rt.autoScroll;for(qt=!1,X.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=x.scrollTop?x.scrollTop:y.body.scrollTop,X.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=x.scrollLeft?x.scrollLeft:y.body.scrollLeft,s=Rt.pointerX-X.scrollLeft,o=Rt.pointerY-X.scrollTop;c&&!i;)i=Z(c.parentNode),e=i?X:c.parentNode,r=i?{bottom:Math.max(x.clientHeight,window.innerHeight||0),right:Math.max(x.clientWidth,window.innerWidth||0),left:0,top:0}:e.getBoundingClientRect(),a=u=0,St&&(h=e._gsMaxScrollY-e.scrollTop,h<0?u=h:o>r.bottom-40&&h?(qt=!0,u=Math.min(h,f*(1-Math.max(0,r.bottom-o)/40)|0)):o<r.top+40&&e.scrollTop&&(qt=!0,u=-Math.min(e.scrollTop,f*(1-Math.max(0,o-r.top)/40)|0)),u&&(e.scrollTop+=u)),kt&&(h=e._gsMaxScrollX-e.scrollLeft,h<0?a=h:s>r.right-40&&h?(qt=!0,a=Math.min(h,f*(1-Math.max(0,r.right-s)/40)|0)):s<r.left+40&&e.scrollLeft&&(qt=!0,a=-Math.min(e.scrollLeft,f*(1-Math.max(0,s-r.left)/40)|0)),a&&(e.scrollLeft+=a)),i&&(a||u)&&(window.scrollTo(e.scrollLeft,e.scrollTop),le(Rt.pointerX+a,Rt.pointerY+u)),c=e}if(Q){var p=Rt.x,d=Rt.y,m=1e-6;p<m&&p>-m&&(p=0),d<m&&d>-m&&(d=0),bt?(dt.data.rotation=Rt.rotation=p,dt.setRatio(1)):l?(St&&l.top(d),kt&&l.left(p)):wt?(St&&(dt.data.y=d),kt&&(dt.data.x=p),dt.setRatio(1)):(St&&(n.style.top=d+"px"),kt&&(n.style.left=p+"px")),!w||t||_t||(_t=!0,ut(Rt,"drag","onDrag"),_t=!1)}Q=!1},Zt=function(t,i){var r;Rt.x,Rt.y;n._gsTransform||!wt&&!bt||e.set(n,{x:"+=0",overwrite:!1}),wt?(Rt.y=n._gsTransform.y,Rt.x=n._gsTransform.x):bt?Rt.x=Rt.rotation=n._gsTransform.rotation:l?(Rt.y=l.top(),Rt.x=l.left()):(Rt.y=parseInt(n.style.top,10)||0,Rt.x=parseInt(n.style.left,10)||0),!nt&&!rt||i||!Rt.isDragging&&!Rt.isThrowing||(nt&&(r=nt(Rt.x),r!==Rt.x&&(Rt.x=r,bt&&(Rt.rotation=r),Q=!0)),rt&&(r=rt(Rt.y),r!==Rt.y&&(Rt.y=r),Q=!0)),Q&&$t(!0),t||ut(Rt,"throwupdate","onThrowUpdate")},Qt=function(){var t,e,i,s;v=!1,l?(l.calibrate(),Rt.minX=P=-l.maxScrollLeft(),Rt.minY=N=-l.maxScrollTop(),Rt.maxX=b=Rt.maxY=R=0,v=!0):r.bounds&&(t=ht(r.bounds,n.parentNode),bt?(Rt.minX=P=t.left,Rt.maxX=b=t.left+t.width,Rt.minY=N=Rt.maxY=R=0):void 0!==r.bounds.maxX||void 0!==r.bounds.maxY?(t=r.bounds,Rt.minX=P=t.minX,Rt.minY=N=t.minY,Rt.maxX=b=t.maxX,Rt.maxY=R=t.maxY):(e=ht(n,n.parentNode),Rt.minX=P=lt(n,Tt)+t.left-e.left,Rt.minY=N=lt(n,Pt)+t.top-e.top,Rt.maxX=b=P+(t.width-e.width),Rt.maxY=R=N+(t.height-e.height)),P>b&&(Rt.minX=b,Rt.maxX=b=P,P=Rt.minX),N>R&&(Rt.minY=R,Rt.maxY=R=N,N=Rt.minY),bt&&(Rt.minRotation=P,Rt.maxRotation=b),v=!0),r.liveSnap&&(i=r.liveSnap===!0?r.snap||{}:r.liveSnap,s=i instanceof Array||"function"==typeof i,bt?(nt=se(s?i:i.rotation,P,b,1),rt=null):(kt&&(nt=se(s?i:i.x||i.left||i.scrollLeft,P,b,l?-1:1)),St&&(rt=se(s?i:i.y||i.top||i.scrollTop,N,R,l?-1:1))))},Kt=function(){Rt.isThrowing=!1,ut(Rt,"throwcomplete","onThrowComplete")},Jt=function(){Rt.isThrowing=!1},te=function(t,e){var i,s,a,u;t&&o?(t===!0&&(i=r.snap||{},s=i instanceof Array||"function"==typeof i,t={resistance:(r.throwResistance||r.resistance||1e3)/(bt?10:1)},bt?t.rotation=Bt(Rt,s?i:i.rotation,b,P,1,e):(kt&&(t[Tt]=Bt(Rt,s?i:i.x||i.left||i.scrollLeft,b,P,l?-1:1,e||"x"===Rt.lockedAxis)),St&&(t[Pt]=Bt(Rt,s?i:i.y||i.top||i.scrollTop,R,N,l?-1:1,e||"y"===Rt.lockedAxis)))),Rt.isThrowing=!0,u=isNaN(r.overshootTolerance)?1===r.edgeResistance?0:1-Rt.edgeResistance+.2:r.overshootTolerance,Rt.tween=a=o.to(l||n,{throwProps:t,ease:r.ease||_.Power3.easeOut,onComplete:Kt,onOverwrite:Jt,onUpdate:r.fastMode?ut:Zt,onUpdateParams:r.fastMode?[Rt,"onthrowupdate","onThrowUpdate"]:T},isNaN(r.maxDuration)?2:r.maxDuration,isNaN(r.minDuration)?0===u?0:.5:r.minDuration,u),r.fastMode||(l&&(l._suspendTransforms=!0),a.render(a.duration(),!0,!0),Zt(!0,!0),Rt.endX=Rt.x,Rt.endY=Rt.y,bt&&(Rt.endRotation=Rt.x),a.play(0),Zt(!0,!0),l&&(l._suspendTransforms=!1))):v&&Rt.applyBounds()},ee=function(t){var e,i,r,s,o,a,l,c,f,p=at||[1,0,0,1,0,0];at=Ct(n.parentNode,!0),t&&Rt.isPressed&&p.join(",")!==at.join(",")&&(e=p[0],i=p[1],r=p[2],s=p[3],o=p[4],a=p[5],l=e*s-i*r,c=u*(s/l)+h*(-r/l)+(r*a-s*o)/l,f=u*(-i/l)+h*(e/l)+-(e*a-i*o)/l,h=c*at[1]+f*at[3]+at[5],u=c*at[0]+f*at[2]+at[4]),at[1]||at[2]||1!=at[0]||1!=at[3]||0!=at[4]||0!=at[5]||(at=null)},ie=function(){var t=1-Rt.edgeResistance;ee(!1),at&&(u=Rt.pointerX*at[0]+Rt.pointerY*at[2]+at[4],h=Rt.pointerX*at[1]+Rt.pointerY*at[3]+at[5]),Q&&(le(Rt.pointerX,Rt.pointerY),$t(!0)),l?(Qt(),f=l.top(),c=l.left()):(ne()?(Zt(!0,!0),Qt()):Rt.applyBounds(),bt?(U=Ot(n,{x:0,y:0}),Zt(!0,!0),c=Rt.x,f=Rt.y=Math.atan2(U.y-Rt.pointerY,Rt.pointerX-U.x)*k):(ft=n.parentNode?n.parentNode.scrollTop||0:0,pt=n.parentNode?n.parentNode.scrollLeft||0:0,f=lt(n,Pt),c=lt(n,Tt))),v&&t&&(c>b?c=b+(c-b)/t:c<P&&(c=P-(P-c)/t),bt||(f>R?f=R+(f-R)/t:f<N&&(f=N-(N-f)/t)))},ne=function(){return Rt.tween&&Rt.tween.isActive()},re=function(){!A.parentNode||ne()||Rt.isDragging||A.parentNode.removeChild(A)},se=function(t,e,i,n){return"function"==typeof t?function(r){var s=Rt.isPressed?1-Rt.edgeResistance:1;return t.call(Rt,r>i?i+(r-i)*s:r<e?e+(r-e)*s:r)*n}:t instanceof Array?function(n){for(var r,s,o=t.length,a=0,l=S;--o>-1;)r=t[o],s=r-n,s<0&&(s=-s),s<l&&r>=e&&r<=i&&(a=o,l=s);return t[a]}:isNaN(t)?function(t){return t}:function(){return t*n}},oe=function(t){var i;if(!a||Rt.isPressed||!t||("mousedown"===t.type||"pointerdown"===t.type)&&C()-Ut<30&&Ft[Rt.pointerEvent.type])return void console.log("RETURN onPress",Rt.isPressed,t.type);if(console.log("onPress",t.type),ct=ne(),Rt.pointerEvent=t,Ft[t.type]?(ot=t.type.indexOf("touch")!==-1?t.currentTarget||t.target:y,Et(ot,"touchend",ue),Et(ot,"touchmove",ae),Et(ot,"touchcancel",ue),Et(y,"touchstart",It)):(ot=null,Et(y,"mousemove",ae)),gt=null,Et(y,"mouseup",ue),t&&t.target&&Et(t.target,"mouseup",ue),st=Ht.call(Rt,t.target)&&!r.dragClickables)return Et(t.target,"change",ue),ut(Rt,"press","onPress"),void Yt(Dt,!0);if(mt=!(!ot||kt===St||Rt.vars.allowNativeTouchScrolling===!1)&&(kt?"y":"x"),O?t=J(t,!0):mt||Rt.allowEventDefault||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()),t.changedTouches?(t=W=t.changedTouches[0],H=t.identifier):t.pointerId?H=t.pointerId:W=H=null,F++,Y($t),h=Rt.pointerY=t.pageY,u=Rt.pointerX=t.pageX,(mt||Rt.autoScroll)&&K(n.parentNode),n.parentNode&&(l||Rt.autoScroll&&!bt&&n.parentNode._gsMaxScrollX&&!A.parentNode)&&!n.getBBox&&(A.style.width=n.parentNode.scrollWidth+"px",n.parentNode.appendChild(A)),ie(),Rt.tween&&Rt.tween.kill(),Rt.isThrowing=!1,e.killTweensOf(l||n,!0,Mt),l&&e.killTweensOf(n,!0,{scrollTo:1}),Rt.tween=Rt.lockedAxis=null,(r.zIndexBoost||!bt&&!l&&r.zIndexBoost!==!1)&&(n.style.zIndex=Vt.zIndex++),Rt.isPressed=!0,w=!(!r.onDrag&&!Rt._listeners.drag),!bt)for(i=Dt.length;--i>-1;)it(Dt[i],"cursor",r.cursor||"move");ut(Rt,"press","onPress")},ae=function(t){var e,i,n,r,o,l,c=t;if(a&&!s&&Rt.isPressed&&t){if(Rt.pointerEvent=t,e=t.changedTouches){if(t=e[0],t!==W&&t.identifier!==H){for(r=e.length;--r>-1&&(t=e[r]).identifier!==H;);if(r<0)return}}else if(t.pointerId&&H&&t.pointerId!==H)return;if(O)t=J(t,!0);else{if(ot&&mt&&!gt&&(i=t.pageX,n=t.pageY,at&&(r=i*at[0]+n*at[2]+at[4],n=i*at[1]+n*at[3]+at[5],i=r),o=Math.abs(i-u),l=Math.abs(n-h),(o!==l&&(o>At||l>At)||E&&mt===gt)&&(gt=o>l&&kt?"x":"y",Rt.vars.lockAxisOnTouchScroll!==!1&&(Rt.lockedAxis="x"===gt?"y":"x",
"function"==typeof Rt.vars.onLockAxis&&Rt.vars.onLockAxis.call(Rt,c)),E&&mt===gt)))return void ue(c);Rt.allowEventDefault||mt&&(!gt||mt===gt)||c.cancelable===!1||(c.preventDefault(),c.preventManipulation&&c.preventManipulation())}Rt.autoScroll&&(qt=!0),le(t.pageX,t.pageY)}},le=function(t,e){var i,n,r,s,o,a,l=1-Rt.dragResistance,p=1-Rt.edgeResistance;Rt.pointerX=t,Rt.pointerY=e,bt?(s=Math.atan2(U.y-e,t-U.x)*k,o=Rt.y-s,Rt.y=s,o>180?f-=360:o<-180&&(f+=360),r=c+(f-s)*l):(at&&(a=t*at[0]+e*at[2]+at[4],e=t*at[1]+e*at[3]+at[5],t=a),n=e-h,i=t-u,n<At&&n>-At&&(n=0),i<At&&i>-At&&(i=0),(Rt.lockAxis||Rt.lockedAxis)&&(i||n)&&(a=Rt.lockedAxis,a||(Rt.lockedAxis=a=kt&&Math.abs(i)>Math.abs(n)?"y":St?"x":null,a&&"function"==typeof Rt.vars.onLockAxis&&Rt.vars.onLockAxis.call(Rt,Rt.pointerEvent)),"y"===a?n=0:"x"===a&&(i=0)),r=c+i*l,s=f+n*l),!nt&&!rt||Rt.x===r&&(Rt.y===s||bt)?v&&(r>b?r=b+(r-b)*p:r<P&&(r=P+(r-P)*p),bt||(s>R?s=R+(s-R)*p:s<N&&(s=N+(s-N)*p))):(nt&&(r=nt(r)),rt&&(s=rt(s))),bt||(r=Math.round(r),s=Math.round(s)),(Rt.x!==r||Rt.y!==s&&!bt)&&(console.log("setting self ",r,s),bt?Rt.endRotation=Rt.x=Rt.endX=r:(St&&(Rt.y=Rt.endY=s),kt&&(Rt.x=Rt.endX=r)),Q=!0,!Rt.isDragging&&Rt.isPressed&&(Rt.isDragging=!0,ut(Rt,"dragstart","onDragStart")))},ue=function(t,i){if(a&&Rt.isPressed&&(!t||null==H||i||!(t.pointerId&&t.pointerId!==H||t.changedTouches&&!jt(t.changedTouches,H)))){Rt.isPressed=!1;var s,o,l,u,h,c=t,f=Rt.isDragging,p=e.delayedCall(.001,re);if(ot?(Lt(ot,"touchend",ue),Lt(ot,"touchmove",ae),Lt(ot,"touchcancel",ue),Lt(y,"touchstart",It)):Lt(y,"mousemove",ae),Lt(y,"mouseup",ue),t&&t.target&&Lt(t.target,"mouseup",ue),Q=!1,st)return t&&Lt(t.target,"change",ue),Yt(Dt,!1),ut(Rt,"release","onRelease"),ut(Rt,"click","onClick"),void(st=!1);if(q($t),!bt)for(o=Dt.length;--o>-1;)it(Dt[o],"cursor",r.cursor||"move");if(f&&(Xt=L=C(),Rt.isDragging=!1),F--,t){if(O&&(t=J(t,!1)),s=t.changedTouches,s&&(t=s[0],t!==W&&t.identifier!==H)){for(o=s.length;--o>-1&&(t=s[o]).identifier!==H;);if(o<0)return}Rt.pointerEvent=c,Rt.pointerX=t.pageX,Rt.pointerY=t.pageY}return c&&!f?(ct&&(r.snap||r.bounds)&&te(r.throwProps),ut(Rt,"release","onRelease"),E&&"touchmove"===c.type||(ut(Rt,"click","onClick"),u=c.target||c.srcElement||n,Ut=C(),h=function(){Ut!==vt&&Rt.enabled()&&!Rt.isPressed&&(u.click?u.click():y.createEvent&&(l=y.createEvent("MouseEvents"),l.initMouseEvent("click",!0,!0,window,1,Rt.pointerEvent.screenX,Rt.pointerEvent.screenY,Rt.pointerX,Rt.pointerY,!1,!1,!1,!1,0,null),u.dispatchEvent(l)))},E||e.delayedCall(1e-5,h))):(te(r.throwProps),O||Rt.allowEventDefault||!c||!r.dragClickables&&Ht.call(Rt,c.target)||!f||mt&&(!gt||mt!==gt)||c.cancelable===!1||(c.preventDefault(),c.preventManipulation&&c.preventManipulation()),ut(Rt,"release","onRelease")),ne()&&p.duration(Rt.tween.duration()),f&&ut(Rt,"dragend","onDragEnd"),!0}},he=function(t){if(t&&Rt.isDragging&&!l){var e=t.target||t.srcElement||n.parentNode,i=e.scrollLeft-e._gsScrollX,r=e.scrollTop-e._gsScrollY;(i||r)&&(at?(u-=i*at[0]+r*at[2],h-=r*at[3]+i*at[1]):(u-=i,h-=r),e._gsScrollX+=i,e._gsScrollY+=r,le(Rt.pointerX,Rt.pointerY))}},ce=function(t){var e=C(),i=e-Ut<40,n=e-Xt<40,r=i&&vt===Ut,s=!!t.preventDefault,o=i&&yt===Ut,a=t.isTrusted||null==t.isTrusted&&i&&r;return s&&(r||n&&Rt.vars.suppressClickOnDrag!==!1)&&t.stopImmediatePropagation(),!i||r&&a===o?void((Rt.isPressed||n||i)&&(s?a&&t.detail&&i||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()):t.returnValue=!1)):(a&&r&&(yt=Ut),void(vt=Ut))};et=Vt.get(this.target),et&&et.kill(),this.startDrag=function(t){oe(t),Rt.isDragging||(Rt.isDragging=!0,ut(Rt,"dragstart","onDragStart"))},this.drag=ae,this.endDrag=function(t){ue(t,!0)},this.timeSinceDrag=function(){return Rt.isDragging?0:(C()-Xt)/1e3},this.hitTest=function(t,e){return Vt.hitTest(Rt.target,t,e)},this.getDirection=function(t,e){var i,n,r,s,a,l,u="velocity"===t&&o?t:"object"!=typeof t||bt?"start":"element";return"element"===u&&(a=Gt(Rt.target),l=Gt(t)),i="start"===u?Rt.x-c:"velocity"===u?o.getVelocity(this.target,Tt):a.left+a.width/2-(l.left+l.width/2),bt?i<0?"counter-clockwise":"clockwise":(e=e||2,n="start"===u?Rt.y-f:"velocity"===u?o.getVelocity(this.target,Pt):a.top+a.height/2-(l.top+l.height/2),r=Math.abs(i/n),s=r<1/e?"":i<0?"left":"right",r<e&&(""!==s&&(s+="-"),s+=n<0?"up":"down"),s)},this.applyBounds=function(t){var e,i,s,o,a,l;if(t&&r.bounds!==t)return r.bounds=t,Rt.update(!0);if(Zt(!0),Qt(),v){if(e=Rt.x,i=Rt.y,e>b?e=b:e<P&&(e=P),i>R?i=R:i<N&&(i=N),(Rt.x!==e||Rt.y!==i)&&(s=!0,Rt.x=Rt.endX=e,bt?Rt.endRotation=e:Rt.y=Rt.endY=i,Q=!0,$t(!0),Rt.autoScroll&&!Rt.isDragging))for(K(n.parentNode),o=n,X.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=x.scrollTop?x.scrollTop:y.body.scrollTop,X.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=x.scrollLeft?x.scrollLeft:y.body.scrollLeft;o&&!l;)l=Z(o.parentNode),a=l?X:o.parentNode,St&&a.scrollTop>a._gsMaxScrollY&&(a.scrollTop=a._gsMaxScrollY),kt&&a.scrollLeft>a._gsMaxScrollX&&(a.scrollLeft=a._gsMaxScrollX),o=a;Rt.isThrowing&&(s||Rt.endX>b||Rt.endX<P||Rt.endY>R||Rt.endY<N)&&te(r.throwProps,s)}return Rt},this.update=function(t,e,i){var r=Rt.x,s=Rt.y;return ee(!e),t?Rt.applyBounds():(Q&&i&&$t(!0),Zt(!0)),e&&(le(Rt.pointerX,Rt.pointerY),Q&&$t(!0)),Rt.isPressed&&!e&&(kt&&Math.abs(r-Rt.x)>.01||St&&Math.abs(s-Rt.y)>.01&&!bt)&&ie(),Rt.autoScroll&&(K(n.parentNode),qt=Rt.isDragging,$t(!0)),Rt.autoScroll&&(G(n,he),$(n,he)),Rt},this.enable=function(t){var s,u,h;if("soft"!==t){for(u=Dt.length;--u>-1;)h=Dt[u],Et(h,"mousedown",oe),Et(h,"touchstart",oe),Et(h,"click",ce,!0),bt||it(h,"cursor",r.cursor||"move"),it(h,"touchCallout","none"),it(h,"touchAction",kt===St?"none":kt?"pan-y":"pan-x");Yt(Dt,!1)}return $(n,he),a=!0,o&&"soft"!==t&&o.track(l||n,wt?"x,y":bt?"rotation":"top,left"),l&&l.enable(),n._gsDragID=s="d"+M++,D[s]=this,l&&(l.element._gsDragID=s),e.set(n,{x:"+=0",overwrite:!1}),dt={t:n,data:O?z:n._gsTransform,tween:{},setRatio:O?function(){e.set(n,j)}:i._internals.setTransformRatio||i._internals.set3DTransformRatio},ie(),Rt.update(!0),Rt},this.disable=function(t){var e,i,r=Rt.isDragging;if(!bt)for(e=Dt.length;--e>-1;)it(Dt[e],"cursor",null);if("soft"!==t){for(e=Dt.length;--e>-1;)i=Dt[e],it(i,"touchCallout",null),it(i,"touchAction",null),Lt(i,"mousedown",oe),Lt(i,"touchstart",oe),Lt(i,"click",ce);Yt(Dt,!0),ot&&(Lt(ot,"touchcancel",ue),Lt(ot,"touchend",ue),Lt(ot,"touchmove",ae)),Lt(y,"mouseup",ue),Lt(y,"mousemove",ae)}return G(n,he),a=!1,o&&"soft"!==t&&o.untrack(l||n,wt?"x,y":bt?"rotation":"top,left"),l&&l.disable(),q($t),Rt.isDragging=Rt.isPressed=st=!1,r&&ut(Rt,"dragend","onDragEnd"),Rt},this.enabled=function(t,e){return arguments.length?t?Rt.enable(e):Rt.disable(e):a},this.kill=function(){return Rt.isThrowing=!1,e.killTweensOf(l||n,!0,Mt),Rt.disable(),delete D[n._gsDragID],Rt},xt.indexOf("scroll")!==-1&&(l=this.scrollProxy=new Wt(n,V({onKill:function(){Rt.isPressed&&ue(null)}},r)),n.style.overflowY=St&&!Nt?"auto":"hidden",n.style.overflowX=kt&&!Nt?"auto":"hidden",n=l.content),r.force3D!==!1&&e.set(n,{force3D:!0}),bt?Mt.rotation=1:(kt&&(Mt[Tt]=1),St&&(Mt[Pt]=1)),bt?(j=g,z=j.css,j.overwrite=!1):wt&&(j=kt&&St?p:kt?d:m,z=j.css,j.overwrite=!1),this.enable()},Ht=Vt.prototype=new t;Ht.constructor=Vt,Ht.pointerX=Ht.pointerY=0,Ht.isDragging=Ht.isPressed=!1,Vt.version="0.14.9",Vt.zIndex=1e3,Et(y,"touchcancel",function(){}),Et(y,"contextmenu",function(t){var e;for(e in D)D[e].isPressed&&D[e].endDrag()}),Vt.create=function(t,i){"string"==typeof t&&(t=e.selector(t));for(var n=t&&0!==t.length?Dt(t)?Mt(t):[t]:[],r=n.length;--r>-1;)n[r]=new Vt(n[r],i);return n},Vt.get=function(t){return D[(tt(t)||{})._gsDragID]},Vt.timeSinceDrag=function(){return(C()-L)/1e3};var Ut={},$t=function(t){var e,i,n=0,r=0;for(t=tt(t),e=t.offsetWidth,i=t.offsetHeight;t;)n+=t.offsetTop,r+=t.offsetLeft,t=t.offsetParent;return{top:n,left:r,width:e,height:i}},Gt=function(t,e){if(t===window)return Ut.left=Ut.top=0,Ut.width=Ut.right=x.clientWidth||t.innerWidth||y.body.clientWidth||0,Ut.height=Ut.bottom=(t.innerHeight||0)-20<x.clientHeight?x.clientHeight:t.innerHeight||y.body.clientHeight||0,Ut;var i=t.pageX!==e?{left:t.pageX-U(),top:t.pageY-H(),right:t.pageX-U()+1,bottom:t.pageY-H()+1}:t.nodeType||t.left===e||t.top===e?O?$t(t):tt(t).getBoundingClientRect():t;return i.right===e&&i.width!==e?(i.right=i.left+i.width,i.bottom=i.top+i.height):i.width===e&&(i={width:i.right-i.left,height:i.bottom-i.top,right:i.right,left:i.left,bottom:i.bottom,top:i.top}),i};return Vt.hitTest=function(t,e,i){if(t===e)return!1;var n,r,s,o=Gt(t),a=Gt(e),l=a.left>o.right||a.right<o.left||a.top>o.bottom||a.bottom<o.top;return l||!i?!l:(s=(i+"").indexOf("%")!==-1,i=parseFloat(i)||0,n={left:Math.max(o.left,a.left),top:Math.max(o.top,a.top)},n.width=Math.min(o.right,a.right)-n.left,n.height=Math.min(o.bottom,a.bottom)-n.top,!(n.width<0||n.height<0)&&(s?(i*=.01,r=n.width*n.height,r>=o.width*o.height*i||r>=a.width*a.height*i):n.width>i&&n.height>i))},A.style.cssText="visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;",Vt},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite","CSSPlugin"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),t("../plugins/CSSPlugin.js"),e.exports=r())}("Draggable")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6,"../plugins/CSSPlugin.js":9}],12:[function(t,e,i){!function(t){var i=/iPhone/i,n=/iPod/i,r=/iPad/i,s=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,o=/Android/i,a=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,l=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,u=/Windows Phone/i,h=/(?=.*\bWindows\b)(?=.*\bARM\b)/i,c=/BlackBerry/i,f=/BB10/i,p=/Opera Mini/i,d=/(CriOS|Chrome)(?=.*\bMobile\b)/i,m=/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,g=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),_=function(t,e){return t.test(e)},v=function(t){var e=t||navigator.userAgent,v=e.split("[FBAN");if("undefined"!=typeof v[1]&&(e=v[0]),v=e.split("Twitter"),"undefined"!=typeof v[1]&&(e=v[0]),this.apple={phone:_(i,e),ipod:_(n,e),tablet:!_(i,e)&&_(r,e),device:_(i,e)||_(n,e)||_(r,e)},this.amazon={phone:_(a,e),tablet:!_(a,e)&&_(l,e),device:_(a,e)||_(l,e)},this.android={phone:_(a,e)||_(s,e),tablet:!_(a,e)&&!_(s,e)&&(_(l,e)||_(o,e)),device:_(a,e)||_(l,e)||_(s,e)||_(o,e)},this.windows={phone:_(u,e),tablet:_(h,e),device:_(u,e)||_(h,e)},this.other={blackberry:_(c,e),blackberry10:_(f,e),opera:_(p,e),firefox:_(m,e),chrome:_(d,e),device:_(c,e)||_(f,e)||_(p,e)||_(m,e)||_(d,e)},this.seven_inch=_(g,e),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window)return this},y=function(){var t=new v;return t.Class=v,t};"undefined"!=typeof e&&e.exports&&"undefined"==typeof window?e.exports=v:"undefined"!=typeof e&&e.exports&&"undefined"!=typeof window?e.exports=y():"function"==typeof define&&define.amd?define("isMobile",[],t.isMobile=y()):t.isMobile=y()}(this)},{}],13:[function(t,e,i){!function(t,i){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?i(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function i(t,e){e=e||Y;var i=e.createElement("script");i.text=t,e.head.appendChild(i).parentNode.removeChild(i)}function n(t){var e=!!t&&"length"in t&&t.length,i=et.type(t);return"function"!==i&&!et.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function r(t,e,i){return et.isFunction(e)?et.grep(t,function(t,n){return!!e.call(t,n,t)!==i}):e.nodeType?et.grep(t,function(t){return t===e!==i}):"string"!=typeof e?et.grep(t,function(t){return U.call(e,t)>-1!==i}):ct.test(e)?et.filter(e,t,i):(e=et.filter(e,t),et.grep(t,function(t){return U.call(e,t)>-1!==i&&1===t.nodeType}))}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e={};return et.each(t.match(_t)||[],function(t,i){e[i]=!0}),e}function a(t){return t}function l(t){throw t}function u(t,e,i){var n;try{t&&et.isFunction(n=t.promise)?n.call(t).done(e).fail(i):t&&et.isFunction(n=t.then)?n.call(t,e,i):e.call(void 0,t)}catch(t){i.call(void 0,t)}}function h(){Y.removeEventListener("DOMContentLoaded",h),t.removeEventListener("load",h),et.ready()}function c(){this.expando=et.expando+c.uid++}function f(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Pt.test(t)?JSON.parse(t):t)}function p(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(kt,"-$&").toLowerCase(),i=t.getAttribute(n),"string"==typeof i){try{i=f(i)}catch(t){}Tt.set(t,e,i)}else i=void 0;return i}function d(t,e,i,n){var r,s=1,o=20,a=n?function(){return n.cur()}:function(){return et.css(t,e,"")},l=a(),u=i&&i[3]||(et.cssNumber[e]?"":"px"),h=(et.cssNumber[e]||"px"!==u&&+l)&&Ct.exec(et.css(t,e));if(h&&h[3]!==u){u=u||h[3],i=i||[],h=+l||1;do s=s||".5",h/=s,et.style(t,e,h+u);while(s!==(s=a()/l)&&1!==s&&--o)}return i&&(h=+h||+l||0,r=i[1]?h+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=h,n.end=r)),r}function m(t){var e,i=t.ownerDocument,n=t.nodeName,r=Dt[n];return r?r:(e=i.body.appendChild(i.createElement(n)),r=et.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),Dt[n]=r,r)}function g(t,e){for(var i,n,r=[],s=0,o=t.length;s<o;s++)n=t[s],n.style&&(i=n.style.display,e?("none"===i&&(r[s]=bt.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&At(n)&&(r[s]=m(n))):"none"!==i&&(r[s]="none",bt.set(n,"display",i)));for(s=0;s<o;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}function _(t,e){var i;return i="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&et.nodeName(t,e)?et.merge([t],i):i}function v(t,e){for(var i=0,n=t.length;i<n;i++)bt.set(t[i],"globalEval",!e||bt.get(e[i],"globalEval"))}function y(t,e,i,n,r){for(var s,o,a,l,u,h,c=e.createDocumentFragment(),f=[],p=0,d=t.length;p<d;p++)if(s=t[p],s||0===s)if("object"===et.type(s))et.merge(f,s.nodeType?[s]:s);else if(Lt.test(s)){for(o=o||c.appendChild(e.createElement("div")),a=(Nt.exec(s)||["",""])[1].toLowerCase(),l=Et[a]||Et._default,o.innerHTML=l[1]+et.htmlPrefilter(s)+l[2],h=l[0];h--;)o=o.lastChild;et.merge(f,o.childNodes),o=c.firstChild,o.textContent=""}else f.push(e.createTextNode(s));for(c.textContent="",p=0;s=f[p++];)if(n&&et.inArray(s,n)>-1)r&&r.push(s);else if(u=et.contains(s.ownerDocument,s),o=_(c.appendChild(s),"script"),u&&v(o),i)for(h=0;s=o[h++];)Ft.test(s.type||"")&&i.push(s);return c}function x(){return!0}function w(){return!1}function b(){try{return Y.activeElement}catch(t){}}function T(t,e,i,n,r,s){var o,a;if("object"==typeof e){"string"!=typeof i&&(n=n||i,i=void 0);for(a in e)T(t,a,i,n,e[a],s);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),r===!1)r=w;else if(!r)return t;return 1===s&&(o=r,r=function(t){return et().off(t),o.apply(this,arguments)},r.guid=o.guid||(o.guid=et.guid++)),t.each(function(){et.event.add(this,e,r,n,i)})}function P(t,e){return et.nodeName(t,"table")&&et.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t:t}function k(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function S(t){var e=Wt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function C(t,e){var i,n,r,s,o,a,l,u;if(1===e.nodeType){if(bt.hasData(t)&&(s=bt.access(t),o=bt.set(e,s),u=s.events)){delete o.handle,o.events={};for(r in u)for(i=0,n=u[r].length;i<n;i++)et.event.add(e,r,u[r][i])}Tt.hasData(t)&&(a=Tt.access(t),l=et.extend({},a),Tt.set(e,l))}}function O(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Mt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function A(t,e,n,r){e=V.apply([],e);var s,o,a,l,u,h,c=0,f=t.length,p=f-1,d=e[0],m=et.isFunction(d);if(m||f>1&&"string"==typeof d&&!J.checkClone&&qt.test(d))return t.each(function(i){var s=t.eq(i);m&&(e[0]=d.call(this,i,s.html())),A(s,e,n,r)});if(f&&(s=y(e,t[0].ownerDocument,!1,t,r),o=s.firstChild,1===s.childNodes.length&&(s=o),o||r)){for(a=et.map(_(s,"script"),k),l=a.length;c<f;c++)u=s,c!==p&&(u=et.clone(u,!0,!0),l&&et.merge(a,_(u,"script"))),n.call(t[c],u,c);if(l)for(h=a[a.length-1].ownerDocument,et.map(a,S),c=0;c<l;c++)u=a[c],Ft.test(u.type||"")&&!bt.access(u,"globalEval")&&et.contains(h,u)&&(u.src?et._evalUrl&&et._evalUrl(u.src):i(u.textContent.replace(Vt,""),h))}return t}function R(t,e,i){for(var n,r=e?et.filter(e,t):t,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||et.cleanData(_(n)),n.parentNode&&(i&&et.contains(n.ownerDocument,n)&&v(_(n,"script")),n.parentNode.removeChild(n));return t}function D(t,e,i){var n,r,s,o,a=t.style;return i=i||$t(t),i&&(o=i.getPropertyValue(e)||i[e],""!==o||et.contains(t.ownerDocument,t)||(o=et.style(t,e)),!J.pixelMarginRight()&&Ut.test(o)&&Ht.test(e)&&(n=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function M(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function N(t){if(t in Jt)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=Kt.length;i--;)if(t=Kt[i]+e,t in Jt)return t}function F(t,e,i){var n=Ct.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function E(t,e,i,n,r){var s,o=0;for(s=i===(n?"border":"content")?4:"width"===e?1:0;s<4;s+=2)"margin"===i&&(o+=et.css(t,i+Ot[s],!0,r)),n?("content"===i&&(o-=et.css(t,"padding"+Ot[s],!0,r)),"margin"!==i&&(o-=et.css(t,"border"+Ot[s]+"Width",!0,r))):(o+=et.css(t,"padding"+Ot[s],!0,r),"padding"!==i&&(o+=et.css(t,"border"+Ot[s]+"Width",!0,r)));return o}function L(t,e,i){var n,r=!0,s=$t(t),o="border-box"===et.css(t,"boxSizing",!1,s);if(t.getClientRects().length&&(n=t.getBoundingClientRect()[e]),n<=0||null==n){if(n=D(t,e,s),(n<0||null==n)&&(n=t.style[e]),Ut.test(n))return n;r=o&&(J.boxSizingReliable()||n===t.style[e]),n=parseFloat(n)||0}return n+E(t,e,i||(o?"border":"content"),r,s)+"px"}function j(t){var e=t.match(_t)||[];return e.join(" ")}function X(t){return t.getAttribute&&t.getAttribute("class")||""}function I(t,e,i,n){var r;if(et.isArray(e))et.each(e,function(e,r){i||oe.test(t)?n(t,r):I(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)});else if(i||"object"!==et.type(e))n(t,e);else for(r in e)I(t+"["+r+"]",e[r],i,n)}function B(t){return et.isWindow(t)?t:9===t.nodeType&&t.defaultView}var z=[],Y=t.document,q=Object.getPrototypeOf,W=z.slice,V=z.concat,H=z.push,U=z.indexOf,$={},G=$.toString,Z=$.hasOwnProperty,Q=Z.toString,K=Q.call(Object),J={},tt="3.1.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/animatedSelector,-effects/Tween,-deprecated",et=function(t,e){return new et.fn.init(t,e)},it=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,nt=/^-ms-/,rt=/-([a-z])/g,st=function(t,e){return e.toUpperCase()};et.fn=et.prototype={jquery:tt,constructor:et,length:0,toArray:function(){return W.call(this)},get:function(t){return null==t?W.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=et.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return et.each(this,t)},map:function(t){return this.pushStack(et.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(W.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:H,sort:z.sort,splice:z.splice},et.extend=et.fn.extend=function(){var t,e,i,n,r,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||et.isFunction(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=o[e],n=t[e],o!==n&&(u&&n&&(et.isPlainObject(n)||(r=et.isArray(n)))?(r?(r=!1,s=i&&et.isArray(i)?i:[]):s=i&&et.isPlainObject(i)?i:{},o[e]=et.extend(u,s,n)):void 0!==n&&(o[e]=n));return o},et.extend({expando:"jQuery"+(tt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===et.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=et.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==G.call(t)||(e=q(t))&&(i=Z.call(e,"constructor")&&e.constructor,"function"!=typeof i||Q.call(i)!==K))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?$[G.call(t)]||"object":typeof t},globalEval:function(t){i(t)},camelCase:function(t){return t.replace(nt,"ms-").replace(rt,st)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,r=0;if(n(t))for(i=t.length;r<i&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(it,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?et.merge(i,"string"==typeof t?[t]:t):H.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:U.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;n++)t[r++]=e[n];return t.length=r,t},grep:function(t,e,i){for(var n,r=[],s=0,o=t.length,a=!i;s<o;s++)n=!e(t[s],s),n!==a&&r.push(t[s]);return r},map:function(t,e,i){var r,s,o=0,a=[];if(n(t))for(r=t.length;o<r;o++)s=e(t[o],o,i),null!=s&&a.push(s);else for(o in t)s=e(t[o],o,i),null!=s&&a.push(s);return V.apply([],a)},guid:1,proxy:function(t,e){var i,n,r;if("string"==typeof e&&(i=t[e],e=t,t=i),et.isFunction(t))return n=W.call(arguments,2),r=function(){return t.apply(e||this,n.concat(W.call(arguments)))},r.guid=t.guid=t.guid||et.guid++,r},now:Date.now,support:J}),"function"==typeof Symbol&&(et.fn[Symbol.iterator]=z[Symbol.iterator]),et.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){$["[object "+e+"]"]=e.toLowerCase()});var ot=function(t){function e(t,e,i,n){var r,s,o,a,l,u,h,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return i;if(!n&&((e?e.ownerDocument||e:z)!==N&&M(e),e=e||N,E)){if(11!==d&&(l=_t.exec(t)))if(r=l[1]){if(9===d){if(!(o=e.getElementById(r)))return i;if(o.id===r)return i.push(o),i}else if(f&&(o=f.getElementById(r))&&I(e,o)&&o.id===r)return i.push(o),i}else{if(l[2])return K.apply(i,e.getElementsByTagName(t)),i;if((r=l[3])&&b.getElementsByClassName&&e.getElementsByClassName)return K.apply(i,e.getElementsByClassName(r)),i}if(b.qsa&&!H[t+" "]&&(!L||!L.test(t))){if(1!==d)f=e,h=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(wt,bt):e.setAttribute("id",a=B),u=S(t),s=u.length;s--;)u[s]="#"+a+" "+p(u[s]);h=u.join(","),f=vt.test(t)&&c(e.parentNode)||e}if(h)try{return K.apply(i,f.querySelectorAll(h)),i}catch(t){}finally{a===B&&e.removeAttribute("id")}}}return O(t.replace(at,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>T.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[B]=!0,t}function r(t){var e=N.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var i=t.split("|"),n=i.length;n--;)T.attrHandle[i[n]]=e}function o(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function u(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Pt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function h(t){return n(function(e){return e=+e,n(function(i,n){for(var r,s=t([],i.length,e),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function f(){}function p(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function d(t,e,i){var n=e.dir,r=e.next,s=r||n,o=i&&"parentNode"===s,a=q++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,r);return!1}:function(e,i,l){var u,h,c,f=[Y,a];if(l){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||o)if(c=e[B]||(e[B]={}),h=c[e.uniqueID]||(c[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[n]||e;else{if((u=h[s])&&u[0]===Y&&u[1]===a)return f[2]=u[2];if(h[s]=f,f[2]=t(e,i,l))return!0}return!1}}function m(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function g(t,i,n){for(var r=0,s=i.length;r<s;r++)e(t,i[r],n);return n}function _(t,e,i,n,r){for(var s,o=[],a=0,l=t.length,u=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,r)||(o.push(s),u&&e.push(a)));return o}function v(t,e,i,r,s,o){return r&&!r[B]&&(r=v(r)),s&&!s[B]&&(s=v(s,o)),n(function(n,o,a,l){var u,h,c,f=[],p=[],d=o.length,m=n||g(e||"*",a.nodeType?[a]:a,[]),v=!t||!n&&e?m:_(m,f,t,a,l),y=i?s||(n?t:d||r)?[]:o:v;if(i&&i(v,y,a,l),r)for(u=_(y,p),r(u,[],a,l),h=u.length;h--;)(c=u[h])&&(y[p[h]]=!(v[p[h]]=c));if(n){if(s||t){if(s){for(u=[],h=y.length;h--;)(c=y[h])&&u.push(v[h]=c);s(null,y=[],u,l)}for(h=y.length;h--;)(c=y[h])&&(u=s?tt(n,c):f[h])>-1&&(n[u]=!(o[u]=c))}}else y=_(y===o?y.splice(d,y.length):y),s?s(null,o,y,l):K.apply(o,y)})}function y(t){for(var e,i,n,r=t.length,s=T.relative[t[0].type],o=s||T.relative[" "],a=s?1:0,l=d(function(t){return t===e},o,!0),u=d(function(t){return tt(e,t)>-1},o,!0),h=[function(t,i,n){var r=!s&&(n||i!==A)||((e=i).nodeType?l(t,i,n):u(t,i,n));return e=null,r}];a<r;a++)if(i=T.relative[t[a].type])h=[d(m(h),i)];else{if(i=T.filter[t[a].type].apply(null,t[a].matches),i[B]){for(n=++a;n<r&&!T.relative[t[n].type];n++);return v(a>1&&m(h),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),i,a<n&&y(t.slice(a,n)),n<r&&y(t=t.slice(n)),n<r&&p(t))}h.push(i)}return m(h)}function x(t,i){var r=i.length>0,s=t.length>0,o=function(n,o,a,l,u){var h,c,f,p=0,d="0",m=n&&[],g=[],v=A,y=n||s&&T.find.TAG("*",u),x=Y+=null==v?1:Math.random()||.1,w=y.length;for(u&&(A=o===N||o||u);d!==w&&null!=(h=y[d]);d++){if(s&&h){for(c=0,o||h.ownerDocument===N||(M(h),a=!E);f=t[c++];)if(f(h,o||N,a)){l.push(h);break}u&&(Y=x)}r&&((h=!f&&h)&&p--,n&&m.push(h))}if(p+=d,r&&d!==p){for(c=0;f=i[c++];)f(m,g,o,a);if(n){if(p>0)for(;d--;)m[d]||g[d]||(g[d]=Z.call(l));g=_(g)}K.apply(l,g),u&&!n&&g.length>0&&p+i.length>1&&e.uniqueSort(l)}return u&&(Y=x,A=v),m};return r?n(o):o}var w,b,T,P,k,S,C,O,A,R,D,M,N,F,E,L,j,X,I,B="sizzle"+1*new Date,z=t.document,Y=0,q=0,W=i(),V=i(),H=i(),U=function(t,e){return t===e&&(D=!0),0},$={}.hasOwnProperty,G=[],Z=G.pop,Q=G.push,K=G.push,J=G.slice,tt=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",nt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",rt="\\["+it+"*("+nt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+nt+"))|)"+it+"*\\]",st=":("+nt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",ot=new RegExp(it+"+","g"),at=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),lt=new RegExp("^"+it+"*,"+it+"*"),ut=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ht=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),ct=new RegExp(st),ft=new RegExp("^"+nt+"$"),pt={ID:new RegExp("^#("+nt+")"),CLASS:new RegExp("^\\.("+nt+")"),TAG:new RegExp("^("+nt+"|[*])"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,_t=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,vt=/[+~]/,yt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),xt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},Tt=function(){M()},Pt=d(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{K.apply(G=J.call(z.childNodes),z.childNodes),G[z.childNodes.length].nodeType}catch(t){K={apply:G.length?function(t,e){Q.apply(t,J.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}b=e.support={},k=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},M=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:z;return n!==N&&9===n.nodeType&&n.documentElement?(N=n,F=N.documentElement,E=!k(N),z!==N&&(i=N.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",Tt,!1):i.attachEvent&&i.attachEvent("onunload",Tt)),b.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=r(function(t){return t.appendChild(N.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=gt.test(N.getElementsByClassName),b.getById=r(function(t){return F.appendChild(t).id=B,!N.getElementsByName||!N.getElementsByName(B).length}),b.getById?(T.filter.ID=function(t){var e=t.replace(yt,xt);return function(t){return t.getAttribute("id")===e}},T.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&E){var i=e.getElementById(t);return i?[i]:[]}}):(T.filter.ID=function(t){var e=t.replace(yt,xt);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},T.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&E){var i,n,r,s=e.getElementById(t);if(s){if(i=s.getAttributeNode("id"),i&&i.value===t)return[s];for(r=e.getElementsByName(t),n=0;s=r[n++];)if(i=s.getAttributeNode("id"),i&&i.value===t)return[s]}return[]}}),T.find.TAG=b.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},T.find.CLASS=b.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&E)return e.getElementsByClassName(t)},j=[],L=[],(b.qsa=gt.test(N.querySelectorAll))&&(r(function(t){F.appendChild(t).innerHTML="<a id='"+B+"'></a><select id='"+B+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+it+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+B+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+B+"+*").length||L.push(".#.+[+~]")}),r(function(t){
t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=N.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+it+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),F.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(b.matchesSelector=gt.test(X=F.matches||F.webkitMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector||F.msMatchesSelector))&&r(function(t){b.disconnectedMatch=X.call(t,"*"),X.call(t,"[s!='']:x"),j.push("!=",st)}),L=L.length&&new RegExp(L.join("|")),j=j.length&&new RegExp(j.join("|")),e=gt.test(F.compareDocumentPosition),I=e||gt.test(F.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},U=e?function(t,e){if(t===e)return D=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!b.sortDetached&&e.compareDocumentPosition(t)===i?t===N||t.ownerDocument===z&&I(z,t)?-1:e===N||e.ownerDocument===z&&I(z,e)?1:R?tt(R,t)-tt(R,e):0:4&i?-1:1)}:function(t,e){if(t===e)return D=!0,0;var i,n=0,r=t.parentNode,s=e.parentNode,a=[t],l=[e];if(!r||!s)return t===N?-1:e===N?1:r?-1:s?1:R?tt(R,t)-tt(R,e):0;if(r===s)return o(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?o(a[n],l[n]):a[n]===z?-1:l[n]===z?1:0},N):N},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==N&&M(t),i=i.replace(ht,"='$1']"),b.matchesSelector&&E&&!H[i+" "]&&(!j||!j.test(i))&&(!L||!L.test(i)))try{var n=X.call(t,i);if(n||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return e(i,N,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==N&&M(t),I(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==N&&M(t);var i=T.attrHandle[e.toLowerCase()],n=i&&$.call(T.attrHandle,e.toLowerCase())?i(t,e,!E):void 0;return void 0!==n?n:b.attributes||!E?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.escape=function(t){return(t+"").replace(wt,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,r=0;if(D=!b.detectDuplicates,R=!b.sortStable&&t.slice(0),t.sort(U),D){for(;e=t[r++];)e===t[r]&&(n=i.push(r));for(;n--;)t.splice(i[n],1)}return R=null,t},P=e.getText=function(t){var e,i="",n=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=P(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[n++];)i+=P(e);return i},T=e.selectors={cacheLength:50,createPseudo:n,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ct.test(i)&&(e=S(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(r){var s=e.attr(r,t);return null==s?"!="===i:!i||(s+="","="===i?s===n:"!="===i?s!==n:"^="===i?n&&0===s.indexOf(n):"*="===i?n&&s.indexOf(n)>-1:"$="===i?n&&s.slice(-n.length)===n:"~="===i?(" "+s.replace(ot," ")+" ").indexOf(n)>-1:"|="===i&&(s===n||s.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,i,n,r){var s="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var u,h,c,f,p,d,m=s!==o?"nextSibling":"previousSibling",g=e.parentNode,_=a&&e.nodeName.toLowerCase(),v=!l&&!a,y=!1;if(g){if(s){for(;m;){for(f=e;f=f[m];)if(a?f.nodeName.toLowerCase()===_:1===f.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[o?g.firstChild:g.lastChild],o&&v){for(f=g,c=f[B]||(f[B]={}),h=c[f.uniqueID]||(c[f.uniqueID]={}),u=h[t]||[],p=u[0]===Y&&u[1],y=p&&u[2],f=p&&g.childNodes[p];f=++p&&f&&f[m]||(y=p=0)||d.pop();)if(1===f.nodeType&&++y&&f===e){h[t]=[Y,p,y];break}}else if(v&&(f=e,c=f[B]||(f[B]={}),h=c[f.uniqueID]||(c[f.uniqueID]={}),u=h[t]||[],p=u[0]===Y&&u[1],y=p),y===!1)for(;(f=++p&&f&&f[m]||(y=p=0)||d.pop())&&((a?f.nodeName.toLowerCase()!==_:1!==f.nodeType)||!++y||(v&&(c=f[B]||(f[B]={}),h=c[f.uniqueID]||(c[f.uniqueID]={}),h[t]=[Y,y]),f!==e)););return y-=r,y===n||y%n===0&&y/n>=0}}},PSEUDO:function(t,i){var r,s=T.pseudos[t]||T.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[B]?s(i):s.length>1?(r=[t,t,"",i],T.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,r=s(t,i),o=r.length;o--;)n=tt(t,r[o]),t[n]=!(e[n]=r[o])}):function(t){return s(t,0,r)}):s}},pseudos:{not:n(function(t){var e=[],i=[],r=C(t.replace(at,"$1"));return r[B]?n(function(t,e,i,n){for(var s,o=r(t,null,n,[]),a=t.length;a--;)(s=o[a])&&(t[a]=!(e[a]=s))}):function(t,n,s){return e[0]=t,r(e,null,s,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(yt,xt),function(e){return(e.textContent||e.innerText||P(e)).indexOf(t)>-1}}),lang:n(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,xt).toLowerCase(),function(e){var i;do if(i=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===F},focus:function(t){return t===N.activeElement&&(!N.hasFocus||N.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:u(!1),disabled:u(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!T.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:h(function(){return[0]}),last:h(function(t,e){return[e-1]}),eq:h(function(t,e,i){return[i<0?i+e:i]}),even:h(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:h(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:h(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:h(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}},T.pseudos.nth=T.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})T.pseudos[w]=l(w);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,S=e.tokenize=function(t,i){var n,r,s,o,a,l,u,h=V[t+" "];if(h)return i?0:h.slice(0);for(a=t,l=[],u=T.preFilter;a;){n&&!(r=lt.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=ut.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(at," ")}),a=a.slice(n.length));for(o in T.filter)!(r=pt[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return i?a.length:a?e.error(t):V(t,l).slice(0)},C=e.compile=function(t,e){var i,n=[],r=[],s=H[t+" "];if(!s){for(e||(e=S(t)),i=e.length;i--;)s=y(e[i]),s[B]?n.push(s):r.push(s);s=H(t,x(r,n)),s.selector=t}return s},O=e.select=function(t,e,i,n){var r,s,o,a,l,u="function"==typeof t&&t,h=!n&&S(t=u.selector||t);if(i=i||[],1===h.length){if(s=h[0]=h[0].slice(0),s.length>2&&"ID"===(o=s[0]).type&&9===e.nodeType&&E&&T.relative[s[1].type]){if(e=(T.find.ID(o.matches[0].replace(yt,xt),e)||[])[0],!e)return i;u&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(r=pt.needsContext.test(t)?0:s.length;r--&&(o=s[r],!T.relative[a=o.type]);)if((l=T.find[a])&&(n=l(o.matches[0].replace(yt,xt),vt.test(s[0].type)&&c(e.parentNode)||e))){if(s.splice(r,1),t=n.length&&p(s),!t)return K.apply(i,n),i;break}}return(u||C(t,h))(n,e,!E,i,!e||vt.test(t)&&c(e.parentNode)||e),i},b.sortStable=B.split("").sort(U).join("")===B,b.detectDuplicates=!!D,M(),b.sortDetached=r(function(t){return 1&t.compareDocumentPosition(N.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,i){var n;if(!i)return t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);et.find=ot,et.expr=ot.selectors,et.expr[":"]=et.expr.pseudos,et.uniqueSort=et.unique=ot.uniqueSort,et.text=ot.getText,et.isXMLDoc=ot.isXML,et.contains=ot.contains,et.escapeSelector=ot.escape;var at=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&et(t).is(i))break;n.push(t)}return n},lt=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},ut=et.expr.match.needsContext,ht=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,ct=/^.[^:#\[\.,]*$/;et.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?et.find.matchesSelector(n,t)?[n]:[]:et.find.matches(t,et.grep(e,function(t){return 1===t.nodeType}))},et.fn.extend({find:function(t){var e,i,n=this.length,r=this;if("string"!=typeof t)return this.pushStack(et(t).filter(function(){for(e=0;e<n;e++)if(et.contains(r[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)et.find(t,r[e],i);return n>1?et.uniqueSort(i):i},filter:function(t){return this.pushStack(r(this,t||[],!1))},not:function(t){return this.pushStack(r(this,t||[],!0))},is:function(t){return!!r(this,"string"==typeof t&&ut.test(t)?et(t):t||[],!1).length}});var ft,pt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,dt=et.fn.init=function(t,e,i){var n,r;if(!t)return this;if(i=i||ft,"string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:pt.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof et?e[0]:e,et.merge(this,et.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:Y,!0)),ht.test(n[1])&&et.isPlainObject(e))for(n in e)et.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return r=Y.getElementById(n[2]),r&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):et.isFunction(t)?void 0!==i.ready?i.ready(t):t(et):et.makeArray(t,this)};dt.prototype=et.fn,ft=et(Y);var mt=/^(?:parents|prev(?:Until|All))/,gt={children:!0,contents:!0,next:!0,prev:!0};et.fn.extend({has:function(t){var e=et(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(et.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,r=this.length,s=[],o="string"!=typeof t&&et(t);if(!ut.test(t))for(;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&et.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?et.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?U.call(et(t),this[0]):U.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(et.uniqueSort(et.merge(this.get(),et(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),et.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return at(t,"parentNode")},parentsUntil:function(t,e,i){return at(t,"parentNode",i)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return at(t,"nextSibling")},prevAll:function(t){return at(t,"previousSibling")},nextUntil:function(t,e,i){return at(t,"nextSibling",i)},prevUntil:function(t,e,i){return at(t,"previousSibling",i)},siblings:function(t){return lt((t.parentNode||{}).firstChild,t)},children:function(t){return lt(t.firstChild)},contents:function(t){return t.contentDocument||et.merge([],t.childNodes)}},function(t,e){et.fn[t]=function(i,n){var r=et.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=et.filter(n,r)),this.length>1&&(gt[t]||et.uniqueSort(r),mt.test(t)&&r.reverse()),this.pushStack(r)}});var _t=/[^\x20\t\r\n\f]+/g;et.Callbacks=function(t){t="string"==typeof t?o(t):et.extend({},t);var e,i,n,r,s=[],a=[],l=-1,u=function(){for(r=t.once,n=e=!0;a.length;l=-1)for(i=a.shift();++l<s.length;)s[l].apply(i[0],i[1])===!1&&t.stopOnFalse&&(l=s.length,i=!1);t.memory||(i=!1),e=!1,r&&(s=i?[]:"")},h={add:function(){return s&&(i&&!e&&(l=s.length-1,a.push(i)),function e(i){et.each(i,function(i,n){et.isFunction(n)?t.unique&&h.has(n)||s.push(n):n&&n.length&&"string"!==et.type(n)&&e(n)})}(arguments),i&&!e&&u()),this},remove:function(){return et.each(arguments,function(t,e){for(var i;(i=et.inArray(e,s,i))>-1;)s.splice(i,1),i<=l&&l--}),this},has:function(t){return t?et.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=a=[],i||e||(s=i=""),this},locked:function(){return!!r},fireWith:function(t,i){return r||(i=i||[],i=[t,i.slice?i.slice():i],a.push(i),e||u()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!n}};return h},et.extend({Deferred:function(e){var i=[["notify","progress",et.Callbacks("memory"),et.Callbacks("memory"),2],["resolve","done",et.Callbacks("once memory"),et.Callbacks("once memory"),0,"resolved"],["reject","fail",et.Callbacks("once memory"),et.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return et.Deferred(function(e){et.each(i,function(i,n){var r=et.isFunction(t[n[4]])&&t[n[4]];s[n[1]](function(){var t=r&&r.apply(this,arguments);t&&et.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(e,n,r){function s(e,i,n,r){return function(){var u=this,h=arguments,c=function(){var t,c;if(!(e<o)){if(t=n.apply(u,h),t===i.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,et.isFunction(c)?r?c.call(t,s(o,i,a,r),s(o,i,l,r)):(o++,c.call(t,s(o,i,a,r),s(o,i,l,r),s(o,i,a,i.notifyWith))):(n!==a&&(u=void 0,h=[t]),(r||i.resolveWith)(u,h))}},f=r?c:function(){try{c()}catch(t){et.Deferred.exceptionHook&&et.Deferred.exceptionHook(t,f.stackTrace),e+1>=o&&(n!==l&&(u=void 0,h=[t]),i.rejectWith(u,h))}};e?f():(et.Deferred.getStackHook&&(f.stackTrace=et.Deferred.getStackHook()),t.setTimeout(f))}}var o=0;return et.Deferred(function(t){i[0][3].add(s(0,t,et.isFunction(r)?r:a,t.notifyWith)),i[1][3].add(s(0,t,et.isFunction(e)?e:a)),i[2][3].add(s(0,t,et.isFunction(n)?n:l))}).promise()},promise:function(t){return null!=t?et.extend(t,r):r}},s={};return et.each(i,function(t,e){var o=e[2],a=e[5];r[e[1]]=o.add,a&&o.add(function(){n=a},i[3-t][2].disable,i[0][2].lock),o.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),r=W.call(arguments),s=et.Deferred(),o=function(t){return function(i){n[t]=this,r[t]=arguments.length>1?W.call(arguments):i,--e||s.resolveWith(n,r)}};if(e<=1&&(u(t,s.done(o(i)).resolve,s.reject),"pending"===s.state()||et.isFunction(r[i]&&r[i].then)))return s.then();for(;i--;)u(r[i],o(i),s.reject);return s.promise()}});var vt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;et.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&vt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},et.readyException=function(e){t.setTimeout(function(){throw e})};var yt=et.Deferred();et.fn.ready=function(t){return yt.then(t).catch(function(t){et.readyException(t)}),this},et.extend({isReady:!1,readyWait:1,holdReady:function(t){t?et.readyWait++:et.ready(!0)},ready:function(t){(t===!0?--et.readyWait:et.isReady)||(et.isReady=!0,t!==!0&&--et.readyWait>0||yt.resolveWith(Y,[et]))}}),et.ready.then=yt.then,"complete"===Y.readyState||"loading"!==Y.readyState&&!Y.documentElement.doScroll?t.setTimeout(et.ready):(Y.addEventListener("DOMContentLoaded",h),t.addEventListener("load",h));var xt=function(t,e,i,n,r,s,o){var a=0,l=t.length,u=null==i;if("object"===et.type(i)){r=!0;for(a in i)xt(t,e,a,i[a],!0,s,o)}else if(void 0!==n&&(r=!0,et.isFunction(n)||(o=!0),u&&(o?(e.call(t,n),e=null):(u=e,e=function(t,e,i){return u.call(et(t),i)})),e))for(;a<l;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return r?t:u?e.call(t):l?e(t[0],i):s},wt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};c.uid=1,c.prototype={cache:function(t){var e=t[this.expando];return e||(e={},wt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,r=this.cache(t);if("string"==typeof e)r[et.camelCase(e)]=i;else for(n in e)r[et.camelCase(n)]=e[n];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][et.camelCase(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){et.isArray(e)?e=e.map(et.camelCase):(e=et.camelCase(e),e=e in n?[e]:e.match(_t)||[]),i=e.length;for(;i--;)delete n[e[i]]}(void 0===e||et.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!et.isEmptyObject(e)}};var bt=new c,Tt=new c,Pt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,kt=/[A-Z]/g;et.extend({hasData:function(t){return Tt.hasData(t)||bt.hasData(t)},data:function(t,e,i){return Tt.access(t,e,i)},removeData:function(t,e){Tt.remove(t,e)},_data:function(t,e,i){return bt.access(t,e,i)},_removeData:function(t,e){bt.remove(t,e)}}),et.fn.extend({data:function(t,e){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(r=Tt.get(s),1===s.nodeType&&!bt.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&(n=o[i].name,0===n.indexOf("data-")&&(n=et.camelCase(n.slice(5)),p(s,n,r[n])));bt.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Tt.set(this,t)}):xt(this,function(e){var i;if(s&&void 0===e){if(i=Tt.get(s,t),void 0!==i)return i;if(i=p(s,t),void 0!==i)return i}else this.each(function(){Tt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Tt.remove(this,t)})}}),et.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=bt.get(t,e),i&&(!n||et.isArray(i)?n=bt.access(t,e,et.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=et.queue(t,e),n=i.length,r=i.shift(),s=et._queueHooks(t,e),o=function(){et.dequeue(t,e)};"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete s.stop,r.call(t,o,s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return bt.get(t,i)||bt.access(t,i,{empty:et.Callbacks("once memory").add(function(){bt.remove(t,[e+"queue",i])})})}}),et.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?et.queue(this[0],t):void 0===e?this:this.each(function(){var i=et.queue(this,t,e);et._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&et.dequeue(this,t)})},dequeue:function(t){return this.each(function(){et.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=et.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)i=bt.get(s[o],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(e)}});var St=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ct=new RegExp("^(?:([+-])=|)("+St+")([a-z%]*)$","i"),Ot=["Top","Right","Bottom","Left"],At=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&et.contains(t.ownerDocument,t)&&"none"===et.css(t,"display")},Rt=function(t,e,i,n){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];r=i.apply(t,n||[]);for(s in e)t.style[s]=o[s];return r},Dt={};et.fn.extend({show:function(){return g(this,!0)},hide:function(){return g(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){At(this)?et(this).show():et(this).hide()})}});var Mt=/^(?:checkbox|radio)$/i,Nt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ft=/^$|\/(?:java|ecma)script/i,Et={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Et.optgroup=Et.option,Et.tbody=Et.tfoot=Et.colgroup=Et.caption=Et.thead,Et.th=Et.td;var Lt=/<|&#?\w+;/;!function(){var t=Y.createDocumentFragment(),e=t.appendChild(Y.createElement("div")),i=Y.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),J.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",J.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var jt=Y.documentElement,Xt=/^key/,It=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Bt=/^([^.]*)(?:\.(.+)|)/;et.event={global:{},add:function(t,e,i,n,r){var s,o,a,l,u,h,c,f,p,d,m,g=bt.get(t);if(g)for(i.handler&&(s=i,i=s.handler,r=s.selector),r&&et.find.matchesSelector(jt,r),i.guid||(i.guid=et.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(e){return"undefined"!=typeof et&&et.event.triggered!==e.type?et.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(_t)||[""],u=e.length;u--;)a=Bt.exec(e[u])||[],p=m=a[1],d=(a[2]||"").split(".").sort(),p&&(c=et.event.special[p]||{},p=(r?c.delegateType:c.bindType)||p,c=et.event.special[p]||{},h=et.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&et.expr.match.needsContext.test(r),namespace:d.join(".")},s),(f=l[p])||(f=l[p]=[],f.delegateCount=0,c.setup&&c.setup.call(t,n,d,o)!==!1||t.addEventListener&&t.addEventListener(p,o)),c.add&&(c.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),r?f.splice(f.delegateCount++,0,h):f.push(h),et.event.global[p]=!0)},remove:function(t,e,i,n,r){var s,o,a,l,u,h,c,f,p,d,m,g=bt.hasData(t)&&bt.get(t);if(g&&(l=g.events)){for(e=(e||"").match(_t)||[""],u=e.length;u--;)if(a=Bt.exec(e[u])||[],p=m=a[1],d=(a[2]||"").split(".").sort(),p){for(c=et.event.special[p]||{},p=(n?c.delegateType:c.bindType)||p,f=l[p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=f.length;s--;)h=f[s],!r&&m!==h.origType||i&&i.guid!==h.guid||a&&!a.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(f.splice(s,1),h.selector&&f.delegateCount--,c.remove&&c.remove.call(t,h));o&&!f.length&&(c.teardown&&c.teardown.call(t,d,g.handle)!==!1||et.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)et.event.remove(t,p+e[u],i,n,!0);et.isEmptyObject(l)&&bt.remove(t,"handle events")}},dispatch:function(t){var e,i,n,r,s,o,a=et.event.fix(t),l=new Array(arguments.length),u=(bt.get(this,"events")||{})[a.type]||[],h=et.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!h.preDispatch||h.preDispatch.call(this,a)!==!1){for(o=et.event.handlers.call(this,a,u),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,n=((et.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l),void 0!==n&&(a.result=n)===!1&&(a.preventDefault(),a.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,r,s,o,a=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||u.disabled!==!0)){for(s=[],o={},i=0;i<l;i++)n=e[i],r=n.selector+" ",void 0===o[r]&&(o[r]=n.needsContext?et(r,this).index(u)>-1:et.find(r,this,null,[u]).length),o[r]&&s.push(n);s.length&&a.push({elem:u,handlers:s})}return u=this,l<e.length&&a.push({elem:u,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(et.Event.prototype,t,{enumerable:!0,configurable:!0,get:et.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[et.expando]?t:new et.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==b()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===b()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&et.nodeName(this,"input"))return this.click(),!1},_default:function(t){return et.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},et.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},et.Event=function(t,e){return this instanceof et.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?x:w,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&et.extend(this,e),this.timeStamp=t&&t.timeStamp||et.now(),void(this[et.expando]=!0)):new et.Event(t,e)},et.Event.prototype={constructor:et.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=x,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=x,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=x,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},et.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Xt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&It.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},et.event.addProp),et.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){et.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,r=t.relatedTarget,s=t.handleObj;return r&&(r===n||et.contains(n,r))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}}),et.fn.extend({on:function(t,e,i,n){return T(this,t,e,i,n)},one:function(t,e,i,n){return T(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,et(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(i=e,e=void 0),i===!1&&(i=w),this.each(function(){et.event.remove(this,t,i,e)})}});var zt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Yt=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Wt=/^true\/(.*)/,Vt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;et.extend({htmlPrefilter:function(t){return t.replace(zt,"<$1></$2>")},clone:function(t,e,i){var n,r,s,o,a=t.cloneNode(!0),l=et.contains(t.ownerDocument,t);if(!(J.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||et.isXMLDoc(t)))for(o=_(a),s=_(t),n=0,r=s.length;n<r;n++)O(s[n],o[n]);if(e)if(i)for(s=s||_(t),o=o||_(a),n=0,r=s.length;n<r;n++)C(s[n],o[n]);else C(t,a);return o=_(a,"script"),o.length>0&&v(o,!l&&_(t,"script")),a},cleanData:function(t){for(var e,i,n,r=et.event.special,s=0;void 0!==(i=t[s]);s++)if(wt(i)){if(e=i[bt.expando]){if(e.events)for(n in e.events)r[n]?et.event.remove(i,n):et.removeEvent(i,n,e.handle);i[bt.expando]=void 0}i[Tt.expando]&&(i[Tt.expando]=void 0)}}}),et.fn.extend({detach:function(t){return R(this,t,!0)},remove:function(t){return R(this,t)},text:function(t){return xt(this,function(t){return void 0===t?et.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=P(this,t);e.appendChild(t)}})},prepend:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=P(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(et.cleanData(_(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return et.clone(this,t,e)})},html:function(t){return xt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Yt.test(t)&&!Et[(Nt.exec(t)||["",""])[1].toLowerCase()]){t=et.htmlPrefilter(t);try{for(;i<n;i++)e=this[i]||{},1===e.nodeType&&(et.cleanData(_(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return A(this,arguments,function(e){var i=this.parentNode;et.inArray(this,t)<0&&(et.cleanData(_(this)),i&&i.replaceChild(e,this))},t)}}),et.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",
insertAfter:"after",replaceAll:"replaceWith"},function(t,e){et.fn[t]=function(t){for(var i,n=[],r=et(t),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),et(r[o])[e](i),H.apply(n,i.get());return this.pushStack(n)}});var Ht=/^margin/,Ut=new RegExp("^("+St+")(?!px)[a-z%]+$","i"),$t=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",jt.appendChild(o);var e=t.getComputedStyle(a);i="1%"!==e.top,s="2px"===e.marginLeft,n="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,jt.removeChild(o),a=null}}var i,n,r,s,o=Y.createElement("div"),a=Y.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",J.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",o.appendChild(a),et.extend(J,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return e(),n},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),s}}))}();var Gt=/^(none|table(?!-c[ea]).+)/,Zt={position:"absolute",visibility:"hidden",display:"block"},Qt={letterSpacing:"0",fontWeight:"400"},Kt=["Webkit","Moz","ms"],Jt=Y.createElement("div").style;et.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=D(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=et.camelCase(e),l=t.style;return e=et.cssProps[a]||(et.cssProps[a]=N(a)||a),o=et.cssHooks[e]||et.cssHooks[a],void 0===i?o&&"get"in o&&void 0!==(r=o.get(t,!1,n))?r:l[e]:(s=typeof i,"string"===s&&(r=Ct.exec(i))&&r[1]&&(i=d(t,e,r),s="number"),void(null!=i&&i===i&&("number"===s&&(i+=r&&r[3]||(et.cssNumber[a]?"":"px")),J.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l[e]=i))))}},css:function(t,e,i,n){var r,s,o,a=et.camelCase(e);return e=et.cssProps[a]||(et.cssProps[a]=N(a)||a),o=et.cssHooks[e]||et.cssHooks[a],o&&"get"in o&&(r=o.get(t,!0,i)),void 0===r&&(r=D(t,e,n)),"normal"===r&&e in Qt&&(r=Qt[e]),""===i||i?(s=parseFloat(r),i===!0||isFinite(s)?s||0:r):r}}),et.each(["height","width"],function(t,e){et.cssHooks[e]={get:function(t,i,n){if(i)return!Gt.test(et.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?L(t,e,n):Rt(t,Zt,function(){return L(t,e,n)})},set:function(t,i,n){var r,s=n&&$t(t),o=n&&E(t,e,n,"border-box"===et.css(t,"boxSizing",!1,s),s);return o&&(r=Ct.exec(i))&&"px"!==(r[3]||"px")&&(t.style[e]=i,i=et.css(t,e)),F(t,i,o)}}}),et.cssHooks.marginLeft=M(J.reliableMarginLeft,function(t,e){if(e)return(parseFloat(D(t,"marginLeft"))||t.getBoundingClientRect().left-Rt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),et.each({margin:"",padding:"",border:"Width"},function(t,e){et.cssHooks[t+e]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+Ot[n]+e]=s[n]||s[n-2]||s[0];return r}},Ht.test(t)||(et.cssHooks[t+e].set=F)}),et.fn.extend({css:function(t,e){return xt(this,function(t,e,i){var n,r,s={},o=0;if(et.isArray(e)){for(n=$t(t),r=e.length;o<r;o++)s[e[o]]=et.css(t,e[o],!1,n);return s}return void 0!==i?et.style(t,e,i):et.css(t,e)},t,e,arguments.length>1)}}),et.fn.delay=function(e,i){return e=et.fx?et.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,n){var r=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(r)}})},function(){var t=Y.createElement("input"),e=Y.createElement("select"),i=e.appendChild(Y.createElement("option"));t.type="checkbox",J.checkOn=""!==t.value,J.optSelected=i.selected,t=Y.createElement("input"),t.value="t",t.type="radio",J.radioValue="t"===t.value}();var te,ee=et.expr.attrHandle;et.fn.extend({attr:function(t,e){return xt(this,et.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){et.removeAttr(this,t)})}}),et.extend({attr:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof t.getAttribute?et.prop(t,e,i):(1===s&&et.isXMLDoc(t)||(r=et.attrHooks[e.toLowerCase()]||(et.expr.match.bool.test(e)?te:void 0)),void 0!==i?null===i?void et.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:(n=et.find.attr(t,e),null==n?void 0:n))},attrHooks:{type:{set:function(t,e){if(!J.radioValue&&"radio"===e&&et.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,r=e&&e.match(_t);if(r&&1===t.nodeType)for(;i=r[n++];)t.removeAttribute(i)}}),te={set:function(t,e,i){return e===!1?et.removeAttr(t,i):t.setAttribute(i,i),i}},et.each(et.expr.match.bool.source.match(/\w+/g),function(t,e){var i=ee[e]||et.find.attr;ee[e]=function(t,e,n){var r,s,o=e.toLowerCase();return n||(s=ee[o],ee[o]=r,r=null!=i(t,e,n)?o:null,ee[o]=s),r}});var ie=/^(?:input|select|textarea|button)$/i,ne=/^(?:a|area)$/i;et.fn.extend({prop:function(t,e){return xt(this,et.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[et.propFix[t]||t]})}}),et.extend({prop:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&et.isXMLDoc(t)||(e=et.propFix[e]||e,r=et.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=et.find.attr(t,"tabindex");return e?parseInt(e,10):ie.test(t.nodeName)||ne.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),J.optSelected||(et.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),et.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){et.propFix[this.toLowerCase()]=this}),et.fn.extend({addClass:function(t){var e,i,n,r,s,o,a,l=0;if(et.isFunction(t))return this.each(function(e){et(this).addClass(t.call(this,e,X(this)))});if("string"==typeof t&&t)for(e=t.match(_t)||[];i=this[l++];)if(r=X(i),n=1===i.nodeType&&" "+j(r)+" "){for(o=0;s=e[o++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");a=j(n),r!==a&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,r,s,o,a,l=0;if(et.isFunction(t))return this.each(function(e){et(this).removeClass(t.call(this,e,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(_t)||[];i=this[l++];)if(r=X(i),n=1===i.nodeType&&" "+j(r)+" "){for(o=0;s=e[o++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");a=j(n),r!==a&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):et.isFunction(t)?this.each(function(i){et(this).toggleClass(t.call(this,i,X(this),e),e)}):this.each(function(){var e,n,r,s;if("string"===i)for(n=0,r=et(this),s=t.match(_t)||[];e=s[n++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==i||(e=X(this),e&&bt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":bt.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+j(X(i))+" ").indexOf(e)>-1)return!0;return!1}});var re=/\r/g;et.fn.extend({val:function(t){var e,i,n,r=this[0];return arguments.length?(n=et.isFunction(t),this.each(function(i){var r;1===this.nodeType&&(r=n?t.call(this,i,et(this).val()):t,null==r?r="":"number"==typeof r?r+="":et.isArray(r)&&(r=et.map(r,function(t){return null==t?"":t+""})),e=et.valHooks[this.type]||et.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=et.valHooks[r.type]||et.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:(i=r.value,"string"==typeof i?i.replace(re,""):null==i?"":i)):void 0}}),et.extend({valHooks:{option:{get:function(t){var e=et.find.attr(t,"value");return null!=e?e:j(et.text(t))}},select:{get:function(t){var e,i,n,r=t.options,s=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?s+1:r.length;for(n=s<0?l:o?s:0;n<l;n++)if(i=r[n],(i.selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!et.nodeName(i.parentNode,"optgroup"))){if(e=et(i).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var i,n,r=t.options,s=et.makeArray(e),o=r.length;o--;)n=r[o],(n.selected=et.inArray(et.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),et.each(["radio","checkbox"],function(){et.valHooks[this]={set:function(t,e){if(et.isArray(e))return t.checked=et.inArray(et(t).val(),e)>-1}},J.checkOn||(et.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var se=/^(?:focusinfocus|focusoutblur)$/;et.extend(et.event,{trigger:function(e,i,n,r){var s,o,a,l,u,h,c,f=[n||Y],p=Z.call(e,"type")?e.type:e,d=Z.call(e,"namespace")?e.namespace.split("."):[];if(o=a=n=n||Y,3!==n.nodeType&&8!==n.nodeType&&!se.test(p+et.event.triggered)&&(p.indexOf(".")>-1&&(d=p.split("."),p=d.shift(),d.sort()),u=p.indexOf(":")<0&&"on"+p,e=e[et.expando]?e:new et.Event(p,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:et.makeArray(i,[e]),c=et.event.special[p]||{},r||!c.trigger||c.trigger.apply(n,i)!==!1)){if(!r&&!c.noBubble&&!et.isWindow(n)){for(l=c.delegateType||p,se.test(l+p)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(n.ownerDocument||Y)&&f.push(a.defaultView||a.parentWindow||t)}for(s=0;(o=f[s++])&&!e.isPropagationStopped();)e.type=s>1?l:c.bindType||p,h=(bt.get(o,"events")||{})[e.type]&&bt.get(o,"handle"),h&&h.apply(o,i),h=u&&o[u],h&&h.apply&&wt(o)&&(e.result=h.apply(o,i),e.result===!1&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&c._default.apply(f.pop(),i)!==!1||!wt(n)||u&&et.isFunction(n[p])&&!et.isWindow(n)&&(a=n[u],a&&(n[u]=null),et.event.triggered=p,n[p](),et.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(t,e,i){var n=et.extend(new et.Event,i,{type:t,isSimulated:!0});et.event.trigger(n,null,e)}}),et.fn.extend({trigger:function(t,e){return this.each(function(){et.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return et.event.trigger(t,e,i,!0)}}),et.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){et.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),et.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),J.focusin="onfocusin"in t,J.focusin||et.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){et.event.simulate(e,t.target,et.event.fix(t))};et.event.special[e]={setup:function(){var n=this.ownerDocument||this,r=bt.access(n,e);r||n.addEventListener(t,i,!0),bt.access(n,e,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=bt.access(n,e)-1;r?bt.access(n,e,r):(n.removeEventListener(t,i,!0),bt.remove(n,e))}}});var oe=/\[\]$/,ae=/\r?\n/g,le=/^(?:submit|button|image|reset|file)$/i,ue=/^(?:input|select|textarea|keygen)/i;et.param=function(t,e){var i,n=[],r=function(t,e){var i=et.isFunction(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(et.isArray(t)||t.jquery&&!et.isPlainObject(t))et.each(t,function(){r(this.name,this.value)});else for(i in t)I(i,t[i],e,r);return n.join("&")},et.fn.extend({serialize:function(){return et.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=et.prop(this,"elements");return t?et.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!et(this).is(":disabled")&&ue.test(this.nodeName)&&!le.test(t)&&(this.checked||!Mt.test(t))}).map(function(t,e){var i=et(this).val();return null==i?null:et.isArray(i)?et.map(i,function(t){return{name:e.name,value:t.replace(ae,"\r\n")}}):{name:e.name,value:i.replace(ae,"\r\n")}}).get()}}),et.fn.extend({wrapAll:function(t){var e;return this[0]&&(et.isFunction(t)&&(t=t.call(this[0])),e=et(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return et.isFunction(t)?this.each(function(e){et(this).wrapInner(t.call(this,e))}):this.each(function(){var e=et(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=et.isFunction(t);return this.each(function(i){et(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){et(this).replaceWith(this.childNodes)}),this}}),et.expr.pseudos.hidden=function(t){return!et.expr.pseudos.visible(t)},et.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},J.createHTMLDocument=function(){var t=Y.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),et.parseHTML=function(t,e,i){if("string"!=typeof t)return[];"boolean"==typeof e&&(i=e,e=!1);var n,r,s;return e||(J.createHTMLDocument?(e=Y.implementation.createHTMLDocument(""),n=e.createElement("base"),n.href=Y.location.href,e.head.appendChild(n)):e=Y),r=ht.exec(t),s=!i&&[],r?[e.createElement(r[1])]:(r=y([t],e,s),s&&s.length&&et(s).remove(),et.merge([],r.childNodes))},et.offset={setOffset:function(t,e,i){var n,r,s,o,a,l,u,h=et.css(t,"position"),c=et(t),f={};"static"===h&&(t.style.position="relative"),a=c.offset(),s=et.css(t,"top"),l=et.css(t,"left"),u=("absolute"===h||"fixed"===h)&&(s+l).indexOf("auto")>-1,u?(n=c.position(),o=n.top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),et.isFunction(e)&&(e=e.call(t,i,et.extend({},a))),null!=e.top&&(f.top=e.top-a.top+o),null!=e.left&&(f.left=e.left-a.left+r),"using"in e?e.using.call(t,f):c.css(f)}},et.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){et.offset.setOffset(this,t,e)});var e,i,n,r,s=this[0];return s?s.getClientRects().length?(n=s.getBoundingClientRect(),n.width||n.height?(r=s.ownerDocument,i=B(r),e=r.documentElement,{top:n.top+i.pageYOffset-e.clientTop,left:n.left+i.pageXOffset-e.clientLeft}):n):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===et.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),et.nodeName(t[0],"html")||(n=t.offset()),n={top:n.top+et.css(t[0],"borderTopWidth",!0),left:n.left+et.css(t[0],"borderLeftWidth",!0)}),{top:e.top-n.top-et.css(i,"marginTop",!0),left:e.left-n.left-et.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===et.css(t,"position");)t=t.offsetParent;return t||jt})}}),et.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;et.fn[t]=function(n){return xt(this,function(t,n,r){var s=B(t);return void 0===r?s?s[e]:t[n]:void(s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):t[n]=r)},t,n,arguments.length)}}),et.each(["top","left"],function(t,e){et.cssHooks[e]=M(J.pixelPosition,function(t,i){if(i)return i=D(t,e),Ut.test(i)?et(t).position()[e]+"px":i})}),et.each({Height:"height",Width:"width"},function(t,e){et.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){et.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(r===!0||s===!0?"margin":"border");return xt(this,function(e,i,r){var s;return et.isWindow(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?et.css(e,i,a):et.style(e,i,r,a)},e,o?r:void 0,o)}})}),"function"==typeof define&&define.amd&&define("jquery",[],function(){return et});var he=t.jQuery,ce=t.$;return et.noConflict=function(e){return t.$===et&&(t.$=ce),e&&t.jQuery===et&&(t.jQuery=he),et},e||(t.jQuery=t.$=et),et})},{}],14:[function(t,e,i){!function(t){var n=!1;if("function"==typeof define&&define.amd&&(define(t),n=!0),"object"==typeof i&&(e.exports=t(),n=!0),!n){var r=window.Cookies,s=window.Cookies=t();s.noConflict=function(){return window.Cookies=r,s}}}(function(){function t(){for(var t=0,e={};t<arguments.length;t++){var i=arguments[t];for(var n in i)e[n]=i[n]}return e}function e(i){function n(e,r,s){var o;if("undefined"!=typeof document){if(arguments.length>1){if(s=t({path:"/"},n.defaults,s),"number"==typeof s.expires){var a=new Date;a.setMilliseconds(a.getMilliseconds()+864e5*s.expires),s.expires=a}try{o=JSON.stringify(r),/^[\{\[]/.test(o)&&(r=o)}catch(t){}return r=i.write?i.write(r,e):encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),e=encodeURIComponent(String(e)),e=e.replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent),e=e.replace(/[\(\)]/g,escape),document.cookie=[e,"=",r,s.expires?"; expires="+s.expires.toUTCString():"",s.path?"; path="+s.path:"",s.domain?"; domain="+s.domain:"",s.secure?"; secure":""].join("")}e||(o={});for(var l=document.cookie?document.cookie.split("; "):[],u=/(%[0-9A-Z]{2})+/g,h=0;h<l.length;h++){var c=l[h].split("="),f=c.slice(1).join("=");'"'===f.charAt(0)&&(f=f.slice(1,-1));try{var p=c[0].replace(u,decodeURIComponent);if(f=i.read?i.read(f,p):i(f,p)||f.replace(u,decodeURIComponent),this.json)try{f=JSON.parse(f)}catch(t){}if(e===p){o=f;break}e||(o[p]=f)}catch(t){}}return o}}return n.set=n,n.get=function(t){return n.call(n,t)},n.getJSON=function(){return n.apply({json:!0},[].slice.call(arguments))},n.defaults={},n.remove=function(e,i){n(e,"",t(i,{expires:-1}))},n.withConverter=e,n}return e(function(){})})},{}],15:[function(t,e,i){"use strict";var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/isMobile.min.js");n(function(){function e(t){"radio"!==t.attr("type")&&(""!==t.val()?t.addClass("on"):t.removeClass("on"))}var i=t("./animHeader.js"),s=t("./animBtn.js"),o=t("./sliderMain.js"),a=n("body"),l={yellow:["rgb(255, 228, 0)","rgb(43, 240, 117)"],orange:["rgb(255, 120, 0)","rgb(255, 228, 0)"],red:["rgb(255, 6, 0)","rgb(255, 120, 0)"],pink:["rgb(240, 43, 140)","rgb(255, 6, 0)"],blue:["rgb(2, 187, 255)","rgb(138, 126, 224)"],green:["rgb(43, 240, 117)","rgb(2, 187, 255)"]},u=n("#search"),h=n("#form-contact");r.any?a.addClass("is-mobile"):a.addClass("is-desktop"),i(),s(a),h.length&&h.on("input propertychange","input, textarea",function(){e(n(this))}).find("input, textarea").each(function(){e(n(this))}),(a.hasClass("archive")||a.hasClass("search"))&&u.length&&(u.on("input propertychange",function(){e(n(this))}),e(u)),n("#bloc-top").length&&o(a,n("#bloc-top"),l)}),n(window).on("load",function(){var e=n("body"),i=t("./initVideo.js"),r=t("./slider.js"),s=t("./animHoops.js"),o=t("./setPosCircle.js");n(".wrapper-sliders").length&&r(),n(".wrapper-video").length&&i(),e.hasClass("home")&&s(n("#more-than-moocs").find(".hoop"),200,!0),e.hasClass("page-template-about")&&s(n("#main").find(".hoop"),300,!1),e.hasClass("page-template-solutions")&&o(n("#solutions-header"))})},{"./animBtn.js":1,"./animHeader.js":2,"./animHoops.js":3,"./initVideo.js":5,"./libs/isMobile.min.js":12,"./libs/jquery/dist/jquery.slim.min.js":13,"./setPosCircle.js":17,"./slider.js":18,"./sliderMain.js":19}],16:[function(t,e,i){e.exports=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)}}()},{}],17:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");window.requestAnimFrame=t("./requestAnimFrame.js");var s=t("./throttle.js"),o=t("./getEltPosOnCover");e.exports=function(t){function e(){i=o(t,h,l,u,a),r.set(a,{scale:i[2],left:i[0]+"px",top:i[1]+"px",force3D:!0})}var i,a=t.find("> .hoop"),l=t.data("img-width"),u=t.data("img-height"),h=u/l;e(),r.to(a,1,{opacity:1}),n(window).on("resize",s(function(){requestAnimFrame(e)},60))}},{"./getEltPosOnCover":4,"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13,"./requestAnimFrame.js":16,"./throttle.js":20}],18:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./libs/gsap/src/uncompressed/utils/Draggable.js"),o=(t("./libs/gsap/src/uncompressed/plugins/ThrowPropsPlugin.js"),t("./throttle.js")),a=t("./libs/isMobile.min.js");e.exports=function(){function t(){n(".slides.cloned").remove(),n(".slides > li.active").removeClass("active"),r.set([n(".slider"),n(".container-sliders .hoop")],{clearProps:"transform"})}function e(t,e){y=t,C=y.find(".slides.cloned"),x=y.find(".slides:not(.cloned)"),T=x.find("> li"),P=T.outerWidth(),k=T.length,w=k*P,d=e.x,v=k%2===0?P/2:0,d>v?(r.set(C,{x:-w+"px",force3D:!0}),d>w&&(d-=w)):(r.set(C,{x:w+"px",force3D:!0}),d<-w&&(d+=w)),d!==this.x&&(r.set(y,{x:d,force3D:!0,overwrite:!1}),e.x=d),r.set(y.parents(".container-sliders").find(".hoop"),{rotation:d/2,force3D:!0,overwrite:!1})}function i(){e(n(this.target),this),n(this.target).find(".slides > li").removeClass("active")}function l(){e(n(this.target),this),y=n(this.target),b=y.parents(".container-sliders").width()/2,T=y.find(".slides > li"),O=T.outerWidth()/4,A=b+O,R=b-O,D=T.outerWidth()/2,T.each(function(){g=Math.floor(n(this).offset().left+D),g>=R&&g<=A&&n(this).addClass("active")})}function u(t,e,i){m=t.outerWidth()/2,O=e.outerWidth()/2,A=m+O,R=m-O,e.each(function(){g=Math.floor(n(this).offset().left+i/2),g>=R&&g<=A&&n(this).addClass("active")})}function h(){e(n(this.target),this)}function c(t,e){var o,c,d=t.find(".wrapper-sliders"),m=t.find(".slider"),g=t.find(".slides"),v=g.find("> li"),y=v.length,x=v.outerWidth(),w=(v.outerHeight(),y/2),b=y*x,T=b/2-x/2;y%2===0?(o=w,c=w):(o=Math.ceil(w),c=y-o),g.clone().addClass("cloned").appendTo(m),g=t.find(".slides"),v=g.find("> li"),S=t.find(".slides.cloned"),_=t.find(".slides:not(.cloned)"),leftSlidesStart=T-c*x,r.set([g,d],{width:b+"px"}),g.each(function(){for(f=0;f<o;f++)r.set(n(this).find(">li").eq(f),{left:T+f*x+"px"});for(p=0;p<c;p++)r.set(n(this).find(">li").eq(o+p),{left:leftSlidesStart+p*x+"px"})}),r.set(S,{x:b+"px",force3D:!0}),r.set(g,{marginLeft:-b/2+"px"}),r.set(t,{opacity:1}),u(t,v,x),a.any&&(F=!0),N[e]=s.create(m,{type:"x",trigger:d,zIndexBoost:!1,dragClickables:!0,dragResistance:0,edgeResistance:.65,throwProps:!0,minimumMovement:0,allowNativeTouchScrolling:F,onDrag:h,onThrowUpdate:h,onDragStart:i,onThrowComplete:l,snap:{x:function(t){return(t/x|0)*x}}})}var f,p,d,m,g,_,v,y,x,w,b,T,P,k,S,C,O,A,R,D,M=n(".container-sliders"),N=[],F=!1,E=n(window).outerWidth(),L=!1;M.each(function(t){c(n(this),t)}),E<=580&&(L=!0),n(window).on("resize",o(function(){E=n(window).outerWidth(),E>580&&L?(t(),M.each(function(t){c(n(this),t)}),L=!1):E<=580&&!L&&(t(),M.each(function(t){c(n(this),t)}),L=!0)},60))}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/gsap/src/uncompressed/plugins/ThrowPropsPlugin.js":10,"./libs/gsap/src/uncompressed/utils/Draggable.js":11,"./libs/isMobile.min.js":12,"./libs/jquery/dist/jquery.slim.min.js":13,"./throttle.js":20}],19:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/js-cookie/src/js.cookie.js"),s=t("./libs/gsap/src/uncompressed/TweenMax.js"),o=t("./libs/gsap/src/uncompressed/easing/CustomEase.js");window.requestAnimFrame=t("./requestAnimFrame.js");var a=t("./throttle.js"),l=t("./getEltPosOnCover");e.exports=function(t,e,i){function u(){y=l(e,R,O,A,D),s.set(D,{scale:y[2],left:y[0]+"px",top:y[1]+"px",force3D:!0})}function h(){v=l(e,R,O,A,S),s.set(S,{scale:v[2],left:v[0]+"px",top:v[1]+"px",force3D:!0,onComplete:function(){v[0]<N||v[0]+S.width()+2*N>M||v[1]<F.height()?(S.addClass("off"),C.addClass("on")):(S.removeClass("off"),C.removeClass("on"))}})}function c(){clearTimeout(w),w=setTimeout(function(){d(currentSlide.next(".slide-home"),k.next(".slide-home-txt"),0,"next")},6e3)}function f(){j.find(".current").html(currentSlide.index(".slide-home")+1),t.removeClass("theme-"+L).addClass("theme-"+currentSlide.data("color")).data("theme",currentSlide.data("color")),X.find("[data-theme-main]").attr("stop-color",i[currentSlide.data("color")][0]),X.find("[data-theme-second]").attr("stop-color",i[currentSlide.data("color")][1]),E.each(function(){this.href=this.href.replace(L,t.data("theme"))})}function p(t,e){s.to(_,.7,{x:100*t+"%",delay:.3,force3D:!0,ease:z}),s.fromTo(currentSlide,.7,{x:100*e+"%"},{x:"0%",delay:.3,force3D:!0,ease:z}),s.fromTo(currentSlide.find(".slider-plans"),2,{x:e*M/5+"px"},Y),s.fromTo(D,2.5,{x:e*M/5+"px"},Y),s.fromTo([S.find("> span").eq(0),C.find("> span")],3,{x:e*M/5+"px"},Y),s.fromTo(S.find("> span").eq(1),3.5,{x:e*M/5+"px"},Y)}function d(i,n,o,a){i.length?i.addClass("slide-on"):P.eq(o).addClass("slide-on"),currentSlide.removeClass("slide-on"),n.length?n.addClass("txt-on"):B.eq(o).addClass("txt-on"),k.removeClass("txt-on"),_=currentSlide,currentSlide=e.find(".slide-on"),k=T.find(".txt-on"),L=t.data("theme"),S=currentSlide.find(".baseline"),C=currentSlide.find(".baseline-second"),D=currentSlide.find(".hoop"),x="next"===a?-1:1,s.to([_.find(".hoop"),_.find(".baseline").find("> span"),_.find(".baseline-second").find("> span"),_.find(".slider-plans")],.7,{x:300*x+"px",force3D:!0,ease:Power2.easeIn,onComplete:f}),h(),u(),"next"===a?p(-1,1):p(1,-1),c(),r.set("think-decli",currentSlide.index(".slide-home"))}function m(){s.set(P,{x:"100%",opacity:1,force3D:!0}),s.set(currentSlide,{x:"0%",force3D:!0}),f(),c()}function g(){b=n(document).scrollTop(),b>e.height()-500?clearTimeout(w):c()}var _,v,y,x,w,b,T=n("#bloc-revelation"),P=currentSlide=e.find(".slide-on"),k=T.find(".txt-on"),S=currentSlide.find(".baseline"),C=currentSlide.find(".baseline-second"),O=e.data("img-width"),A=e.data("img-height"),R=A/O,D=currentSlide.find(".hoop"),M=e.width(),N=20,F=n("#header"),E=n(".favicon"),L=t.data("theme"),j=e.find("#slider-home-nav"),X=n("#gradient-hoop"),P=e.find(".slide-home"),I=P.length,B=T.find(".slide-home-txt"),z=o.create("custom","M0,0 C0,0 0.382,0 0.544,0.2 0.655,0.337 0.7,0.751 0.8,0.9 0.878,1.016 1,1 1,1"),Y={x:"0px",delay:.3,force3D:!0,ease:Power2.easeOut};j.on("click",".prev",function(t){t.preventDefault(),clearTimeout(w),d(currentSlide.prev(".slide-home"),k.prev(".slide-home-txt"),I-1,"prev")}).on("click",".next",function(t){t.preventDefault(),clearTimeout(w),d(currentSlide.next(".slide-home"),k.next(".slide-home-txt"),0,"next")}),n(window).on("load",function(){h(),u(),m()}).on("resize",a(function(){M=e.width(),requestAnimFrame(h),requestAnimFrame(u)},60)).on("blur",function(){clearTimeout(w)}).on("focus",c),n(document).on("scroll",a(function(){requestAnimFrame(g)},40))}},{"./getEltPosOnCover":4,"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/gsap/src/uncompressed/easing/CustomEase.js":8,"./libs/jquery/dist/jquery.slim.min.js":13,"./libs/js-cookie/src/js.cookie.js":14,"./requestAnimFrame.js":16,"./throttle.js":20}],20:[function(t,e,i){e.exports=function(t,e){var i,n;return function(){var r=this,s=+new Date,o=arguments;i&&s<i+e?(clearTimeout(n),n=setTimeout(function(){i=s,t.apply(r,o)},e)):(i=s,t.apply(r,o))}}},{}]},{},[15]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvYW5pbUJ0bi5qcyIsInNyYy9qcy9hbmltSGVhZGVyLmpzIiwic3JjL2pzL2FuaW1Ib29wcy5qcyIsInNyYy9qcy9nZXRFbHRQb3NPbkNvdmVyLmpzIiwic3JjL2pzL2luaXRWaWRlby5qcyIsInNyYy9qcy9saWJzL2dzYXAvc3JjL3VuY29tcHJlc3NlZC9Ud2VlbkxpdGUuanMiLCJzcmMvanMvbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvVHdlZW5NYXguanMiLCJzcmMvanMvbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvZWFzaW5nL0N1c3RvbUVhc2UuanMiLCJzcmMvanMvbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvcGx1Z2lucy9DU1NQbHVnaW4uanMiLCJzcmMvanMvbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvcGx1Z2lucy9UaHJvd1Byb3BzUGx1Z2luLmpzIiwic3JjL2pzL2xpYnMvZ3NhcC9zcmMvdW5jb21wcmVzc2VkL3V0aWxzL0RyYWdnYWJsZS5qcyIsInNyYy9qcy9saWJzL2lzTW9iaWxlLm1pbi5qcyIsInNyYy9qcy9saWJzL2pxdWVyeS9kaXN0L2pxdWVyeS5zbGltLm1pbi5qcyIsInNyYy9qcy9saWJzL2pzLWNvb2tpZS9zcmMvanMuY29va2llLmpzIiwic3JjL2pzL21haW4uanMiLCJzcmMvanMvcmVxdWVzdEFuaW1GcmFtZS5qcyIsInNyYy9qcy9zZXRQb3NDaXJjbGUuanMiLCJzcmMvanMvc2xpZGVyLmpzIiwic3JjL2pzL3NsaWRlck1haW4uanMiLCJzcmMvanMvdGhyb3R0bGUuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiJCIsIlR3ZWVuTWF4IiwiYm9keSIsImdldFBvc0dyYWRpZW50IiwiYnRuSSIsImJ0bk1vdXNlWCIsImJ0bk1vdXNlWSIsImRhdGEiLCJwb3NHcmFkaWVudCIsIm9uIiwidGhpcyIsImZpbmQiLCJwb3NpdGlvbiIsImxlZnQiLCJ3aWR0aCIsInRvcCIsImhlaWdodCIsIm9mZnNldCIsInBhZ2VYIiwicGFnZVkiLCJ0byIsIngiLCJ5IiwiaXNUd2VlbmluZyIsInNldCIsIndpbmRvdyIsInJlcXVlc3RBbmltRnJhbWUiLCJ0aHJvdHRsZSIsInNob3dTY3JvbGxJbmRpYyIsImhlYWRlciIsImFkZENsYXNzIiwibG9nbyIsImhhc0NsYXNzIiwid2luZG93V2lkdGgiLCJsb2dvTyIsIm9wYWNpdHkiLCJsb2dvTzEiLCJoaWRlU2Nyb2xsSW5kaWMiLCJyZW1vdmVDbGFzcyIsInNjcm9sbEhhbmRsZXIiLCJteVNjcm9sbCIsImRvY3VtZW50Iiwic2Nyb2xsVG9wIiwic2Nyb2xsUGVyY2VudCIsImRvY0hlaWdodCIsIndpbmRvd0hlaWdodCIsInNjcm9sbFByb2dyZXNzIiwiZm9yY2UzRCIsInJlc2l6ZUhhbmRsZXIiLCJvdXRlcldpZHRoIiwiZWx0cyIsImRpc3RhbmNlIiwiZGlmZlNwZWVkIiwiY2hlY2tJZkluVmlldyIsIndpbmRvd1RvcCIsIndpbmRvd0JvdHRvbSIsImVhY2giLCJlbHQiLCJlbHRUb3AiLCJlbHRCb3R0b20iLCJuZXdZIiwiZ2FwQm90dG9tIiwic2V0RGF0YUVsdHMiLCJlbHRIZWlnaHQiLCJvdXRlckhlaWdodCIsImNoZWNrLXRvcCIsImNoZWNrLWJvdHRvbSIsImNvbnRhaW5lciIsImltZ1JhdGlvIiwiaW1nVyIsImltZ0giLCJjb250YWluZXJIIiwiY29udGFpbmVyVyIsImNvbnRhaW5lclJhdGlvIiwicG9zWCIsInBvc1kiLCJmaW5hbEgiLCJmaW5hbFciLCJuZXdYIiwicmF0aW9TY2FsZSIsInRhZyIsImNyZWF0ZUVsZW1lbnQiLCJmaXJzdFNjcmlwdFRhZyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwid3JhcHBlclZpZGVvcyIsInBsYXllcnMiLCJnbG9iYWwiLCJvbllvdVR1YmVJZnJhbWVBUElSZWFkeSIsIm9uUGxheWVyUmVhZHkiLCJ3cmFwcGVyVmlkZW9QYXJlbnQiLCJkaXNwbGF5IiwiaW5kZXgiLCJwbGF5VmlkZW8iLCJZVCIsIlBsYXllciIsImdldCIsImV2ZW50cyIsIm9uUmVhZHkiLCJzcmMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwibW9kdWxlTmFtZSIsIl9leHBvcnRzIiwiX2dsb2JhbHMiLCJHcmVlblNvY2tHbG9iYWxzIiwiVHdlZW5MaXRlIiwicCIsIl90aWNrZXIiLCJfdGlja2VyQWN0aXZlIiwiX25hbWVzcGFjZSIsIm5zIiwic3BsaXQiLCJncyIsIl90aW55TnVtIiwiX3NsaWNlIiwiYiIsInB1c2giLCJfZW1wdHlGdW5jIiwiX2lzQXJyYXkiLCJ0b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsImFycmF5Iiwib2JqIiwiQXJyYXkiLCJfZGVmTG9va3VwIiwiRGVmaW5pdGlvbiIsImRlcGVuZGVuY2llcyIsImZ1bmMiLCJzYyIsImdzQ2xhc3MiLCJfY2xhc3NlcyIsImNoZWNrIiwiaW5pdCIsImN1ciIsImNsIiwiaGFzTW9kdWxlIiwibWlzc2luZyIsInBvcCIsImpvaW4iLCJhcHBseSIsImRlZmluZSIsImFtZCIsIkdyZWVuU29ja0FNRFBhdGgiLCJfZ3NEZWZpbmUiLCJfY2xhc3MiLCJnbG9iYWxzIiwiX2Jhc2VQYXJhbXMiLCJFYXNlIiwiZXh0cmFQYXJhbXMiLCJ0eXBlIiwicG93ZXIiLCJfZnVuYyIsIl90eXBlIiwiX3Bvd2VyIiwiX3BhcmFtcyIsImNvbmNhdCIsIl9lYXNlTWFwIiwibWFwIiwiX2Vhc2VSZWciLCJyZWdpc3RlciIsImVhc2UiLCJuYW1lcyIsInR5cGVzIiwiY3JlYXRlIiwibmFtZSIsImoiLCJuYSIsInRhIiwiZWFzaW5nIiwiZ2V0UmF0aW8iLCJfY2FsY0VuZCIsInB3IiwibGluZWFyIiwiTGluZWFyIiwiZWFzZUluIiwic3dpbmciLCJRdWFkIiwiZWFzZUluT3V0IiwiRXZlbnREaXNwYXRjaGVyIiwidGFyZ2V0IiwiX2xpc3RlbmVycyIsIl9ldmVudFRhcmdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYWxsYmFjayIsInNjb3BlIiwidXNlUGFyYW0iLCJwcmlvcml0eSIsImxpc3RlbmVyIiwibGlzdCIsIndha2UiLCJjIiwic3BsaWNlIiwicHIiLCJ1cCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50Iiwic2xpY2UiLCJfcmVxQW5pbUZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX2NhbmNlbEFuaW1GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiX2dldFRpbWUiLCJEYXRlIiwibm93IiwiZ2V0VGltZSIsIl9sYXN0VXBkYXRlIiwiZnBzIiwidXNlUkFGIiwiX2ZwcyIsIl9yZXEiLCJfaWQiLCJfZ2FwIiwiX25leHRUaW1lIiwiX3NlbGYiLCJfc3RhcnRUaW1lIiwiX3VzZVJBRiIsIl9sYWdUaHJlc2hvbGQiLCJfYWRqdXN0ZWRMYWciLCJfdGlja1dvcmQiLCJfdGljayIsIm1hbnVhbCIsIm92ZXJsYXAiLCJkaXNwYXRjaCIsImVsYXBzZWQiLCJ0aW1lIiwiZnJhbWUiLCJ0aWNrIiwibGFnU21vb3RoaW5nIiwidGhyZXNob2xkIiwiYWRqdXN0ZWRMYWciLCJNYXRoIiwibWluIiwic2xlZXAiLCJjbGVhclRpbWVvdXQiLCJzZWFtbGVzcyIsInNldFRpbWVvdXQiLCJ2YWx1ZSIsImFyZ3VtZW50cyIsInZpc2liaWxpdHlTdGF0ZSIsIlRpY2tlciIsImNvbnN0cnVjdG9yIiwiQW5pbWF0aW9uIiwiZHVyYXRpb24iLCJ2YXJzIiwiX2R1cmF0aW9uIiwiX3RvdGFsRHVyYXRpb24iLCJfZGVsYXkiLCJOdW1iZXIiLCJkZWxheSIsIl90aW1lU2NhbGUiLCJfYWN0aXZlIiwiaW1tZWRpYXRlUmVuZGVyIiwiX3JldmVyc2VkIiwicmV2ZXJzZWQiLCJfcm9vdFRpbWVsaW5lIiwidGwiLCJ1c2VGcmFtZXMiLCJfcm9vdEZyYW1lc1RpbWVsaW5lIiwiYWRkIiwiX3RpbWUiLCJwYXVzZWQiLCJ0aWNrZXIiLCJfZGlydHkiLCJfZ2MiLCJfaW5pdHRlZCIsIl9wYXVzZWQiLCJfdG90YWxUaW1lIiwiX3Jhd1ByZXZUaW1lIiwiX25leHQiLCJfbGFzdCIsIl9vblVwZGF0ZSIsIl90aW1lbGluZSIsInRpbWVsaW5lIiwiX2NoZWNrVGltZW91dCIsInBsYXkiLCJmcm9tIiwic3VwcHJlc3NFdmVudHMiLCJzZWVrIiwicGF1c2UiLCJhdFRpbWUiLCJyZXN1bWUiLCJ0b3RhbFRpbWUiLCJyZXN0YXJ0IiwiaW5jbHVkZURlbGF5IiwicmV2ZXJzZSIsInRvdGFsRHVyYXRpb24iLCJyZW5kZXIiLCJmb3JjZSIsImludmFsaWRhdGUiLCJfZW5hYmxlZCIsImlzQWN0aXZlIiwicmF3VGltZSIsInN0YXJ0VGltZSIsImVuYWJsZWQiLCJpZ25vcmVUaW1lbGluZSIsIl9yZW1vdmUiLCJfa2lsbCIsImtpbGwiLCJfdW5jYWNoZSIsImluY2x1ZGVTZWxmIiwidHdlZW4iLCJfc3dhcFNlbGZJblBhcmFtcyIsInBhcmFtcyIsImNvcHkiLCJfY2FsbGJhY2siLCJ2IiwiY2FsbGJhY2tTY29wZSIsImV2ZW50Q2FsbGJhY2siLCJzdWJzdHIiLCJpbmRleE9mIiwic21vb3RoQ2hpbGRUaW1pbmciLCJ1bmNhcHBlZCIsIl9wYXVzZVRpbWUiLCJfbGF6eVR3ZWVucyIsIl9sYXp5UmVuZGVyIiwicHJvZ3Jlc3MiLCJ0b3RhbFByb2dyZXNzIiwicmF0aW8iLCJfc29ydENoaWxkcmVuIiwiZW5kVGltZSIsImluY2x1ZGVSZXBlYXRzIiwidGltZVNjYWxlIiwicGF1c2VUaW1lIiwicmF3IiwiU2ltcGxlVGltZWxpbmUiLCJhdXRvUmVtb3ZlQ2hpbGRyZW4iLCJfZmlyc3QiLCJfcmVjZW50IiwiaW5zZXJ0IiwiY2hpbGQiLCJhbGlnbiIsInN0YWdnZXIiLCJwcmV2VHdlZW4iLCJzdCIsIl9wcmV2Iiwic2tpcERpc2FibGUiLCJuZXh0Iiwic2VsZWN0b3IiLCJ0YXJnIiwidGFyZ2V0cyIsImlzU2VsZWN0b3IiLCJqcXVlcnkiLCJub2RlVHlwZSIsInN0eWxlIiwib3ZlcndyaXRlIiwiX292ZXJ3cml0ZSIsIl9vdmVyd3JpdGVMb29rdXAiLCJkZWZhdWx0T3ZlcndyaXRlIiwiX3RhcmdldHMiLCJfcHJvcExvb2t1cCIsIl9zaWJsaW5ncyIsIl9yZWdpc3RlciIsIl9hcHBseU92ZXJ3cml0ZSIsIl9pc1NlbGVjdG9yIiwiX2F1dG9DU1MiLCJjc3MiLCJfcmVzZXJ2ZWRQcm9wcyIsIl9wbHVnaW5zIiwiX2ZpcnN0UFQiLCJfb3ZlcndyaXR0ZW5Qcm9wcyIsIl9zdGFydEF0IiwiX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQiLCJfbGF6eSIsInZlcnNpb24iLCJkZWZhdWx0RWFzZSIsIl9lYXNlIiwiYXV0b1NsZWVwIiwialF1ZXJ5IiwicXVlcnlTZWxlY3RvckFsbCIsImdldEVsZW1lbnRCeUlkIiwiY2hhckF0IiwiX2xhenlMb29rdXAiLCJfbnVtYmVyc0V4cCIsIl9zZXRSYXRpbyIsInZhbCIsInB0IiwiYmxvYiIsInN0YXJ0IiwibSIsIl90YXJnZXQiLCJmcCIsIl9ibG9iRGlmIiwiZW5kIiwiZmlsdGVyIiwic3RhcnROdW1zIiwiZW5kTnVtcyIsIm51bSIsIm5vbk51bWJlcnMiLCJjdXJyZW50TnVtIiwiY2hhckluZGV4IiwiY29sb3IiLCJtYXRjaCIsIl9hcHBseVBUIiwicGFyc2VGbG9hdCIsInBhcnNlSW50Iiwicm91bmQiLCJzZXRSYXRpbyIsIl9hZGRQcm9wVHdlZW4iLCJwcm9wIiwib3ZlcndyaXRlUHJvcCIsIm1vZCIsImZ1bmNQYXJhbSIsInN0cmluZ0ZpbHRlciIsImdldHRlck5hbWUiLCJpc1JlbGF0aXZlIiwicGciLCJpc05hTiIsImRlZmF1bHRTdHJpbmdGaWx0ZXIiLCJfaW50ZXJuYWxzIiwiaXNBcnJheSIsImxhenlUd2VlbnMiLCJibG9iRGlmIiwiX3R3ZWVuTG9va3VwIiwidHdlZW5Mb29rdXAiLCJfdHdlZW5Mb29rdXBOdW0iLCJyZXNlcnZlZFByb3BzIiwib25Db21wbGV0ZSIsIm9uQ29tcGxldGVQYXJhbXMiLCJvbkNvbXBsZXRlU2NvcGUiLCJydW5CYWNrd2FyZHMiLCJzdGFydEF0Iiwib25VcGRhdGUiLCJvblVwZGF0ZVBhcmFtcyIsIm9uVXBkYXRlU2NvcGUiLCJvblN0YXJ0Iiwib25TdGFydFBhcmFtcyIsIm9uU3RhcnRTY29wZSIsIm9uUmV2ZXJzZUNvbXBsZXRlIiwib25SZXZlcnNlQ29tcGxldGVQYXJhbXMiLCJvblJldmVyc2VDb21wbGV0ZVNjb3BlIiwib25SZXBlYXQiLCJvblJlcGVhdFBhcmFtcyIsIm9uUmVwZWF0U2NvcGUiLCJlYXNlUGFyYW1zIiwieW95byIsInJlcGVhdCIsInJlcGVhdERlbGF5IiwiYXV0b0NTUyIsImxhenkiLCJvbk92ZXJ3cml0ZSIsImlkIiwibm9uZSIsImFsbCIsImF1dG8iLCJjb25jdXJyZW50IiwiYWxsT25TdGFydCIsInByZWV4aXN0aW5nIiwidHJ1ZSIsImZhbHNlIiwiX25leHRHQ0ZyYW1lIiwibGF6eVJlbmRlciIsIl91cGRhdGVSb290IiwidHdlZW5zIiwic2NydWIiLCJfZ3NUd2VlbklEIiwiX29uT3ZlcndyaXRlIiwib3ZlcndyaXR0ZW5Ud2VlbiIsIm92ZXJ3cml0aW5nVHdlZW4iLCJraWxsZWRQcm9wcyIsInIxIiwicjIiLCJwcm9wcyIsIm1vZGUiLCJzaWJsaW5ncyIsImNoYW5nZWQiLCJjdXJUd2VlbiIsImdsb2JhbFN0YXJ0Iiwib3ZlcmxhcHMiLCJvQ291bnQiLCJ6ZXJvRHVyIiwiX2NoZWNrT3ZlcmxhcCIsInJlZmVyZW5jZSIsInRzIiwiX2luaXQiLCJpbml0UGx1Z2lucyIsInN0YXJ0VmFycyIsIm9wIiwiZHVyIiwiaW1tZWRpYXRlIiwiY29uZmlnIiwiX2Vhc2VUeXBlIiwiX2Vhc2VQb3dlciIsIl9pbml0UHJvcHMiLCJfb25QbHVnaW5FdmVudCIsInByb3BMb29rdXAiLCJvdmVyd3JpdHRlblByb3BzIiwicGx1Z2luIiwiX29uSW5pdFR3ZWVuIiwiX3ByaW9yaXR5IiwiX292ZXJ3cml0ZVByb3BzIiwiX29uSW5pdEFsbFByb3BzIiwiX29uRGlzYWJsZSIsIl9vbkVuYWJsZSIsImlzQ29tcGxldGUiLCJyYXdQcmV2VGltZSIsInByZXZUaW1lIiwicHJldlJhd1ByZXZUaW1lIiwicG93Iiwia2lsbFByb3BzIiwicmVjb3JkIiwia2lsbGVkIiwic2ltdWx0YW5lb3VzT3ZlcndyaXRlIiwiX3RlbXBLaWxsIiwiZnJvbVRvIiwiZnJvbVZhcnMiLCJ0b1ZhcnMiLCJkZWxheWVkQ2FsbCIsImdldFR3ZWVuc09mIiwib25seUFjdGl2ZSIsImtpbGxUd2VlbnNPZiIsImtpbGxEZWxheWVkQ2FsbHNUbyIsIlR3ZWVuUGx1Z2luIiwiX3Byb3BOYW1lIiwiX3N1cGVyIiwiQVBJIiwiX2FkZFR3ZWVuIiwibG9va3VwIiwiX21vZCIsIl9yb3VuZFByb3BzIiwicHQyIiwiZmlyc3QiLCJsYXN0IiwiYWN0aXZhdGUiLCJwbHVnaW5zIiwicHJvcE5hbWUiLCJvdmVyd3JpdGVQcm9wcyIsImluaXRBbGwiLCJQbHVnaW4iLCJ0b1VwcGVyQ2FzZSIsIl9nc1F1ZXVlIiwiY29uc29sZSIsImxvZyIsIl9nc1Njb3BlIiwiX2FwcGx5Q3ljbGUiLCJhbHQiLCJjeWNsZSIsIl9jeWNsZSIsIl95b3lvIiwiX3JlcGVhdCIsIl9yZXBlYXREZWxheSIsIlR3ZWVuTGl0ZUludGVybmFscyIsIl9ibGFua0FycmF5IiwidXBkYXRlVG8iLCJyZXNldER1cmF0aW9uIiwiY3VyUmF0aW8iLCJlbmRWYWx1ZSIsImludiIsImN5Y2xlRHVyYXRpb24iLCJ0b3RhbER1ciIsInByZXZUb3RhbFRpbWUiLCJwcmV2Q3ljbGUiLCJzdGFnZ2VyVG8iLCJhbGxUbyIsIm9uQ29tcGxldGVBbGwiLCJvbkNvbXBsZXRlQWxsUGFyYW1zIiwib25Db21wbGV0ZUFsbFNjb3BlIiwiZmluYWxDb21wbGV0ZSIsImZyb21DeWNsZSIsInN0YWdnZXJGcm9tIiwiYWxsRnJvbSIsInN0YWdnZXJGcm9tVG8iLCJhbGxGcm9tVG8iLCJfZ2V0Q2hpbGRyZW5PZiIsImluY2x1ZGVUaW1lbGluZXMiLCJjbnQiLCJnZXRBbGxUd2VlbnMiLCJraWxsQWxsIiwiY29tcGxldGUiLCJkZWxheWVkQ2FsbHMiLCJ0aW1lbGluZXMiLCJpc0RDIiwiYWxsVHJ1ZSIsImtpbGxDaGlsZFR3ZWVuc09mIiwicGFyZW50IiwiY3VyUGFyZW50IiwiX2NoYW5nZVBhdXNlIiwicGF1c2VBbGwiLCJyZXN1bWVBbGwiLCJnbG9iYWxUaW1lU2NhbGUiLCJUaW1lbGluZUxpdGUiLCJfbGFiZWxzIiwiX2NvcHkiLCJfcGF1c2VDYWxsYmFjayIsInBhdXNlQ2FsbGJhY2siLCJfZm9yY2luZ1BsYXloZWFkIiwiX2hhc1BhdXNlIiwiRW5naW5lIiwiX3BhcnNlVGltZU9yTGFiZWwiLCJleHBvcnRSb290IiwiaWdub3JlRGVsYXllZENhbGxzIiwicm9vdCIsImN1clRpbWUiLCJiZWZvcmVSYXdUaW1lIiwiYWRkTGFiZWwiLCJyZW1vdmUiLCJyZW1vdmVMYWJlbCIsImFwcGVuZCIsIm9mZnNldE9yTGFiZWwiLCJpbnNlcnRNdWx0aXBsZSIsImFwcGVuZE11bHRpcGxlIiwibGFiZWwiLCJhZGRQYXVzZSIsImdldExhYmVsVGltZSIsInRpbWVPckxhYmVsIiwiYXBwZW5kSWZBYnNlbnQiLCJpZ25vcmUiLCJzdG9wIiwiZ290b0FuZFBsYXkiLCJnb3RvQW5kU3RvcCIsImludGVybmFsRm9yY2UiLCJwYXVzZVR3ZWVuIiwicHJldlN0YXJ0IiwicHJldlRpbWVTY2FsZSIsInByZXZQYXVzZWQiLCJfaGFzUGF1c2VkQ2hpbGQiLCJnZXRDaGlsZHJlbiIsIm5lc3RlZCIsImlnbm9yZUJlZm9yZVRpbWUiLCJkaXNhYmxlZCIsIl9jb250YWlucyIsInJlY2VudCIsInNoaWZ0Q2hpbGRyZW4iLCJhbW91bnQiLCJhZGp1c3RMYWJlbHMiLCJsYWJlbHMiLCJjbGVhciIsInByZXYiLCJtYXgiLCJ1c2VzRnJhbWVzIiwiVGltZWxpbmVNYXgiLCJfZWFzZU5vbmUiLCJhZGRDYWxsYmFjayIsInJlbW92ZUNhbGxiYWNrIiwicmVtb3ZlUGF1c2UiLCJ0d2VlblRvIiwiYWJzIiwidHdlZW5Gcm9tVG8iLCJmcm9tUG9zaXRpb24iLCJ0b1Bvc2l0aW9uIiwiX2xvY2tlZCIsImJhY2t3YXJkcyIsIndyYXAiLCJyZWNUb3RhbFRpbWUiLCJyZWNDeWNsZSIsInJlY1Jhd1ByZXZUaW1lIiwicmVjVGltZSIsImdldEFjdGl2ZSIsImdldExhYmVsQWZ0ZXIiLCJnZXRMYWJlbHNBcnJheSIsImdldExhYmVsQmVmb3JlIiwic29ydCIsImN1cnJlbnRMYWJlbCIsIl9SQUQyREVHIiwiUEkiLCJfcjEiLCJfcjIiLCJfcjMiLCJfY29yUHJvcHMiLCJTZWdtZW50IiwiZCIsImRhIiwiY2EiLCJiYSIsIl9jb3JyZWxhdGUiLCJjdWJpY1RvUXVhZHJhdGljIiwicTEiLCJxMiIsInEzIiwicTQiLCJtYWIiLCJtYmMiLCJtY2QiLCJtYWJjIiwibWJjZCIsIm04IiwiX2NhbGN1bGF0ZUNvbnRyb2xQb2ludHMiLCJjdXJ2aW5lc3MiLCJxdWFkIiwiYmFzaWMiLCJjb3JyZWxhdGUiLCJwMSIsInAyIiwicDMiLCJzZWciLCJtMSIsIm0yIiwibW0iLCJjcDIiLCJxYiIsImlpIiwiY3AxIiwiX3BhcnNlQW5jaG9ycyIsInZhbHVlcyIsInByZXBlbmQiLCJ0bXAiLCJiZXppZXJUaHJvdWdoIiwicXVhZHJhdGljIiwidW5zaGlmdCIsInNxcnQiLCJfcGFyc2VCZXppZXJEYXRhIiwiaW5jIiwic29mdCIsIl9hZGRDdWJpY0xlbmd0aHMiLCJzdGVwcyIsInJlc29sdXRpb24iLCJkMSIsImJleiIsIl9wYXJzZUxlbmd0aERhdGEiLCJsZW5ndGhzIiwidG90YWwiLCJzZWdtZW50cyIsImN1ckxTIiwiQmV6aWVyUGx1Z2luIiwiX3Byb3BzIiwiX3RpbWVSZXMiLCJ0aW1lUmVzb2x1dGlvbiIsImlzRnVuYyIsInNlY29uZCIsImF1dG9Sb3RhdGUiLCJvcmllbnRUb0JlemllciIsIl9hdXRvUm90YXRlIiwiX2JlemllcnMiLCJfc2VnQ291bnQiLCJsZCIsIl9sZW5ndGgiLCJfbGVuZ3RocyIsIl9zZWdtZW50cyIsIl9sMSIsIl9saSIsIl9zMSIsIl9zaSIsIl9sMiIsIl9jdXJTZWciLCJfczIiLCJfcHJlYyIsIl9pbml0aWFsUm90YXRpb25zIiwiX3N0YXJ0UmF0aW8iLCJjdXJJbmRleCIsImN1clNlZyIsIm5vdFN0YXJ0IiwiYjIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImNvbnYiLCJhciIsImF0YW4yIiwicXVhZHJhdGljVG9DdWJpYyIsIl9jc3NSZWdpc3RlciIsIkNTU1BsdWdpbiIsIl9wYXJzZVRvUHJveHkiLCJfc2V0UGx1Z2luUmF0aW8iLCJDU1NQcm9wVHdlZW4iLCJfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AiLCJwYXJzZXIiLCJjc3NwIiwicGx1Z2luVmFsdWVzIiwiX3RyYW5zZm9ybSIsIl9lbmFibGVUcmFuc2Zvcm1zIiwiX2dzVHJhbnNmb3JtIiwicHJveHkiLCJyb3RhdGlvbiIsIl90d2VlbiIsIl9oYXNQcmlvcml0eSIsIl9zdWZmaXhNYXAiLCJfY3MiLCJfc3BlY2lhbFByb3BzIiwiZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiZGVmYXVsdFNrZXdUeXBlIiwiZGVmYXVsdFNtb290aE9yaWdpbiIsInN1ZmZpeE1hcCIsInJpZ2h0IiwiYm90dG9tIiwiZm9udFNpemUiLCJwYWRkaW5nIiwibWFyZ2luIiwicGVyc3BlY3RpdmUiLCJsaW5lSGVpZ2h0IiwiX2F1dG9Sb3VuZCIsIl9yZXFTYWZhcmlGaXgiLCJfaXNTYWZhcmkiLCJfaXNGaXJlZm94IiwiX2lzU2FmYXJpTFQ2IiwiX2llVmVycyIsIl9pbmRleCIsIl9udW1FeHAiLCJfcmVsTnVtRXhwIiwiX3ZhbHVlc0V4cCIsIl9OYU5FeHAiLCJfc3VmZml4RXhwIiwiX29wYWNpdHlFeHAiLCJfb3BhY2l0eVZhbEV4cCIsIl9hbHBoYUZpbHRlckV4cCIsIl9yZ2Joc2xFeHAiLCJfY2Fwc0V4cCIsIl9jYW1lbEV4cCIsIl91cmxFeHAiLCJfY2FtZWxGdW5jIiwiZyIsIl9ob3JpekV4cCIsIl9pZUdldE1hdHJpeEV4cCIsIl9pZVNldE1hdHJpeEV4cCIsIl9jb21tYXNPdXRzaWRlUGFyZW5FeHAiLCJfY29tcGxleEV4cCIsIl9ERUcyUkFEIiwiX2ZvcmNlUFQiLCJfZG9jIiwiX2NyZWF0ZUVsZW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJfdGVtcERpdiIsIl90ZW1wSW1nIiwiX2FnZW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiX3N1cHBvcnRzT3BhY2l0eSIsImV4ZWMiLCJSZWdFeHAiLCIkMSIsImNzc1RleHQiLCJ0ZXN0IiwiX2dldElFT3BhY2l0eSIsImN1cnJlbnRTdHlsZSIsIl9sb2ciLCJfcHJlZml4Q1NTIiwiX3ByZWZpeCIsIl9jaGVja1Byb3BQcmVmaXgiLCJ1bmRlZmluZWQiLCJ0b0xvd2VyQ2FzZSIsIl9nZXRDb21wdXRlZFN0eWxlIiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiX2dldFN0eWxlIiwiZ2V0U3R5bGUiLCJjcyIsImNhbGMiLCJkZmx0IiwicnYiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicmVwbGFjZSIsIl9jb252ZXJ0VG9QaXhlbHMiLCJjb252ZXJ0VG9QaXhlbHMiLCJzZngiLCJyZWN1cnNlIiwicGl4IiwiY2FjaGUiLCJob3JpeiIsIm5vZGUiLCJuZWciLCJwcmVjaXNlIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJhcHBlbmRDaGlsZCIsIl9nc0NhY2hlIiwicmVtb3ZlQ2hpbGQiLCJjYWNoZVdpZHRocyIsIl9jYWxjdWxhdGVPZmZzZXQiLCJjYWxjdWxhdGVPZmZzZXQiLCJkaW0iLCJfZ2V0QWxsU3R5bGVzIiwidHIiLCJfdHJhbnNmb3JtUHJvcENTUyIsIl90cmFuc2Zvcm1Qcm9wIiwiX2dldFRyYW5zZm9ybSIsInNrZXdYIiwic2NhbGVYIiwic2NhbGVZIiwiX3N1cHBvcnRzM0QiLCJ6Iiwicm90YXRpb25YIiwicm90YXRpb25ZIiwic2NhbGVaIiwiZmlsdGVycyIsIl9jc3NEaWYiLCJzMSIsInMyIiwiZm9yY2VMb29rdXAiLCJtcHQiLCJkaWZzIiwiTWluaVByb3BUd2VlbiIsImZpcnN0TVBUIiwiX2RpbWVuc2lvbnMiLCJfbWFyZ2lucyIsIl9nZXREaW1lbnNpb24iLCJub2RlTmFtZSIsImdldEJCb3giLCJfaXNTVkciLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIl9wYXJzZVBvc2l0aW9uIiwicmVjT2JqIiwib3hwIiwib3lwIiwib3hyIiwib3lyIiwib3giLCJveSIsIl9wYXJzZUNoYW5nZSIsIl9wYXJzZVZhbCIsIl9wYXJzZUFuZ2xlIiwiZGlyZWN0aW9uYWxFbmQiLCJjYXAiLCJkaWYiLCJyZXN1bHQiLCJfY29sb3JMb29rdXAiLCJhcXVhIiwibGltZSIsInNpbHZlciIsImJsYWNrIiwibWFyb29uIiwidGVhbCIsImJsdWUiLCJuYXZ5Iiwid2hpdGUiLCJmdWNoc2lhIiwib2xpdmUiLCJ5ZWxsb3ciLCJvcmFuZ2UiLCJncmF5IiwicHVycGxlIiwiZ3JlZW4iLCJyZWQiLCJwaW5rIiwiY3lhbiIsInRyYW5zcGFyZW50IiwiX2h1ZSIsImgiLCJfcGFyc2VDb2xvciIsInBhcnNlQ29sb3IiLCJ0b0hTTCIsIndhc0hTTCIsIl9mb3JtYXRDb2xvcnMiLCJ0ZW1wIiwiY29sb3JzIiwiX2NvbG9yRXhwIiwicGFyc2VkIiwiY29sb3JTdHJpbmdGaWx0ZXIiLCJjb21iaW5lZCIsImxhc3RJbmRleCIsIl9nZXRGb3JtYXR0ZXIiLCJjbHIiLCJjb2xsYXBzaWJsZSIsIm11bHRpIiwiZm9ybWF0dGVyIiwiZENvbG9yIiwiZFZhbHMiLCJwZngiLCJkZWxpbSIsIm51bVZhbHMiLCJkU2Z4IiwidmFscyIsIl9nZXRFZGdlUGFyc2VyIiwicGFyc2UiLCJzdHIiLCJ4czAiLCJ4czEiLCJzaGFsbG93IiwieHAiLCJmaXJzdFBUIiwiYnB0IiwidHJhbnNmb3JtIiwib2xkRm9yY2UiLCJyeHAiLCJfYWRkTm9uVHdlZW5pbmdOdW1lcmljUFQiLCJfcGFyc2VDb21wbGV4IiwicGFyc2VDb21wbGV4IiwiY2xycyIsInhpIiwibmkiLCJidiIsImV2IiwiYm51bXMiLCJlbnVtcyIsImJuIiwiaGFzQWxwaGEiLCJjdiIsInVzZUhTTCIsImVhIiwiYXV0b1JvdW5kIiwiYXBwZW5kWHRyYSIsInhmaXJzdCIsInBhZCIsIlNwZWNpYWxQcm9wIiwib3B0aW9ucyIsInByZWZpeCIsImZvcm1hdCIsImRlZmF1bHRWYWx1ZSIsImtleXdvcmQiLCJkZWZhdWx0cyIsIl9yZWdpc3RlclBsdWdpblByb3AiLCJwbHVnaW5OYW1lIiwicGx1Z2luQ2xhc3MiLCJjb20iLCJncmVlbnNvY2siLCJiaSIsImVpIiwia3dkIiwicmVnaXN0ZXJTcGVjaWFsUHJvcCIsIm9uSW5pdFR3ZWVuIiwidXNlU1ZHVHJhbnNmb3JtQXR0ciIsIl91c2VTVkdUcmFuc2Zvcm1BdHRyIiwiX3RyYW5zZm9ybVByb3BzIiwiX3RyYW5zZm9ybU9yaWdpblByb3AiLCJUcmFuc2Zvcm0iLCJkZWZhdWx0Rm9yY2UzRCIsIl9TVkdFbGVtZW50IiwiU1ZHRWxlbWVudCIsIl9jcmVhdGVTVkciLCJhdHRyaWJ1dGVzIiwiZWxlbWVudCIsInJlZyIsInNldEF0dHJpYnV0ZU5TIiwiX2RvY0VsZW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJfZm9yY2VTVkdUcmFuc2Zvcm1BdHRyIiwic3ZnIiwicmVjdCIsImNocm9tZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIl9wYXJzZVNWR09yaWdpbiIsImxvY2FsIiwiZGVjb3JhdGVlIiwiYWJzb2x1dGUiLCJzbW9vdGhPcmlnaW4iLCJza2lwUmVjb3JkIiwieE9yaWdpbiIsInlPcmlnaW4iLCJ0eCIsInR5IiwiZGV0ZXJtaW5hbnQiLCJ4T3JpZ2luT2xkIiwieU9yaWdpbk9sZCIsInRtIiwiX2dldE1hdHJpeCIsIl9pZGVudGl0eTJETWF0cml4IiwieE9mZnNldCIsInlPZmZzZXQiLCJzZXRBdHRyaWJ1dGUiLCJfY2FuR2V0QkJveCIsImdldENUTSIsImZvcmNlMkQiLCJpc0RlZmF1bHQiLCJkZWMiLCJybmQiLCJfcmVtb3ZlUHJvcCIsImdldEF0dHJpYnV0ZSIsImdldFRyYW5zZm9ybSIsInJlYyIsImludlgiLCJ6T3JpZ2luIiwidDEiLCJ0MiIsInQzIiwiY29zIiwic2luIiwiYTExIiwiYTIxIiwiYTMxIiwiYTQxIiwiYTEyIiwiYTIyIiwiYTMyIiwiYTQyIiwiYTEzIiwiYTIzIiwiYTMzIiwiYTE0IiwiYTI0IiwiYTM0IiwiYTQzIiwiYW5nbGUiLCJrIiwicmVtb3ZlQXR0cmlidXRlIiwiX3NldElFVHJhbnNmb3JtUmF0aW8iLCJhbmciLCJza2V3IiwiZHgiLCJkeSIsInciLCJjbGlwIiwieFBlcmNlbnQiLCJ5UGVyY2VudCIsIm1hcmciLCJtdWx0IiwiaWVPZmZzZXRYIiwiaWVPZmZzZXRZIiwiX3NldFRyYW5zZm9ybVJhdGlvIiwic2V0M0RUcmFuc2Zvcm1SYXRpbyIsInNldFRyYW5zZm9ybVJhdGlvIiwiY29tbWEiLCJ6ZXJvIiwic3giLCJzeSIsInN6IiwiaXNTVkciLCJza2V3VHlwZSIsInRhbiIsInNrZXdZIiwicGFyc2luZ1Byb3AiLCJfbGFzdFBhcnNlZFRyYW5zZm9ybSIsInN3YXBGdW5jIiwiaGFzM0QiLCJoYXNDaGFuZ2UiLCJkciIsIm1hdHJpeCIsIm9yaWdpbmFsR1NUcmFuc2Zvcm0iLCJlbmRSb3RhdGlvbnMiLCJ0cmFuc2Zvcm1PcmlnaW5TdHJpbmciLCJwYXJzZVRyYW5zZm9ybSIsIm9yaWciLCJ0cmFuc2Zvcm1PcmlnaW4iLCJzdmdPcmlnaW4iLCJzY2FsZSIsInRyYW5zZm9ybVBlcnNwZWN0aXZlIiwiZGlyZWN0aW9uYWxSb3RhdGlvbiIsInNob3J0Um90YXRpb24iLCJyb3RhdGlvbloiLCJzaG9ydFJvdGF0aW9uWCIsInNob3J0Um90YXRpb25ZIiwiX3RyYW5zZm9ybVR5cGUiLCJlYTEiLCJlczIiLCJiczIiLCJicyIsImVzIiwiZW4iLCJlc2Z4IiwiYnNmeCIsInJlbCIsImhuIiwidm4iLCJlbSIsInBjdCIsImJwIiwiYmFja2dyb3VuZFBvc2l0aW9uWCIsImJhY2tncm91bmRQb3NpdGlvblkiLCJjbGlwVG9wIiwiY2xpcFJpZ2h0IiwiY2xpcEJvdHRvbSIsImNsaXBMZWZ0IiwiYnciLCJfc2V0SUVPcGFjaXR5UmF0aW8iLCJza2lwIiwieG4xIiwiaXNBdXRvQWxwaGEiLCJ6b29tIiwicmVtb3ZlUHJvcGVydHkiLCJfc2V0Q2xhc3NOYW1lUmF0aW8iLCJfZ3NDbGFzc1BUIiwiZGlmRGF0YSIsImNucHQiLCJjbnB0TG9va3VwIiwiX2NsYXNzTmFtZVBUIiwiX3NldENsZWFyUHJvcHNSYXRpbyIsImNsZWFyVHJhbnNmb3JtIiwidHJhbnNmb3JtUGFyc2UiLCJfdmFycyIsInpJbmRleCIsInRwdCIsInRocmVlRCIsIl9hZGRMYXp5U2V0IiwiY2xhc3NOYW1lIiwiV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IiwiX2xpbmtDU1NQIiwic3AiLCJpc1N0ciIsInN0cmljdFVuaXRzIiwieHMyIiwieG4yIiwieHMzIiwieG4zIiwieHM0IiwieG40IiwieHM1IiwibGF6eVNldCIsImF1dG9BbHBoYSIsImFscGhhIiwidmlzaWJpbGl0eSIsIl9nZXRDaGlsZFN0eWxlcyIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsImNhc2NhZGVUbyIsInJlc3VsdHMiLCJSb3VuZFByb3BzUGx1Z2luIiwiX3JvdW5kTGlua2VkTGlzdCIsInJwIiwicm91bmRQcm9wcyIsInJwdCIsIl9hZGQiLCJmaW5hbHMiLCJ1c2VSYWRpYW5zIiwiU3RlcHBlZEVhc2UiLCJSb3VnaEVhc2UiLCJfY3JlYXRlRWxhc3RpYyIsIl8yUEkiLCJfSEFMRl9QSSIsIl9jcmVhdGUiLCJDIiwiX3dyYXAiLCJFYXNlT3V0IiwiRWFzZUluIiwiRWFzZUluT3V0IiwiYWxpYXNlcyIsImVhc2VPdXQiLCJFYXNlUG9pbnQiLCJnYXAiLCJfY3JlYXRlQmFjayIsIm92ZXJzaG9vdCIsIl9wMSIsIl9wMiIsIkJhY2siLCJTbG93TW8iLCJsaW5lYXJSYXRpbyIsInlveW9Nb2RlIiwiX3AiLCJfcDMiLCJidW1wIiwicG50IiwidGFwZXIiLCJwb2ludHMiLCJyYW5kb21pemUiLCJjbGFtcCIsInRlbXBsYXRlIiwic3RyZW5ndGgiLCJyYW5kb20iLCJpbnZlcnQiLCJkZWYiLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJhc2luIiwiX3N2Z1BhdGhFeHAiLCJfc2NpZW50aWZpYyIsIl9uZWVkc1BhcnNpbmdFeHAiLCJfYmV6aWVyRXJyb3IiLCJfYmV6aWVyVG9Qb2ludHMiLCJ4MyIsInkzIiwieDQiLCJ5NCIsIngxMiIsInkxMiIsIngyMyIsInkyMyIsIngzNCIsInkzNCIsIngxMjMiLCJ5MTIzIiwieDIzNCIsInkyMzQiLCJ4MTIzNCIsInkxMjM0IiwiZDIiLCJkMyIsIl9wYXRoRGF0YVRvQmV6aWVyIiwiY29tbWFuZCIsInNlZ21lbnQiLCJzdGFydFgiLCJzdGFydFkiLCJwcmV2Q29tbWFuZCIsImRpZlgiLCJkaWZZIiwicGF0aCIsInJlbGF0aXZlWCIsInJlbGF0aXZlWSIsImVsZW1lbnRzIiwiY2xvc2VkIiwiX2ZpbmRNaW5pbXVtIiwiX25vcm1hbGl6ZSIsIm9yaWdpblkiLCJfZ2V0UmF0aW8iLCJwb2ludCIsIm54IiwiY3giLCJjeSIsIkN1c3RvbUVhc2UiLCJzZXREYXRhIiwiYTEiLCJhMiIsInByZXZQb2ludCIsInByZWNpc2lvbiIsImNsb3Nlc3QiLCJmYXN0IiwicmF3QmV6aWVyIiwiZ2V0U1ZHRGF0YSIsImJlemllclRvUG9pbnRzIiwic2xvcGUiLCJwcmV2WCIsInByZXZZIiwicXVlcnlTZWxlY3RvciIsImdldEdsb2JhbCIsIlZlbG9jaXR5VHJhY2tlciIsIl9jc3NQcm94eSIsIl9jc3NWYXJzIiwiX2xhc3RWYWx1ZSIsIlRocm93UHJvcHNQbHVnaW4iLCJfbWF4IiwiX21pbiIsIl9yZWNvcmRFbmRNb2RlIiwiX3RyYW5zZm9ybXMiLCJfZ2V0Q2xvc2VzdCIsImFic0RpZiIsIl9wYXJzZUVuZCIsImN1clByb3AiLCJhZGp1c3RlZEVuZCIsInVuaXRGYWN0b3IiLCJfZXh0ZW5kIiwiZXh0cmFzIiwiZXhjbHVkZSIsIl9jYWxjdWxhdGVDaGFuZ2UiLCJjYWxjdWxhdGVDaGFuZ2UiLCJ2ZWxvY2l0eSIsImNoZWNrcG9pbnQiLCJfY2FsY3VsYXRlRHVyYXRpb24iLCJjYWxjdWxhdGVEdXJhdGlvbiIsIl9jYWxjdWxhdGVUd2VlbkR1cmF0aW9uIiwiY2FsY3VsYXRlVHdlZW5EdXJhdGlvbiIsIm1heER1cmF0aW9uIiwibWluRHVyYXRpb24iLCJvdmVyc2hvb3RUb2xlcmFuY2UiLCJyZWNvcmRFbmQiLCJjdXJEdXJhdGlvbiIsImN1clZlbG9jaXR5IiwiY3VyUmVzaXN0YW5jZSIsImN1clZhbCIsImN1ckNsaXBwZWREdXJhdGlvbiIsInRyYWNrZXIiLCJjbGlwcGVkRHVyYXRpb24iLCJ0aHJvd1Byb3BzVmFycyIsInRocm93UHJvcHMiLCJyZXNpc3RhbmNlIiwiZGVmYXVsdFJlc2lzdGFuY2UiLCJnZXRCeVRhcmdldCIsImlzVHJhY2tpbmdQcm9wIiwiZ2V0VmVsb2NpdHkiLCJkZWZhdWx0VW5pdEZhY3RvcnMiLCJ0cmFjayIsInVudHJhY2siLCJpc1RyYWNraW5nIiwidnQiLCJOYU4iLCJoYXNSZXNpc3RhbmNlIiwidmVsb2NpdGllcyIsInJlcyIsInByZXZlbnRPdmVyc2hvb3QiLCJjaGFuZ2UxIiwiY2hhbmdlMiIsImMxIiwiYzIiLCJjcCIsIl90aW1lMSIsIl90aW1lMiIsIl9lbXB0eSIsIlZlbG9jaXR5UHJvcCIsInYxIiwidjIiLCJfdXBkYXRlIiwidnAiLCJfZmlyc3RWUCIsIl9sb29rdXAiLCJlbGVtIiwiYWRkUHJvcCIsIl9hbHRQcm9wIiwicmVtb3ZlUHJvcCIsInJvdGF0aW9uQ2FwIiwicHJlIiwiX2lzTXVsdGlUb3VjaGluZyIsIl9zdmdCb3JkZXJGYWN0b3IiLCJfc3ZnQm9yZGVyU2NhbGVzIiwiX3N2Z1Njcm9sbE9mZnNldCIsIl9oYXNCb3JkZXJCdWciLCJfaGFzUmVwYXJlbnRCdWciLCJfYWRkUGFkZGluZ0JSIiwiX3RlbXBWYXJzWFkiLCJfdGVtcFZhcnNYIiwiX3RlbXBWYXJzWSIsIl90ZW1wVmFyc1JvdGF0aW9uIiwiX3RlbXBFdmVudCIsIl9lbXB0eUFycmF5IiwiX2lzT2xkSUUiLCJfcGxhY2Vob2xkZXJEaXYiLCJfcmVuZGVyUXVldWUiLCJfbG9va3VwQ291bnQiLCJfY2xpY2thYmxlVGFnRXhwIiwiX2RyYWdDb3VudCIsIl9pc0FuZHJvaWQiLCJfbGFzdERyYWdUaW1lIiwiX3RlbXAxIiwiX3dpbmRvd1Byb3h5IiwiX3JlbmRlclF1ZXVlVGljayIsIl9hZGRUb1JlbmRlclF1ZXVlIiwiX3JlbW92ZUZyb21SZW5kZXJRdWV1ZSIsIl9yZW5kZXJRdWV1ZVRpbWVvdXQiLCJfZ2V0RG9jU2Nyb2xsVG9wIiwicGFnZVlPZmZzZXQiLCJfZ2V0RG9jU2Nyb2xsTGVmdCIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsIl9hZGRTY3JvbGxMaXN0ZW5lciIsIl9hZGRMaXN0ZW5lciIsIl9pc1Jvb3QiLCJfcmVtb3ZlU2Nyb2xsTGlzdGVuZXIiLCJfcmVtb3ZlTGlzdGVuZXIiLCJfZ2V0TWF4U2Nyb2xsIiwiYXhpcyIsInNjcm9sbCIsImNsaWVudCIsIl9yZWNvcmRNYXhTY3JvbGxzIiwiaXNSb290IiwiX2dzTWF4U2Nyb2xsWCIsIl9nc01heFNjcm9sbFkiLCJfZ3NTY3JvbGxYIiwiX2dzU2Nyb2xsWSIsIl9wb3B1bGF0ZUlFRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImV2ZW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJyZXR1cm5WYWx1ZSIsIl91bndyYXBFbGVtZW50IiwiX2NoZWNrUHJlZml4IiwiY2FwcGVkIiwiX3NldFN0eWxlIiwia2VlcFVuaXRzIiwiX2Rpc3BhdGNoRXZlbnQiLCJpbnN0YW5jZSIsImNhbGxiYWNrTmFtZSIsImxpc3RlbmVycyIsInBvaW50ZXJFdmVudCIsIl9nZXRCb3VuZHMiLCJjb250ZXh0IiwiX2dldEVsZW1lbnRCb3VuZHMiLCJfZ2V0T2Zmc2V0VHJhbnNmb3JtT3JpZ2luIiwibWluWCIsIm1pblJvdGF0aW9uIiwibWluWSIsIm1heFgiLCJtYXhSb3RhdGlvbiIsIm1heFkiLCJfc2V0RW52aXJvbm1lbnRWYXJpYWJsZXMiLCJlMSIsIm9sZFZhbHVlIiwiZGl2Iiwid3JhcHBlciIsIm9mZnNldFBhcmVudCIsIm9mZnNldFRvcCIsImJvcmRlciIsImJveFNpemluZyIsImNyZWF0ZVNWR1BvaW50IiwibWF0cml4VHJhbnNmb3JtIiwiZ2V0U2NyZWVuQ1RNIiwiX3BvaW50MSIsIl9wb2ludDIiLCJfaXNJRTEwb3JCZWxvdyIsIl90ZW1wVHJhbnNmb3JtcyIsIl90ZW1wRWxlbWVudHMiLCJfZ2V0U1ZHT2Zmc2V0cyIsIm9mZnNldExlZnQiLCJEcmFnZ2FibGUiLCJjYWNoZVNWR0RhdGEiLCJfZENhY2hlIiwibGFzdFVwZGF0ZSIsImVSZWN0IiwicGFyZW50UmVjdCIsInBvaW50MSIsInBvaW50MiIsImJvcmRlcldpZHRoIiwiYm9yZGVySGVpZ2h0IiwiY3VyRWxlbWVudCIsIl9jYWNoZSIsImlzU1ZHUm9vdCIsImJvcmRlckJveCIsImJvcmRlckxlZnRXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiY3VyU1ZHIiwiY29tcHV0ZWRTdHlsZSIsIl9nZXRPZmZzZXQyRE1hdHJpeCIsIm9mZnNldE9yaWdpbiIsInBhcmVudE9mZnNldE9yaWdpbiIsInplcm9PcmlnaW4iLCJvZmZzZXRzIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJib3JkZXJUb3AiLCJib3JkZXJMZWZ0IiwiYm9yZGVyVHJhbnNsYXRlWCIsImJvcmRlclRyYW5zbGF0ZVkiLCJwYXJlbnRDYWNoZSIsInBhcmVudE9mZnNldFBhcmVudCIsIl9nZXRDb25jYXRlbmF0ZWRNYXRyaXgiLCJvcmlnaW5PZmZzZXQiLCJwYXJlbnRPcmlnaW5PZmZzZXQiLCJfbG9jYWxUb0dsb2JhbCIsImZyb21Ub3BMZWZ0IiwiX2xvY2FsaXplUG9pbnQiLCJsb2NhbFRvR2xvYmFsIiwiZ2xvYmFsVG9Mb2NhbCIsIm9yaWdpbiIsIm1Mb2NhbFRvR2xvYmFsIiwibUdsb2JhbFRvTG9jYWwiLCJwNCIsImJib3giLCJ2aWV3Qm94Iiwidmlld0JveFgiLCJ2aWV3Qm94WSIsImNvbXB1dGVkRGltZW5zaW9ucyIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIl9pc0FycmF5TGlrZSIsIl9mbGF0dGVuQXJyYXkiLCJfaXNUb3VjaERldmljZSIsIl90b3VjaEV2ZW50TG9va3VwIiwic3RhbmRhcmQiLCJjb252ZXJ0ZWQiLCJvbnBvaW50ZXJkb3duIiwib25tc3BvaW50ZXJkb3duIiwiY2FwdHVyZSIsImF0dGFjaEV2ZW50IiwiZGV0YWNoRXZlbnQiLCJfaGFzVG91Y2hJRCIsIklEIiwiaWRlbnRpZmllciIsIl9vbk11bHRpVG91Y2hEb2N1bWVudEVuZCIsInRvdWNoZXMiLCJfb25NdWx0aVRvdWNoRG9jdW1lbnQiLCJfcGFyc2VUaHJvd1Byb3BzIiwiZHJhZ2dhYmxlIiwic25hcCIsImZhY3RvciIsImZvcmNlWmVyb1ZlbG9jaXR5IiwiX2lzQ2xpY2thYmxlIiwib25jbGljayIsIl9zZXRTZWxlY3RhYmxlIiwic2VsZWN0YWJsZSIsIm9uZHJhZ3N0YXJ0Iiwib25zZWxlY3RzdGFydCIsIl9hZGRQYWRkaW5nTGVmdCIsImNoaWxkU3R5bGUiLCJpbm5lckhUTUwiLCJzY3JvbGxIZWlnaHQiLCJwYWRkaW5nUmlnaHQiLCJzY3JvbGxXaWR0aCIsIlNjcm9sbFByb3h5IiwiZWxlbWVudFdpZHRoIiwiZWxlbWVudEhlaWdodCIsImNvbnRlbnRIZWlnaHQiLCJuZXh0Tm9kZSIsInRyYW5zZm9ybVN0YXJ0IiwidHJhbnNmb3JtRW5kIiwiY29udGVudCIsImZpcnN0Q2hpbGQiLCJwcmV2VG9wIiwicHJldkxlZnQiLCJleHRyYVBhZFJpZ2h0IiwibWF4TGVmdCIsIm1heFRvcCIsIm9sZE9mZnNldCIsIm9uS2lsbCIsIl9zdXNwZW5kVHJhbnNmb3JtcyIsIm1heFNjcm9sbFRvcCIsIm1heFNjcm9sbExlZnQiLCJkaXNhYmxlIiwibmV4dFNpYmxpbmciLCJlbmFibGUiLCJjYWxpYnJhdGUiLCJ3aWR0aE1hdGNoZXMiLCJvdmVyZmxvdyIsInZlcnRpY2FsQWxpZ24iLCJwYWRkaW5nQm90dG9tIiwiZHJhZ1Jlc2lzdGFuY2UiLCJlZGdlUmVzaXN0YW5jZSIsImxvY2tBeGlzIiwiYXV0b1Njcm9sbCIsImxvY2tlZEF4aXMiLCJhbGxvd0V2ZW50RGVmYXVsdCIsInNjcm9sbFByb3h5Iiwic3RhcnRQb2ludGVyWCIsInN0YXJ0UG9pbnRlclkiLCJzdGFydEVsZW1lbnRYIiwic3RhcnRFbGVtZW50WSIsImhhc0JvdW5kcyIsImhhc0RyYWdDYWxsYmFjayIsInRlbXBWYXJzIiwiY3NzVmFycyIsInRvdWNoIiwidG91Y2hJRCIsInJvdGF0aW9uT3JpZ2luIiwiZGlydHkiLCJvbGQiLCJzbmFwWCIsInNuYXBZIiwiaXNDbGlja2luZyIsInRvdWNoRXZlbnRUYXJnZXQiLCJpbnRlcnJ1cHRlZCIsInN0YXJ0U2Nyb2xsVG9wIiwic3RhcnRTY3JvbGxMZWZ0IiwiYXBwbHlPYmoiLCJhbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nIiwidG91Y2hEcmFnQXhpcyIsImlzRGlzcGF0Y2hpbmciLCJjbGlja0Rpc3BhdGNoIiwidHJ1c3RlZENsaWNrRGlzcGF0Y2giLCJ4eU1vZGUiLCJyb3RhdGlvbk1vZGUiLCJ4UHJvcCIsInlQcm9wIiwiYWxsb3dYIiwiYWxsb3dZIiwibWluaW11bU1vdmVtZW50Iiwic2VsZiIsInRyaWdnZXJzIiwidHJpZ2dlciIsImhhbmRsZSIsImRyYWdFbmRUaW1lIiwiY2hlY2tBdXRvU2Nyb2xsQm91bmRzIiwiaXNDbGlja2FibGUiLCJjbGlja2FibGVUZXN0IiwiY2xpY2tUaW1lIiwiaXNEcmFnZ2luZyIsInBvaW50ZXJYIiwicG9pbnRlclkiLCJjaGFuZ2VYIiwiY2hhbmdlWSIsImF1dG9TY3JvbGxGYWN0b3IiLCJzY3JvbGxUbyIsInNldFBvaW50ZXJQb3NpdGlvbiIsInN5bmNYWSIsInNraXBPblVwZGF0ZSIsInNraXBTbmFwIiwic25hcHBlZFZhbHVlIiwiaXNUaHJvd2luZyIsImNhbGN1bGF0ZUJvdW5kcyIsImJvdW5kcyIsInRhcmdldEJvdW5kcyIsInNuYXBJc1JhdyIsImxpdmVTbmFwIiwiYnVpbGRTbmFwRnVuYyIsIm9uVGhyb3dDb21wbGV0ZSIsIm9uVGhyb3dPdmVyd3JpdGUiLCJhbmltYXRlIiwidGhyb3dSZXNpc3RhbmNlIiwiUG93ZXIzIiwiZmFzdE1vZGUiLCJlbmRYIiwiZW5kWSIsImVuZFJvdGF0aW9uIiwiYXBwbHlCb3VuZHMiLCJ1cGRhdGVNYXRyaXgiLCJzaGlmdFN0YXJ0IiwiaXNQcmVzc2VkIiwicmVjb3JkU3RhcnRQb3NpdGlvbnMiLCJlZGdlVG9sZXJhbmNlIiwicmVtb3ZlUGxhY2Vob2xkZXIiLCJvblByZXNzIiwiY3VycmVudFRhcmdldCIsIm9uUmVsZWFzZSIsIm9uTW92ZSIsImRyYWdDbGlja2FibGVzIiwicHJldmVudE1hbmlwdWxhdGlvbiIsImNoYW5nZWRUb3VjaGVzIiwicG9pbnRlcklkIiwiekluZGV4Qm9vc3QiLCJvbkRyYWciLCJkcmFnIiwiY3Vyc29yIiwib3JpZ2luYWxFdmVudCIsImxvY2tBeGlzT25Ub3VjaFNjcm9sbCIsIm9uTG9ja0F4aXMiLCJjYW5jZWxhYmxlIiwieENoYW5nZSIsInlDaGFuZ2UiLCJkcmFnVG9sZXJhbmNlIiwic3ludGhldGljRXZlbnQiLCJldmVudFRhcmdldCIsInN5bnRoZXRpY0NsaWNrIiwid2FzRHJhZ2dpbmciLCJwbGFjZWhvbGRlckRlbGF5ZWRDYWxsIiwic3JjRWxlbWVudCIsImNsaWNrIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsInNjcmVlblgiLCJzY3JlZW5ZIiwidXBkYXRlU2Nyb2xsIiwiZGVsdGFYIiwiZGVsdGFZIiwib25DbGljayIsInJlY2VudGx5Q2xpY2tlZCIsInJlY2VudGx5RHJhZ2dlZCIsImFscmVhZHlEaXNwYXRjaGVkIiwiaXNNb2Rlcm4iLCJhbHJlYWR5RGlzcGF0Y2hlZFRydXN0ZWQiLCJ0cnVzdGVkIiwiaXNUcnVzdGVkIiwic3VwcHJlc3NDbGlja09uRHJhZyIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImRldGFpbCIsInN0YXJ0RHJhZyIsImVuZERyYWciLCJ0aW1lU2luY2VEcmFnIiwiaGl0VGVzdCIsImdldERpcmVjdGlvbiIsImRpYWdvbmFsVGhyZXNob2xkIiwiZGlyZWN0aW9uIiwiX3BhcnNlUmVjdCIsIm5ld0JvdW5kcyIsInVwZGF0ZSIsInN0aWNreSIsImlnbm9yZUV4dGVybmFsQ2hhbmdlcyIsIl9nc0RyYWdJRCIsImRyYWdnaW5nIiwib3ZlcmZsb3dZIiwib3ZlcmZsb3dYIiwiX3RlbXBSZWN0IiwiX29sZElFUmVjdCIsIm9iajEiLCJvYmoyIiwiYXJlYSIsImlzUmF0aW8iLCJpc091dHNpZGUiLCJxIiwiYXBwbGUiLCJwaG9uZSIsImlwb2QiLCJ0YWJsZXQiLCJkZXZpY2UiLCJhbWF6b24iLCJhbmRyb2lkIiwid2luZG93cyIsIm90aGVyIiwiYmxhY2tiZXJyeSIsImJsYWNrYmVycnkxMCIsIm9wZXJhIiwiZmlyZWZveCIsInNldmVuX2luY2giLCJhbnkiLCJDbGFzcyIsImlzTW9iaWxlIiwidGV4dCIsImhlYWQiLCJpc1dpbmRvdyIsIkQiLCJpc0Z1bmN0aW9uIiwiZ3JlcCIsIkoiLCJMIiwiSyIsIk0iLCJOIiwiTyIsInByb21pc2UiLCJkb25lIiwiZmFpbCIsInRoZW4iLCJSIiwicmVhZHkiLCJVIiwiZXhwYW5kbyIsInVpZCIsIloiLCJYIiwiSlNPTiIsIlkiLCJXIiwiY3NzTnVtYmVyIiwiYWEiLCJ1bml0IiwiZ2EiLCJvd25lckRvY3VtZW50IiwiZmEiLCJoYSIsIlYiLCJtYSIsIm1lcmdlIiwicGEiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwib2EiLCJqYSIsImxhIiwiX2RlZmF1bHQiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwidGV4dENvbnRlbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImluQXJyYXkiLCJjb250YWlucyIsImthIiwidWEiLCJ2YSIsIndhIiwiYWN0aXZlRWxlbWVudCIsInhhIiwib2ZmIiwiZ3VpZCIsIkRhIiwiRWEiLCJGYSIsIkJhIiwiR2EiLCJoYXNEYXRhIiwiYWNjZXNzIiwiZXh0ZW5kIiwiSGEiLCJpYSIsImNoZWNrZWQiLCJJYSIsImNoZWNrQ2xvbmUiLCJBYSIsImVxIiwiaHRtbCIsImNsb25lIiwiX2V2YWxVcmwiLCJDYSIsIkphIiwiY2xlYW5EYXRhIiwiTmEiLCJNYSIsInBpeGVsTWFyZ2luUmlnaHQiLCJMYSIsIkthIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsIk9hIiwiVWEiLCJUYSIsIlNhIiwiVmEiLCJXYSIsIlhhIiwiZ2V0Q2xpZW50UmVjdHMiLCJib3hTaXppbmdSZWxpYWJsZSIsImFiIiwiYmIiLCJpYiIsImViIiwiamIiLCJnZXRQcm90b3R5cGVPZiIsImhhc093blByb3BlcnR5IiwiZm4iLCJ0b0FycmF5IiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsImlzUGxhaW5PYmplY3QiLCJpc1JlYWR5IiwiZXJyb3IiLCJub29wIiwiaXNOdW1lcmljIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJjYW1lbENhc2UiLCJ0cmltIiwibWFrZUFycmF5Iiwic3VwcG9ydCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiRyIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJBIiwic2EiLCJxYSIsIlAiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwiYXR0ckhhbmRsZSIsInNvdXJjZUluZGV4IiwiaXNEaXNhYmxlZCIsInJhIiwiZGlyIiwidW5pcXVlSUQiLCJJIiwieWEiLCJyZWxhdGl2ZSIsIm1hdGNoZXMiLCJ6YSIsIlRBRyIsIkUiLCJ1bmlxdWVTb3J0IiwiQiIsIkYiLCJIIiwiUSIsIlMiLCJUIiwiQ0xBU1MiLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJib29sIiwibmVlZHNDb250ZXh0IiwiXyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJpc1hNTCIsInNldERvY3VtZW50IiwiY3JlYXRlQ29tbWVudCIsImdldEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsImdldEF0dHJpYnV0ZU5vZGUiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwic29ydERldGFjaGVkIiwiYXR0ciIsInNwZWNpZmllZCIsImVzY2FwZSIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwiZ2V0VGV4dCIsIm5vZGVWYWx1ZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsIj4iLCIgIiwiKyIsIn4iLCJwcmVGaWx0ZXIiLCJwc2V1ZG9zIiwic2V0RmlsdGVycyIsIm5vdCIsImhhcyIsImlubmVyVGV4dCIsImxhbmciLCJsb2NhdGlvbiIsImhhc2giLCJmb2N1cyIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiZW1wdHkiLCJpbnB1dCIsImJ1dHRvbiIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJwYXNzd29yZCIsImltYWdlIiwic3VibWl0IiwicmVzZXQiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJleHByIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsImlzIiwicGFyc2VIVE1MIiwiY29udGVudHMiLCJwcmV2QWxsIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiQ2FsbGJhY2tzIiwib25jZSIsInN0b3BPbkZhbHNlIiwibWVtb3J5IiwibG9jayIsImxvY2tlZCIsImZpcmVXaXRoIiwiZmlyZSIsImZpcmVkIiwiRGVmZXJyZWQiLCJzdGF0ZSIsImFsd2F5cyIsImNhdGNoIiwicGlwZSIsIm5vdGlmeSIsInJlc29sdmUiLCJyZWplY3QiLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJ3aGVuIiwid2FybiIsIm1lc3NhZ2UiLCJzdGFjayIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlXYWl0IiwiaG9sZFJlYWR5IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsInF1ZXVlIiwiZGVxdWV1ZSIsIl9xdWV1ZUhvb2tzIiwiY2xlYXJRdWV1ZSIsInNvdXJjZSIsInNob3ciLCJoaWRlIiwidG9nZ2xlIiwib3B0aW9uIiwidGhlYWQiLCJjb2wiLCJ0ZCIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiY2xvbmVOb2RlIiwibm9DbG9uZUNoZWNrZWQiLCJoYW5kbGVyIiwidHJpZ2dlcmVkIiwic3BlY2lhbCIsImRlbGVnYXRlVHlwZSIsImJpbmRUeXBlIiwib3JpZ1R5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImhhbmRsZXJzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJoYW5kbGVPYmoiLCJzdG9wUHJvcGFnYXRpb24iLCJwb3N0RGlzcGF0Y2giLCJFdmVudCIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImJsdXIiLCJiZWZvcmV1bmxvYWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImN0cmxLZXkiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXIiLCJjaGFyQ29kZSIsImtleSIsImtleUNvZGUiLCJidXR0b25zIiwicG9pbnRlclR5cGUiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50Iiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9uZSIsImRldGFjaCIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9wZW5lciIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsIlBhIiwiUWEiLCJSYSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzSG9va3MiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImNvbHVtbkNvdW50IiwiZmlsbE9wYWNpdHkiLCJmbGV4R3JvdyIsImZsZXhTaHJpbmsiLCJvcmRlciIsIm9ycGhhbnMiLCJ3aWRvd3MiLCJjc3NQcm9wcyIsImZsb2F0IiwiaXNGaW5pdGUiLCJleHBhbmQiLCJmeCIsInNwZWVkcyIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJZYSIsIlphIiwicmVtb3ZlQXR0ciIsImF0dHJIb29rcyIsIiRhIiwiX2EiLCJwcm9wRml4IiwicHJvcEhvb2tzIiwiZm9yIiwiY2xhc3MiLCJ0b2dnbGVDbGFzcyIsImNiIiwidmFsSG9va3MiLCJkYiIsImlzVHJpZ2dlciIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJob3ZlciIsImZvY3VzaW4iLCJmYiIsImdiIiwiaGIiLCJwYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwiaGlkZGVuIiwidmlzaWJsZSIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwic2V0T2Zmc2V0IiwidXNpbmciLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0IiwiSGVpZ2h0IiwiV2lkdGgiLCIiLCJrYiIsImxiIiwibm9Db25mbGljdCIsImZhY3RvcnkiLCJyZWdpc3RlcmVkSW5Nb2R1bGVMb2FkZXIiLCJPbGRDb29raWVzIiwiQ29va2llcyIsImFwaSIsImNvbnZlcnRlciIsImV4cGlyZXMiLCJzZXRNaWxsaXNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJzdHJpbmdpZnkiLCJ3cml0ZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImNvb2tpZSIsInRvVVRDU3RyaW5nIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llcyIsInJkZWNvZGUiLCJwYXJ0cyIsInJlYWQiLCJqc29uIiwiZ2V0SlNPTiIsIndpdGhDb252ZXJ0ZXIiLCJjaGVja0VtcHR5SW5wdXQiLCJhbmltSGVhZGVyIiwiYW5pbUJ0biIsImFuaW1NYWluU2xpZGVyIiwidGhlbWVDb2xvcnMiLCJzZWFyY2hJbnB1dCIsImZvcm1Db250YWN0IiwiaW5pdFZpZGVvIiwiYW5pbVNsaWRlciIsImFuaW1Ib29wcyIsInNldFBvc0NpcmNsZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsImdldEVsdFBvc09uQ292ZXIiLCJwb3NDaXJjbGUiLCJjaXJjbGUiLCJjbGVhclNsaWRlcnMiLCJjbGVhclByb3BzIiwiYWN0dWFsaXplU2xpZGVyIiwic2xpZGVyVG9BY3R1YWxpemUiLCJzbGlkZXJUaGlzIiwic2xpZGVyVGFyZ2V0Iiwic2xpZGVyQ2xvbmVkVGFyZ2V0Iiwib3JpZ2luYWxTbGlkZXJUYXJnZXQiLCJzbGlkZXNUYXJnZXQiLCJ3aWR0aFNsaWRlc1RhcmdldCIsIm5iU2xpZGVzVGFyZ2V0Iiwid2lkdGhTbGlkZXJUYXJnZXQiLCJnYXBMZWZ0IiwiZGVzYWN0aXZhdGVTbGlkZSIsImFjdGl2YXRlU2xpZGUiLCJjZW50ZXJTbGlkZXJUYXJnZXQiLCJlcnJvck1hcmdpbiIsIm1heE1hcmdpbiIsIm1pbk1hcmdpbiIsImhhbGZTbGlkZSIsImNlbnRlclNsaWRlIiwiZmxvb3IiLCJhY3RpdmF0ZVNsaWRlSW5pdGlhbCIsImNvbnRhaW5lclMiLCJzbGlkZXNTIiwic2xpZGVzV2lkdGhTIiwiY2VudGVyU2xpZGVyIiwidXBkYXRlU2xpZGVyIiwiaW5pdFNsaWRlciIsImluZGV4U2xpZGVyIiwiaGFsZlJpZ2h0IiwiaGFsZkxlZnQiLCJ3cmFwcGVyU2xpZGVycyIsInNsaWRlcnMiLCJzbGlkZXIiLCJzbGlkZXMiLCJuYlNsaWRlcyIsInNsaWRlV2lkdGgiLCJoYWxmU2xpZGVzIiwid2lkdGhTbGlkZXIiLCJtaWRkbGVTbGlkZXIiLCJjZWlsIiwic2xpZGVyQ2xvbmVkIiwib3JpZ2luYWxTbGlkZXIiLCJsZWZ0U2xpZGVzU3RhcnQiLCJuYXRpdmVUb3VjaFNjcm9sbGluZ1ZhciIsIkRyYWdnYWJsZUVsZW1zIiwib25UaHJvd1VwZGF0ZSIsIm9uRHJhZ1N0YXJ0IiwiY29udGFpbmVyU2xpZGVycyIsInNtYWxsV2luZG93V2lkdGgiLCJibG9jVG9wIiwibmV3UG9zQ2lyY2xlIiwic2V0UG9zQmFzZWxpbmUiLCJuZXdQb3NCYXNlbGluZSIsImJhc2VsaW5lIiwiZ3V0dGVyIiwiYmFzZWxpbmVTZWNvbmQiLCJzZXRTbGlkZXJUaW1lb3V0IiwidGltZU91dCIsInNsaWRlIiwiY3VycmVudFNsaWRlIiwiY3VycmVudFR4dCIsInNldFRoZW1lIiwibmF2IiwiY3VycmVudENvbG9yIiwic3ZnSG9vcCIsImZhdmljb25zIiwiYW5pbVNsaWRlIiwib2xkRGlyIiwibmV3RGlyIiwib2xkU2xpZGUiLCJ0d2VlbkluIiwibmV4dFNsaWRlIiwibmV4dFR4dCIsImxhc3RTbGlkZUluZGV4Iiwic2xpZGVzVHh0IiwiYmxvY1JldmVsIiwib2xkRGlyTmIiLCJQb3dlcjIiLCJzZXRTbGlkZXIiLCJ0aW1lciIsImFyZ3MiXSwibWFwcGluZ3MiOiJDQUFBLFFBQUFBLEdBQUFDLEVBQUFDLEVBQUFDLEdBQUEsUUFBQUMsR0FBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLEdBQUFFLEdBQUEsa0JBQUFDLFVBQUFBLE9BQUEsS0FBQUYsR0FBQUMsRUFBQSxNQUFBQSxHQUFBRixHQUFBLEVBQUEsSUFBQUksRUFBQSxNQUFBQSxHQUFBSixHQUFBLEVBQUEsSUFBQUssR0FBQSxHQUFBQyxPQUFBLHVCQUFBTixFQUFBLElBQUEsTUFBQUssR0FBQUUsS0FBQSxtQkFBQUYsRUFBQSxHQUFBRyxHQUFBWCxFQUFBRyxJQUFBUyxXQUFBYixHQUFBSSxHQUFBLEdBQUFVLEtBQUFGLEVBQUFDLFFBQUEsU0FBQWQsR0FBQSxHQUFBRSxHQUFBRCxFQUFBSSxHQUFBLEdBQUFMLEVBQUEsT0FBQUksR0FBQUYsRUFBQUEsRUFBQUYsSUFBQWEsRUFBQUEsRUFBQUMsUUFBQWQsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxNQUFBRCxHQUFBRyxHQUFBUyxRQUFBLElBQUEsR0FBQUwsR0FBQSxrQkFBQUQsVUFBQUEsUUFBQUgsRUFBQSxFQUFBQSxFQUFBRixFQUFBYSxPQUFBWCxJQUFBRCxFQUFBRCxFQUFBRSxHQUFBLE9BQUFELEtBQUFhLEdBQUEsU0FBQVQsRUFBQVUsRUFBQUosR0NBQSxHQUFBSyxHQUFBWCxFQUFBLHlDQUNBWSxFQUFBWixFQUFBLDJDQUVBVSxHQUFBSixRQUFBLFNBQUFPLEdBR0EsUUFBQUMsR0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxPQUFBRixFQUFBRyxLQUFBLEtBQUFGLEVBQUFELEVBQUFHLEtBQUEsS0FBQUQs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R0FBQUQsRUFDQUMsSUFBQUEsR0FBQUQsRUFBQSxLQUNBQyxFQUFBQSxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLEVBQUFELElBR0FwbEIsRUFBQUksUUFBQSxVQUFBLEdBQUFpbEIsRUFBQSxFQUNBQSxHQUFBQSxFQUFBLFdBQUFELEdBQUFBLEdBQUFDLEVBQUFELEVBQUEsR0FBQUEsRUFDQXBsQixFQUFBSSxRQUFBLFVBQUEsR0FBQWlsQixFQUFBLElBQ0FBLEdBQUFBLEVBQUEsV0FBQUQsR0FBQUEsR0FBQUMsRUFBQUQsRUFBQSxHQUFBQSxJQUdBRSxFQUFBcFAsRUFBQW1QLEdBRUFDLEVBQUFocUIsR0FBQWdxQixHQUFBaHFCLElBQ0FncUIsRUFBQSxHQUVBQSxHQUdBQyxJQUFBQyxNQUFBLEVBQUEsSUFBQSxLQUNBQyxNQUFBLEVBQUEsSUFBQSxHQUNBQyxRQUFBLElBQUEsSUFBQSxLQUNBQyxPQUFBLEVBQUEsRUFBQSxHQUNBQyxRQUFBLElBQUEsRUFBQSxHQUNBQyxNQUFBLEVBQUEsSUFBQSxLQUNBQyxNQUFBLEVBQUEsRUFBQSxLQUNBQyxNQUFBLEVBQUEsRUFBQSxLQUNBQyxPQUFBLElBQUEsSUFBQSxLQUNBQyxTQUFBLElBQUEsRUFBQSxLQUNBQyxPQUFBLElBQUEsSUFBQSxHQUNBQyxRQUFBLElBQUEsSUFBQSxHQUNBQyxRQUFBLElBQUEsSUFBQSxHQUNBQyxNQUFBLElBQUEsSUFBQSxLQUNBQyxRQUFBLElBQUEsRUFBQSxLQUNBQyxPQUFBLEVBQUEsSUFBQSxHQUNBQyxLQUFBLElBQUEsRUFBQSxHQUNBQyxNQUFBLElBQUEsSUFBQSxLQUNBQyxNQUFBLEVBQUEsSUFBQSxLQUNBQyxhQUFBLElBQUEsSUFBQSxJQUFBLElBRUFDLEdBQUEsU0FBQUMsRUFBQWxQLEVBQUFDLEdBRUEsTUFEQWlQLEdBQUFBLEVBQUEsRUFBQUEsRUFBQSxFQUFBQSxFQUFBLEVBQUFBLEVBQUEsRUFBQUEsRUFDQSxLQUFBLEVBQUFBLEVBQUEsRUFBQWxQLEdBQUFDLEVBQUFELEdBQUFrUCxFQUFBLEVBQUFBLEVB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QThuRSxJQUVBLEtBQUEvb0UsR0FBQSxPQUFBLFdBRUFpTyxhQUFBaS9ELEtBRUFsdEUsR0FBQSxRQUFBaXRFLEdBRUExdEUsRUFBQXlDLFVBQUFoQyxHQUFBLFNBQUFrQixFQUFBLFdBQ0FELGlCQUFBMkIsSUFDQSx3UkM3SkF0RCxFQUFBSixRQUFBLFNBQUE2TCxFQUFBaUUsR0FDQSxHQUFBaVIsR0FBQXV1RCxDQUNBLE9BQUEsWUFDQSxHQUFBMzFCLEdBQUE1NEMsS0FBQWtNLEdBQUEsR0FBQUQsTUFBQXVpRSxFQUFBcGdFLFNBQ0E0UixJQUFBOVQsRUFBQThULEVBQUFqUixHQUVBZixhQUFBdWdFLEdBQ0FBLEVBQUFyZ0UsV0FBQSxXQUNBOFIsRUFBQTlULEVBQ0FwQixFQUFBNUMsTUFBQTB3QyxFQUFBNDFCLElBQ0F6L0QsS0FFQWlSLEVBQUE5VCxFQUNBcEIsRUFBQTVDLE1BQUEwd0MsRUFBQTQxQiIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJ2YXIgJCA9IHJlcXVpcmUoJy4vbGlicy9qcXVlcnkvZGlzdC9qcXVlcnkuc2xpbS5taW4uanMnKTtcbnZhciBUd2Vlbk1heCA9IHJlcXVpcmUoJy4vbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvVHdlZW5NYXguanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihib2R5KXtcbiAgICB2YXIgYnRuSSwgcG9zR3JhZGllbnQ7XG5cbiAgICBmdW5jdGlvbiBnZXRQb3NHcmFkaWVudChidG5JLCBidG5Nb3VzZVgsIGJ0bk1vdXNlWSl7XG4gICAgICAgIHJldHVybiBbYnRuSS5kYXRhKCd4JykgLSBidG5Nb3VzZVgsIGJ0bkkuZGF0YSgneScpIC0gYnRuTW91c2VZXTtcbiAgICB9XG5cbiAgICBib2R5Lm9uKCdtb3VzZWVudGVyJywgJy5idG4sICNtZW51LW1haW4gYScsIGZ1bmN0aW9uKGUpe1xuXG4gICAgICAgIGJ0bkkgPSAkKHRoaXMpLmZpbmQoJz4gaScpO1xuICAgICAgICBidG5JLmRhdGEoJ3gnLCBidG5JLnBvc2l0aW9uKCkubGVmdCArIGJ0bkkud2lkdGgoKSAvIDIpLmRhdGEoJ3knLCBidG5JLnBvc2l0aW9uKCkudG9wICsgYnRuSS5oZWlnaHQoKSAvIDIpO1xuICAgICAgICAkKHRoaXMpLmRhdGEoJ3gnLCAkKHRoaXMpLm9mZnNldCgpLmxlZnQpLmRhdGEoJ3knLCAkKHRoaXMpLm9mZnNldCgpLnRvcCk7XG4gICAgICAgIHBvc0dyYWRpZW50ID0gZ2V0UG9zR3JhZGllbnQoYnRuSSwgZS5wYWdlWCAtICQodGhpcykuZGF0YSgneCcpLCBlLnBhZ2VZIC0gJCh0aGlzKS5kYXRhKCd5JykpO1xuICAgICAgICBUd2Vlbk1heC50byhidG5JLCAwLjEsIHt4OiAtIHBvc0dyYWRpZW50WzBdICsgJ3B4JywgeTogLSBwb3NHcmFkaWVudFsxXSArICdweCd9KTtcblxuICAgIH0pLm9uKCdtb3VzZW1vdmUnLCAnLmJ0biwgI21lbnUtbWFpbiBhJywgZnVuY3Rpb24oZSl7XG5cbiAgICAgICAgYnRuSSA9ICQodGhpcykuZmluZCgnPiBpJyk7XG4gICAgICAgIHBvc0dyYWRpZW50ID0gZ2V0UG9zR3JhZGllbnQoYnRuSSwgZS5wYWdlWCAtICQodGhpcykuZGF0YSgneCcpLCBlLnBhZ2VZIC0gJCh0aGlzKS5kYXRhKCd5JykpO1xuICAgICAgICBpZighVHdlZW5NYXguaXNUd2VlbmluZyhidG5JKSl7XG4gICAgICAgICAgICBUd2Vlbk1heC5zZXQoYnRuSSwge3g6IC0gcG9zR3JhZGllbnRbMF0gKyAncHgnLCB5OiAtIHBvc0dyYWRpZW50WzFdICsgJ3B4J30pO1xuICAgICAgICB9XG5cbiAgICB9KS5vbignbW91c2VsZWF2ZScsICcuYnRuLCAjbWVudS1tYWluIGEnLCBmdW5jdGlvbigpe1xuXG4gICAgICAgIFR3ZWVuTWF4LnRvKCQodGhpcykuZmluZCgnPiBpJyksIDAuMywge3g6ICcwcHgnLCB5OiAnMHB4J30pO1xuXG4gICAgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4vbGlicy9qcXVlcnkvZGlzdC9qcXVlcnkuc2xpbS5taW4uanMnKTtcbnZhciBUd2Vlbk1heCA9IHJlcXVpcmUoJy4vbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvVHdlZW5NYXguanMnKTtcblxud2luZG93LnJlcXVlc3RBbmltRnJhbWUgPSByZXF1aXJlKCcuL3JlcXVlc3RBbmltRnJhbWUuanMnKTtcbnZhciB0aHJvdHRsZSA9IHJlcXVpcmUoJy4vdGhyb3R0bGUuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICAgIHZhciB3aW5kb3dXaWR0aCA9ICQod2luZG93KS5vdXRlcldpZHRoKCksIHdpbmRvd0hlaWdodCA9ICQod2luZG93KS5oZWlnaHQoKSwgZG9jSGVpZ2h0ID0gJChkb2N1bWVudCkuaGVpZ2h0KCk7XG4gICAgdmFyIG15U2Nyb2xsID0gJChkb2N1bWVudCkuc2Nyb2xsVG9wKCksIHNjcm9sbFBlcmNlbnQsIHNjcm9sbFByb2dyZXNzO1xuICAgIHZhciBoZWFkZXIgPSAkKCcjaGVhZGVyJyk7XG4gICAgdmFyIGxvZ28gPSAkKCcjbG9nbycpLCBsb2dvTyA9IGxvZ28uZmluZCgnI2xvZ28tbycpLCBsb2dvTzEgPSBsb2dvLmZpbmQoJyNsb2dvLW8xJyk7XG5cbiAgICBmdW5jdGlvbiBzaG93U2Nyb2xsSW5kaWMoKXtcbiAgICAgICAgaGVhZGVyLmFkZENsYXNzKCdvbicpO1xuICAgICAgICBpZighbG9nby5oYXNDbGFzcygnb24nKSl7XG4gICAgICAgICAgICBsb2dvLmFkZENsYXNzKCdvbicpO1xuICAgICAgICAgICAgaWYod2luZG93V2lkdGggPiA1ODApe1xuICAgICAgICAgICAgICAgIFR3ZWVuTWF4LnRvKGxvZ29PLCAwLjMsIHtvcGFjaXR5OiAxfSk7XG4gICAgICAgICAgICAgICAgVHdlZW5NYXguc2V0KGxvZ29PMSwge29wYWNpdHk6IDB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoaWRlU2Nyb2xsSW5kaWMoKXtcbiAgICAgICAgaGVhZGVyLnJlbW92ZUNsYXNzKCdvbicpO1xuICAgICAgICBpZihsb2dvLmhhc0NsYXNzKCdvbicpKXtcbiAgICAgICAgICAgIGxvZ28ucmVtb3ZlQ2xhc3MoJ29uJyk7XG4gICAgICAgICAgICBpZih3aW5kb3dXaWR0aCA+IDU4MCl7XG4gICAgICAgICAgICAgICAgVHdlZW5NYXgudG8obG9nb08sIDAuMywge29wYWNpdHk6IDB9KTtcbiAgICAgICAgICAgICAgICBUd2Vlbk1heC5zZXQobG9nb08xLCB7b3BhY2l0eTogMX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2Nyb2xsSGFuZGxlcigpe1xuICAgICAgICBteVNjcm9sbCA9ICQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpO1xuICAgICAgICBzY3JvbGxQZXJjZW50ID0gKG15U2Nyb2xsLTEwKSAvIChkb2NIZWlnaHQtd2luZG93SGVpZ2h0KTtcbiAgICAgICAgc2Nyb2xsUHJvZ3Jlc3MgPSBzY3JvbGxQZXJjZW50KjIyNy43O1xuXG4gICAgICAgIGlmKG15U2Nyb2xsID4gMTApe1xuICAgICAgICAgICAgc2hvd1Njcm9sbEluZGljKCk7XG4gICAgICAgICAgICBpZih3aW5kb3dXaWR0aCA+IDU4MCl7XG4gICAgICAgICAgICAgICAgVHdlZW5NYXguc2V0KGxvZ29PLCB7eDogc2Nyb2xsUHJvZ3Jlc3MgKyAncHgnLCBmb3JjZTNEOiB0cnVlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgaGlkZVNjcm9sbEluZGljKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNpemVIYW5kbGVyKCl7XG4gICAgICAgIHdpbmRvd1dpZHRoID0gJCh3aW5kb3cpLm91dGVyV2lkdGgoKTtcbiAgICAgICAgd2luZG93SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgICBkb2NIZWlnaHQgPSAkKGRvY3VtZW50KS5oZWlnaHQoKTtcblxuICAgICAgICBUd2Vlbk1heC5zZXQobG9nb08sIHtvcGFjaXR5OiAwfSk7XG4gICAgICAgIFR3ZWVuTWF4LnNldChsb2dvTzEsIHtvcGFjaXR5OiAxfSk7XG4gICAgfVxuXG4gICAgaGVhZGVyLm9uKCdtb3VzZWVudGVyJywgaGlkZVNjcm9sbEluZGljKS5vbignbW91c2VsZWF2ZScsIGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKG15U2Nyb2xsID4gMTApe1xuICAgICAgICAgICAgc2hvd1Njcm9sbEluZGljKCk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLm9uKCdzY3JvbGwnLCB0aHJvdHRsZShmdW5jdGlvbigpe1xuICAgICAgICByZXF1ZXN0QW5pbUZyYW1lKHNjcm9sbEhhbmRsZXIpO1xuICAgIH0sIDEwKSk7XG5cblxuICAgICQod2luZG93KS5vbigncmVzaXplJywgdGhyb3R0bGUoZnVuY3Rpb24oKXtcbiAgICAgICAgcmVxdWVzdEFuaW1GcmFtZShyZXNpemVIYW5kbGVyKTtcbiAgICB9LCA2MCkpO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuL2xpYnMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LnNsaW0ubWluLmpzJyk7XG52YXIgVHdlZW5NYXggPSByZXF1aXJlKCcuL2xpYnMvZ3NhcC9zcmMvdW5jb21wcmVzc2VkL1R3ZWVuTWF4LmpzJyk7XG5cbnZhciB0aHJvdHRsZSA9IHJlcXVpcmUoJy4vdGhyb3R0bGUuanMnKTtcbndpbmRvdy5yZXF1ZXN0QW5pbUZyYW1lID0gcmVxdWlyZSgnLi9yZXF1ZXN0QW5pbUZyYW1lLmpzJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihlbHRzLCBkaXN0YW5jZSwgZGlmZlNwZWVkKXtcbiAgICB2YXIgZWx0LCBlbHRIZWlnaHQsIGVsdFRvcCwgZWx0Qm90dG9tLCBuZXdZO1xuICAgIHZhciBkb2NIZWlnaHQgPSAkKGRvY3VtZW50KS5oZWlnaHQoKSwgd2luZG93SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpLCB3aW5kb3dUb3AsIHdpbmRvd0JvdHRvbTtcbiAgICB2YXIgZ2FwQm90dG9tID0gMCwgZ2FwQm90dG9tID0gMDtcblxuICAgIGZ1bmN0aW9uIGNoZWNrSWZJblZpZXcoKXtcbiAgICAgICAgaWYoIWVsdHMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgd2luZG93VG9wID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgICAgICB3aW5kb3dCb3R0b20gPSB3aW5kb3dUb3AgKyB3aW5kb3dIZWlnaHQ7XG5cbiAgICAgICAgZWx0cy5lYWNoKGZ1bmN0aW9uKGkpe1xuICAgICAgICAgICAgZWx0ID0gJCh0aGlzKTtcbiAgICAgICAgICAgIC8vIGVsdEhlaWdodCA9IGVsdC5kYXRhKCdjaGVjay1oZWlnaHQnKTtcbiAgICAgICAgICAgIGVsdFRvcCA9IGVsdC5kYXRhKCdjaGVjay10b3AnKTtcbiAgICAgICAgICAgIGVsdEJvdHRvbSA9IGVsdC5kYXRhKCdjaGVjay1ib3R0b20nKTtcbiAgICAgICAgICAgIG5ld1kgPSB3aW5kb3dUb3AqZGlzdGFuY2UvKGRvY0hlaWdodC13aW5kb3dIZWlnaHQpIC0gZGlzdGFuY2UvMjtcbiAgICAgICAgICAgIGlmKGRpZmZTcGVlZCl7XG4gICAgICAgICAgICAgICAgbmV3WSA9IG5ld1kqKGkrMikvMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGkpXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhuZXdZKVxuICAgICAgICAgICAgaWYoZWx0Qm90dG9tIC0gZ2FwQm90dG9tID49IHdpbmRvd1RvcCAmJiBlbHRUb3AgKyBnYXBCb3R0b20gPD0gd2luZG93Qm90dG9tKXtcbiAgICAgICAgICAgICAgICAvL2VsdC5yZW1vdmVDbGFzcygnYWJvdmUtdmlldyB1bmRlci12aWV3JykuYWRkQ2xhc3MoJ2luLXZpZXcnKTtcbiAgICAgICAgICAgICAgICBUd2Vlbk1heC5zZXQoZWx0LCB7eTogbmV3WSArICdweCcsIGZvcmNlM0Q6IHRydWV9KTtcbiAgICAgICAgICAgIH0vKmVsc2UgaWYoZWx0Qm90dG9tIC0gZ2FwQm90dG9tIDwgd2luZG93VG9wKXtcbiAgICAgICAgICAgICAgICBlbHQucmVtb3ZlQ2xhc3MoJ3VuZGVyLXZpZXcgaW4tdmlldycpLmFkZENsYXNzKCdhYm92ZS12aWV3Jyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBlbHQucmVtb3ZlQ2xhc3MoJ2Fib3ZlLXZpZXcgaW4tdmlldycpLmFkZENsYXNzKCd1bmRlci12aWV3Jyk7XG4gICAgICAgICAgICB9Ki9cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0RGF0YUVsdHMoKXtcbiAgICAgICAgaWYoIWVsdHMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgZWx0cy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBlbHQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgZWx0SGVpZ2h0ID0gZWx0Lm91dGVySGVpZ2h0KCk7XG4gICAgICAgICAgICBlbHRUb3AgPSBlbHQub2Zmc2V0KCkudG9wO1xuICAgICAgICAgICAgZWx0Qm90dG9tID0gZWx0VG9wICsgZWx0SGVpZ2h0O1xuICAgICAgICAgICAgZWx0LmRhdGEoey8qJ2NoZWNrLWhlaWdodCc6IGVsdEhlaWdodCwgKi8nY2hlY2stdG9wJzogZWx0VG9wLCAnY2hlY2stYm90dG9tJzogZWx0Qm90dG9tfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNldERhdGFFbHRzKCk7XG4gICAgY2hlY2tJZkluVmlldygpO1xuXG4gICAgaWYoZWx0cy5sZW5ndGgpe1xuICAgICAgICBUd2Vlbk1heC50byhlbHRzLCAxLCB7b3BhY2l0eTogMC44fSk7XG4gICAgfVxuXG4gICAgJChkb2N1bWVudCkub24oJ3Njcm9sbCcsIHRocm90dGxlKGZ1bmN0aW9uKCl7XG4gICAgICAgIHJlcXVlc3RBbmltRnJhbWUoY2hlY2tJZkluVmlldyk7XG4gICAgfSwgNDApKTtcblxuICAgICQod2luZG93KS5vbigncmVzaXplJywgdGhyb3R0bGUoZnVuY3Rpb24oKXtcbiAgICAgICAgd2luZG93SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuICAgICAgICBkb2NIZWlnaHQgPSAkKGRvY3VtZW50KS5oZWlnaHQoKTtcblxuICAgICAgICByZXF1ZXN0QW5pbUZyYW1lKHNldERhdGFFbHRzKTtcbiAgICAgICAgcmVxdWVzdEFuaW1GcmFtZShjaGVja0lmSW5WaWV3KTtcbiAgICB9LCA0MCkpO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuL2xpYnMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LnNsaW0ubWluLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29udGFpbmVyLCBpbWdSYXRpbywgaW1nVywgaW1nSCwgZWx0KXtcbiAgICBjb250YWluZXJIID0gY29udGFpbmVyLm91dGVySGVpZ2h0KCk7XG4gICAgY29udGFpbmVyVyA9IGNvbnRhaW5lci53aWR0aCgpO1xuICAgIGNvbnRhaW5lclJhdGlvID0gY29udGFpbmVySCAvIGNvbnRhaW5lclc7XG5cbiAgICBwb3NYID0gZWx0LmRhdGEoJ3gnKTtcbiAgICBwb3NZID0gZWx0LmRhdGEoJ3knKTtcblxuICAgIGlmKGNvbnRhaW5lclJhdGlvID4gaW1nUmF0aW8pe1xuICAgICAgICAvLyBwb3J0cmFpdFxuICAgICAgICBmaW5hbEggPSBjb250YWluZXJIO1xuICAgICAgICBmaW5hbFcgPSBpbWdXKmZpbmFsSCAvIGltZ0g7XG4gICAgICAgIG5ld1ggPSBmaW5hbFcqcG9zWCAvIGltZ1cgLSAoZmluYWxXIC0gY29udGFpbmVyVykvMjtcbiAgICAgICAgbmV3WSA9IGZpbmFsSCpwb3NZIC8gaW1nSDtcbiAgICB9ZWxzZXtcbiAgICAgICAgLy8gcGF5c2FnZVxuICAgICAgICBmaW5hbFcgPSBjb250YWluZXJXO1xuICAgICAgICBmaW5hbEggPSBpbWdIKmZpbmFsVyAvIGltZ1c7XG4gICAgICAgIG5ld1ggPSBmaW5hbFcqcG9zWCAvIGltZ1c7XG4gICAgICAgIG5ld1kgPSBmaW5hbEgqcG9zWSAvIGltZ0ggLSAoZmluYWxIIC0gY29udGFpbmVySCkvMjtcbiAgICB9XG5cbiAgICByYXRpb1NjYWxlID0gZmluYWxIIC8gaW1nSDtcblxuICAgIHJldHVybiBbbmV3WCwgbmV3WSwgcmF0aW9TY2FsZV07XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4vbGlicy9qcXVlcnkvZGlzdC9qcXVlcnkuc2xpbS5taW4uanMnKTtcbnZhciBUd2Vlbk1heCA9IHJlcXVpcmUoJy4vbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvVHdlZW5NYXguanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICAgIHZhciB0YWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSwgZmlyc3RTY3JpcHRUYWcgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0JylbMF07XG4gICAgdmFyIHdyYXBwZXJWaWRlb3MgPSAkKCcud3JhcHBlci12aWRlbycpLCBwbGF5ZXJzID0gW107XG5cbiAgICBnbG9iYWwub25Zb3VUdWJlSWZyYW1lQVBJUmVhZHkgPSBmdW5jdGlvbigpe1xuICAgICAgICBmdW5jdGlvbiBvblBsYXllclJlYWR5KHdyYXBwZXJWaWRlb1BhcmVudCl7XG4gICAgICAgICAgICB3cmFwcGVyVmlkZW9QYXJlbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBUd2Vlbk1heC50bygkKHRoaXMpLmZpbmQoJy5jb3Zlci12aWRlbycpLCAwLjUsIHtvcGFjaXR5OiAwLCBkaXNwbGF5OiAnbm9uZSd9KTtcbiAgICAgICAgICAgICAgICBwbGF5ZXJzWyQodGhpcykuaW5kZXgoJy53cmFwcGVyLXZpZGVvJyldLnBsYXlWaWRlbygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB3cmFwcGVyVmlkZW9zLmVhY2goZnVuY3Rpb24oaSl7XG4gICAgICAgICAgICBwbGF5ZXJzW2ldID0gbmV3IFlULlBsYXllcigkKHRoaXMpLmZpbmQoJ2lmcmFtZScpLmdldCgwKSwge1xuICAgICAgICAgICAgICAgIGV2ZW50czogeyAnb25SZWFkeSc6IG9uUGxheWVyUmVhZHkoJCh0aGlzKSkgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRhZy5zcmMgPSAnaHR0cHM6Ly93d3cueW91dHViZS5jb20vaWZyYW1lX2FwaSc7XG4gICAgZmlyc3RTY3JpcHRUYWcucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGFnLCBmaXJzdFNjcmlwdFRhZyk7XG59XG4iLCIvKiFcbiAqIFZFUlNJT046IDEuMTkuMFxuICogREFURTogMjAxNi0wNy0xNlxuICogVVBEQVRFUyBBTkQgRE9DUyBBVDogaHR0cDovL2dyZWVuc29jay5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxNiwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyB3b3JrIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHA6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgc29mdHdhcmUgYWdyZWVtZW50IHRoYXQgd2FzIGlzc3VlZCB3aXRoIHlvdXIgbWVtYmVyc2hpcC5cbiAqIFxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIG1vZHVsZU5hbWUpIHtcblxuXHRcdFwidXNlIHN0cmljdFwiO1xuXHRcdHZhciBfZXhwb3J0cyA9IHt9LFxuXHRcdFx0X2dsb2JhbHMgPSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHdpbmRvdy5HcmVlblNvY2tHbG9iYWxzIHx8IHdpbmRvdztcblx0XHRpZiAoX2dsb2JhbHMuVHdlZW5MaXRlKSB7XG5cdFx0XHRyZXR1cm47IC8vaW4gY2FzZSB0aGUgY29yZSBzZXQgb2YgY2xhc3NlcyBpcyBhbHJlYWR5IGxvYWRlZCwgZG9uJ3QgaW5zdGFudGlhdGUgdHdpY2UuXG5cdFx0fVxuXHRcdHZhciBfbmFtZXNwYWNlID0gZnVuY3Rpb24obnMpIHtcblx0XHRcdFx0dmFyIGEgPSBucy5zcGxpdChcIi5cIiksXG5cdFx0XHRcdFx0cCA9IF9nbG9iYWxzLCBpO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHBbYVtpXV0gPSBwID0gcFthW2ldXSB8fCB7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcDtcblx0XHRcdH0sXG5cdFx0XHRncyA9IF9uYW1lc3BhY2UoXCJjb20uZ3JlZW5zb2NrXCIpLFxuXHRcdFx0X3RpbnlOdW0gPSAwLjAwMDAwMDAwMDEsXG5cdFx0XHRfc2xpY2UgPSBmdW5jdGlvbihhKSB7IC8vZG9uJ3QgdXNlIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhcmdldCwgMCkgYmVjYXVzZSB0aGF0IGRvZXNuJ3Qgd29yayBpbiBJRTggd2l0aCBhIE5vZGVMaXN0IHRoYXQncyByZXR1cm5lZCBieSBxdWVyeVNlbGVjdG9yQWxsKClcblx0XHRcdFx0dmFyIGIgPSBbXSxcblx0XHRcdFx0XHRsID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSAhPT0gbDsgYi5wdXNoKGFbaSsrXSkpIHt9XG5cdFx0XHRcdHJldHVybiBiO1xuXHRcdFx0fSxcblx0XHRcdF9lbXB0eUZ1bmMgPSBmdW5jdGlvbigpIHt9LFxuXHRcdFx0X2lzQXJyYXkgPSAoZnVuY3Rpb24oKSB7IC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBpZnJhbWUgZW52aXJvbm1lbnRzIHdoZXJlIHRoZSBBcnJheSBnbG9iYWwgaXNuJ3Qgc2hhcmVkLCB0aHVzIGlmIHRoZSBvYmplY3Qgb3JpZ2luYXRlcyBpbiBhIGRpZmZlcmVudCB3aW5kb3cvaWZyYW1lLCBcIihvYmogaW5zdGFuY2VvZiBBcnJheSlcIiB3aWxsIGV2YWx1YXRlIGZhbHNlLiBXZSBhZGRlZCBzb21lIHNwZWVkIG9wdGltaXphdGlvbnMgdG8gYXZvaWQgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCkgdW5sZXNzIGl0J3MgYWJzb2x1dGVseSBuZWNlc3NhcnkgYmVjYXVzZSBpdCdzIFZFUlkgc2xvdyAobGlrZSAyMHggc2xvd2VyKVxuXHRcdFx0XHR2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHRcdFx0XHRcdGFycmF5ID0gdG9TdHJpbmcuY2FsbChbXSk7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbihvYmopIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5IHx8ICh0eXBlb2Yob2JqKSA9PT0gXCJvYmplY3RcIiAmJiAhIW9iai5wdXNoICYmIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gYXJyYXkpKTtcblx0XHRcdFx0fTtcblx0XHRcdH0oKSksXG5cdFx0XHRhLCBpLCBwLCBfdGlja2VyLCBfdGlja2VyQWN0aXZlLFxuXHRcdFx0X2RlZkxvb2t1cCA9IHt9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdFx0ICogRGVmaW5lcyBhIEdyZWVuU29jayBjbGFzcywgb3B0aW9uYWxseSB3aXRoIGFuIGFycmF5IG9mIGRlcGVuZGVuY2llcyB0aGF0IG11c3QgYmUgaW5zdGFudGlhdGVkIGZpcnN0IGFuZCBwYXNzZWQgaW50byB0aGUgZGVmaW5pdGlvbi5cblx0XHRcdCAqIFRoaXMgYWxsb3dzIHVzZXJzIHRvIGxvYWQgR3JlZW5Tb2NrIEpTIGZpbGVzIGluIGFueSBvcmRlciBldmVuIGlmIHRoZXkgaGF2ZSBpbnRlcmRlcGVuZGVuY2llcyAobGlrZSBDU1NQbHVnaW4gZXh0ZW5kcyBUd2VlblBsdWdpbiB3aGljaCBpc1xuXHRcdFx0ICogaW5zaWRlIFR3ZWVuTGl0ZS5qcywgYnV0IGlmIENTU1BsdWdpbiBpcyBsb2FkZWQgZmlyc3QsIGl0IHNob3VsZCB3YWl0IHRvIHJ1biBpdHMgY29kZSB1bnRpbCBUd2VlbkxpdGUuanMgbG9hZHMgYW5kIGluc3RhbnRpYXRlcyBUd2VlblBsdWdpblxuXHRcdFx0ICogYW5kIHRoZW4gcGFzcyBUd2VlblBsdWdpbiB0byBDU1NQbHVnaW4ncyBkZWZpbml0aW9uKS4gVGhpcyBpcyBhbGwgZG9uZSBhdXRvbWF0aWNhbGx5IGFuZCBpbnRlcm5hbGx5LlxuXHRcdFx0ICpcblx0XHRcdCAqIEV2ZXJ5IGRlZmluaXRpb24gd2lsbCBiZSBhZGRlZCB0byBhIFwiY29tLmdyZWVuc29ja1wiIGdsb2JhbCBvYmplY3QgKHR5cGljYWxseSB3aW5kb3csIGJ1dCBpZiBhIHdpbmRvdy5HcmVlblNvY2tHbG9iYWxzIG9iamVjdCBpcyBmb3VuZCxcblx0XHRcdCAqIGl0IHdpbGwgZ28gdGhlcmUgYXMgb2YgdjEuNykuIEZvciBleGFtcGxlLCBUd2VlbkxpdGUgd2lsbCBiZSBmb3VuZCBhdCB3aW5kb3cuY29tLmdyZWVuc29jay5Ud2VlbkxpdGUgYW5kIHNpbmNlIGl0J3MgYSBnbG9iYWwgY2xhc3MgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIGFueXdoZXJlLFxuXHRcdFx0ICogaXQgaXMgQUxTTyByZWZlcmVuY2VkIGF0IHdpbmRvdy5Ud2VlbkxpdGUuIEhvd2V2ZXIgc29tZSBjbGFzc2VzIGFyZW4ndCBjb25zaWRlcmVkIGdsb2JhbCwgbGlrZSB0aGUgYmFzZSBjb20uZ3JlZW5zb2NrLmNvcmUuQW5pbWF0aW9uIGNsYXNzLCBzb1xuXHRcdFx0ICogdGhvc2Ugd2lsbCBvbmx5IGJlIGF0IHRoZSBwYWNrYWdlIGxpa2Ugd2luZG93LmNvbS5ncmVlbnNvY2suY29yZS5BbmltYXRpb24uIEFnYWluLCBpZiB5b3UgZGVmaW5lIGEgR3JlZW5Tb2NrR2xvYmFscyBvYmplY3Qgb24gdGhlIHdpbmRvdywgZXZlcnl0aGluZ1xuXHRcdFx0ICogZ2V0cyB0dWNrZWQgbmVhdGx5IGluc2lkZSB0aGVyZSBpbnN0ZWFkIG9mIG9uIHRoZSB3aW5kb3cgZGlyZWN0bHkuIFRoaXMgYWxsb3dzIHlvdSB0byBkbyBhZHZhbmNlZCB0aGluZ3MgbGlrZSBsb2FkIG11bHRpcGxlIHZlcnNpb25zIG9mIEdyZWVuU29ja1xuXHRcdFx0ICogZmlsZXMgYW5kIHB1dCB0aGVtIGludG8gZGlzdGluY3Qgb2JqZWN0cyAoaW1hZ2luZSBhIGJhbm5lciBhZCB1c2VzIGEgbmV3ZXIgdmVyc2lvbiBidXQgdGhlIG1haW4gc2l0ZSB1c2VzIGFuIG9sZGVyIG9uZSkuIEluIHRoYXQgY2FzZSwgeW91IGNvdWxkXG5cdFx0XHQgKiBzYW5kYm94IHRoZSBiYW5uZXIgb25lIGxpa2U6XG5cdFx0XHQgKlxuXHRcdFx0ICogPHNjcmlwdD5cblx0XHRcdCAqICAgICB2YXIgZ3MgPSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHt9OyAvL3RoZSBuZXdlciB2ZXJzaW9uIHdlJ3JlIGFib3V0IHRvIGxvYWQgY291bGQgbm93IGJlIHJlZmVyZW5jZWQgaW4gYSBcImdzXCIgb2JqZWN0LCBsaWtlIGdzLlR3ZWVuTGl0ZS50byguLi4pLiBVc2Ugd2hhdGV2ZXIgYWxpYXMgeW91IHdhbnQgYXMgbG9uZyBhcyBpdCdzIHVuaXF1ZSwgXCJnc1wiIG9yIFwiYmFubmVyXCIgb3Igd2hhdGV2ZXIuXG5cdFx0XHQgKiA8L3NjcmlwdD5cblx0XHRcdCAqIDxzY3JpcHQgc3JjPVwianMvZ3JlZW5zb2NrL3YxLjcvVHdlZW5NYXguanNcIj48L3NjcmlwdD5cblx0XHRcdCAqIDxzY3JpcHQ+XG5cdFx0XHQgKiAgICAgd2luZG93LkdyZWVuU29ja0dsb2JhbHMgPSB3aW5kb3cuX2dzUXVldWUgPSB3aW5kb3cuX2dzRGVmaW5lID0gbnVsbDsgLy9yZXNldCBpdCBiYWNrIHRvIG51bGwgKGFsb25nIHdpdGggdGhlIHNwZWNpYWwgX2dzUXVldWUgdmFyaWFibGUpIHNvIHRoYXQgdGhlIG5leHQgbG9hZCBvZiBUd2Vlbk1heCBhZmZlY3RzIHRoZSB3aW5kb3cgYW5kIHdlIGNhbiByZWZlcmVuY2UgdGhpbmdzIGRpcmVjdGx5IGxpa2UgVHdlZW5MaXRlLnRvKC4uLilcblx0XHRcdCAqIDwvc2NyaXB0PlxuXHRcdFx0ICogPHNjcmlwdCBzcmM9XCJqcy9ncmVlbnNvY2svdjEuNi9Ud2Vlbk1heC5qc1wiPjwvc2NyaXB0PlxuXHRcdFx0ICogPHNjcmlwdD5cblx0XHRcdCAqICAgICBncy5Ud2VlbkxpdGUudG8oLi4uKTsgLy93b3VsZCB1c2UgdjEuN1xuXHRcdFx0ICogICAgIFR3ZWVuTGl0ZS50byguLi4pOyAvL3dvdWxkIHVzZSB2MS42XG5cdFx0XHQgKiA8L3NjcmlwdD5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IG5zIFRoZSBuYW1lc3BhY2Ugb2YgdGhlIGNsYXNzIGRlZmluaXRpb24sIGxlYXZpbmcgb2ZmIFwiY29tLmdyZWVuc29jay5cIiBhcyB0aGF0J3MgYXNzdW1lZC4gRm9yIGV4YW1wbGUsIFwiVHdlZW5MaXRlXCIgb3IgXCJwbHVnaW5zLkNTU1BsdWdpblwiIG9yIFwiZWFzaW5nLkJhY2tcIi5cblx0XHRcdCAqIEBwYXJhbSB7IUFycmF5LjxzdHJpbmc+fSBkZXBlbmRlbmNpZXMgQW4gYXJyYXkgb2YgZGVwZW5kZW5jaWVzIChkZXNjcmliZWQgYXMgdGhlaXIgbmFtZXNwYWNlcyBtaW51cyBcImNvbS5ncmVlbnNvY2suXCIgcHJlZml4KS4gRm9yIGV4YW1wbGUgW1wiVHdlZW5MaXRlXCIsXCJwbHVnaW5zLlR3ZWVuUGx1Z2luXCIsXCJjb3JlLkFuaW1hdGlvblwiXVxuXHRcdFx0ICogQHBhcmFtIHshZnVuY3Rpb24oKTpPYmplY3R9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCBhbmQgcGFzc2VkIHRoZSByZXNvbHZlZCBkZXBlbmRlbmNpZXMgd2hpY2ggd2lsbCByZXR1cm4gdGhlIGFjdHVhbCBjbGFzcyBmb3IgdGhpcyBkZWZpbml0aW9uLlxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gZ2xvYmFsIElmIHRydWUsIHRoZSBjbGFzcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBnbG9iYWwgc2NvcGUgKHR5cGljYWxseSB3aW5kb3cgdW5sZXNzIHlvdSBkZWZpbmUgYSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyBvYmplY3QpXG5cdFx0XHQgKi9cblx0XHRcdERlZmluaXRpb24gPSBmdW5jdGlvbihucywgZGVwZW5kZW5jaWVzLCBmdW5jLCBnbG9iYWwpIHtcblx0XHRcdFx0dGhpcy5zYyA9IChfZGVmTG9va3VwW25zXSkgPyBfZGVmTG9va3VwW25zXS5zYyA6IFtdOyAvL3N1YmNsYXNzZXNcblx0XHRcdFx0X2RlZkxvb2t1cFtuc10gPSB0aGlzO1xuXHRcdFx0XHR0aGlzLmdzQ2xhc3MgPSBudWxsO1xuXHRcdFx0XHR0aGlzLmZ1bmMgPSBmdW5jO1xuXHRcdFx0XHR2YXIgX2NsYXNzZXMgPSBbXTtcblx0XHRcdFx0dGhpcy5jaGVjayA9IGZ1bmN0aW9uKGluaXQpIHtcblx0XHRcdFx0XHR2YXIgaSA9IGRlcGVuZGVuY2llcy5sZW5ndGgsXG5cdFx0XHRcdFx0XHRtaXNzaW5nID0gaSxcblx0XHRcdFx0XHRcdGN1ciwgYSwgbiwgY2wsIGhhc01vZHVsZTtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdGlmICgoY3VyID0gX2RlZkxvb2t1cFtkZXBlbmRlbmNpZXNbaV1dIHx8IG5ldyBEZWZpbml0aW9uKGRlcGVuZGVuY2llc1tpXSwgW10pKS5nc0NsYXNzKSB7XG5cdFx0XHRcdFx0XHRcdF9jbGFzc2VzW2ldID0gY3VyLmdzQ2xhc3M7XG5cdFx0XHRcdFx0XHRcdG1pc3NpbmctLTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaW5pdCkge1xuXHRcdFx0XHRcdFx0XHRjdXIuc2MucHVzaCh0aGlzKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG1pc3NpbmcgPT09IDAgJiYgZnVuYykge1xuXHRcdFx0XHRcdFx0YSA9IChcImNvbS5ncmVlbnNvY2suXCIgKyBucykuc3BsaXQoXCIuXCIpO1xuXHRcdFx0XHRcdFx0biA9IGEucG9wKCk7XG5cdFx0XHRcdFx0XHRjbCA9IF9uYW1lc3BhY2UoYS5qb2luKFwiLlwiKSlbbl0gPSB0aGlzLmdzQ2xhc3MgPSBmdW5jLmFwcGx5KGZ1bmMsIF9jbGFzc2VzKTtcblxuXHRcdFx0XHRcdFx0Ly9leHBvcnRzIHRvIG11bHRpcGxlIGVudmlyb25tZW50c1xuXHRcdFx0XHRcdFx0aWYgKGdsb2JhbCkge1xuXHRcdFx0XHRcdFx0XHRfZ2xvYmFsc1tuXSA9IF9leHBvcnRzW25dID0gY2w7IC8vcHJvdmlkZXMgYSB3YXkgdG8gYXZvaWQgZ2xvYmFsIG5hbWVzcGFjZSBwb2xsdXRpb24uIEJ5IGRlZmF1bHQsIHRoZSBtYWluIGNsYXNzZXMgbGlrZSBUd2VlbkxpdGUsIFBvd2VyMSwgU3Ryb25nLCBldGMuIGFyZSBhZGRlZCB0byB3aW5kb3cgdW5sZXNzIGEgR3JlZW5Tb2NrR2xvYmFscyBpcyBkZWZpbmVkLiBTbyBpZiB5b3Ugd2FudCB0byBoYXZlIHRoaW5ncyBhZGRlZCB0byBhIGN1c3RvbSBvYmplY3QgaW5zdGVhZCwganVzdCBkbyBzb21ldGhpbmcgbGlrZSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHt9IGJlZm9yZSBsb2FkaW5nIGFueSBHcmVlblNvY2sgZmlsZXMuIFlvdSBjYW4gZXZlbiBzZXQgdXAgYW4gYWxpYXMgbGlrZSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHdpbmRvd3MuZ3MgPSB7fSBzbyB0aGF0IHlvdSBjYW4gYWNjZXNzIGV2ZXJ5dGhpbmcgbGlrZSBncy5Ud2VlbkxpdGUuIEFsc28gcmVtZW1iZXIgdGhhdCBBTEwgY2xhc3NlcyBhcmUgYWRkZWQgdG8gdGhlIHdpbmRvdy5jb20uZ3JlZW5zb2NrIG9iamVjdCAoaW4gdGhlaXIgcmVzcGVjdGl2ZSBwYWNrYWdlcywgbGlrZSBjb20uZ3JlZW5zb2NrLmVhc2luZy5Qb3dlcjEsIGNvbS5ncmVlbnNvY2suVHdlZW5MaXRlLCBldGMuKVxuXHRcdFx0XHRcdFx0XHRoYXNNb2R1bGUgPSAodHlwZW9mKG1vZHVsZSkgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIWhhc01vZHVsZSAmJiB0eXBlb2YoZGVmaW5lKSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpeyAvL0FNRFxuXHRcdFx0XHRcdFx0XHRcdGRlZmluZSgod2luZG93LkdyZWVuU29ja0FNRFBhdGggPyB3aW5kb3cuR3JlZW5Tb2NrQU1EUGF0aCArIFwiL1wiIDogXCJcIikgKyBucy5zcGxpdChcIi5cIikucG9wKCksIFtdLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNsOyB9KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChoYXNNb2R1bGUpeyAvL25vZGVcblx0XHRcdFx0XHRcdFx0XHRpZiAobnMgPT09IG1vZHVsZU5hbWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5leHBvcnRzID0gX2V4cG9ydHNbbW9kdWxlTmFtZV0gPSBjbDtcblx0XHRcdFx0XHRcdFx0XHRcdGZvciAoaSBpbiBfZXhwb3J0cykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbFtpXSA9IF9leHBvcnRzW2ldO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoX2V4cG9ydHNbbW9kdWxlTmFtZV0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdF9leHBvcnRzW21vZHVsZU5hbWVdW25dID0gY2w7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgdGhpcy5zYy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnNjW2ldLmNoZWNrKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLmNoZWNrKHRydWUpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly91c2VkIHRvIGNyZWF0ZSBEZWZpbml0aW9uIGluc3RhbmNlcyAod2hpY2ggYmFzaWNhbGx5IHJlZ2lzdGVycyBhIGNsYXNzIHRoYXQgaGFzIGRlcGVuZGVuY2llcykuXG5cdFx0XHRfZ3NEZWZpbmUgPSB3aW5kb3cuX2dzRGVmaW5lID0gZnVuY3Rpb24obnMsIGRlcGVuZGVuY2llcywgZnVuYywgZ2xvYmFsKSB7XG5cdFx0XHRcdHJldHVybiBuZXcgRGVmaW5pdGlvbihucywgZGVwZW5kZW5jaWVzLCBmdW5jLCBnbG9iYWwpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly9hIHF1aWNrIHdheSB0byBjcmVhdGUgYSBjbGFzcyB0aGF0IGRvZXNuJ3QgaGF2ZSBhbnkgZGVwZW5kZW5jaWVzLiBSZXR1cm5zIHRoZSBjbGFzcywgYnV0IGZpcnN0IHJlZ2lzdGVycyBpdCBpbiB0aGUgR3JlZW5Tb2NrIG5hbWVzcGFjZSBzbyB0aGF0IG90aGVyIGNsYXNzZXMgY2FuIGdyYWIgaXQgKG90aGVyIGNsYXNzZXMgbWlnaHQgYmUgZGVwZW5kZW50IG9uIHRoZSBjbGFzcykuXG5cdFx0XHRfY2xhc3MgPSBncy5fY2xhc3MgPSBmdW5jdGlvbihucywgZnVuYywgZ2xvYmFsKSB7XG5cdFx0XHRcdGZ1bmMgPSBmdW5jIHx8IGZ1bmN0aW9uKCkge307XG5cdFx0XHRcdF9nc0RlZmluZShucywgW10sIGZ1bmN0aW9uKCl7IHJldHVybiBmdW5jOyB9LCBnbG9iYWwpO1xuXHRcdFx0XHRyZXR1cm4gZnVuYztcblx0XHRcdH07XG5cblx0XHRfZ3NEZWZpbmUuZ2xvYmFscyA9IF9nbG9iYWxzO1xuXG5cblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEVhc2VcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBfYmFzZVBhcmFtcyA9IFswLCAwLCAxLCAxXSxcblx0XHRcdF9ibGFua0FycmF5ID0gW10sXG5cdFx0XHRFYXNlID0gX2NsYXNzKFwiZWFzaW5nLkVhc2VcIiwgZnVuY3Rpb24oZnVuYywgZXh0cmFQYXJhbXMsIHR5cGUsIHBvd2VyKSB7XG5cdFx0XHRcdHRoaXMuX2Z1bmMgPSBmdW5jO1xuXHRcdFx0XHR0aGlzLl90eXBlID0gdHlwZSB8fCAwO1xuXHRcdFx0XHR0aGlzLl9wb3dlciA9IHBvd2VyIHx8IDA7XG5cdFx0XHRcdHRoaXMuX3BhcmFtcyA9IGV4dHJhUGFyYW1zID8gX2Jhc2VQYXJhbXMuY29uY2F0KGV4dHJhUGFyYW1zKSA6IF9iYXNlUGFyYW1zO1xuXHRcdFx0fSwgdHJ1ZSksXG5cdFx0XHRfZWFzZU1hcCA9IEVhc2UubWFwID0ge30sXG5cdFx0XHRfZWFzZVJlZyA9IEVhc2UucmVnaXN0ZXIgPSBmdW5jdGlvbihlYXNlLCBuYW1lcywgdHlwZXMsIGNyZWF0ZSkge1xuXHRcdFx0XHR2YXIgbmEgPSBuYW1lcy5zcGxpdChcIixcIiksXG5cdFx0XHRcdFx0aSA9IG5hLmxlbmd0aCxcblx0XHRcdFx0XHR0YSA9ICh0eXBlcyB8fCBcImVhc2VJbixlYXNlT3V0LGVhc2VJbk91dFwiKS5zcGxpdChcIixcIiksXG5cdFx0XHRcdFx0ZSwgbmFtZSwgaiwgdHlwZTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0bmFtZSA9IG5hW2ldO1xuXHRcdFx0XHRcdGUgPSBjcmVhdGUgPyBfY2xhc3MoXCJlYXNpbmcuXCIrbmFtZSwgbnVsbCwgdHJ1ZSkgOiBncy5lYXNpbmdbbmFtZV0gfHwge307XG5cdFx0XHRcdFx0aiA9IHRhLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1qID4gLTEpIHtcblx0XHRcdFx0XHRcdHR5cGUgPSB0YVtqXTtcblx0XHRcdFx0XHRcdF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHR5cGVdID0gX2Vhc2VNYXBbdHlwZSArIG5hbWVdID0gZVt0eXBlXSA9IGVhc2UuZ2V0UmF0aW8gPyBlYXNlIDogZWFzZVt0eXBlXSB8fCBuZXcgZWFzZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdHAgPSBFYXNlLnByb3RvdHlwZTtcblx0XHRwLl9jYWxjRW5kID0gZmFsc2U7XG5cdFx0cC5nZXRSYXRpbyA9IGZ1bmN0aW9uKHApIHtcblx0XHRcdGlmICh0aGlzLl9mdW5jKSB7XG5cdFx0XHRcdHRoaXMuX3BhcmFtc1swXSA9IHA7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9mdW5jLmFwcGx5KG51bGwsIHRoaXMuX3BhcmFtcyk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdCA9IHRoaXMuX3R5cGUsXG5cdFx0XHRcdHB3ID0gdGhpcy5fcG93ZXIsXG5cdFx0XHRcdHIgPSAodCA9PT0gMSkgPyAxIC0gcCA6ICh0ID09PSAyKSA/IHAgOiAocCA8IDAuNSkgPyBwICogMiA6ICgxIC0gcCkgKiAyO1xuXHRcdFx0aWYgKHB3ID09PSAxKSB7XG5cdFx0XHRcdHIgKj0gcjtcblx0XHRcdH0gZWxzZSBpZiAocHcgPT09IDIpIHtcblx0XHRcdFx0ciAqPSByICogcjtcblx0XHRcdH0gZWxzZSBpZiAocHcgPT09IDMpIHtcblx0XHRcdFx0ciAqPSByICogciAqIHI7XG5cdFx0XHR9IGVsc2UgaWYgKHB3ID09PSA0KSB7XG5cdFx0XHRcdHIgKj0gciAqIHIgKiByICogcjtcblx0XHRcdH1cblx0XHRcdHJldHVybiAodCA9PT0gMSkgPyAxIC0gciA6ICh0ID09PSAyKSA/IHIgOiAocCA8IDAuNSkgPyByIC8gMiA6IDEgLSAociAvIDIpO1xuXHRcdH07XG5cblx0XHQvL2NyZWF0ZSBhbGwgdGhlIHN0YW5kYXJkIGVhc2VzIGxpa2UgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgYW5kIFBvd2VyNCAoZWFjaCB3aXRoIGVhc2VJbiwgZWFzZU91dCwgYW5kIGVhc2VJbk91dClcblx0XHRhID0gW1wiTGluZWFyXCIsXCJRdWFkXCIsXCJDdWJpY1wiLFwiUXVhcnRcIixcIlF1aW50LFN0cm9uZ1wiXTtcblx0XHRpID0gYS5sZW5ndGg7XG5cdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRwID0gYVtpXStcIixQb3dlclwiK2k7XG5cdFx0XHRfZWFzZVJlZyhuZXcgRWFzZShudWxsLG51bGwsMSxpKSwgcCwgXCJlYXNlT3V0XCIsIHRydWUpO1xuXHRcdFx0X2Vhc2VSZWcobmV3IEVhc2UobnVsbCxudWxsLDIsaSksIHAsIFwiZWFzZUluXCIgKyAoKGkgPT09IDApID8gXCIsZWFzZU5vbmVcIiA6IFwiXCIpKTtcblx0XHRcdF9lYXNlUmVnKG5ldyBFYXNlKG51bGwsbnVsbCwzLGkpLCBwLCBcImVhc2VJbk91dFwiKTtcblx0XHR9XG5cdFx0X2Vhc2VNYXAubGluZWFyID0gZ3MuZWFzaW5nLkxpbmVhci5lYXNlSW47XG5cdFx0X2Vhc2VNYXAuc3dpbmcgPSBncy5lYXNpbmcuUXVhZC5lYXNlSW5PdXQ7IC8vZm9yIGpRdWVyeSBmb2xrc1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFdmVudERpc3BhdGNoZXJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBFdmVudERpc3BhdGNoZXIgPSBfY2xhc3MoXCJldmVudHMuRXZlbnREaXNwYXRjaGVyXCIsIGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdFx0dGhpcy5fbGlzdGVuZXJzID0ge307XG5cdFx0XHR0aGlzLl9ldmVudFRhcmdldCA9IHRhcmdldCB8fCB0aGlzO1xuXHRcdH0pO1xuXHRcdHAgPSBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlO1xuXG5cdFx0cC5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgY2FsbGJhY2ssIHNjb3BlLCB1c2VQYXJhbSwgcHJpb3JpdHkpIHtcblx0XHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRcdHZhciBsaXN0ID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxpc3RlbmVyLCBpO1xuXHRcdFx0aWYgKHRoaXMgPT09IF90aWNrZXIgJiYgIV90aWNrZXJBY3RpdmUpIHtcblx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGlzdCA9PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IGxpc3QgPSBbXTtcblx0XHRcdH1cblx0XHRcdGkgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRsaXN0ZW5lciA9IGxpc3RbaV07XG5cdFx0XHRcdGlmIChsaXN0ZW5lci5jID09PSBjYWxsYmFjayAmJiBsaXN0ZW5lci5zID09PSBzY29wZSkge1xuXHRcdFx0XHRcdGxpc3Quc3BsaWNlKGksIDEpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGluZGV4ID09PSAwICYmIGxpc3RlbmVyLnByIDwgcHJpb3JpdHkpIHtcblx0XHRcdFx0XHRpbmRleCA9IGkgKyAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRsaXN0LnNwbGljZShpbmRleCwgMCwge2M6Y2FsbGJhY2ssIHM6c2NvcGUsIHVwOnVzZVBhcmFtLCBwcjpwcmlvcml0eX0pO1xuXHRcdH07XG5cblx0XHRwLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGxpc3QgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV0sIGk7XG5cdFx0XHRpZiAobGlzdCkge1xuXHRcdFx0XHRpID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGlmIChsaXN0W2ldLmMgPT09IGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cC5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0dmFyIGxpc3QgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV0sXG5cdFx0XHRcdGksIHQsIGxpc3RlbmVyO1xuXHRcdFx0aWYgKGxpc3QpIHtcblx0XHRcdFx0aSA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRpZiAoaSA+IDEpIHsgXG5cdFx0XHRcdFx0bGlzdCA9IGxpc3Quc2xpY2UoMCk7IC8vaW4gY2FzZSBhZGRFdmVudExpc3RlbmVyKCkgaXMgY2FsbGVkIGZyb20gd2l0aGluIGEgbGlzdGVuZXIvY2FsbGJhY2sgKG90aGVyd2lzZSB0aGUgaW5kZXggY291bGQgY2hhbmdlLCByZXN1bHRpbmcgaW4gYSBza2lwKVxuXHRcdFx0XHR9XG5cdFx0XHRcdHQgPSB0aGlzLl9ldmVudFRhcmdldDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0bGlzdGVuZXIgPSBsaXN0W2ldO1xuXHRcdFx0XHRcdGlmIChsaXN0ZW5lcikge1xuXHRcdFx0XHRcdFx0aWYgKGxpc3RlbmVyLnVwKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3RlbmVyLmMuY2FsbChsaXN0ZW5lci5zIHx8IHQsIHt0eXBlOnR5cGUsIHRhcmdldDp0fSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRsaXN0ZW5lci5jLmNhbGwobGlzdGVuZXIucyB8fCB0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUaWNrZXJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuIFx0XHR2YXIgX3JlcUFuaW1GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG5cdFx0XHRfY2FuY2VsQW5pbUZyYW1lID0gd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lLFxuXHRcdFx0X2dldFRpbWUgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHtyZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7fSxcblx0XHRcdF9sYXN0VXBkYXRlID0gX2dldFRpbWUoKTtcblxuXHRcdC8vbm93IHRyeSB0byBkZXRlcm1pbmUgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBhbmQgY2FuY2VsQW5pbWF0aW9uRnJhbWUgZnVuY3Rpb25zIGFuZCBpZiBub25lIGFyZSBmb3VuZCwgd2UnbGwgdXNlIGEgc2V0VGltZW91dCgpL2NsZWFyVGltZW91dCgpIHBvbHlmaWxsLlxuXHRcdGEgPSBbXCJtc1wiLFwibW96XCIsXCJ3ZWJraXRcIixcIm9cIl07XG5cdFx0aSA9IGEubGVuZ3RoO1xuXHRcdHdoaWxlICgtLWkgPiAtMSAmJiAhX3JlcUFuaW1GcmFtZSkge1xuXHRcdFx0X3JlcUFuaW1GcmFtZSA9IHdpbmRvd1thW2ldICsgXCJSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG5cdFx0XHRfY2FuY2VsQW5pbUZyYW1lID0gd2luZG93W2FbaV0gKyBcIkNhbmNlbEFuaW1hdGlvbkZyYW1lXCJdIHx8IHdpbmRvd1thW2ldICsgXCJDYW5jZWxSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIl07XG5cdFx0fVxuXG5cdFx0X2NsYXNzKFwiVGlja2VyXCIsIGZ1bmN0aW9uKGZwcywgdXNlUkFGKSB7XG5cdFx0XHR2YXIgX3NlbGYgPSB0aGlzLFxuXHRcdFx0XHRfc3RhcnRUaW1lID0gX2dldFRpbWUoKSxcblx0XHRcdFx0X3VzZVJBRiA9ICh1c2VSQUYgIT09IGZhbHNlICYmIF9yZXFBbmltRnJhbWUpID8gXCJhdXRvXCIgOiBmYWxzZSxcblx0XHRcdFx0X2xhZ1RocmVzaG9sZCA9IDUwMCxcblx0XHRcdFx0X2FkanVzdGVkTGFnID0gMzMsXG5cdFx0XHRcdF90aWNrV29yZCA9IFwidGlja1wiLCAvL2hlbHBzIHJlZHVjZSBnYyBidXJkZW5cblx0XHRcdFx0X2ZwcywgX3JlcSwgX2lkLCBfZ2FwLCBfbmV4dFRpbWUsXG5cdFx0XHRcdF90aWNrID0gZnVuY3Rpb24obWFudWFsKSB7XG5cdFx0XHRcdFx0dmFyIGVsYXBzZWQgPSBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUsXG5cdFx0XHRcdFx0XHRvdmVybGFwLCBkaXNwYXRjaDtcblx0XHRcdFx0XHRpZiAoZWxhcHNlZCA+IF9sYWdUaHJlc2hvbGQpIHtcblx0XHRcdFx0XHRcdF9zdGFydFRpbWUgKz0gZWxhcHNlZCAtIF9hZGp1c3RlZExhZztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0X2xhc3RVcGRhdGUgKz0gZWxhcHNlZDtcblx0XHRcdFx0XHRfc2VsZi50aW1lID0gKF9sYXN0VXBkYXRlIC0gX3N0YXJ0VGltZSkgLyAxMDAwO1xuXHRcdFx0XHRcdG92ZXJsYXAgPSBfc2VsZi50aW1lIC0gX25leHRUaW1lO1xuXHRcdFx0XHRcdGlmICghX2ZwcyB8fCBvdmVybGFwID4gMCB8fCBtYW51YWwgPT09IHRydWUpIHtcblx0XHRcdFx0XHRcdF9zZWxmLmZyYW1lKys7XG5cdFx0XHRcdFx0XHRfbmV4dFRpbWUgKz0gb3ZlcmxhcCArIChvdmVybGFwID49IF9nYXAgPyAwLjAwNCA6IF9nYXAgLSBvdmVybGFwKTtcblx0XHRcdFx0XHRcdGRpc3BhdGNoID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG1hbnVhbCAhPT0gdHJ1ZSkgeyAvL21ha2Ugc3VyZSB0aGUgcmVxdWVzdCBpcyBtYWRlIGJlZm9yZSB3ZSBkaXNwYXRjaCB0aGUgXCJ0aWNrXCIgZXZlbnQgc28gdGhhdCB0aW1pbmcgaXMgbWFpbnRhaW5lZC4gT3RoZXJ3aXNlLCBpZiBwcm9jZXNzaW5nIHRoZSBcInRpY2tcIiByZXF1aXJlcyBhIGJ1bmNoIG9mIHRpbWUgKGxpa2UgMTVtcykgYW5kIHdlJ3JlIHVzaW5nIGEgc2V0VGltZW91dCgpIHRoYXQncyBiYXNlZCBvbiAxNi43bXMsIGl0J2QgdGVjaG5pY2FsbHkgdGFrZSAzMS43bXMgYmV0d2VlbiBmcmFtZXMgb3RoZXJ3aXNlLlxuXHRcdFx0XHRcdFx0X2lkID0gX3JlcShfdGljayk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChkaXNwYXRjaCkge1xuXHRcdFx0XHRcdFx0X3NlbGYuZGlzcGF0Y2hFdmVudChfdGlja1dvcmQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0RXZlbnREaXNwYXRjaGVyLmNhbGwoX3NlbGYpO1xuXHRcdFx0X3NlbGYudGltZSA9IF9zZWxmLmZyYW1lID0gMDtcblx0XHRcdF9zZWxmLnRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0X3RpY2sodHJ1ZSk7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi5sYWdTbW9vdGhpbmcgPSBmdW5jdGlvbih0aHJlc2hvbGQsIGFkanVzdGVkTGFnKSB7XG5cdFx0XHRcdF9sYWdUaHJlc2hvbGQgPSB0aHJlc2hvbGQgfHwgKDEgLyBfdGlueU51bSk7IC8vemVybyBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYmFzaWNhbGx5IHVubGltaXRlZFxuXHRcdFx0XHRfYWRqdXN0ZWRMYWcgPSBNYXRoLm1pbihhZGp1c3RlZExhZywgX2xhZ1RocmVzaG9sZCwgMCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi5zbGVlcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoX2lkID09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFfdXNlUkFGIHx8ICFfY2FuY2VsQW5pbUZyYW1lKSB7XG5cdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KF9pZCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X2NhbmNlbEFuaW1GcmFtZShfaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9yZXEgPSBfZW1wdHlGdW5jO1xuXHRcdFx0XHRfaWQgPSBudWxsO1xuXHRcdFx0XHRpZiAoX3NlbGYgPT09IF90aWNrZXIpIHtcblx0XHRcdFx0XHRfdGlja2VyQWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdF9zZWxmLndha2UgPSBmdW5jdGlvbihzZWFtbGVzcykge1xuXHRcdFx0XHRpZiAoX2lkICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0X3NlbGYuc2xlZXAoKTtcblx0XHRcdFx0fSBlbHNlIGlmIChzZWFtbGVzcykge1xuXHRcdFx0XHRcdF9zdGFydFRpbWUgKz0gLV9sYXN0VXBkYXRlICsgKF9sYXN0VXBkYXRlID0gX2dldFRpbWUoKSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoX3NlbGYuZnJhbWUgPiAxMCkgeyAvL2Rvbid0IHRyaWdnZXIgbGFnU21vb3RoaW5nIGlmIHdlJ3JlIGp1c3Qgd2FraW5nIHVwLCBhbmQgbWFrZSBzdXJlIHRoYXQgYXQgbGVhc3QgMTAgZnJhbWVzIGhhdmUgZWxhcHNlZCBiZWNhdXNlIG9mIHRoZSBpT1MgYnVnIHRoYXQgd2Ugd29yayBhcm91bmQgYmVsb3cgd2l0aCB0aGUgMS41LXNlY29uZCBzZXRUaW1vdXQoKS5cblx0XHRcdFx0XHRfbGFzdFVwZGF0ZSA9IF9nZXRUaW1lKCkgLSBfbGFnVGhyZXNob2xkICsgNTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfcmVxID0gKF9mcHMgPT09IDApID8gX2VtcHR5RnVuYyA6ICghX3VzZVJBRiB8fCAhX3JlcUFuaW1GcmFtZSkgPyBmdW5jdGlvbihmKSB7IHJldHVybiBzZXRUaW1lb3V0KGYsICgoX25leHRUaW1lIC0gX3NlbGYudGltZSkgKiAxMDAwICsgMSkgfCAwKTsgfSA6IF9yZXFBbmltRnJhbWU7XG5cdFx0XHRcdGlmIChfc2VsZiA9PT0gX3RpY2tlcikge1xuXHRcdFx0XHRcdF90aWNrZXJBY3RpdmUgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF90aWNrKDIpO1xuXHRcdFx0fTtcblxuXHRcdFx0X3NlbGYuZnBzID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF9mcHM7XG5cdFx0XHRcdH1cblx0XHRcdFx0X2ZwcyA9IHZhbHVlO1xuXHRcdFx0XHRfZ2FwID0gMSAvIChfZnBzIHx8IDYwKTtcblx0XHRcdFx0X25leHRUaW1lID0gdGhpcy50aW1lICsgX2dhcDtcblx0XHRcdFx0X3NlbGYud2FrZSgpO1xuXHRcdFx0fTtcblxuXHRcdFx0X3NlbGYudXNlUkFGID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIF91c2VSQUY7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3NlbGYuc2xlZXAoKTtcblx0XHRcdFx0X3VzZVJBRiA9IHZhbHVlO1xuXHRcdFx0XHRfc2VsZi5mcHMoX2Zwcyk7XG5cdFx0XHR9O1xuXHRcdFx0X3NlbGYuZnBzKGZwcyk7XG5cblx0XHRcdC8vYSBidWcgaW4gaU9TIDYgU2FmYXJpIG9jY2FzaW9uYWxseSBwcmV2ZW50cyB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGZyb20gd29ya2luZyBpbml0aWFsbHksIHNvIHdlIHVzZSBhIDEuNS1zZWNvbmQgdGltZW91dCB0aGF0IGF1dG9tYXRpY2FsbHkgZmFsbHMgYmFjayB0byBzZXRUaW1lb3V0KCkgaWYgaXQgc2Vuc2VzIHRoaXMgY29uZGl0aW9uLlxuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKF91c2VSQUYgPT09IFwiYXV0b1wiICYmIF9zZWxmLmZyYW1lIDwgNSAmJiBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgIT09IFwiaGlkZGVuXCIpIHtcblx0XHRcdFx0XHRfc2VsZi51c2VSQUYoZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCAxNTAwKTtcblx0XHR9KTtcblxuXHRcdHAgPSBncy5UaWNrZXIucHJvdG90eXBlID0gbmV3IGdzLmV2ZW50cy5FdmVudERpc3BhdGNoZXIoKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gZ3MuVGlja2VyO1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBbmltYXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBBbmltYXRpb24gPSBfY2xhc3MoXCJjb3JlLkFuaW1hdGlvblwiLCBmdW5jdGlvbihkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0XHR0aGlzLnZhcnMgPSB2YXJzID0gdmFycyB8fCB7fTtcblx0XHRcdFx0dGhpcy5fZHVyYXRpb24gPSB0aGlzLl90b3RhbER1cmF0aW9uID0gZHVyYXRpb24gfHwgMDtcblx0XHRcdFx0dGhpcy5fZGVsYXkgPSBOdW1iZXIodmFycy5kZWxheSkgfHwgMDtcblx0XHRcdFx0dGhpcy5fdGltZVNjYWxlID0gMTtcblx0XHRcdFx0dGhpcy5fYWN0aXZlID0gKHZhcnMuaW1tZWRpYXRlUmVuZGVyID09PSB0cnVlKTtcblx0XHRcdFx0dGhpcy5kYXRhID0gdmFycy5kYXRhO1xuXHRcdFx0XHR0aGlzLl9yZXZlcnNlZCA9ICh2YXJzLnJldmVyc2VkID09PSB0cnVlKTtcblxuXHRcdFx0XHRpZiAoIV9yb290VGltZWxpbmUpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7IC8vc29tZSBicm93c2VycyAobGlrZSBpT1MgNiBTYWZhcmkpIHNodXQgZG93biBKYXZhU2NyaXB0IGV4ZWN1dGlvbiB3aGVuIHRoZSB0YWIgaXMgZGlzYWJsZWQgYW5kIHRoZXkgW29jY2FzaW9uYWxseV0gbmVnbGVjdCB0byBzdGFydCB1cCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgYWdhaW4gd2hlbiByZXR1cm5pbmcgLSB0aGlzIGNvZGUgZW5zdXJlcyB0aGF0IHRoZSBlbmdpbmUgc3RhcnRzIHVwIGFnYWluIHByb3Blcmx5LlxuXHRcdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHRsID0gdGhpcy52YXJzLnVzZUZyYW1lcyA/IF9yb290RnJhbWVzVGltZWxpbmUgOiBfcm9vdFRpbWVsaW5lO1xuXHRcdFx0XHR0bC5hZGQodGhpcywgdGwuX3RpbWUpO1xuXG5cdFx0XHRcdGlmICh0aGlzLnZhcnMucGF1c2VkKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXVzZWQodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0X3RpY2tlciA9IEFuaW1hdGlvbi50aWNrZXIgPSBuZXcgZ3MuVGlja2VyKCk7XG5cdFx0cCA9IEFuaW1hdGlvbi5wcm90b3R5cGU7XG5cdFx0cC5fZGlydHkgPSBwLl9nYyA9IHAuX2luaXR0ZWQgPSBwLl9wYXVzZWQgPSBmYWxzZTtcblx0XHRwLl90b3RhbFRpbWUgPSBwLl90aW1lID0gMDtcblx0XHRwLl9yYXdQcmV2VGltZSA9IC0xO1xuXHRcdHAuX25leHQgPSBwLl9sYXN0ID0gcC5fb25VcGRhdGUgPSBwLl90aW1lbGluZSA9IHAudGltZWxpbmUgPSBudWxsO1xuXHRcdHAuX3BhdXNlZCA9IGZhbHNlO1xuXG5cblx0XHQvL3NvbWUgYnJvd3NlcnMgKGxpa2UgaU9TKSBvY2Nhc2lvbmFsbHkgZHJvcCB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGV2ZW50IHdoZW4gdGhlIHVzZXIgc3dpdGNoZXMgdG8gYSBkaWZmZXJlbnQgdGFiIGFuZCB0aGVuIGNvbWVzIGJhY2sgYWdhaW4sIHNvIHdlIHVzZSBhIDItc2Vjb25kIHNldFRpbWVvdXQoKSB0byBzZW5zZSBpZi93aGVuIHRoYXQgY29uZGl0aW9uIG9jY3VycyBhbmQgdGhlbiB3YWtlKCkgdGhlIHRpY2tlci5cblx0XHR2YXIgX2NoZWNrVGltZW91dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoX3RpY2tlckFjdGl2ZSAmJiBfZ2V0VGltZSgpIC0gX2xhc3RVcGRhdGUgPiAyMDAwKSB7XG5cdFx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2V0VGltZW91dChfY2hlY2tUaW1lb3V0LCAyMDAwKTtcblx0XHRcdH07XG5cdFx0X2NoZWNrVGltZW91dCgpO1xuXG5cblx0XHRwLnBsYXkgPSBmdW5jdGlvbihmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0aWYgKGZyb20gIT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnNlZWsoZnJvbSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSk7XG5cdFx0fTtcblxuXHRcdHAucGF1c2UgPSBmdW5jdGlvbihhdFRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoYXRUaW1lICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zZWVrKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucGF1c2VkKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLnJlc3VtZSA9IGZ1bmN0aW9uKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoZnJvbSAhPSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXVzZWQoZmFsc2UpO1xuXHRcdH07XG5cblx0XHRwLnNlZWsgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuIHRoaXMudG90YWxUaW1lKE51bWJlcih0aW1lKSwgc3VwcHJlc3NFdmVudHMgIT09IGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXN0YXJ0ID0gZnVuY3Rpb24oaW5jbHVkZURlbGF5LCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQoZmFsc2UpLnBhdXNlZChmYWxzZSkudG90YWxUaW1lKGluY2x1ZGVEZWxheSA/IC10aGlzLl9kZWxheSA6IDAsIChzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpLCB0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXZlcnNlID0gZnVuY3Rpb24oZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdGlmIChmcm9tICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zZWVrKChmcm9tIHx8IHRoaXMudG90YWxEdXJhdGlvbigpKSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucmV2ZXJzZWQodHJ1ZSkucGF1c2VkKGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5yZW5kZXIgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcblx0XHRcdC8vc3R1YiAtIHdlIG92ZXJyaWRlIHRoaXMgbWV0aG9kIGluIHN1YmNsYXNzZXMuXG5cdFx0fTtcblxuXHRcdHAuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5fdGltZSA9IHRoaXMuX3RvdGFsVGltZSA9IDA7XG5cdFx0XHR0aGlzLl9pbml0dGVkID0gdGhpcy5fZ2MgPSBmYWxzZTtcblx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gLTE7XG5cdFx0XHRpZiAodGhpcy5fZ2MgfHwgIXRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmlzQWN0aXZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGwgPSB0aGlzLl90aW1lbGluZSwgLy90aGUgMiByb290IHRpbWVsaW5lcyB3b24ndCBoYXZlIGEgX3RpbWVsaW5lOyB0aGV5J3JlIGFsd2F5cyBhY3RpdmUuXG5cdFx0XHRcdHN0YXJ0VGltZSA9IHRoaXMuX3N0YXJ0VGltZSxcblx0XHRcdFx0cmF3VGltZTtcblx0XHRcdHJldHVybiAoIXRsIHx8ICghdGhpcy5fZ2MgJiYgIXRoaXMuX3BhdXNlZCAmJiB0bC5pc0FjdGl2ZSgpICYmIChyYXdUaW1lID0gdGwucmF3VGltZSgpKSA+PSBzdGFydFRpbWUgJiYgcmF3VGltZSA8IHN0YXJ0VGltZSArIHRoaXMudG90YWxEdXJhdGlvbigpIC8gdGhpcy5fdGltZVNjYWxlKSk7XG5cdFx0fTtcblxuXHRcdHAuX2VuYWJsZWQgPSBmdW5jdGlvbiAoZW5hYmxlZCwgaWdub3JlVGltZWxpbmUpIHtcblx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSkge1xuXHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2djID0gIWVuYWJsZWQ7XG5cdFx0XHR0aGlzLl9hY3RpdmUgPSB0aGlzLmlzQWN0aXZlKCk7XG5cdFx0XHRpZiAoaWdub3JlVGltZWxpbmUgIT09IHRydWUpIHtcblx0XHRcdFx0aWYgKGVuYWJsZWQgJiYgIXRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lbGluZS5hZGQodGhpcywgdGhpcy5fc3RhcnRUaW1lIC0gdGhpcy5fZGVsYXkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKCFlbmFibGVkICYmIHRoaXMudGltZWxpbmUpIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lbGluZS5fcmVtb3ZlKHRoaXMsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKHZhcnMsIHRhcmdldCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5raWxsID0gZnVuY3Rpb24odmFycywgdGFyZ2V0KSB7XG5cdFx0XHR0aGlzLl9raWxsKHZhcnMsIHRhcmdldCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fdW5jYWNoZSA9IGZ1bmN0aW9uKGluY2x1ZGVTZWxmKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSBpbmNsdWRlU2VsZiA/IHRoaXMgOiB0aGlzLnRpbWVsaW5lO1xuXHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdHR3ZWVuLl9kaXJ0eSA9IHRydWU7XG5cdFx0XHRcdHR3ZWVuID0gdHdlZW4udGltZWxpbmU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fc3dhcFNlbGZJblBhcmFtcyA9IGZ1bmN0aW9uKHBhcmFtcykge1xuXHRcdFx0dmFyIGkgPSBwYXJhbXMubGVuZ3RoLFxuXHRcdFx0XHRjb3B5ID0gcGFyYW1zLmNvbmNhdCgpO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdGlmIChwYXJhbXNbaV0gPT09IFwie3NlbGZ9XCIpIHtcblx0XHRcdFx0XHRjb3B5W2ldID0gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNvcHk7XG5cdFx0fTtcblxuXHRcdHAuX2NhbGxiYWNrID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0dmFyIHYgPSB0aGlzLnZhcnMsXG5cdFx0XHRcdGNhbGxiYWNrID0gdlt0eXBlXSxcblx0XHRcdFx0cGFyYW1zID0gdlt0eXBlICsgXCJQYXJhbXNcIl0sXG5cdFx0XHRcdHNjb3BlID0gdlt0eXBlICsgXCJTY29wZVwiXSB8fCB2LmNhbGxiYWNrU2NvcGUgfHwgdGhpcyxcblx0XHRcdFx0bCA9IHBhcmFtcyA/IHBhcmFtcy5sZW5ndGggOiAwO1xuXHRcdFx0c3dpdGNoIChsKSB7IC8vc3BlZWQgb3B0aW1pemF0aW9uOyBjYWxsKCkgaXMgZmFzdGVyIHRoYW4gYXBwbHkoKSBzbyB1c2UgaXQgd2hlbiB0aGVyZSBhcmUgb25seSBhIGZldyBwYXJhbWV0ZXJzICh3aGljaCBpcyBieSBmYXIgbW9zdCBjb21tb24pLiBQcmV2aW91c2x5IHdlIHNpbXBseSBkaWQgdmFyIHYgPSB0aGlzLnZhcnM7IHZbdHlwZV0uYXBwbHkodlt0eXBlICsgXCJTY29wZVwiXSB8fCB2LmNhbGxiYWNrU2NvcGUgfHwgdGhpcywgdlt0eXBlICsgXCJQYXJhbXNcIl0gfHwgX2JsYW5rQXJyYXkpO1xuXHRcdFx0XHRjYXNlIDA6IGNhbGxiYWNrLmNhbGwoc2NvcGUpOyBicmVhaztcblx0XHRcdFx0Y2FzZSAxOiBjYWxsYmFjay5jYWxsKHNjb3BlLCBwYXJhbXNbMF0pOyBicmVhaztcblx0XHRcdFx0Y2FzZSAyOiBjYWxsYmFjay5jYWxsKHNjb3BlLCBwYXJhbXNbMF0sIHBhcmFtc1sxXSk7IGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OiBjYWxsYmFjay5hcHBseShzY29wZSwgcGFyYW1zKTtcblx0XHRcdH1cblx0XHR9O1xuXG4vLy0tLS1BbmltYXRpb24gZ2V0dGVycy9zZXR0ZXJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRwLmV2ZW50Q2FsbGJhY2sgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSkge1xuXHRcdFx0aWYgKCh0eXBlIHx8IFwiXCIpLnN1YnN0cigwLDIpID09PSBcIm9uXCIpIHtcblx0XHRcdFx0dmFyIHYgPSB0aGlzLnZhcnM7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZbdHlwZV07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNhbGxiYWNrID09IG51bGwpIHtcblx0XHRcdFx0XHRkZWxldGUgdlt0eXBlXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2W3R5cGVdID0gY2FsbGJhY2s7XG5cdFx0XHRcdFx0dlt0eXBlICsgXCJQYXJhbXNcIl0gPSAoX2lzQXJyYXkocGFyYW1zKSAmJiBwYXJhbXMuam9pbihcIlwiKS5pbmRleE9mKFwie3NlbGZ9XCIpICE9PSAtMSkgPyB0aGlzLl9zd2FwU2VsZkluUGFyYW1zKHBhcmFtcykgOiBwYXJhbXM7XG5cdFx0XHRcdFx0dlt0eXBlICsgXCJTY29wZVwiXSA9IHNjb3BlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlID09PSBcIm9uVXBkYXRlXCIpIHtcblx0XHRcdFx0XHR0aGlzLl9vblVwZGF0ZSA9IGNhbGxiYWNrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5kZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2RlbGF5O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSB7XG5cdFx0XHRcdHRoaXMuc3RhcnRUaW1lKCB0aGlzLl9zdGFydFRpbWUgKyB2YWx1ZSAtIHRoaXMuX2RlbGF5ICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9kZWxheSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuZHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9kdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWxEdXJhdGlvbiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTsgLy90cnVlIGluIGNhc2UgaXQncyBhIFR3ZWVuTWF4IG9yIFRpbWVsaW5lTWF4IHRoYXQgaGFzIGEgcmVwZWF0IC0gd2UnbGwgbmVlZCB0byByZWZyZXNoIHRoZSB0b3RhbER1cmF0aW9uLlxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSBpZiAodGhpcy5fdGltZSA+IDApIGlmICh0aGlzLl90aW1lIDwgdGhpcy5fZHVyYXRpb24pIGlmICh2YWx1ZSAhPT0gMCkge1xuXHRcdFx0XHR0aGlzLnRvdGFsVGltZSh0aGlzLl90b3RhbFRpbWUgKiAodmFsdWUgLyB0aGlzLl9kdXJhdGlvbiksIHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyB0aGlzLl90b3RhbER1cmF0aW9uIDogdGhpcy5kdXJhdGlvbih2YWx1ZSk7XG5cdFx0fTtcblxuXHRcdHAudGltZSA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl90aW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2RpcnR5KSB7XG5cdFx0XHRcdHRoaXMudG90YWxEdXJhdGlvbigpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMudG90YWxUaW1lKCh2YWx1ZSA+IHRoaXMuX2R1cmF0aW9uKSA/IHRoaXMuX2R1cmF0aW9uIDogdmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbFRpbWUgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgdW5jYXBwZWQpIHtcblx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSkge1xuXHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdH1cblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdG90YWxUaW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdGlmICh0aW1lIDwgMCAmJiAhdW5jYXBwZWQpIHtcblx0XHRcdFx0XHR0aW1lICs9IHRoaXMudG90YWxEdXJhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZS5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHRcdFx0dGhpcy50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciB0b3RhbER1cmF0aW9uID0gdGhpcy5fdG90YWxEdXJhdGlvbixcblx0XHRcdFx0XHRcdHRsID0gdGhpcy5fdGltZWxpbmU7XG5cdFx0XHRcdFx0aWYgKHRpbWUgPiB0b3RhbER1cmF0aW9uICYmICF1bmNhcHBlZCkge1xuXHRcdFx0XHRcdFx0dGltZSA9IHRvdGFsRHVyYXRpb247XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9ICh0aGlzLl9wYXVzZWQgPyB0aGlzLl9wYXVzZVRpbWUgOiB0bC5fdGltZSkgLSAoKCF0aGlzLl9yZXZlcnNlZCA/IHRpbWUgOiB0b3RhbER1cmF0aW9uIC0gdGltZSkgLyB0aGlzLl90aW1lU2NhbGUpO1xuXHRcdFx0XHRcdGlmICghdGwuX2RpcnR5KSB7IC8vZm9yIHBlcmZvcm1hbmNlIGltcHJvdmVtZW50LiBJZiB0aGUgcGFyZW50J3MgY2FjaGUgaXMgYWxyZWFkeSBkaXJ0eSwgaXQgYWxyZWFkeSB0b29rIGNhcmUgb2YgbWFya2luZyB0aGUgYW5jZXN0b3JzIGFzIGRpcnR5IHRvbywgc28gc2tpcCB0aGUgZnVuY3Rpb24gY2FsbCBoZXJlLlxuXHRcdFx0XHRcdFx0dGhpcy5fdW5jYWNoZShmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vaW4gY2FzZSBhbnkgb2YgdGhlIGFuY2VzdG9yIHRpbWVsaW5lcyBoYWQgY29tcGxldGVkIGJ1dCBzaG91bGQgbm93IGJlIGVuYWJsZWQsIHdlIHNob3VsZCByZXNldCB0aGVpciB0b3RhbFRpbWUoKSB3aGljaCB3aWxsIGFsc28gZW5zdXJlIHRoYXQgdGhleSdyZSBsaW5lZCB1cCBwcm9wZXJseSBhbmQgZW5hYmxlZC4gU2tpcCBmb3IgYW5pbWF0aW9ucyB0aGF0IGFyZSBvbiB0aGUgcm9vdCAod2FzdGVmdWwpLiBFeGFtcGxlOiBhIFRpbWVsaW5lTGl0ZS5leHBvcnRSb290KCkgaXMgcGVyZm9ybWVkIHdoZW4gdGhlcmUncyBhIHBhdXNlZCB0d2VlbiBvbiB0aGUgcm9vdCwgdGhlIGV4cG9ydCB3aWxsIG5vdCBjb21wbGV0ZSB1bnRpbCB0aGF0IHR3ZWVuIGlzIHVucGF1c2VkLCBidXQgaW1hZ2luZSBhIGNoaWxkIGdldHMgcmVzdGFydGVkIGxhdGVyLCBhZnRlciBhbGwgW3VucGF1c2VkXSB0d2VlbnMgaGF2ZSBjb21wbGV0ZWQuIFRoZSBzdGFydFRpbWUgb2YgdGhhdCBjaGlsZCB3b3VsZCBnZXQgcHVzaGVkIG91dCwgYnV0IG9uZSBvZiB0aGUgYW5jZXN0b3JzIG1heSBoYXZlIGNvbXBsZXRlZC5cblx0XHRcdFx0XHRpZiAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0bC5fdGltZWxpbmUuX3RpbWUgIT09ICh0bC5fc3RhcnRUaW1lICsgdGwuX3RvdGFsVGltZSkgLyB0bC5fdGltZVNjYWxlKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGwudG90YWxUaW1lKHRsLl90b3RhbFRpbWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHRsID0gdGwuX3RpbWVsaW5lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fZ2MpIHtcblx0XHRcdFx0XHR0aGlzLl9lbmFibGVkKHRydWUsIGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fdG90YWxUaW1lICE9PSB0aW1lIHx8IHRoaXMuX2R1cmF0aW9uID09PSAwKSB7XG5cdFx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZhbHNlKTtcblx0XHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7IC8vaW4gY2FzZSByZW5kZXJpbmcgY2F1c2VkIGFueSB0d2VlbnMgdG8gbGF6eS1pbml0LCB3ZSBzaG91bGQgcmVuZGVyIHRoZW0gYmVjYXVzZSB0eXBpY2FsbHkgd2hlbiBzb21lb25lIGNhbGxzIHNlZWsoKSBvciB0aW1lKCkgb3IgcHJvZ3Jlc3MoKSwgdGhleSBleHBlY3QgYW4gaW1tZWRpYXRlIHJlbmRlci5cblx0XHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5wcm9ncmVzcyA9IHAudG90YWxQcm9ncmVzcyA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0dmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbigpO1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyAoZHVyYXRpb24gPyB0aGlzLl90aW1lIC8gZHVyYXRpb24gOiB0aGlzLnJhdGlvKSA6IHRoaXMudG90YWxUaW1lKGR1cmF0aW9uICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC5zdGFydFRpbWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9zdGFydFRpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT09IHRoaXMuX3N0YXJ0VGltZSkge1xuXHRcdFx0XHR0aGlzLl9zdGFydFRpbWUgPSB2YWx1ZTtcblx0XHRcdFx0aWYgKHRoaXMudGltZWxpbmUpIGlmICh0aGlzLnRpbWVsaW5lLl9zb3J0Q2hpbGRyZW4pIHtcblx0XHRcdFx0XHR0aGlzLnRpbWVsaW5lLmFkZCh0aGlzLCB2YWx1ZSAtIHRoaXMuX2RlbGF5KTsgLy9lbnN1cmVzIHRoYXQgYW55IG5lY2Vzc2FyeSByZS1zZXF1ZW5jaW5nIG9mIEFuaW1hdGlvbnMgaW4gdGhlIHRpbWVsaW5lIG9jY3VycyB0byBtYWtlIHN1cmUgdGhlIHJlbmRlcmluZyBvcmRlciBpcyBjb3JyZWN0LlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5lbmRUaW1lID0gZnVuY3Rpb24oaW5jbHVkZVJlcGVhdHMpIHtcblx0XHRcdHJldHVybiB0aGlzLl9zdGFydFRpbWUgKyAoKGluY2x1ZGVSZXBlYXRzICE9IGZhbHNlKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy5kdXJhdGlvbigpKSAvIHRoaXMuX3RpbWVTY2FsZTtcblx0XHR9O1xuXG5cdFx0cC50aW1lU2NhbGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl90aW1lU2NhbGU7XG5cdFx0XHR9XG5cdFx0XHR2YWx1ZSA9IHZhbHVlIHx8IF90aW55TnVtOyAvL2Nhbid0IGFsbG93IHplcm8gYmVjYXVzZSBpdCdsbCB0aHJvdyB0aGUgbWF0aCBvZmZcblx0XHRcdGlmICh0aGlzLl90aW1lbGluZSAmJiB0aGlzLl90aW1lbGluZS5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHR2YXIgcGF1c2VUaW1lID0gdGhpcy5fcGF1c2VUaW1lLFxuXHRcdFx0XHRcdHQgPSAocGF1c2VUaW1lIHx8IHBhdXNlVGltZSA9PT0gMCkgPyBwYXVzZVRpbWUgOiB0aGlzLl90aW1lbGluZS50b3RhbFRpbWUoKTtcblx0XHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gdCAtICgodCAtIHRoaXMuX3N0YXJ0VGltZSkgKiB0aGlzLl90aW1lU2NhbGUgLyB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90aW1lU2NhbGUgPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5yZXZlcnNlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3JldmVyc2VkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHZhbHVlICE9IHRoaXMuX3JldmVyc2VkKSB7XG5cdFx0XHRcdHRoaXMuX3JldmVyc2VkID0gdmFsdWU7XG5cdFx0XHRcdHRoaXMudG90YWxUaW1lKCgodGhpcy5fdGltZWxpbmUgJiYgIXRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSA/IHRoaXMudG90YWxEdXJhdGlvbigpIC0gdGhpcy5fdG90YWxUaW1lIDogdGhpcy5fdG90YWxUaW1lKSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5wYXVzZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9wYXVzZWQ7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdGwgPSB0aGlzLl90aW1lbGluZSxcblx0XHRcdFx0cmF3LCBlbGFwc2VkO1xuXHRcdFx0aWYgKHZhbHVlICE9IHRoaXMuX3BhdXNlZCkgaWYgKHRsKSB7XG5cdFx0XHRcdGlmICghX3RpY2tlckFjdGl2ZSAmJiAhdmFsdWUpIHtcblx0XHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyYXcgPSB0bC5yYXdUaW1lKCk7XG5cdFx0XHRcdGVsYXBzZWQgPSByYXcgLSB0aGlzLl9wYXVzZVRpbWU7XG5cdFx0XHRcdGlmICghdmFsdWUgJiYgdGwuc21vb3RoQ2hpbGRUaW1pbmcpIHtcblx0XHRcdFx0XHR0aGlzLl9zdGFydFRpbWUgKz0gZWxhcHNlZDtcblx0XHRcdFx0XHR0aGlzLl91bmNhY2hlKGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9wYXVzZVRpbWUgPSB2YWx1ZSA/IHJhdyA6IG51bGw7XG5cdFx0XHRcdHRoaXMuX3BhdXNlZCA9IHZhbHVlO1xuXHRcdFx0XHR0aGlzLl9hY3RpdmUgPSB0aGlzLmlzQWN0aXZlKCk7XG5cdFx0XHRcdGlmICghdmFsdWUgJiYgZWxhcHNlZCAhPT0gMCAmJiB0aGlzLl9pbml0dGVkICYmIHRoaXMuZHVyYXRpb24oKSkge1xuXHRcdFx0XHRcdHJhdyA9IHRsLnNtb290aENoaWxkVGltaW5nID8gdGhpcy5fdG90YWxUaW1lIDogKHJhdyAtIHRoaXMuX3N0YXJ0VGltZSkgLyB0aGlzLl90aW1lU2NhbGU7XG5cdFx0XHRcdFx0dGhpcy5yZW5kZXIocmF3LCAocmF3ID09PSB0aGlzLl90b3RhbFRpbWUpLCB0cnVlKTsgLy9pbiBjYXNlIHRoZSB0YXJnZXQncyBwcm9wZXJ0aWVzIGNoYW5nZWQgdmlhIHNvbWUgb3RoZXIgdHdlZW4gb3IgbWFudWFsIHVwZGF0ZSBieSB0aGUgdXNlciwgd2Ugc2hvdWxkIGZvcmNlIGEgcmVuZGVyLlxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fZ2MgJiYgIXZhbHVlKSB7XG5cdFx0XHRcdHRoaXMuX2VuYWJsZWQodHJ1ZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogU2ltcGxlVGltZWxpbmVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBTaW1wbGVUaW1lbGluZSA9IF9jbGFzcyhcImNvcmUuU2ltcGxlVGltZWxpbmVcIiwgZnVuY3Rpb24odmFycykge1xuXHRcdFx0QW5pbWF0aW9uLmNhbGwodGhpcywgMCwgdmFycyk7XG5cdFx0XHR0aGlzLmF1dG9SZW1vdmVDaGlsZHJlbiA9IHRoaXMuc21vb3RoQ2hpbGRUaW1pbmcgPSB0cnVlO1xuXHRcdH0pO1xuXG5cdFx0cCA9IFNpbXBsZVRpbWVsaW5lLnByb3RvdHlwZSA9IG5ldyBBbmltYXRpb24oKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gU2ltcGxlVGltZWxpbmU7XG5cdFx0cC5raWxsKCkuX2djID0gZmFsc2U7XG5cdFx0cC5fZmlyc3QgPSBwLl9sYXN0ID0gcC5fcmVjZW50ID0gbnVsbDtcblx0XHRwLl9zb3J0Q2hpbGRyZW4gPSBmYWxzZTtcblxuXHRcdHAuYWRkID0gcC5pbnNlcnQgPSBmdW5jdGlvbihjaGlsZCwgcG9zaXRpb24sIGFsaWduLCBzdGFnZ2VyKSB7XG5cdFx0XHR2YXIgcHJldlR3ZWVuLCBzdDtcblx0XHRcdGNoaWxkLl9zdGFydFRpbWUgPSBOdW1iZXIocG9zaXRpb24gfHwgMCkgKyBjaGlsZC5fZGVsYXk7XG5cdFx0XHRpZiAoY2hpbGQuX3BhdXNlZCkgaWYgKHRoaXMgIT09IGNoaWxkLl90aW1lbGluZSkgeyAvL3dlIG9ubHkgYWRqdXN0IHRoZSBfcGF1c2VUaW1lIGlmIGl0IHdhc24ndCBpbiB0aGlzIHRpbWVsaW5lIGFscmVhZHkuIFJlbWVtYmVyLCBzb21ldGltZXMgYSB0d2VlbiB3aWxsIGJlIGluc2VydGVkIGFnYWluIGludG8gdGhlIHNhbWUgdGltZWxpbmUgd2hlbiBpdHMgc3RhcnRUaW1lIGlzIGNoYW5nZWQgc28gdGhhdCB0aGUgdHdlZW5zIGluIHRoZSBUaW1lbGluZUxpdGUvTWF4IGFyZSByZS1vcmRlcmVkIHByb3Blcmx5IGluIHRoZSBsaW5rZWQgbGlzdCAoc28gZXZlcnl0aGluZyByZW5kZXJzIGluIHRoZSBwcm9wZXIgb3JkZXIpLlxuXHRcdFx0XHRjaGlsZC5fcGF1c2VUaW1lID0gY2hpbGQuX3N0YXJ0VGltZSArICgodGhpcy5yYXdUaW1lKCkgLSBjaGlsZC5fc3RhcnRUaW1lKSAvIGNoaWxkLl90aW1lU2NhbGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNoaWxkLnRpbWVsaW5lKSB7XG5cdFx0XHRcdGNoaWxkLnRpbWVsaW5lLl9yZW1vdmUoY2hpbGQsIHRydWUpOyAvL3JlbW92ZXMgZnJvbSBleGlzdGluZyB0aW1lbGluZSBzbyB0aGF0IGl0IGNhbiBiZSBwcm9wZXJseSBhZGRlZCB0byB0aGlzIG9uZS5cblx0XHRcdH1cblx0XHRcdGNoaWxkLnRpbWVsaW5lID0gY2hpbGQuX3RpbWVsaW5lID0gdGhpcztcblx0XHRcdGlmIChjaGlsZC5fZ2MpIHtcblx0XHRcdFx0Y2hpbGQuX2VuYWJsZWQodHJ1ZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRwcmV2VHdlZW4gPSB0aGlzLl9sYXN0O1xuXHRcdFx0aWYgKHRoaXMuX3NvcnRDaGlsZHJlbikge1xuXHRcdFx0XHRzdCA9IGNoaWxkLl9zdGFydFRpbWU7XG5cdFx0XHRcdHdoaWxlIChwcmV2VHdlZW4gJiYgcHJldlR3ZWVuLl9zdGFydFRpbWUgPiBzdCkge1xuXHRcdFx0XHRcdHByZXZUd2VlbiA9IHByZXZUd2Vlbi5fcHJldjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHByZXZUd2Vlbikge1xuXHRcdFx0XHRjaGlsZC5fbmV4dCA9IHByZXZUd2Vlbi5fbmV4dDtcblx0XHRcdFx0cHJldlR3ZWVuLl9uZXh0ID0gY2hpbGQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGlsZC5fbmV4dCA9IHRoaXMuX2ZpcnN0O1xuXHRcdFx0XHR0aGlzLl9maXJzdCA9IGNoaWxkO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNoaWxkLl9uZXh0KSB7XG5cdFx0XHRcdGNoaWxkLl9uZXh0Ll9wcmV2ID0gY2hpbGQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9sYXN0ID0gY2hpbGQ7XG5cdFx0XHR9XG5cdFx0XHRjaGlsZC5fcHJldiA9IHByZXZUd2Vlbjtcblx0XHRcdHRoaXMuX3JlY2VudCA9IGNoaWxkO1xuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fcmVtb3ZlID0gZnVuY3Rpb24odHdlZW4sIHNraXBEaXNhYmxlKSB7XG5cdFx0XHRpZiAodHdlZW4udGltZWxpbmUgPT09IHRoaXMpIHtcblx0XHRcdFx0aWYgKCFza2lwRGlzYWJsZSkge1xuXHRcdFx0XHRcdHR3ZWVuLl9lbmFibGVkKGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0d2Vlbi5fcHJldikge1xuXHRcdFx0XHRcdHR3ZWVuLl9wcmV2Ll9uZXh0ID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fZmlyc3QgPT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3QgPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHdlZW4uX25leHQpIHtcblx0XHRcdFx0XHR0d2Vlbi5fbmV4dC5fcHJldiA9IHR3ZWVuLl9wcmV2O1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX2xhc3QgPT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0dGhpcy5fbGFzdCA9IHR3ZWVuLl9wcmV2O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuLl9uZXh0ID0gdHdlZW4uX3ByZXYgPSB0d2Vlbi50aW1lbGluZSA9IG51bGw7XG5cdFx0XHRcdGlmICh0d2VlbiA9PT0gdGhpcy5fcmVjZW50KSB7XG5cdFx0XHRcdFx0dGhpcy5fcmVjZW50ID0gdGhpcy5fbGFzdDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZSkge1xuXHRcdFx0XHRcdHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3QsXG5cdFx0XHRcdG5leHQ7XG5cdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gdGhpcy5fcmF3UHJldlRpbWUgPSB0aW1lO1xuXHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdG5leHQgPSB0d2Vlbi5fbmV4dDsgLy9yZWNvcmQgaXQgaGVyZSBiZWNhdXNlIHRoZSB2YWx1ZSBjb3VsZCBjaGFuZ2UgYWZ0ZXIgcmVuZGVyaW5nLi4uXG5cdFx0XHRcdGlmICh0d2Vlbi5fYWN0aXZlIHx8ICh0aW1lID49IHR3ZWVuLl9zdGFydFRpbWUgJiYgIXR3ZWVuLl9wYXVzZWQpKSB7XG5cdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdHR3ZWVuLnJlbmRlcigodGltZSAtIHR3ZWVuLl9zdGFydFRpbWUpICogdHdlZW4uX3RpbWVTY2FsZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAucmF3VGltZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7XG5cdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuX3RvdGFsVGltZTtcblx0XHR9O1xuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVHdlZW5MaXRlXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0XHR2YXIgVHdlZW5MaXRlID0gX2NsYXNzKFwiVHdlZW5MaXRlXCIsIGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdFx0QW5pbWF0aW9uLmNhbGwodGhpcywgZHVyYXRpb24sIHZhcnMpO1xuXHRcdFx0XHR0aGlzLnJlbmRlciA9IFR3ZWVuTGl0ZS5wcm90b3R5cGUucmVuZGVyOyAvL3NwZWVkIG9wdGltaXphdGlvbiAoYXZvaWQgcHJvdG90eXBlIGxvb2t1cCBvbiB0aGlzIFwiaG90XCIgbWV0aG9kKVxuXG5cdFx0XHRcdGlmICh0YXJnZXQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHRocm93IFwiQ2Fubm90IHR3ZWVuIGEgbnVsbCB0YXJnZXQuXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnRhcmdldCA9IHRhcmdldCA9ICh0eXBlb2YodGFyZ2V0KSAhPT0gXCJzdHJpbmdcIikgPyB0YXJnZXQgOiBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0KSB8fCB0YXJnZXQ7XG5cblx0XHRcdFx0dmFyIGlzU2VsZWN0b3IgPSAodGFyZ2V0LmpxdWVyeSB8fCAodGFyZ2V0Lmxlbmd0aCAmJiB0YXJnZXQgIT09IHdpbmRvdyAmJiB0YXJnZXRbMF0gJiYgKHRhcmdldFswXSA9PT0gd2luZG93IHx8ICh0YXJnZXRbMF0ubm9kZVR5cGUgJiYgdGFyZ2V0WzBdLnN0eWxlICYmICF0YXJnZXQubm9kZVR5cGUpKSkpLFxuXHRcdFx0XHRcdG92ZXJ3cml0ZSA9IHRoaXMudmFycy5vdmVyd3JpdGUsXG5cdFx0XHRcdFx0aSwgdGFyZywgdGFyZ2V0cztcblxuXHRcdFx0XHR0aGlzLl9vdmVyd3JpdGUgPSBvdmVyd3JpdGUgPSAob3ZlcndyaXRlID09IG51bGwpID8gX292ZXJ3cml0ZUxvb2t1cFtUd2VlbkxpdGUuZGVmYXVsdE92ZXJ3cml0ZV0gOiAodHlwZW9mKG92ZXJ3cml0ZSkgPT09IFwibnVtYmVyXCIpID8gb3ZlcndyaXRlID4+IDAgOiBfb3ZlcndyaXRlTG9va3VwW292ZXJ3cml0ZV07XG5cblx0XHRcdFx0aWYgKChpc1NlbGVjdG9yIHx8IHRhcmdldCBpbnN0YW5jZW9mIEFycmF5IHx8ICh0YXJnZXQucHVzaCAmJiBfaXNBcnJheSh0YXJnZXQpKSkgJiYgdHlwZW9mKHRhcmdldFswXSkgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHR0aGlzLl90YXJnZXRzID0gdGFyZ2V0cyA9IF9zbGljZSh0YXJnZXQpOyAgLy9kb24ndCB1c2UgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGFyZ2V0LCAwKSBiZWNhdXNlIHRoYXQgZG9lc24ndCB3b3JrIGluIElFOCB3aXRoIGEgTm9kZUxpc3QgdGhhdCdzIHJldHVybmVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwoKVxuXHRcdFx0XHRcdHRoaXMuX3Byb3BMb29rdXAgPSBbXTtcblx0XHRcdFx0XHR0aGlzLl9zaWJsaW5ncyA9IFtdO1xuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCB0YXJnZXRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHR0YXJnID0gdGFyZ2V0c1tpXTtcblx0XHRcdFx0XHRcdGlmICghdGFyZykge1xuXHRcdFx0XHRcdFx0XHR0YXJnZXRzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHRhcmcpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0XHRcdHRhcmcgPSB0YXJnZXRzW2ktLV0gPSBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZyk7IC8vaW4gY2FzZSBpdCdzIGFuIGFycmF5IG9mIHN0cmluZ3Ncblx0XHRcdFx0XHRcdFx0aWYgKHR5cGVvZih0YXJnKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdFx0XHRcdHRhcmdldHMuc3BsaWNlKGkrMSwgMSk7IC8vdG8gYXZvaWQgYW4gZW5kbGVzcyBsb29wIChjYW4ndCBpbWFnaW5lIHdoeSB0aGUgc2VsZWN0b3Igd291bGQgcmV0dXJuIGEgc3RyaW5nLCBidXQganVzdCBpbiBjYXNlKVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0YXJnLmxlbmd0aCAmJiB0YXJnICE9PSB3aW5kb3cgJiYgdGFyZ1swXSAmJiAodGFyZ1swXSA9PT0gd2luZG93IHx8ICh0YXJnWzBdLm5vZGVUeXBlICYmIHRhcmdbMF0uc3R5bGUgJiYgIXRhcmcubm9kZVR5cGUpKSkgeyAvL2luIGNhc2UgdGhlIHVzZXIgaXMgcGFzc2luZyBpbiBhbiBhcnJheSBvZiBzZWxlY3RvciBvYmplY3RzIChsaWtlIGpRdWVyeSBvYmplY3RzKSwgd2UgbmVlZCB0byBjaGVjayBvbmUgbW9yZSBsZXZlbCBhbmQgcHVsbCB0aGluZ3Mgb3V0IGlmIG5lY2Vzc2FyeS4gQWxzbyBub3RlIHRoYXQgPHNlbGVjdD4gZWxlbWVudHMgcGFzcyBhbGwgdGhlIGNyaXRlcmlhIHJlZ2FyZGluZyBsZW5ndGggYW5kIHRoZSBmaXJzdCBjaGlsZCBoYXZpbmcgc3R5bGUsIHNvIHdlIG11c3QgYWxzbyBjaGVjayB0byBlbnN1cmUgdGhlIHRhcmdldCBpc24ndCBhbiBIVE1MIG5vZGUgaXRzZWxmLlxuXHRcdFx0XHRcdFx0XHR0YXJnZXRzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl90YXJnZXRzID0gdGFyZ2V0cyA9IHRhcmdldHMuY29uY2F0KF9zbGljZSh0YXJnKSk7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5fc2libGluZ3NbaV0gPSBfcmVnaXN0ZXIodGFyZywgdGhpcywgZmFsc2UpO1xuXHRcdFx0XHRcdFx0aWYgKG92ZXJ3cml0ZSA9PT0gMSkgaWYgKHRoaXMuX3NpYmxpbmdzW2ldLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdFx0X2FwcGx5T3ZlcndyaXRlKHRhcmcsIHRoaXMsIG51bGwsIDEsIHRoaXMuX3NpYmxpbmdzW2ldKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9wcm9wTG9va3VwID0ge307XG5cdFx0XHRcdFx0dGhpcy5fc2libGluZ3MgPSBfcmVnaXN0ZXIodGFyZ2V0LCB0aGlzLCBmYWxzZSk7XG5cdFx0XHRcdFx0aWYgKG92ZXJ3cml0ZSA9PT0gMSkgaWYgKHRoaXMuX3NpYmxpbmdzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdF9hcHBseU92ZXJ3cml0ZSh0YXJnZXQsIHRoaXMsIG51bGwsIDEsIHRoaXMuX3NpYmxpbmdzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgfHwgKGR1cmF0aW9uID09PSAwICYmIHRoaXMuX2RlbGF5ID09PSAwICYmIHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIgIT09IGZhbHNlKSkge1xuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXHRcdFx0XHRcdHRoaXMucmVuZGVyKE1hdGgubWluKDAsIC10aGlzLl9kZWxheSkpOyAvL2luIGNhc2UgZGVsYXkgaXMgbmVnYXRpdmVcblx0XHRcdFx0fVxuXHRcdFx0fSwgdHJ1ZSksXG5cdFx0XHRfaXNTZWxlY3RvciA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0cmV0dXJuICh2ICYmIHYubGVuZ3RoICYmIHYgIT09IHdpbmRvdyAmJiB2WzBdICYmICh2WzBdID09PSB3aW5kb3cgfHwgKHZbMF0ubm9kZVR5cGUgJiYgdlswXS5zdHlsZSAmJiAhdi5ub2RlVHlwZSkpKTsgLy93ZSBjYW5ub3QgY2hlY2sgXCJub2RlVHlwZVwiIGlmIHRoZSB0YXJnZXQgaXMgd2luZG93IGZyb20gd2l0aGluIGFuIGlmcmFtZSwgb3RoZXJ3aXNlIGl0IHdpbGwgdHJpZ2dlciBhIHNlY3VyaXR5IGVycm9yIGluIHNvbWUgYnJvd3NlcnMgbGlrZSBGaXJlZm94LlxuXHRcdFx0fSxcblx0XHRcdF9hdXRvQ1NTID0gZnVuY3Rpb24odmFycywgdGFyZ2V0KSB7XG5cdFx0XHRcdHZhciBjc3MgPSB7fSxcblx0XHRcdFx0XHRwO1xuXHRcdFx0XHRmb3IgKHAgaW4gdmFycykge1xuXHRcdFx0XHRcdGlmICghX3Jlc2VydmVkUHJvcHNbcF0gJiYgKCEocCBpbiB0YXJnZXQpIHx8IHAgPT09IFwidHJhbnNmb3JtXCIgfHwgcCA9PT0gXCJ4XCIgfHwgcCA9PT0gXCJ5XCIgfHwgcCA9PT0gXCJ3aWR0aFwiIHx8IHAgPT09IFwiaGVpZ2h0XCIgfHwgcCA9PT0gXCJjbGFzc05hbWVcIiB8fCBwID09PSBcImJvcmRlclwiKSAmJiAoIV9wbHVnaW5zW3BdIHx8IChfcGx1Z2luc1twXSAmJiBfcGx1Z2luc1twXS5fYXV0b0NTUykpKSB7IC8vbm90ZTogPGltZz4gZWxlbWVudHMgY29udGFpbiByZWFkLW9ubHkgXCJ4XCIgYW5kIFwieVwiIHByb3BlcnRpZXMuIFdlIHNob3VsZCBhbHNvIHByaW9yaXRpemUgZWRpdGluZyBjc3Mgd2lkdGgvaGVpZ2h0IHJhdGhlciB0aGFuIHRoZSBlbGVtZW50J3MgcHJvcGVydGllcy5cblx0XHRcdFx0XHRcdGNzc1twXSA9IHZhcnNbcF07XG5cdFx0XHRcdFx0XHRkZWxldGUgdmFyc1twXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFycy5jc3MgPSBjc3M7XG5cdFx0XHR9O1xuXG5cdFx0cCA9IFR3ZWVuTGl0ZS5wcm90b3R5cGUgPSBuZXcgQW5pbWF0aW9uKCk7XG5cdFx0cC5jb25zdHJ1Y3RvciA9IFR3ZWVuTGl0ZTtcblx0XHRwLmtpbGwoKS5fZ2MgPSBmYWxzZTtcblxuLy8tLS0tVHdlZW5MaXRlIGRlZmF1bHRzLCBvdmVyd3JpdGUgbWFuYWdlbWVudCwgYW5kIHJvb3QgdXBkYXRlcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRwLnJhdGlvID0gMDtcblx0XHRwLl9maXJzdFBUID0gcC5fdGFyZ2V0cyA9IHAuX292ZXJ3cml0dGVuUHJvcHMgPSBwLl9zdGFydEF0ID0gbnVsbDtcblx0XHRwLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkID0gcC5fbGF6eSA9IGZhbHNlO1xuXG5cdFx0VHdlZW5MaXRlLnZlcnNpb24gPSBcIjEuMTkuMFwiO1xuXHRcdFR3ZWVuTGl0ZS5kZWZhdWx0RWFzZSA9IHAuX2Vhc2UgPSBuZXcgRWFzZShudWxsLCBudWxsLCAxLCAxKTtcblx0XHRUd2VlbkxpdGUuZGVmYXVsdE92ZXJ3cml0ZSA9IFwiYXV0b1wiO1xuXHRcdFR3ZWVuTGl0ZS50aWNrZXIgPSBfdGlja2VyO1xuXHRcdFR3ZWVuTGl0ZS5hdXRvU2xlZXAgPSAxMjA7XG5cdFx0VHdlZW5MaXRlLmxhZ1Ntb290aGluZyA9IGZ1bmN0aW9uKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcblx0XHRcdF90aWNrZXIubGFnU21vb3RoaW5nKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuc2VsZWN0b3IgPSB3aW5kb3cuJCB8fCB3aW5kb3cualF1ZXJ5IHx8IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBzZWxlY3RvciA9IHdpbmRvdy4kIHx8IHdpbmRvdy5qUXVlcnk7XG5cdFx0XHRpZiAoc2VsZWN0b3IpIHtcblx0XHRcdFx0VHdlZW5MaXRlLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdHJldHVybiBzZWxlY3RvcihlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAodHlwZW9mKGRvY3VtZW50KSA9PT0gXCJ1bmRlZmluZWRcIikgPyBlIDogKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGUpIDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoKGUuY2hhckF0KDApID09PSBcIiNcIikgPyBlLnN1YnN0cigxKSA6IGUpKTtcblx0XHR9O1xuXG5cdFx0dmFyIF9sYXp5VHdlZW5zID0gW10sXG5cdFx0XHRfbGF6eUxvb2t1cCA9IHt9LFxuXHRcdFx0X251bWJlcnNFeHAgPSAvKD86KC18LT18XFwrPSk/XFxkKlxcLj9cXGQqKD86ZVtcXC0rXT9cXGQrKT8pWzAtOV0vaWcsXG5cdFx0XHQvL19ub25OdW1iZXJzRXhwID0gLyg/OihbXFwtK10oPyEoXFxkfD0pKSl8W15cXGRcXC0rPWVdfChlKD8hW1xcLStdW1xcZF0pKSkrL2lnLFxuXHRcdFx0X3NldFJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHR2YXIgcHQgPSB0aGlzLl9maXJzdFBULFxuXHRcdFx0XHRcdG1pbiA9IDAuMDAwMDAxLFxuXHRcdFx0XHRcdHZhbDtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0dmFsID0gIXB0LmJsb2IgPyBwdC5jICogdiArIHB0LnMgOiB2ID8gdGhpcy5qb2luKFwiXCIpIDogdGhpcy5zdGFydDtcblx0XHRcdFx0XHRpZiAocHQubSkge1xuXHRcdFx0XHRcdFx0dmFsID0gcHQubSh2YWwsIHRoaXMuX3RhcmdldCB8fCBwdC50KTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbCA8IG1pbikgaWYgKHZhbCA+IC1taW4pIHsgLy9wcmV2ZW50cyBpc3N1ZXMgd2l0aCBjb252ZXJ0aW5nIHZlcnkgc21hbGwgbnVtYmVycyB0byBzdHJpbmdzIGluIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0XHR2YWwgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIXB0LmYpIHtcblx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSB2YWw7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwdC5mcCkge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXShwdC5mcCwgdmFsKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSh2YWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0Ly9jb21wYXJlcyB0d28gc3RyaW5ncyAoc3RhcnQvZW5kKSwgZmluZHMgdGhlIG51bWJlcnMgdGhhdCBhcmUgZGlmZmVyZW50IGFuZCBzcGl0cyBiYWNrIGFuIGFycmF5IHJlcHJlc2VudGluZyB0aGUgd2hvbGUgdmFsdWUgYnV0IHdpdGggdGhlIGNoYW5naW5nIHZhbHVlcyBpc29sYXRlZCBhcyBlbGVtZW50cy4gRm9yIGV4YW1wbGUsIFwicmdiKDAsMCwwKVwiIGFuZCBcInJnYigxMDAsNTAsMClcIiB3b3VsZCBiZWNvbWUgW1wicmdiKFwiLCAwLCBcIixcIiwgNTAsIFwiLDApXCJdLiBOb3RpY2UgaXQgbWVyZ2VzIHRoZSBwYXJ0cyB0aGF0IGFyZSBpZGVudGljYWwgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbikuIFRoZSBhcnJheSBhbHNvIGhhcyBhIGxpbmtlZCBsaXN0IG9mIFByb3BUd2VlbnMgYXR0YWNoZWQgc3RhcnRpbmcgd2l0aCBfZmlyc3RQVCB0aGF0IGNvbnRhaW4gdGhlIHR3ZWVuaW5nIGRhdGEgKHQsIHAsIHMsIGMsIGYsIGV0Yy4pLiBJdCBhbHNvIHN0b3JlcyB0aGUgc3RhcnRpbmcgdmFsdWUgYXMgYSBcInN0YXJ0XCIgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gcmV2ZXJ0IHRvIGl0IGlmL3doZW4gbmVjZXNzYXJ5LCBsaWtlIHdoZW4gYSB0d2VlbiByZXdpbmRzIGZ1bGx5LiBJZiB0aGUgcXVhbnRpdHkgb2YgbnVtYmVycyBkaWZmZXJzIGJldHdlZW4gdGhlIHN0YXJ0IGFuZCBlbmQsIGl0IHdpbGwgYWx3YXlzIHByaW9yaXRpemUgdGhlIGVuZCB2YWx1ZShzKS4gVGhlIHB0IHBhcmFtZXRlciBpcyBvcHRpb25hbCAtIGl0J3MgZm9yIGEgUHJvcFR3ZWVuIHRoYXQgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgZW5kIG9mIHRoZSBsaW5rZWQgbGlzdCBhbmQgaXMgdHlwaWNhbGx5IGZvciBhY3R1YWxseSBzZXR0aW5nIHRoZSB2YWx1ZSBhZnRlciBhbGwgb2YgdGhlIGVsZW1lbnRzIGhhdmUgYmVlbiB1cGRhdGVkICh3aXRoIGFycmF5LmpvaW4oXCJcIikpLlxuXHRcdFx0X2Jsb2JEaWYgPSBmdW5jdGlvbihzdGFydCwgZW5kLCBmaWx0ZXIsIHB0KSB7XG5cdFx0XHRcdHZhciBhID0gW3N0YXJ0LCBlbmRdLFxuXHRcdFx0XHRcdGNoYXJJbmRleCA9IDAsXG5cdFx0XHRcdFx0cyA9IFwiXCIsXG5cdFx0XHRcdFx0Y29sb3IgPSAwLFxuXHRcdFx0XHRcdHN0YXJ0TnVtcywgZW5kTnVtcywgbnVtLCBpLCBsLCBub25OdW1iZXJzLCBjdXJyZW50TnVtO1xuXHRcdFx0XHRhLnN0YXJ0ID0gc3RhcnQ7XG5cdFx0XHRcdGlmIChmaWx0ZXIpIHtcblx0XHRcdFx0XHRmaWx0ZXIoYSk7IC8vcGFzcyBhbiBhcnJheSB3aXRoIHRoZSBzdGFydGluZyBhbmQgZW5kaW5nIHZhbHVlcyBhbmQgbGV0IHRoZSBmaWx0ZXIgZG8gd2hhdGV2ZXIgaXQgbmVlZHMgdG8gdGhlIHZhbHVlcy5cblx0XHRcdFx0XHRzdGFydCA9IGFbMF07XG5cdFx0XHRcdFx0ZW5kID0gYVsxXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhLmxlbmd0aCA9IDA7XG5cdFx0XHRcdHN0YXJ0TnVtcyA9IHN0YXJ0Lm1hdGNoKF9udW1iZXJzRXhwKSB8fCBbXTtcblx0XHRcdFx0ZW5kTnVtcyA9IGVuZC5tYXRjaChfbnVtYmVyc0V4cCkgfHwgW107XG5cdFx0XHRcdGlmIChwdCkge1xuXHRcdFx0XHRcdHB0Ll9uZXh0ID0gbnVsbDtcblx0XHRcdFx0XHRwdC5ibG9iID0gMTtcblx0XHRcdFx0XHRhLl9maXJzdFBUID0gYS5fYXBwbHlQVCA9IHB0OyAvL2FwcGx5IGxhc3QgaW4gdGhlIGxpbmtlZCBsaXN0ICh3aGljaCBtZWFucyBpbnNlcnRpbmcgaXQgZmlyc3QpXG5cdFx0XHRcdH1cblx0XHRcdFx0bCA9IGVuZE51bXMubGVuZ3RoO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0Y3VycmVudE51bSA9IGVuZE51bXNbaV07XG5cdFx0XHRcdFx0bm9uTnVtYmVycyA9IGVuZC5zdWJzdHIoY2hhckluZGV4LCBlbmQuaW5kZXhPZihjdXJyZW50TnVtLCBjaGFySW5kZXgpLWNoYXJJbmRleCk7XG5cdFx0XHRcdFx0cyArPSAobm9uTnVtYmVycyB8fCAhaSkgPyBub25OdW1iZXJzIDogXCIsXCI7IC8vbm90ZTogU1ZHIHNwZWMgYWxsb3dzIG9taXNzaW9uIG9mIGNvbW1hL3NwYWNlIHdoZW4gYSBuZWdhdGl2ZSBzaWduIGlzIHdlZGdlZCBiZXR3ZWVuIHR3byBudW1iZXJzLCBsaWtlIDIuNS01LjMgaW5zdGVhZCBvZiAyLjUsLTUuMyBidXQgd2hlbiB0d2VlbmluZywgdGhlIG5lZ2F0aXZlIHZhbHVlIG1heSBzd2l0Y2ggdG8gcG9zaXRpdmUsIHNvIHdlIGluc2VydCB0aGUgY29tbWEganVzdCBpbiBjYXNlLlxuXHRcdFx0XHRcdGNoYXJJbmRleCArPSBub25OdW1iZXJzLmxlbmd0aDtcblx0XHRcdFx0XHRpZiAoY29sb3IpIHsgLy9zZW5zZSByZ2JhKCkgdmFsdWVzIGFuZCByb3VuZCB0aGVtLlxuXHRcdFx0XHRcdFx0Y29sb3IgPSAoY29sb3IgKyAxKSAlIDU7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChub25OdW1iZXJzLnN1YnN0cigtNSkgPT09IFwicmdiYShcIikge1xuXHRcdFx0XHRcdFx0Y29sb3IgPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoY3VycmVudE51bSA9PT0gc3RhcnROdW1zW2ldIHx8IHN0YXJ0TnVtcy5sZW5ndGggPD0gaSkge1xuXHRcdFx0XHRcdFx0cyArPSBjdXJyZW50TnVtO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAocykge1xuXHRcdFx0XHRcdFx0XHRhLnB1c2gocyk7XG5cdFx0XHRcdFx0XHRcdHMgPSBcIlwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bnVtID0gcGFyc2VGbG9hdChzdGFydE51bXNbaV0pO1xuXHRcdFx0XHRcdFx0YS5wdXNoKG51bSk7XG5cdFx0XHRcdFx0XHRhLl9maXJzdFBUID0ge19uZXh0OiBhLl9maXJzdFBULCB0OmEsIHA6IGEubGVuZ3RoLTEsIHM6bnVtLCBjOigoY3VycmVudE51bS5jaGFyQXQoMSkgPT09IFwiPVwiKSA/IHBhcnNlSW50KGN1cnJlbnROdW0uY2hhckF0KDApICsgXCIxXCIsIDEwKSAqIHBhcnNlRmxvYXQoY3VycmVudE51bS5zdWJzdHIoMikpIDogKHBhcnNlRmxvYXQoY3VycmVudE51bSkgLSBudW0pKSB8fCAwLCBmOjAsIG06KGNvbG9yICYmIGNvbG9yIDwgNCkgPyBNYXRoLnJvdW5kIDogMH07XG5cdFx0XHRcdFx0XHQvL25vdGU6IHdlIGRvbid0IHNldCBfcHJldiBiZWNhdXNlIHdlJ2xsIG5ldmVyIG5lZWQgdG8gcmVtb3ZlIGluZGl2aWR1YWwgUHJvcFR3ZWVucyBmcm9tIHRoaXMgbGlzdC5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2hhckluZGV4ICs9IGN1cnJlbnROdW0ubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHMgKz0gZW5kLnN1YnN0cihjaGFySW5kZXgpO1xuXHRcdFx0XHRpZiAocykge1xuXHRcdFx0XHRcdGEucHVzaChzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhLnNldFJhdGlvID0gX3NldFJhdGlvO1xuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH0sXG5cdFx0XHQvL25vdGU6IFwiZnVuY1BhcmFtXCIgaXMgb25seSBuZWNlc3NhcnkgZm9yIGZ1bmN0aW9uLWJhc2VkIGdldHRlcnMvc2V0dGVycyB0aGF0IHJlcXVpcmUgYW4gZXh0cmEgcGFyYW1ldGVyIGxpa2UgZ2V0QXR0cmlidXRlKFwid2lkdGhcIikgYW5kIHNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHZhbHVlKS4gSW4gdGhpcyBleGFtcGxlLCBmdW5jUGFyYW0gd291bGQgYmUgXCJ3aWR0aFwiLiBVc2VkIGJ5IEF0dHJQbHVnaW4gZm9yIGV4YW1wbGUuXG5cdFx0XHRfYWRkUHJvcFR3ZWVuID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBvdmVyd3JpdGVQcm9wLCBtb2QsIGZ1bmNQYXJhbSwgc3RyaW5nRmlsdGVyLCBpbmRleCkge1xuXHRcdFx0XHRpZiAodHlwZW9mKGVuZCkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdGVuZCA9IGVuZChpbmRleCB8fCAwLCB0YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBzID0gKHN0YXJ0ID09PSBcImdldFwiKSA/IHRhcmdldFtwcm9wXSA6IHN0YXJ0LFxuXHRcdFx0XHRcdHR5cGUgPSB0eXBlb2YodGFyZ2V0W3Byb3BdKSxcblx0XHRcdFx0XHRpc1JlbGF0aXZlID0gKHR5cGVvZihlbmQpID09PSBcInN0cmluZ1wiICYmIGVuZC5jaGFyQXQoMSkgPT09IFwiPVwiKSxcblx0XHRcdFx0XHRwdCA9IHt0OnRhcmdldCwgcDpwcm9wLCBzOnMsIGY6KHR5cGUgPT09IFwiZnVuY3Rpb25cIiksIHBnOjAsIG46b3ZlcndyaXRlUHJvcCB8fCBwcm9wLCBtOighbW9kID8gMCA6ICh0eXBlb2YobW9kKSA9PT0gXCJmdW5jdGlvblwiKSA/IG1vZCA6IE1hdGgucm91bmQpLCBwcjowLCBjOmlzUmVsYXRpdmUgPyBwYXJzZUludChlbmQuY2hhckF0KDApICsgXCIxXCIsIDEwKSAqIHBhcnNlRmxvYXQoZW5kLnN1YnN0cigyKSkgOiAocGFyc2VGbG9hdChlbmQpIC0gcykgfHwgMH0sXG5cdFx0XHRcdFx0YmxvYiwgZ2V0dGVyTmFtZTtcblx0XHRcdFx0aWYgKHR5cGUgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRpZiAodHlwZSA9PT0gXCJmdW5jdGlvblwiICYmIHN0YXJ0ID09PSBcImdldFwiKSB7XG5cdFx0XHRcdFx0XHRnZXR0ZXJOYW1lID0gKChwcm9wLmluZGV4T2YoXCJzZXRcIikgfHwgdHlwZW9mKHRhcmdldFtcImdldFwiICsgcHJvcC5zdWJzdHIoMyldKSAhPT0gXCJmdW5jdGlvblwiKSA/IHByb3AgOiBcImdldFwiICsgcHJvcC5zdWJzdHIoMykpO1xuXHRcdFx0XHRcdFx0cHQucyA9IHMgPSBmdW5jUGFyYW0gPyB0YXJnZXRbZ2V0dGVyTmFtZV0oZnVuY1BhcmFtKSA6IHRhcmdldFtnZXR0ZXJOYW1lXSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodHlwZW9mKHMpID09PSBcInN0cmluZ1wiICYmIChmdW5jUGFyYW0gfHwgaXNOYU4ocykpKSB7XG5cdFx0XHRcdFx0XHQvL2EgYmxvYiAoc3RyaW5nIHRoYXQgaGFzIG11bHRpcGxlIG51bWJlcnMgaW4gaXQpXG5cdFx0XHRcdFx0XHRwdC5mcCA9IGZ1bmNQYXJhbTtcblx0XHRcdFx0XHRcdGJsb2IgPSBfYmxvYkRpZihzLCBlbmQsIHN0cmluZ0ZpbHRlciB8fCBUd2VlbkxpdGUuZGVmYXVsdFN0cmluZ0ZpbHRlciwgcHQpO1xuXHRcdFx0XHRcdFx0cHQgPSB7dDpibG9iLCBwOlwic2V0UmF0aW9cIiwgczowLCBjOjEsIGY6MiwgcGc6MCwgbjpvdmVyd3JpdGVQcm9wIHx8IHByb3AsIHByOjAsIG06MH07IC8vXCIyXCIgaW5kaWNhdGVzIGl0J3MgYSBCbG9iIHByb3BlcnR5IHR3ZWVuLiBOZWVkZWQgZm9yIFJvdW5kUHJvcHNQbHVnaW4gZm9yIGV4YW1wbGUuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICghaXNSZWxhdGl2ZSkge1xuXHRcdFx0XHRcdFx0cHQucyA9IHBhcnNlRmxvYXQocyk7XG5cdFx0XHRcdFx0XHRwdC5jID0gKHBhcnNlRmxvYXQoZW5kKSAtIHB0LnMpIHx8IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwdC5jKSB7IC8vb25seSBhZGQgaXQgdG8gdGhlIGxpbmtlZCBsaXN0IGlmIHRoZXJlJ3MgYSBjaGFuZ2UuXG5cdFx0XHRcdFx0aWYgKChwdC5fbmV4dCA9IHRoaXMuX2ZpcnN0UFQpKSB7XG5cdFx0XHRcdFx0XHRwdC5fbmV4dC5fcHJldiA9IHB0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQ7XG5cdFx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X2ludGVybmFscyA9IFR3ZWVuTGl0ZS5faW50ZXJuYWxzID0ge2lzQXJyYXk6X2lzQXJyYXksIGlzU2VsZWN0b3I6X2lzU2VsZWN0b3IsIGxhenlUd2VlbnM6X2xhenlUd2VlbnMsIGJsb2JEaWY6X2Jsb2JEaWZ9LCAvL2dpdmVzIHVzIGEgd2F5IHRvIGV4cG9zZSBjZXJ0YWluIHByaXZhdGUgdmFsdWVzIHRvIG90aGVyIEdyZWVuU29jayBjbGFzc2VzIHdpdGhvdXQgY29udGFtaW5hdGluZyB0aGEgbWFpbiBUd2VlbkxpdGUgb2JqZWN0LlxuXHRcdFx0X3BsdWdpbnMgPSBUd2VlbkxpdGUuX3BsdWdpbnMgPSB7fSxcblx0XHRcdF90d2Vlbkxvb2t1cCA9IF9pbnRlcm5hbHMudHdlZW5Mb29rdXAgPSB7fSxcblx0XHRcdF90d2Vlbkxvb2t1cE51bSA9IDAsXG5cdFx0XHRfcmVzZXJ2ZWRQcm9wcyA9IF9pbnRlcm5hbHMucmVzZXJ2ZWRQcm9wcyA9IHtlYXNlOjEsIGRlbGF5OjEsIG92ZXJ3cml0ZToxLCBvbkNvbXBsZXRlOjEsIG9uQ29tcGxldGVQYXJhbXM6MSwgb25Db21wbGV0ZVNjb3BlOjEsIHVzZUZyYW1lczoxLCBydW5CYWNrd2FyZHM6MSwgc3RhcnRBdDoxLCBvblVwZGF0ZToxLCBvblVwZGF0ZVBhcmFtczoxLCBvblVwZGF0ZVNjb3BlOjEsIG9uU3RhcnQ6MSwgb25TdGFydFBhcmFtczoxLCBvblN0YXJ0U2NvcGU6MSwgb25SZXZlcnNlQ29tcGxldGU6MSwgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6MSwgb25SZXZlcnNlQ29tcGxldGVTY29wZToxLCBvblJlcGVhdDoxLCBvblJlcGVhdFBhcmFtczoxLCBvblJlcGVhdFNjb3BlOjEsIGVhc2VQYXJhbXM6MSwgeW95bzoxLCBpbW1lZGlhdGVSZW5kZXI6MSwgcmVwZWF0OjEsIHJlcGVhdERlbGF5OjEsIGRhdGE6MSwgcGF1c2VkOjEsIHJldmVyc2VkOjEsIGF1dG9DU1M6MSwgbGF6eToxLCBvbk92ZXJ3cml0ZToxLCBjYWxsYmFja1Njb3BlOjEsIHN0cmluZ0ZpbHRlcjoxLCBpZDoxfSxcblx0XHRcdF9vdmVyd3JpdGVMb29rdXAgPSB7bm9uZTowLCBhbGw6MSwgYXV0bzoyLCBjb25jdXJyZW50OjMsIGFsbE9uU3RhcnQ6NCwgcHJlZXhpc3Rpbmc6NSwgXCJ0cnVlXCI6MSwgXCJmYWxzZVwiOjB9LFxuXHRcdFx0X3Jvb3RGcmFtZXNUaW1lbGluZSA9IEFuaW1hdGlvbi5fcm9vdEZyYW1lc1RpbWVsaW5lID0gbmV3IFNpbXBsZVRpbWVsaW5lKCksXG5cdFx0XHRfcm9vdFRpbWVsaW5lID0gQW5pbWF0aW9uLl9yb290VGltZWxpbmUgPSBuZXcgU2ltcGxlVGltZWxpbmUoKSxcblx0XHRcdF9uZXh0R0NGcmFtZSA9IDMwLFxuXHRcdFx0X2xhenlSZW5kZXIgPSBfaW50ZXJuYWxzLmxhenlSZW5kZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGkgPSBfbGF6eVR3ZWVucy5sZW5ndGgsXG5cdFx0XHRcdFx0dHdlZW47XG5cdFx0XHRcdF9sYXp5TG9va3VwID0ge307XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdHR3ZWVuID0gX2xhenlUd2VlbnNbaV07XG5cdFx0XHRcdFx0aWYgKHR3ZWVuICYmIHR3ZWVuLl9sYXp5ICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKHR3ZWVuLl9sYXp5WzBdLCB0d2Vlbi5fbGF6eVsxXSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR0d2Vlbi5fbGF6eSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRfbGF6eVR3ZWVucy5sZW5ndGggPSAwO1xuXHRcdFx0fTtcblxuXHRcdF9yb290VGltZWxpbmUuX3N0YXJ0VGltZSA9IF90aWNrZXIudGltZTtcblx0XHRfcm9vdEZyYW1lc1RpbWVsaW5lLl9zdGFydFRpbWUgPSBfdGlja2VyLmZyYW1lO1xuXHRcdF9yb290VGltZWxpbmUuX2FjdGl2ZSA9IF9yb290RnJhbWVzVGltZWxpbmUuX2FjdGl2ZSA9IHRydWU7XG5cdFx0c2V0VGltZW91dChfbGF6eVJlbmRlciwgMSk7IC8vb24gc29tZSBtb2JpbGUgZGV2aWNlcywgdGhlcmUgaXNuJ3QgYSBcInRpY2tcIiBiZWZvcmUgY29kZSBydW5zIHdoaWNoIG1lYW5zIGFueSBsYXp5IHJlbmRlcnMgd291bGRuJ3QgcnVuIGJlZm9yZSB0aGUgbmV4dCBvZmZpY2lhbCBcInRpY2tcIi5cblxuXHRcdEFuaW1hdGlvbi5fdXBkYXRlUm9vdCA9IFR3ZWVuTGl0ZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGksIGEsIHA7XG5cdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pZiBjb2RlIGlzIHJ1biBvdXRzaWRlIG9mIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgbG9vcCwgdGhlcmUgbWF5IGJlIHR3ZWVucyBxdWV1ZWQgQUZURVIgdGhlIGVuZ2luZSByZWZyZXNoZWQsIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGFueSBwZW5kaW5nIHJlbmRlcnMgb2NjdXIgYmVmb3JlIHdlIHJlZnJlc2ggYWdhaW4uXG5cdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfcm9vdFRpbWVsaW5lLnJlbmRlcigoX3RpY2tlci50aW1lIC0gX3Jvb3RUaW1lbGluZS5fc3RhcnRUaW1lKSAqIF9yb290VGltZWxpbmUuX3RpbWVTY2FsZSwgZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0X3Jvb3RGcmFtZXNUaW1lbGluZS5yZW5kZXIoKF90aWNrZXIuZnJhbWUgLSBfcm9vdEZyYW1lc1RpbWVsaW5lLl9zdGFydFRpbWUpICogX3Jvb3RGcmFtZXNUaW1lbGluZS5fdGltZVNjYWxlLCBmYWxzZSwgZmFsc2UpO1xuXHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX3RpY2tlci5mcmFtZSA+PSBfbmV4dEdDRnJhbWUpIHsgLy9kdW1wIGdhcmJhZ2UgZXZlcnkgMTIwIGZyYW1lcyBvciB3aGF0ZXZlciB0aGUgdXNlciBzZXRzIFR3ZWVuTGl0ZS5hdXRvU2xlZXAgdG9cblx0XHRcdFx0XHRfbmV4dEdDRnJhbWUgPSBfdGlja2VyLmZyYW1lICsgKHBhcnNlSW50KFR3ZWVuTGl0ZS5hdXRvU2xlZXAsIDEwKSB8fCAxMjApO1xuXHRcdFx0XHRcdGZvciAocCBpbiBfdHdlZW5Mb29rdXApIHtcblx0XHRcdFx0XHRcdGEgPSBfdHdlZW5Mb29rdXBbcF0udHdlZW5zO1xuXHRcdFx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChhW2ldLl9nYykge1xuXHRcdFx0XHRcdFx0XHRcdGEuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoYS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0XHRcdFx0ZGVsZXRlIF90d2Vlbkxvb2t1cFtwXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly9pZiB0aGVyZSBhcmUgbm8gbW9yZSB0d2VlbnMgaW4gdGhlIHJvb3QgdGltZWxpbmVzLCBvciBpZiB0aGV5J3JlIGFsbCBwYXVzZWQsIG1ha2UgdGhlIF90aW1lciBzbGVlcCB0byByZWR1Y2UgbG9hZCBvbiB0aGUgQ1BVIHNsaWdodGx5XG5cdFx0XHRcdFx0cCA9IF9yb290VGltZWxpbmUuX2ZpcnN0O1xuXHRcdFx0XHRcdGlmICghcCB8fCBwLl9wYXVzZWQpIGlmIChUd2VlbkxpdGUuYXV0b1NsZWVwICYmICFfcm9vdEZyYW1lc1RpbWVsaW5lLl9maXJzdCAmJiBfdGlja2VyLl9saXN0ZW5lcnMudGljay5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0XHRcdHdoaWxlIChwICYmIHAuX3BhdXNlZCkge1xuXHRcdFx0XHRcdFx0XHRwID0gcC5fbmV4dDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghcCkge1xuXHRcdFx0XHRcdFx0XHRfdGlja2VyLnNsZWVwKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0X3RpY2tlci5hZGRFdmVudExpc3RlbmVyKFwidGlja1wiLCBBbmltYXRpb24uX3VwZGF0ZVJvb3QpO1xuXG5cdFx0dmFyIF9yZWdpc3RlciA9IGZ1bmN0aW9uKHRhcmdldCwgdHdlZW4sIHNjcnViKSB7XG5cdFx0XHRcdHZhciBpZCA9IHRhcmdldC5fZ3NUd2VlbklELCBhLCBpO1xuXHRcdFx0XHRpZiAoIV90d2Vlbkxvb2t1cFtpZCB8fCAodGFyZ2V0Ll9nc1R3ZWVuSUQgPSBpZCA9IFwidFwiICsgKF90d2Vlbkxvb2t1cE51bSsrKSldKSB7XG5cdFx0XHRcdFx0X3R3ZWVuTG9va3VwW2lkXSA9IHt0YXJnZXQ6dGFyZ2V0LCB0d2VlbnM6W119O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0d2Vlbikge1xuXHRcdFx0XHRcdGEgPSBfdHdlZW5Mb29rdXBbaWRdLnR3ZWVucztcblx0XHRcdFx0XHRhWyhpID0gYS5sZW5ndGgpXSA9IHR3ZWVuO1xuXHRcdFx0XHRcdGlmIChzY3J1Yikge1xuXHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChhW2ldID09PSB0d2Vlbikge1xuXHRcdFx0XHRcdFx0XHRcdGEuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBfdHdlZW5Mb29rdXBbaWRdLnR3ZWVucztcblx0XHRcdH0sXG5cdFx0XHRfb25PdmVyd3JpdGUgPSBmdW5jdGlvbihvdmVyd3JpdHRlblR3ZWVuLCBvdmVyd3JpdGluZ1R3ZWVuLCB0YXJnZXQsIGtpbGxlZFByb3BzKSB7XG5cdFx0XHRcdHZhciBmdW5jID0gb3ZlcndyaXR0ZW5Ud2Vlbi52YXJzLm9uT3ZlcndyaXRlLCByMSwgcjI7XG5cdFx0XHRcdGlmIChmdW5jKSB7XG5cdFx0XHRcdFx0cjEgPSBmdW5jKG92ZXJ3cml0dGVuVHdlZW4sIG92ZXJ3cml0aW5nVHdlZW4sIHRhcmdldCwga2lsbGVkUHJvcHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGZ1bmMgPSBUd2VlbkxpdGUub25PdmVyd3JpdGU7XG5cdFx0XHRcdGlmIChmdW5jKSB7XG5cdFx0XHRcdFx0cjIgPSBmdW5jKG92ZXJ3cml0dGVuVHdlZW4sIG92ZXJ3cml0aW5nVHdlZW4sIHRhcmdldCwga2lsbGVkUHJvcHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAocjEgIT09IGZhbHNlICYmIHIyICE9PSBmYWxzZSk7XG5cdFx0XHR9LFxuXHRcdFx0X2FwcGx5T3ZlcndyaXRlID0gZnVuY3Rpb24odGFyZ2V0LCB0d2VlbiwgcHJvcHMsIG1vZGUsIHNpYmxpbmdzKSB7XG5cdFx0XHRcdHZhciBpLCBjaGFuZ2VkLCBjdXJUd2VlbiwgbDtcblx0XHRcdFx0aWYgKG1vZGUgPT09IDEgfHwgbW9kZSA+PSA0KSB7XG5cdFx0XHRcdFx0bCA9IHNpYmxpbmdzLmxlbmd0aDtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRpZiAoKGN1clR3ZWVuID0gc2libGluZ3NbaV0pICE9PSB0d2Vlbikge1xuXHRcdFx0XHRcdFx0XHRpZiAoIWN1clR3ZWVuLl9nYykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjdXJUd2Vlbi5fa2lsbChudWxsLCB0YXJnZXQsIHR3ZWVuKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKG1vZGUgPT09IDUpIHtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vTk9URTogQWRkIDAuMDAwMDAwMDAwMSB0byBvdmVyY29tZSBmbG9hdGluZyBwb2ludCBlcnJvcnMgdGhhdCBjYW4gY2F1c2UgdGhlIHN0YXJ0VGltZSB0byBiZSBWRVJZIHNsaWdodGx5IG9mZiAod2hlbiBhIHR3ZWVuJ3MgdGltZSgpIGlzIHNldCBmb3IgZXhhbXBsZSlcblx0XHRcdFx0dmFyIHN0YXJ0VGltZSA9IHR3ZWVuLl9zdGFydFRpbWUgKyBfdGlueU51bSxcblx0XHRcdFx0XHRvdmVybGFwcyA9IFtdLFxuXHRcdFx0XHRcdG9Db3VudCA9IDAsXG5cdFx0XHRcdFx0emVyb0R1ciA9ICh0d2Vlbi5fZHVyYXRpb24gPT09IDApLFxuXHRcdFx0XHRcdGdsb2JhbFN0YXJ0O1xuXHRcdFx0XHRpID0gc2libGluZ3MubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAoKGN1clR3ZWVuID0gc2libGluZ3NbaV0pID09PSB0d2VlbiB8fCBjdXJUd2Vlbi5fZ2MgfHwgY3VyVHdlZW4uX3BhdXNlZCkge1xuXHRcdFx0XHRcdFx0Ly9pZ25vcmVcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGN1clR3ZWVuLl90aW1lbGluZSAhPT0gdHdlZW4uX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0XHRnbG9iYWxTdGFydCA9IGdsb2JhbFN0YXJ0IHx8IF9jaGVja092ZXJsYXAodHdlZW4sIDAsIHplcm9EdXIpO1xuXHRcdFx0XHRcdFx0aWYgKF9jaGVja092ZXJsYXAoY3VyVHdlZW4sIGdsb2JhbFN0YXJ0LCB6ZXJvRHVyKSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRvdmVybGFwc1tvQ291bnQrK10gPSBjdXJUd2Vlbjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGN1clR3ZWVuLl9zdGFydFRpbWUgPD0gc3RhcnRUaW1lKSBpZiAoY3VyVHdlZW4uX3N0YXJ0VGltZSArIGN1clR3ZWVuLnRvdGFsRHVyYXRpb24oKSAvIGN1clR3ZWVuLl90aW1lU2NhbGUgPiBzdGFydFRpbWUpIGlmICghKCh6ZXJvRHVyIHx8ICFjdXJUd2Vlbi5faW5pdHRlZCkgJiYgc3RhcnRUaW1lIC0gY3VyVHdlZW4uX3N0YXJ0VGltZSA8PSAwLjAwMDAwMDAwMDIpKSB7XG5cdFx0XHRcdFx0XHRvdmVybGFwc1tvQ291bnQrK10gPSBjdXJUd2Vlbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpID0gb0NvdW50O1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRjdXJUd2VlbiA9IG92ZXJsYXBzW2ldO1xuXHRcdFx0XHRcdGlmIChtb2RlID09PSAyKSBpZiAoY3VyVHdlZW4uX2tpbGwocHJvcHMsIHRhcmdldCwgdHdlZW4pKSB7XG5cdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG1vZGUgIT09IDIgfHwgKCFjdXJUd2Vlbi5fZmlyc3RQVCAmJiBjdXJUd2Vlbi5faW5pdHRlZCkpIHtcblx0XHRcdFx0XHRcdGlmIChtb2RlICE9PSAyICYmICFfb25PdmVyd3JpdGUoY3VyVHdlZW4sIHR3ZWVuKSkge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChjdXJUd2Vlbi5fZW5hYmxlZChmYWxzZSwgZmFsc2UpKSB7IC8vaWYgYWxsIHByb3BlcnR5IHR3ZWVucyBoYXZlIGJlZW4gb3ZlcndyaXR0ZW4sIGtpbGwgdGhlIHR3ZWVuLlxuXHRcdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0XHR9LFxuXHRcdFx0X2NoZWNrT3ZlcmxhcCA9IGZ1bmN0aW9uKHR3ZWVuLCByZWZlcmVuY2UsIHplcm9EdXIpIHtcblx0XHRcdFx0dmFyIHRsID0gdHdlZW4uX3RpbWVsaW5lLFxuXHRcdFx0XHRcdHRzID0gdGwuX3RpbWVTY2FsZSxcblx0XHRcdFx0XHR0ID0gdHdlZW4uX3N0YXJ0VGltZTtcblx0XHRcdFx0d2hpbGUgKHRsLl90aW1lbGluZSkge1xuXHRcdFx0XHRcdHQgKz0gdGwuX3N0YXJ0VGltZTtcblx0XHRcdFx0XHR0cyAqPSB0bC5fdGltZVNjYWxlO1xuXHRcdFx0XHRcdGlmICh0bC5fcGF1c2VkKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLTEwMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGwgPSB0bC5fdGltZWxpbmU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dCAvPSB0cztcblx0XHRcdFx0cmV0dXJuICh0ID4gcmVmZXJlbmNlKSA/IHQgLSByZWZlcmVuY2UgOiAoKHplcm9EdXIgJiYgdCA9PT0gcmVmZXJlbmNlKSB8fCAoIXR3ZWVuLl9pbml0dGVkICYmIHQgLSByZWZlcmVuY2UgPCAyICogX3RpbnlOdW0pKSA/IF90aW55TnVtIDogKCh0ICs9IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSAvIHR3ZWVuLl90aW1lU2NhbGUgLyB0cykgPiByZWZlcmVuY2UgKyBfdGlueU51bSkgPyAwIDogdCAtIHJlZmVyZW5jZSAtIF90aW55TnVtO1xuXHRcdFx0fTtcblxuXG4vLy0tLS0gVHdlZW5MaXRlIGluc3RhbmNlIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHAuX2luaXQgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB2ID0gdGhpcy52YXJzLFxuXHRcdFx0XHRvcCA9IHRoaXMuX292ZXJ3cml0dGVuUHJvcHMsXG5cdFx0XHRcdGR1ciA9IHRoaXMuX2R1cmF0aW9uLFxuXHRcdFx0XHRpbW1lZGlhdGUgPSAhIXYuaW1tZWRpYXRlUmVuZGVyLFxuXHRcdFx0XHRlYXNlID0gdi5lYXNlLFxuXHRcdFx0XHRpLCBpbml0UGx1Z2lucywgcHQsIHAsIHN0YXJ0VmFycywgbDtcblx0XHRcdGlmICh2LnN0YXJ0QXQpIHtcblx0XHRcdFx0aWYgKHRoaXMuX3N0YXJ0QXQpIHtcblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LnJlbmRlcigtMSwgdHJ1ZSk7IC8vaWYgd2UndmUgcnVuIGEgc3RhcnRBdCBwcmV2aW91c2x5ICh3aGVuIHRoZSB0d2VlbiBpbnN0YW50aWF0ZWQpLCB3ZSBzaG91bGQgcmV2ZXJ0IGl0IHNvIHRoYXQgdGhlIHZhbHVlcyByZS1pbnN0YW50aWF0ZSBjb3JyZWN0bHkgcGFydGljdWxhcmx5IGZvciByZWxhdGl2ZSB0d2VlbnMuIFdpdGhvdXQgdGhpcywgYSBUd2VlbkxpdGUuZnJvbVRvKG9iaiwgMSwge3g6XCIrPTEwMFwifSwge3g6XCItPTEwMFwifSksIGZvciBleGFtcGxlLCB3b3VsZCBhY3R1YWxseSBqdW1wIHRvICs9MjAwIGJlY2F1c2UgdGhlIHN0YXJ0QXQgd291bGQgcnVuIHR3aWNlLCBkb3VibGluZyB0aGUgcmVsYXRpdmUgY2hhbmdlLlxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQua2lsbCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0YXJ0VmFycyA9IHt9O1xuXHRcdFx0XHRmb3IgKHAgaW4gdi5zdGFydEF0KSB7IC8vY29weSB0aGUgcHJvcGVydGllcy92YWx1ZXMgaW50byBhIG5ldyBvYmplY3QgdG8gYXZvaWQgY29sbGlzaW9ucywgbGlrZSB2YXIgdG8gPSB7eDowfSwgZnJvbSA9IHt4OjUwMH07IHRpbWVsaW5lLmZyb21UbyhlLCAxLCBmcm9tLCB0bykuZnJvbVRvKGUsIDEsIHRvLCBmcm9tKTtcblx0XHRcdFx0XHRzdGFydFZhcnNbcF0gPSB2LnN0YXJ0QXRbcF07XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RhcnRWYXJzLm92ZXJ3cml0ZSA9IGZhbHNlO1xuXHRcdFx0XHRzdGFydFZhcnMuaW1tZWRpYXRlUmVuZGVyID0gdHJ1ZTtcblx0XHRcdFx0c3RhcnRWYXJzLmxhenkgPSAoaW1tZWRpYXRlICYmIHYubGF6eSAhPT0gZmFsc2UpO1xuXHRcdFx0XHRzdGFydFZhcnMuc3RhcnRBdCA9IHN0YXJ0VmFycy5kZWxheSA9IG51bGw7IC8vbm8gbmVzdGluZyBvZiBzdGFydEF0IG9iamVjdHMgYWxsb3dlZCAob3RoZXJ3aXNlIGl0IGNvdWxkIGNhdXNlIGFuIGluZmluaXRlIGxvb3ApLlxuXHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gVHdlZW5MaXRlLnRvKHRoaXMudGFyZ2V0LCAwLCBzdGFydFZhcnMpO1xuXHRcdFx0XHRpZiAoaW1tZWRpYXRlKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWUgPiAwKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gbnVsbDsgLy90d2VlbnMgdGhhdCByZW5kZXIgaW1tZWRpYXRlbHkgKGxpa2UgbW9zdCBmcm9tKCkgYW5kIGZyb21UbygpIHR3ZWVucykgc2hvdWxkbid0IHJldmVydCB3aGVuIHRoZWlyIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgcGFzdCB0aGUgc3RhcnRUaW1lIGJlY2F1c2UgdGhlIGluaXRpYWwgcmVuZGVyIGNvdWxkIGhhdmUgaGFwcGVuZWQgYW55dGltZSBhbmQgaXQgc2hvdWxkbid0IGJlIGRpcmVjdGx5IGNvcnJlbGF0ZWQgdG8gdGhpcyB0d2VlbidzIHN0YXJ0VGltZS4gSW1hZ2luZSBzZXR0aW5nIHVwIGEgY29tcGxleCBhbmltYXRpb24gd2hlcmUgdGhlIGJlZ2lubmluZyBzdGF0ZXMgb2YgdmFyaW91cyBvYmplY3RzIGFyZSByZW5kZXJlZCBpbW1lZGlhdGVseSBidXQgdGhlIHR3ZWVuIGRvZXNuJ3QgaGFwcGVuIGZvciBxdWl0ZSBzb21lIHRpbWUgLSBpZiB3ZSByZXZlcnQgdG8gdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcyBzb29uIGFzIHRoZSBwbGF5aGVhZCBnb2VzIGJhY2t3YXJkIHBhc3QgdGhlIHR3ZWVuJ3Mgc3RhcnRUaW1lLCBpdCB3aWxsIHRocm93IHRoaW5ncyBvZmYgdmlzdWFsbHkuIFJldmVyc2lvbiBzaG91bGQgb25seSBoYXBwZW4gaW4gVGltZWxpbmVMaXRlL01heCBpbnN0YW5jZXMgd2hlcmUgaW1tZWRpYXRlUmVuZGVyIHdhcyBmYWxzZSAod2hpY2ggaXMgdGhlIGRlZmF1bHQgaW4gdGhlIGNvbnZlbmllbmNlIG1ldGhvZHMgbGlrZSBmcm9tKCkpLlxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZHVyICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47IC8vd2Ugc2tpcCBpbml0aWFsaXphdGlvbiBoZXJlIHNvIHRoYXQgb3ZlcndyaXRpbmcgZG9lc24ndCBvY2N1ciB1bnRpbCB0aGUgdHdlZW4gYWN0dWFsbHkgYmVnaW5zLiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgc2V2ZXJhbCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZSB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0L3Byb3BlcnRpZXMgdG8gZHJvcCBpbnRvIGEgVGltZWxpbmVMaXRlIG9yIFRpbWVsaW5lTWF4LCB0aGUgbGFzdCBvbmUgY3JlYXRlZCB3b3VsZCBvdmVyd3JpdGUgdGhlIGZpcnN0IG9uZXMgYmVjYXVzZSB0aGV5IGRpZG4ndCBnZXQgcGxhY2VkIGludG8gdGhlIHRpbWVsaW5lIHlldCBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciBvY2N1cnMgYW5kIGtpY2tzIGluIG92ZXJ3cml0aW5nLlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh2LnJ1bkJhY2t3YXJkcyAmJiBkdXIgIT09IDApIHtcblx0XHRcdFx0Ly9mcm9tKCkgdHdlZW5zIG11c3QgYmUgaGFuZGxlZCB1bmlxdWVseTogdGhlaXIgYmVnaW5uaW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkIGJ1dCB3ZSBkb24ndCB3YW50IG92ZXJ3cml0aW5nIHRvIG9jY3VyIHlldCAod2hlbiB0aW1lIGlzIHN0aWxsIDApLiBXYWl0IHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMgYmVmb3JlIGRvaW5nIGFsbCB0aGUgcm91dGluZXMgbGlrZSBvdmVyd3JpdGluZy4gQXQgdGhhdCB0aW1lLCB3ZSBzaG91bGQgcmVuZGVyIGF0IHRoZSBFTkQgb2YgdGhlIHR3ZWVuIHRvIGVuc3VyZSB0aGF0IHRoaW5ncyBpbml0aWFsaXplIGNvcnJlY3RseSAocmVtZW1iZXIsIGZyb20oKSB0d2VlbnMgZ28gYmFja3dhcmRzKVxuXHRcdFx0XHRpZiAodGhpcy5fc3RhcnRBdCkge1xuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKTtcblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LmtpbGwoKTtcblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gbnVsbDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZSAhPT0gMCkgeyAvL2luIHJhcmUgY2FzZXMgKGxpa2UgaWYgYSBmcm9tKCkgdHdlZW4gcnVucyBhbmQgdGhlbiBpcyBpbnZhbGlkYXRlKCktZWQpLCBpbW1lZGlhdGVSZW5kZXIgY291bGQgYmUgdHJ1ZSBidXQgdGhlIGluaXRpYWwgZm9yY2VkLXJlbmRlciBnZXRzIHNraXBwZWQsIHNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBmb3JjZSB0aGUgcmVuZGVyIGluIHRoaXMgY29udGV4dCB3aGVuIHRoZSBfdGltZSBpcyBncmVhdGVyIHRoYW4gMFxuXHRcdFx0XHRcdFx0aW1tZWRpYXRlID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0ge307XG5cdFx0XHRcdFx0Zm9yIChwIGluIHYpIHsgLy9jb3B5IHByb3BzIGludG8gYSBuZXcgb2JqZWN0IGFuZCBza2lwIGFueSByZXNlcnZlZCBwcm9wcywgb3RoZXJ3aXNlIG9uQ29tcGxldGUgb3Igb25VcGRhdGUgb3Igb25TdGFydCBjb3VsZCBmaXJlLiBXZSBzaG91bGQsIGhvd2V2ZXIsIHBlcm1pdCBhdXRvQ1NTIHRvIGdvIHRocm91Z2guXG5cdFx0XHRcdFx0XHRpZiAoIV9yZXNlcnZlZFByb3BzW3BdIHx8IHAgPT09IFwiYXV0b0NTU1wiKSB7XG5cdFx0XHRcdFx0XHRcdHB0W3BdID0gdltwXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQub3ZlcndyaXRlID0gMDtcblx0XHRcdFx0XHRwdC5kYXRhID0gXCJpc0Zyb21TdGFydFwiOyAvL3dlIHRhZyB0aGUgdHdlZW4gd2l0aCBhcyBcImlzRnJvbVN0YXJ0XCIgc28gdGhhdCBpZiBbaW5zaWRlIGEgcGx1Z2luXSB3ZSBuZWVkIHRvIG9ubHkgZG8gc29tZXRoaW5nIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuLCB3ZSBoYXZlIGEgd2F5IG9mIGlkZW50aWZ5aW5nIHRoaXMgdHdlZW4gYXMgbWVyZWx5IHRoZSBvbmUgdGhhdCdzIHNldHRpbmcgdGhlIGJlZ2lubmluZyB2YWx1ZXMgZm9yIGEgXCJmcm9tKClcIiB0d2Vlbi4gRm9yIGV4YW1wbGUsIGNsZWFyUHJvcHMgaW4gQ1NTUGx1Z2luIHNob3VsZCBvbmx5IGdldCBhcHBsaWVkIGF0IHRoZSB2ZXJ5IEVORCBvZiBhIHR3ZWVuIGFuZCB3aXRob3V0IHRoaXMgdGFnLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbi5cblx0XHRcdFx0XHRwdC5sYXp5ID0gKGltbWVkaWF0ZSAmJiB2LmxhenkgIT09IGZhbHNlKTtcblx0XHRcdFx0XHRwdC5pbW1lZGlhdGVSZW5kZXIgPSBpbW1lZGlhdGU7IC8vemVyby1kdXJhdGlvbiB0d2VlbnMgcmVuZGVyIGltbWVkaWF0ZWx5IGJ5IGRlZmF1bHQsIGJ1dCBpZiB3ZSdyZSBub3Qgc3BlY2lmaWNhbGx5IGluc3RydWN0ZWQgdG8gcmVuZGVyIHRoaXMgdHdlZW4gaW1tZWRpYXRlbHksIHdlIHNob3VsZCBza2lwIHRoaXMgYW5kIG1lcmVseSBfaW5pdCgpIHRvIHJlY29yZCB0aGUgc3RhcnRpbmcgdmFsdWVzIChyZW5kZXJpbmcgdGhlbSBpbW1lZGlhdGVseSB3b3VsZCBwdXNoIHRoZW0gdG8gY29tcGxldGlvbiB3aGljaCBpcyB3YXN0ZWZ1bCBpbiB0aGF0IGNhc2UgLSB3ZSdkIGhhdmUgdG8gcmVuZGVyKC0xKSBpbW1lZGlhdGVseSBhZnRlcilcblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gVHdlZW5MaXRlLnRvKHRoaXMudGFyZ2V0LCAwLCBwdCk7XG5cdFx0XHRcdFx0aWYgKCFpbW1lZGlhdGUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQuX2luaXQoKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGluaXRpYWwgdmFsdWVzIGFyZSByZWNvcmRlZFxuXHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5fZW5hYmxlZChmYWxzZSk7IC8vbm8gbmVlZCB0byBoYXZlIHRoZSB0d2VlbiByZW5kZXIgb24gdGhlIG5leHQgY3ljbGUuIERpc2FibGUgaXQgYmVjYXVzZSB3ZSdsbCBhbHdheXMgbWFudWFsbHkgY29udHJvbCB0aGUgcmVuZGVycyBvZiB0aGUgX3N0YXJ0QXQgdHdlZW4uXG5cdFx0XHRcdFx0XHRpZiAodGhpcy52YXJzLmltbWVkaWF0ZVJlbmRlcikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9zdGFydEF0ID0gbnVsbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX3RpbWUgPT09IDApIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuX2Vhc2UgPSBlYXNlID0gKCFlYXNlKSA/IFR3ZWVuTGl0ZS5kZWZhdWx0RWFzZSA6IChlYXNlIGluc3RhbmNlb2YgRWFzZSkgPyBlYXNlIDogKHR5cGVvZihlYXNlKSA9PT0gXCJmdW5jdGlvblwiKSA/IG5ldyBFYXNlKGVhc2UsIHYuZWFzZVBhcmFtcykgOiBfZWFzZU1hcFtlYXNlXSB8fCBUd2VlbkxpdGUuZGVmYXVsdEVhc2U7XG5cdFx0XHRpZiAodi5lYXNlUGFyYW1zIGluc3RhbmNlb2YgQXJyYXkgJiYgZWFzZS5jb25maWcpIHtcblx0XHRcdFx0dGhpcy5fZWFzZSA9IGVhc2UuY29uZmlnLmFwcGx5KGVhc2UsIHYuZWFzZVBhcmFtcyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9lYXNlVHlwZSA9IHRoaXMuX2Vhc2UuX3R5cGU7XG5cdFx0XHR0aGlzLl9lYXNlUG93ZXIgPSB0aGlzLl9lYXNlLl9wb3dlcjtcblx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBudWxsO1xuXG5cdFx0XHRpZiAodGhpcy5fdGFyZ2V0cykge1xuXHRcdFx0XHRsID0gdGhpcy5fdGFyZ2V0cy5sZW5ndGg7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMuX2luaXRQcm9wcyggdGhpcy5fdGFyZ2V0c1tpXSwgKHRoaXMuX3Byb3BMb29rdXBbaV0gPSB7fSksIHRoaXMuX3NpYmxpbmdzW2ldLCAob3AgPyBvcFtpXSA6IG51bGwpLCBpKSApIHtcblx0XHRcdFx0XHRcdGluaXRQbHVnaW5zID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGluaXRQbHVnaW5zID0gdGhpcy5faW5pdFByb3BzKHRoaXMudGFyZ2V0LCB0aGlzLl9wcm9wTG9va3VwLCB0aGlzLl9zaWJsaW5ncywgb3AsIDApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaW5pdFBsdWdpbnMpIHtcblx0XHRcdFx0VHdlZW5MaXRlLl9vblBsdWdpbkV2ZW50KFwiX29uSW5pdEFsbFByb3BzXCIsIHRoaXMpOyAvL3Jlb3JkZXJzIHRoZSBhcnJheSBpbiBvcmRlciBvZiBwcmlvcml0eS4gVXNlcyBhIHN0YXRpYyBUd2VlblBsdWdpbiBtZXRob2QgaW4gb3JkZXIgdG8gbWluaW1pemUgZmlsZSBzaXplIGluIFR3ZWVuTGl0ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKG9wKSBpZiAoIXRoaXMuX2ZpcnN0UFQpIGlmICh0eXBlb2YodGhpcy50YXJnZXQpICE9PSBcImZ1bmN0aW9uXCIpIHsgLy9pZiBhbGwgdHdlZW5pbmcgcHJvcGVydGllcyBoYXZlIGJlZW4gb3ZlcndyaXR0ZW4sIGtpbGwgdGhlIHR3ZWVuLiBJZiB0aGUgdGFyZ2V0IGlzIGEgZnVuY3Rpb24sIGl0J3MgcHJvYmFibHkgYSBkZWxheWVkQ2FsbCBzbyBsZXQgaXQgbGl2ZS5cblx0XHRcdFx0dGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHYucnVuQmFja3dhcmRzKSB7XG5cdFx0XHRcdHB0ID0gdGhpcy5fZmlyc3RQVDtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0cHQucyArPSBwdC5jO1xuXHRcdFx0XHRcdHB0LmMgPSAtcHQuYztcblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9vblVwZGF0ZSA9IHYub25VcGRhdGU7XG5cdFx0XHR0aGlzLl9pbml0dGVkID0gdHJ1ZTtcblx0XHR9O1xuXG5cdFx0cC5faW5pdFByb3BzID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wTG9va3VwLCBzaWJsaW5ncywgb3ZlcndyaXR0ZW5Qcm9wcywgaW5kZXgpIHtcblx0XHRcdHZhciBwLCBpLCBpbml0UGx1Z2lucywgcGx1Z2luLCBwdCwgdjtcblx0XHRcdGlmICh0YXJnZXQgPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChfbGF6eUxvb2t1cFt0YXJnZXQuX2dzVHdlZW5JRF0pIHtcblx0XHRcdFx0X2xhenlSZW5kZXIoKTsgLy9pZiBvdGhlciB0d2VlbnMgb2YgdGhlIHNhbWUgdGFyZ2V0IGhhdmUgcmVjZW50bHkgaW5pdHRlZCBidXQgaGF2ZW4ndCByZW5kZXJlZCB5ZXQsIHdlJ3ZlIGdvdCB0byBmb3JjZSB0aGUgcmVuZGVyIHNvIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcmUgY29ycmVjdCAoaW1hZ2luZSBwb3B1bGF0aW5nIGEgdGltZWxpbmUgd2l0aCBhIGJ1bmNoIG9mIHNlcXVlbnRpYWwgdHdlZW5zIGFuZCB0aGVuIGp1bXBpbmcgdG8gdGhlIGVuZClcblx0XHRcdH1cblxuXHRcdFx0aWYgKCF0aGlzLnZhcnMuY3NzKSBpZiAodGFyZ2V0LnN0eWxlKSBpZiAodGFyZ2V0ICE9PSB3aW5kb3cgJiYgdGFyZ2V0Lm5vZGVUeXBlKSBpZiAoX3BsdWdpbnMuY3NzKSBpZiAodGhpcy52YXJzLmF1dG9DU1MgIT09IGZhbHNlKSB7IC8vaXQncyBzbyBjb21tb24gdG8gdXNlIFR3ZWVuTGl0ZS9NYXggdG8gYW5pbWF0ZSB0aGUgY3NzIG9mIERPTSBlbGVtZW50cywgd2UgYXNzdW1lIHRoYXQgaWYgdGhlIHRhcmdldCBpcyBhIERPTSBlbGVtZW50LCB0aGF0J3Mgd2hhdCBpcyBpbnRlbmRlZCAoYSBjb252ZW5pZW5jZSBzbyB0aGF0IHVzZXJzIGRvbid0IGhhdmUgdG8gd3JhcCB0aGluZ3MgaW4gY3NzOnt9LCBhbHRob3VnaCB3ZSBzdGlsbCByZWNvbW1lbmQgaXQgZm9yIGEgc2xpZ2h0IHBlcmZvcm1hbmNlIGJvb3N0IGFuZCBiZXR0ZXIgc3BlY2lmaWNpdHkpLiBOb3RlOiB3ZSBjYW5ub3QgY2hlY2sgXCJub2RlVHlwZVwiIG9uIHRoZSB3aW5kb3cgaW5zaWRlIGFuIGlmcmFtZS5cblx0XHRcdFx0X2F1dG9DU1ModGhpcy52YXJzLCB0YXJnZXQpO1xuXHRcdFx0fVxuXHRcdFx0Zm9yIChwIGluIHRoaXMudmFycykge1xuXHRcdFx0XHR2ID0gdGhpcy52YXJzW3BdO1xuXHRcdFx0XHRpZiAoX3Jlc2VydmVkUHJvcHNbcF0pIHtcblx0XHRcdFx0XHRpZiAodikgaWYgKCh2IGluc3RhbmNlb2YgQXJyYXkpIHx8ICh2LnB1c2ggJiYgX2lzQXJyYXkodikpKSBpZiAodi5qb2luKFwiXCIpLmluZGV4T2YoXCJ7c2VsZn1cIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnZhcnNbcF0gPSB2ID0gdGhpcy5fc3dhcFNlbGZJblBhcmFtcyh2LCB0aGlzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmIChfcGx1Z2luc1twXSAmJiAocGx1Z2luID0gbmV3IF9wbHVnaW5zW3BdKCkpLl9vbkluaXRUd2Vlbih0YXJnZXQsIHRoaXMudmFyc1twXSwgdGhpcywgaW5kZXgpKSB7XG5cblx0XHRcdFx0XHQvL3QgLSB0YXJnZXQgXHRcdFtvYmplY3RdXG5cdFx0XHRcdFx0Ly9wIC0gcHJvcGVydHkgXHRcdFtzdHJpbmddXG5cdFx0XHRcdFx0Ly9zIC0gc3RhcnRcdFx0XHRbbnVtYmVyXVxuXHRcdFx0XHRcdC8vYyAtIGNoYW5nZVx0XHRbbnVtYmVyXVxuXHRcdFx0XHRcdC8vZiAtIGlzRnVuY3Rpb25cdFtib29sZWFuXVxuXHRcdFx0XHRcdC8vbiAtIG5hbWVcdFx0XHRbc3RyaW5nXVxuXHRcdFx0XHRcdC8vcGcgLSBpc1BsdWdpbiBcdFtib29sZWFuXVxuXHRcdFx0XHRcdC8vcHIgLSBwcmlvcml0eVx0XHRbbnVtYmVyXVxuXHRcdFx0XHRcdC8vbSAtIG1vZCAgICAgICAgICAgW2Z1bmN0aW9uIHwgMF1cblx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQgPSB7X25leHQ6dGhpcy5fZmlyc3RQVCwgdDpwbHVnaW4sIHA6XCJzZXRSYXRpb1wiLCBzOjAsIGM6MSwgZjoxLCBuOnAsIHBnOjEsIHByOnBsdWdpbi5fcHJpb3JpdHksIG06MH07XG5cdFx0XHRcdFx0aSA9IHBsdWdpbi5fb3ZlcndyaXRlUHJvcHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0cHJvcExvb2t1cFtwbHVnaW4uX292ZXJ3cml0ZVByb3BzW2ldXSA9IHRoaXMuX2ZpcnN0UFQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwbHVnaW4uX3ByaW9yaXR5IHx8IHBsdWdpbi5fb25Jbml0QWxsUHJvcHMpIHtcblx0XHRcdFx0XHRcdGluaXRQbHVnaW5zID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBsdWdpbi5fb25EaXNhYmxlIHx8IHBsdWdpbi5fb25FbmFibGUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocHQuX25leHQpIHtcblx0XHRcdFx0XHRcdHB0Ll9uZXh0Ll9wcmV2ID0gcHQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHJvcExvb2t1cFtwXSA9IF9hZGRQcm9wVHdlZW4uY2FsbCh0aGlzLCB0YXJnZXQsIHAsIFwiZ2V0XCIsIHYsIHAsIDAsIG51bGwsIHRoaXMudmFycy5zdHJpbmdGaWx0ZXIsIGluZGV4KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3ZlcndyaXR0ZW5Qcm9wcykgaWYgKHRoaXMuX2tpbGwob3ZlcndyaXR0ZW5Qcm9wcywgdGFyZ2V0KSkgeyAvL2Fub3RoZXIgdHdlZW4gbWF5IGhhdmUgdHJpZWQgdG8gb3ZlcndyaXRlIHByb3BlcnRpZXMgb2YgdGhpcyB0d2VlbiBiZWZvcmUgaW5pdCgpIHdhcyBjYWxsZWQgKGxpa2UgaWYgdHdvIHR3ZWVucyBzdGFydCBhdCB0aGUgc2FtZSB0aW1lLCB0aGUgb25lIGNyZWF0ZWQgc2Vjb25kIHdpbGwgcnVuIGZpcnN0KVxuXHRcdFx0XHRyZXR1cm4gdGhpcy5faW5pdFByb3BzKHRhcmdldCwgcHJvcExvb2t1cCwgc2libGluZ3MsIG92ZXJ3cml0dGVuUHJvcHMsIGluZGV4KTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9vdmVyd3JpdGUgPiAxKSBpZiAodGhpcy5fZmlyc3RQVCkgaWYgKHNpYmxpbmdzLmxlbmd0aCA+IDEpIGlmIChfYXBwbHlPdmVyd3JpdGUodGFyZ2V0LCB0aGlzLCBwcm9wTG9va3VwLCB0aGlzLl9vdmVyd3JpdGUsIHNpYmxpbmdzKSkge1xuXHRcdFx0XHR0aGlzLl9raWxsKHByb3BMb29rdXAsIHRhcmdldCk7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9pbml0UHJvcHModGFyZ2V0LCBwcm9wTG9va3VwLCBzaWJsaW5ncywgb3ZlcndyaXR0ZW5Qcm9wcywgaW5kZXgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2ZpcnN0UFQpIGlmICgodGhpcy52YXJzLmxhenkgIT09IGZhbHNlICYmIHRoaXMuX2R1cmF0aW9uKSB8fCAodGhpcy52YXJzLmxhenkgJiYgIXRoaXMuX2R1cmF0aW9uKSkgeyAvL3plcm8gZHVyYXRpb24gdHdlZW5zIGRvbid0IGxhenkgcmVuZGVyIGJ5IGRlZmF1bHQ7IGV2ZXJ5dGhpbmcgZWxzZSBkb2VzLlxuXHRcdFx0XHRfbGF6eUxvb2t1cFt0YXJnZXQuX2dzVHdlZW5JRF0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGluaXRQbHVnaW5zO1xuXHRcdH07XG5cblx0XHRwLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuXHRcdFx0dmFyIHByZXZUaW1lID0gdGhpcy5fdGltZSxcblx0XHRcdFx0ZHVyYXRpb24gPSB0aGlzLl9kdXJhdGlvbixcblx0XHRcdFx0cHJldlJhd1ByZXZUaW1lID0gdGhpcy5fcmF3UHJldlRpbWUsXG5cdFx0XHRcdGlzQ29tcGxldGUsIGNhbGxiYWNrLCBwdCwgcmF3UHJldlRpbWU7XG5cdFx0XHRpZiAodGltZSA+PSBkdXJhdGlvbiAtIDAuMDAwMDAwMSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMuXG5cdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RpbWUgPSBkdXJhdGlvbjtcblx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuX2NhbGNFbmQgPyB0aGlzLl9lYXNlLmdldFJhdGlvKDEpIDogMTtcblx0XHRcdFx0aWYgKCF0aGlzLl9yZXZlcnNlZCApIHtcblx0XHRcdFx0XHRpc0NvbXBsZXRlID0gdHJ1ZTtcblx0XHRcdFx0XHRjYWxsYmFjayA9IFwib25Db21wbGV0ZVwiO1xuXHRcdFx0XHRcdGZvcmNlID0gKGZvcmNlIHx8IHRoaXMuX3RpbWVsaW5lLmF1dG9SZW1vdmVDaGlsZHJlbik7IC8vb3RoZXJ3aXNlLCBpZiB0aGUgYW5pbWF0aW9uIGlzIHVucGF1c2VkL2FjdGl2YXRlZCBhZnRlciBpdCdzIGFscmVhZHkgZmluaXNoZWQsIGl0IGRvZXNuJ3QgZ2V0IHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50IHRpbWVsaW5lLlxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkdXJhdGlvbiA9PT0gMCkgaWYgKHRoaXMuX2luaXR0ZWQgfHwgIXRoaXMudmFycy5sYXp5IHx8IGZvcmNlKSB7IC8vemVyby1kdXJhdGlvbiB0d2VlbnMgYXJlIHRyaWNreSBiZWNhdXNlIHdlIG11c3QgZGlzY2VybiB0aGUgbW9tZW50dW0vZGlyZWN0aW9uIG9mIHRpbWUgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHN0YXJ0aW5nIHZhbHVlcyBzaG91bGQgYmUgcmVuZGVyZWQgb3IgdGhlIGVuZGluZyB2YWx1ZXMuIElmIHRoZSBcInBsYXloZWFkXCIgb2YgaXRzIHRpbWVsaW5lIGdvZXMgcGFzdCB0aGUgemVyby1kdXJhdGlvbiB0d2VlbiBpbiB0aGUgZm9yd2FyZCBkaXJlY3Rpb24gb3IgbGFuZHMgZGlyZWN0bHkgb24gaXQsIHRoZSBlbmQgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCwgYnV0IGlmIHRoZSB0aW1lbGluZSdzIFwicGxheWhlYWRcIiBtb3ZlcyBwYXN0IGl0IGluIHRoZSBiYWNrd2FyZCBkaXJlY3Rpb24gKGZyb20gYSBwb3N0aXRpdmUgdGltZSB0byBhIG5lZ2F0aXZlIHRpbWUpLCB0aGUgc3RhcnRpbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQuXG5cdFx0XHRcdFx0aWYgKHRoaXMuX3N0YXJ0VGltZSA9PT0gdGhpcy5fdGltZWxpbmUuX2R1cmF0aW9uKSB7IC8vaWYgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGlzIGF0IHRoZSBWRVJZIGVuZCBvZiBhIHRpbWVsaW5lIGFuZCB0aGF0IHRpbWVsaW5lIHJlbmRlcnMgYXQgaXRzIGVuZCwgaXQgd2lsbCB0eXBpY2FsbHkgYWRkIGEgdGlueSBiaXQgb2YgY3VzaGlvbiB0byB0aGUgcmVuZGVyIHRpbWUgdG8gcHJldmVudCByb3VuZGluZyBlcnJvcnMgZnJvbSBnZXR0aW5nIGluIHRoZSB3YXkgb2YgdHdlZW5zIHJlbmRlcmluZyB0aGVpciBWRVJZIGVuZC4gSWYgd2UgdGhlbiByZXZlcnNlKCkgdGhhdCB0aW1lbGluZSwgdGhlIHplcm8tZHVyYXRpb24gdHdlZW4gd2lsbCB0cmlnZ2VyIGl0cyBvblJldmVyc2VDb21wbGV0ZSBldmVuIHRob3VnaCB0ZWNobmljYWxseSB0aGUgcGxheWhlYWQgZGlkbid0IHBhc3Mgb3ZlciBpdCBhZ2Fpbi4gSXQncyBhIHZlcnkgc3BlY2lmaWMgZWRnZSBjYXNlIHdlIG11c3QgYWNjb21tb2RhdGUuXG5cdFx0XHRcdFx0XHR0aW1lID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHByZXZSYXdQcmV2VGltZSA8IDAgfHwgKHRpbWUgPD0gMCAmJiB0aW1lID49IC0wLjAwMDAwMDEpIHx8IChwcmV2UmF3UHJldlRpbWUgPT09IF90aW55TnVtICYmIHRoaXMuZGF0YSAhPT0gXCJpc1BhdXNlXCIpKSBpZiAocHJldlJhd1ByZXZUaW1lICE9PSB0aW1lKSB7IC8vbm90ZTogd2hlbiB0aGlzLmRhdGEgaXMgXCJpc1BhdXNlXCIsIGl0J3MgYSBjYWxsYmFjayBhZGRlZCBieSBhZGRQYXVzZSgpIG9uIGEgdGltZWxpbmUgdGhhdCB3ZSBzaG91bGQgbm90IGJlIHRyaWdnZXJlZCB3aGVuIExFQVZJTkcgaXRzIGV4YWN0IHN0YXJ0IHRpbWUuIEluIG90aGVyIHdvcmRzLCB0bC5hZGRQYXVzZSgxKS5wbGF5KDEpIHNob3VsZG4ndCBwYXVzZS5cblx0XHRcdFx0XHRcdGZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGlmIChwcmV2UmF3UHJldlRpbWUgPiBfdGlueU51bSkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IFwib25SZXZlcnNlQ29tcGxldGVcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSByYXdQcmV2VGltZSA9ICghc3VwcHJlc3NFdmVudHMgfHwgdGltZSB8fCBwcmV2UmF3UHJldlRpbWUgPT09IHRpbWUpID8gdGltZSA6IF90aW55TnVtOyAvL3doZW4gdGhlIHBsYXloZWFkIGFycml2ZXMgYXQgRVhBQ1RMWSB0aW1lIDAgKHJpZ2h0IG9uIHRvcCkgb2YgYSB6ZXJvLWR1cmF0aW9uIHR3ZWVuLCB3ZSBuZWVkIHRvIGRpc2Nlcm4gaWYgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIHNvIHRoYXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgYWdhaW4gKG5leHQgdGltZSksIGl0J2xsIHRyaWdnZXIgdGhlIGNhbGxiYWNrLiBJZiBldmVudHMgYXJlIE5PVCBzdXBwcmVzc2VkLCBvYnZpb3VzbHkgdGhlIGNhbGxiYWNrIHdvdWxkIGJlIHRyaWdnZXJlZCBpbiB0aGlzIHJlbmRlci4gQmFzaWNhbGx5LCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUgZWl0aGVyIHdoZW4gdGhlIHBsYXloZWFkIEFSUklWRVMgb3IgTEVBVkVTIHRoaXMgZXhhY3Qgc3BvdCwgbm90IGJvdGguIEltYWdpbmUgZG9pbmcgYSB0aW1lbGluZS5zZWVrKDApIGFuZCB0aGVyZSdzIGEgY2FsbGJhY2sgdGhhdCBzaXRzIGF0IDAuIFNpbmNlIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBvbiB0aGF0IHNlZWsoKSBieSBkZWZhdWx0LCBub3RoaW5nIHdpbGwgZmlyZSwgYnV0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIG9mZiBvZiB0aGF0IHBvc2l0aW9uLCB0aGUgY2FsbGJhY2sgc2hvdWxkIGZpcmUuIFRoaXMgYmVoYXZpb3IgaXMgd2hhdCBwZW9wbGUgaW50dWl0aXZlbHkgZXhwZWN0LiBXZSBzZXQgdGhlIF9yYXdQcmV2VGltZSB0byBiZSBhIHByZWNpc2UgdGlueSBudW1iZXIgdG8gaW5kaWNhdGUgdGhpcyBzY2VuYXJpbyByYXRoZXIgdGhhbiB1c2luZyBhbm90aGVyIHByb3BlcnR5L3ZhcmlhYmxlIHdoaWNoIHdvdWxkIGluY3JlYXNlIG1lbW9yeSB1c2FnZS4gVGhpcyB0ZWNobmlxdWUgaXMgbGVzcyByZWFkYWJsZSwgYnV0IG1vcmUgZWZmaWNpZW50LlxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAodGltZSA8IDAuMDAwMDAwMSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMsIHJvdW5kIHN1cGVyIHNtYWxsIHZhbHVlcyB0byAwLlxuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gMDtcblx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuX2NhbGNFbmQgPyB0aGlzLl9lYXNlLmdldFJhdGlvKDApIDogMDtcblx0XHRcdFx0aWYgKHByZXZUaW1lICE9PSAwIHx8IChkdXJhdGlvbiA9PT0gMCAmJiBwcmV2UmF3UHJldlRpbWUgPiAwKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0aGlzLl9yZXZlcnNlZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGltZSA8IDApIHtcblx0XHRcdFx0XHR0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDApIGlmICh0aGlzLl9pbml0dGVkIHx8ICF0aGlzLnZhcnMubGF6eSB8fCBmb3JjZSkgeyAvL3plcm8tZHVyYXRpb24gdHdlZW5zIGFyZSB0cmlja3kgYmVjYXVzZSB3ZSBtdXN0IGRpc2Nlcm4gdGhlIG1vbWVudHVtL2RpcmVjdGlvbiBvZiB0aW1lIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBzdGFydGluZyB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkIG9yIHRoZSBlbmRpbmcgdmFsdWVzLiBJZiB0aGUgXCJwbGF5aGVhZFwiIG9mIGl0cyB0aW1lbGluZSBnb2VzIHBhc3QgdGhlIHplcm8tZHVyYXRpb24gdHdlZW4gaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uIG9yIGxhbmRzIGRpcmVjdGx5IG9uIGl0LCB0aGUgZW5kIHZhbHVlcyBzaG91bGQgYmUgcmVuZGVyZWQsIGJ1dCBpZiB0aGUgdGltZWxpbmUncyBcInBsYXloZWFkXCIgbW92ZXMgcGFzdCBpdCBpbiB0aGUgYmFja3dhcmQgZGlyZWN0aW9uIChmcm9tIGEgcG9zdGl0aXZlIHRpbWUgdG8gYSBuZWdhdGl2ZSB0aW1lKSwgdGhlIHN0YXJ0aW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkLlxuXHRcdFx0XHRcdFx0aWYgKHByZXZSYXdQcmV2VGltZSA+PSAwICYmICEocHJldlJhd1ByZXZUaW1lID09PSBfdGlueU51bSAmJiB0aGlzLmRhdGEgPT09IFwiaXNQYXVzZVwiKSkge1xuXHRcdFx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHJhd1ByZXZUaW1lID0gKCFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHByZXZSYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghdGhpcy5faW5pdHRlZCkgeyAvL2lmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cblx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RpbWUgPSB0aW1lO1xuXG5cdFx0XHRcdGlmICh0aGlzLl9lYXNlVHlwZSkge1xuXHRcdFx0XHRcdHZhciByID0gdGltZSAvIGR1cmF0aW9uLCB0eXBlID0gdGhpcy5fZWFzZVR5cGUsIHBvdyA9IHRoaXMuX2Vhc2VQb3dlcjtcblx0XHRcdFx0XHRpZiAodHlwZSA9PT0gMSB8fCAodHlwZSA9PT0gMyAmJiByID49IDAuNSkpIHtcblx0XHRcdFx0XHRcdHIgPSAxIC0gcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHR5cGUgPT09IDMpIHtcblx0XHRcdFx0XHRcdHIgKj0gMjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBvdyA9PT0gMSkge1xuXHRcdFx0XHRcdFx0ciAqPSByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocG93ID09PSAyKSB7XG5cdFx0XHRcdFx0XHRyICo9IHIgKiByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocG93ID09PSAzKSB7XG5cdFx0XHRcdFx0XHRyICo9IHIgKiByICogcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHBvdyA9PT0gNCkge1xuXHRcdFx0XHRcdFx0ciAqPSByICogciAqIHIgKiByO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmICh0eXBlID09PSAxKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gMSAtIHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlID09PSAyKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRpbWUgLyBkdXJhdGlvbiA8IDAuNSkge1xuXHRcdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHIgLyAyO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gMSAtIChyIC8gMik7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuZ2V0UmF0aW8odGltZSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fdGltZSA9PT0gcHJldlRpbWUgJiYgIWZvcmNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcblx0XHRcdFx0dGhpcy5faW5pdCgpO1xuXHRcdFx0XHRpZiAoIXRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fZ2MpIHsgLy9pbW1lZGlhdGVSZW5kZXIgdHdlZW5zIHR5cGljYWxseSB3b24ndCBpbml0aWFsaXplIHVudGlsIHRoZSBwbGF5aGVhZCBhZHZhbmNlcyAoX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDApIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IG92ZXJ3cml0aW5nIG9jY3VycyBwcm9wZXJseS4gQWxzbywgaWYgYWxsIG9mIHRoZSB0d2VlbmluZyBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBvdmVyd3JpdHRlbiAod2hpY2ggd291bGQgY2F1c2UgX2djIHRvIGJlIHRydWUsIGFzIHNldCBpbiBfaW5pdCgpKSwgd2Ugc2hvdWxkbid0IGNvbnRpbnVlIG90aGVyd2lzZSBhbiBvblN0YXJ0IGNhbGxiYWNrIGNvdWxkIGJlIGNhbGxlZCBmb3IgZXhhbXBsZS5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWZvcmNlICYmIHRoaXMuX2ZpcnN0UFQgJiYgKCh0aGlzLnZhcnMubGF6eSAhPT0gZmFsc2UgJiYgdGhpcy5fZHVyYXRpb24pIHx8ICh0aGlzLnZhcnMubGF6eSAmJiAhdGhpcy5fZHVyYXRpb24pKSkge1xuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90b3RhbFRpbWUgPSBwcmV2VGltZTtcblx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHByZXZSYXdQcmV2VGltZTtcblx0XHRcdFx0XHRfbGF6eVR3ZWVucy5wdXNoKHRoaXMpO1xuXHRcdFx0XHRcdHRoaXMuX2xhenkgPSBbdGltZSwgc3VwcHJlc3NFdmVudHNdO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL19lYXNlIGlzIGluaXRpYWxseSBzZXQgdG8gZGVmYXVsdEVhc2UsIHNvIG5vdyB0aGF0IGluaXQoKSBoYXMgcnVuLCBfZWFzZSBpcyBzZXQgcHJvcGVybHkgYW5kIHdlIG5lZWQgdG8gcmVjYWxjdWxhdGUgdGhlIHJhdGlvLiBPdmVyYWxsIHRoaXMgaXMgZmFzdGVyIHRoYW4gdXNpbmcgY29uZGl0aW9uYWwgbG9naWMgZWFybGllciBpbiB0aGUgbWV0aG9kIHRvIGF2b2lkIGhhdmluZyB0byBzZXQgcmF0aW8gdHdpY2UgYmVjYXVzZSB3ZSBvbmx5IGluaXQoKSBvbmNlIGJ1dCByZW5kZXJUaW1lKCkgZ2V0cyBjYWxsZWQgVkVSWSBmcmVxdWVudGx5LlxuXHRcdFx0XHRpZiAodGhpcy5fdGltZSAmJiAhaXNDb21wbGV0ZSkge1xuXHRcdFx0XHRcdHRoaXMucmF0aW8gPSB0aGlzLl9lYXNlLmdldFJhdGlvKHRoaXMuX3RpbWUgLyBkdXJhdGlvbik7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNDb21wbGV0ZSAmJiB0aGlzLl9lYXNlLl9jYWxjRW5kKSB7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuZ2V0UmF0aW8oKHRoaXMuX3RpbWUgPT09IDApID8gMCA6IDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fbGF6eSAhPT0gZmFsc2UpIHsgLy9pbiBjYXNlIGEgbGF6eSByZW5kZXIgaXMgcGVuZGluZywgd2Ugc2hvdWxkIGZsdXNoIGl0IGJlY2F1c2UgdGhlIG5ldyByZW5kZXIgaXMgb2NjdXJyaW5nIG5vdyAoaW1hZ2luZSBhIGxhenkgdHdlZW4gaW5zdGFudGlhdGluZyBhbmQgdGhlbiBpbW1lZGlhdGVseSB0aGUgdXNlciBjYWxscyB0d2Vlbi5zZWVrKHR3ZWVuLmR1cmF0aW9uKCkpLCBza2lwcGluZyB0byB0aGUgZW5kIC0gdGhlIGVuZCByZW5kZXIgd291bGQgYmUgZm9yY2VkLCBhbmQgdGhlbiBpZiB3ZSBkaWRuJ3QgZmx1c2ggdGhlIGxhenkgcmVuZGVyLCBpdCdkIGZpcmUgQUZURVIgdGhlIHNlZWsoKSwgcmVuZGVyaW5nIGl0IGF0IHRoZSB3cm9uZyB0aW1lLlxuXHRcdFx0XHR0aGlzLl9sYXp5ID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXRoaXMuX2FjdGl2ZSkgaWYgKCF0aGlzLl9wYXVzZWQgJiYgdGhpcy5fdGltZSAhPT0gcHJldlRpbWUgJiYgdGltZSA+PSAwKSB7XG5cdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IHRydWU7ICAvL3NvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyBhIHR3ZWVuIChhcyBvcHBvc2VkIHRvIHRoZSB0aW1lbGluZSByZW5kZXJpbmcgaXQpLCB0aGUgdGltZWxpbmUgaXMgZm9yY2VkIHRvIHJlLXJlbmRlciBhbmQgYWxpZ24gaXQgd2l0aCB0aGUgcHJvcGVyIHRpbWUvZnJhbWUgb24gdGhlIG5leHQgcmVuZGVyaW5nIGN5Y2xlLiBNYXliZSB0aGUgdHdlZW4gYWxyZWFkeSBmaW5pc2hlZCBidXQgdGhlIHVzZXIgbWFudWFsbHkgcmUtcmVuZGVycyBpdCBhcyBoYWxmd2F5IGRvbmUuXG5cdFx0XHR9XG5cdFx0XHRpZiAocHJldlRpbWUgPT09IDApIHtcblx0XHRcdFx0aWYgKHRoaXMuX3N0YXJ0QXQpIHtcblx0XHRcdFx0XHRpZiAodGltZSA+PSAwKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIWNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IFwiX2R1bW15R1NcIjsgLy9pZiBubyBjYWxsYmFjayBpcyBkZWZpbmVkLCB1c2UgYSBkdW1teSB2YWx1ZSBqdXN0IHNvIHRoYXQgdGhlIGNvbmRpdGlvbiBhdCB0aGUgZW5kIGV2YWx1YXRlcyBhcyB0cnVlIGJlY2F1c2UgX3N0YXJ0QXQgc2hvdWxkIHJlbmRlciBBRlRFUiB0aGUgbm9ybWFsIHJlbmRlciBsb29wIHdoZW4gdGhlIHRpbWUgaXMgbmVnYXRpdmUuIFdlIGNvdWxkIGhhbmRsZSB0aGlzIGluIGEgbW9yZSBpbnR1aXRpdmUgd2F5LCBvZiBjb3Vyc2UsIGJ1dCB0aGUgcmVuZGVyIGxvb3AgaXMgdGhlIE1PU1QgaW1wb3J0YW50IHRoaW5nIHRvIG9wdGltaXplLCBzbyB0aGlzIHRlY2huaXF1ZSBhbGxvd3MgdXMgdG8gYXZvaWQgYWRkaW5nIGV4dHJhIGNvbmRpdGlvbmFsIGxvZ2ljIGluIGEgaGlnaC1mcmVxdWVuY3kgYXJlYS5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRoaXMudmFycy5vblN0YXJ0KSBpZiAodGhpcy5fdGltZSAhPT0gMCB8fCBkdXJhdGlvbiA9PT0gMCkgaWYgKCFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cHQgPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdGlmIChwdC5mKSB7XG5cdFx0XHRcdFx0cHQudFtwdC5wXShwdC5jICogdGhpcy5yYXRpbyArIHB0LnMpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC5jICogdGhpcy5yYXRpbyArIHB0LnM7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX29uVXBkYXRlKSB7XG5cdFx0XHRcdGlmICh0aW1lIDwgMCkgaWYgKHRoaXMuX3N0YXJ0QXQgJiYgdGltZSAhPT0gLTAuMDAwMSkgeyAvL2lmIHRoZSB0d2VlbiBpcyBwb3NpdGlvbmVkIGF0IHRoZSBWRVJZIGJlZ2lubmluZyAoX3N0YXJ0VGltZSAwKSBvZiBpdHMgcGFyZW50IHRpbWVsaW5lLCBpdCdzIGlsbGVnYWwgZm9yIHRoZSBwbGF5aGVhZCB0byBnbyBiYWNrIGZ1cnRoZXIsIHNvIHdlIHNob3VsZCBub3QgcmVuZGVyIHRoZSByZWNvcmRlZCBzdGFydEF0IHZhbHVlcy5cblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpOyAvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSB0dWNrIHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW5zaWRlIGxlc3MgdHJhdmVsZWQgYXJlYXMgKG1vc3QgdHdlZW5zIGRvbid0IGhhdmUgYW4gb25VcGRhdGUpLiBXZSdkIGp1c3QgaGF2ZSBpdCBhdCB0aGUgZW5kIGJlZm9yZSB0aGUgb25Db21wbGV0ZSwgYnV0IHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHVwZGF0ZWQgYmVmb3JlIGFueSBvblVwZGF0ZSBpcyBjYWxsZWQsIHNvIHdlIEFMU08gcHV0IGl0IGhlcmUgYW5kIHRoZW4gaWYgaXQncyBub3QgY2FsbGVkLCB3ZSBkbyBzbyBsYXRlciBuZWFyIHRoZSBvbkNvbXBsZXRlLlxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMpIGlmICh0aGlzLl90aW1lICE9PSBwcmV2VGltZSB8fCBpc0NvbXBsZXRlIHx8IGZvcmNlKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2FsbGJhY2soXCJvblVwZGF0ZVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGNhbGxiYWNrKSBpZiAoIXRoaXMuX2djIHx8IGZvcmNlKSB7IC8vY2hlY2sgX2djIGJlY2F1c2UgdGhlcmUncyBhIGNoYW5jZSB0aGF0IGtpbGwoKSBjb3VsZCBiZSBjYWxsZWQgaW4gYW4gb25VcGRhdGVcblx0XHRcdFx0aWYgKHRpbWUgPCAwICYmIHRoaXMuX3N0YXJ0QXQgJiYgIXRoaXMuX29uVXBkYXRlICYmIHRpbWUgIT09IC0wLjAwMDEpIHsgLy8tMC4wMDAxIGlzIGEgc3BlY2lhbCB2YWx1ZSB0aGF0IHdlIHVzZSB3aGVuIGxvb3BpbmcgYmFjayB0byB0aGUgYmVnaW5uaW5nIG9mIGEgcmVwZWF0ZWQgVGltZWxpbmVNYXgsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkbid0IHJlbmRlciB0aGUgX3N0YXJ0QXQgdmFsdWVzLlxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlzQ29tcGxldGUpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMgJiYgdGhpcy52YXJzW2NhbGxiYWNrXSkge1xuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKGNhbGxiYWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDAgJiYgdGhpcy5fcmF3UHJldlRpbWUgPT09IF90aW55TnVtICYmIHJhd1ByZXZUaW1lICE9PSBfdGlueU51bSkgeyAvL3RoZSBvbkNvbXBsZXRlIG9yIG9uUmV2ZXJzZUNvbXBsZXRlIGNvdWxkIHRyaWdnZXIgbW92ZW1lbnQgb2YgdGhlIHBsYXloZWFkIGFuZCBmb3IgemVyby1kdXJhdGlvbiB0d2VlbnMgKHdoaWNoIG11c3QgZGlzY2VybiBkaXJlY3Rpb24pIHRoYXQgbGFuZCBkaXJlY3RseSBiYWNrIG9uIHRoZWlyIHN0YXJ0IHRpbWUsIHdlIGRvbid0IHdhbnQgdG8gZmlyZSBhZ2FpbiBvbiB0aGUgbmV4dCByZW5kZXIuIFRoaW5rIG9mIHNldmVyYWwgYWRkUGF1c2UoKSdzIGluIGEgdGltZWxpbmUgdGhhdCBmb3JjZXMgdGhlIHBsYXloZWFkIHRvIGEgY2VydGFpbiBzcG90LCBidXQgd2hhdCBpZiBpdCdzIGFscmVhZHkgcGF1c2VkIGFuZCBhbm90aGVyIHR3ZWVuIGlzIHR3ZWVuaW5nIHRoZSBcInRpbWVcIiBvZiB0aGUgdGltZWxpbmU/IEVhY2ggdGltZSBpdCBtb3ZlcyBbZm9yd2FyZF0gcGFzdCB0aGF0IHNwb3QsIGl0IHdvdWxkIG1vdmUgYmFjaywgYW5kIHNpbmNlIHN1cHByZXNzRXZlbnRzIGlzIHRydWUsIGl0J2QgcmVzZXQgX3Jhd1ByZXZUaW1lIHRvIF90aW55TnVtIHNvIHRoYXQgd2hlbiBpdCBiZWdpbnMgYWdhaW4sIHRoZSBjYWxsYmFjayB3b3VsZCBmaXJlIChzbyB1bHRpbWF0ZWx5IGl0IGNvdWxkIGJvdW5jZSBiYWNrIGFuZCBmb3J0aCBkdXJpbmcgdGhhdCB0d2VlbikuIEFnYWluLCB0aGlzIGlzIGEgdmVyeSB1bmNvbW1vbiBzY2VuYXJpbywgYnV0IHBvc3NpYmxlIG5vbmV0aGVsZXNzLlxuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLl9raWxsID0gZnVuY3Rpb24odmFycywgdGFyZ2V0LCBvdmVyd3JpdGluZ1R3ZWVuKSB7XG5cdFx0XHRpZiAodmFycyA9PT0gXCJhbGxcIikge1xuXHRcdFx0XHR2YXJzID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdGlmICh2YXJzID09IG51bGwpIGlmICh0YXJnZXQgPT0gbnVsbCB8fCB0YXJnZXQgPT09IHRoaXMudGFyZ2V0KSB7XG5cdFx0XHRcdHRoaXMuX2xhenkgPSBmYWxzZTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdHRhcmdldCA9ICh0eXBlb2YodGFyZ2V0KSAhPT0gXCJzdHJpbmdcIikgPyAodGFyZ2V0IHx8IHRoaXMuX3RhcmdldHMgfHwgdGhpcy50YXJnZXQpIDogVHdlZW5MaXRlLnNlbGVjdG9yKHRhcmdldCkgfHwgdGFyZ2V0O1xuXHRcdFx0dmFyIHNpbXVsdGFuZW91c092ZXJ3cml0ZSA9IChvdmVyd3JpdGluZ1R3ZWVuICYmIHRoaXMuX3RpbWUgJiYgb3ZlcndyaXRpbmdUd2Vlbi5fc3RhcnRUaW1lID09PSB0aGlzLl9zdGFydFRpbWUgJiYgdGhpcy5fdGltZWxpbmUgPT09IG92ZXJ3cml0aW5nVHdlZW4uX3RpbWVsaW5lKSxcblx0XHRcdFx0aSwgb3ZlcndyaXR0ZW5Qcm9wcywgcCwgcHQsIHByb3BMb29rdXAsIGNoYW5nZWQsIGtpbGxQcm9wcywgcmVjb3JkLCBraWxsZWQ7XG5cdFx0XHRpZiAoKF9pc0FycmF5KHRhcmdldCkgfHwgX2lzU2VsZWN0b3IodGFyZ2V0KSkgJiYgdHlwZW9mKHRhcmdldFswXSkgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0aSA9IHRhcmdldC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9raWxsKHZhcnMsIHRhcmdldFtpXSwgb3ZlcndyaXRpbmdUd2VlbikpIHtcblx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKHRoaXMuX3RhcmdldHMpIHtcblx0XHRcdFx0XHRpID0gdGhpcy5fdGFyZ2V0cy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAodGFyZ2V0ID09PSB0aGlzLl90YXJnZXRzW2ldKSB7XG5cdFx0XHRcdFx0XHRcdHByb3BMb29rdXAgPSB0aGlzLl9wcm9wTG9va3VwW2ldIHx8IHt9O1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9vdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyB8fCBbXTtcblx0XHRcdFx0XHRcdFx0b3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX292ZXJ3cml0dGVuUHJvcHNbaV0gPSB2YXJzID8gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wc1tpXSB8fCB7fSA6IFwiYWxsXCI7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmICh0YXJnZXQgIT09IHRoaXMudGFyZ2V0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHByb3BMb29rdXAgPSB0aGlzLl9wcm9wTG9va3VwO1xuXHRcdFx0XHRcdG92ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vdmVyd3JpdHRlblByb3BzID0gdmFycyA/IHRoaXMuX292ZXJ3cml0dGVuUHJvcHMgfHwge30gOiBcImFsbFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHByb3BMb29rdXApIHtcblx0XHRcdFx0XHRraWxsUHJvcHMgPSB2YXJzIHx8IHByb3BMb29rdXA7XG5cdFx0XHRcdFx0cmVjb3JkID0gKHZhcnMgIT09IG92ZXJ3cml0dGVuUHJvcHMgJiYgb3ZlcndyaXR0ZW5Qcm9wcyAhPT0gXCJhbGxcIiAmJiB2YXJzICE9PSBwcm9wTG9va3VwICYmICh0eXBlb2YodmFycykgIT09IFwib2JqZWN0XCIgfHwgIXZhcnMuX3RlbXBLaWxsKSk7IC8vX3RlbXBLaWxsIGlzIGEgc3VwZXItc2VjcmV0IHdheSB0byBkZWxldGUgYSBwYXJ0aWN1bGFyIHR3ZWVuaW5nIHByb3BlcnR5IGJ1dCBOT1QgaGF2ZSBpdCByZW1lbWJlcmVkIGFzIGFuIG9mZmljaWFsIG92ZXJ3cml0dGVuIHByb3BlcnR5IChsaWtlIGluIEJlemllclBsdWdpbilcblx0XHRcdFx0XHRpZiAob3ZlcndyaXRpbmdUd2VlbiAmJiAoVHdlZW5MaXRlLm9uT3ZlcndyaXRlIHx8IHRoaXMudmFycy5vbk92ZXJ3cml0ZSkpIHtcblx0XHRcdFx0XHRcdGZvciAocCBpbiBraWxsUHJvcHMpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHByb3BMb29rdXBbcF0pIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIWtpbGxlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0a2lsbGVkID0gW107XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGtpbGxlZC5wdXNoKHApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoKGtpbGxlZCB8fCAhdmFycykgJiYgIV9vbk92ZXJ3cml0ZSh0aGlzLCBvdmVyd3JpdGluZ1R3ZWVuLCB0YXJnZXQsIGtpbGxlZCkpIHsgLy9pZiB0aGUgb25PdmVyd3JpdGUgcmV0dXJuZWQgZmFsc2UsIHRoYXQgbWVhbnMgdGhlIHVzZXIgd2FudHMgdG8gb3ZlcnJpZGUgdGhlIG92ZXJ3cml0aW5nIChjYW5jZWwgaXQpLlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yIChwIGluIGtpbGxQcm9wcykge1xuXHRcdFx0XHRcdFx0aWYgKChwdCA9IHByb3BMb29rdXBbcF0pKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChzaW11bHRhbmVvdXNPdmVyd3JpdGUpIHsgLy9pZiBhbm90aGVyIHR3ZWVuIG92ZXJ3cml0ZXMgdGhpcyBvbmUgYW5kIHRoZXkgYm90aCBzdGFydCBhdCBleGFjdGx5IHRoZSBzYW1lIHRpbWUsIHlldCB0aGlzIHR3ZWVuIGhhcyBhbHJlYWR5IHJlbmRlcmVkIG9uY2UgKGZvciBleGFtcGxlLCBhdCAwLjAwMSkgYmVjYXVzZSBpdCdzIGZpcnN0IGluIHRoZSBxdWV1ZSwgd2Ugc2hvdWxkIHJldmVydCB0aGUgdmFsdWVzIHRvIHdoZXJlIHRoZXkgd2VyZSBhdCAwIHNvIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlcyBhcmVuJ3QgY29udGFtaW5hdGVkIG9uIHRoZSBvdmVyd3JpdGluZyB0d2Vlbi5cblx0XHRcdFx0XHRcdFx0XHRpZiAocHQuZikge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXShwdC5zKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnM7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChwdC5wZyAmJiBwdC50Ll9raWxsKGtpbGxQcm9wcykpIHtcblx0XHRcdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTsgLy9zb21lIHBsdWdpbnMgbmVlZCB0byBiZSBub3RpZmllZCBzbyB0aGV5IGNhbiBwZXJmb3JtIGNsZWFudXAgdGFza3MgZmlyc3Rcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIXB0LnBnIHx8IHB0LnQuX292ZXJ3cml0ZVByb3BzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChwdC5fcHJldikge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0ID09PSB0aGlzLl9maXJzdFBUKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmIChwdC5fbmV4dCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHQuX25leHQuX3ByZXYgPSBwdC5fcHJldjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0cHQuX25leHQgPSBwdC5fcHJldiA9IG51bGw7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0ZGVsZXRlIHByb3BMb29rdXBbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAocmVjb3JkKSB7XG5cdFx0XHRcdFx0XHRcdG92ZXJ3cml0dGVuUHJvcHNbcF0gPSAxO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIXRoaXMuX2ZpcnN0UFQgJiYgdGhpcy5faW5pdHRlZCkgeyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGFyZSBraWxsZWQsIGtpbGwgdGhlIHR3ZWVuLiBXaXRob3V0IHRoaXMgbGluZSwgaWYgdGhlcmUncyBhIHR3ZWVuIHdpdGggbXVsdGlwbGUgdGFyZ2V0cyBhbmQgdGhlbiB5b3Uga2lsbFR3ZWVuc09mKCkgZWFjaCB0YXJnZXQgaW5kaXZpZHVhbGx5LCB0aGUgdHdlZW4gd291bGQgdGVjaG5pY2FsbHkgc3RpbGwgcmVtYWluIGFjdGl2ZSBhbmQgZmlyZSBpdHMgb25Db21wbGV0ZSBldmVuIHRob3VnaCB0aGVyZSBhcmVuJ3QgYW55IG1vcmUgcHJvcGVydGllcyB0d2VlbmluZy5cblx0XHRcdFx0XHRcdHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdH07XG5cblx0XHRwLmludmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkKSB7XG5cdFx0XHRcdFR3ZWVuTGl0ZS5fb25QbHVnaW5FdmVudChcIl9vbkRpc2FibGVcIiwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9maXJzdFBUID0gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX3N0YXJ0QXQgPSB0aGlzLl9vblVwZGF0ZSA9IG51bGw7XG5cdFx0XHR0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkID0gdGhpcy5fYWN0aXZlID0gdGhpcy5fbGF6eSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fcHJvcExvb2t1cCA9ICh0aGlzLl90YXJnZXRzKSA/IHt9IDogW107XG5cdFx0XHRBbmltYXRpb24ucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcblx0XHRcdGlmICh0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyKSB7XG5cdFx0XHRcdHRoaXMuX3RpbWUgPSAtX3RpbnlOdW07IC8vZm9yY2VzIGEgcmVuZGVyIHdpdGhvdXQgaGF2aW5nIHRvIHNldCB0aGUgcmVuZGVyKCkgXCJmb3JjZVwiIHBhcmFtZXRlciB0byB0cnVlIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBsYXp5aW5nIGJ5IGRlZmF1bHQgKHVzaW5nIHRoZSBcImZvcmNlXCIgcGFyYW1ldGVyIGFsd2F5cyBmb3JjZXMgYW4gaW1tZWRpYXRlIGZ1bGwgcmVuZGVyKVxuXHRcdFx0XHR0aGlzLnJlbmRlcihNYXRoLm1pbigwLCAtdGhpcy5fZGVsYXkpKTsgLy9pbiBjYXNlIGRlbGF5IGlzIG5lZ2F0aXZlLlxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuX2VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkLCBpZ25vcmVUaW1lbGluZSkge1xuXHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7XG5cdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGVuYWJsZWQgJiYgdGhpcy5fZ2MpIHtcblx0XHRcdFx0dmFyIHRhcmdldHMgPSB0aGlzLl90YXJnZXRzLFxuXHRcdFx0XHRcdGk7XG5cdFx0XHRcdGlmICh0YXJnZXRzKSB7XG5cdFx0XHRcdFx0aSA9IHRhcmdldHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0dGhpcy5fc2libGluZ3NbaV0gPSBfcmVnaXN0ZXIodGFyZ2V0c1tpXSwgdGhpcywgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3NpYmxpbmdzID0gX3JlZ2lzdGVyKHRoaXMudGFyZ2V0LCB0aGlzLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0QW5pbWF0aW9uLnByb3RvdHlwZS5fZW5hYmxlZC5jYWxsKHRoaXMsIGVuYWJsZWQsIGlnbm9yZVRpbWVsaW5lKTtcblx0XHRcdGlmICh0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkKSBpZiAodGhpcy5fZmlyc3RQVCkge1xuXHRcdFx0XHRyZXR1cm4gVHdlZW5MaXRlLl9vblBsdWdpbkV2ZW50KChlbmFibGVkID8gXCJfb25FbmFibGVcIiA6IFwiX29uRGlzYWJsZVwiKSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXG4vLy0tLS1Ud2VlbkxpdGUgc3RhdGljIG1ldGhvZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdFR3ZWVuTGl0ZS50byA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuZnJvbSA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdHZhcnMucnVuQmFja3dhcmRzID0gdHJ1ZTtcblx0XHRcdHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuZnJvbVRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgZnJvbVZhcnMsIHRvVmFycykge1xuXHRcdFx0dG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcblx0XHRcdHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgPSAodG9WYXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSAmJiBmcm9tVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UpO1xuXHRcdFx0cmV0dXJuIG5ldyBUd2VlbkxpdGUodGFyZ2V0LCBkdXJhdGlvbiwgdG9WYXJzKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5MaXRlLmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24oZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlLCB1c2VGcmFtZXMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKGNhbGxiYWNrLCAwLCB7ZGVsYXk6ZGVsYXksIG9uQ29tcGxldGU6Y2FsbGJhY2ssIG9uQ29tcGxldGVQYXJhbXM6cGFyYW1zLCBjYWxsYmFja1Njb3BlOnNjb3BlLCBvblJldmVyc2VDb21wbGV0ZTpjYWxsYmFjaywgb25SZXZlcnNlQ29tcGxldGVQYXJhbXM6cGFyYW1zLCBpbW1lZGlhdGVSZW5kZXI6ZmFsc2UsIGxhenk6ZmFsc2UsIHVzZUZyYW1lczp1c2VGcmFtZXMsIG92ZXJ3cml0ZTowfSk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5zZXQgPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5MaXRlKHRhcmdldCwgMCwgdmFycyk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5nZXRUd2VlbnNPZiA9IGZ1bmN0aW9uKHRhcmdldCwgb25seUFjdGl2ZSkge1xuXHRcdFx0aWYgKHRhcmdldCA9PSBudWxsKSB7IHJldHVybiBbXTsgfVxuXHRcdFx0dGFyZ2V0ID0gKHR5cGVvZih0YXJnZXQpICE9PSBcInN0cmluZ1wiKSA/IHRhcmdldCA6IFR3ZWVuTGl0ZS5zZWxlY3Rvcih0YXJnZXQpIHx8IHRhcmdldDtcblx0XHRcdHZhciBpLCBhLCBqLCB0O1xuXHRcdFx0aWYgKChfaXNBcnJheSh0YXJnZXQpIHx8IF9pc1NlbGVjdG9yKHRhcmdldCkpICYmIHR5cGVvZih0YXJnZXRbMF0pICE9PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdGkgPSB0YXJnZXQubGVuZ3RoO1xuXHRcdFx0XHRhID0gW107XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGEgPSBhLmNvbmNhdChUd2VlbkxpdGUuZ2V0VHdlZW5zT2YodGFyZ2V0W2ldLCBvbmx5QWN0aXZlKSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHQvL25vdyBnZXQgcmlkIG9mIGFueSBkdXBsaWNhdGVzICh0d2VlbnMgb2YgYXJyYXlzIG9mIG9iamVjdHMgY291bGQgY2F1c2UgZHVwbGljYXRlcylcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0dCA9IGFbaV07XG5cdFx0XHRcdFx0aiA9IGk7XG5cdFx0XHRcdFx0d2hpbGUgKC0taiA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAodCA9PT0gYVtqXSkge1xuXHRcdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGEgPSBfcmVnaXN0ZXIodGFyZ2V0KS5jb25jYXQoKTtcblx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAoYVtpXS5fZ2MgfHwgKG9ubHlBY3RpdmUgJiYgIWFbaV0uaXNBY3RpdmUoKSkpIHtcblx0XHRcdFx0XHRcdGEuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5raWxsVHdlZW5zT2YgPSBUd2VlbkxpdGUua2lsbERlbGF5ZWRDYWxsc1RvID0gZnVuY3Rpb24odGFyZ2V0LCBvbmx5QWN0aXZlLCB2YXJzKSB7XG5cdFx0XHRpZiAodHlwZW9mKG9ubHlBY3RpdmUpID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdHZhcnMgPSBvbmx5QWN0aXZlOyAvL2ZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoYmVmb3JlIFwib25seUFjdGl2ZVwiIHBhcmFtZXRlciB3YXMgaW5zZXJ0ZWQpXG5cdFx0XHRcdG9ubHlBY3RpdmUgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBhID0gVHdlZW5MaXRlLmdldFR3ZWVuc09mKHRhcmdldCwgb25seUFjdGl2ZSksXG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRhW2ldLl9raWxsKHZhcnMsIHRhcmdldCk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUd2VlblBsdWdpbiAgIChjb3VsZCBlYXNpbHkgYmUgc3BsaXQgb3V0IGFzIGEgc2VwYXJhdGUgZmlsZS9jbGFzcywgYnV0IGluY2x1ZGVkIGZvciBlYXNlIG9mIHVzZSAoc28gdGhhdCBwZW9wbGUgZG9uJ3QgbmVlZCB0byBpbmNsdWRlIGFub3RoZXIgc2NyaXB0IGNhbGwgYmVmb3JlIGxvYWRpbmcgcGx1Z2lucyB3aGljaCBpcyBlYXN5IHRvIGZvcmdldClcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBUd2VlblBsdWdpbiA9IF9jbGFzcyhcInBsdWdpbnMuVHdlZW5QbHVnaW5cIiwgZnVuY3Rpb24ocHJvcHMsIHByaW9yaXR5KSB7XG5cdFx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMgPSAocHJvcHMgfHwgXCJcIikuc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRcdHRoaXMuX3Byb3BOYW1lID0gdGhpcy5fb3ZlcndyaXRlUHJvcHNbMF07XG5cdFx0XHRcdFx0dGhpcy5fcHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdFx0XHRcdHRoaXMuX3N1cGVyID0gVHdlZW5QbHVnaW4ucHJvdG90eXBlO1xuXHRcdFx0XHR9LCB0cnVlKTtcblxuXHRcdHAgPSBUd2VlblBsdWdpbi5wcm90b3R5cGU7XG5cdFx0VHdlZW5QbHVnaW4udmVyc2lvbiA9IFwiMS4xOS4wXCI7XG5cdFx0VHdlZW5QbHVnaW4uQVBJID0gMjtcblx0XHRwLl9maXJzdFBUID0gbnVsbDtcblx0XHRwLl9hZGRUd2VlbiA9IF9hZGRQcm9wVHdlZW47XG5cdFx0cC5zZXRSYXRpbyA9IF9zZXRSYXRpbztcblxuXHRcdHAuX2tpbGwgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBhID0gdGhpcy5fb3ZlcndyaXRlUHJvcHMsXG5cdFx0XHRcdHB0ID0gdGhpcy5fZmlyc3RQVCxcblx0XHRcdFx0aTtcblx0XHRcdGlmIChsb29rdXBbdGhpcy5fcHJvcE5hbWVdICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYgKGxvb2t1cFthW2ldXSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRhLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRpZiAobG9va3VwW3B0Lm5dICE9IG51bGwpIHtcblx0XHRcdFx0XHRpZiAocHQuX25leHQpIHtcblx0XHRcdFx0XHRcdHB0Ll9uZXh0Ll9wcmV2ID0gcHQuX3ByZXY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwdC5fcHJldikge1xuXHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRcdHB0Ll9wcmV2ID0gbnVsbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuX2ZpcnN0UFQgPT09IHB0KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdHAuX21vZCA9IHAuX3JvdW5kUHJvcHMgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBwdCA9IHRoaXMuX2ZpcnN0UFQsXG5cdFx0XHRcdHZhbDtcblx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHR2YWwgPSBsb29rdXBbdGhpcy5fcHJvcE5hbWVdIHx8IChwdC5uICE9IG51bGwgJiYgbG9va3VwWyBwdC5uLnNwbGl0KHRoaXMuX3Byb3BOYW1lICsgXCJfXCIpLmpvaW4oXCJcIikgXSk7XG5cdFx0XHRcdGlmICh2YWwgJiYgdHlwZW9mKHZhbCkgPT09IFwiZnVuY3Rpb25cIikgeyAvL3NvbWUgcHJvcGVydGllcyB0aGF0IGFyZSB2ZXJ5IHBsdWdpbi1zcGVjaWZpYyBhZGQgYSBwcmVmaXggbmFtZWQgYWZ0ZXIgdGhlIF9wcm9wTmFtZSBwbHVzIGFuIHVuZGVyc2NvcmUsIHNvIHdlIG5lZWQgdG8gaWdub3JlIHRoYXQgZXh0cmEgc3R1ZmYgaGVyZS5cblx0XHRcdFx0XHRpZiAocHQuZiA9PT0gMikge1xuXHRcdFx0XHRcdFx0cHQudC5fYXBwbHlQVC5tID0gdmFsO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwdC5tID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuX29uUGx1Z2luRXZlbnQgPSBmdW5jdGlvbih0eXBlLCB0d2Vlbikge1xuXHRcdFx0dmFyIHB0ID0gdHdlZW4uX2ZpcnN0UFQsXG5cdFx0XHRcdGNoYW5nZWQsIHB0MiwgZmlyc3QsIGxhc3QsIG5leHQ7XG5cdFx0XHRpZiAodHlwZSA9PT0gXCJfb25Jbml0QWxsUHJvcHNcIikge1xuXHRcdFx0XHQvL3NvcnRzIHRoZSBQcm9wVHdlZW4gbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHJpb3JpdHkgYmVjYXVzZSBzb21lIHBsdWdpbnMgbmVlZCB0byByZW5kZXIgZWFybGllci9sYXRlciB0aGFuIG90aGVycywgbGlrZSBNb3Rpb25CbHVyUGx1Z2luIGFwcGxpZXMgaXRzIGVmZmVjdHMgYWZ0ZXIgYWxsIHgveS9hbHBoYSB0d2VlbnMgaGF2ZSByZW5kZXJlZCBvbiBlYWNoIGZyYW1lLlxuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRuZXh0ID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0cHQyID0gZmlyc3Q7XG5cdFx0XHRcdFx0d2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuXHRcdFx0XHRcdFx0cHQyID0gcHQyLl9uZXh0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkpIHtcblx0XHRcdFx0XHRcdHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZpcnN0ID0gcHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgocHQuX25leHQgPSBwdDIpKSB7XG5cdFx0XHRcdFx0XHRwdDIuX3ByZXYgPSBwdDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bGFzdCA9IHB0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSB0d2Vlbi5fZmlyc3RQVCA9IGZpcnN0O1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdGlmIChwdC5wZykgaWYgKHR5cGVvZihwdC50W3R5cGVdKSA9PT0gXCJmdW5jdGlvblwiKSBpZiAocHQudFt0eXBlXSgpKSB7XG5cdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBjaGFuZ2VkO1xuXHRcdH07XG5cblx0XHRUd2VlblBsdWdpbi5hY3RpdmF0ZSA9IGZ1bmN0aW9uKHBsdWdpbnMpIHtcblx0XHRcdHZhciBpID0gcGx1Z2lucy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0aWYgKHBsdWdpbnNbaV0uQVBJID09PSBUd2VlblBsdWdpbi5BUEkpIHtcblx0XHRcdFx0XHRfcGx1Z2luc1sobmV3IHBsdWdpbnNbaV0oKSkuX3Byb3BOYW1lXSA9IHBsdWdpbnNbaV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH07XG5cblx0XHQvL3Byb3ZpZGVzIGEgbW9yZSBjb25jaXNlIHdheSB0byBkZWZpbmUgcGx1Z2lucyB0aGF0IGhhdmUgbm8gZGVwZW5kZW5jaWVzIGJlc2lkZXMgVHdlZW5QbHVnaW4gYW5kIFR3ZWVuTGl0ZSwgd3JhcHBpbmcgY29tbW9uIGJvaWxlcnBsYXRlIHN0dWZmIGludG8gb25lIGZ1bmN0aW9uIChhZGRlZCBpbiAxLjkuMCkuIFlvdSBkb24ndCBORUVEIHRvIHVzZSB0aGlzIHRvIGRlZmluZSBhIHBsdWdpbiAtIHRoZSBvbGQgd2F5IHN0aWxsIHdvcmtzIGFuZCBjYW4gYmUgdXNlZnVsIGluIGNlcnRhaW4gKHJhcmUpIHNpdHVhdGlvbnMuXG5cdFx0X2dzRGVmaW5lLnBsdWdpbiA9IGZ1bmN0aW9uKGNvbmZpZykge1xuXHRcdFx0aWYgKCFjb25maWcgfHwgIWNvbmZpZy5wcm9wTmFtZSB8fCAhY29uZmlnLmluaXQgfHwgIWNvbmZpZy5BUEkpIHsgdGhyb3cgXCJpbGxlZ2FsIHBsdWdpbiBkZWZpbml0aW9uLlwiOyB9XG5cdFx0XHR2YXIgcHJvcE5hbWUgPSBjb25maWcucHJvcE5hbWUsXG5cdFx0XHRcdHByaW9yaXR5ID0gY29uZmlnLnByaW9yaXR5IHx8IDAsXG5cdFx0XHRcdG92ZXJ3cml0ZVByb3BzID0gY29uZmlnLm92ZXJ3cml0ZVByb3BzLFxuXHRcdFx0XHRtYXAgPSB7aW5pdDpcIl9vbkluaXRUd2VlblwiLCBzZXQ6XCJzZXRSYXRpb1wiLCBraWxsOlwiX2tpbGxcIiwgcm91bmQ6XCJfbW9kXCIsIG1vZDpcIl9tb2RcIiwgaW5pdEFsbDpcIl9vbkluaXRBbGxQcm9wc1wifSxcblx0XHRcdFx0UGx1Z2luID0gX2NsYXNzKFwicGx1Z2lucy5cIiArIHByb3BOYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcE5hbWUuc3Vic3RyKDEpICsgXCJQbHVnaW5cIixcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFR3ZWVuUGx1Z2luLmNhbGwodGhpcywgcHJvcE5hbWUsIHByaW9yaXR5KTtcblx0XHRcdFx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzID0gb3ZlcndyaXRlUHJvcHMgfHwgW107XG5cdFx0XHRcdFx0fSwgKGNvbmZpZy5nbG9iYWwgPT09IHRydWUpKSxcblx0XHRcdFx0cCA9IFBsdWdpbi5wcm90b3R5cGUgPSBuZXcgVHdlZW5QbHVnaW4ocHJvcE5hbWUpLFxuXHRcdFx0XHRwcm9wO1xuXHRcdFx0cC5jb25zdHJ1Y3RvciA9IFBsdWdpbjtcblx0XHRcdFBsdWdpbi5BUEkgPSBjb25maWcuQVBJO1xuXHRcdFx0Zm9yIChwcm9wIGluIG1hcCkge1xuXHRcdFx0XHRpZiAodHlwZW9mKGNvbmZpZ1twcm9wXSkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdHBbbWFwW3Byb3BdXSA9IGNvbmZpZ1twcm9wXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0UGx1Z2luLnZlcnNpb24gPSBjb25maWcudmVyc2lvbjtcblx0XHRcdFR3ZWVuUGx1Z2luLmFjdGl2YXRlKFtQbHVnaW5dKTtcblx0XHRcdHJldHVybiBQbHVnaW47XG5cdFx0fTtcblxuXG5cdFx0Ly9ub3cgcnVuIHRocm91Z2ggYWxsIHRoZSBkZXBlbmRlbmNpZXMgZGlzY292ZXJlZCBhbmQgaWYgYW55IGFyZSBtaXNzaW5nLCBsb2cgdGhhdCB0byB0aGUgY29uc29sZSBhcyBhIHdhcm5pbmcuIFRoaXMgaXMgd2h5IGl0J3MgYmVzdCB0byBoYXZlIFR3ZWVuTGl0ZSBsb2FkIGxhc3QgLSBpdCBjYW4gY2hlY2sgYWxsIHRoZSBkZXBlbmRlbmNpZXMgZm9yIHlvdS5cblx0XHRhID0gd2luZG93Ll9nc1F1ZXVlO1xuXHRcdGlmIChhKSB7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRhW2ldKCk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHAgaW4gX2RlZkxvb2t1cCkge1xuXHRcdFx0XHRpZiAoIV9kZWZMb29rdXBbcF0uZnVuYykge1xuXHRcdFx0XHRcdHdpbmRvdy5jb25zb2xlLmxvZyhcIkdTQVAgZW5jb3VudGVyZWQgbWlzc2luZyBkZXBlbmRlbmN5OiBcIiArIHApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0X3RpY2tlckFjdGl2ZSA9IGZhbHNlOyAvL2Vuc3VyZXMgdGhhdCB0aGUgZmlyc3Qgb2ZmaWNpYWwgYW5pbWF0aW9uIGZvcmNlcyBhIHRpY2tlci50aWNrKCkgdG8gdXBkYXRlIHRoZSB0aW1lIHdoZW4gaXQgaXMgaW5zdGFudGlhdGVkXG5cbn0pKCh0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cyAmJiB0eXBlb2YoZ2xvYmFsKSAhPT0gXCJ1bmRlZmluZWRcIikgPyBnbG9iYWwgOiB0aGlzIHx8IHdpbmRvdywgXCJUd2VlbkxpdGVcIik7IiwiLyohXG4gKiBWRVJTSU9OOiAxLjE5LjBcbiAqIERBVEU6IDIwMTYtMDctMTRcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKiBcbiAqIEluY2x1ZGVzIGFsbCBvZiB0aGUgZm9sbG93aW5nOiBUd2VlbkxpdGUsIFR3ZWVuTWF4LCBUaW1lbGluZUxpdGUsIFRpbWVsaW5lTWF4LCBFYXNlUGFjaywgQ1NTUGx1Z2luLCBSb3VuZFByb3BzUGx1Z2luLCBCZXppZXJQbHVnaW4sIEF0dHJQbHVnaW4sIERpcmVjdGlvbmFsUm90YXRpb25QbHVnaW5cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxNiwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyB3b3JrIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHA6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgc29mdHdhcmUgYWdyZWVtZW50IHRoYXQgd2FzIGlzc3VlZCB3aXRoIHlvdXIgbWVtYmVyc2hpcC5cbiAqIFxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4gKiovXG52YXIgX2dzU2NvcGUgPSAodHlwZW9mKG1vZHVsZSkgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMgJiYgdHlwZW9mKGdsb2JhbCkgIT09IFwidW5kZWZpbmVkXCIpID8gZ2xvYmFsIDogdGhpcyB8fCB3aW5kb3c7IC8vaGVscHMgZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBBTUQvUmVxdWlyZUpTIGFuZCBDb21tb25KUy9Ob2RlXG4oX2dzU2NvcGUuX2dzUXVldWUgfHwgKF9nc1Njb3BlLl9nc1F1ZXVlID0gW10pKS5wdXNoKCBmdW5jdGlvbigpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRfZ3NTY29wZS5fZ3NEZWZpbmUoXCJUd2Vlbk1heFwiLCBbXCJjb3JlLkFuaW1hdGlvblwiLFwiY29yZS5TaW1wbGVUaW1lbGluZVwiLFwiVHdlZW5MaXRlXCJdLCBmdW5jdGlvbihBbmltYXRpb24sIFNpbXBsZVRpbWVsaW5lLCBUd2VlbkxpdGUpIHtcblxuXHRcdHZhciBfc2xpY2UgPSBmdW5jdGlvbihhKSB7IC8vZG9uJ3QgdXNlIFtdLnNsaWNlIGJlY2F1c2UgdGhhdCBkb2Vzbid0IHdvcmsgaW4gSUU4IHdpdGggYSBOb2RlTGlzdCB0aGF0J3MgcmV0dXJuZWQgYnkgcXVlcnlTZWxlY3RvckFsbCgpXG5cdFx0XHRcdHZhciBiID0gW10sXG5cdFx0XHRcdFx0bCA9IGEubGVuZ3RoLFxuXHRcdFx0XHRcdGk7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgIT09IGw7IGIucHVzaChhW2krK10pKTtcblx0XHRcdFx0cmV0dXJuIGI7XG5cdFx0XHR9LFxuXHRcdFx0X2FwcGx5Q3ljbGUgPSBmdW5jdGlvbih2YXJzLCB0YXJnZXRzLCBpKSB7XG5cdFx0XHRcdHZhciBhbHQgPSB2YXJzLmN5Y2xlLFxuXHRcdFx0XHRcdHAsIHZhbDtcblx0XHRcdFx0Zm9yIChwIGluIGFsdCkge1xuXHRcdFx0XHRcdHZhbCA9IGFsdFtwXTtcblx0XHRcdFx0XHR2YXJzW3BdID0gKHR5cGVvZih2YWwpID09PSBcImZ1bmN0aW9uXCIpID8gdmFsKGksIHRhcmdldHNbaV0pIDogdmFsW2kgJSB2YWwubGVuZ3RoXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgdmFycy5jeWNsZTtcblx0XHRcdH0sXG5cdFx0XHRUd2Vlbk1heCA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdFx0VHdlZW5MaXRlLmNhbGwodGhpcywgdGFyZ2V0LCBkdXJhdGlvbiwgdmFycyk7XG5cdFx0XHRcdHRoaXMuX2N5Y2xlID0gMDtcblx0XHRcdFx0dGhpcy5feW95byA9ICh0aGlzLnZhcnMueW95byA9PT0gdHJ1ZSk7XG5cdFx0XHRcdHRoaXMuX3JlcGVhdCA9IHRoaXMudmFycy5yZXBlYXQgfHwgMDtcblx0XHRcdFx0dGhpcy5fcmVwZWF0RGVsYXkgPSB0aGlzLnZhcnMucmVwZWF0RGVsYXkgfHwgMDtcblx0XHRcdFx0dGhpcy5fZGlydHkgPSB0cnVlOyAvL2Vuc3VyZXMgdGhhdCBpZiB0aGVyZSBpcyBhbnkgcmVwZWF0LCB0aGUgdG90YWxEdXJhdGlvbiB3aWxsIGdldCByZWNhbGN1bGF0ZWQgdG8gYWNjdXJhdGVseSByZXBvcnQgaXQuXG5cdFx0XHRcdHRoaXMucmVuZGVyID0gVHdlZW5NYXgucHJvdG90eXBlLnJlbmRlcjsgLy9zcGVlZCBvcHRpbWl6YXRpb24gKGF2b2lkIHByb3RvdHlwZSBsb29rdXAgb24gdGhpcyBcImhvdFwiIG1ldGhvZClcblx0XHRcdH0sXG5cdFx0XHRfdGlueU51bSA9IDAuMDAwMDAwMDAwMSxcblx0XHRcdFR3ZWVuTGl0ZUludGVybmFscyA9IFR3ZWVuTGl0ZS5faW50ZXJuYWxzLFxuXHRcdFx0X2lzU2VsZWN0b3IgPSBUd2VlbkxpdGVJbnRlcm5hbHMuaXNTZWxlY3Rvcixcblx0XHRcdF9pc0FycmF5ID0gVHdlZW5MaXRlSW50ZXJuYWxzLmlzQXJyYXksXG5cdFx0XHRwID0gVHdlZW5NYXgucHJvdG90eXBlID0gVHdlZW5MaXRlLnRvKHt9LCAwLjEsIHt9KSxcblx0XHRcdF9ibGFua0FycmF5ID0gW107XG5cblx0XHRUd2Vlbk1heC52ZXJzaW9uID0gXCIxLjE5LjBcIjtcblx0XHRwLmNvbnN0cnVjdG9yID0gVHdlZW5NYXg7XG5cdFx0cC5raWxsKCkuX2djID0gZmFsc2U7XG5cdFx0VHdlZW5NYXgua2lsbFR3ZWVuc09mID0gVHdlZW5NYXgua2lsbERlbGF5ZWRDYWxsc1RvID0gVHdlZW5MaXRlLmtpbGxUd2VlbnNPZjtcblx0XHRUd2Vlbk1heC5nZXRUd2VlbnNPZiA9IFR3ZWVuTGl0ZS5nZXRUd2VlbnNPZjtcblx0XHRUd2Vlbk1heC5sYWdTbW9vdGhpbmcgPSBUd2VlbkxpdGUubGFnU21vb3RoaW5nO1xuXHRcdFR3ZWVuTWF4LnRpY2tlciA9IFR3ZWVuTGl0ZS50aWNrZXI7XG5cdFx0VHdlZW5NYXgucmVuZGVyID0gVHdlZW5MaXRlLnJlbmRlcjtcblxuXHRcdHAuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5feW95byA9ICh0aGlzLnZhcnMueW95byA9PT0gdHJ1ZSk7XG5cdFx0XHR0aGlzLl9yZXBlYXQgPSB0aGlzLnZhcnMucmVwZWF0IHx8IDA7XG5cdFx0XHR0aGlzLl9yZXBlYXREZWxheSA9IHRoaXMudmFycy5yZXBlYXREZWxheSB8fCAwO1xuXHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHRcdHJldHVybiBUd2VlbkxpdGUucHJvdG90eXBlLmludmFsaWRhdGUuY2FsbCh0aGlzKTtcblx0XHR9O1xuXHRcdFxuXHRcdHAudXBkYXRlVG8gPSBmdW5jdGlvbih2YXJzLCByZXNldER1cmF0aW9uKSB7XG5cdFx0XHR2YXIgY3VyUmF0aW8gPSB0aGlzLnJhdGlvLFxuXHRcdFx0XHRpbW1lZGlhdGUgPSB0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyIHx8IHZhcnMuaW1tZWRpYXRlUmVuZGVyLFxuXHRcdFx0XHRwO1xuXHRcdFx0aWYgKHJlc2V0RHVyYXRpb24gJiYgdGhpcy5fc3RhcnRUaW1lIDwgdGhpcy5fdGltZWxpbmUuX3RpbWUpIHtcblx0XHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gdGhpcy5fdGltZWxpbmUuX3RpbWU7XG5cdFx0XHRcdHRoaXMuX3VuY2FjaGUoZmFsc2UpO1xuXHRcdFx0XHRpZiAodGhpcy5fZ2MpIHtcblx0XHRcdFx0XHR0aGlzLl9lbmFibGVkKHRydWUsIGZhbHNlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lbGluZS5pbnNlcnQodGhpcywgdGhpcy5fc3RhcnRUaW1lIC0gdGhpcy5fZGVsYXkpOyAvL2Vuc3VyZXMgdGhhdCBhbnkgbmVjZXNzYXJ5IHJlLXNlcXVlbmNpbmcgb2YgQW5pbWF0aW9ucyBpbiB0aGUgdGltZWxpbmUgb2NjdXJzIHRvIG1ha2Ugc3VyZSB0aGUgcmVuZGVyaW5nIG9yZGVyIGlzIGNvcnJlY3QuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdHRoaXMudmFyc1twXSA9IHZhcnNbcF07XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5faW5pdHRlZCB8fCBpbW1lZGlhdGUpIHtcblx0XHRcdFx0aWYgKHJlc2V0RHVyYXRpb24pIHtcblx0XHRcdFx0XHR0aGlzLl9pbml0dGVkID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKGltbWVkaWF0ZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmICh0aGlzLl9nYykge1xuXHRcdFx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLl9ub3RpZnlQbHVnaW5zT2ZFbmFibGVkICYmIHRoaXMuX2ZpcnN0UFQpIHtcblx0XHRcdFx0XHRcdFR3ZWVuTGl0ZS5fb25QbHVnaW5FdmVudChcIl9vbkRpc2FibGVcIiwgdGhpcyk7IC8vaW4gY2FzZSBhIHBsdWdpbiBsaWtlIE1vdGlvbkJsdXIgbXVzdCBwZXJmb3JtIHNvbWUgY2xlYW51cCB0YXNrc1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZSAvIHRoaXMuX2R1cmF0aW9uID4gMC45OTgpIHsgLy9pZiB0aGUgdHdlZW4gaGFzIGZpbmlzaGVkIChvciBjb21lIGV4dHJlbWVseSBjbG9zZSB0byBmaW5pc2hpbmcpLCB3ZSBqdXN0IG5lZWQgdG8gcmV3aW5kIGl0IHRvIDAgYW5kIHRoZW4gcmVuZGVyIGl0IGFnYWluIGF0IHRoZSBlbmQgd2hpY2ggZm9yY2VzIGl0IHRvIHJlLWluaXRpYWxpemUgKHBhcnNpbmcgdGhlIG5ldyB2YXJzKS4gV2UgYWxsb3cgdHdlZW5zIHRoYXQgYXJlIGNsb3NlIHRvIGZpbmlzaGluZyAoYnV0IGhhdmVuJ3QgcXVpdGUgZmluaXNoZWQpIHRvIHdvcmsgdGhpcyB3YXkgdG9vIGJlY2F1c2Ugb3RoZXJ3aXNlLCB0aGUgdmFsdWVzIGFyZSBzbyBzbWFsbCB3aGVuIGRldGVybWluaW5nIHdoZXJlIHRvIHByb2plY3QgdGhlIHN0YXJ0aW5nIHZhbHVlcyB0aGF0IGJpbmFyeSBtYXRoIGlzc3VlcyBjcmVlcCBpbiBhbmQgY2FuIG1ha2UgdGhlIHR3ZWVuIGFwcGVhciB0byByZW5kZXIgaW5jb3JyZWN0bHkgd2hlbiBydW4gYmFja3dhcmRzLiBcblx0XHRcdFx0XHRcdHZhciBwcmV2VGltZSA9IHRoaXMuX3RvdGFsVGltZTtcblx0XHRcdFx0XHRcdHRoaXMucmVuZGVyKDAsIHRydWUsIGZhbHNlKTtcblx0XHRcdFx0XHRcdHRoaXMuX2luaXR0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdHRoaXMucmVuZGVyKHByZXZUaW1lLCB0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMuX2luaXR0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdHRoaXMuX2luaXQoKTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLl90aW1lID4gMCB8fCBpbW1lZGlhdGUpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGludiA9IDEgLyAoMSAtIGN1clJhdGlvKSxcblx0XHRcdFx0XHRcdFx0XHRwdCA9IHRoaXMuX2ZpcnN0UFQsIGVuZFZhbHVlO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRcdFx0XHRlbmRWYWx1ZSA9IHB0LnMgKyBwdC5jO1xuXHRcdFx0XHRcdFx0XHRcdHB0LmMgKj0gaW52O1xuXHRcdFx0XHRcdFx0XHRcdHB0LnMgPSBlbmRWYWx1ZSAtIHB0LmM7XG5cdFx0XHRcdFx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblx0XHRcdFx0XG5cdFx0cC5yZW5kZXIgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcblx0XHRcdGlmICghdGhpcy5faW5pdHRlZCkgaWYgKHRoaXMuX2R1cmF0aW9uID09PSAwICYmIHRoaXMudmFycy5yZXBlYXQpIHsgLy96ZXJvIGR1cmF0aW9uIHR3ZWVucyB0aGF0IHJlbmRlciBpbW1lZGlhdGVseSBoYXZlIHJlbmRlcigpIGNhbGxlZCBmcm9tIFR3ZWVuTGl0ZSdzIGNvbnN0cnVjdG9yLCBiZWZvcmUgVHdlZW5NYXgncyBjb25zdHJ1Y3RvciBoYXMgZmluaXNoZWQgc2V0dGluZyBfcmVwZWF0LCBfcmVwZWF0RGVsYXksIGFuZCBfeW95byB3aGljaCBhcmUgY3JpdGljYWwgaW4gZGV0ZXJtaW5pbmcgdG90YWxEdXJhdGlvbigpIHNvIHdlIG5lZWQgdG8gY2FsbCBpbnZhbGlkYXRlKCkgd2hpY2ggaXMgYSBsb3cta2Igd2F5IHRvIGdldCB0aG9zZSBzZXQgcHJvcGVybHkuXG5cdFx0XHRcdHRoaXMuaW52YWxpZGF0ZSgpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHRvdGFsRHVyID0gKCF0aGlzLl9kaXJ0eSkgPyB0aGlzLl90b3RhbER1cmF0aW9uIDogdGhpcy50b3RhbER1cmF0aW9uKCksXG5cdFx0XHRcdHByZXZUaW1lID0gdGhpcy5fdGltZSxcblx0XHRcdFx0cHJldlRvdGFsVGltZSA9IHRoaXMuX3RvdGFsVGltZSwgXG5cdFx0XHRcdHByZXZDeWNsZSA9IHRoaXMuX2N5Y2xlLFxuXHRcdFx0XHRkdXJhdGlvbiA9IHRoaXMuX2R1cmF0aW9uLFxuXHRcdFx0XHRwcmV2UmF3UHJldlRpbWUgPSB0aGlzLl9yYXdQcmV2VGltZSxcblx0XHRcdFx0aXNDb21wbGV0ZSwgY2FsbGJhY2ssIHB0LCBjeWNsZUR1cmF0aW9uLCByLCB0eXBlLCBwb3csIHJhd1ByZXZUaW1lO1xuXHRcdFx0aWYgKHRpbWUgPj0gdG90YWxEdXIgLSAwLjAwMDAwMDEpIHsgLy90byB3b3JrIGFyb3VuZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IG1hdGggYXJ0aWZhY3RzLlxuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0b3RhbER1cjtcblx0XHRcdFx0dGhpcy5fY3ljbGUgPSB0aGlzLl9yZXBlYXQ7XG5cdFx0XHRcdGlmICh0aGlzLl95b3lvICYmICh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGltZSA9IDA7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuX2NhbGNFbmQgPyB0aGlzLl9lYXNlLmdldFJhdGlvKDApIDogMDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl90aW1lID0gZHVyYXRpb247XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuX2NhbGNFbmQgPyB0aGlzLl9lYXNlLmdldFJhdGlvKDEpIDogMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXRoaXMuX3JldmVyc2VkKSB7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uQ29tcGxldGVcIjtcblx0XHRcdFx0XHRmb3JjZSA9IChmb3JjZSB8fCB0aGlzLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4pOyAvL290aGVyd2lzZSwgaWYgdGhlIGFuaW1hdGlvbiBpcyB1bnBhdXNlZC9hY3RpdmF0ZWQgYWZ0ZXIgaXQncyBhbHJlYWR5IGZpbmlzaGVkLCBpdCBkb2Vzbid0IGdldCByZW1vdmVkIGZyb20gdGhlIHBhcmVudCB0aW1lbGluZS5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPT09IDApIGlmICh0aGlzLl9pbml0dGVkIHx8ICF0aGlzLnZhcnMubGF6eSB8fCBmb3JjZSkgeyAvL3plcm8tZHVyYXRpb24gdHdlZW5zIGFyZSB0cmlja3kgYmVjYXVzZSB3ZSBtdXN0IGRpc2Nlcm4gdGhlIG1vbWVudHVtL2RpcmVjdGlvbiBvZiB0aW1lIGluIG9yZGVyIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBzdGFydGluZyB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkIG9yIHRoZSBlbmRpbmcgdmFsdWVzLiBJZiB0aGUgXCJwbGF5aGVhZFwiIG9mIGl0cyB0aW1lbGluZSBnb2VzIHBhc3QgdGhlIHplcm8tZHVyYXRpb24gdHdlZW4gaW4gdGhlIGZvcndhcmQgZGlyZWN0aW9uIG9yIGxhbmRzIGRpcmVjdGx5IG9uIGl0LCB0aGUgZW5kIHZhbHVlcyBzaG91bGQgYmUgcmVuZGVyZWQsIGJ1dCBpZiB0aGUgdGltZWxpbmUncyBcInBsYXloZWFkXCIgbW92ZXMgcGFzdCBpdCBpbiB0aGUgYmFja3dhcmQgZGlyZWN0aW9uIChmcm9tIGEgcG9zdGl0aXZlIHRpbWUgdG8gYSBuZWdhdGl2ZSB0aW1lKSwgdGhlIHN0YXJ0aW5nIHZhbHVlcyBtdXN0IGJlIHJlbmRlcmVkLlxuXHRcdFx0XHRcdGlmICh0aGlzLl9zdGFydFRpbWUgPT09IHRoaXMuX3RpbWVsaW5lLl9kdXJhdGlvbikgeyAvL2lmIGEgemVyby1kdXJhdGlvbiB0d2VlbiBpcyBhdCB0aGUgVkVSWSBlbmQgb2YgYSB0aW1lbGluZSBhbmQgdGhhdCB0aW1lbGluZSByZW5kZXJzIGF0IGl0cyBlbmQsIGl0IHdpbGwgdHlwaWNhbGx5IGFkZCBhIHRpbnkgYml0IG9mIGN1c2hpb24gdG8gdGhlIHJlbmRlciB0aW1lIHRvIHByZXZlbnQgcm91bmRpbmcgZXJyb3JzIGZyb20gZ2V0dGluZyBpbiB0aGUgd2F5IG9mIHR3ZWVucyByZW5kZXJpbmcgdGhlaXIgVkVSWSBlbmQuIElmIHdlIHRoZW4gcmV2ZXJzZSgpIHRoYXQgdGltZWxpbmUsIHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIHdpbGwgdHJpZ2dlciBpdHMgb25SZXZlcnNlQ29tcGxldGUgZXZlbiB0aG91Z2ggdGVjaG5pY2FsbHkgdGhlIHBsYXloZWFkIGRpZG4ndCBwYXNzIG92ZXIgaXQgYWdhaW4uIEl0J3MgYSB2ZXJ5IHNwZWNpZmljIGVkZ2UgY2FzZSB3ZSBtdXN0IGFjY29tbW9kYXRlLlxuXHRcdFx0XHRcdFx0dGltZSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwcmV2UmF3UHJldlRpbWUgPCAwIHx8ICh0aW1lIDw9IDAgJiYgdGltZSA+PSAtMC4wMDAwMDAxKSB8fCAocHJldlJhd1ByZXZUaW1lID09PSBfdGlueU51bSAmJiB0aGlzLmRhdGEgIT09IFwiaXNQYXVzZVwiKSkgaWYgKHByZXZSYXdQcmV2VGltZSAhPT0gdGltZSkgeyAvL25vdGU6IHdoZW4gdGhpcy5kYXRhIGlzIFwiaXNQYXVzZVwiLCBpdCdzIGEgY2FsbGJhY2sgYWRkZWQgYnkgYWRkUGF1c2UoKSBvbiBhIHRpbWVsaW5lIHRoYXQgd2Ugc2hvdWxkIG5vdCBiZSB0cmlnZ2VyZWQgd2hlbiBMRUFWSU5HIGl0cyBleGFjdCBzdGFydCB0aW1lLiBJbiBvdGhlciB3b3JkcywgdGwuYWRkUGF1c2UoMSkucGxheSgxKSBzaG91bGRuJ3QgcGF1c2UuXG5cdFx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRpZiAocHJldlJhd1ByZXZUaW1lID4gX3RpbnlOdW0pIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gcmF3UHJldlRpbWUgPSAoIXN1cHByZXNzRXZlbnRzIHx8IHRpbWUgfHwgcHJldlJhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdH0gZWxzZSBpZiAodGltZSA8IDAuMDAwMDAwMSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMsIHJvdW5kIHN1cGVyIHNtYWxsIHZhbHVlcyB0byAwLlxuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gdGhpcy5fY3ljbGUgPSAwO1xuXHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5fY2FsY0VuZCA/IHRoaXMuX2Vhc2UuZ2V0UmF0aW8oMCkgOiAwO1xuXHRcdFx0XHRpZiAocHJldlRvdGFsVGltZSAhPT0gMCB8fCAoZHVyYXRpb24gPT09IDAgJiYgcHJldlJhd1ByZXZUaW1lID4gMCkpIHtcblx0XHRcdFx0XHRjYWxsYmFjayA9IFwib25SZXZlcnNlQ29tcGxldGVcIjtcblx0XHRcdFx0XHRpc0NvbXBsZXRlID0gdGhpcy5fcmV2ZXJzZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRpbWUgPCAwKSB7XG5cdFx0XHRcdFx0dGhpcy5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdFx0aWYgKGR1cmF0aW9uID09PSAwKSBpZiAodGhpcy5faW5pdHRlZCB8fCAhdGhpcy52YXJzLmxhenkgfHwgZm9yY2UpIHsgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyBhcmUgdHJpY2t5IGJlY2F1c2Ugd2UgbXVzdCBkaXNjZXJuIHRoZSBtb21lbnR1bS9kaXJlY3Rpb24gb2YgdGltZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgc3RhcnRpbmcgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCBvciB0aGUgZW5kaW5nIHZhbHVlcy4gSWYgdGhlIFwicGxheWhlYWRcIiBvZiBpdHMgdGltZWxpbmUgZ29lcyBwYXN0IHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGluIHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBvciBsYW5kcyBkaXJlY3RseSBvbiBpdCwgdGhlIGVuZCB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkLCBidXQgaWYgdGhlIHRpbWVsaW5lJ3MgXCJwbGF5aGVhZFwiIG1vdmVzIHBhc3QgaXQgaW4gdGhlIGJhY2t3YXJkIGRpcmVjdGlvbiAoZnJvbSBhIHBvc3RpdGl2ZSB0aW1lIHRvIGEgbmVnYXRpdmUgdGltZSksIHRoZSBzdGFydGluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZC5cblx0XHRcdFx0XHRcdGlmIChwcmV2UmF3UHJldlRpbWUgPj0gMCkge1xuXHRcdFx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHJhd1ByZXZUaW1lID0gKCFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHByZXZSYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghdGhpcy5faW5pdHRlZCkgeyAvL2lmIHdlIHJlbmRlciB0aGUgdmVyeSBiZWdpbm5pbmcgKHRpbWUgPT0gMCkgb2YgYSBmcm9tVG8oKSwgd2UgbXVzdCBmb3JjZSB0aGUgcmVuZGVyIChub3JtYWwgdHdlZW5zIHdvdWxkbid0IG5lZWQgdG8gcmVuZGVyIGF0IGEgdGltZSBvZiAwIHdoZW4gdGhlIHByZXZUaW1lIHdhcyBhbHNvIDApLiBUaGlzIGlzIGFsc28gbWFuZGF0b3J5IHRvIG1ha2Ugc3VyZSBvdmVyd3JpdGluZyBraWNrcyBpbiBpbW1lZGlhdGVseS5cblx0XHRcdFx0XHRmb3JjZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RpbWUgPSB0aW1lO1xuXHRcdFx0XHRpZiAodGhpcy5fcmVwZWF0ICE9PSAwKSB7XG5cdFx0XHRcdFx0Y3ljbGVEdXJhdGlvbiA9IGR1cmF0aW9uICsgdGhpcy5fcmVwZWF0RGVsYXk7XG5cdFx0XHRcdFx0dGhpcy5fY3ljbGUgPSAodGhpcy5fdG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbikgPj4gMDsgLy9vcmlnaW5hbGx5IF90b3RhbFRpbWUgJSBjeWNsZUR1cmF0aW9uIGJ1dCBmbG9hdGluZyBwb2ludCBlcnJvcnMgY2F1c2VkIHByb2JsZW1zLCBzbyBJIG5vcm1hbGl6ZWQgaXQuICg0ICUgMC44IHNob3VsZCBiZSAwIGJ1dCBzb21lIGJyb3dzZXJzIHJlcG9ydCBpdCBhcyAwLjc5OTk5OTk5ISlcblx0XHRcdFx0XHRpZiAodGhpcy5fY3ljbGUgIT09IDApIGlmICh0aGlzLl9jeWNsZSA9PT0gdGhpcy5fdG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbiAmJiBwcmV2VG90YWxUaW1lIDw9IHRpbWUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2N5Y2xlLS07IC8vb3RoZXJ3aXNlIHdoZW4gcmVuZGVyZWQgZXhhY3RseSBhdCB0aGUgZW5kIHRpbWUsIGl0IHdpbGwgYWN0IGFzIHRob3VnaCBpdCBpcyByZXBlYXRpbmcgKGF0IHRoZSBiZWdpbm5pbmcpXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90b3RhbFRpbWUgLSAodGhpcy5fY3ljbGUgKiBjeWNsZUR1cmF0aW9uKTtcblx0XHRcdFx0XHRpZiAodGhpcy5feW95bykgaWYgKCh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gZHVyYXRpb24gLSB0aGlzLl90aW1lO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZSA+IGR1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gZHVyYXRpb247XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl90aW1lIDwgMCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fdGltZSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuX2Vhc2VUeXBlKSB7XG5cdFx0XHRcdFx0ciA9IHRoaXMuX3RpbWUgLyBkdXJhdGlvbjtcblx0XHRcdFx0XHR0eXBlID0gdGhpcy5fZWFzZVR5cGU7XG5cdFx0XHRcdFx0cG93ID0gdGhpcy5fZWFzZVBvd2VyO1xuXHRcdFx0XHRcdGlmICh0eXBlID09PSAxIHx8ICh0eXBlID09PSAzICYmIHIgPj0gMC41KSkge1xuXHRcdFx0XHRcdFx0ciA9IDEgLSByO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodHlwZSA9PT0gMykge1xuXHRcdFx0XHRcdFx0ciAqPSAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocG93ID09PSAxKSB7XG5cdFx0XHRcdFx0XHRyICo9IHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDIpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDMpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHIgKiByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocG93ID09PSA0KSB7XG5cdFx0XHRcdFx0XHRyICo9IHIgKiByICogciAqIHI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHR5cGUgPT09IDEpIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSAxIC0gcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT09IDIpIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fdGltZSAvIGR1cmF0aW9uIDwgMC41KSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gciAvIDI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSAxIC0gKHIgLyAyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5nZXRSYXRpbyh0aGlzLl90aW1lIC8gZHVyYXRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdGlmIChwcmV2VGltZSA9PT0gdGhpcy5fdGltZSAmJiAhZm9yY2UgJiYgcHJldkN5Y2xlID09PSB0aGlzLl9jeWNsZSkge1xuXHRcdFx0XHRpZiAocHJldlRvdGFsVGltZSAhPT0gdGhpcy5fdG90YWxUaW1lKSBpZiAodGhpcy5fb25VcGRhdGUpIGlmICghc3VwcHJlc3NFdmVudHMpIHsgLy9zbyB0aGF0IG9uVXBkYXRlIGZpcmVzIGV2ZW4gZHVyaW5nIHRoZSByZXBlYXREZWxheSAtIGFzIGxvbmcgYXMgdGhlIHRvdGFsVGltZSBjaGFuZ2VkLCB3ZSBzaG91bGQgdHJpZ2dlciBvblVwZGF0ZS5cblx0XHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIXRoaXMuX2luaXR0ZWQpIHtcblx0XHRcdFx0dGhpcy5faW5pdCgpO1xuXHRcdFx0XHRpZiAoIXRoaXMuX2luaXR0ZWQgfHwgdGhpcy5fZ2MpIHsgLy9pbW1lZGlhdGVSZW5kZXIgdHdlZW5zIHR5cGljYWxseSB3b24ndCBpbml0aWFsaXplIHVudGlsIHRoZSBwbGF5aGVhZCBhZHZhbmNlcyAoX3RpbWUgaXMgZ3JlYXRlciB0aGFuIDApIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IG92ZXJ3cml0aW5nIG9jY3VycyBwcm9wZXJseS4gQWxzbywgaWYgYWxsIG9mIHRoZSB0d2VlbmluZyBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBvdmVyd3JpdHRlbiAod2hpY2ggd291bGQgY2F1c2UgX2djIHRvIGJlIHRydWUsIGFzIHNldCBpbiBfaW5pdCgpKSwgd2Ugc2hvdWxkbid0IGNvbnRpbnVlIG90aGVyd2lzZSBhbiBvblN0YXJ0IGNhbGxiYWNrIGNvdWxkIGJlIGNhbGxlZCBmb3IgZXhhbXBsZS5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWZvcmNlICYmIHRoaXMuX2ZpcnN0UFQgJiYgKCh0aGlzLnZhcnMubGF6eSAhPT0gZmFsc2UgJiYgdGhpcy5fZHVyYXRpb24pIHx8ICh0aGlzLnZhcnMubGF6eSAmJiAhdGhpcy5fZHVyYXRpb24pKSkgeyAvL3dlIHN0aWNrIGl0IGluIHRoZSBxdWV1ZSBmb3IgcmVuZGVyaW5nIGF0IHRoZSB2ZXJ5IGVuZCBvZiB0aGUgdGljayAtIHRoaXMgaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gYmVjYXVzZSBicm93c2VycyBpbnZhbGlkYXRlIHN0eWxlcyBhbmQgZm9yY2UgYSByZWNhbGN1bGF0aW9uIGlmIHlvdSByZWFkLCB3cml0ZSwgYW5kIHRoZW4gcmVhZCBzdHlsZSBkYXRhIChzbyBpdCdzIGJldHRlciB0byByZWFkL3JlYWQvcmVhZC93cml0ZS93cml0ZS93cml0ZSB0aGFuIHJlYWQvd3JpdGUvcmVhZC93cml0ZS9yZWFkL3dyaXRlKS4gVGhlIGRvd24gc2lkZSwgb2YgY291cnNlLCBpcyB0aGF0IHVzdWFsbHkgeW91IFdBTlQgdGhpbmdzIHRvIHJlbmRlciBpbW1lZGlhdGVseSBiZWNhdXNlIHlvdSBtYXkgaGF2ZSBjb2RlIHJ1bm5pbmcgcmlnaHQgYWZ0ZXIgdGhhdCB3aGljaCBkZXBlbmRzIG9uIHRoZSBjaGFuZ2UuIExpa2UgaW1hZ2luZSBydW5uaW5nIFR3ZWVuTGl0ZS5zZXQoLi4uKSBhbmQgdGhlbiBpbW1lZGlhdGVseSBhZnRlciB0aGF0LCBjcmVhdGluZyBhIG5vdGhlciB0d2VlbiB0aGF0IGFuaW1hdGVzIHRoZSBzYW1lIHByb3BlcnR5IHRvIGFub3RoZXIgdmFsdWU7IHRoZSBzdGFydGluZyB2YWx1ZXMgb2YgdGhhdCAybmQgdHdlZW4gd291bGRuJ3QgYmUgYWNjdXJhdGUgaWYgbGF6eSBpcyB0cnVlLlxuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSBwcmV2VGltZTtcblx0XHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSBwcmV2VG90YWxUaW1lO1xuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gcHJldlJhd1ByZXZUaW1lO1xuXHRcdFx0XHRcdHRoaXMuX2N5Y2xlID0gcHJldkN5Y2xlO1xuXHRcdFx0XHRcdFR3ZWVuTGl0ZUludGVybmFscy5sYXp5VHdlZW5zLnB1c2godGhpcyk7XG5cdFx0XHRcdFx0dGhpcy5fbGF6eSA9IFt0aW1lLCBzdXBwcmVzc0V2ZW50c107XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vX2Vhc2UgaXMgaW5pdGlhbGx5IHNldCB0byBkZWZhdWx0RWFzZSwgc28gbm93IHRoYXQgaW5pdCgpIGhhcyBydW4sIF9lYXNlIGlzIHNldCBwcm9wZXJseSBhbmQgd2UgbmVlZCB0byByZWNhbGN1bGF0ZSB0aGUgcmF0aW8uIE92ZXJhbGwgdGhpcyBpcyBmYXN0ZXIgdGhhbiB1c2luZyBjb25kaXRpb25hbCBsb2dpYyBlYXJsaWVyIGluIHRoZSBtZXRob2QgdG8gYXZvaWQgaGF2aW5nIHRvIHNldCByYXRpbyB0d2ljZSBiZWNhdXNlIHdlIG9ubHkgaW5pdCgpIG9uY2UgYnV0IHJlbmRlclRpbWUoKSBnZXRzIGNhbGxlZCBWRVJZIGZyZXF1ZW50bHkuXG5cdFx0XHRcdGlmICh0aGlzLl90aW1lICYmICFpc0NvbXBsZXRlKSB7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuZ2V0UmF0aW8odGhpcy5fdGltZSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0fSBlbHNlIGlmIChpc0NvbXBsZXRlICYmIHRoaXMuX2Vhc2UuX2NhbGNFbmQpIHtcblx0XHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5nZXRSYXRpbygodGhpcy5fdGltZSA9PT0gMCkgPyAwIDogMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9sYXp5ICE9PSBmYWxzZSkge1xuXHRcdFx0XHR0aGlzLl9sYXp5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy5fYWN0aXZlKSBpZiAoIXRoaXMuX3BhdXNlZCAmJiB0aGlzLl90aW1lICE9PSBwcmV2VGltZSAmJiB0aW1lID49IDApIHtcblx0XHRcdFx0dGhpcy5fYWN0aXZlID0gdHJ1ZTsgLy9zbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgYSB0d2VlbiAoYXMgb3Bwb3NlZCB0byB0aGUgdGltZWxpbmUgcmVuZGVyaW5nIGl0KSwgdGhlIHRpbWVsaW5lIGlzIGZvcmNlZCB0byByZS1yZW5kZXIgYW5kIGFsaWduIGl0IHdpdGggdGhlIHByb3BlciB0aW1lL2ZyYW1lIG9uIHRoZSBuZXh0IHJlbmRlcmluZyBjeWNsZS4gTWF5YmUgdGhlIHR3ZWVuIGFscmVhZHkgZmluaXNoZWQgYnV0IHRoZSB1c2VyIG1hbnVhbGx5IHJlLXJlbmRlcnMgaXQgYXMgaGFsZndheSBkb25lLlxuXHRcdFx0fVxuXHRcdFx0aWYgKHByZXZUb3RhbFRpbWUgPT09IDApIHtcblx0XHRcdFx0aWYgKHRoaXMuX2luaXR0ZWQgPT09IDIgJiYgdGltZSA+IDApIHtcblx0XHRcdFx0XHQvL3RoaXMuaW52YWxpZGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuX2luaXQoKTsgLy93aWxsIGp1c3QgYXBwbHkgb3ZlcndyaXRpbmcgc2luY2UgX2luaXR0ZWQgb2YgKDIpIG1lYW5zIGl0IHdhcyBhIGZyb20oKSB0d2VlbiB0aGF0IGhhZCBpbW1lZGlhdGVSZW5kZXI6dHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLl9zdGFydEF0KSB7XG5cdFx0XHRcdFx0aWYgKHRpbWUgPj0gMCkge1xuXHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCFjYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIl9kdW1teUdTXCI7IC8vaWYgbm8gY2FsbGJhY2sgaXMgZGVmaW5lZCwgdXNlIGEgZHVtbXkgdmFsdWUganVzdCBzbyB0aGF0IHRoZSBjb25kaXRpb24gYXQgdGhlIGVuZCBldmFsdWF0ZXMgYXMgdHJ1ZSBiZWNhdXNlIF9zdGFydEF0IHNob3VsZCByZW5kZXIgQUZURVIgdGhlIG5vcm1hbCByZW5kZXIgbG9vcCB3aGVuIHRoZSB0aW1lIGlzIG5lZ2F0aXZlLiBXZSBjb3VsZCBoYW5kbGUgdGhpcyBpbiBhIG1vcmUgaW50dWl0aXZlIHdheSwgb2YgY291cnNlLCBidXQgdGhlIHJlbmRlciBsb29wIGlzIHRoZSBNT1NUIGltcG9ydGFudCB0aGluZyB0byBvcHRpbWl6ZSwgc28gdGhpcyB0ZWNobmlxdWUgYWxsb3dzIHVzIHRvIGF2b2lkIGFkZGluZyBleHRyYSBjb25kaXRpb25hbCBsb2dpYyBpbiBhIGhpZ2gtZnJlcXVlbmN5IGFyZWEuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLnZhcnMub25TdGFydCkgaWYgKHRoaXMuX3RvdGFsVGltZSAhPT0gMCB8fCBkdXJhdGlvbiA9PT0gMCkgaWYgKCFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRwdCA9IHRoaXMuX2ZpcnN0UFQ7XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHB0LmYpIHtcblx0XHRcdFx0XHRwdC50W3B0LnBdKHB0LmMgKiB0aGlzLnJhdGlvICsgcHQucyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LmMgKiB0aGlzLnJhdGlvICsgcHQucztcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRpZiAodGhpcy5fb25VcGRhdGUpIHtcblx0XHRcdFx0aWYgKHRpbWUgPCAwKSBpZiAodGhpcy5fc3RhcnRBdCAmJiB0aGlzLl9zdGFydFRpbWUpIHsgLy9pZiB0aGUgdHdlZW4gaXMgcG9zaXRpb25lZCBhdCB0aGUgVkVSWSBiZWdpbm5pbmcgKF9zdGFydFRpbWUgMCkgb2YgaXRzIHBhcmVudCB0aW1lbGluZSwgaXQncyBpbGxlZ2FsIGZvciB0aGUgcGxheWhlYWQgdG8gZ28gYmFjayBmdXJ0aGVyLCBzbyB3ZSBzaG91bGQgbm90IHJlbmRlciB0aGUgcmVjb3JkZWQgc3RhcnRBdCB2YWx1ZXMuXG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTsgLy9ub3RlOiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgdHVjayB0aGlzIGNvbmRpdGlvbmFsIGxvZ2ljIGluc2lkZSBsZXNzIHRyYXZlbGVkIGFyZWFzIChtb3N0IHR3ZWVucyBkb24ndCBoYXZlIGFuIG9uVXBkYXRlKS4gV2UnZCBqdXN0IGhhdmUgaXQgYXQgdGhlIGVuZCBiZWZvcmUgdGhlIG9uQ29tcGxldGUsIGJ1dCB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkIGJlZm9yZSBhbnkgb25VcGRhdGUgaXMgY2FsbGVkLCBzbyB3ZSBBTFNPIHB1dCBpdCBoZXJlIGFuZCB0aGVuIGlmIGl0J3Mgbm90IGNhbGxlZCwgd2UgZG8gc28gbGF0ZXIgbmVhciB0aGUgb25Db21wbGV0ZS5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXN1cHByZXNzRXZlbnRzKSBpZiAodGhpcy5fdG90YWxUaW1lICE9PSBwcmV2VG90YWxUaW1lIHx8IGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2FsbGJhY2soXCJvblVwZGF0ZVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX2N5Y2xlICE9PSBwcmV2Q3ljbGUpIGlmICghc3VwcHJlc3NFdmVudHMpIGlmICghdGhpcy5fZ2MpIGlmICh0aGlzLnZhcnMub25SZXBlYXQpIHtcblx0XHRcdFx0dGhpcy5fY2FsbGJhY2soXCJvblJlcGVhdFwiKTtcblx0XHRcdH1cblx0XHRcdGlmIChjYWxsYmFjaykgaWYgKCF0aGlzLl9nYyB8fCBmb3JjZSkgeyAvL2NoZWNrIGdjIGJlY2F1c2UgdGhlcmUncyBhIGNoYW5jZSB0aGF0IGtpbGwoKSBjb3VsZCBiZSBjYWxsZWQgaW4gYW4gb25VcGRhdGVcblx0XHRcdFx0aWYgKHRpbWUgPCAwICYmIHRoaXMuX3N0YXJ0QXQgJiYgIXRoaXMuX29uVXBkYXRlICYmIHRoaXMuX3N0YXJ0VGltZSkgeyAvL2lmIHRoZSB0d2VlbiBpcyBwb3NpdGlvbmVkIGF0IHRoZSBWRVJZIGJlZ2lubmluZyAoX3N0YXJ0VGltZSAwKSBvZiBpdHMgcGFyZW50IHRpbWVsaW5lLCBpdCdzIGlsbGVnYWwgZm9yIHRoZSBwbGF5aGVhZCB0byBnbyBiYWNrIGZ1cnRoZXIsIHNvIHdlIHNob3VsZCBub3QgcmVuZGVyIHRoZSByZWNvcmRlZCBzdGFydEF0IHZhbHVlcy5cblx0XHRcdFx0XHR0aGlzLl9zdGFydEF0LnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpc0NvbXBsZXRlKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLmF1dG9SZW1vdmVDaGlsZHJlbikge1xuXHRcdFx0XHRcdFx0dGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXN1cHByZXNzRXZlbnRzICYmIHRoaXMudmFyc1tjYWxsYmFja10pIHtcblx0XHRcdFx0XHR0aGlzLl9jYWxsYmFjayhjYWxsYmFjayk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGR1cmF0aW9uID09PSAwICYmIHRoaXMuX3Jhd1ByZXZUaW1lID09PSBfdGlueU51bSAmJiByYXdQcmV2VGltZSAhPT0gX3RpbnlOdW0pIHsgLy90aGUgb25Db21wbGV0ZSBvciBvblJldmVyc2VDb21wbGV0ZSBjb3VsZCB0cmlnZ2VyIG1vdmVtZW50IG9mIHRoZSBwbGF5aGVhZCBhbmQgZm9yIHplcm8tZHVyYXRpb24gdHdlZW5zICh3aGljaCBtdXN0IGRpc2Nlcm4gZGlyZWN0aW9uKSB0aGF0IGxhbmQgZGlyZWN0bHkgYmFjayBvbiB0aGVpciBzdGFydCB0aW1lLCB3ZSBkb24ndCB3YW50IHRvIGZpcmUgYWdhaW4gb24gdGhlIG5leHQgcmVuZGVyLiBUaGluayBvZiBzZXZlcmFsIGFkZFBhdXNlKCkncyBpbiBhIHRpbWVsaW5lIHRoYXQgZm9yY2VzIHRoZSBwbGF5aGVhZCB0byBhIGNlcnRhaW4gc3BvdCwgYnV0IHdoYXQgaWYgaXQncyBhbHJlYWR5IHBhdXNlZCBhbmQgYW5vdGhlciB0d2VlbiBpcyB0d2VlbmluZyB0aGUgXCJ0aW1lXCIgb2YgdGhlIHRpbWVsaW5lPyBFYWNoIHRpbWUgaXQgbW92ZXMgW2ZvcndhcmRdIHBhc3QgdGhhdCBzcG90LCBpdCB3b3VsZCBtb3ZlIGJhY2ssIGFuZCBzaW5jZSBzdXBwcmVzc0V2ZW50cyBpcyB0cnVlLCBpdCdkIHJlc2V0IF9yYXdQcmV2VGltZSB0byBfdGlueU51bSBzbyB0aGF0IHdoZW4gaXQgYmVnaW5zIGFnYWluLCB0aGUgY2FsbGJhY2sgd291bGQgZmlyZSAoc28gdWx0aW1hdGVseSBpdCBjb3VsZCBib3VuY2UgYmFjayBhbmQgZm9ydGggZHVyaW5nIHRoYXQgdHdlZW4pLiBBZ2FpbiwgdGhpcyBpcyBhIHZlcnkgdW5jb21tb24gc2NlbmFyaW8sIGJ1dCBwb3NzaWJsZSBub25ldGhlbGVzcy5cblx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcdFxuLy8tLS0tIFNUQVRJQyBGVU5DVElPTlMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0XHRcblx0XHRUd2Vlbk1heC50byA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5NYXgodGFyZ2V0LCBkdXJhdGlvbiwgdmFycyk7XG5cdFx0fTtcblx0XHRcblx0XHRUd2Vlbk1heC5mcm9tID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0dmFycy5ydW5CYWNrd2FyZHMgPSB0cnVlO1xuXHRcdFx0dmFycy5pbW1lZGlhdGVSZW5kZXIgPSAodmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UpO1xuXHRcdFx0cmV0dXJuIG5ldyBUd2Vlbk1heCh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKTtcblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LmZyb21UbyA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMpIHtcblx0XHRcdHRvVmFycy5zdGFydEF0ID0gZnJvbVZhcnM7XG5cdFx0XHR0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UgJiYgZnJvbVZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5NYXgodGFyZ2V0LCBkdXJhdGlvbiwgdG9WYXJzKTtcblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LnN0YWdnZXJUbyA9IFR3ZWVuTWF4LmFsbFRvID0gZnVuY3Rpb24odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSkge1xuXHRcdFx0c3RhZ2dlciA9IHN0YWdnZXIgfHwgMDtcblx0XHRcdHZhciBkZWxheSA9IDAsXG5cdFx0XHRcdGEgPSBbXSxcblx0XHRcdFx0ZmluYWxDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICh2YXJzLm9uQ29tcGxldGUpIHtcblx0XHRcdFx0XHRcdHZhcnMub25Db21wbGV0ZS5hcHBseSh2YXJzLm9uQ29tcGxldGVTY29wZSB8fCB0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRvbkNvbXBsZXRlQWxsLmFwcGx5KG9uQ29tcGxldGVBbGxTY29wZSB8fCB2YXJzLmNhbGxiYWNrU2NvcGUgfHwgdGhpcywgb25Db21wbGV0ZUFsbFBhcmFtcyB8fCBfYmxhbmtBcnJheSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGN5Y2xlID0gdmFycy5jeWNsZSxcblx0XHRcdFx0ZnJvbUN5Y2xlID0gKHZhcnMuc3RhcnRBdCAmJiB2YXJzLnN0YXJ0QXQuY3ljbGUpLFxuXHRcdFx0XHRsLCBjb3B5LCBpLCBwO1xuXHRcdFx0aWYgKCFfaXNBcnJheSh0YXJnZXRzKSkge1xuXHRcdFx0XHRpZiAodHlwZW9mKHRhcmdldHMpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0dGFyZ2V0cyA9IFR3ZWVuTGl0ZS5zZWxlY3Rvcih0YXJnZXRzKSB8fCB0YXJnZXRzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChfaXNTZWxlY3Rvcih0YXJnZXRzKSkge1xuXHRcdFx0XHRcdHRhcmdldHMgPSBfc2xpY2UodGFyZ2V0cyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRhcmdldHMgPSB0YXJnZXRzIHx8IFtdO1xuXHRcdFx0aWYgKHN0YWdnZXIgPCAwKSB7XG5cdFx0XHRcdHRhcmdldHMgPSBfc2xpY2UodGFyZ2V0cyk7XG5cdFx0XHRcdHRhcmdldHMucmV2ZXJzZSgpO1xuXHRcdFx0XHRzdGFnZ2VyICo9IC0xO1xuXHRcdFx0fVxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoIC0gMTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPD0gbDsgaSsrKSB7XG5cdFx0XHRcdGNvcHkgPSB7fTtcblx0XHRcdFx0Zm9yIChwIGluIHZhcnMpIHtcblx0XHRcdFx0XHRjb3B5W3BdID0gdmFyc1twXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY3ljbGUpIHtcblx0XHRcdFx0XHRfYXBwbHlDeWNsZShjb3B5LCB0YXJnZXRzLCBpKTtcblx0XHRcdFx0XHRpZiAoY29weS5kdXJhdGlvbiAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRkdXJhdGlvbiA9IGNvcHkuZHVyYXRpb247XG5cdFx0XHRcdFx0XHRkZWxldGUgY29weS5kdXJhdGlvbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGZyb21DeWNsZSkge1xuXHRcdFx0XHRcdGZyb21DeWNsZSA9IGNvcHkuc3RhcnRBdCA9IHt9O1xuXHRcdFx0XHRcdGZvciAocCBpbiB2YXJzLnN0YXJ0QXQpIHtcblx0XHRcdFx0XHRcdGZyb21DeWNsZVtwXSA9IHZhcnMuc3RhcnRBdFtwXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0X2FwcGx5Q3ljbGUoY29weS5zdGFydEF0LCB0YXJnZXRzLCBpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb3B5LmRlbGF5ID0gZGVsYXkgKyAoY29weS5kZWxheSB8fCAwKTtcblx0XHRcdFx0aWYgKGkgPT09IGwgJiYgb25Db21wbGV0ZUFsbCkge1xuXHRcdFx0XHRcdGNvcHkub25Db21wbGV0ZSA9IGZpbmFsQ29tcGxldGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0YVtpXSA9IG5ldyBUd2Vlbk1heCh0YXJnZXRzW2ldLCBkdXJhdGlvbiwgY29weSk7XG5cdFx0XHRcdGRlbGF5ICs9IHN0YWdnZXI7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LnN0YWdnZXJGcm9tID0gVHdlZW5NYXguYWxsRnJvbSA9IGZ1bmN0aW9uKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpIHtcblx0XHRcdHZhcnMucnVuQmFja3dhcmRzID0gdHJ1ZTtcblx0XHRcdHZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiBUd2Vlbk1heC5zdGFnZ2VyVG8odGFyZ2V0cywgZHVyYXRpb24sIHZhcnMsIHN0YWdnZXIsIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSk7XG5cdFx0fTtcblx0XHRcblx0XHRUd2Vlbk1heC5zdGFnZ2VyRnJvbVRvID0gVHdlZW5NYXguYWxsRnJvbVRvID0gZnVuY3Rpb24odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSkge1xuXHRcdFx0dG9WYXJzLnN0YXJ0QXQgPSBmcm9tVmFycztcblx0XHRcdHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgPSAodG9WYXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSAmJiBmcm9tVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UpO1xuXHRcdFx0cmV0dXJuIFR3ZWVuTWF4LnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdG9WYXJzLCBzdGFnZ2VyLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpO1xuXHRcdH07XG5cdFx0XHRcdFxuXHRcdFR3ZWVuTWF4LmRlbGF5ZWRDYWxsID0gZnVuY3Rpb24oZGVsYXksIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlLCB1c2VGcmFtZXMpIHtcblx0XHRcdHJldHVybiBuZXcgVHdlZW5NYXgoY2FsbGJhY2ssIDAsIHtkZWxheTpkZWxheSwgb25Db21wbGV0ZTpjYWxsYmFjaywgb25Db21wbGV0ZVBhcmFtczpwYXJhbXMsIGNhbGxiYWNrU2NvcGU6c2NvcGUsIG9uUmV2ZXJzZUNvbXBsZXRlOmNhbGxiYWNrLCBvblJldmVyc2VDb21wbGV0ZVBhcmFtczpwYXJhbXMsIGltbWVkaWF0ZVJlbmRlcjpmYWxzZSwgdXNlRnJhbWVzOnVzZUZyYW1lcywgb3ZlcndyaXRlOjB9KTtcblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LnNldCA9IGZ1bmN0aW9uKHRhcmdldCwgdmFycykge1xuXHRcdFx0cmV0dXJuIG5ldyBUd2Vlbk1heCh0YXJnZXQsIDAsIHZhcnMpO1xuXHRcdH07XG5cdFx0XG5cdFx0VHdlZW5NYXguaXNUd2VlbmluZyA9IGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdFx0cmV0dXJuIChUd2VlbkxpdGUuZ2V0VHdlZW5zT2YodGFyZ2V0LCB0cnVlKS5sZW5ndGggPiAwKTtcblx0XHR9O1xuXHRcdFxuXHRcdHZhciBfZ2V0Q2hpbGRyZW5PZiA9IGZ1bmN0aW9uKHRpbWVsaW5lLCBpbmNsdWRlVGltZWxpbmVzKSB7XG5cdFx0XHRcdHZhciBhID0gW10sXG5cdFx0XHRcdFx0Y250ID0gMCxcblx0XHRcdFx0XHR0d2VlbiA9IHRpbWVsaW5lLl9maXJzdDtcblx0XHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdFx0aWYgKHR3ZWVuIGluc3RhbmNlb2YgVHdlZW5MaXRlKSB7XG5cdFx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAoaW5jbHVkZVRpbWVsaW5lcykge1xuXHRcdFx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YSA9IGEuY29uY2F0KF9nZXRDaGlsZHJlbk9mKHR3ZWVuLCBpbmNsdWRlVGltZWxpbmVzKSk7XG5cdFx0XHRcdFx0XHRjbnQgPSBhLmxlbmd0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH0sIFxuXHRcdFx0Z2V0QWxsVHdlZW5zID0gVHdlZW5NYXguZ2V0QWxsVHdlZW5zID0gZnVuY3Rpb24oaW5jbHVkZVRpbWVsaW5lcykge1xuXHRcdFx0XHRyZXR1cm4gX2dldENoaWxkcmVuT2YoQW5pbWF0aW9uLl9yb290VGltZWxpbmUsIGluY2x1ZGVUaW1lbGluZXMpLmNvbmNhdCggX2dldENoaWxkcmVuT2YoQW5pbWF0aW9uLl9yb290RnJhbWVzVGltZWxpbmUsIGluY2x1ZGVUaW1lbGluZXMpICk7XG5cdFx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LmtpbGxBbGwgPSBmdW5jdGlvbihjb21wbGV0ZSwgdHdlZW5zLCBkZWxheWVkQ2FsbHMsIHRpbWVsaW5lcykge1xuXHRcdFx0aWYgKHR3ZWVucyA9PSBudWxsKSB7XG5cdFx0XHRcdHR3ZWVucyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZGVsYXllZENhbGxzID09IG51bGwpIHtcblx0XHRcdFx0ZGVsYXllZENhbGxzID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHZhciBhID0gZ2V0QWxsVHdlZW5zKCh0aW1lbGluZXMgIT0gZmFsc2UpKSxcblx0XHRcdFx0bCA9IGEubGVuZ3RoLFxuXHRcdFx0XHRhbGxUcnVlID0gKHR3ZWVucyAmJiBkZWxheWVkQ2FsbHMgJiYgdGltZWxpbmVzKSxcblx0XHRcdFx0aXNEQywgdHdlZW4sIGk7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdHR3ZWVuID0gYVtpXTtcblx0XHRcdFx0aWYgKGFsbFRydWUgfHwgKHR3ZWVuIGluc3RhbmNlb2YgU2ltcGxlVGltZWxpbmUpIHx8ICgoaXNEQyA9ICh0d2Vlbi50YXJnZXQgPT09IHR3ZWVuLnZhcnMub25Db21wbGV0ZSkpICYmIGRlbGF5ZWRDYWxscykgfHwgKHR3ZWVucyAmJiAhaXNEQykpIHtcblx0XHRcdFx0XHRpZiAoY29tcGxldGUpIHtcblx0XHRcdFx0XHRcdHR3ZWVuLnRvdGFsVGltZSh0d2Vlbi5fcmV2ZXJzZWQgPyAwIDogdHdlZW4udG90YWxEdXJhdGlvbigpKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHdlZW4uX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LmtpbGxDaGlsZFR3ZWVuc09mID0gZnVuY3Rpb24ocGFyZW50LCBjb21wbGV0ZSkge1xuXHRcdFx0aWYgKHBhcmVudCA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHZhciB0bCA9IFR3ZWVuTGl0ZUludGVybmFscy50d2Vlbkxvb2t1cCxcblx0XHRcdFx0YSwgY3VyUGFyZW50LCBwLCBpLCBsO1xuXHRcdFx0aWYgKHR5cGVvZihwYXJlbnQpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHBhcmVudCA9IFR3ZWVuTGl0ZS5zZWxlY3RvcihwYXJlbnQpIHx8IHBhcmVudDtcblx0XHRcdH1cblx0XHRcdGlmIChfaXNTZWxlY3RvcihwYXJlbnQpKSB7XG5cdFx0XHRcdHBhcmVudCA9IF9zbGljZShwYXJlbnQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKF9pc0FycmF5KHBhcmVudCkpIHtcblx0XHRcdFx0aSA9IHBhcmVudC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFR3ZWVuTWF4LmtpbGxDaGlsZFR3ZWVuc09mKHBhcmVudFtpXSwgY29tcGxldGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdGEgPSBbXTtcblx0XHRcdGZvciAocCBpbiB0bCkge1xuXHRcdFx0XHRjdXJQYXJlbnQgPSB0bFtwXS50YXJnZXQucGFyZW50Tm9kZTtcblx0XHRcdFx0d2hpbGUgKGN1clBhcmVudCkge1xuXHRcdFx0XHRcdGlmIChjdXJQYXJlbnQgPT09IHBhcmVudCkge1xuXHRcdFx0XHRcdFx0YSA9IGEuY29uY2F0KHRsW3BdLnR3ZWVucyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGN1clBhcmVudCA9IGN1clBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRsID0gYS5sZW5ndGg7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdGlmIChjb21wbGV0ZSkge1xuXHRcdFx0XHRcdGFbaV0udG90YWxUaW1lKGFbaV0udG90YWxEdXJhdGlvbigpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhW2ldLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHZhciBfY2hhbmdlUGF1c2UgPSBmdW5jdGlvbihwYXVzZSwgdHdlZW5zLCBkZWxheWVkQ2FsbHMsIHRpbWVsaW5lcykge1xuXHRcdFx0dHdlZW5zID0gKHR3ZWVucyAhPT0gZmFsc2UpO1xuXHRcdFx0ZGVsYXllZENhbGxzID0gKGRlbGF5ZWRDYWxscyAhPT0gZmFsc2UpO1xuXHRcdFx0dGltZWxpbmVzID0gKHRpbWVsaW5lcyAhPT0gZmFsc2UpO1xuXHRcdFx0dmFyIGEgPSBnZXRBbGxUd2VlbnModGltZWxpbmVzKSxcblx0XHRcdFx0YWxsVHJ1ZSA9ICh0d2VlbnMgJiYgZGVsYXllZENhbGxzICYmIHRpbWVsaW5lcyksXG5cdFx0XHRcdGkgPSBhLmxlbmd0aCxcblx0XHRcdFx0aXNEQywgdHdlZW47XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0dHdlZW4gPSBhW2ldO1xuXHRcdFx0XHRpZiAoYWxsVHJ1ZSB8fCAodHdlZW4gaW5zdGFuY2VvZiBTaW1wbGVUaW1lbGluZSkgfHwgKChpc0RDID0gKHR3ZWVuLnRhcmdldCA9PT0gdHdlZW4udmFycy5vbkNvbXBsZXRlKSkgJiYgZGVsYXllZENhbGxzKSB8fCAodHdlZW5zICYmICFpc0RDKSkge1xuXHRcdFx0XHRcdHR3ZWVuLnBhdXNlZChwYXVzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHRcdFxuXHRcdFR3ZWVuTWF4LnBhdXNlQWxsID0gZnVuY3Rpb24odHdlZW5zLCBkZWxheWVkQ2FsbHMsIHRpbWVsaW5lcykge1xuXHRcdFx0X2NoYW5nZVBhdXNlKHRydWUsIHR3ZWVucywgZGVsYXllZENhbGxzLCB0aW1lbGluZXMpO1xuXHRcdH07XG5cdFx0XG5cdFx0VHdlZW5NYXgucmVzdW1lQWxsID0gZnVuY3Rpb24odHdlZW5zLCBkZWxheWVkQ2FsbHMsIHRpbWVsaW5lcykge1xuXHRcdFx0X2NoYW5nZVBhdXNlKGZhbHNlLCB0d2VlbnMsIGRlbGF5ZWRDYWxscywgdGltZWxpbmVzKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5NYXguZ2xvYmFsVGltZVNjYWxlID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciB0bCA9IEFuaW1hdGlvbi5fcm9vdFRpbWVsaW5lLFxuXHRcdFx0XHR0ID0gVHdlZW5MaXRlLnRpY2tlci50aW1lO1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0bC5fdGltZVNjYWxlO1xuXHRcdFx0fVxuXHRcdFx0dmFsdWUgPSB2YWx1ZSB8fCBfdGlueU51bTsgLy9jYW4ndCBhbGxvdyB6ZXJvIGJlY2F1c2UgaXQnbGwgdGhyb3cgdGhlIG1hdGggb2ZmXG5cdFx0XHR0bC5fc3RhcnRUaW1lID0gdCAtICgodCAtIHRsLl9zdGFydFRpbWUpICogdGwuX3RpbWVTY2FsZSAvIHZhbHVlKTtcblx0XHRcdHRsID0gQW5pbWF0aW9uLl9yb290RnJhbWVzVGltZWxpbmU7XG5cdFx0XHR0ID0gVHdlZW5MaXRlLnRpY2tlci5mcmFtZTtcblx0XHRcdHRsLl9zdGFydFRpbWUgPSB0IC0gKCh0IC0gdGwuX3N0YXJ0VGltZSkgKiB0bC5fdGltZVNjYWxlIC8gdmFsdWUpO1xuXHRcdFx0dGwuX3RpbWVTY2FsZSA9IEFuaW1hdGlvbi5fcm9vdFRpbWVsaW5lLl90aW1lU2NhbGUgPSB2YWx1ZTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9O1xuXHRcdFxuXHRcbi8vLS0tLSBHRVRURVJTIC8gU0VUVEVSUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdFx0XG5cdFx0cC5wcm9ncmVzcyA9IGZ1bmN0aW9uKHZhbHVlLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuICghYXJndW1lbnRzLmxlbmd0aCkgPyB0aGlzLl90aW1lIC8gdGhpcy5kdXJhdGlvbigpIDogdGhpcy50b3RhbFRpbWUoIHRoaXMuZHVyYXRpb24oKSAqICgodGhpcy5feW95byAmJiAodGhpcy5fY3ljbGUgJiAxKSAhPT0gMCkgPyAxIC0gdmFsdWUgOiB2YWx1ZSkgKyAodGhpcy5fY3ljbGUgKiAodGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSkpLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0fTtcblx0XHRcblx0XHRwLnRvdGFsUHJvZ3Jlc3MgPSBmdW5jdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiAoIWFyZ3VtZW50cy5sZW5ndGgpID8gdGhpcy5fdG90YWxUaW1lIC8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLnRvdGFsVGltZSggdGhpcy50b3RhbER1cmF0aW9uKCkgKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdH07XG5cdFx0XG5cdFx0cC50aW1lID0gZnVuY3Rpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3RpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0dGhpcy50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgPiB0aGlzLl9kdXJhdGlvbikge1xuXHRcdFx0XHR2YWx1ZSA9IHRoaXMuX2R1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX3lveW8gJiYgKHRoaXMuX2N5Y2xlICYgMSkgIT09IDApIHtcblx0XHRcdFx0dmFsdWUgPSAodGhpcy5fZHVyYXRpb24gLSB2YWx1ZSkgKyAodGhpcy5fY3ljbGUgKiAodGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSkpO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLl9yZXBlYXQgIT09IDApIHtcblx0XHRcdFx0dmFsdWUgKz0gdGhpcy5fY3ljbGUgKiAodGhpcy5fZHVyYXRpb24gKyB0aGlzLl9yZXBlYXREZWxheSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy50b3RhbFRpbWUodmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC5kdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2R1cmF0aW9uOyAvL2Rvbid0IHNldCBfZGlydHkgPSBmYWxzZSBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIHJlcGVhdHMgdGhhdCBoYXZlbid0IGJlZW4gZmFjdG9yZWQgaW50byB0aGUgX3RvdGFsRHVyYXRpb24geWV0LiBPdGhlcndpc2UsIGlmIHlvdSBjcmVhdGUgYSByZXBlYXRlZCBUd2Vlbk1heCBhbmQgdGhlbiBpbW1lZGlhdGVseSBjaGVjayBpdHMgZHVyYXRpb24oKSwgaXQgd291bGQgY2FjaGUgdGhlIHZhbHVlIGFuZCB0aGUgdG90YWxEdXJhdGlvbiB3b3VsZCBub3QgYmUgY29ycmVjdCwgdGh1cyByZXBlYXRzIHdvdWxkbid0IHRha2UgZWZmZWN0LlxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIEFuaW1hdGlvbi5wcm90b3R5cGUuZHVyYXRpb24uY2FsbCh0aGlzLCB2YWx1ZSk7XG5cdFx0fTtcblxuXHRcdHAudG90YWxEdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0aWYgKHRoaXMuX2RpcnR5KSB7XG5cdFx0XHRcdFx0Ly9pbnN0ZWFkIG9mIEluZmluaXR5LCB3ZSB1c2UgOTk5OTk5OTk5OTk5IHNvIHRoYXQgd2UgY2FuIGFjY29tbW9kYXRlIHJldmVyc2VzXG5cdFx0XHRcdFx0dGhpcy5fdG90YWxEdXJhdGlvbiA9ICh0aGlzLl9yZXBlYXQgPT09IC0xKSA/IDk5OTk5OTk5OTk5OSA6IHRoaXMuX2R1cmF0aW9uICogKHRoaXMuX3JlcGVhdCArIDEpICsgKHRoaXMuX3JlcGVhdERlbGF5ICogdGhpcy5fcmVwZWF0KTtcblx0XHRcdFx0XHR0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzLl90b3RhbER1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICh0aGlzLl9yZXBlYXQgPT09IC0xKSA/IHRoaXMgOiB0aGlzLmR1cmF0aW9uKCAodmFsdWUgLSAodGhpcy5fcmVwZWF0ICogdGhpcy5fcmVwZWF0RGVsYXkpKSAvICh0aGlzLl9yZXBlYXQgKyAxKSApO1xuXHRcdH07XG5cdFx0XG5cdFx0cC5yZXBlYXQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9yZXBlYXQ7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9yZXBlYXQgPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdH07XG5cdFx0XG5cdFx0cC5yZXBlYXREZWxheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3JlcGVhdERlbGF5O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fcmVwZWF0RGVsYXkgPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdH07XG5cdFx0XG5cdFx0cC55b3lvID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5feW95bztcblx0XHRcdH1cblx0XHRcdHRoaXMuX3lveW8gPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cdFx0XG5cdFx0XG5cdFx0cmV0dXJuIFR3ZWVuTWF4O1xuXHRcdFxuXHR9LCB0cnVlKTtcblxuXG5cblxuXG5cblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogVGltZWxpbmVMaXRlXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0X2dzU2NvcGUuX2dzRGVmaW5lKFwiVGltZWxpbmVMaXRlXCIsIFtcImNvcmUuQW5pbWF0aW9uXCIsXCJjb3JlLlNpbXBsZVRpbWVsaW5lXCIsXCJUd2VlbkxpdGVcIl0sIGZ1bmN0aW9uKEFuaW1hdGlvbiwgU2ltcGxlVGltZWxpbmUsIFR3ZWVuTGl0ZSkge1xuXG5cdFx0dmFyIFRpbWVsaW5lTGl0ZSA9IGZ1bmN0aW9uKHZhcnMpIHtcblx0XHRcdFx0U2ltcGxlVGltZWxpbmUuY2FsbCh0aGlzLCB2YXJzKTtcblx0XHRcdFx0dGhpcy5fbGFiZWxzID0ge307XG5cdFx0XHRcdHRoaXMuYXV0b1JlbW92ZUNoaWxkcmVuID0gKHRoaXMudmFycy5hdXRvUmVtb3ZlQ2hpbGRyZW4gPT09IHRydWUpO1xuXHRcdFx0XHR0aGlzLnNtb290aENoaWxkVGltaW5nID0gKHRoaXMudmFycy5zbW9vdGhDaGlsZFRpbWluZyA9PT0gdHJ1ZSk7XG5cdFx0XHRcdHRoaXMuX3NvcnRDaGlsZHJlbiA9IHRydWU7XG5cdFx0XHRcdHRoaXMuX29uVXBkYXRlID0gdGhpcy52YXJzLm9uVXBkYXRlO1xuXHRcdFx0XHR2YXIgdiA9IHRoaXMudmFycyxcblx0XHRcdFx0XHR2YWwsIHA7XG5cdFx0XHRcdGZvciAocCBpbiB2KSB7XG5cdFx0XHRcdFx0dmFsID0gdltwXTtcblx0XHRcdFx0XHRpZiAoX2lzQXJyYXkodmFsKSkgaWYgKHZhbC5qb2luKFwiXCIpLmluZGV4T2YoXCJ7c2VsZn1cIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHR2W3BdID0gdGhpcy5fc3dhcFNlbGZJblBhcmFtcyh2YWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX2lzQXJyYXkodi50d2VlbnMpKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGQodi50d2VlbnMsIDAsIHYuYWxpZ24sIHYuc3RhZ2dlcik7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfdGlueU51bSA9IDAuMDAwMDAwMDAwMSxcblx0XHRcdFR3ZWVuTGl0ZUludGVybmFscyA9IFR3ZWVuTGl0ZS5faW50ZXJuYWxzLFxuXHRcdFx0X2ludGVybmFscyA9IFRpbWVsaW5lTGl0ZS5faW50ZXJuYWxzID0ge30sXG5cdFx0XHRfaXNTZWxlY3RvciA9IFR3ZWVuTGl0ZUludGVybmFscy5pc1NlbGVjdG9yLFxuXHRcdFx0X2lzQXJyYXkgPSBUd2VlbkxpdGVJbnRlcm5hbHMuaXNBcnJheSxcblx0XHRcdF9sYXp5VHdlZW5zID0gVHdlZW5MaXRlSW50ZXJuYWxzLmxhenlUd2VlbnMsXG5cdFx0XHRfbGF6eVJlbmRlciA9IFR3ZWVuTGl0ZUludGVybmFscy5sYXp5UmVuZGVyLFxuXHRcdFx0X2dsb2JhbHMgPSBfZ3NTY29wZS5fZ3NEZWZpbmUuZ2xvYmFscyxcblx0XHRcdF9jb3B5ID0gZnVuY3Rpb24odmFycykge1xuXHRcdFx0XHR2YXIgY29weSA9IHt9LCBwO1xuXHRcdFx0XHRmb3IgKHAgaW4gdmFycykge1xuXHRcdFx0XHRcdGNvcHlbcF0gPSB2YXJzW3BdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBjb3B5O1xuXHRcdFx0fSxcblx0XHRcdF9hcHBseUN5Y2xlID0gZnVuY3Rpb24odmFycywgdGFyZ2V0cywgaSkge1xuXHRcdFx0XHR2YXIgYWx0ID0gdmFycy5jeWNsZSxcblx0XHRcdFx0XHRwLCB2YWw7XG5cdFx0XHRcdGZvciAocCBpbiBhbHQpIHtcblx0XHRcdFx0XHR2YWwgPSBhbHRbcF07XG5cdFx0XHRcdFx0dmFyc1twXSA9ICh0eXBlb2YodmFsKSA9PT0gXCJmdW5jdGlvblwiKSA/IHZhbC5jYWxsKHRhcmdldHNbaV0sIGkpIDogdmFsW2kgJSB2YWwubGVuZ3RoXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgdmFycy5jeWNsZTtcblx0XHRcdH0sXG5cdFx0XHRfcGF1c2VDYWxsYmFjayA9IF9pbnRlcm5hbHMucGF1c2VDYWxsYmFjayA9IGZ1bmN0aW9uKCkge30sXG5cdFx0XHRfc2xpY2UgPSBmdW5jdGlvbihhKSB7IC8vZG9uJ3QgdXNlIFtdLnNsaWNlIGJlY2F1c2UgdGhhdCBkb2Vzbid0IHdvcmsgaW4gSUU4IHdpdGggYSBOb2RlTGlzdCB0aGF0J3MgcmV0dXJuZWQgYnkgcXVlcnlTZWxlY3RvckFsbCgpXG5cdFx0XHRcdHZhciBiID0gW10sXG5cdFx0XHRcdFx0bCA9IGEubGVuZ3RoLFxuXHRcdFx0XHRcdGk7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgIT09IGw7IGIucHVzaChhW2krK10pKTtcblx0XHRcdFx0cmV0dXJuIGI7XG5cdFx0XHR9LFxuXHRcdFx0cCA9IFRpbWVsaW5lTGl0ZS5wcm90b3R5cGUgPSBuZXcgU2ltcGxlVGltZWxpbmUoKTtcblxuXHRcdFRpbWVsaW5lTGl0ZS52ZXJzaW9uID0gXCIxLjE5LjBcIjtcblx0XHRwLmNvbnN0cnVjdG9yID0gVGltZWxpbmVMaXRlO1xuXHRcdHAua2lsbCgpLl9nYyA9IHAuX2ZvcmNpbmdQbGF5aGVhZCA9IHAuX2hhc1BhdXNlID0gZmFsc2U7XG5cblx0XHQvKiBtaWdodCB1c2UgbGF0ZXIuLi5cblx0XHQvL3RyYW5zbGF0ZXMgYSBsb2NhbCB0aW1lIGluc2lkZSBhbiBhbmltYXRpb24gdG8gdGhlIGNvcnJlc3BvbmRpbmcgdGltZSBvbiB0aGUgcm9vdC9nbG9iYWwgdGltZWxpbmUsIGZhY3RvcmluZyBpbiBhbGwgbmVzdGluZyBhbmQgdGltZVNjYWxlcy5cblx0XHRmdW5jdGlvbiBsb2NhbFRvR2xvYmFsKHRpbWUsIGFuaW1hdGlvbikge1xuXHRcdFx0d2hpbGUgKGFuaW1hdGlvbikge1xuXHRcdFx0XHR0aW1lID0gKHRpbWUgLyBhbmltYXRpb24uX3RpbWVTY2FsZSkgKyBhbmltYXRpb24uX3N0YXJ0VGltZTtcblx0XHRcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uLnRpbWVsaW5lO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRpbWU7XG5cdFx0fVxuXG5cdFx0Ly90cmFuc2xhdGVzIHRoZSBzdXBwbGllZCB0aW1lIG9uIHRoZSByb290L2dsb2JhbCB0aW1lbGluZSBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIGxvY2FsIHRpbWUgaW5zaWRlIGEgcGFydGljdWxhciBhbmltYXRpb24sIGZhY3RvcmluZyBpbiBhbGwgbmVzdGluZyBhbmQgdGltZVNjYWxlc1xuXHRcdGZ1bmN0aW9uIGdsb2JhbFRvTG9jYWwodGltZSwgYW5pbWF0aW9uKSB7XG5cdFx0XHR2YXIgc2NhbGUgPSAxO1xuXHRcdFx0dGltZSAtPSBsb2NhbFRvR2xvYmFsKDAsIGFuaW1hdGlvbik7XG5cdFx0XHR3aGlsZSAoYW5pbWF0aW9uKSB7XG5cdFx0XHRcdHNjYWxlICo9IGFuaW1hdGlvbi5fdGltZVNjYWxlO1xuXHRcdFx0XHRhbmltYXRpb24gPSBhbmltYXRpb24udGltZWxpbmU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGltZSAqIHNjYWxlO1xuXHRcdH1cblx0XHQqL1xuXG5cdFx0cC50byA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMsIHBvc2l0aW9uKSB7XG5cdFx0XHR2YXIgRW5naW5lID0gKHZhcnMucmVwZWF0ICYmIF9nbG9iYWxzLlR3ZWVuTWF4KSB8fCBUd2VlbkxpdGU7XG5cdFx0XHRyZXR1cm4gZHVyYXRpb24gPyB0aGlzLmFkZCggbmV3IEVuZ2luZSh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSwgcG9zaXRpb24pIDogdGhpcy5zZXQodGFyZ2V0LCB2YXJzLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAuZnJvbSA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIHZhcnMsIHBvc2l0aW9uKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQoICgodmFycy5yZXBlYXQgJiYgX2dsb2JhbHMuVHdlZW5NYXgpIHx8IFR3ZWVuTGl0ZSkuZnJvbSh0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSwgcG9zaXRpb24pO1xuXHRcdH07XG5cblx0XHRwLmZyb21UbyA9IGZ1bmN0aW9uKHRhcmdldCwgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHBvc2l0aW9uKSB7XG5cdFx0XHR2YXIgRW5naW5lID0gKHRvVmFycy5yZXBlYXQgJiYgX2dsb2JhbHMuVHdlZW5NYXgpIHx8IFR3ZWVuTGl0ZTtcblx0XHRcdHJldHVybiBkdXJhdGlvbiA/IHRoaXMuYWRkKCBFbmdpbmUuZnJvbVRvKHRhcmdldCwgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMpLCBwb3NpdGlvbikgOiB0aGlzLnNldCh0YXJnZXQsIHRvVmFycywgcG9zaXRpb24pO1xuXHRcdH07XG5cblx0XHRwLnN0YWdnZXJUbyA9IGZ1bmN0aW9uKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKSB7XG5cdFx0XHR2YXIgdGwgPSBuZXcgVGltZWxpbmVMaXRlKHtvbkNvbXBsZXRlOm9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVQYXJhbXM6b25Db21wbGV0ZUFsbFBhcmFtcywgY2FsbGJhY2tTY29wZTpvbkNvbXBsZXRlQWxsU2NvcGUsIHNtb290aENoaWxkVGltaW5nOnRoaXMuc21vb3RoQ2hpbGRUaW1pbmd9KSxcblx0XHRcdFx0Y3ljbGUgPSB2YXJzLmN5Y2xlLFxuXHRcdFx0XHRjb3B5LCBpO1xuXHRcdFx0aWYgKHR5cGVvZih0YXJnZXRzKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHR0YXJnZXRzID0gVHdlZW5MaXRlLnNlbGVjdG9yKHRhcmdldHMpIHx8IHRhcmdldHM7XG5cdFx0XHR9XG5cdFx0XHR0YXJnZXRzID0gdGFyZ2V0cyB8fCBbXTtcblx0XHRcdGlmIChfaXNTZWxlY3Rvcih0YXJnZXRzKSkgeyAvL3NlbnNlcyBpZiB0aGUgdGFyZ2V0cyBvYmplY3QgaXMgYSBzZWxlY3Rvci4gSWYgaXQgaXMsIHdlIHNob3VsZCB0cmFuc2xhdGUgaXQgaW50byBhbiBhcnJheS5cblx0XHRcdFx0dGFyZ2V0cyA9IF9zbGljZSh0YXJnZXRzKTtcblx0XHRcdH1cblx0XHRcdHN0YWdnZXIgPSBzdGFnZ2VyIHx8IDA7XG5cdFx0XHRpZiAoc3RhZ2dlciA8IDApIHtcblx0XHRcdFx0dGFyZ2V0cyA9IF9zbGljZSh0YXJnZXRzKTtcblx0XHRcdFx0dGFyZ2V0cy5yZXZlcnNlKCk7XG5cdFx0XHRcdHN0YWdnZXIgKj0gLTE7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgdGFyZ2V0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb3B5ID0gX2NvcHkodmFycyk7XG5cdFx0XHRcdGlmIChjb3B5LnN0YXJ0QXQpIHtcblx0XHRcdFx0XHRjb3B5LnN0YXJ0QXQgPSBfY29weShjb3B5LnN0YXJ0QXQpO1xuXHRcdFx0XHRcdGlmIChjb3B5LnN0YXJ0QXQuY3ljbGUpIHtcblx0XHRcdFx0XHRcdF9hcHBseUN5Y2xlKGNvcHkuc3RhcnRBdCwgdGFyZ2V0cywgaSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjeWNsZSkge1xuXHRcdFx0XHRcdF9hcHBseUN5Y2xlKGNvcHksIHRhcmdldHMsIGkpO1xuXHRcdFx0XHRcdGlmIChjb3B5LmR1cmF0aW9uICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdGR1cmF0aW9uID0gY29weS5kdXJhdGlvbjtcblx0XHRcdFx0XHRcdGRlbGV0ZSBjb3B5LmR1cmF0aW9uO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0bC50byh0YXJnZXRzW2ldLCBkdXJhdGlvbiwgY29weSwgaSAqIHN0YWdnZXIpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHRsLCBwb3NpdGlvbik7XG5cdFx0fTtcblxuXHRcdHAuc3RhZ2dlckZyb20gPSBmdW5jdGlvbih0YXJnZXRzLCBkdXJhdGlvbiwgdmFycywgc3RhZ2dlciwgcG9zaXRpb24sIG9uQ29tcGxldGVBbGwsIG9uQ29tcGxldGVBbGxQYXJhbXMsIG9uQ29tcGxldGVBbGxTY29wZSkge1xuXHRcdFx0dmFycy5pbW1lZGlhdGVSZW5kZXIgPSAodmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UpO1xuXHRcdFx0dmFycy5ydW5CYWNrd2FyZHMgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RhZ2dlclRvKHRhcmdldHMsIGR1cmF0aW9uLCB2YXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKTtcblx0XHR9O1xuXG5cdFx0cC5zdGFnZ2VyRnJvbVRvID0gZnVuY3Rpb24odGFyZ2V0cywgZHVyYXRpb24sIGZyb21WYXJzLCB0b1ZhcnMsIHN0YWdnZXIsIHBvc2l0aW9uLCBvbkNvbXBsZXRlQWxsLCBvbkNvbXBsZXRlQWxsUGFyYW1zLCBvbkNvbXBsZXRlQWxsU2NvcGUpIHtcblx0XHRcdHRvVmFycy5zdGFydEF0ID0gZnJvbVZhcnM7XG5cdFx0XHR0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyID0gKHRvVmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UgJiYgZnJvbVZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlKTtcblx0XHRcdHJldHVybiB0aGlzLnN0YWdnZXJUbyh0YXJnZXRzLCBkdXJhdGlvbiwgdG9WYXJzLCBzdGFnZ2VyLCBwb3NpdGlvbiwgb25Db21wbGV0ZUFsbCwgb25Db21wbGV0ZUFsbFBhcmFtcywgb25Db21wbGV0ZUFsbFNjb3BlKTtcblx0XHR9O1xuXG5cdFx0cC5jYWxsID0gZnVuY3Rpb24oY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUsIHBvc2l0aW9uKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQoIFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbCgwLCBjYWxsYmFjaywgcGFyYW1zLCBzY29wZSksIHBvc2l0aW9uKTtcblx0XHR9O1xuXG5cdFx0cC5zZXQgPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMsIHBvc2l0aW9uKSB7XG5cdFx0XHRwb3NpdGlvbiA9IHRoaXMuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24sIDAsIHRydWUpO1xuXHRcdFx0aWYgKHZhcnMuaW1tZWRpYXRlUmVuZGVyID09IG51bGwpIHtcblx0XHRcdFx0dmFycy5pbW1lZGlhdGVSZW5kZXIgPSAocG9zaXRpb24gPT09IHRoaXMuX3RpbWUgJiYgIXRoaXMuX3BhdXNlZCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQoIG5ldyBUd2VlbkxpdGUodGFyZ2V0LCAwLCB2YXJzKSwgcG9zaXRpb24pO1xuXHRcdH07XG5cblx0XHRUaW1lbGluZUxpdGUuZXhwb3J0Um9vdCA9IGZ1bmN0aW9uKHZhcnMsIGlnbm9yZURlbGF5ZWRDYWxscykge1xuXHRcdFx0dmFycyA9IHZhcnMgfHwge307XG5cdFx0XHRpZiAodmFycy5zbW9vdGhDaGlsZFRpbWluZyA9PSBudWxsKSB7XG5cdFx0XHRcdHZhcnMuc21vb3RoQ2hpbGRUaW1pbmcgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHRsID0gbmV3IFRpbWVsaW5lTGl0ZSh2YXJzKSxcblx0XHRcdFx0cm9vdCA9IHRsLl90aW1lbGluZSxcblx0XHRcdFx0dHdlZW4sIG5leHQ7XG5cdFx0XHRpZiAoaWdub3JlRGVsYXllZENhbGxzID09IG51bGwpIHtcblx0XHRcdFx0aWdub3JlRGVsYXllZENhbGxzID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdHJvb3QuX3JlbW92ZSh0bCwgdHJ1ZSk7XG5cdFx0XHR0bC5fc3RhcnRUaW1lID0gMDtcblx0XHRcdHRsLl9yYXdQcmV2VGltZSA9IHRsLl90aW1lID0gdGwuX3RvdGFsVGltZSA9IHJvb3QuX3RpbWU7XG5cdFx0XHR0d2VlbiA9IHJvb3QuX2ZpcnN0O1xuXHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdG5leHQgPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0aWYgKCFpZ25vcmVEZWxheWVkQ2FsbHMgfHwgISh0d2VlbiBpbnN0YW5jZW9mIFR3ZWVuTGl0ZSAmJiB0d2Vlbi50YXJnZXQgPT09IHR3ZWVuLnZhcnMub25Db21wbGV0ZSkpIHtcblx0XHRcdFx0XHR0bC5hZGQodHdlZW4sIHR3ZWVuLl9zdGFydFRpbWUgLSB0d2Vlbi5fZGVsYXkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuID0gbmV4dDtcblx0XHRcdH1cblx0XHRcdHJvb3QuYWRkKHRsLCAwKTtcblx0XHRcdHJldHVybiB0bDtcblx0XHR9O1xuXG5cdFx0cC5hZGQgPSBmdW5jdGlvbih2YWx1ZSwgcG9zaXRpb24sIGFsaWduLCBzdGFnZ2VyKSB7XG5cdFx0XHR2YXIgY3VyVGltZSwgbCwgaSwgY2hpbGQsIHRsLCBiZWZvcmVSYXdUaW1lO1xuXHRcdFx0aWYgKHR5cGVvZihwb3NpdGlvbikgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKHBvc2l0aW9uLCAwLCB0cnVlLCB2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGlvbikpIHtcblx0XHRcdFx0aWYgKCh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB8fCAodmFsdWUgJiYgdmFsdWUucHVzaCAmJiBfaXNBcnJheSh2YWx1ZSkpKSB7XG5cdFx0XHRcdFx0YWxpZ24gPSBhbGlnbiB8fCBcIm5vcm1hbFwiO1xuXHRcdFx0XHRcdHN0YWdnZXIgPSBzdGFnZ2VyIHx8IDA7XG5cdFx0XHRcdFx0Y3VyVGltZSA9IHBvc2l0aW9uO1xuXHRcdFx0XHRcdGwgPSB2YWx1ZS5sZW5ndGg7XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdFx0aWYgKF9pc0FycmF5KGNoaWxkID0gdmFsdWVbaV0pKSB7XG5cdFx0XHRcdFx0XHRcdGNoaWxkID0gbmV3IFRpbWVsaW5lTGl0ZSh7dHdlZW5zOmNoaWxkfSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLmFkZChjaGlsZCwgY3VyVGltZSk7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mKGNoaWxkKSAhPT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YoY2hpbGQpICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGFsaWduID09PSBcInNlcXVlbmNlXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRjdXJUaW1lID0gY2hpbGQuX3N0YXJ0VGltZSArIChjaGlsZC50b3RhbER1cmF0aW9uKCkgLyBjaGlsZC5fdGltZVNjYWxlKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChhbGlnbiA9PT0gXCJzdGFydFwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2hpbGQuX3N0YXJ0VGltZSAtPSBjaGlsZC5kZWxheSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjdXJUaW1lICs9IHN0YWdnZXI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hZGRMYWJlbCh2YWx1ZSwgcG9zaXRpb24pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdHZhbHVlID0gVHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAsIHZhbHVlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyhcIkNhbm5vdCBhZGQgXCIgKyB2YWx1ZSArIFwiIGludG8gdGhlIHRpbWVsaW5lOyBpdCBpcyBub3QgYSB0d2VlbiwgdGltZWxpbmUsIGZ1bmN0aW9uLCBvciBzdHJpbmcuXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdFNpbXBsZVRpbWVsaW5lLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCB2YWx1ZSwgcG9zaXRpb24pO1xuXG5cdFx0XHQvL2lmIHRoZSB0aW1lbGluZSBoYXMgYWxyZWFkeSBlbmRlZCBidXQgdGhlIGluc2VydGVkIHR3ZWVuL3RpbWVsaW5lIGV4dGVuZHMgdGhlIGR1cmF0aW9uLCB3ZSBzaG91bGQgZW5hYmxlIHRoaXMgdGltZWxpbmUgYWdhaW4gc28gdGhhdCBpdCByZW5kZXJzIHByb3Blcmx5LiBXZSBzaG91bGQgYWxzbyBhbGlnbiB0aGUgcGxheWhlYWQgd2l0aCB0aGUgcGFyZW50IHRpbWVsaW5lJ3Mgd2hlbiBhcHByb3ByaWF0ZS5cblx0XHRcdGlmICh0aGlzLl9nYyB8fCB0aGlzLl90aW1lID09PSB0aGlzLl9kdXJhdGlvbikgaWYgKCF0aGlzLl9wYXVzZWQpIGlmICh0aGlzLl9kdXJhdGlvbiA8IHRoaXMuZHVyYXRpb24oKSkge1xuXHRcdFx0XHQvL2luIGNhc2UgYW55IG9mIHRoZSBhbmNlc3RvcnMgaGFkIGNvbXBsZXRlZCBidXQgc2hvdWxkIG5vdyBiZSBlbmFibGVkLi4uXG5cdFx0XHRcdHRsID0gdGhpcztcblx0XHRcdFx0YmVmb3JlUmF3VGltZSA9ICh0bC5yYXdUaW1lKCkgPiB2YWx1ZS5fc3RhcnRUaW1lKTsgLy9pZiB0aGUgdHdlZW4gaXMgcGxhY2VkIG9uIHRoZSB0aW1lbGluZSBzbyB0aGF0IGl0IHN0YXJ0cyBCRUZPUkUgdGhlIGN1cnJlbnQgcmF3VGltZSwgd2Ugc2hvdWxkIGFsaWduIHRoZSBwbGF5aGVhZCAobW92ZSB0aGUgdGltZWxpbmUpLiBUaGlzIGlzIGJlY2F1c2Ugc29tZXRpbWVzIHVzZXJzIHdpbGwgY3JlYXRlIGEgdGltZWxpbmUsIGxldCBpdCBmaW5pc2gsIGFuZCBtdWNoIGxhdGVyIGFwcGVuZCBhIHR3ZWVuIGFuZCBleHBlY3QgaXQgdG8gcnVuIGluc3RlYWQgb2YganVtcGluZyB0byBpdHMgZW5kIHN0YXRlLiBXaGlsZSB0ZWNobmljYWxseSBvbmUgY291bGQgYXJndWUgdGhhdCBpdCBzaG91bGQganVtcCB0byBpdHMgZW5kIHN0YXRlLCB0aGF0J3Mgbm90IHdoYXQgdXNlcnMgaW50dWl0aXZlbHkgZXhwZWN0LlxuXHRcdFx0XHR3aGlsZSAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0aWYgKGJlZm9yZVJhd1RpbWUgJiYgdGwuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSB7XG5cdFx0XHRcdFx0XHR0bC50b3RhbFRpbWUodGwuX3RvdGFsVGltZSwgdHJ1ZSk7IC8vbW92ZXMgdGhlIHRpbWVsaW5lIChzaGlmdHMgaXRzIHN0YXJ0VGltZSkgaWYgbmVjZXNzYXJ5LCBhbmQgYWxzbyBlbmFibGVzIGl0LlxuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGwuX2djKSB7XG5cdFx0XHRcdFx0XHR0bC5fZW5hYmxlZCh0cnVlLCBmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRsID0gdGwuX3RpbWVsaW5lO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnJlbW92ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRpb24pIHtcblx0XHRcdFx0dGhpcy5fcmVtb3ZlKHZhbHVlLCBmYWxzZSk7XG5cdFx0XHRcdHZhciB0bCA9IHZhbHVlLl90aW1lbGluZSA9IHZhbHVlLnZhcnMudXNlRnJhbWVzID8gQW5pbWF0aW9uLl9yb290RnJhbWVzVGltZWxpbmUgOiBBbmltYXRpb24uX3Jvb3RUaW1lbGluZTsgLy9ub3cgdGhhdCBpdCdzIHJlbW92ZWQsIGRlZmF1bHQgaXQgdG8gdGhlIHJvb3QgdGltZWxpbmUgc28gdGhhdCBpZiBpdCBnZXRzIHBsYXllZCBhZ2FpbiwgaXQgZG9lc24ndCBqdW1wIGJhY2sgaW50byB0aGlzIHRpbWVsaW5lLlxuXHRcdFx0XHR2YWx1ZS5fc3RhcnRUaW1lID0gKHZhbHVlLl9wYXVzZWQgPyB2YWx1ZS5fcGF1c2VUaW1lIDogdGwuX3RpbWUpIC0gKCghdmFsdWUuX3JldmVyc2VkID8gdmFsdWUuX3RvdGFsVGltZSA6IHZhbHVlLnRvdGFsRHVyYXRpb24oKSAtIHZhbHVlLl90b3RhbFRpbWUpIC8gdmFsdWUuX3RpbWVTY2FsZSk7IC8vZW5zdXJlIHRoYXQgaWYgaXQgZ2V0cyBwbGF5ZWQgYWdhaW4sIHRoZSB0aW1pbmcgaXMgY29ycmVjdC5cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkgfHwgKHZhbHVlICYmIHZhbHVlLnB1c2ggJiYgX2lzQXJyYXkodmFsdWUpKSkge1xuXHRcdFx0XHR2YXIgaSA9IHZhbHVlLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0dGhpcy5yZW1vdmUodmFsdWVbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YodmFsdWUpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLnJlbW92ZUxhYmVsKHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmtpbGwobnVsbCwgdmFsdWUpO1xuXHRcdH07XG5cblx0XHRwLl9yZW1vdmUgPSBmdW5jdGlvbih0d2Vlbiwgc2tpcERpc2FibGUpIHtcblx0XHRcdFNpbXBsZVRpbWVsaW5lLnByb3RvdHlwZS5fcmVtb3ZlLmNhbGwodGhpcywgdHdlZW4sIHNraXBEaXNhYmxlKTtcblx0XHRcdHZhciBsYXN0ID0gdGhpcy5fbGFzdDtcblx0XHRcdGlmICghbGFzdCkge1xuXHRcdFx0XHR0aGlzLl90aW1lID0gdGhpcy5fdG90YWxUaW1lID0gdGhpcy5fZHVyYXRpb24gPSB0aGlzLl90b3RhbER1cmF0aW9uID0gMDtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5fdGltZSA+IGxhc3QuX3N0YXJ0VGltZSArIGxhc3QuX3RvdGFsRHVyYXRpb24gLyBsYXN0Ll90aW1lU2NhbGUpIHtcblx0XHRcdFx0dGhpcy5fdGltZSA9IHRoaXMuZHVyYXRpb24oKTtcblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fdG90YWxEdXJhdGlvbjtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmFwcGVuZCA9IGZ1bmN0aW9uKHZhbHVlLCBvZmZzZXRPckxhYmVsKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQodmFsdWUsIHRoaXMuX3BhcnNlVGltZU9yTGFiZWwobnVsbCwgb2Zmc2V0T3JMYWJlbCwgdHJ1ZSwgdmFsdWUpKTtcblx0XHR9O1xuXG5cdFx0cC5pbnNlcnQgPSBwLmluc2VydE11bHRpcGxlID0gZnVuY3Rpb24odmFsdWUsIHBvc2l0aW9uLCBhbGlnbiwgc3RhZ2dlcikge1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHZhbHVlLCBwb3NpdGlvbiB8fCAwLCBhbGlnbiwgc3RhZ2dlcik7XG5cdFx0fTtcblxuXHRcdHAuYXBwZW5kTXVsdGlwbGUgPSBmdW5jdGlvbih0d2VlbnMsIG9mZnNldE9yTGFiZWwsIGFsaWduLCBzdGFnZ2VyKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGQodHdlZW5zLCB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKG51bGwsIG9mZnNldE9yTGFiZWwsIHRydWUsIHR3ZWVucyksIGFsaWduLCBzdGFnZ2VyKTtcblx0XHR9O1xuXG5cdFx0cC5hZGRMYWJlbCA9IGZ1bmN0aW9uKGxhYmVsLCBwb3NpdGlvbikge1xuXHRcdFx0dGhpcy5fbGFiZWxzW2xhYmVsXSA9IHRoaXMuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24pO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuYWRkUGF1c2UgPSBmdW5jdGlvbihwb3NpdGlvbiwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUpIHtcblx0XHRcdHZhciB0ID0gVHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAsIF9wYXVzZUNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlIHx8IHRoaXMpO1xuXHRcdFx0dC52YXJzLm9uQ29tcGxldGUgPSB0LnZhcnMub25SZXZlcnNlQ29tcGxldGUgPSBjYWxsYmFjaztcblx0XHRcdHQuZGF0YSA9IFwiaXNQYXVzZVwiO1xuXHRcdFx0dGhpcy5faGFzUGF1c2UgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuYWRkKHQsIHBvc2l0aW9uKTtcblx0XHR9O1xuXG5cdFx0cC5yZW1vdmVMYWJlbCA9IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5fbGFiZWxzW2xhYmVsXTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmdldExhYmVsVGltZSA9IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0XHRyZXR1cm4gKHRoaXMuX2xhYmVsc1tsYWJlbF0gIT0gbnVsbCkgPyB0aGlzLl9sYWJlbHNbbGFiZWxdIDogLTE7XG5cdFx0fTtcblxuXHRcdHAuX3BhcnNlVGltZU9yTGFiZWwgPSBmdW5jdGlvbih0aW1lT3JMYWJlbCwgb2Zmc2V0T3JMYWJlbCwgYXBwZW5kSWZBYnNlbnQsIGlnbm9yZSkge1xuXHRcdFx0dmFyIGk7XG5cdFx0XHQvL2lmIHdlJ3JlIGFib3V0IHRvIGFkZCBhIHR3ZWVuL3RpbWVsaW5lIChvciBhbiBhcnJheSBvZiB0aGVtKSB0aGF0J3MgYWxyZWFkeSBhIGNoaWxkIG9mIHRoaXMgdGltZWxpbmUsIHdlIHNob3VsZCByZW1vdmUgaXQgZmlyc3Qgc28gdGhhdCBpdCBkb2Vzbid0IGNvbnRhbWluYXRlIHRoZSBkdXJhdGlvbigpLlxuXHRcdFx0aWYgKGlnbm9yZSBpbnN0YW5jZW9mIEFuaW1hdGlvbiAmJiBpZ25vcmUudGltZWxpbmUgPT09IHRoaXMpIHtcblx0XHRcdFx0dGhpcy5yZW1vdmUoaWdub3JlKTtcblx0XHRcdH0gZWxzZSBpZiAoaWdub3JlICYmICgoaWdub3JlIGluc3RhbmNlb2YgQXJyYXkpIHx8IChpZ25vcmUucHVzaCAmJiBfaXNBcnJheShpZ25vcmUpKSkpIHtcblx0XHRcdFx0aSA9IGlnbm9yZS5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGlmIChpZ25vcmVbaV0gaW5zdGFuY2VvZiBBbmltYXRpb24gJiYgaWdub3JlW2ldLnRpbWVsaW5lID09PSB0aGlzKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJlbW92ZShpZ25vcmVbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGVvZihvZmZzZXRPckxhYmVsKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcGFyc2VUaW1lT3JMYWJlbChvZmZzZXRPckxhYmVsLCAoYXBwZW5kSWZBYnNlbnQgJiYgdHlwZW9mKHRpbWVPckxhYmVsKSA9PT0gXCJudW1iZXJcIiAmJiB0aGlzLl9sYWJlbHNbb2Zmc2V0T3JMYWJlbF0gPT0gbnVsbCkgPyB0aW1lT3JMYWJlbCAtIHRoaXMuZHVyYXRpb24oKSA6IDAsIGFwcGVuZElmQWJzZW50KTtcblx0XHRcdH1cblx0XHRcdG9mZnNldE9yTGFiZWwgPSBvZmZzZXRPckxhYmVsIHx8IDA7XG5cdFx0XHRpZiAodHlwZW9mKHRpbWVPckxhYmVsKSA9PT0gXCJzdHJpbmdcIiAmJiAoaXNOYU4odGltZU9yTGFiZWwpIHx8IHRoaXMuX2xhYmVsc1t0aW1lT3JMYWJlbF0gIT0gbnVsbCkpIHsgLy9pZiB0aGUgc3RyaW5nIGlzIGEgbnVtYmVyIGxpa2UgXCIxXCIsIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSdzIGEgbGFiZWwgd2l0aCB0aGF0IG5hbWUsIG90aGVyd2lzZSBpbnRlcnByZXQgaXQgYXMgYSBudW1iZXIgKGFic29sdXRlIHZhbHVlKS5cblx0XHRcdFx0aSA9IHRpbWVPckxhYmVsLmluZGV4T2YoXCI9XCIpO1xuXHRcdFx0XHRpZiAoaSA9PT0gLTEpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fbGFiZWxzW3RpbWVPckxhYmVsXSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gYXBwZW5kSWZBYnNlbnQgPyAodGhpcy5fbGFiZWxzW3RpbWVPckxhYmVsXSA9IHRoaXMuZHVyYXRpb24oKSArIG9mZnNldE9yTGFiZWwpIDogb2Zmc2V0T3JMYWJlbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuX2xhYmVsc1t0aW1lT3JMYWJlbF0gKyBvZmZzZXRPckxhYmVsO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG9mZnNldE9yTGFiZWwgPSBwYXJzZUludCh0aW1lT3JMYWJlbC5jaGFyQXQoaS0xKSArIFwiMVwiLCAxMCkgKiBOdW1iZXIodGltZU9yTGFiZWwuc3Vic3RyKGkrMSkpO1xuXHRcdFx0XHR0aW1lT3JMYWJlbCA9IChpID4gMSkgPyB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKHRpbWVPckxhYmVsLnN1YnN0cigwLCBpLTEpLCAwLCBhcHBlbmRJZkFic2VudCkgOiB0aGlzLmR1cmF0aW9uKCk7XG5cdFx0XHR9IGVsc2UgaWYgKHRpbWVPckxhYmVsID09IG51bGwpIHtcblx0XHRcdFx0dGltZU9yTGFiZWwgPSB0aGlzLmR1cmF0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gTnVtYmVyKHRpbWVPckxhYmVsKSArIG9mZnNldE9yTGFiZWw7XG5cdFx0fTtcblxuXHRcdHAuc2VlayA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuIHRoaXMudG90YWxUaW1lKCh0eXBlb2YocG9zaXRpb24pID09PSBcIm51bWJlclwiKSA/IHBvc2l0aW9uIDogdGhpcy5fcGFyc2VUaW1lT3JMYWJlbChwb3NpdGlvbiksIChzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpKTtcblx0XHR9O1xuXG5cdFx0cC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHAuZ290b0FuZFBsYXkgPSBmdW5jdGlvbihwb3NpdGlvbiwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdHJldHVybiB0aGlzLnBsYXkocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC5nb3RvQW5kU3RvcCA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0cmV0dXJuIHRoaXMucGF1c2UocG9zaXRpb24sIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC5yZW5kZXIgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpIHtcblx0XHRcdGlmICh0aGlzLl9nYykge1xuXHRcdFx0XHR0aGlzLl9lbmFibGVkKHRydWUsIGZhbHNlKTtcblx0XHRcdH1cblx0XHRcdHZhciB0b3RhbER1ciA9ICghdGhpcy5fZGlydHkpID8gdGhpcy5fdG90YWxEdXJhdGlvbiA6IHRoaXMudG90YWxEdXJhdGlvbigpLFxuXHRcdFx0XHRwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG5cdFx0XHRcdHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0VGltZSxcblx0XHRcdFx0cHJldlRpbWVTY2FsZSA9IHRoaXMuX3RpbWVTY2FsZSxcblx0XHRcdFx0cHJldlBhdXNlZCA9IHRoaXMuX3BhdXNlZCxcblx0XHRcdFx0dHdlZW4sIGlzQ29tcGxldGUsIG5leHQsIGNhbGxiYWNrLCBpbnRlcm5hbEZvcmNlLCBwYXVzZVR3ZWVuLCBjdXJUaW1lO1xuXHRcdFx0aWYgKHRpbWUgPj0gdG90YWxEdXIgLSAwLjAwMDAwMDEpIHsgLy90byB3b3JrIGFyb3VuZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IG1hdGggYXJ0aWZhY3RzLlxuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gdG90YWxEdXI7XG5cdFx0XHRcdGlmICghdGhpcy5fcmV2ZXJzZWQpIGlmICghdGhpcy5faGFzUGF1c2VkQ2hpbGQoKSkge1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0cnVlO1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvbkNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9ICEhdGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuOyAvL290aGVyd2lzZSwgaWYgdGhlIGFuaW1hdGlvbiBpcyB1bnBhdXNlZC9hY3RpdmF0ZWQgYWZ0ZXIgaXQncyBhbHJlYWR5IGZpbmlzaGVkLCBpdCBkb2Vzbid0IGdldCByZW1vdmVkIGZyb20gdGhlIHBhcmVudCB0aW1lbGluZS5cblx0XHRcdFx0XHRpZiAodGhpcy5fZHVyYXRpb24gPT09IDApIGlmICgodGltZSA8PSAwICYmIHRpbWUgPj0gLTAuMDAwMDAwMSkgfHwgdGhpcy5fcmF3UHJldlRpbWUgPCAwIHx8IHRoaXMuX3Jhd1ByZXZUaW1lID09PSBfdGlueU51bSkgaWYgKHRoaXMuX3Jhd1ByZXZUaW1lICE9PSB0aW1lICYmIHRoaXMuX2ZpcnN0KSB7XG5cdFx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLl9yYXdQcmV2VGltZSA+IF90aW55TnVtKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9ICh0aGlzLl9kdXJhdGlvbiB8fCAhc3VwcHJlc3NFdmVudHMgfHwgdGltZSB8fCB0aGlzLl9yYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUgb3IgdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdHRpbWUgPSB0b3RhbER1ciArIDAuMDAwMTsgLy90byBhdm9pZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyAtIHNvbWV0aW1lcyBjaGlsZCB0d2VlbnMvdGltZWxpbmVzIHdlcmUgbm90IGJlaW5nIGZ1bGx5IGNvbXBsZXRlZCAodGhlaXIgcHJvZ3Jlc3MgbWlnaHQgYmUgMC45OTk5OTk5OTk5OTk5OTggaW5zdGVhZCBvZiAxIGJlY2F1c2Ugd2hlbiBfdGltZSAtIHR3ZWVuLl9zdGFydFRpbWUgaXMgcGVyZm9ybWVkLCBmbG9hdGluZyBwb2ludCBlcnJvcnMgd291bGQgcmV0dXJuIGEgdmFsdWUgdGhhdCB3YXMgU0xJR0hUTFkgb2ZmKS4gVHJ5ICg5OTk5OTk5OTk5OTkuNyAtIDk5OTk5OTk5OTk5OSkgKiAxID0gMC42OTk5NTExNzE4NzUgaW5zdGVhZCBvZiAwLjcuXG5cblx0XHRcdH0gZWxzZSBpZiAodGltZSA8IDAuMDAwMDAwMSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMsIHJvdW5kIHN1cGVyIHNtYWxsIHZhbHVlcyB0byAwLlxuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSB0aGlzLl90aW1lID0gMDtcblx0XHRcdFx0aWYgKHByZXZUaW1lICE9PSAwIHx8ICh0aGlzLl9kdXJhdGlvbiA9PT0gMCAmJiB0aGlzLl9yYXdQcmV2VGltZSAhPT0gX3RpbnlOdW0gJiYgKHRoaXMuX3Jhd1ByZXZUaW1lID4gMCB8fCAodGltZSA8IDAgJiYgdGhpcy5fcmF3UHJldlRpbWUgPj0gMCkpKSkge1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0aGlzLl9yZXZlcnNlZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGltZSA8IDApIHtcblx0XHRcdFx0XHR0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuICYmIHRoaXMuX3JldmVyc2VkKSB7IC8vZW5zdXJlcyBwcm9wZXIgR0MgaWYgYSB0aW1lbGluZSBpcyByZXN1bWVkIGFmdGVyIGl0J3MgZmluaXNoZWQgcmV2ZXJzaW5nLlxuXHRcdFx0XHRcdFx0aW50ZXJuYWxGb3JjZSA9IGlzQ29tcGxldGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl9yYXdQcmV2VGltZSA+PSAwICYmIHRoaXMuX2ZpcnN0KSB7IC8vd2hlbiBnb2luZyBiYWNrIGJleW9uZCB0aGUgc3RhcnQsIGZvcmNlIGEgcmVuZGVyIHNvIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMgdGhhdCBzaXQgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIHJlbmRlciB0aGVpciBzdGFydCB2YWx1ZXMgcHJvcGVybHkuIE90aGVyd2lzZSwgaWYgdGhlIHBhcmVudCB0aW1lbGluZSdzIHBsYXloZWFkIGxhbmRzIGV4YWN0bHkgYXQgdGhpcyB0aW1lbGluZSdzIHN0YXJ0VGltZSwgYW5kIHRoZW4gbW92ZXMgYmFja3dhcmRzLCB0aGUgemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIGJlZ2lubmluZyB3b3VsZCBzdGlsbCBiZSBhdCB0aGVpciBlbmQgc3RhdGUuXG5cdFx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSB0aW1lO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gKHRoaXMuX2R1cmF0aW9uIHx8ICFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHRoaXMuX3Jhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSBvciB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0XHRpZiAodGltZSA9PT0gMCAmJiBpc0NvbXBsZXRlKSB7IC8vaWYgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgdGltZWxpbmUgYW5kIHRoZSBwbGF5aGVhZCBsYW5kcyBFWEFDVExZIGF0IHRpbWUgMCwgdGhhdCB0d2VlbiB3aWxsIGNvcnJlY3RseSByZW5kZXIgaXRzIGVuZCB2YWx1ZXMsIGJ1dCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHRpbWVsaW5lIGFsaXZlIGZvciBvbmUgbW9yZSByZW5kZXIgc28gdGhhdCB0aGUgYmVnaW5uaW5nIHZhbHVlcyByZW5kZXIgcHJvcGVybHkgYXMgdGhlIHBhcmVudCdzIHBsYXloZWFkIGtlZXBzIG1vdmluZyBiZXlvbmQgdGhlIGJlZ2luaW5nLiBJbWFnaW5lIG9iai54IHN0YXJ0cyBhdCAwIGFuZCB0aGVuIHdlIGRvIHRsLnNldChvYmosIHt4OjEwMH0pLnRvKG9iaiwgMSwge3g6MjAwfSkgYW5kIHRoZW4gbGF0ZXIgd2UgdGwucmV2ZXJzZSgpLi4udGhlIGdvYWwgaXMgdG8gaGF2ZSBvYmoueCByZXZlcnQgdG8gMC4gSWYgdGhlIHBsYXloZWFkIGhhcHBlbnMgdG8gbGFuZCBvbiBleGFjdGx5IDAsIHdpdGhvdXQgdGhpcyBjaHVuayBvZiBjb2RlLCBpdCdkIGNvbXBsZXRlIHRoZSB0aW1lbGluZSBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlbmRlcmluZyBxdWV1ZSAobm90IGdvb2QpLlxuXHRcdFx0XHRcdFx0dHdlZW4gPSB0aGlzLl9maXJzdDtcblx0XHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghdHdlZW4uX2R1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdFx0aXNDb21wbGV0ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRpbWUgPSAwOyAvL3RvIGF2b2lkIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIChjb3VsZCBjYXVzZSBwcm9ibGVtcyBlc3BlY2lhbGx5IHdpdGggemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSlcblx0XHRcdFx0XHRpZiAoIXRoaXMuX2luaXR0ZWQpIHtcblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICh0aGlzLl9oYXNQYXVzZSAmJiAhdGhpcy5fZm9yY2luZ1BsYXloZWFkICYmICFzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdGlmICh0aW1lID49IHByZXZUaW1lKSB7XG5cdFx0XHRcdFx0XHR0d2VlbiA9IHRoaXMuX2ZpcnN0O1xuXHRcdFx0XHRcdFx0d2hpbGUgKHR3ZWVuICYmIHR3ZWVuLl9zdGFydFRpbWUgPD0gdGltZSAmJiAhcGF1c2VUd2Vlbikge1xuXHRcdFx0XHRcdFx0XHRpZiAoIXR3ZWVuLl9kdXJhdGlvbikgaWYgKHR3ZWVuLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmICF0d2Vlbi5yYXRpbyAmJiAhKHR3ZWVuLl9zdGFydFRpbWUgPT09IDAgJiYgdGhpcy5fcmF3UHJldlRpbWUgPT09IDApKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGF1c2VUd2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHR3ZWVuID0gdGhpcy5fbGFzdDtcblx0XHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lID49IHRpbWUgJiYgIXBhdXNlVHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fZHVyYXRpb24pIGlmICh0d2Vlbi5kYXRhID09PSBcImlzUGF1c2VcIiAmJiB0d2Vlbi5fcmF3UHJldlRpbWUgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGF1c2VUd2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX3ByZXY7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gdGltZSA9IHBhdXNlVHdlZW4uX3N0YXJ0VGltZTtcblx0XHRcdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRpbWUgKyAodGhpcy5fY3ljbGUgKiAodGhpcy5fdG90YWxEdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fdGltZSA9IHRoaXMuX3Jhd1ByZXZUaW1lID0gdGltZTtcblx0XHRcdH1cblx0XHRcdGlmICgodGhpcy5fdGltZSA9PT0gcHJldlRpbWUgfHwgIXRoaXMuX2ZpcnN0KSAmJiAhZm9yY2UgJiYgIWludGVybmFsRm9yY2UgJiYgIXBhdXNlVHdlZW4pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5faW5pdHRlZCkge1xuXHRcdFx0XHR0aGlzLl9pbml0dGVkID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCF0aGlzLl9hY3RpdmUpIGlmICghdGhpcy5fcGF1c2VkICYmIHRoaXMuX3RpbWUgIT09IHByZXZUaW1lICYmIHRpbWUgPiAwKSB7XG5cdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IHRydWU7ICAvL3NvIHRoYXQgaWYgdGhlIHVzZXIgcmVuZGVycyB0aGUgdGltZWxpbmUgKGFzIG9wcG9zZWQgdG8gdGhlIHBhcmVudCB0aW1lbGluZSByZW5kZXJpbmcgaXQpLCBpdCBpcyBmb3JjZWQgdG8gcmUtcmVuZGVyIGFuZCBhbGlnbiBpdCB3aXRoIHRoZSBwcm9wZXIgdGltZS9mcmFtZSBvbiB0aGUgbmV4dCByZW5kZXJpbmcgY3ljbGUuIE1heWJlIHRoZSB0aW1lbGluZSBhbHJlYWR5IGZpbmlzaGVkIGJ1dCB0aGUgdXNlciBtYW51YWxseSByZS1yZW5kZXJzIGl0IGFzIGhhbGZ3YXkgZG9uZSwgZm9yIGV4YW1wbGUuXG5cdFx0XHR9XG5cblx0XHRcdGlmIChwcmV2VGltZSA9PT0gMCkgaWYgKHRoaXMudmFycy5vblN0YXJ0KSBpZiAodGhpcy5fdGltZSAhPT0gMCB8fCAhdGhpcy5fZHVyYXRpb24pIGlmICghc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdFx0dGhpcy5fY2FsbGJhY2soXCJvblN0YXJ0XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRjdXJUaW1lID0gdGhpcy5fdGltZTtcblx0XHRcdGlmIChjdXJUaW1lID49IHByZXZUaW1lKSB7XG5cdFx0XHRcdHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdG5leHQgPSB0d2Vlbi5fbmV4dDsgLy9yZWNvcmQgaXQgaGVyZSBiZWNhdXNlIHRoZSB2YWx1ZSBjb3VsZCBjaGFuZ2UgYWZ0ZXIgcmVuZGVyaW5nLi4uXG5cdFx0XHRcdFx0aWYgKGN1clRpbWUgIT09IHRoaXMuX3RpbWUgfHwgKHRoaXMuX3BhdXNlZCAmJiAhcHJldlBhdXNlZCkpIHsgLy9pbiBjYXNlIGEgdHdlZW4gcGF1c2VzIG9yIHNlZWtzIHRoZSB0aW1lbGluZSB3aGVuIHJlbmRlcmluZywgbGlrZSBpbnNpZGUgb2YgYW4gb25VcGRhdGUvb25Db21wbGV0ZVxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0d2Vlbi5fYWN0aXZlIHx8ICh0d2Vlbi5fc3RhcnRUaW1lIDw9IGN1clRpbWUgJiYgIXR3ZWVuLl9wYXVzZWQgJiYgIXR3ZWVuLl9nYykpIHtcblx0XHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuID09PSB0d2Vlbikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBhdXNlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIXR3ZWVuLl9yZXZlcnNlZCkge1xuXHRcdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIoKCghdHdlZW4uX2RpcnR5KSA/IHR3ZWVuLl90b3RhbER1cmF0aW9uIDogdHdlZW4udG90YWxEdXJhdGlvbigpKSAtICgodGltZSAtIHR3ZWVuLl9zdGFydFRpbWUpICogdHdlZW4uX3RpbWVTY2FsZSksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHR3ZWVuID0gbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4gPSB0aGlzLl9sYXN0O1xuXHRcdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0XHRuZXh0ID0gdHdlZW4uX3ByZXY7IC8vcmVjb3JkIGl0IGhlcmUgYmVjYXVzZSB0aGUgdmFsdWUgY291bGQgY2hhbmdlIGFmdGVyIHJlbmRlcmluZy4uLlxuXHRcdFx0XHRcdGlmIChjdXJUaW1lICE9PSB0aGlzLl90aW1lIHx8ICh0aGlzLl9wYXVzZWQgJiYgIXByZXZQYXVzZWQpKSB7IC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uX2FjdGl2ZSB8fCAodHdlZW4uX3N0YXJ0VGltZSA8PSBwcmV2VGltZSAmJiAhdHdlZW4uX3BhdXNlZCAmJiAhdHdlZW4uX2djKSkge1xuXHRcdFx0XHRcdFx0aWYgKHBhdXNlVHdlZW4gPT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4gPSB0d2Vlbi5fcHJldjsgLy90aGUgbGlua2VkIGxpc3QgaXMgb3JnYW5pemVkIGJ5IF9zdGFydFRpbWUsIHRodXMgaXQncyBwb3NzaWJsZSB0aGF0IGEgdHdlZW4gY291bGQgc3RhcnQgQkVGT1JFIHRoZSBwYXVzZSBhbmQgZW5kIGFmdGVyIGl0LCBpbiB3aGljaCBjYXNlIGl0IHdvdWxkIGJlIHBvc2l0aW9uZWQgYmVmb3JlIHRoZSBwYXVzZSB0d2VlbiBpbiB0aGUgbGlua2VkIGxpc3QsIGJ1dCB3ZSBzaG91bGQgcmVuZGVyIGl0IGJlZm9yZSB3ZSBwYXVzZSgpIHRoZSB0aW1lbGluZSBhbmQgY2Vhc2UgcmVuZGVyaW5nLiBUaGlzIGlzIG9ubHkgYSBjb25jZXJuIHdoZW4gZ29pbmcgaW4gcmV2ZXJzZS5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKHBhdXNlVHdlZW4gJiYgcGF1c2VUd2Vlbi5lbmRUaW1lKCkgPiB0aGlzLl90aW1lKSB7XG5cdFx0XHRcdFx0XHRcdFx0cGF1c2VUd2Vlbi5yZW5kZXIoIChwYXVzZVR3ZWVuLl9yZXZlcnNlZCA/IHBhdXNlVHdlZW4udG90YWxEdXJhdGlvbigpIC0gKCh0aW1lIC0gcGF1c2VUd2Vlbi5fc3RhcnRUaW1lKSAqIHBhdXNlVHdlZW4uX3RpbWVTY2FsZSkgOiAodGltZSAtIHBhdXNlVHdlZW4uX3N0YXJ0VGltZSkgKiBwYXVzZVR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4gPSBwYXVzZVR3ZWVuLl9wcmV2O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4gPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBhdXNlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIXR3ZWVuLl9yZXZlcnNlZCkge1xuXHRcdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIoKCghdHdlZW4uX2RpcnR5KSA/IHR3ZWVuLl90b3RhbER1cmF0aW9uIDogdHdlZW4udG90YWxEdXJhdGlvbigpKSAtICgodGltZSAtIHR3ZWVuLl9zdGFydFRpbWUpICogdHdlZW4uX3RpbWVTY2FsZSksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHR3ZWVuID0gbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fb25VcGRhdGUpIGlmICghc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkgeyAvL2luIGNhc2UgcmVuZGVyaW5nIGNhdXNlZCBhbnkgdHdlZW5zIHRvIGxhenktaW5pdCwgd2Ugc2hvdWxkIHJlbmRlciB0aGVtIGJlY2F1c2UgdHlwaWNhbGx5IHdoZW4gYSB0aW1lbGluZSBmaW5pc2hlcywgdXNlcnMgZXhwZWN0IHRoaW5ncyB0byBoYXZlIHJlbmRlcmVkIGZ1bGx5LiBJbWFnaW5lIGFuIG9uVXBkYXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblx0XHRcdFx0XHRfbGF6eVJlbmRlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25VcGRhdGVcIik7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjYWxsYmFjaykgaWYgKCF0aGlzLl9nYykgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnRUaW1lIHx8IHByZXZUaW1lU2NhbGUgIT09IHRoaXMuX3RpbWVTY2FsZSkgaWYgKHRoaXMuX3RpbWUgPT09IDAgfHwgdG90YWxEdXIgPj0gdGhpcy50b3RhbER1cmF0aW9uKCkpIHsgLy9pZiBvbmUgb2YgdGhlIHR3ZWVucyB0aGF0IHdhcyByZW5kZXJlZCBhbHRlcmVkIHRoaXMgdGltZWxpbmUncyBzdGFydFRpbWUgKGxpa2UgaWYgYW4gb25Db21wbGV0ZSByZXZlcnNlZCB0aGUgdGltZWxpbmUpLCBpdCBwcm9iYWJseSBpc24ndCBjb21wbGV0ZS4gSWYgaXQgaXMsIGRvbid0IHdvcnJ5LCBiZWNhdXNlIHdoYXRldmVyIGNhbGwgYWx0ZXJlZCB0aGUgc3RhcnRUaW1lIHdvdWxkIGNvbXBsZXRlIGlmIGl0IHdhcyBuZWNlc3NhcnkgYXQgdGhlIG5ldyB0aW1lLiBUaGUgb25seSBleGNlcHRpb24gaXMgdGhlIHRpbWVTY2FsZSBwcm9wZXJ0eS4gQWxzbyBjaGVjayBfZ2MgYmVjYXVzZSB0aGVyZSdzIGEgY2hhbmNlIHRoYXQga2lsbCgpIGNvdWxkIGJlIGNhbGxlZCBpbiBhbiBvblVwZGF0ZVxuXHRcdFx0XHRpZiAoaXNDb21wbGV0ZSkge1xuXHRcdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvbkNvbXBsZXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblx0XHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4pIHtcblx0XHRcdFx0XHRcdHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnZhcnNbY2FsbGJhY2tdKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2FsbGJhY2soY2FsbGJhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAuX2hhc1BhdXNlZENoaWxkID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLl9maXJzdDtcblx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRpZiAodHdlZW4uX3BhdXNlZCB8fCAoKHR3ZWVuIGluc3RhbmNlb2YgVGltZWxpbmVMaXRlKSAmJiB0d2Vlbi5faGFzUGF1c2VkQ2hpbGQoKSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0d2VlbiA9IHR3ZWVuLl9uZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0XHRwLmdldENoaWxkcmVuID0gZnVuY3Rpb24obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcywgaWdub3JlQmVmb3JlVGltZSkge1xuXHRcdFx0aWdub3JlQmVmb3JlVGltZSA9IGlnbm9yZUJlZm9yZVRpbWUgfHwgLTk5OTk5OTk5OTk7XG5cdFx0XHR2YXIgYSA9IFtdLFxuXHRcdFx0XHR0d2VlbiA9IHRoaXMuX2ZpcnN0LFxuXHRcdFx0XHRjbnQgPSAwO1xuXHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdGlmICh0d2Vlbi5fc3RhcnRUaW1lIDwgaWdub3JlQmVmb3JlVGltZSkge1xuXHRcdFx0XHRcdC8vZG8gbm90aGluZ1xuXHRcdFx0XHR9IGVsc2UgaWYgKHR3ZWVuIGluc3RhbmNlb2YgVHdlZW5MaXRlKSB7XG5cdFx0XHRcdFx0aWYgKHR3ZWVucyAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdGFbY250KytdID0gdHdlZW47XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmICh0aW1lbGluZXMgIT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRhW2NudCsrXSA9IHR3ZWVuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAobmVzdGVkICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0YSA9IGEuY29uY2F0KHR3ZWVuLmdldENoaWxkcmVuKHRydWUsIHR3ZWVucywgdGltZWxpbmVzKSk7XG5cdFx0XHRcdFx0XHRjbnQgPSBhLmxlbmd0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBhO1xuXHRcdH07XG5cblx0XHRwLmdldFR3ZWVuc09mID0gZnVuY3Rpb24odGFyZ2V0LCBuZXN0ZWQpIHtcblx0XHRcdHZhciBkaXNhYmxlZCA9IHRoaXMuX2djLFxuXHRcdFx0XHRhID0gW10sXG5cdFx0XHRcdGNudCA9IDAsXG5cdFx0XHRcdHR3ZWVucywgaTtcblx0XHRcdGlmIChkaXNhYmxlZCkge1xuXHRcdFx0XHR0aGlzLl9lbmFibGVkKHRydWUsIHRydWUpOyAvL2dldFR3ZWVuc09mKCkgZmlsdGVycyBvdXQgZGlzYWJsZWQgdHdlZW5zLCBhbmQgd2UgaGF2ZSB0byBtYXJrIHRoZW0gYXMgX2djID0gdHJ1ZSB3aGVuIHRoZSB0aW1lbGluZSBjb21wbGV0ZXMgaW4gb3JkZXIgdG8gYWxsb3cgY2xlYW4gZ2FyYmFnZSBjb2xsZWN0aW9uLCBzbyB0ZW1wb3JhcmlseSByZS1lbmFibGUgdGhlIHRpbWVsaW5lIGhlcmUuXG5cdFx0XHR9XG5cdFx0XHR0d2VlbnMgPSBUd2VlbkxpdGUuZ2V0VHdlZW5zT2YodGFyZ2V0KTtcblx0XHRcdGkgPSB0d2VlbnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdGlmICh0d2VlbnNbaV0udGltZWxpbmUgPT09IHRoaXMgfHwgKG5lc3RlZCAmJiB0aGlzLl9jb250YWlucyh0d2VlbnNbaV0pKSkge1xuXHRcdFx0XHRcdGFbY250KytdID0gdHdlZW5zW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZGlzYWJsZWQpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZChmYWxzZSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9O1xuXG5cdFx0cC5yZWNlbnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl9yZWNlbnQ7XG5cdFx0fTtcblxuXHRcdHAuX2NvbnRhaW5zID0gZnVuY3Rpb24odHdlZW4pIHtcblx0XHRcdHZhciB0bCA9IHR3ZWVuLnRpbWVsaW5lO1xuXHRcdFx0d2hpbGUgKHRsKSB7XG5cdFx0XHRcdGlmICh0bCA9PT0gdGhpcykge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRsID0gdGwudGltZWxpbmU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdHAuc2hpZnRDaGlsZHJlbiA9IGZ1bmN0aW9uKGFtb3VudCwgYWRqdXN0TGFiZWxzLCBpZ25vcmVCZWZvcmVUaW1lKSB7XG5cdFx0XHRpZ25vcmVCZWZvcmVUaW1lID0gaWdub3JlQmVmb3JlVGltZSB8fCAwO1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3QsXG5cdFx0XHRcdGxhYmVscyA9IHRoaXMuX2xhYmVscyxcblx0XHRcdFx0cDtcblx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRpZiAodHdlZW4uX3N0YXJ0VGltZSA+PSBpZ25vcmVCZWZvcmVUaW1lKSB7XG5cdFx0XHRcdFx0dHdlZW4uX3N0YXJ0VGltZSArPSBhbW91bnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdH1cblx0XHRcdGlmIChhZGp1c3RMYWJlbHMpIHtcblx0XHRcdFx0Zm9yIChwIGluIGxhYmVscykge1xuXHRcdFx0XHRcdGlmIChsYWJlbHNbcF0gPj0gaWdub3JlQmVmb3JlVGltZSkge1xuXHRcdFx0XHRcdFx0bGFiZWxzW3BdICs9IGFtb3VudDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLl91bmNhY2hlKHRydWUpO1xuXHRcdH07XG5cblx0XHRwLl9raWxsID0gZnVuY3Rpb24odmFycywgdGFyZ2V0KSB7XG5cdFx0XHRpZiAoIXZhcnMgJiYgIXRhcmdldCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHR3ZWVucyA9ICghdGFyZ2V0KSA/IHRoaXMuZ2V0Q2hpbGRyZW4odHJ1ZSwgdHJ1ZSwgZmFsc2UpIDogdGhpcy5nZXRUd2VlbnNPZih0YXJnZXQpLFxuXHRcdFx0XHRpID0gdHdlZW5zLmxlbmd0aCxcblx0XHRcdFx0Y2hhbmdlZCA9IGZhbHNlO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdGlmICh0d2VlbnNbaV0uX2tpbGwodmFycywgdGFyZ2V0KSkge1xuXHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY2hhbmdlZDtcblx0XHR9O1xuXG5cdFx0cC5jbGVhciA9IGZ1bmN0aW9uKGxhYmVscykge1xuXHRcdFx0dmFyIHR3ZWVucyA9IHRoaXMuZ2V0Q2hpbGRyZW4oZmFsc2UsIHRydWUsIHRydWUpLFxuXHRcdFx0XHRpID0gdHdlZW5zLmxlbmd0aDtcblx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90b3RhbFRpbWUgPSAwO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdHR3ZWVuc1tpXS5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGxhYmVscyAhPT0gZmFsc2UpIHtcblx0XHRcdFx0dGhpcy5fbGFiZWxzID0ge307XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC5pbnZhbGlkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLl9maXJzdDtcblx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHR0d2Vlbi5pbnZhbGlkYXRlKCk7XG5cdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gQW5pbWF0aW9uLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcyk7O1xuXHRcdH07XG5cblx0XHRwLl9lbmFibGVkID0gZnVuY3Rpb24oZW5hYmxlZCwgaWdub3JlVGltZWxpbmUpIHtcblx0XHRcdGlmIChlbmFibGVkID09PSB0aGlzLl9nYykge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSB0aGlzLl9maXJzdDtcblx0XHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdFx0dHdlZW4uX2VuYWJsZWQoZW5hYmxlZCwgdHJ1ZSk7XG5cdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFNpbXBsZVRpbWVsaW5lLnByb3RvdHlwZS5fZW5hYmxlZC5jYWxsKHRoaXMsIGVuYWJsZWQsIGlnbm9yZVRpbWVsaW5lKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbFRpbWUgPSBmdW5jdGlvbih0aW1lLCBzdXBwcmVzc0V2ZW50cywgdW5jYXBwZWQpIHtcblx0XHRcdHRoaXMuX2ZvcmNpbmdQbGF5aGVhZCA9IHRydWU7XG5cdFx0XHR2YXIgdmFsID0gQW5pbWF0aW9uLnByb3RvdHlwZS50b3RhbFRpbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRcdHRoaXMuX2ZvcmNpbmdQbGF5aGVhZCA9IGZhbHNlO1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9O1xuXG5cdFx0cC5kdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0aWYgKHRoaXMuX2RpcnR5KSB7XG5cdFx0XHRcdFx0dGhpcy50b3RhbER1cmF0aW9uKCk7IC8vanVzdCB0cmlnZ2VycyByZWNhbGN1bGF0aW9uXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMuX2R1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuZHVyYXRpb24oKSAhPT0gMCAmJiB2YWx1ZSAhPT0gMCkge1xuXHRcdFx0XHR0aGlzLnRpbWVTY2FsZSh0aGlzLl9kdXJhdGlvbiAvIHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnRvdGFsRHVyYXRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHRcdHZhciBtYXggPSAwLFxuXHRcdFx0XHRcdFx0dHdlZW4gPSB0aGlzLl9sYXN0LFxuXHRcdFx0XHRcdFx0cHJldlN0YXJ0ID0gOTk5OTk5OTk5OTk5LFxuXHRcdFx0XHRcdFx0cHJldiwgZW5kO1xuXHRcdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdFx0cHJldiA9IHR3ZWVuLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGluIGNhc2UgdGhlIHR3ZWVuIGNoYW5nZXMgcG9zaXRpb24gaW4gdGhlIHNlcXVlbmNlLi4uXG5cdFx0XHRcdFx0XHRpZiAodHdlZW4uX2RpcnR5KSB7XG5cdFx0XHRcdFx0XHRcdHR3ZWVuLnRvdGFsRHVyYXRpb24oKTsgLy9jb3VsZCBjaGFuZ2UgdGhlIHR3ZWVuLl9zdGFydFRpbWUsIHNvIG1ha2Ugc3VyZSB0aGUgdHdlZW4ncyBjYWNoZSBpcyBjbGVhbiBiZWZvcmUgYW5hbHl6aW5nIGl0LlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHR3ZWVuLl9zdGFydFRpbWUgPiBwcmV2U3RhcnQgJiYgdGhpcy5fc29ydENoaWxkcmVuICYmICF0d2Vlbi5fcGF1c2VkKSB7IC8vaW4gY2FzZSBvbmUgb2YgdGhlIHR3ZWVucyBzaGlmdGVkIG91dCBvZiBvcmRlciwgaXQgbmVlZHMgdG8gYmUgcmUtaW5zZXJ0ZWQgaW50byB0aGUgY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgc2VxdWVuY2Vcblx0XHRcdFx0XHRcdFx0dGhpcy5hZGQodHdlZW4sIHR3ZWVuLl9zdGFydFRpbWUgLSB0d2Vlbi5fZGVsYXkpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cHJldlN0YXJ0ID0gdHdlZW4uX3N0YXJ0VGltZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh0d2Vlbi5fc3RhcnRUaW1lIDwgMCAmJiAhdHdlZW4uX3BhdXNlZCkgeyAvL2NoaWxkcmVuIGFyZW4ndCBhbGxvd2VkIHRvIGhhdmUgbmVnYXRpdmUgc3RhcnRUaW1lcyB1bmxlc3Mgc21vb3RoQ2hpbGRUaW1pbmcgaXMgdHJ1ZSwgc28gYWRqdXN0IGhlcmUgaWYgb25lIGlzIGZvdW5kLlxuXHRcdFx0XHRcdFx0XHRtYXggLT0gdHdlZW4uX3N0YXJ0VGltZTtcblx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRUaW1lICs9IHR3ZWVuLl9zdGFydFRpbWUgLyB0aGlzLl90aW1lU2NhbGU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dGhpcy5zaGlmdENoaWxkcmVuKC10d2Vlbi5fc3RhcnRUaW1lLCBmYWxzZSwgLTk5OTk5OTk5OTkpO1xuXHRcdFx0XHRcdFx0XHRwcmV2U3RhcnQgPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZW5kID0gdHdlZW4uX3N0YXJ0VGltZSArICh0d2Vlbi5fdG90YWxEdXJhdGlvbiAvIHR3ZWVuLl90aW1lU2NhbGUpO1xuXHRcdFx0XHRcdFx0aWYgKGVuZCA+IG1heCkge1xuXHRcdFx0XHRcdFx0XHRtYXggPSBlbmQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0d2VlbiA9IHByZXY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX2R1cmF0aW9uID0gdGhpcy5fdG90YWxEdXJhdGlvbiA9IG1heDtcblx0XHRcdFx0XHR0aGlzLl9kaXJ0eSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzLl90b3RhbER1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICh2YWx1ZSAmJiB0aGlzLnRvdGFsRHVyYXRpb24oKSkgPyB0aGlzLnRpbWVTY2FsZSh0aGlzLl90b3RhbER1cmF0aW9uIC8gdmFsdWUpIDogdGhpcztcblx0XHR9O1xuXG5cdFx0cC5wYXVzZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCF2YWx1ZSkgeyAvL2lmIHRoZXJlJ3MgYSBwYXVzZSBkaXJlY3RseSBhdCB0aGUgc3BvdCBmcm9tIHdoZXJlIHdlJ3JlIHVucGF1c2luZywgc2tpcCBpdC5cblx0XHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fZmlyc3QsXG5cdFx0XHRcdFx0dGltZSA9IHRoaXMuX3RpbWU7XG5cdFx0XHRcdHdoaWxlICh0d2Vlbikge1xuXHRcdFx0XHRcdGlmICh0d2Vlbi5fc3RhcnRUaW1lID09PSB0aW1lICYmIHR3ZWVuLmRhdGEgPT09IFwiaXNQYXVzZVwiKSB7XG5cdFx0XHRcdFx0XHR0d2Vlbi5fcmF3UHJldlRpbWUgPSAwOyAvL3JlbWVtYmVyLCBfcmF3UHJldlRpbWUgaXMgaG93IHplcm8tZHVyYXRpb24gdHdlZW5zL2NhbGxiYWNrcyBzZW5zZSBkaXJlY3Rpb25hbGl0eSBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IHRvIGZpcmUuIElmIF9yYXdQcmV2VGltZSBpcyB0aGUgc2FtZSBhcyBfc3RhcnRUaW1lIG9uIHRoZSBuZXh0IHJlbmRlciwgaXQgd29uJ3QgZmlyZS5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIEFuaW1hdGlvbi5wcm90b3R5cGUucGF1c2VkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0fTtcblxuXHRcdHAudXNlc0ZyYW1lcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRsID0gdGhpcy5fdGltZWxpbmU7XG5cdFx0XHR3aGlsZSAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdHRsID0gdGwuX3RpbWVsaW5lO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICh0bCA9PT0gQW5pbWF0aW9uLl9yb290RnJhbWVzVGltZWxpbmUpO1xuXHRcdH07XG5cblx0XHRwLnJhd1RpbWUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl9wYXVzZWQgPyB0aGlzLl90b3RhbFRpbWUgOiAodGhpcy5fdGltZWxpbmUucmF3VGltZSgpIC0gdGhpcy5fc3RhcnRUaW1lKSAqIHRoaXMuX3RpbWVTY2FsZTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIFRpbWVsaW5lTGl0ZTtcblxuXHR9LCB0cnVlKTtcblxuXG5cblxuXG5cblxuXG5cdFxuXHRcblx0XG5cdFxuXHRcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUaW1lbGluZU1heFxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdF9nc1Njb3BlLl9nc0RlZmluZShcIlRpbWVsaW5lTWF4XCIsIFtcIlRpbWVsaW5lTGl0ZVwiLFwiVHdlZW5MaXRlXCIsXCJlYXNpbmcuRWFzZVwiXSwgZnVuY3Rpb24oVGltZWxpbmVMaXRlLCBUd2VlbkxpdGUsIEVhc2UpIHtcblxuXHRcdHZhciBUaW1lbGluZU1heCA9IGZ1bmN0aW9uKHZhcnMpIHtcblx0XHRcdFx0VGltZWxpbmVMaXRlLmNhbGwodGhpcywgdmFycyk7XG5cdFx0XHRcdHRoaXMuX3JlcGVhdCA9IHRoaXMudmFycy5yZXBlYXQgfHwgMDtcblx0XHRcdFx0dGhpcy5fcmVwZWF0RGVsYXkgPSB0aGlzLnZhcnMucmVwZWF0RGVsYXkgfHwgMDtcblx0XHRcdFx0dGhpcy5fY3ljbGUgPSAwO1xuXHRcdFx0XHR0aGlzLl95b3lvID0gKHRoaXMudmFycy55b3lvID09PSB0cnVlKTtcblx0XHRcdFx0dGhpcy5fZGlydHkgPSB0cnVlO1xuXHRcdFx0fSxcblx0XHRcdF90aW55TnVtID0gMC4wMDAwMDAwMDAxLFxuXHRcdFx0VHdlZW5MaXRlSW50ZXJuYWxzID0gVHdlZW5MaXRlLl9pbnRlcm5hbHMsXG5cdFx0XHRfbGF6eVR3ZWVucyA9IFR3ZWVuTGl0ZUludGVybmFscy5sYXp5VHdlZW5zLFxuXHRcdFx0X2xhenlSZW5kZXIgPSBUd2VlbkxpdGVJbnRlcm5hbHMubGF6eVJlbmRlcixcblx0XHRcdF9nbG9iYWxzID0gX2dzU2NvcGUuX2dzRGVmaW5lLmdsb2JhbHMsXG5cdFx0XHRfZWFzZU5vbmUgPSBuZXcgRWFzZShudWxsLCBudWxsLCAxLCAwKSxcblx0XHRcdHAgPSBUaW1lbGluZU1heC5wcm90b3R5cGUgPSBuZXcgVGltZWxpbmVMaXRlKCk7XG5cblx0XHRwLmNvbnN0cnVjdG9yID0gVGltZWxpbmVNYXg7XG5cdFx0cC5raWxsKCkuX2djID0gZmFsc2U7XG5cdFx0VGltZWxpbmVNYXgudmVyc2lvbiA9IFwiMS4xOS4wXCI7XG5cblx0XHRwLmludmFsaWRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3lveW8gPSAodGhpcy52YXJzLnlveW8gPT09IHRydWUpO1xuXHRcdFx0dGhpcy5fcmVwZWF0ID0gdGhpcy52YXJzLnJlcGVhdCB8fCAwO1xuXHRcdFx0dGhpcy5fcmVwZWF0RGVsYXkgPSB0aGlzLnZhcnMucmVwZWF0RGVsYXkgfHwgMDtcblx0XHRcdHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0XHRyZXR1cm4gVGltZWxpbmVMaXRlLnByb3RvdHlwZS5pbnZhbGlkYXRlLmNhbGwodGhpcyk7XG5cdFx0fTtcblxuXHRcdHAuYWRkQ2FsbGJhY2sgPSBmdW5jdGlvbihjYWxsYmFjaywgcG9zaXRpb24sIHBhcmFtcywgc2NvcGUpIHtcblx0XHRcdHJldHVybiB0aGlzLmFkZCggVHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAsIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSwgcG9zaXRpb24pO1xuXHRcdH07XG5cblx0XHRwLnJlbW92ZUNhbGxiYWNrID0gZnVuY3Rpb24oY2FsbGJhY2ssIHBvc2l0aW9uKSB7XG5cdFx0XHRpZiAoY2FsbGJhY2spIHtcblx0XHRcdFx0aWYgKHBvc2l0aW9uID09IG51bGwpIHtcblx0XHRcdFx0XHR0aGlzLl9raWxsKG51bGwsIGNhbGxiYWNrKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgYSA9IHRoaXMuZ2V0VHdlZW5zT2YoY2FsbGJhY2ssIGZhbHNlKSxcblx0XHRcdFx0XHRcdGkgPSBhLmxlbmd0aCxcblx0XHRcdFx0XHRcdHRpbWUgPSB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKHBvc2l0aW9uKTtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdGlmIChhW2ldLl9zdGFydFRpbWUgPT09IHRpbWUpIHtcblx0XHRcdFx0XHRcdFx0YVtpXS5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAucmVtb3ZlUGF1c2UgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdFx0cmV0dXJuIHRoaXMucmVtb3ZlQ2FsbGJhY2soVGltZWxpbmVMaXRlLl9pbnRlcm5hbHMucGF1c2VDYWxsYmFjaywgcG9zaXRpb24pO1xuXHRcdH07XG5cblx0XHRwLnR3ZWVuVG8gPSBmdW5jdGlvbihwb3NpdGlvbiwgdmFycykge1xuXHRcdFx0dmFycyA9IHZhcnMgfHwge307XG5cdFx0XHR2YXIgY29weSA9IHtlYXNlOl9lYXNlTm9uZSwgdXNlRnJhbWVzOnRoaXMudXNlc0ZyYW1lcygpLCBpbW1lZGlhdGVSZW5kZXI6ZmFsc2V9LFxuXHRcdFx0XHRFbmdpbmUgPSAodmFycy5yZXBlYXQgJiYgX2dsb2JhbHMuVHdlZW5NYXgpIHx8IFR3ZWVuTGl0ZSxcblx0XHRcdFx0ZHVyYXRpb24sIHAsIHQ7XG5cdFx0XHRmb3IgKHAgaW4gdmFycykge1xuXHRcdFx0XHRjb3B5W3BdID0gdmFyc1twXTtcblx0XHRcdH1cblx0XHRcdGNvcHkudGltZSA9IHRoaXMuX3BhcnNlVGltZU9yTGFiZWwocG9zaXRpb24pO1xuXHRcdFx0ZHVyYXRpb24gPSAoTWF0aC5hYnMoTnVtYmVyKGNvcHkudGltZSkgLSB0aGlzLl90aW1lKSAvIHRoaXMuX3RpbWVTY2FsZSkgfHwgMC4wMDE7XG5cdFx0XHR0ID0gbmV3IEVuZ2luZSh0aGlzLCBkdXJhdGlvbiwgY29weSk7XG5cdFx0XHRjb3B5Lm9uU3RhcnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0dC50YXJnZXQucGF1c2VkKHRydWUpO1xuXHRcdFx0XHRpZiAodC52YXJzLnRpbWUgIT09IHQudGFyZ2V0LnRpbWUoKSAmJiBkdXJhdGlvbiA9PT0gdC5kdXJhdGlvbigpKSB7IC8vZG9uJ3QgbWFrZSB0aGUgZHVyYXRpb24gemVybyAtIGlmIGl0J3Mgc3VwcG9zZWQgdG8gYmUgemVybywgZG9uJ3Qgd29ycnkgYmVjYXVzZSBpdCdzIGFscmVhZHkgaW5pdHRpbmcgdGhlIHR3ZWVuIGFuZCB3aWxsIGNvbXBsZXRlIGltbWVkaWF0ZWx5LCBlZmZlY3RpdmVseSBtYWtpbmcgdGhlIGR1cmF0aW9uIHplcm8gYW55d2F5LiBJZiB3ZSBtYWtlIGR1cmF0aW9uIHplcm8sIHRoZSB0d2VlbiB3b24ndCBydW4gYXQgYWxsLlxuXHRcdFx0XHRcdHQuZHVyYXRpb24oIE1hdGguYWJzKCB0LnZhcnMudGltZSAtIHQudGFyZ2V0LnRpbWUoKSkgLyB0LnRhcmdldC5fdGltZVNjYWxlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHZhcnMub25TdGFydCkgeyAvL2luIGNhc2UgdGhlIHVzZXIgaGFkIGFuIG9uU3RhcnQgaW4gdGhlIHZhcnMgLSB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBpdC5cblx0XHRcdFx0XHR0Ll9jYWxsYmFjayhcIm9uU3RhcnRcIik7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gdDtcblx0XHR9O1xuXG5cdFx0cC50d2VlbkZyb21UbyA9IGZ1bmN0aW9uKGZyb21Qb3NpdGlvbiwgdG9Qb3NpdGlvbiwgdmFycykge1xuXHRcdFx0dmFycyA9IHZhcnMgfHwge307XG5cdFx0XHRmcm9tUG9zaXRpb24gPSB0aGlzLl9wYXJzZVRpbWVPckxhYmVsKGZyb21Qb3NpdGlvbik7XG5cdFx0XHR2YXJzLnN0YXJ0QXQgPSB7b25Db21wbGV0ZTp0aGlzLnNlZWssIG9uQ29tcGxldGVQYXJhbXM6W2Zyb21Qb3NpdGlvbl0sIGNhbGxiYWNrU2NvcGU6dGhpc307XG5cdFx0XHR2YXJzLmltbWVkaWF0ZVJlbmRlciA9ICh2YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UpO1xuXHRcdFx0dmFyIHQgPSB0aGlzLnR3ZWVuVG8odG9Qb3NpdGlvbiwgdmFycyk7XG5cdFx0XHRyZXR1cm4gdC5kdXJhdGlvbigoTWF0aC5hYnMoIHQudmFycy50aW1lIC0gZnJvbVBvc2l0aW9uKSAvIHRoaXMuX3RpbWVTY2FsZSkgfHwgMC4wMDEpO1xuXHRcdH07XG5cblx0XHRwLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuXHRcdFx0aWYgKHRoaXMuX2djKSB7XG5cdFx0XHRcdHRoaXMuX2VuYWJsZWQodHJ1ZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHRvdGFsRHVyID0gKCF0aGlzLl9kaXJ0eSkgPyB0aGlzLl90b3RhbER1cmF0aW9uIDogdGhpcy50b3RhbER1cmF0aW9uKCksXG5cdFx0XHRcdGR1ciA9IHRoaXMuX2R1cmF0aW9uLFxuXHRcdFx0XHRwcmV2VGltZSA9IHRoaXMuX3RpbWUsXG5cdFx0XHRcdHByZXZUb3RhbFRpbWUgPSB0aGlzLl90b3RhbFRpbWUsXG5cdFx0XHRcdHByZXZTdGFydCA9IHRoaXMuX3N0YXJ0VGltZSxcblx0XHRcdFx0cHJldlRpbWVTY2FsZSA9IHRoaXMuX3RpbWVTY2FsZSxcblx0XHRcdFx0cHJldlJhd1ByZXZUaW1lID0gdGhpcy5fcmF3UHJldlRpbWUsXG5cdFx0XHRcdHByZXZQYXVzZWQgPSB0aGlzLl9wYXVzZWQsXG5cdFx0XHRcdHByZXZDeWNsZSA9IHRoaXMuX2N5Y2xlLFxuXHRcdFx0XHR0d2VlbiwgaXNDb21wbGV0ZSwgbmV4dCwgY2FsbGJhY2ssIGludGVybmFsRm9yY2UsIGN5Y2xlRHVyYXRpb24sIHBhdXNlVHdlZW4sIGN1clRpbWU7XG5cdFx0XHRpZiAodGltZSA+PSB0b3RhbER1ciAtIDAuMDAwMDAwMSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMuXG5cdFx0XHRcdGlmICghdGhpcy5fbG9ja2VkKSB7XG5cdFx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdG90YWxEdXI7XG5cdFx0XHRcdFx0dGhpcy5fY3ljbGUgPSB0aGlzLl9yZXBlYXQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCF0aGlzLl9yZXZlcnNlZCkgaWYgKCF0aGlzLl9oYXNQYXVzZWRDaGlsZCgpKSB7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRydWU7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uQ29tcGxldGVcIjtcblx0XHRcdFx0XHRpbnRlcm5hbEZvcmNlID0gISF0aGlzLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW47IC8vb3RoZXJ3aXNlLCBpZiB0aGUgYW5pbWF0aW9uIGlzIHVucGF1c2VkL2FjdGl2YXRlZCBhZnRlciBpdCdzIGFscmVhZHkgZmluaXNoZWQsIGl0IGRvZXNuJ3QgZ2V0IHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50IHRpbWVsaW5lLlxuXHRcdFx0XHRcdGlmICh0aGlzLl9kdXJhdGlvbiA9PT0gMCkgaWYgKCh0aW1lIDw9IDAgJiYgdGltZSA+PSAtMC4wMDAwMDAxKSB8fCBwcmV2UmF3UHJldlRpbWUgPCAwIHx8IHByZXZSYXdQcmV2VGltZSA9PT0gX3RpbnlOdW0pIGlmIChwcmV2UmF3UHJldlRpbWUgIT09IHRpbWUgJiYgdGhpcy5fZmlyc3QpIHtcblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWYgKHByZXZSYXdQcmV2VGltZSA+IF90aW55TnVtKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9ICh0aGlzLl9kdXJhdGlvbiB8fCAhc3VwcHJlc3NFdmVudHMgfHwgdGltZSB8fCB0aGlzLl9yYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdGltZWxpbmUgb3IgdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdGlmICh0aGlzLl95b3lvICYmICh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGltZSA9IHRpbWUgPSAwO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3RpbWUgPSBkdXI7XG5cdFx0XHRcdFx0dGltZSA9IGR1ciArIDAuMDAwMTsgLy90byBhdm9pZCBvY2Nhc2lvbmFsIGZsb2F0aW5nIHBvaW50IHJvdW5kaW5nIGVycm9ycyAtIHNvbWV0aW1lcyBjaGlsZCB0d2VlbnMvdGltZWxpbmVzIHdlcmUgbm90IGJlaW5nIGZ1bGx5IGNvbXBsZXRlZCAodGhlaXIgcHJvZ3Jlc3MgbWlnaHQgYmUgMC45OTk5OTk5OTk5OTk5OTggaW5zdGVhZCBvZiAxIGJlY2F1c2Ugd2hlbiBfdGltZSAtIHR3ZWVuLl9zdGFydFRpbWUgaXMgcGVyZm9ybWVkLCBmbG9hdGluZyBwb2ludCBlcnJvcnMgd291bGQgcmV0dXJuIGEgdmFsdWUgdGhhdCB3YXMgU0xJR0hUTFkgb2ZmKS4gVHJ5ICg5OTk5OTk5OTk5OTkuNyAtIDk5OTk5OTk5OTk5OSkgKiAxID0gMC42OTk5NTExNzE4NzUgaW5zdGVhZCBvZiAwLjcuIFdlIGNhbm5vdCBkbyBsZXNzIHRoZW4gMC4wMDAxIGJlY2F1c2UgdGhlIHNhbWUgaXNzdWUgY2FuIG9jY3VyIHdoZW4gdGhlIGR1cmF0aW9uIGlzIGV4dHJlbWVseSBsYXJnZSBsaWtlIDk5OTk5OTk5OTk5OSBpbiB3aGljaCBjYXNlIGFkZGluZyAwLjAwMDAwMDAxLCBmb3IgZXhhbXBsZSwgY2F1c2VzIGl0IHRvIGFjdCBsaWtlIG5vdGhpbmcgd2FzIGFkZGVkLlxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAodGltZSA8IDAuMDAwMDAwMSkgeyAvL3RvIHdvcmsgYXJvdW5kIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgbWF0aCBhcnRpZmFjdHMsIHJvdW5kIHN1cGVyIHNtYWxsIHZhbHVlcyB0byAwLlxuXHRcdFx0XHRpZiAoIXRoaXMuX2xvY2tlZCkge1xuXHRcdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX2N5Y2xlID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl90aW1lID0gMDtcblx0XHRcdFx0aWYgKHByZXZUaW1lICE9PSAwIHx8IChkdXIgPT09IDAgJiYgcHJldlJhd1ByZXZUaW1lICE9PSBfdGlueU51bSAmJiAocHJldlJhd1ByZXZUaW1lID4gMCB8fCAodGltZSA8IDAgJiYgcHJldlJhd1ByZXZUaW1lID49IDApKSAmJiAhdGhpcy5fbG9ja2VkKSkgeyAvL2VkZ2UgY2FzZSBmb3IgY2hlY2tpbmcgdGltZSA8IDAgJiYgcHJldlJhd1ByZXZUaW1lID49IDA6IGEgemVyby1kdXJhdGlvbiBmcm9tVG8oKSB0d2VlbiBpbnNpZGUgYSB6ZXJvLWR1cmF0aW9uIHRpbWVsaW5lICh5ZWFoLCB2ZXJ5IHJhcmUpXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRoaXMuX3JldmVyc2VkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aW1lIDwgMCkge1xuXHRcdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4gJiYgdGhpcy5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSBpc0NvbXBsZXRlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocHJldlJhd1ByZXZUaW1lID49IDAgJiYgdGhpcy5fZmlyc3QpIHsgLy93aGVuIGdvaW5nIGJhY2sgYmV5b25kIHRoZSBzdGFydCwgZm9yY2UgYSByZW5kZXIgc28gdGhhdCB6ZXJvLWR1cmF0aW9uIHR3ZWVucyB0aGF0IHNpdCBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgcmVuZGVyIHRoZWlyIHN0YXJ0IHZhbHVlcyBwcm9wZXJseS4gT3RoZXJ3aXNlLCBpZiB0aGUgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgbGFuZHMgZXhhY3RseSBhdCB0aGlzIHRpbWVsaW5lJ3Mgc3RhcnRUaW1lLCBhbmQgdGhlbiBtb3ZlcyBiYWNrd2FyZHMsIHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVucyBhdCB0aGUgYmVnaW5uaW5nIHdvdWxkIHN0aWxsIGJlIGF0IHRoZWlyIGVuZCBzdGF0ZS5cblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHRpbWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSAoZHVyIHx8ICFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHRoaXMuX3Jhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0aW1lbGluZSBvciB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0XHRpZiAodGltZSA9PT0gMCAmJiBpc0NvbXBsZXRlKSB7IC8vaWYgdGhlcmUncyBhIHplcm8tZHVyYXRpb24gdHdlZW4gYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIGEgdGltZWxpbmUgYW5kIHRoZSBwbGF5aGVhZCBsYW5kcyBFWEFDVExZIGF0IHRpbWUgMCwgdGhhdCB0d2VlbiB3aWxsIGNvcnJlY3RseSByZW5kZXIgaXRzIGVuZCB2YWx1ZXMsIGJ1dCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHRpbWVsaW5lIGFsaXZlIGZvciBvbmUgbW9yZSByZW5kZXIgc28gdGhhdCB0aGUgYmVnaW5uaW5nIHZhbHVlcyByZW5kZXIgcHJvcGVybHkgYXMgdGhlIHBhcmVudCdzIHBsYXloZWFkIGtlZXBzIG1vdmluZyBiZXlvbmQgdGhlIGJlZ2luaW5nLiBJbWFnaW5lIG9iai54IHN0YXJ0cyBhdCAwIGFuZCB0aGVuIHdlIGRvIHRsLnNldChvYmosIHt4OjEwMH0pLnRvKG9iaiwgMSwge3g6MjAwfSkgYW5kIHRoZW4gbGF0ZXIgd2UgdGwucmV2ZXJzZSgpLi4udGhlIGdvYWwgaXMgdG8gaGF2ZSBvYmoueCByZXZlcnQgdG8gMC4gSWYgdGhlIHBsYXloZWFkIGhhcHBlbnMgdG8gbGFuZCBvbiBleGFjdGx5IDAsIHdpdGhvdXQgdGhpcyBjaHVuayBvZiBjb2RlLCBpdCdkIGNvbXBsZXRlIHRoZSB0aW1lbGluZSBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIHJlbmRlcmluZyBxdWV1ZSAobm90IGdvb2QpLlxuXHRcdFx0XHRcdFx0dHdlZW4gPSB0aGlzLl9maXJzdDtcblx0XHRcdFx0XHRcdHdoaWxlICh0d2VlbiAmJiB0d2Vlbi5fc3RhcnRUaW1lID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghdHdlZW4uX2R1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdFx0aXNDb21wbGV0ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHR3ZWVuID0gdHdlZW4uX25leHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRpbWUgPSAwOyAvL3RvIGF2b2lkIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIChjb3VsZCBjYXVzZSBwcm9ibGVtcyBlc3BlY2lhbGx5IHdpdGggemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSlcblx0XHRcdFx0XHRpZiAoIXRoaXMuX2luaXR0ZWQpIHtcblx0XHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoZHVyID09PSAwICYmIHByZXZSYXdQcmV2VGltZSA8IDApIHsgLy93aXRob3V0IHRoaXMsIHplcm8tZHVyYXRpb24gcmVwZWF0aW5nIHRpbWVsaW5lcyAobGlrZSB3aXRoIGEgc2ltcGxlIGNhbGxiYWNrIG5lc3RlZCBhdCB0aGUgdmVyeSBiZWdpbm5pbmcgYW5kIGEgcmVwZWF0RGVsYXkpIHdvdWxkbid0IHJlbmRlciB0aGUgZmlyc3QgdGltZSB0aHJvdWdoLlxuXHRcdFx0XHRcdGludGVybmFsRm9yY2UgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl9yYXdQcmV2VGltZSA9IHRpbWU7XG5cdFx0XHRcdGlmICghdGhpcy5fbG9ja2VkKSB7XG5cdFx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGltZTtcblx0XHRcdFx0XHRpZiAodGhpcy5fcmVwZWF0ICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRjeWNsZUR1cmF0aW9uID0gZHVyICsgdGhpcy5fcmVwZWF0RGVsYXk7XG5cdFx0XHRcdFx0XHR0aGlzLl9jeWNsZSA9ICh0aGlzLl90b3RhbFRpbWUgLyBjeWNsZUR1cmF0aW9uKSA+PiAwOyAvL29yaWdpbmFsbHkgX3RvdGFsVGltZSAlIGN5Y2xlRHVyYXRpb24gYnV0IGZsb2F0aW5nIHBvaW50IGVycm9ycyBjYXVzZWQgcHJvYmxlbXMsIHNvIEkgbm9ybWFsaXplZCBpdC4gKDQgJSAwLjggc2hvdWxkIGJlIDAgYnV0IGl0IGdldHMgcmVwb3J0ZWQgYXMgMC43OTk5OTk5OSEpXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5fY3ljbGUgIT09IDApIGlmICh0aGlzLl9jeWNsZSA9PT0gdGhpcy5fdG90YWxUaW1lIC8gY3ljbGVEdXJhdGlvbiAmJiBwcmV2VG90YWxUaW1lIDw9IHRpbWUpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fY3ljbGUtLTsgLy9vdGhlcndpc2Ugd2hlbiByZW5kZXJlZCBleGFjdGx5IGF0IHRoZSBlbmQgdGltZSwgaXQgd2lsbCBhY3QgYXMgdGhvdWdoIGl0IGlzIHJlcGVhdGluZyAoYXQgdGhlIGJlZ2lubmluZylcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRoaXMuX3RpbWUgPSB0aGlzLl90b3RhbFRpbWUgLSAodGhpcy5fY3ljbGUgKiBjeWNsZUR1cmF0aW9uKTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLl95b3lvKSBpZiAoKHRoaXMuX2N5Y2xlICYgMSkgIT09IDApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fdGltZSA9IGR1ciAtIHRoaXMuX3RpbWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5fdGltZSA+IGR1cikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl90aW1lID0gZHVyO1xuXHRcdFx0XHRcdFx0XHR0aW1lID0gZHVyICsgMC4wMDAxOyAvL3RvIGF2b2lkIG9jY2FzaW9uYWwgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3Jcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fdGltZSA8IDApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fdGltZSA9IHRpbWUgPSAwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGltZSA9IHRoaXMuX3RpbWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuX2hhc1BhdXNlICYmICF0aGlzLl9mb3JjaW5nUGxheWhlYWQgJiYgIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdFx0dGltZSA9IHRoaXMuX3RpbWU7XG5cdFx0XHRcdFx0aWYgKHRpbWUgPj0gcHJldlRpbWUpIHtcblx0XHRcdFx0XHRcdHR3ZWVuID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHRcdFx0XHR3aGlsZSAodHdlZW4gJiYgdHdlZW4uX3N0YXJ0VGltZSA8PSB0aW1lICYmICFwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghdHdlZW4uX2R1cmF0aW9uKSBpZiAodHdlZW4uZGF0YSA9PT0gXCJpc1BhdXNlXCIgJiYgIXR3ZWVuLnJhdGlvICYmICEodHdlZW4uX3N0YXJ0VGltZSA9PT0gMCAmJiB0aGlzLl9yYXdQcmV2VGltZSA9PT0gMCkpIHtcblx0XHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gdHdlZW47XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHdlZW4gPSB0aGlzLl9sYXN0O1xuXHRcdFx0XHRcdFx0d2hpbGUgKHR3ZWVuICYmIHR3ZWVuLl9zdGFydFRpbWUgPj0gdGltZSAmJiAhcGF1c2VUd2Vlbikge1xuXHRcdFx0XHRcdFx0XHRpZiAoIXR3ZWVuLl9kdXJhdGlvbikgaWYgKHR3ZWVuLmRhdGEgPT09IFwiaXNQYXVzZVwiICYmIHR3ZWVuLl9yYXdQcmV2VGltZSA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gdHdlZW47XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dHdlZW4gPSB0d2Vlbi5fcHJldjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBhdXNlVHdlZW4pIHtcblx0XHRcdFx0XHRcdHRoaXMuX3RpbWUgPSB0aW1lID0gcGF1c2VUd2Vlbi5fc3RhcnRUaW1lO1xuXHRcdFx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGltZSArICh0aGlzLl9jeWNsZSAqICh0aGlzLl90b3RhbER1cmF0aW9uICsgdGhpcy5fcmVwZWF0RGVsYXkpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fY3ljbGUgIT09IHByZXZDeWNsZSkgaWYgKCF0aGlzLl9sb2NrZWQpIHtcblx0XHRcdFx0Lypcblx0XHRcdFx0bWFrZSBzdXJlIGNoaWxkcmVuIGF0IHRoZSBlbmQvYmVnaW5uaW5nIG9mIHRoZSB0aW1lbGluZSBhcmUgcmVuZGVyZWQgcHJvcGVybHkuIElmLCBmb3IgZXhhbXBsZSxcblx0XHRcdFx0YSAzLXNlY29uZCBsb25nIHRpbWVsaW5lIHJlbmRlcmVkIGF0IDIuOSBzZWNvbmRzIHByZXZpb3VzbHksIGFuZCBub3cgcmVuZGVycyBhdCAzLjIgc2Vjb25kcyAod2hpY2hcblx0XHRcdFx0d291bGQgZ2V0IHRyYW5zYXRlZCB0byAyLjggc2Vjb25kcyBpZiB0aGUgdGltZWxpbmUgeW95b3Mgb3IgMC4yIHNlY29uZHMgaWYgaXQganVzdCByZXBlYXRzKSwgdGhlcmVcblx0XHRcdFx0Y291bGQgYmUgYSBjYWxsYmFjayBvciBhIHNob3J0IHR3ZWVuIHRoYXQncyBhdCAyLjk1IG9yIDMgc2Vjb25kcyBpbiB3aGljaCB3b3VsZG4ndCByZW5kZXIuIFNvXG5cdFx0XHRcdHdlIG5lZWQgdG8gcHVzaCB0aGUgdGltZWxpbmUgdG8gdGhlIGVuZCAoYW5kL29yIGJlZ2lubmluZyBkZXBlbmRpbmcgb24gaXRzIHlveW8gdmFsdWUpLiBBbHNvIHdlIG11c3Rcblx0XHRcdFx0ZW5zdXJlIHRoYXQgemVyby1kdXJhdGlvbiB0d2VlbnMgYXQgdGhlIHZlcnkgYmVnaW5uaW5nIG9yIGVuZCBvZiB0aGUgVGltZWxpbmVNYXggd29yay5cblx0XHRcdFx0Ki9cblx0XHRcdFx0dmFyIGJhY2t3YXJkcyA9ICh0aGlzLl95b3lvICYmIChwcmV2Q3ljbGUgJiAxKSAhPT0gMCksXG5cdFx0XHRcdFx0d3JhcCA9IChiYWNrd2FyZHMgPT09ICh0aGlzLl95b3lvICYmICh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSksXG5cdFx0XHRcdFx0cmVjVG90YWxUaW1lID0gdGhpcy5fdG90YWxUaW1lLFxuXHRcdFx0XHRcdHJlY0N5Y2xlID0gdGhpcy5fY3ljbGUsXG5cdFx0XHRcdFx0cmVjUmF3UHJldlRpbWUgPSB0aGlzLl9yYXdQcmV2VGltZSxcblx0XHRcdFx0XHRyZWNUaW1lID0gdGhpcy5fdGltZTtcblxuXHRcdFx0XHR0aGlzLl90b3RhbFRpbWUgPSBwcmV2Q3ljbGUgKiBkdXI7XG5cdFx0XHRcdGlmICh0aGlzLl9jeWNsZSA8IHByZXZDeWNsZSkge1xuXHRcdFx0XHRcdGJhY2t3YXJkcyA9ICFiYWNrd2FyZHM7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fdG90YWxUaW1lICs9IGR1cjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl90aW1lID0gcHJldlRpbWU7IC8vdGVtcG9yYXJpbHkgcmV2ZXJ0IF90aW1lIHNvIHRoYXQgcmVuZGVyKCkgcmVuZGVycyB0aGUgY2hpbGRyZW4gaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIFdpdGhvdXQgdGhpcywgdHdlZW5zIHdvbid0IHJld2luZCBjb3JyZWN0bHkuIFdlIGNvdWxkIGFyaGljdGVjdCB0aGluZ3MgaW4gYSBcImNsZWFuZXJcIiB3YXkgYnkgc3BsaXR0aW5nIG91dCB0aGUgcmVuZGVyaW5nIHF1ZXVlIGludG8gYSBzZXBhcmF0ZSBtZXRob2QgYnV0IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBrZXB0IGl0IGFsbCBpbnNpZGUgdGhpcyBtZXRob2QuXG5cblx0XHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSAoZHVyID09PSAwKSA/IHByZXZSYXdQcmV2VGltZSAtIDAuMDAwMSA6IHByZXZSYXdQcmV2VGltZTtcblx0XHRcdFx0dGhpcy5fY3ljbGUgPSBwcmV2Q3ljbGU7XG5cdFx0XHRcdHRoaXMuX2xvY2tlZCA9IHRydWU7IC8vcHJldmVudHMgY2hhbmdlcyB0byB0b3RhbFRpbWUgYW5kIHNraXBzIHJlcGVhdC95b3lvIGJlaGF2aW9yIHdoZW4gd2UgcmVjdXJzaXZlbHkgY2FsbCByZW5kZXIoKVxuXHRcdFx0XHRwcmV2VGltZSA9IChiYWNrd2FyZHMpID8gMCA6IGR1cjtcblx0XHRcdFx0dGhpcy5yZW5kZXIocHJldlRpbWUsIHN1cHByZXNzRXZlbnRzLCAoZHVyID09PSAwKSk7XG5cdFx0XHRcdGlmICghc3VwcHJlc3NFdmVudHMpIGlmICghdGhpcy5fZ2MpIHtcblx0XHRcdFx0XHRpZiAodGhpcy52YXJzLm9uUmVwZWF0KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uUmVwZWF0XCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHJldlRpbWUgIT09IHRoaXMuX3RpbWUpIHsgLy9pbiBjYXNlIHRoZXJlJ3MgYSBjYWxsYmFjayBsaWtlIG9uQ29tcGxldGUgaW4gYSBuZXN0ZWQgdHdlZW4vdGltZWxpbmUgdGhhdCBjaGFuZ2VzIHRoZSBwbGF5aGVhZCBwb3NpdGlvbiwgbGlrZSB2aWEgc2VlaygpLCB3ZSBzaG91bGQganVzdCBhYm9ydC5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHdyYXApIHtcblx0XHRcdFx0XHRwcmV2VGltZSA9IChiYWNrd2FyZHMpID8gZHVyICsgMC4wMDAxIDogLTAuMDAwMTtcblx0XHRcdFx0XHR0aGlzLnJlbmRlcihwcmV2VGltZSwgdHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2xvY2tlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZiAodGhpcy5fcGF1c2VkICYmICFwcmV2UGF1c2VkKSB7IC8vaWYgdGhlIHJlbmRlcigpIHRyaWdnZXJlZCBjYWxsYmFjayB0aGF0IHBhdXNlZCB0aGlzIHRpbWVsaW5lLCB3ZSBzaG91bGQgYWJvcnQgKHZlcnkgcmFyZSwgYnV0IHBvc3NpYmxlKVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl90aW1lID0gcmVjVGltZTtcblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gcmVjVG90YWxUaW1lO1xuXHRcdFx0XHR0aGlzLl9jeWNsZSA9IHJlY0N5Y2xlO1xuXHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHJlY1Jhd1ByZXZUaW1lO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoKHRoaXMuX3RpbWUgPT09IHByZXZUaW1lIHx8ICF0aGlzLl9maXJzdCkgJiYgIWZvcmNlICYmICFpbnRlcm5hbEZvcmNlICYmICFwYXVzZVR3ZWVuKSB7XG5cdFx0XHRcdGlmIChwcmV2VG90YWxUaW1lICE9PSB0aGlzLl90b3RhbFRpbWUpIGlmICh0aGlzLl9vblVwZGF0ZSkgaWYgKCFzdXBwcmVzc0V2ZW50cykgeyAvL3NvIHRoYXQgb25VcGRhdGUgZmlyZXMgZXZlbiBkdXJpbmcgdGhlIHJlcGVhdERlbGF5IC0gYXMgbG9uZyBhcyB0aGUgdG90YWxUaW1lIGNoYW5nZWQsIHdlIHNob3VsZCB0cmlnZ2VyIG9uVXBkYXRlLlxuXHRcdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25VcGRhdGVcIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5faW5pdHRlZCkge1xuXHRcdFx0XHR0aGlzLl9pbml0dGVkID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCF0aGlzLl9hY3RpdmUpIGlmICghdGhpcy5fcGF1c2VkICYmIHRoaXMuX3RvdGFsVGltZSAhPT0gcHJldlRvdGFsVGltZSAmJiB0aW1lID4gMCkge1xuXHRcdFx0XHR0aGlzLl9hY3RpdmUgPSB0cnVlOyAgLy9zbyB0aGF0IGlmIHRoZSB1c2VyIHJlbmRlcnMgdGhlIHRpbWVsaW5lIChhcyBvcHBvc2VkIHRvIHRoZSBwYXJlbnQgdGltZWxpbmUgcmVuZGVyaW5nIGl0KSwgaXQgaXMgZm9yY2VkIHRvIHJlLXJlbmRlciBhbmQgYWxpZ24gaXQgd2l0aCB0aGUgcHJvcGVyIHRpbWUvZnJhbWUgb24gdGhlIG5leHQgcmVuZGVyaW5nIGN5Y2xlLiBNYXliZSB0aGUgdGltZWxpbmUgYWxyZWFkeSBmaW5pc2hlZCBidXQgdGhlIHVzZXIgbWFudWFsbHkgcmUtcmVuZGVycyBpdCBhcyBoYWxmd2F5IGRvbmUsIGZvciBleGFtcGxlLlxuXHRcdFx0fVxuXG5cdFx0XHRpZiAocHJldlRvdGFsVGltZSA9PT0gMCkgaWYgKHRoaXMudmFycy5vblN0YXJ0KSBpZiAodGhpcy5fdG90YWxUaW1lICE9PSAwIHx8ICF0aGlzLl90b3RhbER1cmF0aW9uKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdHRoaXMuX2NhbGxiYWNrKFwib25TdGFydFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Y3VyVGltZSA9IHRoaXMuX3RpbWU7XG5cdFx0XHRpZiAoY3VyVGltZSA+PSBwcmV2VGltZSkge1xuXHRcdFx0XHR0d2VlbiA9IHRoaXMuX2ZpcnN0O1xuXHRcdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0XHRuZXh0ID0gdHdlZW4uX25leHQ7IC8vcmVjb3JkIGl0IGhlcmUgYmVjYXVzZSB0aGUgdmFsdWUgY291bGQgY2hhbmdlIGFmdGVyIHJlbmRlcmluZy4uLlxuXHRcdFx0XHRcdGlmIChjdXJUaW1lICE9PSB0aGlzLl90aW1lIHx8ICh0aGlzLl9wYXVzZWQgJiYgIXByZXZQYXVzZWQpKSB7IC8vaW4gY2FzZSBhIHR3ZWVuIHBhdXNlcyBvciBzZWVrcyB0aGUgdGltZWxpbmUgd2hlbiByZW5kZXJpbmcsIGxpa2UgaW5zaWRlIG9mIGFuIG9uVXBkYXRlL29uQ29tcGxldGVcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uX2FjdGl2ZSB8fCAodHdlZW4uX3N0YXJ0VGltZSA8PSB0aGlzLl90aW1lICYmICF0d2Vlbi5fcGF1c2VkICYmICF0d2Vlbi5fZ2MpKSB7XG5cdFx0XHRcdFx0XHRpZiAocGF1c2VUd2VlbiA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuID0gdGhpcy5fbGFzdDtcblx0XHRcdFx0d2hpbGUgKHR3ZWVuKSB7XG5cdFx0XHRcdFx0bmV4dCA9IHR3ZWVuLl9wcmV2OyAvL3JlY29yZCBpdCBoZXJlIGJlY2F1c2UgdGhlIHZhbHVlIGNvdWxkIGNoYW5nZSBhZnRlciByZW5kZXJpbmcuLi5cblx0XHRcdFx0XHRpZiAoY3VyVGltZSAhPT0gdGhpcy5fdGltZSB8fCAodGhpcy5fcGF1c2VkICYmICFwcmV2UGF1c2VkKSkgeyAvL2luIGNhc2UgYSB0d2VlbiBwYXVzZXMgb3Igc2Vla3MgdGhlIHRpbWVsaW5lIHdoZW4gcmVuZGVyaW5nLCBsaWtlIGluc2lkZSBvZiBhbiBvblVwZGF0ZS9vbkNvbXBsZXRlXG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR3ZWVuLl9hY3RpdmUgfHwgKHR3ZWVuLl9zdGFydFRpbWUgPD0gcHJldlRpbWUgJiYgIXR3ZWVuLl9wYXVzZWQgJiYgIXR3ZWVuLl9nYykpIHtcblx0XHRcdFx0XHRcdGlmIChwYXVzZVR3ZWVuID09PSB0d2Vlbikge1xuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gdHdlZW4uX3ByZXY7IC8vdGhlIGxpbmtlZCBsaXN0IGlzIG9yZ2FuaXplZCBieSBfc3RhcnRUaW1lLCB0aHVzIGl0J3MgcG9zc2libGUgdGhhdCBhIHR3ZWVuIGNvdWxkIHN0YXJ0IEJFRk9SRSB0aGUgcGF1c2UgYW5kIGVuZCBhZnRlciBpdCwgaW4gd2hpY2ggY2FzZSBpdCB3b3VsZCBiZSBwb3NpdGlvbmVkIGJlZm9yZSB0aGUgcGF1c2UgdHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0LCBidXQgd2Ugc2hvdWxkIHJlbmRlciBpdCBiZWZvcmUgd2UgcGF1c2UoKSB0aGUgdGltZWxpbmUgYW5kIGNlYXNlIHJlbmRlcmluZy4gVGhpcyBpcyBvbmx5IGEgY29uY2VybiB3aGVuIGdvaW5nIGluIHJldmVyc2UuXG5cdFx0XHRcdFx0XHRcdHdoaWxlIChwYXVzZVR3ZWVuICYmIHBhdXNlVHdlZW4uZW5kVGltZSgpID4gdGhpcy5fdGltZSkge1xuXHRcdFx0XHRcdFx0XHRcdHBhdXNlVHdlZW4ucmVuZGVyKCAocGF1c2VUd2Vlbi5fcmV2ZXJzZWQgPyBwYXVzZVR3ZWVuLnRvdGFsRHVyYXRpb24oKSAtICgodGltZSAtIHBhdXNlVHdlZW4uX3N0YXJ0VGltZSkgKiBwYXVzZVR3ZWVuLl90aW1lU2NhbGUpIDogKHRpbWUgLSBwYXVzZVR3ZWVuLl9zdGFydFRpbWUpICogcGF1c2VUd2Vlbi5fdGltZVNjYWxlKSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gcGF1c2VUd2Vlbi5fcHJldjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwYXVzZVR3ZWVuID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0dGhpcy5wYXVzZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCF0d2Vlbi5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCgoIXR3ZWVuLl9kaXJ0eSkgPyB0d2Vlbi5fdG90YWxEdXJhdGlvbiA6IHR3ZWVuLnRvdGFsRHVyYXRpb24oKSkgLSAoKHRpbWUgLSB0d2Vlbi5fc3RhcnRUaW1lKSAqIHR3ZWVuLl90aW1lU2NhbGUpLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0d2VlbiA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuX29uVXBkYXRlKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvblVwZGF0ZSBvbiBhIHRpbWVsaW5lIHRoYXQgcmVwb3J0cy9jaGVja3MgdHdlZW5lZCB2YWx1ZXMuXG5cdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNhbGxiYWNrKSBpZiAoIXRoaXMuX2xvY2tlZCkgaWYgKCF0aGlzLl9nYykgaWYgKHByZXZTdGFydCA9PT0gdGhpcy5fc3RhcnRUaW1lIHx8IHByZXZUaW1lU2NhbGUgIT09IHRoaXMuX3RpbWVTY2FsZSkgaWYgKHRoaXMuX3RpbWUgPT09IDAgfHwgdG90YWxEdXIgPj0gdGhpcy50b3RhbER1cmF0aW9uKCkpIHsgLy9pZiBvbmUgb2YgdGhlIHR3ZWVucyB0aGF0IHdhcyByZW5kZXJlZCBhbHRlcmVkIHRoaXMgdGltZWxpbmUncyBzdGFydFRpbWUgKGxpa2UgaWYgYW4gb25Db21wbGV0ZSByZXZlcnNlZCB0aGUgdGltZWxpbmUpLCBpdCBwcm9iYWJseSBpc24ndCBjb21wbGV0ZS4gSWYgaXQgaXMsIGRvbid0IHdvcnJ5LCBiZWNhdXNlIHdoYXRldmVyIGNhbGwgYWx0ZXJlZCB0aGUgc3RhcnRUaW1lIHdvdWxkIGNvbXBsZXRlIGlmIGl0IHdhcyBuZWNlc3NhcnkgYXQgdGhlIG5ldyB0aW1lLiBUaGUgb25seSBleGNlcHRpb24gaXMgdGhlIHRpbWVTY2FsZSBwcm9wZXJ0eS4gQWxzbyBjaGVjayBfZ2MgYmVjYXVzZSB0aGVyZSdzIGEgY2hhbmNlIHRoYXQga2lsbCgpIGNvdWxkIGJlIGNhbGxlZCBpbiBhbiBvblVwZGF0ZVxuXHRcdFx0XHRpZiAoaXNDb21wbGV0ZSkge1xuXHRcdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIGEgdGltZWxpbmUgZmluaXNoZXMsIHVzZXJzIGV4cGVjdCB0aGluZ3MgdG8gaGF2ZSByZW5kZXJlZCBmdWxseS4gSW1hZ2luZSBhbiBvbkNvbXBsZXRlIG9uIGEgdGltZWxpbmUgdGhhdCByZXBvcnRzL2NoZWNrcyB0d2VlbmVkIHZhbHVlcy5cblx0XHRcdFx0XHRcdF9sYXp5UmVuZGVyKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4pIHtcblx0XHRcdFx0XHRcdHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnZhcnNbY2FsbGJhY2tdKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2FsbGJhY2soY2FsbGJhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAuZ2V0QWN0aXZlID0gZnVuY3Rpb24obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcykge1xuXHRcdFx0aWYgKG5lc3RlZCA9PSBudWxsKSB7XG5cdFx0XHRcdG5lc3RlZCA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodHdlZW5zID09IG51bGwpIHtcblx0XHRcdFx0dHdlZW5zID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGlmICh0aW1lbGluZXMgPT0gbnVsbCkge1xuXHRcdFx0XHR0aW1lbGluZXMgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBhID0gW10sXG5cdFx0XHRcdGFsbCA9IHRoaXMuZ2V0Q2hpbGRyZW4obmVzdGVkLCB0d2VlbnMsIHRpbWVsaW5lcyksXG5cdFx0XHRcdGNudCA9IDAsXG5cdFx0XHRcdGwgPSBhbGwubGVuZ3RoLFxuXHRcdFx0XHRpLCB0d2Vlbjtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0dHdlZW4gPSBhbGxbaV07XG5cdFx0XHRcdGlmICh0d2Vlbi5pc0FjdGl2ZSgpKSB7XG5cdFx0XHRcdFx0YVtjbnQrK10gPSB0d2Vlbjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fTtcblxuXG5cdFx0cC5nZXRMYWJlbEFmdGVyID0gZnVuY3Rpb24odGltZSkge1xuXHRcdFx0aWYgKCF0aW1lKSBpZiAodGltZSAhPT0gMCkgeyAvL2Zhc3RlciB0aGFuIGlzTmFuKClcblx0XHRcdFx0dGltZSA9IHRoaXMuX3RpbWU7XG5cdFx0XHR9XG5cdFx0XHR2YXIgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHNBcnJheSgpLFxuXHRcdFx0XHRsID0gbGFiZWxzLmxlbmd0aCxcblx0XHRcdFx0aTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0aWYgKGxhYmVsc1tpXS50aW1lID4gdGltZSkge1xuXHRcdFx0XHRcdHJldHVybiBsYWJlbHNbaV0ubmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fTtcblxuXHRcdHAuZ2V0TGFiZWxCZWZvcmUgPSBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHRpZiAodGltZSA9PSBudWxsKSB7XG5cdFx0XHRcdHRpbWUgPSB0aGlzLl90aW1lO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzQXJyYXkoKSxcblx0XHRcdFx0aSA9IGxhYmVscy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0aWYgKGxhYmVsc1tpXS50aW1lIDwgdGltZSkge1xuXHRcdFx0XHRcdHJldHVybiBsYWJlbHNbaV0ubmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fTtcblxuXHRcdHAuZ2V0TGFiZWxzQXJyYXkgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBhID0gW10sXG5cdFx0XHRcdGNudCA9IDAsXG5cdFx0XHRcdHA7XG5cdFx0XHRmb3IgKHAgaW4gdGhpcy5fbGFiZWxzKSB7XG5cdFx0XHRcdGFbY250KytdID0ge3RpbWU6dGhpcy5fbGFiZWxzW3BdLCBuYW1lOnB9O1xuXHRcdFx0fVxuXHRcdFx0YS5zb3J0KGZ1bmN0aW9uKGEsYikge1xuXHRcdFx0XHRyZXR1cm4gYS50aW1lIC0gYi50aW1lO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9O1xuXG5cbi8vLS0tLSBHRVRURVJTIC8gU0VUVEVSUyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblx0XHRwLnByb2dyZXNzID0gZnVuY3Rpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRyZXR1cm4gKCFhcmd1bWVudHMubGVuZ3RoKSA/IHRoaXMuX3RpbWUgLyB0aGlzLmR1cmF0aW9uKCkgOiB0aGlzLnRvdGFsVGltZSggdGhpcy5kdXJhdGlvbigpICogKCh0aGlzLl95b3lvICYmICh0aGlzLl9jeWNsZSAmIDEpICE9PSAwKSA/IDEgLSB2YWx1ZSA6IHZhbHVlKSArICh0aGlzLl9jeWNsZSAqICh0aGlzLl9kdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KSksIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRyZXR1cm4gKCFhcmd1bWVudHMubGVuZ3RoKSA/IHRoaXMuX3RvdGFsVGltZSAvIHRoaXMudG90YWxEdXJhdGlvbigpIDogdGhpcy50b3RhbFRpbWUoIHRoaXMudG90YWxEdXJhdGlvbigpICogdmFsdWUsIHN1cHByZXNzRXZlbnRzKTtcblx0XHR9O1xuXG5cdFx0cC50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0XHRUaW1lbGluZUxpdGUucHJvdG90eXBlLnRvdGFsRHVyYXRpb24uY2FsbCh0aGlzKTsgLy9qdXN0IGZvcmNlcyByZWZyZXNoXG5cdFx0XHRcdFx0Ly9JbnN0ZWFkIG9mIEluZmluaXR5LCB3ZSB1c2UgOTk5OTk5OTk5OTk5IHNvIHRoYXQgd2UgY2FuIGFjY29tbW9kYXRlIHJldmVyc2VzLlxuXHRcdFx0XHRcdHRoaXMuX3RvdGFsRHVyYXRpb24gPSAodGhpcy5fcmVwZWF0ID09PSAtMSkgPyA5OTk5OTk5OTk5OTkgOiB0aGlzLl9kdXJhdGlvbiAqICh0aGlzLl9yZXBlYXQgKyAxKSArICh0aGlzLl9yZXBlYXREZWxheSAqIHRoaXMuX3JlcGVhdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXMuX3RvdGFsRHVyYXRpb247XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHRoaXMuX3JlcGVhdCA9PT0gLTEgfHwgIXZhbHVlKSA/IHRoaXMgOiB0aGlzLnRpbWVTY2FsZSggdGhpcy50b3RhbER1cmF0aW9uKCkgLyB2YWx1ZSApO1xuXHRcdH07XG5cblx0XHRwLnRpbWUgPSBmdW5jdGlvbih2YWx1ZSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fdGltZTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9kaXJ0eSkge1xuXHRcdFx0XHR0aGlzLnRvdGFsRHVyYXRpb24oKTtcblx0XHRcdH1cblx0XHRcdGlmICh2YWx1ZSA+IHRoaXMuX2R1cmF0aW9uKSB7XG5cdFx0XHRcdHZhbHVlID0gdGhpcy5fZHVyYXRpb247XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5feW95byAmJiAodGhpcy5fY3ljbGUgJiAxKSAhPT0gMCkge1xuXHRcdFx0XHR2YWx1ZSA9ICh0aGlzLl9kdXJhdGlvbiAtIHZhbHVlKSArICh0aGlzLl9jeWNsZSAqICh0aGlzLl9kdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KSk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuX3JlcGVhdCAhPT0gMCkge1xuXHRcdFx0XHR2YWx1ZSArPSB0aGlzLl9jeWNsZSAqICh0aGlzLl9kdXJhdGlvbiArIHRoaXMuX3JlcGVhdERlbGF5KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnRvdGFsVGltZSh2YWx1ZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdH07XG5cblx0XHRwLnJlcGVhdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3JlcGVhdDtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3JlcGVhdCA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuX3VuY2FjaGUodHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHAucmVwZWF0RGVsYXkgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9yZXBlYXREZWxheTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3JlcGVhdERlbGF5ID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gdGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHR9O1xuXG5cdFx0cC55b3lvID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5feW95bztcblx0XHRcdH1cblx0XHRcdHRoaXMuX3lveW8gPSB2YWx1ZTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmN1cnJlbnRMYWJlbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0TGFiZWxCZWZvcmUodGhpcy5fdGltZSArIDAuMDAwMDAwMDEpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuc2Vlayh2YWx1ZSwgdHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHJldHVybiBUaW1lbGluZU1heDtcblxuXHR9LCB0cnVlKTtcblx0XG5cblxuXG5cblx0XG5cdFxuXHRcblx0XG5cdFxuXHRcblx0XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQmV6aWVyUGx1Z2luXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0KGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcblx0XHRcdF9yMSA9IFtdLFxuXHRcdFx0X3IyID0gW10sXG5cdFx0XHRfcjMgPSBbXSxcblx0XHRcdF9jb3JQcm9wcyA9IHt9LFxuXHRcdFx0X2dsb2JhbHMgPSBfZ3NTY29wZS5fZ3NEZWZpbmUuZ2xvYmFscyxcblx0XHRcdFNlZ21lbnQgPSBmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG5cdFx0XHRcdGlmIChjID09PSBkKSB7IC8vaWYgYyBhbmQgZCBtYXRjaCwgdGhlIGZpbmFsIGF1dG9Sb3RhdGUgdmFsdWUgY291bGQgbG9jayBhdCAtOTAgZGVncmVlcywgc28gZGlmZmVyZW50aWF0ZSB0aGVtIHNsaWdodGx5LlxuXHRcdFx0XHRcdGMgPSBkIC0gKGQgLSBiKSAvIDEwMDAwMDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGEgPT09IGIpIHsgLy9pZiBhIGFuZCBiIG1hdGNoLCB0aGUgc3RhcnRpbmcgYXV0b1JvdGF0ZSB2YWx1ZSBjb3VsZCBsb2NrIGF0IC05MCBkZWdyZWVzLCBzbyBkaWZmZXJlbnRpYXRlIHRoZW0gc2xpZ2h0bHkuXG5cdFx0XHRcdFx0YiA9IGEgKyAoYyAtIGEpIC8gMTAwMDAwMDtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmEgPSBhO1xuXHRcdFx0XHR0aGlzLmIgPSBiO1xuXHRcdFx0XHR0aGlzLmMgPSBjO1xuXHRcdFx0XHR0aGlzLmQgPSBkO1xuXHRcdFx0XHR0aGlzLmRhID0gZCAtIGE7XG5cdFx0XHRcdHRoaXMuY2EgPSBjIC0gYTtcblx0XHRcdFx0dGhpcy5iYSA9IGIgLSBhO1xuXHRcdFx0fSxcblx0XHRcdF9jb3JyZWxhdGUgPSBcIix4LHkseixsZWZ0LHRvcCxyaWdodCxib3R0b20sbWFyZ2luVG9wLG1hcmdpbkxlZnQsbWFyZ2luUmlnaHQsbWFyZ2luQm90dG9tLHBhZGRpbmdMZWZ0LHBhZGRpbmdUb3AscGFkZGluZ1JpZ2h0LHBhZGRpbmdCb3R0b20sYmFja2dyb3VuZFBvc2l0aW9uLGJhY2tncm91bmRQb3NpdGlvbl95LFwiLFxuXHRcdFx0Y3ViaWNUb1F1YWRyYXRpYyA9IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcblx0XHRcdFx0dmFyIHExID0ge2E6YX0sXG5cdFx0XHRcdFx0cTIgPSB7fSxcblx0XHRcdFx0XHRxMyA9IHt9LFxuXHRcdFx0XHRcdHE0ID0ge2M6ZH0sXG5cdFx0XHRcdFx0bWFiID0gKGEgKyBiKSAvIDIsXG5cdFx0XHRcdFx0bWJjID0gKGIgKyBjKSAvIDIsXG5cdFx0XHRcdFx0bWNkID0gKGMgKyBkKSAvIDIsXG5cdFx0XHRcdFx0bWFiYyA9IChtYWIgKyBtYmMpIC8gMixcblx0XHRcdFx0XHRtYmNkID0gKG1iYyArIG1jZCkgLyAyLFxuXHRcdFx0XHRcdG04ID0gKG1iY2QgLSBtYWJjKSAvIDg7XG5cdFx0XHRcdHExLmIgPSBtYWIgKyAoYSAtIG1hYikgLyA0O1xuXHRcdFx0XHRxMi5iID0gbWFiYyArIG04O1xuXHRcdFx0XHRxMS5jID0gcTIuYSA9IChxMS5iICsgcTIuYikgLyAyO1xuXHRcdFx0XHRxMi5jID0gcTMuYSA9IChtYWJjICsgbWJjZCkgLyAyO1xuXHRcdFx0XHRxMy5iID0gbWJjZCAtIG04O1xuXHRcdFx0XHRxNC5iID0gbWNkICsgKGQgLSBtY2QpIC8gNDtcblx0XHRcdFx0cTMuYyA9IHE0LmEgPSAocTMuYiArIHE0LmIpIC8gMjtcblx0XHRcdFx0cmV0dXJuIFtxMSwgcTIsIHEzLCBxNF07XG5cdFx0XHR9LFxuXHRcdFx0X2NhbGN1bGF0ZUNvbnRyb2xQb2ludHMgPSBmdW5jdGlvbihhLCBjdXJ2aW5lc3MsIHF1YWQsIGJhc2ljLCBjb3JyZWxhdGUpIHtcblx0XHRcdFx0dmFyIGwgPSBhLmxlbmd0aCAtIDEsXG5cdFx0XHRcdFx0aWkgPSAwLFxuXHRcdFx0XHRcdGNwMSA9IGFbMF0uYSxcblx0XHRcdFx0XHRpLCBwMSwgcDIsIHAzLCBzZWcsIG0xLCBtMiwgbW0sIGNwMiwgcWIsIHIxLCByMiwgdGw7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRzZWcgPSBhW2lpXTtcblx0XHRcdFx0XHRwMSA9IHNlZy5hO1xuXHRcdFx0XHRcdHAyID0gc2VnLmQ7XG5cdFx0XHRcdFx0cDMgPSBhW2lpKzFdLmQ7XG5cblx0XHRcdFx0XHRpZiAoY29ycmVsYXRlKSB7XG5cdFx0XHRcdFx0XHRyMSA9IF9yMVtpXTtcblx0XHRcdFx0XHRcdHIyID0gX3IyW2ldO1xuXHRcdFx0XHRcdFx0dGwgPSAoKHIyICsgcjEpICogY3VydmluZXNzICogMC4yNSkgLyAoYmFzaWMgPyAwLjUgOiBfcjNbaV0gfHwgMC41KTtcblx0XHRcdFx0XHRcdG0xID0gcDIgLSAocDIgLSBwMSkgKiAoYmFzaWMgPyBjdXJ2aW5lc3MgKiAwLjUgOiAocjEgIT09IDAgPyB0bCAvIHIxIDogMCkpO1xuXHRcdFx0XHRcdFx0bTIgPSBwMiArIChwMyAtIHAyKSAqIChiYXNpYyA/IGN1cnZpbmVzcyAqIDAuNSA6IChyMiAhPT0gMCA/IHRsIC8gcjIgOiAwKSk7XG5cdFx0XHRcdFx0XHRtbSA9IHAyIC0gKG0xICsgKCgobTIgLSBtMSkgKiAoKHIxICogMyAvIChyMSArIHIyKSkgKyAwLjUpIC8gNCkgfHwgMCkpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRtMSA9IHAyIC0gKHAyIC0gcDEpICogY3VydmluZXNzICogMC41O1xuXHRcdFx0XHRcdFx0bTIgPSBwMiArIChwMyAtIHAyKSAqIGN1cnZpbmVzcyAqIDAuNTtcblx0XHRcdFx0XHRcdG1tID0gcDIgLSAobTEgKyBtMikgLyAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtMSArPSBtbTtcblx0XHRcdFx0XHRtMiArPSBtbTtcblxuXHRcdFx0XHRcdHNlZy5jID0gY3AyID0gbTE7XG5cdFx0XHRcdFx0aWYgKGkgIT09IDApIHtcblx0XHRcdFx0XHRcdHNlZy5iID0gY3AxO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWcuYiA9IGNwMSA9IHNlZy5hICsgKHNlZy5jIC0gc2VnLmEpICogMC42OyAvL2luc3RlYWQgb2YgcGxhY2luZyBiIG9uIGEgZXhhY3RseSwgd2UgbW92ZSBpdCBpbmxpbmUgd2l0aCBjIHNvIHRoYXQgaWYgdGhlIHVzZXIgc3BlY2lmaWVzIGFuIGVhc2UgbGlrZSBCYWNrLmVhc2VJbiBvciBFbGFzdGljLmVhc2VJbiB3aGljaCBnb2VzIEJFWU9ORCB0aGUgYmVnaW5uaW5nLCBpdCB3aWxsIGRvIHNvIHNtb290aGx5LlxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNlZy5kYSA9IHAyIC0gcDE7XG5cdFx0XHRcdFx0c2VnLmNhID0gY3AyIC0gcDE7XG5cdFx0XHRcdFx0c2VnLmJhID0gY3AxIC0gcDE7XG5cblx0XHRcdFx0XHRpZiAocXVhZCkge1xuXHRcdFx0XHRcdFx0cWIgPSBjdWJpY1RvUXVhZHJhdGljKHAxLCBjcDEsIGNwMiwgcDIpO1xuXHRcdFx0XHRcdFx0YS5zcGxpY2UoaWksIDEsIHFiWzBdLCBxYlsxXSwgcWJbMl0sIHFiWzNdKTtcblx0XHRcdFx0XHRcdGlpICs9IDQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlpKys7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3AxID0gbTI7XG5cdFx0XHRcdH1cblx0XHRcdFx0c2VnID0gYVtpaV07XG5cdFx0XHRcdHNlZy5iID0gY3AxO1xuXHRcdFx0XHRzZWcuYyA9IGNwMSArIChzZWcuZCAtIGNwMSkgKiAwLjQ7IC8vaW5zdGVhZCBvZiBwbGFjaW5nIGMgb24gZCBleGFjdGx5LCB3ZSBtb3ZlIGl0IGlubGluZSB3aXRoIGIgc28gdGhhdCBpZiB0aGUgdXNlciBzcGVjaWZpZXMgYW4gZWFzZSBsaWtlIEJhY2suZWFzZU91dCBvciBFbGFzdGljLmVhc2VPdXQgd2hpY2ggZ29lcyBCRVlPTkQgdGhlIGVuZCwgaXQgd2lsbCBkbyBzbyBzbW9vdGhseS5cblx0XHRcdFx0c2VnLmRhID0gc2VnLmQgLSBzZWcuYTtcblx0XHRcdFx0c2VnLmNhID0gc2VnLmMgLSBzZWcuYTtcblx0XHRcdFx0c2VnLmJhID0gY3AxIC0gc2VnLmE7XG5cdFx0XHRcdGlmIChxdWFkKSB7XG5cdFx0XHRcdFx0cWIgPSBjdWJpY1RvUXVhZHJhdGljKHNlZy5hLCBjcDEsIHNlZy5jLCBzZWcuZCk7XG5cdFx0XHRcdFx0YS5zcGxpY2UoaWksIDEsIHFiWzBdLCBxYlsxXSwgcWJbMl0sIHFiWzNdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF9wYXJzZUFuY2hvcnMgPSBmdW5jdGlvbih2YWx1ZXMsIHAsIGNvcnJlbGF0ZSwgcHJlcGVuZCkge1xuXHRcdFx0XHR2YXIgYSA9IFtdLFxuXHRcdFx0XHRcdGwsIGksIHAxLCBwMiwgcDMsIHRtcDtcblx0XHRcdFx0aWYgKHByZXBlbmQpIHtcblx0XHRcdFx0XHR2YWx1ZXMgPSBbcHJlcGVuZF0uY29uY2F0KHZhbHVlcyk7XG5cdFx0XHRcdFx0aSA9IHZhbHVlcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mKCAodG1wID0gdmFsdWVzW2ldW3BdKSApID09PSBcInN0cmluZ1wiKSBpZiAodG1wLmNoYXJBdCgxKSA9PT0gXCI9XCIpIHtcblx0XHRcdFx0XHRcdFx0dmFsdWVzW2ldW3BdID0gcHJlcGVuZFtwXSArIE51bWJlcih0bXAuY2hhckF0KDApICsgdG1wLnN1YnN0cigyKSk7IC8vYWNjb21tb2RhdGUgcmVsYXRpdmUgdmFsdWVzLiBEbyBpdCBpbmxpbmUgaW5zdGVhZCBvZiBicmVha2luZyBpdCBvdXQgaW50byBhIGZ1bmN0aW9uIGZvciBzcGVlZCByZWFzb25zXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGwgPSB2YWx1ZXMubGVuZ3RoIC0gMjtcblx0XHRcdFx0aWYgKGwgPCAwKSB7XG5cdFx0XHRcdFx0YVswXSA9IG5ldyBTZWdtZW50KHZhbHVlc1swXVtwXSwgMCwgMCwgdmFsdWVzWyhsIDwgLTEpID8gMCA6IDFdW3BdKTtcblx0XHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0cDEgPSB2YWx1ZXNbaV1bcF07XG5cdFx0XHRcdFx0cDIgPSB2YWx1ZXNbaSsxXVtwXTtcblx0XHRcdFx0XHRhW2ldID0gbmV3IFNlZ21lbnQocDEsIDAsIDAsIHAyKTtcblx0XHRcdFx0XHRpZiAoY29ycmVsYXRlKSB7XG5cdFx0XHRcdFx0XHRwMyA9IHZhbHVlc1tpKzJdW3BdO1xuXHRcdFx0XHRcdFx0X3IxW2ldID0gKF9yMVtpXSB8fCAwKSArIChwMiAtIHAxKSAqIChwMiAtIHAxKTtcblx0XHRcdFx0XHRcdF9yMltpXSA9IChfcjJbaV0gfHwgMCkgKyAocDMgLSBwMikgKiAocDMgLSBwMik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGFbaV0gPSBuZXcgU2VnbWVudCh2YWx1ZXNbaV1bcF0sIDAsIDAsIHZhbHVlc1tpKzFdW3BdKTtcblx0XHRcdFx0cmV0dXJuIGE7XG5cdFx0XHR9LFxuXHRcdFx0YmV6aWVyVGhyb3VnaCA9IGZ1bmN0aW9uKHZhbHVlcywgY3VydmluZXNzLCBxdWFkcmF0aWMsIGJhc2ljLCBjb3JyZWxhdGUsIHByZXBlbmQpIHtcblx0XHRcdFx0dmFyIG9iaiA9IHt9LFxuXHRcdFx0XHRcdHByb3BzID0gW10sXG5cdFx0XHRcdFx0Zmlyc3QgPSBwcmVwZW5kIHx8IHZhbHVlc1swXSxcblx0XHRcdFx0XHRpLCBwLCBhLCBqLCByLCBsLCBzZWFtbGVzcywgbGFzdDtcblx0XHRcdFx0Y29ycmVsYXRlID0gKHR5cGVvZihjb3JyZWxhdGUpID09PSBcInN0cmluZ1wiKSA/IFwiLFwiK2NvcnJlbGF0ZStcIixcIiA6IF9jb3JyZWxhdGU7XG5cdFx0XHRcdGlmIChjdXJ2aW5lc3MgPT0gbnVsbCkge1xuXHRcdFx0XHRcdGN1cnZpbmVzcyA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChwIGluIHZhbHVlc1swXSkge1xuXHRcdFx0XHRcdHByb3BzLnB1c2gocCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9jaGVjayB0byBzZWUgaWYgdGhlIGxhc3QgYW5kIGZpcnN0IHZhbHVlcyBhcmUgaWRlbnRpY2FsICh3ZWxsLCB3aXRoaW4gMC4wNSkuIElmIHNvLCBtYWtlIHNlYW1sZXNzIGJ5IGFwcGVuZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQgdG8gdGhlIHZlcnkgZW5kIG9mIHRoZSB2YWx1ZXMgYXJyYXkgYW5kIHRoZSAybmQtdG8tbGFzdCBlbGVtZW50IHRvIHRoZSB2ZXJ5IGJlZ2lubmluZyAod2UnbGwgcmVtb3ZlIHRob3NlIHNlZ21lbnRzIGxhdGVyKVxuXHRcdFx0XHRpZiAodmFsdWVzLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRsYXN0ID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAxXTtcblx0XHRcdFx0XHRzZWFtbGVzcyA9IHRydWU7XG5cdFx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdHAgPSBwcm9wc1tpXTtcblx0XHRcdFx0XHRcdGlmIChNYXRoLmFicyhmaXJzdFtwXSAtIGxhc3RbcF0pID4gMC4wNSkgeyAvL2J1aWxkIGluIGEgdG9sZXJhbmNlIG9mICsvLTAuMDUgdG8gYWNjb21tb2RhdGUgcm91bmRpbmcgZXJyb3JzLlxuXHRcdFx0XHRcdFx0XHRzZWFtbGVzcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHNlYW1sZXNzKSB7XG5cdFx0XHRcdFx0XHR2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KCk7IC8vZHVwbGljYXRlIHRoZSBhcnJheSB0byBhdm9pZCBjb250YW1pbmF0aW5nIHRoZSBvcmlnaW5hbCB3aGljaCB0aGUgdXNlciBtYXkgYmUgcmV1c2luZyBmb3Igb3RoZXIgdHdlZW5zXG5cdFx0XHRcdFx0XHRpZiAocHJlcGVuZCkge1xuXHRcdFx0XHRcdFx0XHR2YWx1ZXMudW5zaGlmdChwcmVwZW5kKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKHZhbHVlc1sxXSk7XG5cdFx0XHRcdFx0XHRwcmVwZW5kID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAzXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0X3IxLmxlbmd0aCA9IF9yMi5sZW5ndGggPSBfcjMubGVuZ3RoID0gMDtcblx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0cCA9IHByb3BzW2ldO1xuXHRcdFx0XHRcdF9jb3JQcm9wc1twXSA9IChjb3JyZWxhdGUuaW5kZXhPZihcIixcIitwK1wiLFwiKSAhPT0gLTEpO1xuXHRcdFx0XHRcdG9ialtwXSA9IF9wYXJzZUFuY2hvcnModmFsdWVzLCBwLCBfY29yUHJvcHNbcF0sIHByZXBlbmQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGkgPSBfcjEubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRfcjFbaV0gPSBNYXRoLnNxcnQoX3IxW2ldKTtcblx0XHRcdFx0XHRfcjJbaV0gPSBNYXRoLnNxcnQoX3IyW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWJhc2ljKSB7XG5cdFx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdGlmIChfY29yUHJvcHNbcF0pIHtcblx0XHRcdFx0XHRcdFx0YSA9IG9ialtwcm9wc1tpXV07XG5cdFx0XHRcdFx0XHRcdGwgPSBhLmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBsOyBqKyspIHtcblx0XHRcdFx0XHRcdFx0XHRyID0gKGFbaisxXS5kYSAvIF9yMltqXSArIGFbal0uZGEgLyBfcjFbal0pIHx8IDA7XG5cdFx0XHRcdFx0XHRcdFx0X3IzW2pdID0gKF9yM1tqXSB8fCAwKSArIHIgKiByO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGkgPSBfcjMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0X3IzW2ldID0gTWF0aC5zcXJ0KF9yM1tpXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGkgPSBwcm9wcy5sZW5ndGg7XG5cdFx0XHRcdGogPSBxdWFkcmF0aWMgPyA0IDogMTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0cCA9IHByb3BzW2ldO1xuXHRcdFx0XHRcdGEgPSBvYmpbcF07XG5cdFx0XHRcdFx0X2NhbGN1bGF0ZUNvbnRyb2xQb2ludHMoYSwgY3VydmluZXNzLCBxdWFkcmF0aWMsIGJhc2ljLCBfY29yUHJvcHNbcF0pOyAvL3RoaXMgbWV0aG9kIHJlcXVpcmVzIHRoYXQgX3BhcnNlQW5jaG9ycygpIGFuZCBfc2V0U2VnbWVudFJhdGlvcygpIHJhbiBmaXJzdCBzbyB0aGF0IF9yMSwgX3IyLCBhbmQgX3IzIHZhbHVlcyBhcmUgcG9wdWxhdGVkIGZvciBhbGwgcHJvcGVydGllc1xuXHRcdFx0XHRcdGlmIChzZWFtbGVzcykge1xuXHRcdFx0XHRcdFx0YS5zcGxpY2UoMCwgaik7XG5cdFx0XHRcdFx0XHRhLnNwbGljZShhLmxlbmd0aCAtIGosIGopO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb2JqO1xuXHRcdFx0fSxcblx0XHRcdF9wYXJzZUJlemllckRhdGEgPSBmdW5jdGlvbih2YWx1ZXMsIHR5cGUsIHByZXBlbmQpIHtcblx0XHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJzb2Z0XCI7XG5cdFx0XHRcdHZhciBvYmogPSB7fSxcblx0XHRcdFx0XHRpbmMgPSAodHlwZSA9PT0gXCJjdWJpY1wiKSA/IDMgOiAyLFxuXHRcdFx0XHRcdHNvZnQgPSAodHlwZSA9PT0gXCJzb2Z0XCIpLFxuXHRcdFx0XHRcdHByb3BzID0gW10sXG5cdFx0XHRcdFx0YSwgYiwgYywgZCwgY3VyLCBpLCBqLCBsLCBwLCBjbnQsIHRtcDtcblx0XHRcdFx0aWYgKHNvZnQgJiYgcHJlcGVuZCkge1xuXHRcdFx0XHRcdHZhbHVlcyA9IFtwcmVwZW5kXS5jb25jYXQodmFsdWVzKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodmFsdWVzID09IG51bGwgfHwgdmFsdWVzLmxlbmd0aCA8IGluYyArIDEpIHsgdGhyb3cgXCJpbnZhbGlkIEJlemllciBkYXRhXCI7IH1cblx0XHRcdFx0Zm9yIChwIGluIHZhbHVlc1swXSkge1xuXHRcdFx0XHRcdHByb3BzLnB1c2gocCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aSA9IHByb3BzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0cCA9IHByb3BzW2ldO1xuXHRcdFx0XHRcdG9ialtwXSA9IGN1ciA9IFtdO1xuXHRcdFx0XHRcdGNudCA9IDA7XG5cdFx0XHRcdFx0bCA9IHZhbHVlcy5sZW5ndGg7XG5cdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGw7IGorKykge1xuXHRcdFx0XHRcdFx0YSA9IChwcmVwZW5kID09IG51bGwpID8gdmFsdWVzW2pdW3BdIDogKHR5cGVvZiggKHRtcCA9IHZhbHVlc1tqXVtwXSkgKSA9PT0gXCJzdHJpbmdcIiAmJiB0bXAuY2hhckF0KDEpID09PSBcIj1cIikgPyBwcmVwZW5kW3BdICsgTnVtYmVyKHRtcC5jaGFyQXQoMCkgKyB0bXAuc3Vic3RyKDIpKSA6IE51bWJlcih0bXApO1xuXHRcdFx0XHRcdFx0aWYgKHNvZnQpIGlmIChqID4gMSkgaWYgKGogPCBsIC0gMSkge1xuXHRcdFx0XHRcdFx0XHRjdXJbY250KytdID0gKGEgKyBjdXJbY250LTJdKSAvIDI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjdXJbY250KytdID0gYTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bCA9IGNudCAtIGluYyArIDE7XG5cdFx0XHRcdFx0Y250ID0gMDtcblx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbDsgaiArPSBpbmMpIHtcblx0XHRcdFx0XHRcdGEgPSBjdXJbal07XG5cdFx0XHRcdFx0XHRiID0gY3VyW2orMV07XG5cdFx0XHRcdFx0XHRjID0gY3VyW2orMl07XG5cdFx0XHRcdFx0XHRkID0gKGluYyA9PT0gMikgPyAwIDogY3VyW2orM107XG5cdFx0XHRcdFx0XHRjdXJbY250KytdID0gdG1wID0gKGluYyA9PT0gMykgPyBuZXcgU2VnbWVudChhLCBiLCBjLCBkKSA6IG5ldyBTZWdtZW50KGEsICgyICogYiArIGEpIC8gMywgKDIgKiBiICsgYykgLyAzLCBjKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3VyLmxlbmd0aCA9IGNudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb2JqO1xuXHRcdFx0fSxcblx0XHRcdF9hZGRDdWJpY0xlbmd0aHMgPSBmdW5jdGlvbihhLCBzdGVwcywgcmVzb2x1dGlvbikge1xuXHRcdFx0XHR2YXIgaW5jID0gMSAvIHJlc29sdXRpb24sXG5cdFx0XHRcdFx0aiA9IGEubGVuZ3RoLFxuXHRcdFx0XHRcdGQsIGQxLCBzLCBkYSwgY2EsIGJhLCBwLCBpLCBpbnYsIGJleiwgaW5kZXg7XG5cdFx0XHRcdHdoaWxlICgtLWogPiAtMSkge1xuXHRcdFx0XHRcdGJleiA9IGFbal07XG5cdFx0XHRcdFx0cyA9IGJlei5hO1xuXHRcdFx0XHRcdGRhID0gYmV6LmQgLSBzO1xuXHRcdFx0XHRcdGNhID0gYmV6LmMgLSBzO1xuXHRcdFx0XHRcdGJhID0gYmV6LmIgLSBzO1xuXHRcdFx0XHRcdGQgPSBkMSA9IDA7XG5cdFx0XHRcdFx0Zm9yIChpID0gMTsgaSA8PSByZXNvbHV0aW9uOyBpKyspIHtcblx0XHRcdFx0XHRcdHAgPSBpbmMgKiBpO1xuXHRcdFx0XHRcdFx0aW52ID0gMSAtIHA7XG5cdFx0XHRcdFx0XHRkID0gZDEgLSAoZDEgPSAocCAqIHAgKiBkYSArIDMgKiBpbnYgKiAocCAqIGNhICsgaW52ICogYmEpKSAqIHApO1xuXHRcdFx0XHRcdFx0aW5kZXggPSBqICogcmVzb2x1dGlvbiArIGkgLSAxO1xuXHRcdFx0XHRcdFx0c3RlcHNbaW5kZXhdID0gKHN0ZXBzW2luZGV4XSB8fCAwKSArIGQgKiBkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF9wYXJzZUxlbmd0aERhdGEgPSBmdW5jdGlvbihvYmosIHJlc29sdXRpb24pIHtcblx0XHRcdFx0cmVzb2x1dGlvbiA9IHJlc29sdXRpb24gPj4gMCB8fCA2O1xuXHRcdFx0XHR2YXIgYSA9IFtdLFxuXHRcdFx0XHRcdGxlbmd0aHMgPSBbXSxcblx0XHRcdFx0XHRkID0gMCxcblx0XHRcdFx0XHR0b3RhbCA9IDAsXG5cdFx0XHRcdFx0dGhyZXNob2xkID0gcmVzb2x1dGlvbiAtIDEsXG5cdFx0XHRcdFx0c2VnbWVudHMgPSBbXSxcblx0XHRcdFx0XHRjdXJMUyA9IFtdLCAvL2N1cnJlbnQgbGVuZ3RoIHNlZ21lbnRzIGFycmF5XG5cdFx0XHRcdFx0cCwgaSwgbCwgaW5kZXg7XG5cdFx0XHRcdGZvciAocCBpbiBvYmopIHtcblx0XHRcdFx0XHRfYWRkQ3ViaWNMZW5ndGhzKG9ialtwXSwgYSwgcmVzb2x1dGlvbik7XG5cdFx0XHRcdH1cblx0XHRcdFx0bCA9IGEubGVuZ3RoO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0ZCArPSBNYXRoLnNxcnQoYVtpXSk7XG5cdFx0XHRcdFx0aW5kZXggPSBpICUgcmVzb2x1dGlvbjtcblx0XHRcdFx0XHRjdXJMU1tpbmRleF0gPSBkO1xuXHRcdFx0XHRcdGlmIChpbmRleCA9PT0gdGhyZXNob2xkKSB7XG5cdFx0XHRcdFx0XHR0b3RhbCArPSBkO1xuXHRcdFx0XHRcdFx0aW5kZXggPSAoaSAvIHJlc29sdXRpb24pID4+IDA7XG5cdFx0XHRcdFx0XHRzZWdtZW50c1tpbmRleF0gPSBjdXJMUztcblx0XHRcdFx0XHRcdGxlbmd0aHNbaW5kZXhdID0gdG90YWw7XG5cdFx0XHRcdFx0XHRkID0gMDtcblx0XHRcdFx0XHRcdGN1ckxTID0gW107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB7bGVuZ3RoOnRvdGFsLCBsZW5ndGhzOmxlbmd0aHMsIHNlZ21lbnRzOnNlZ21lbnRzfTtcblx0XHRcdH0sXG5cblxuXG5cdFx0XHRCZXppZXJQbHVnaW4gPSBfZ3NTY29wZS5fZ3NEZWZpbmUucGx1Z2luKHtcblx0XHRcdFx0XHRwcm9wTmFtZTogXCJiZXppZXJcIixcblx0XHRcdFx0XHRwcmlvcml0eTogLTEsXG5cdFx0XHRcdFx0dmVyc2lvbjogXCIxLjMuN1wiLFxuXHRcdFx0XHRcdEFQSTogMixcblx0XHRcdFx0XHRnbG9iYWw6dHJ1ZSxcblxuXHRcdFx0XHRcdC8vZ2V0cyBjYWxsZWQgd2hlbiB0aGUgdHdlZW4gcmVuZGVycyBmb3IgdGhlIGZpcnN0IHRpbWUuIFRoaXMgaXMgd2hlcmUgaW5pdGlhbCB2YWx1ZXMgc2hvdWxkIGJlIHJlY29yZGVkIGFuZCBhbnkgc2V0dXAgcm91dGluZXMgc2hvdWxkIHJ1bi5cblx0XHRcdFx0XHRpbml0OiBmdW5jdGlvbih0YXJnZXQsIHZhcnMsIHR3ZWVuKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG5cdFx0XHRcdFx0XHRpZiAodmFycyBpbnN0YW5jZW9mIEFycmF5KSB7XG5cdFx0XHRcdFx0XHRcdHZhcnMgPSB7dmFsdWVzOnZhcnN9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5fZnVuYyA9IHt9O1xuXHRcdFx0XHRcdFx0dGhpcy5fbW9kID0ge307XG5cdFx0XHRcdFx0XHR0aGlzLl9wcm9wcyA9IFtdO1xuXHRcdFx0XHRcdFx0dGhpcy5fdGltZVJlcyA9ICh2YXJzLnRpbWVSZXNvbHV0aW9uID09IG51bGwpID8gNiA6IHBhcnNlSW50KHZhcnMudGltZVJlc29sdXRpb24sIDEwKTtcblx0XHRcdFx0XHRcdHZhciB2YWx1ZXMgPSB2YXJzLnZhbHVlcyB8fCBbXSxcblx0XHRcdFx0XHRcdFx0Zmlyc3QgPSB7fSxcblx0XHRcdFx0XHRcdFx0c2Vjb25kID0gdmFsdWVzWzBdLFxuXHRcdFx0XHRcdFx0XHRhdXRvUm90YXRlID0gdmFycy5hdXRvUm90YXRlIHx8IHR3ZWVuLnZhcnMub3JpZW50VG9CZXppZXIsXG5cdFx0XHRcdFx0XHRcdHAsIGlzRnVuYywgaSwgaiwgcHJlcGVuZDtcblxuXHRcdFx0XHRcdFx0dGhpcy5fYXV0b1JvdGF0ZSA9IGF1dG9Sb3RhdGUgPyAoYXV0b1JvdGF0ZSBpbnN0YW5jZW9mIEFycmF5KSA/IGF1dG9Sb3RhdGUgOiBbW1wieFwiLFwieVwiLFwicm90YXRpb25cIiwoKGF1dG9Sb3RhdGUgPT09IHRydWUpID8gMCA6IE51bWJlcihhdXRvUm90YXRlKSB8fCAwKV1dIDogbnVsbDtcblx0XHRcdFx0XHRcdGZvciAocCBpbiBzZWNvbmQpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fcHJvcHMucHVzaChwKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aSA9IHRoaXMuX3Byb3BzLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRwID0gdGhpcy5fcHJvcHNbaV07XG5cblx0XHRcdFx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMucHVzaChwKTtcblx0XHRcdFx0XHRcdFx0aXNGdW5jID0gdGhpcy5fZnVuY1twXSA9ICh0eXBlb2YodGFyZ2V0W3BdKSA9PT0gXCJmdW5jdGlvblwiKTtcblx0XHRcdFx0XHRcdFx0Zmlyc3RbcF0gPSAoIWlzRnVuYykgPyBwYXJzZUZsb2F0KHRhcmdldFtwXSkgOiB0YXJnZXRbICgocC5pbmRleE9mKFwic2V0XCIpIHx8IHR5cGVvZih0YXJnZXRbXCJnZXRcIiArIHAuc3Vic3RyKDMpXSkgIT09IFwiZnVuY3Rpb25cIikgPyBwIDogXCJnZXRcIiArIHAuc3Vic3RyKDMpKSBdKCk7XG5cdFx0XHRcdFx0XHRcdGlmICghcHJlcGVuZCkgaWYgKGZpcnN0W3BdICE9PSB2YWx1ZXNbMF1bcF0pIHtcblx0XHRcdFx0XHRcdFx0XHRwcmVwZW5kID0gZmlyc3Q7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRoaXMuX2JlemllcnMgPSAodmFycy50eXBlICE9PSBcImN1YmljXCIgJiYgdmFycy50eXBlICE9PSBcInF1YWRyYXRpY1wiICYmIHZhcnMudHlwZSAhPT0gXCJzb2Z0XCIpID8gYmV6aWVyVGhyb3VnaCh2YWx1ZXMsIGlzTmFOKHZhcnMuY3VydmluZXNzKSA/IDEgOiB2YXJzLmN1cnZpbmVzcywgZmFsc2UsICh2YXJzLnR5cGUgPT09IFwidGhydUJhc2ljXCIpLCB2YXJzLmNvcnJlbGF0ZSwgcHJlcGVuZCkgOiBfcGFyc2VCZXppZXJEYXRhKHZhbHVlcywgdmFycy50eXBlLCBmaXJzdCk7XG5cdFx0XHRcdFx0XHR0aGlzLl9zZWdDb3VudCA9IHRoaXMuX2JlemllcnNbcF0ubGVuZ3RoO1xuXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5fdGltZVJlcykge1xuXHRcdFx0XHRcdFx0XHR2YXIgbGQgPSBfcGFyc2VMZW5ndGhEYXRhKHRoaXMuX2JlemllcnMsIHRoaXMuX3RpbWVSZXMpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9sZW5ndGggPSBsZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2xlbmd0aHMgPSBsZC5sZW5ndGhzO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9zZWdtZW50cyA9IGxkLnNlZ21lbnRzO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9sMSA9IHRoaXMuX2xpID0gdGhpcy5fczEgPSB0aGlzLl9zaSA9IDA7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2wyID0gdGhpcy5fbGVuZ3Roc1swXTtcblx0XHRcdFx0XHRcdFx0dGhpcy5fY3VyU2VnID0gdGhpcy5fc2VnbWVudHNbMF07XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3MyID0gdGhpcy5fY3VyU2VnWzBdO1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9wcmVjID0gMSAvIHRoaXMuX2N1clNlZy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICgoYXV0b1JvdGF0ZSA9IHRoaXMuX2F1dG9Sb3RhdGUpKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2luaXRpYWxSb3RhdGlvbnMgPSBbXTtcblx0XHRcdFx0XHRcdFx0aWYgKCEoYXV0b1JvdGF0ZVswXSBpbnN0YW5jZW9mIEFycmF5KSkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2F1dG9Sb3RhdGUgPSBhdXRvUm90YXRlID0gW2F1dG9Sb3RhdGVdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGkgPSBhdXRvUm90YXRlLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IDM7IGorKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0cCA9IGF1dG9Sb3RhdGVbaV1bal07XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLl9mdW5jW3BdID0gKHR5cGVvZih0YXJnZXRbcF0pID09PSBcImZ1bmN0aW9uXCIpID8gdGFyZ2V0WyAoKHAuaW5kZXhPZihcInNldFwiKSB8fCB0eXBlb2YodGFyZ2V0W1wiZ2V0XCIgKyBwLnN1YnN0cigzKV0pICE9PSBcImZ1bmN0aW9uXCIpID8gcCA6IFwiZ2V0XCIgKyBwLnN1YnN0cigzKSkgXSA6IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRwID0gYXV0b1JvdGF0ZVtpXVsyXTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9pbml0aWFsUm90YXRpb25zW2ldID0gKHRoaXMuX2Z1bmNbcF0gPyB0aGlzLl9mdW5jW3BdLmNhbGwodGhpcy5fdGFyZ2V0KSA6IHRoaXMuX3RhcmdldFtwXSkgfHwgMDtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcy5wdXNoKHApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl9zdGFydFJhdGlvID0gdHdlZW4udmFycy5ydW5CYWNrd2FyZHMgPyAxIDogMDsgLy93ZSBkZXRlcm1pbmUgdGhlIHN0YXJ0aW5nIHJhdGlvIHdoZW4gdGhlIHR3ZWVuIGluaXRzIHdoaWNoIGlzIGFsd2F5cyAwIHVubGVzcyB0aGUgdHdlZW4gaGFzIHJ1bkJhY2t3YXJkczp0cnVlIChpbmRpY2F0aW5nIGl0J3MgYSBmcm9tKCkgdHdlZW4pIGluIHdoaWNoIGNhc2UgaXQncyAxLlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vY2FsbGVkIGVhY2ggdGltZSB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkLCBhbmQgdGhlIHJhdGlvIGdldHMgcGFzc2VkIGFzIHRoZSBvbmx5IHBhcmFtZXRlciAodHlwaWNhbGx5IGl0J3MgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIGJ1dCBpdCBjYW4gZXhjZWVkIHRob3NlIHdoZW4gdXNpbmcgYW4gZWFzZSBsaWtlIEVsYXN0aWMuZWFzZU91dCBvciBCYWNrLmVhc2VPdXQsIGV0Yy4pXG5cdFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdFx0XHR2YXIgc2VnbWVudHMgPSB0aGlzLl9zZWdDb3VudCxcblx0XHRcdFx0XHRcdFx0ZnVuYyA9IHRoaXMuX2Z1bmMsXG5cdFx0XHRcdFx0XHRcdHRhcmdldCA9IHRoaXMuX3RhcmdldCxcblx0XHRcdFx0XHRcdFx0bm90U3RhcnQgPSAodiAhPT0gdGhpcy5fc3RhcnRSYXRpbyksXG5cdFx0XHRcdFx0XHRcdGN1ckluZGV4LCBpbnYsIGksIHAsIGIsIHQsIHZhbCwgbCwgbGVuZ3RocywgY3VyU2VnO1xuXHRcdFx0XHRcdFx0aWYgKCF0aGlzLl90aW1lUmVzKSB7XG5cdFx0XHRcdFx0XHRcdGN1ckluZGV4ID0gKHYgPCAwKSA/IDAgOiAodiA+PSAxKSA/IHNlZ21lbnRzIC0gMSA6IChzZWdtZW50cyAqIHYpID4+IDA7XG5cdFx0XHRcdFx0XHRcdHQgPSAodiAtIChjdXJJbmRleCAqICgxIC8gc2VnbWVudHMpKSkgKiBzZWdtZW50cztcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGxlbmd0aHMgPSB0aGlzLl9sZW5ndGhzO1xuXHRcdFx0XHRcdFx0XHRjdXJTZWcgPSB0aGlzLl9jdXJTZWc7XG5cdFx0XHRcdFx0XHRcdHYgKj0gdGhpcy5fbGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRpID0gdGhpcy5fbGk7XG5cdFx0XHRcdFx0XHRcdC8vZmluZCB0aGUgYXBwcm9wcmlhdGUgc2VnbWVudCAoaWYgdGhlIGN1cnJlbnRseSBjYWNoZWQgb25lIGlzbid0IGNvcnJlY3QpXG5cdFx0XHRcdFx0XHRcdGlmICh2ID4gdGhpcy5fbDIgJiYgaSA8IHNlZ21lbnRzIC0gMSkge1xuXHRcdFx0XHRcdFx0XHRcdGwgPSBzZWdtZW50cyAtIDE7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKGkgPCBsICYmICh0aGlzLl9sMiA9IGxlbmd0aHNbKytpXSkgPD0gdikge1x0fVxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2wxID0gbGVuZ3Roc1tpLTFdO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2xpID0gaTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jdXJTZWcgPSBjdXJTZWcgPSB0aGlzLl9zZWdtZW50c1tpXTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zMiA9IGN1clNlZ1sodGhpcy5fczEgPSB0aGlzLl9zaSA9IDApXTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2IDwgdGhpcy5fbDEgJiYgaSA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoaSA+IDAgJiYgKHRoaXMuX2wxID0gbGVuZ3Roc1stLWldKSA+PSB2KSB7IH1cblx0XHRcdFx0XHRcdFx0XHRpZiAoaSA9PT0gMCAmJiB2IDwgdGhpcy5fbDEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX2wxID0gMDtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9sMiA9IGxlbmd0aHNbaV07XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fbGkgPSBpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2N1clNlZyA9IGN1clNlZyA9IHRoaXMuX3NlZ21lbnRzW2ldO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3MxID0gY3VyU2VnWyh0aGlzLl9zaSA9IGN1clNlZy5sZW5ndGggLSAxKSAtIDFdIHx8IDA7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fczIgPSBjdXJTZWdbdGhpcy5fc2ldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGN1ckluZGV4ID0gaTtcblx0XHRcdFx0XHRcdFx0Ly9ub3cgZmluZCB0aGUgYXBwcm9wcmlhdGUgc3ViLXNlZ21lbnQgKHdlIHNwbGl0IGl0IGludG8gdGhlIG51bWJlciBvZiBwaWVjZXMgdGhhdCB3YXMgZGVmaW5lZCBieSBcInByZWNpc2lvblwiIGFuZCBtZWFzdXJlZCBlYWNoIG9uZSlcblx0XHRcdFx0XHRcdFx0diAtPSB0aGlzLl9sMTtcblx0XHRcdFx0XHRcdFx0aSA9IHRoaXMuX3NpO1xuXHRcdFx0XHRcdFx0XHRpZiAodiA+IHRoaXMuX3MyICYmIGkgPCBjdXJTZWcubGVuZ3RoIC0gMSkge1xuXHRcdFx0XHRcdFx0XHRcdGwgPSBjdXJTZWcubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoaSA8IGwgJiYgKHRoaXMuX3MyID0gY3VyU2VnWysraV0pIDw9IHYpIHtcdH1cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zMSA9IGN1clNlZ1tpLTFdO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3NpID0gaTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2IDwgdGhpcy5fczEgJiYgaSA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoaSA+IDAgJiYgKHRoaXMuX3MxID0gY3VyU2VnWy0taV0pID49IHYpIHtcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAoaSA9PT0gMCAmJiB2IDwgdGhpcy5fczEpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX3MxID0gMDtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aSsrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zMiA9IGN1clNlZ1tpXTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9zaSA9IGk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dCA9ICgoaSArICh2IC0gdGhpcy5fczEpIC8gKHRoaXMuX3MyIC0gdGhpcy5fczEpKSAqIHRoaXMuX3ByZWMpIHx8IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpbnYgPSAxIC0gdDtcblxuXHRcdFx0XHRcdFx0aSA9IHRoaXMuX3Byb3BzLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRwID0gdGhpcy5fcHJvcHNbaV07XG5cdFx0XHRcdFx0XHRcdGIgPSB0aGlzLl9iZXppZXJzW3BdW2N1ckluZGV4XTtcblx0XHRcdFx0XHRcdFx0dmFsID0gKHQgKiB0ICogYi5kYSArIDMgKiBpbnYgKiAodCAqIGIuY2EgKyBpbnYgKiBiLmJhKSkgKiB0ICsgYi5hO1xuXHRcdFx0XHRcdFx0XHRpZiAodGhpcy5fbW9kW3BdKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFsID0gdGhpcy5fbW9kW3BdKHZhbCwgdGFyZ2V0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoZnVuY1twXSkge1xuXHRcdFx0XHRcdFx0XHRcdHRhcmdldFtwXSh2YWwpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRhcmdldFtwXSA9IHZhbDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5fYXV0b1JvdGF0ZSkge1xuXHRcdFx0XHRcdFx0XHR2YXIgYXIgPSB0aGlzLl9hdXRvUm90YXRlLFxuXHRcdFx0XHRcdFx0XHRcdGIyLCB4MSwgeTEsIHgyLCB5MiwgYWRkLCBjb252O1xuXHRcdFx0XHRcdFx0XHRpID0gYXIubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0XHRwID0gYXJbaV1bMl07XG5cdFx0XHRcdFx0XHRcdFx0YWRkID0gYXJbaV1bM10gfHwgMDtcblx0XHRcdFx0XHRcdFx0XHRjb252ID0gKGFyW2ldWzRdID09PSB0cnVlKSA/IDEgOiBfUkFEMkRFRztcblx0XHRcdFx0XHRcdFx0XHRiID0gdGhpcy5fYmV6aWVyc1thcltpXVswXV07XG5cdFx0XHRcdFx0XHRcdFx0YjIgPSB0aGlzLl9iZXppZXJzW2FyW2ldWzFdXTtcblxuXHRcdFx0XHRcdFx0XHRcdGlmIChiICYmIGIyKSB7IC8vaW4gY2FzZSBvbmUgb2YgdGhlIHByb3BlcnRpZXMgZ290IG92ZXJ3cml0dGVuLlxuXHRcdFx0XHRcdFx0XHRcdFx0YiA9IGJbY3VySW5kZXhdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YjIgPSBiMltjdXJJbmRleF07XG5cblx0XHRcdFx0XHRcdFx0XHRcdHgxID0gYi5hICsgKGIuYiAtIGIuYSkgKiB0O1xuXHRcdFx0XHRcdFx0XHRcdFx0eDIgPSBiLmIgKyAoYi5jIC0gYi5iKSAqIHQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR4MSArPSAoeDIgLSB4MSkgKiB0O1xuXHRcdFx0XHRcdFx0XHRcdFx0eDIgKz0gKChiLmMgKyAoYi5kIC0gYi5jKSAqIHQpIC0geDIpICogdDtcblxuXHRcdFx0XHRcdFx0XHRcdFx0eTEgPSBiMi5hICsgKGIyLmIgLSBiMi5hKSAqIHQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR5MiA9IGIyLmIgKyAoYjIuYyAtIGIyLmIpICogdDtcblx0XHRcdFx0XHRcdFx0XHRcdHkxICs9ICh5MiAtIHkxKSAqIHQ7XG5cdFx0XHRcdFx0XHRcdFx0XHR5MiArPSAoKGIyLmMgKyAoYjIuZCAtIGIyLmMpICogdCkgLSB5MikgKiB0O1xuXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWwgPSBub3RTdGFydCA/IE1hdGguYXRhbjIoeTIgLSB5MSwgeDIgLSB4MSkgKiBjb252ICsgYWRkIDogdGhpcy5faW5pdGlhbFJvdGF0aW9uc1tpXTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHRoaXMuX21vZFtwXSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR2YWwgPSB0aGlzLl9tb2RbcF0odmFsLCB0YXJnZXQpOyAvL2ZvciBtb2RQcm9wc1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZnVuY1twXSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0YXJnZXRbcF0odmFsKTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRhcmdldFtwXSA9IHZhbDtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHR9KSxcblx0XHRcdHAgPSBCZXppZXJQbHVnaW4ucHJvdG90eXBlO1xuXG5cblx0XHRCZXppZXJQbHVnaW4uYmV6aWVyVGhyb3VnaCA9IGJlemllclRocm91Z2g7XG5cdFx0QmV6aWVyUGx1Z2luLmN1YmljVG9RdWFkcmF0aWMgPSBjdWJpY1RvUXVhZHJhdGljO1xuXHRcdEJlemllclBsdWdpbi5fYXV0b0NTUyA9IHRydWU7IC8vaW5kaWNhdGVzIHRoYXQgdGhpcyBwbHVnaW4gY2FuIGJlIGluc2VydGVkIGludG8gdGhlIFwiY3NzXCIgb2JqZWN0IHVzaW5nIHRoZSBhdXRvQ1NTIGZlYXR1cmUgb2YgVHdlZW5MaXRlXG5cdFx0QmV6aWVyUGx1Z2luLnF1YWRyYXRpY1RvQ3ViaWMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFNlZ21lbnQoYSwgKDIgKiBiICsgYSkgLyAzLCAoMiAqIGIgKyBjKSAvIDMsIGMpO1xuXHRcdH07XG5cblx0XHRCZXppZXJQbHVnaW4uX2Nzc1JlZ2lzdGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgQ1NTUGx1Z2luID0gX2dsb2JhbHMuQ1NTUGx1Z2luO1xuXHRcdFx0aWYgKCFDU1NQbHVnaW4pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0dmFyIF9pbnRlcm5hbHMgPSBDU1NQbHVnaW4uX2ludGVybmFscyxcblx0XHRcdFx0X3BhcnNlVG9Qcm94eSA9IF9pbnRlcm5hbHMuX3BhcnNlVG9Qcm94eSxcblx0XHRcdFx0X3NldFBsdWdpblJhdGlvID0gX2ludGVybmFscy5fc2V0UGx1Z2luUmF0aW8sXG5cdFx0XHRcdENTU1Byb3BUd2VlbiA9IF9pbnRlcm5hbHMuQ1NTUHJvcFR3ZWVuO1xuXHRcdFx0X2ludGVybmFscy5fcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJiZXppZXJcIiwge3BhcnNlcjpmdW5jdGlvbih0LCBlLCBwcm9wLCBjc3NwLCBwdCwgcGx1Z2luKSB7XG5cdFx0XHRcdGlmIChlIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0XHRlID0ge3ZhbHVlczplfTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwbHVnaW4gPSBuZXcgQmV6aWVyUGx1Z2luKCk7XG5cdFx0XHRcdHZhciB2YWx1ZXMgPSBlLnZhbHVlcyxcblx0XHRcdFx0XHRsID0gdmFsdWVzLmxlbmd0aCAtIDEsXG5cdFx0XHRcdFx0cGx1Z2luVmFsdWVzID0gW10sXG5cdFx0XHRcdFx0diA9IHt9LFxuXHRcdFx0XHRcdGksIHAsIGRhdGE7XG5cdFx0XHRcdGlmIChsIDwgMCkge1xuXHRcdFx0XHRcdHJldHVybiBwdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDw9IGw7IGkrKykge1xuXHRcdFx0XHRcdGRhdGEgPSBfcGFyc2VUb1Byb3h5KHQsIHZhbHVlc1tpXSwgY3NzcCwgcHQsIHBsdWdpbiwgKGwgIT09IGkpKTtcblx0XHRcdFx0XHRwbHVnaW5WYWx1ZXNbaV0gPSBkYXRhLmVuZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKHAgaW4gZSkge1xuXHRcdFx0XHRcdHZbcF0gPSBlW3BdOyAvL2R1cGxpY2F0ZSB0aGUgdmFycyBvYmplY3QgYmVjYXVzZSB3ZSBuZWVkIHRvIGFsdGVyIHNvbWUgdGhpbmdzIHdoaWNoIHdvdWxkIGNhdXNlIHByb2JsZW1zIGlmIHRoZSB1c2VyIHBsYW5zIHRvIHJldXNlIHRoZSBzYW1lIHZhcnMgb2JqZWN0IGZvciBhbm90aGVyIHR3ZWVuLlxuXHRcdFx0XHR9XG5cdFx0XHRcdHYudmFsdWVzID0gcGx1Z2luVmFsdWVzO1xuXHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4odCwgXCJiZXppZXJcIiwgMCwgMCwgZGF0YS5wdCwgMik7XG5cdFx0XHRcdHB0LmRhdGEgPSBkYXRhO1xuXHRcdFx0XHRwdC5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdHB0LnNldFJhdGlvID0gX3NldFBsdWdpblJhdGlvO1xuXHRcdFx0XHRpZiAodi5hdXRvUm90YXRlID09PSAwKSB7XG5cdFx0XHRcdFx0di5hdXRvUm90YXRlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodi5hdXRvUm90YXRlICYmICEodi5hdXRvUm90YXRlIGluc3RhbmNlb2YgQXJyYXkpKSB7XG5cdFx0XHRcdFx0aSA9ICh2LmF1dG9Sb3RhdGUgPT09IHRydWUpID8gMCA6IE51bWJlcih2LmF1dG9Sb3RhdGUpO1xuXHRcdFx0XHRcdHYuYXV0b1JvdGF0ZSA9IChkYXRhLmVuZC5sZWZ0ICE9IG51bGwpID8gW1tcImxlZnRcIixcInRvcFwiLFwicm90YXRpb25cIixpLGZhbHNlXV0gOiAoZGF0YS5lbmQueCAhPSBudWxsKSA/IFtbXCJ4XCIsXCJ5XCIsXCJyb3RhdGlvblwiLGksZmFsc2VdXSA6IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2LmF1dG9Sb3RhdGUpIHtcblx0XHRcdFx0XHRpZiAoIWNzc3AuX3RyYW5zZm9ybSkge1xuXHRcdFx0XHRcdFx0Y3NzcC5fZW5hYmxlVHJhbnNmb3JtcyhmYWxzZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGEuYXV0b1JvdGF0ZSA9IGNzc3AuX3RhcmdldC5fZ3NUcmFuc2Zvcm07XG5cdFx0XHRcdFx0ZGF0YS5wcm94eS5yb3RhdGlvbiA9IGRhdGEuYXV0b1JvdGF0ZS5yb3RhdGlvbiB8fCAwO1xuXHRcdFx0XHRcdGNzc3AuX292ZXJ3cml0ZVByb3BzLnB1c2goXCJyb3RhdGlvblwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwbHVnaW4uX29uSW5pdFR3ZWVuKGRhdGEucHJveHksIHYsIGNzc3AuX3R3ZWVuKTtcblx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0fX0pO1xuXHRcdH07XG5cblx0XHRwLl9tb2QgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBvcCA9IHRoaXMuX292ZXJ3cml0ZVByb3BzLFxuXHRcdFx0XHRpID0gb3AubGVuZ3RoLFxuXHRcdFx0XHR2YWw7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0dmFsID0gbG9va3VwW29wW2ldXTtcblx0XHRcdFx0aWYgKHZhbCAmJiB0eXBlb2YodmFsKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0dGhpcy5fbW9kW29wW2ldXSA9IHZhbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLl9raWxsID0gZnVuY3Rpb24obG9va3VwKSB7XG5cdFx0XHR2YXIgYSA9IHRoaXMuX3Byb3BzLFxuXHRcdFx0XHRwLCBpO1xuXHRcdFx0Zm9yIChwIGluIHRoaXMuX2JlemllcnMpIHtcblx0XHRcdFx0aWYgKHAgaW4gbG9va3VwKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2JlemllcnNbcF07XG5cdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2Z1bmNbcF07XG5cdFx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0aWYgKGFbaV0gPT09IHApIHtcblx0XHRcdFx0XHRcdFx0YS5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRhID0gdGhpcy5fYXV0b1JvdGF0ZTtcblx0XHRcdGlmIChhKSB7XG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYgKGxvb2t1cFthW2ldWzJdXSkge1xuXHRcdFx0XHRcdFx0YS5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fc3VwZXIuX2tpbGwuY2FsbCh0aGlzLCBsb29rdXApO1xuXHRcdH07XG5cblx0fSgpKTtcblxuXG5cblxuXG5cblx0XG5cdFxuXHRcblx0XG5cdFxuXHRcblx0XG5cdFxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENTU1BsdWdpblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdF9nc1Njb3BlLl9nc0RlZmluZShcInBsdWdpbnMuQ1NTUGx1Z2luXCIsIFtcInBsdWdpbnMuVHdlZW5QbHVnaW5cIixcIlR3ZWVuTGl0ZVwiXSwgZnVuY3Rpb24oVHdlZW5QbHVnaW4sIFR3ZWVuTGl0ZSkge1xuXG5cdFx0LyoqIEBjb25zdHJ1Y3RvciAqKi9cblx0XHR2YXIgQ1NTUGx1Z2luID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFR3ZWVuUGx1Z2luLmNhbGwodGhpcywgXCJjc3NcIik7XG5cdFx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzLmxlbmd0aCA9IDA7XG5cdFx0XHRcdHRoaXMuc2V0UmF0aW8gPSBDU1NQbHVnaW4ucHJvdG90eXBlLnNldFJhdGlvOyAvL3NwZWVkIG9wdGltaXphdGlvbiAoYXZvaWQgcHJvdG90eXBlIGxvb2t1cCBvbiB0aGlzIFwiaG90XCIgbWV0aG9kKVxuXHRcdFx0fSxcblx0XHRcdF9nbG9iYWxzID0gX2dzU2NvcGUuX2dzRGVmaW5lLmdsb2JhbHMsXG5cdFx0XHRfaGFzUHJpb3JpdHksIC8vdHVybnMgdHJ1ZSB3aGVuZXZlciBhIENTU1Byb3BUd2VlbiBpbnN0YW5jZSBpcyBjcmVhdGVkIHRoYXQgaGFzIGEgcHJpb3JpdHkgb3RoZXIgdGhhbiAwLiBUaGlzIGhlbHBzIHVzIGRpc2Nlcm4gd2hldGhlciBvciBub3Qgd2Ugc2hvdWxkIHNwZW5kIHRoZSB0aW1lIG9yZ2FuaXppbmcgdGhlIGxpbmtlZCBsaXN0IG9yIG5vdCBhZnRlciBhIENTU1BsdWdpbidzIF9vbkluaXRUd2VlbigpIG1ldGhvZCBpcyBjYWxsZWQuXG5cdFx0XHRfc3VmZml4TWFwLCAvL3dlIHNldCB0aGlzIGluIF9vbkluaXRUd2VlbigpIGVhY2ggdGltZSBhcyBhIHdheSB0byBoYXZlIGEgcGVyc2lzdGVudCB2YXJpYWJsZSB3ZSBjYW4gdXNlIGluIG90aGVyIG1ldGhvZHMgbGlrZSBfcGFyc2UoKSB3aXRob3V0IGhhdmluZyB0byBwYXNzIGl0IGFyb3VuZCBhcyBhIHBhcmFtZXRlciBhbmQgd2Uga2VlcCBfcGFyc2UoKSBkZWNvdXBsZWQgZnJvbSBhIHBhcnRpY3VsYXIgQ1NTUGx1Z2luIGluc3RhbmNlXG5cdFx0XHRfY3MsIC8vY29tcHV0ZWQgc3R5bGUgKHdlIHN0b3JlIHRoaXMgaW4gYSBzaGFyZWQgdmFyaWFibGUgdG8gY29uc2VydmUgbWVtb3J5IGFuZCBtYWtlIG1pbmlmaWNhdGlvbiB0aWdodGVyXG5cdFx0XHRfb3ZlcndyaXRlUHJvcHMsIC8vYWxpYXMgdG8gdGhlIGN1cnJlbnRseSBpbnN0YW50aWF0aW5nIENTU1BsdWdpbidzIF9vdmVyd3JpdGVQcm9wcyBhcnJheS4gV2UgdXNlIHRoaXMgY2xvc3VyZSBpbiBvcmRlciB0byBhdm9pZCBoYXZpbmcgdG8gcGFzcyBhIHJlZmVyZW5jZSBhcm91bmQgZnJvbSBtZXRob2QgdG8gbWV0aG9kIGFuZCBhaWQgaW4gbWluaWZpY2F0aW9uLlxuXHRcdFx0X3NwZWNpYWxQcm9wcyA9IHt9LFxuXHRcdFx0cCA9IENTU1BsdWdpbi5wcm90b3R5cGUgPSBuZXcgVHdlZW5QbHVnaW4oXCJjc3NcIik7XG5cblx0XHRwLmNvbnN0cnVjdG9yID0gQ1NTUGx1Z2luO1xuXHRcdENTU1BsdWdpbi52ZXJzaW9uID0gXCIxLjE5LjBcIjtcblx0XHRDU1NQbHVnaW4uQVBJID0gMjtcblx0XHRDU1NQbHVnaW4uZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlID0gMDtcblx0XHRDU1NQbHVnaW4uZGVmYXVsdFNrZXdUeXBlID0gXCJjb21wZW5zYXRlZFwiO1xuXHRcdENTU1BsdWdpbi5kZWZhdWx0U21vb3RoT3JpZ2luID0gdHJ1ZTtcblx0XHRwID0gXCJweFwiOyAvL3dlJ2xsIHJldXNlIHRoZSBcInBcIiB2YXJpYWJsZSB0byBrZWVwIGZpbGUgc2l6ZSBkb3duXG5cdFx0Q1NTUGx1Z2luLnN1ZmZpeE1hcCA9IHt0b3A6cCwgcmlnaHQ6cCwgYm90dG9tOnAsIGxlZnQ6cCwgd2lkdGg6cCwgaGVpZ2h0OnAsIGZvbnRTaXplOnAsIHBhZGRpbmc6cCwgbWFyZ2luOnAsIHBlcnNwZWN0aXZlOnAsIGxpbmVIZWlnaHQ6XCJcIn07XG5cblxuXHRcdHZhciBfbnVtRXhwID0gLyg/OlxcLXxcXC58XFxiKShcXGR8XFwufGVcXC0pKy9nLFxuXHRcdFx0X3JlbE51bUV4cCA9IC8oPzpcXGR8XFwtXFxkfFxcLlxcZHxcXC1cXC5cXGR8XFwrPVxcZHxcXC09XFxkfFxcKz0uXFxkfFxcLT1cXC5cXGQpKy9nLFxuXHRcdFx0X3ZhbHVlc0V4cCA9IC8oPzpcXCs9fFxcLT18XFwtfFxcYilbXFxkXFwtXFwuXStbYS16QS1aMC05XSooPzolfFxcYikvZ2ksIC8vZmluZHMgYWxsIHRoZSB2YWx1ZXMgdGhhdCBiZWdpbiB3aXRoIG51bWJlcnMgb3IgKz0gb3IgLT0gYW5kIHRoZW4gYSBudW1iZXIuIEluY2x1ZGVzIHN1ZmZpeGVzLiBXZSB1c2UgdGhpcyB0byBzcGxpdCBjb21wbGV4IHZhbHVlcyBhcGFydCBsaWtlIFwiMXB4IDVweCAyMHB4IHJnYigyNTUsMTAyLDUxKVwiXG5cdFx0XHRfTmFORXhwID0gLyg/IVsrLV0/XFxkKlxcLj9cXGQrfFsrLV18ZVsrLV1cXGQrKVteMC05XS9nLCAvL2Fsc28gYWxsb3dzIHNjaWVudGlmaWMgbm90YXRpb24gYW5kIGRvZXNuJ3Qga2lsbCB0aGUgbGVhZGluZyAtLysgaW4gLT0gYW5kICs9XG5cdFx0XHRfc3VmZml4RXhwID0gLyg/OlxcZHxcXC18XFwrfD18I3xcXC4pKi9nLFxuXHRcdFx0X29wYWNpdHlFeHAgPSAvb3BhY2l0eSAqPSAqKFteKV0qKS9pLFxuXHRcdFx0X29wYWNpdHlWYWxFeHAgPSAvb3BhY2l0eTooW147XSopL2ksXG5cdFx0XHRfYWxwaGFGaWx0ZXJFeHAgPSAvYWxwaGFcXChvcGFjaXR5ICo9Lis/XFwpL2ksXG5cdFx0XHRfcmdiaHNsRXhwID0gL14ocmdifGhzbCkvLFxuXHRcdFx0X2NhcHNFeHAgPSAvKFtBLVpdKS9nLFxuXHRcdFx0X2NhbWVsRXhwID0gLy0oW2Etel0pL2dpLFxuXHRcdFx0X3VybEV4cCA9IC8oXig/OnVybFxcKFxcXCJ8dXJsXFwoKSl8KD86KFxcXCJcXCkpJHxcXCkkKS9naSwgLy9mb3IgcHVsbGluZyBvdXQgdXJscyBmcm9tIHVybCguLi4pIG9yIHVybChcIi4uLlwiKSBzdHJpbmdzIChzb21lIGJyb3dzZXJzIHdyYXAgdXJscyBpbiBxdW90ZXMsIHNvbWUgZG9uJ3Qgd2hlbiByZXBvcnRpbmcgdGhpbmdzIGxpa2UgYmFja2dyb3VuZEltYWdlKVxuXHRcdFx0X2NhbWVsRnVuYyA9IGZ1bmN0aW9uKHMsIGcpIHsgcmV0dXJuIGcudG9VcHBlckNhc2UoKTsgfSxcblx0XHRcdF9ob3JpekV4cCA9IC8oPzpMZWZ0fFJpZ2h0fFdpZHRoKS9pLFxuXHRcdFx0X2llR2V0TWF0cml4RXhwID0gLyhNMTF8TTEyfE0yMXxNMjIpPVtcXGRcXC1cXC5lXSsvZ2ksXG5cdFx0XHRfaWVTZXRNYXRyaXhFeHAgPSAvcHJvZ2lkXFw6RFhJbWFnZVRyYW5zZm9ybVxcLk1pY3Jvc29mdFxcLk1hdHJpeFxcKC4rP1xcKS9pLFxuXHRcdFx0X2NvbW1hc091dHNpZGVQYXJlbkV4cCA9IC8sKD89W15cXCldKig/OlxcKHwkKSkvZ2ksIC8vZmluZHMgYW55IGNvbW1hcyB0aGF0IGFyZSBub3Qgd2l0aGluIHBhcmVudGhlc2lzXG5cdFx0XHRfY29tcGxleEV4cCA9IC9bXFxzLFxcKF0vaSwgLy9mb3IgdGVzdGluZyBhIHN0cmluZyB0byBmaW5kIGlmIGl0IGhhcyBhIHNwYWNlLCBjb21tYSwgb3Igb3BlbiBwYXJlbnRoZXNpcyAoY2x1ZXMgdGhhdCBpdCdzIGEgY29tcGxleCB2YWx1ZSlcblx0XHRcdF9ERUcyUkFEID0gTWF0aC5QSSAvIDE4MCxcblx0XHRcdF9SQUQyREVHID0gMTgwIC8gTWF0aC5QSSxcblx0XHRcdF9mb3JjZVBUID0ge30sXG5cdFx0XHRfZG9jID0gZG9jdW1lbnQsXG5cdFx0XHRfY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRcdFx0cmV0dXJuIF9kb2MuY3JlYXRlRWxlbWVudE5TID8gX2RvYy5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsIHR5cGUpIDogX2RvYy5jcmVhdGVFbGVtZW50KHR5cGUpO1xuXHRcdFx0fSxcblx0XHRcdF90ZW1wRGl2ID0gX2NyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdFx0XHRfdGVtcEltZyA9IF9jcmVhdGVFbGVtZW50KFwiaW1nXCIpLFxuXHRcdFx0X2ludGVybmFscyA9IENTU1BsdWdpbi5faW50ZXJuYWxzID0ge19zcGVjaWFsUHJvcHM6X3NwZWNpYWxQcm9wc30sIC8vcHJvdmlkZXMgYSBob29rIHRvIGEgZmV3IGludGVybmFsIG1ldGhvZHMgdGhhdCB3ZSBuZWVkIHRvIGFjY2VzcyBmcm9tIGluc2lkZSBvdGhlciBwbHVnaW5zXG5cdFx0XHRfYWdlbnQgPSBuYXZpZ2F0b3IudXNlckFnZW50LFxuXHRcdFx0X2F1dG9Sb3VuZCxcblx0XHRcdF9yZXFTYWZhcmlGaXgsIC8vd2Ugd29uJ3QgYXBwbHkgdGhlIFNhZmFyaSB0cmFuc2Zvcm0gZml4IHVudGlsIHdlIGFjdHVhbGx5IGNvbWUgYWNyb3NzIGEgdHdlZW4gdGhhdCBhZmZlY3RzIGEgdHJhbnNmb3JtIHByb3BlcnR5ICh0byBtYWludGFpbiBiZXN0IHBlcmZvcm1hbmNlKS5cblxuXHRcdFx0X2lzU2FmYXJpLFxuXHRcdFx0X2lzRmlyZWZveCwgLy9GaXJlZm94IGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyAzRCB0cmFuc2Zvcm1lZCBlbGVtZW50cyB0byByYW5kb21seSBkaXNhcHBlYXIgdW5sZXNzIGEgcmVwYWludCBpcyBmb3JjZWQgYWZ0ZXIgZWFjaCB1cGRhdGUgb24gZWFjaCBlbGVtZW50LlxuXHRcdFx0X2lzU2FmYXJpTFQ2LCAvL1NhZmFyaSAoYW5kIEFuZHJvaWQgNCB3aGljaCB1c2VzIGEgZmxhdm9yIG9mIFNhZmFyaSkgaGFzIGEgYnVnIHRoYXQgcHJldmVudHMgY2hhbmdlcyB0byBcInRvcFwiIGFuZCBcImxlZnRcIiBwcm9wZXJ0aWVzIGZyb20gcmVuZGVyaW5nIHByb3Blcmx5IGlmIGNoYW5nZWQgb24gdGhlIHNhbWUgZnJhbWUgYXMgYSB0cmFuc2Zvcm0gVU5MRVNTIHdlIHNldCB0aGUgZWxlbWVudCdzIFdlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSB0byBoaWRkZW4gKHdlaXJkLCBJIGtub3cpLiBEb2luZyB0aGlzIGZvciBBbmRyb2lkIDMgYW5kIGVhcmxpZXIgc2VlbXMgdG8gYWN0dWFsbHkgY2F1c2Ugb3RoZXIgcHJvYmxlbXMsIHRob3VnaCAoZnVuISlcblx0XHRcdF9pZVZlcnMsXG5cdFx0XHRfc3VwcG9ydHNPcGFjaXR5ID0gKGZ1bmN0aW9uKCkgeyAvL3dlIHNldCBfaXNTYWZhcmksIF9pZVZlcnMsIF9pc0ZpcmVmb3gsIGFuZCBfc3VwcG9ydHNPcGFjaXR5IGFsbCBpbiBvbmUgZnVuY3Rpb24gaGVyZSB0byByZWR1Y2UgZmlsZSBzaXplIHNsaWdodGx5LCBlc3BlY2lhbGx5IGluIHRoZSBtaW5pZmllZCB2ZXJzaW9uLlxuXHRcdFx0XHR2YXIgaSA9IF9hZ2VudC5pbmRleE9mKFwiQW5kcm9pZFwiKSxcblx0XHRcdFx0XHRhID0gX2NyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuXHRcdFx0XHRfaXNTYWZhcmkgPSAoX2FnZW50LmluZGV4T2YoXCJTYWZhcmlcIikgIT09IC0xICYmIF9hZ2VudC5pbmRleE9mKFwiQ2hyb21lXCIpID09PSAtMSAmJiAoaSA9PT0gLTEgfHwgTnVtYmVyKF9hZ2VudC5zdWJzdHIoaSs4LCAxKSkgPiAzKSk7XG5cdFx0XHRcdF9pc1NhZmFyaUxUNiA9IChfaXNTYWZhcmkgJiYgKE51bWJlcihfYWdlbnQuc3Vic3RyKF9hZ2VudC5pbmRleE9mKFwiVmVyc2lvbi9cIikrOCwgMSkpIDwgNikpO1xuXHRcdFx0XHRfaXNGaXJlZm94ID0gKF9hZ2VudC5pbmRleE9mKFwiRmlyZWZveFwiKSAhPT0gLTEpO1xuXHRcdFx0XHRpZiAoKC9NU0lFIChbMC05XXsxLH1bXFwuMC05XXswLH0pLykuZXhlYyhfYWdlbnQpIHx8ICgvVHJpZGVudFxcLy4qcnY6KFswLTldezEsfVtcXC4wLTldezAsfSkvKS5leGVjKF9hZ2VudCkpIHtcblx0XHRcdFx0XHRfaWVWZXJzID0gcGFyc2VGbG9hdCggUmVnRXhwLiQxICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFhKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGEuc3R5bGUuY3NzVGV4dCA9IFwidG9wOjFweDtvcGFjaXR5Oi41NTtcIjtcblx0XHRcdFx0cmV0dXJuIC9eMC41NS8udGVzdChhLnN0eWxlLm9wYWNpdHkpO1xuXHRcdFx0fSgpKSxcblx0XHRcdF9nZXRJRU9wYWNpdHkgPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHJldHVybiAoX29wYWNpdHlFeHAudGVzdCggKCh0eXBlb2YodikgPT09IFwic3RyaW5nXCIpID8gdiA6ICh2LmN1cnJlbnRTdHlsZSA/IHYuY3VycmVudFN0eWxlLmZpbHRlciA6IHYuc3R5bGUuZmlsdGVyKSB8fCBcIlwiKSApID8gKCBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKSAvIDEwMCApIDogMSk7XG5cdFx0XHR9LFxuXHRcdFx0X2xvZyA9IGZ1bmN0aW9uKHMpIHsvL2ZvciBsb2dnaW5nIG1lc3NhZ2VzLCBidXQgaW4gYSB3YXkgdGhhdCB3b24ndCB0aHJvdyBlcnJvcnMgaW4gb2xkIHZlcnNpb25zIG9mIElFLlxuXHRcdFx0XHRpZiAod2luZG93LmNvbnNvbGUpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF90YXJnZXQsIC8vd2hlbiBpbml0dGluZyBhIENTU1BsdWdpbiwgd2Ugc2V0IHRoaXMgdmFyaWFibGUgc28gdGhhdCB3ZSBjYW4gYWNjZXNzIGl0IGZyb20gd2l0aGluIG1hbnkgb3RoZXIgZnVuY3Rpb25zIHdpdGhvdXQgaGF2aW5nIHRvIHBhc3MgaXQgYXJvdW5kIGFzIHBhcmFtc1xuXHRcdFx0X2luZGV4LCAvL3doZW4gaW5pdHRpbmcgYSBDU1NQbHVnaW4sIHdlIHNldCB0aGlzIHZhcmlhYmxlIHNvIHRoYXQgd2UgY2FuIGFjY2VzcyBpdCBmcm9tIHdpdGhpbiBtYW55IG90aGVyIGZ1bmN0aW9ucyB3aXRob3V0IGhhdmluZyB0byBwYXNzIGl0IGFyb3VuZCBhcyBwYXJhbXNcblxuXHRcdFx0X3ByZWZpeENTUyA9IFwiXCIsIC8vdGhlIG5vbi1jYW1lbENhc2UgdmVuZG9yIHByZWZpeCBsaWtlIFwiLW8tXCIsIFwiLW1vei1cIiwgXCItbXMtXCIsIG9yIFwiLXdlYmtpdC1cIlxuXHRcdFx0X3ByZWZpeCA9IFwiXCIsIC8vY2FtZWxDYXNlIHZlbmRvciBwcmVmaXggbGlrZSBcIk9cIiwgXCJtc1wiLCBcIldlYmtpdFwiLCBvciBcIk1velwiLlxuXG5cdFx0XHQvLyBAcHJpdmF0ZSBmZWVkIGluIGEgY2FtZWxDYXNlIHByb3BlcnR5IG5hbWUgbGlrZSBcInRyYW5zZm9ybVwiIGFuZCBpdCB3aWxsIGNoZWNrIHRvIHNlZSBpZiBpdCBpcyB2YWxpZCBhcy1pcyBvciBpZiBpdCBuZWVkcyBhIHZlbmRvciBwcmVmaXguIEl0IHJldHVybnMgdGhlIGNvcnJlY3RlZCBjYW1lbENhc2UgcHJvcGVydHkgbmFtZSAoaS5lLiBcIldlYmtpdFRyYW5zZm9ybVwiIG9yIFwiTW96VHJhbnNmb3JtXCIgb3IgXCJ0cmFuc2Zvcm1cIiBvciBudWxsIGlmIG5vIHN1Y2ggcHJvcGVydHkgaXMgZm91bmQsIGxpa2UgaWYgdGhlIGJyb3dzZXIgaXMgSUU4IG9yIGJlZm9yZSwgXCJ0cmFuc2Zvcm1cIiB3b24ndCBiZSBmb3VuZCBhdCBhbGwpXG5cdFx0XHRfY2hlY2tQcm9wUHJlZml4ID0gZnVuY3Rpb24ocCwgZSkge1xuXHRcdFx0XHRlID0gZSB8fCBfdGVtcERpdjtcblx0XHRcdFx0dmFyIHMgPSBlLnN0eWxlLFxuXHRcdFx0XHRcdGEsIGk7XG5cdFx0XHRcdGlmIChzW3BdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwID0gcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHAuc3Vic3RyKDEpO1xuXHRcdFx0XHRhID0gW1wiT1wiLFwiTW96XCIsXCJtc1wiLFwiTXNcIixcIldlYmtpdFwiXTtcblx0XHRcdFx0aSA9IDU7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSAmJiBzW2FbaV0rcF0gPT09IHVuZGVmaW5lZCkgeyB9XG5cdFx0XHRcdGlmIChpID49IDApIHtcblx0XHRcdFx0XHRfcHJlZml4ID0gKGkgPT09IDMpID8gXCJtc1wiIDogYVtpXTtcblx0XHRcdFx0XHRfcHJlZml4Q1NTID0gXCItXCIgKyBfcHJlZml4LnRvTG93ZXJDYXNlKCkgKyBcIi1cIjtcblx0XHRcdFx0XHRyZXR1cm4gX3ByZWZpeCArIHA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9LFxuXG5cdFx0XHRfZ2V0Q29tcHV0ZWRTdHlsZSA9IF9kb2MuZGVmYXVsdFZpZXcgPyBfZG9jLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUgOiBmdW5jdGlvbigpIHt9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIFJldHVybnMgdGhlIGNzcyBzdHlsZSBmb3IgYSBwYXJ0aWN1bGFyIHByb3BlcnR5IG9mIGFuIGVsZW1lbnQuIEZvciBleGFtcGxlLCB0byBnZXQgd2hhdGV2ZXIgdGhlIGN1cnJlbnQgXCJsZWZ0XCIgY3NzIHZhbHVlIGZvciBhbiBlbGVtZW50IHdpdGggYW4gSUQgb2YgXCJteUVsZW1lbnRcIiwgeW91IGNvdWxkIGRvOlxuXHRcdFx0ICogdmFyIGN1cnJlbnRMZWZ0ID0gQ1NTUGx1Z2luLmdldFN0eWxlKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm15RWxlbWVudFwiKSwgXCJsZWZ0XCIpO1xuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCBUYXJnZXQgZWxlbWVudCB3aG9zZSBzdHlsZSBwcm9wZXJ0eSB5b3Ugd2FudCB0byBxdWVyeVxuXHRcdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IG5hbWUgKGxpa2UgXCJsZWZ0XCIgb3IgXCJ0b3BcIiBvciBcIm1hcmdpblRvcFwiLCBldGMuKVxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3Q9fSBjcyBDb21wdXRlZCBzdHlsZSBvYmplY3QuIFRoaXMganVzdCBwcm92aWRlcyBhIHdheSB0byBzcGVlZCBwcm9jZXNzaW5nIGlmIHlvdSdyZSBnb2luZyB0byBnZXQgc2V2ZXJhbCBwcm9wZXJ0aWVzIG9uIHRoZSBzYW1lIGVsZW1lbnQgaW4gcXVpY2sgc3VjY2Vzc2lvbiAtIHlvdSBjYW4gcmV1c2UgdGhlIHJlc3VsdCBvZiB0aGUgZ2V0Q29tcHV0ZWRTdHlsZSgpIGNhbGwuXG5cdFx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBjYWxjIElmIHRydWUsIHRoZSB2YWx1ZSB3aWxsIG5vdCBiZSByZWFkIGRpcmVjdGx5IGZyb20gdGhlIGVsZW1lbnQncyBcInN0eWxlXCIgcHJvcGVydHkgKGlmIGl0IGV4aXN0cyB0aGVyZSksIGJ1dCBpbnN0ZWFkIHRoZSBnZXRDb21wdXRlZFN0eWxlKCkgcmVzdWx0IHdpbGwgYmUgdXNlZC4gVGhpcyBjYW4gYmUgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gZW5zdXJlIHRoYXQgdGhlIGJyb3dzZXIgaXRzZWxmIGlzIGludGVycHJldGluZyB0aGUgdmFsdWUuXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZz19IGRmbHQgRGVmYXVsdCB2YWx1ZSB0aGF0IHNob3VsZCBiZSByZXR1cm5lZCBpbiB0aGUgcGxhY2Ugb2YgbnVsbCwgXCJub25lXCIsIFwiYXV0b1wiIG9yIFwiYXV0byBhdXRvXCIuXG5cdFx0XHQgKiBAcmV0dXJuIHs/c3RyaW5nfSBUaGUgY3VycmVudCBwcm9wZXJ0eSB2YWx1ZVxuXHRcdFx0ICovXG5cdFx0XHRfZ2V0U3R5bGUgPSBDU1NQbHVnaW4uZ2V0U3R5bGUgPSBmdW5jdGlvbih0LCBwLCBjcywgY2FsYywgZGZsdCkge1xuXHRcdFx0XHR2YXIgcnY7XG5cdFx0XHRcdGlmICghX3N1cHBvcnRzT3BhY2l0eSkgaWYgKHAgPT09IFwib3BhY2l0eVwiKSB7IC8vc2V2ZXJhbCB2ZXJzaW9ucyBvZiBJRSBkb24ndCB1c2UgdGhlIHN0YW5kYXJkIFwib3BhY2l0eVwiIHByb3BlcnR5IC0gdGhleSB1c2UgdGhpbmdzIGxpa2UgZmlsdGVyOmFscGhhKG9wYWNpdHk9NTApLCBzbyB3ZSBwYXJzZSB0aGF0IGhlcmUuXG5cdFx0XHRcdFx0cmV0dXJuIF9nZXRJRU9wYWNpdHkodCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFjYWxjICYmIHQuc3R5bGVbcF0pIHtcblx0XHRcdFx0XHRydiA9IHQuc3R5bGVbcF07XG5cdFx0XHRcdH0gZWxzZSBpZiAoKGNzID0gY3MgfHwgX2dldENvbXB1dGVkU3R5bGUodCkpKSB7XG5cdFx0XHRcdFx0cnYgPSBjc1twXSB8fCBjcy5nZXRQcm9wZXJ0eVZhbHVlKHApIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocC5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0LmN1cnJlbnRTdHlsZSkge1xuXHRcdFx0XHRcdHJ2ID0gdC5jdXJyZW50U3R5bGVbcF07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIChkZmx0ICE9IG51bGwgJiYgKCFydiB8fCBydiA9PT0gXCJub25lXCIgfHwgcnYgPT09IFwiYXV0b1wiIHx8IHJ2ID09PSBcImF1dG8gYXV0b1wiKSkgPyBkZmx0IDogcnY7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIFBhc3MgdGhlIHRhcmdldCBlbGVtZW50LCB0aGUgcHJvcGVydHkgbmFtZSwgdGhlIG51bWVyaWMgdmFsdWUsIGFuZCB0aGUgc3VmZml4IChsaWtlIFwiJVwiLCBcImVtXCIsIFwicHhcIiwgZXRjLikgYW5kIGl0IHdpbGwgc3BpdCBiYWNrIHRoZSBlcXVpdmFsZW50IHBpeGVsIG51bWJlci5cblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCBUYXJnZXQgZWxlbWVudFxuXHRcdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IG5hbWUgKGxpa2UgXCJsZWZ0XCIsIFwidG9wXCIsIFwibWFyZ2luTGVmdFwiLCBldGMuKVxuXHRcdFx0ICogQHBhcmFtIHshbnVtYmVyfSB2IFZhbHVlXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZz19IHNmeCBTdWZmaXggKGxpa2UgXCJweFwiIG9yIFwiJVwiIG9yIFwiZW1cIilcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlY3Vyc2UgSWYgdHJ1ZSwgdGhlIGNhbGwgaXMgYSByZWN1cnNpdmUgb25lLiBJbiBzb21lIGJyb3dzZXJzIChsaWtlIElFNy84KSwgb2NjYXNpb25hbGx5IHRoZSB2YWx1ZSBpc24ndCBhY2N1cmF0ZWx5IHJlcG9ydGVkIGluaXRpYWxseSwgYnV0IGlmIHdlIHJ1biB0aGUgZnVuY3Rpb24gYWdhaW4gaXQgd2lsbCB0YWtlIGVmZmVjdC5cblx0XHRcdCAqIEByZXR1cm4ge251bWJlcn0gdmFsdWUgaW4gcGl4ZWxzXG5cdFx0XHQgKi9cblx0XHRcdF9jb252ZXJ0VG9QaXhlbHMgPSBfaW50ZXJuYWxzLmNvbnZlcnRUb1BpeGVscyA9IGZ1bmN0aW9uKHQsIHAsIHYsIHNmeCwgcmVjdXJzZSkge1xuXHRcdFx0XHRpZiAoc2Z4ID09PSBcInB4XCIgfHwgIXNmeCkgeyByZXR1cm4gdjsgfVxuXHRcdFx0XHRpZiAoc2Z4ID09PSBcImF1dG9cIiB8fCAhdikgeyByZXR1cm4gMDsgfVxuXHRcdFx0XHR2YXIgaG9yaXogPSBfaG9yaXpFeHAudGVzdChwKSxcblx0XHRcdFx0XHRub2RlID0gdCxcblx0XHRcdFx0XHRzdHlsZSA9IF90ZW1wRGl2LnN0eWxlLFxuXHRcdFx0XHRcdG5lZyA9ICh2IDwgMCksXG5cdFx0XHRcdFx0cHJlY2lzZSA9ICh2ID09PSAxKSxcblx0XHRcdFx0XHRwaXgsIGNhY2hlLCB0aW1lO1xuXHRcdFx0XHRpZiAobmVnKSB7XG5cdFx0XHRcdFx0diA9IC12O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwcmVjaXNlKSB7XG5cdFx0XHRcdFx0diAqPSAxMDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHNmeCA9PT0gXCIlXCIgJiYgcC5pbmRleE9mKFwiYm9yZGVyXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdHBpeCA9ICh2IC8gMTAwKSAqIChob3JpeiA/IHQuY2xpZW50V2lkdGggOiB0LmNsaWVudEhlaWdodCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjAgc29saWQgcmVkO3Bvc2l0aW9uOlwiICsgX2dldFN0eWxlKHQsIFwicG9zaXRpb25cIikgKyBcIjtsaW5lLWhlaWdodDowO1wiO1xuXHRcdFx0XHRcdGlmIChzZnggPT09IFwiJVwiIHx8ICFub2RlLmFwcGVuZENoaWxkIHx8IHNmeC5jaGFyQXQoMCkgPT09IFwidlwiIHx8IHNmeCA9PT0gXCJyZW1cIikge1xuXHRcdFx0XHRcdFx0bm9kZSA9IHQucGFyZW50Tm9kZSB8fCBfZG9jLmJvZHk7XG5cdFx0XHRcdFx0XHRjYWNoZSA9IG5vZGUuX2dzQ2FjaGU7XG5cdFx0XHRcdFx0XHR0aW1lID0gVHdlZW5MaXRlLnRpY2tlci5mcmFtZTtcblx0XHRcdFx0XHRcdGlmIChjYWNoZSAmJiBob3JpeiAmJiBjYWNoZS50aW1lID09PSB0aW1lKSB7IC8vcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uOiB3ZSByZWNvcmQgdGhlIHdpZHRoIG9mIGVsZW1lbnRzIGFsb25nIHdpdGggdGhlIHRpY2tlciBmcmFtZSBzbyB0aGF0IHdlIGNhbiBxdWlja2x5IGdldCBpdCBhZ2FpbiBvbiB0aGUgc2FtZSB0aWNrIChzZWVtcyByZWxhdGl2ZWx5IHNhZmUgdG8gYXNzdW1lIGl0IHdvdWxkbid0IGNoYW5nZSBvbiB0aGUgc2FtZSB0aWNrKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gY2FjaGUud2lkdGggKiB2IC8gMTAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c3R5bGVbKGhvcml6ID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIildID0gdiArIHNmeDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3R5bGVbKGhvcml6ID8gXCJib3JkZXJMZWZ0V2lkdGhcIiA6IFwiYm9yZGVyVG9wV2lkdGhcIildID0gdiArIHNmeDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bm9kZS5hcHBlbmRDaGlsZChfdGVtcERpdik7XG5cdFx0XHRcdFx0cGl4ID0gcGFyc2VGbG9hdChfdGVtcERpdlsoaG9yaXogPyBcIm9mZnNldFdpZHRoXCIgOiBcIm9mZnNldEhlaWdodFwiKV0pO1xuXHRcdFx0XHRcdG5vZGUucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuXHRcdFx0XHRcdGlmIChob3JpeiAmJiBzZnggPT09IFwiJVwiICYmIENTU1BsdWdpbi5jYWNoZVdpZHRocyAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRcdGNhY2hlID0gbm9kZS5fZ3NDYWNoZSA9IG5vZGUuX2dzQ2FjaGUgfHwge307XG5cdFx0XHRcdFx0XHRjYWNoZS50aW1lID0gdGltZTtcblx0XHRcdFx0XHRcdGNhY2hlLndpZHRoID0gcGl4IC8gdiAqIDEwMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBpeCA9PT0gMCAmJiAhcmVjdXJzZSkge1xuXHRcdFx0XHRcdFx0cGl4ID0gX2NvbnZlcnRUb1BpeGVscyh0LCBwLCB2LCBzZngsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHJlY2lzZSkge1xuXHRcdFx0XHRcdHBpeCAvPSAxMDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG5lZyA/IC1waXggOiBwaXg7XG5cdFx0XHR9LFxuXHRcdFx0X2NhbGN1bGF0ZU9mZnNldCA9IF9pbnRlcm5hbHMuY2FsY3VsYXRlT2Zmc2V0ID0gZnVuY3Rpb24odCwgcCwgY3MpIHsgLy9mb3IgZmlndXJpbmcgb3V0IFwidG9wXCIgb3IgXCJsZWZ0XCIgaW4gcHggd2hlbiBpdCdzIFwiYXV0b1wiLiBXZSBuZWVkIHRvIGZhY3RvciBpbiBtYXJnaW4gd2l0aCB0aGUgb2Zmc2V0TGVmdC9vZmZzZXRUb3Bcblx0XHRcdFx0aWYgKF9nZXRTdHlsZSh0LCBcInBvc2l0aW9uXCIsIGNzKSAhPT0gXCJhYnNvbHV0ZVwiKSB7IHJldHVybiAwOyB9XG5cdFx0XHRcdHZhciBkaW0gPSAoKHAgPT09IFwibGVmdFwiKSA/IFwiTGVmdFwiIDogXCJUb3BcIiksXG5cdFx0XHRcdFx0diA9IF9nZXRTdHlsZSh0LCBcIm1hcmdpblwiICsgZGltLCBjcyk7XG5cdFx0XHRcdHJldHVybiB0W1wib2Zmc2V0XCIgKyBkaW1dIC0gKF9jb252ZXJ0VG9QaXhlbHModCwgcCwgcGFyc2VGbG9hdCh2KSwgdi5yZXBsYWNlKF9zdWZmaXhFeHAsIFwiXCIpKSB8fCAwKTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEBwcml2YXRlIHJldHVybnMgYXQgb2JqZWN0IGNvbnRhaW5pbmcgQUxMIG9mIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIGluIGNhbWVsQ2FzZSBhbmQgdGhlaXIgYXNzb2NpYXRlZCB2YWx1ZXMuXG5cdFx0XHRfZ2V0QWxsU3R5bGVzID0gZnVuY3Rpb24odCwgY3MpIHtcblx0XHRcdFx0dmFyIHMgPSB7fSxcblx0XHRcdFx0XHRpLCB0ciwgcDtcblx0XHRcdFx0aWYgKChjcyA9IGNzIHx8IF9nZXRDb21wdXRlZFN0eWxlKHQsIG51bGwpKSkge1xuXHRcdFx0XHRcdGlmICgoaSA9IGNzLmxlbmd0aCkpIHtcblx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRwID0gY3NbaV07XG5cdFx0XHRcdFx0XHRcdGlmIChwLmluZGV4T2YoXCItdHJhbnNmb3JtXCIpID09PSAtMSB8fCBfdHJhbnNmb3JtUHJvcENTUyA9PT0gcCkgeyAvL1NvbWUgd2Via2l0IGJyb3dzZXJzIGR1cGxpY2F0ZSB0cmFuc2Zvcm0gdmFsdWVzLCBvbmUgbm9uLXByZWZpeGVkIGFuZCBvbmUgcHJlZml4ZWQgKFwidHJhbnNmb3JtXCIgYW5kIFwiV2Via2l0VHJhbnNmb3JtXCIpLCBzbyB3ZSBtdXN0IHdlZWQgb3V0IHRoZSBleHRyYSBvbmUgaGVyZS5cblx0XHRcdFx0XHRcdFx0XHRzW3AucmVwbGFjZShfY2FtZWxFeHAsIF9jYW1lbEZ1bmMpXSA9IGNzLmdldFByb3BlcnR5VmFsdWUocCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgeyAvL3NvbWUgYnJvd3NlcnMgYmVoYXZlIGRpZmZlcmVudGx5IC0gY3MubGVuZ3RoIGlzIGFsd2F5cyAwLCBzbyB3ZSBtdXN0IGRvIGEgZm9yLi4uaW4gbG9vcC5cblx0XHRcdFx0XHRcdGZvciAoaSBpbiBjcykge1xuXHRcdFx0XHRcdFx0XHRpZiAoaS5pbmRleE9mKFwiVHJhbnNmb3JtXCIpID09PSAtMSB8fCBfdHJhbnNmb3JtUHJvcCA9PT0gaSkgeyAvL1NvbWUgd2Via2l0IGJyb3dzZXJzIGR1cGxpY2F0ZSB0cmFuc2Zvcm0gdmFsdWVzLCBvbmUgbm9uLXByZWZpeGVkIGFuZCBvbmUgcHJlZml4ZWQgKFwidHJhbnNmb3JtXCIgYW5kIFwiV2Via2l0VHJhbnNmb3JtXCIpLCBzbyB3ZSBtdXN0IHdlZWQgb3V0IHRoZSBleHRyYSBvbmUgaGVyZS5cblx0XHRcdFx0XHRcdFx0XHRzW2ldID0gY3NbaV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoKGNzID0gdC5jdXJyZW50U3R5bGUgfHwgdC5zdHlsZSkpIHtcblx0XHRcdFx0XHRmb3IgKGkgaW4gY3MpIHtcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YoaSkgPT09IFwic3RyaW5nXCIgJiYgc1tpXSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdHNbaS5yZXBsYWNlKF9jYW1lbEV4cCwgX2NhbWVsRnVuYyldID0gY3NbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghX3N1cHBvcnRzT3BhY2l0eSkge1xuXHRcdFx0XHRcdHMub3BhY2l0eSA9IF9nZXRJRU9wYWNpdHkodCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHIgPSBfZ2V0VHJhbnNmb3JtKHQsIGNzLCBmYWxzZSk7XG5cdFx0XHRcdHMucm90YXRpb24gPSB0ci5yb3RhdGlvbjtcblx0XHRcdFx0cy5za2V3WCA9IHRyLnNrZXdYO1xuXHRcdFx0XHRzLnNjYWxlWCA9IHRyLnNjYWxlWDtcblx0XHRcdFx0cy5zY2FsZVkgPSB0ci5zY2FsZVk7XG5cdFx0XHRcdHMueCA9IHRyLng7XG5cdFx0XHRcdHMueSA9IHRyLnk7XG5cdFx0XHRcdGlmIChfc3VwcG9ydHMzRCkge1xuXHRcdFx0XHRcdHMueiA9IHRyLno7XG5cdFx0XHRcdFx0cy5yb3RhdGlvblggPSB0ci5yb3RhdGlvblg7XG5cdFx0XHRcdFx0cy5yb3RhdGlvblkgPSB0ci5yb3RhdGlvblk7XG5cdFx0XHRcdFx0cy5zY2FsZVogPSB0ci5zY2FsZVo7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHMuZmlsdGVycykge1xuXHRcdFx0XHRcdGRlbGV0ZSBzLmZpbHRlcnM7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBAcHJpdmF0ZSBhbmFseXplcyB0d28gc3R5bGUgb2JqZWN0cyAoYXMgcmV0dXJuZWQgYnkgX2dldEFsbFN0eWxlcygpKSBhbmQgb25seSBsb29rcyBmb3IgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGVtIHRoYXQgY29udGFpbiB0d2VlbmFibGUgdmFsdWVzIChsaWtlIGEgbnVtYmVyIG9yIGNvbG9yKS4gSXQgcmV0dXJucyBhbiBvYmplY3Qgd2l0aCBhIFwiZGlmc1wiIHByb3BlcnR5IHdoaWNoIHJlZmVycyB0byBhbiBvYmplY3QgY29udGFpbmluZyBvbmx5IHRob3NlIGlzb2xhdGVkIHByb3BlcnRpZXMgYW5kIHZhbHVlcyBmb3IgdHdlZW5pbmcsIGFuZCBhIFwiZmlyc3RNUFRcIiBwcm9wZXJ0eSB3aGljaCByZWZlcnMgdG8gdGhlIGZpcnN0IE1pbmlQcm9wVHdlZW4gaW5zdGFuY2UgaW4gYSBsaW5rZWQgbGlzdCB0aGF0IHJlY29yZGVkIGFsbCB0aGUgc3RhcnRpbmcgdmFsdWVzIG9mIHRoZSBkaWZmZXJlbnQgcHJvcGVydGllcyBzbyB0aGF0IHdlIGNhbiByZXZlcnQgdG8gdGhlbSBhdCB0aGUgZW5kIG9yIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gLSB3ZSBkb24ndCB3YW50IHRoZSBjYXNjYWRpbmcgdG8gZ2V0IG1lc3NlZCB1cC4gVGhlIGZvcmNlTG9va3VwIHBhcmFtZXRlciBpcyBhbiBvcHRpb25hbCBnZW5lcmljIG9iamVjdCB3aXRoIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgZm9yY2VkIGludG8gdGhlIHJlc3VsdHMgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY2xhc3NOYW1lIHR3ZWVucyB0aGF0IGFyZSBvdmVyd3JpdGluZyBvdGhlcnMgYmVjYXVzZSBpbWFnaW5lIGEgc2NlbmFyaW8gd2hlcmUgYSByb2xsb3Zlci9yb2xsb3V0IGFkZHMvcmVtb3ZlcyBhIGNsYXNzIGFuZCB0aGUgdXNlciBzd2lwZXMgdGhlIG1vdXNlIG92ZXIgdGhlIHRhcmdldCBTVVBFUiBmYXN0LCB0aHVzIG5vdGhpbmcgYWN0dWFsbHkgY2hhbmdlZCB5ZXQgYW5kIHRoZSBzdWJzZXF1ZW50IGNvbXBhcmlzb24gb2YgdGhlIHByb3BlcnRpZXMgd291bGQgaW5kaWNhdGUgdGhleSBtYXRjaCAoZXNwZWNpYWxseSB3aGVuIHB4IHJvdW5kaW5nIGlzIHRha2VuIGludG8gY29uc2lkZXJhdGlvbiksIHRodXMgbm8gdHdlZW5pbmcgaXMgbmVjZXNzYXJ5IGV2ZW4gdGhvdWdoIGl0IFNIT1VMRCB0d2VlbiBhbmQgcmVtb3ZlIHRob3NlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIHR3ZWVuIChvdGhlcndpc2UgdGhlIGlubGluZSBzdHlsZXMgd2lsbCBjb250YW1pbmF0ZSB0aGluZ3MpLiBTZWUgdGhlIGNsYXNzTmFtZSBTcGVjaWFsUHJvcCBjb2RlIGZvciBkZXRhaWxzLlxuXHRcdFx0X2Nzc0RpZiA9IGZ1bmN0aW9uKHQsIHMxLCBzMiwgdmFycywgZm9yY2VMb29rdXApIHtcblx0XHRcdFx0dmFyIGRpZnMgPSB7fSxcblx0XHRcdFx0XHRzdHlsZSA9IHQuc3R5bGUsXG5cdFx0XHRcdFx0dmFsLCBwLCBtcHQ7XG5cdFx0XHRcdGZvciAocCBpbiBzMikge1xuXHRcdFx0XHRcdGlmIChwICE9PSBcImNzc1RleHRcIikgaWYgKHAgIT09IFwibGVuZ3RoXCIpIGlmIChpc05hTihwKSkgaWYgKHMxW3BdICE9PSAodmFsID0gczJbcF0pIHx8IChmb3JjZUxvb2t1cCAmJiBmb3JjZUxvb2t1cFtwXSkpIGlmIChwLmluZGV4T2YoXCJPcmlnaW5cIikgPT09IC0xKSBpZiAodHlwZW9mKHZhbCkgPT09IFwibnVtYmVyXCIgfHwgdHlwZW9mKHZhbCkgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRcdGRpZnNbcF0gPSAodmFsID09PSBcImF1dG9cIiAmJiAocCA9PT0gXCJsZWZ0XCIgfHwgcCA9PT0gXCJ0b3BcIikpID8gX2NhbGN1bGF0ZU9mZnNldCh0LCBwKSA6ICgodmFsID09PSBcIlwiIHx8IHZhbCA9PT0gXCJhdXRvXCIgfHwgdmFsID09PSBcIm5vbmVcIikgJiYgdHlwZW9mKHMxW3BdKSA9PT0gXCJzdHJpbmdcIiAmJiBzMVtwXS5yZXBsYWNlKF9OYU5FeHAsIFwiXCIpICE9PSBcIlwiKSA/IDAgOiB2YWw7IC8vaWYgdGhlIGVuZGluZyB2YWx1ZSBpcyBkZWZhdWx0aW5nIChcIlwiIG9yIFwiYXV0b1wiKSwgd2UgY2hlY2sgdGhlIHN0YXJ0aW5nIHZhbHVlIGFuZCBpZiBpdCBjYW4gYmUgcGFyc2VkIGludG8gYSBudW1iZXIgKGEgc3RyaW5nIHdoaWNoIGNvdWxkIGhhdmUgYSBzdWZmaXggdG9vLCBsaWtlIDcwMHB4KSwgdGhlbiB3ZSBzd2FwIGluIDAgZm9yIFwiXCIgb3IgXCJhdXRvXCIgc28gdGhhdCB0aGluZ3MgYWN0dWFsbHkgdHdlZW4uXG5cdFx0XHRcdFx0XHRpZiAoc3R5bGVbcF0gIT09IHVuZGVmaW5lZCkgeyAvL2ZvciBjbGFzc05hbWUgdHdlZW5zLCB3ZSBtdXN0IHJlbWVtYmVyIHdoaWNoIHByb3BlcnRpZXMgYWxyZWFkeSBleGlzdGVkIGlubGluZSAtIHRoZSBvbmVzIHRoYXQgZGlkbid0IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gdGhlIHR3ZWVuIGlzbid0IGluIHByb2dyZXNzIGJlY2F1c2UgdGhleSB3ZXJlIG9ubHkgaW50cm9kdWNlZCB0byBmYWNpbGl0YXRlIHRoZSB0cmFuc2l0aW9uIGJldHdlZW4gY2xhc3Nlcy5cblx0XHRcdFx0XHRcdFx0bXB0ID0gbmV3IE1pbmlQcm9wVHdlZW4oc3R5bGUsIHAsIHN0eWxlW3BdLCBtcHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodmFycykge1xuXHRcdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7IC8vY29weSBwcm9wZXJ0aWVzIChleGNlcHQgY2xhc3NOYW1lKVxuXHRcdFx0XHRcdFx0aWYgKHAgIT09IFwiY2xhc3NOYW1lXCIpIHtcblx0XHRcdFx0XHRcdFx0ZGlmc1twXSA9IHZhcnNbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB7ZGlmczpkaWZzLCBmaXJzdE1QVDptcHR9O1xuXHRcdFx0fSxcblx0XHRcdF9kaW1lbnNpb25zID0ge3dpZHRoOltcIkxlZnRcIixcIlJpZ2h0XCJdLCBoZWlnaHQ6W1wiVG9wXCIsXCJCb3R0b21cIl19LFxuXHRcdFx0X21hcmdpbnMgPSBbXCJtYXJnaW5MZWZ0XCIsXCJtYXJnaW5SaWdodFwiLFwibWFyZ2luVG9wXCIsXCJtYXJnaW5Cb3R0b21cIl0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgR2V0cyB0aGUgd2lkdGggb3IgaGVpZ2h0IG9mIGFuIGVsZW1lbnRcblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCBUYXJnZXQgZWxlbWVudFxuXHRcdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IG5hbWUgKFwid2lkdGhcIiBvciBcImhlaWdodFwiKVxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3Q9fSBjcyBDb21wdXRlZCBzdHlsZSBvYmplY3QgKGlmIG9uZSBleGlzdHMpLiBKdXN0IGEgc3BlZWQgb3B0aW1pemF0aW9uLlxuXHRcdFx0ICogQHJldHVybiB7bnVtYmVyfSBEaW1lbnNpb24gKGluIHBpeGVscylcblx0XHRcdCAqL1xuXHRcdFx0X2dldERpbWVuc2lvbiA9IGZ1bmN0aW9uKHQsIHAsIGNzKSB7XG5cdFx0XHRcdGlmICgodC5ub2RlTmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIpIHsgLy9DaHJvbWUgbm8gbG9uZ2VyIHN1cHBvcnRzIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBvbiBTVkcgZWxlbWVudHMuXG5cdFx0XHRcdFx0cmV0dXJuIChjcyB8fCBfZ2V0Q29tcHV0ZWRTdHlsZSh0KSlbcF0gfHwgMDtcblx0XHRcdFx0fSBlbHNlIGlmICh0LmdldEJCb3ggJiYgX2lzU1ZHKHQpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHQuZ2V0QkJveCgpW3BdIHx8IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHYgPSBwYXJzZUZsb2F0KChwID09PSBcIndpZHRoXCIpID8gdC5vZmZzZXRXaWR0aCA6IHQub2Zmc2V0SGVpZ2h0KSxcblx0XHRcdFx0XHRhID0gX2RpbWVuc2lvbnNbcF0sXG5cdFx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHRjcyA9IGNzIHx8IF9nZXRDb21wdXRlZFN0eWxlKHQsIG51bGwpO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHR2IC09IHBhcnNlRmxvYXQoIF9nZXRTdHlsZSh0LCBcInBhZGRpbmdcIiArIGFbaV0sIGNzLCB0cnVlKSApIHx8IDA7XG5cdFx0XHRcdFx0diAtPSBwYXJzZUZsb2F0KCBfZ2V0U3R5bGUodCwgXCJib3JkZXJcIiArIGFbaV0gKyBcIldpZHRoXCIsIGNzLCB0cnVlKSApIHx8IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHY7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBAcHJpdmF0ZSBQYXJzZXMgcG9zaXRpb24tcmVsYXRlZCBjb21wbGV4IHN0cmluZ3MgbGlrZSBcInRvcCBsZWZ0XCIgb3IgXCI1MHB4IDEwcHhcIiBvciBcIjcwJSAyMCVcIiwgZXRjLiB3aGljaCBhcmUgdXNlZCBmb3IgdGhpbmdzIGxpa2UgdHJhbnNmb3JtT3JpZ2luIG9yIGJhY2tncm91bmRQb3NpdGlvbi4gT3B0aW9uYWxseSBkZWNvcmF0ZXMgYSBzdXBwbGllZCBvYmplY3QgKHJlY09iaikgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IFwib3hcIiAob2Zmc2V0WCksIFwib3lcIiAob2Zmc2V0WSksIFwib3hwXCIgKGlmIHRydWUsIFwib3hcIiBpcyBhIHBlcmNlbnRhZ2Ugbm90IGEgcGl4ZWwgdmFsdWUpLCBhbmQgXCJveHlcIiAoaWYgdHJ1ZSwgXCJveVwiIGlzIGEgcGVyY2VudGFnZSBub3QgYSBwaXhlbCB2YWx1ZSlcblx0XHRcdF9wYXJzZVBvc2l0aW9uID0gZnVuY3Rpb24odiwgcmVjT2JqKSB7XG5cdFx0XHRcdGlmICh2ID09PSBcImNvbnRhaW5cIiB8fCB2ID09PSBcImF1dG9cIiB8fCB2ID09PSBcImF1dG8gYXV0b1wiKSB7IC8vbm90ZTogRmlyZWZveCB1c2VzIFwiYXV0byBhdXRvXCIgYXMgZGVmYXVsdCB3aGVyZWFzIENocm9tZSB1c2VzIFwiYXV0b1wiLlxuXHRcdFx0XHRcdHJldHVybiB2ICsgXCIgXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHYgPT0gbnVsbCB8fCB2ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0diA9IFwiMCAwXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGEgPSB2LnNwbGl0KFwiIFwiKSxcblx0XHRcdFx0XHR4ID0gKHYuaW5kZXhPZihcImxlZnRcIikgIT09IC0xKSA/IFwiMCVcIiA6ICh2LmluZGV4T2YoXCJyaWdodFwiKSAhPT0gLTEpID8gXCIxMDAlXCIgOiBhWzBdLFxuXHRcdFx0XHRcdHkgPSAodi5pbmRleE9mKFwidG9wXCIpICE9PSAtMSkgPyBcIjAlXCIgOiAodi5pbmRleE9mKFwiYm90dG9tXCIpICE9PSAtMSkgPyBcIjEwMCVcIiA6IGFbMV0sXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0aWYgKGEubGVuZ3RoID4gMyAmJiAhcmVjT2JqKSB7IC8vbXVsdGlwbGUgcG9zaXRpb25zXG5cdFx0XHRcdFx0YSA9IHYuc3BsaXQoXCIsIFwiKS5qb2luKFwiLFwiKS5zcGxpdChcIixcIik7XG5cdFx0XHRcdFx0diA9IFtdO1xuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHR2LnB1c2goX3BhcnNlUG9zaXRpb24oYVtpXSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdi5qb2luKFwiLFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoeSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0eSA9ICh4ID09PSBcImNlbnRlclwiKSA/IFwiNTAlXCIgOiBcIjBcIjtcblx0XHRcdFx0fSBlbHNlIGlmICh5ID09PSBcImNlbnRlclwiKSB7XG5cdFx0XHRcdFx0eSA9IFwiNTAlXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHggPT09IFwiY2VudGVyXCIgfHwgKGlzTmFOKHBhcnNlRmxvYXQoeCkpICYmICh4ICsgXCJcIikuaW5kZXhPZihcIj1cIikgPT09IC0xKSkgeyAvL3JlbWVtYmVyLCB0aGUgdXNlciBjb3VsZCBmbGlwLWZsb3AgdGhlIHZhbHVlcyBhbmQgc2F5IFwiYm90dG9tIGNlbnRlclwiIG9yIFwiY2VudGVyIGJvdHRvbVwiLCBldGMuIFwiY2VudGVyXCIgaXMgYW1iaWd1b3VzIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZCB0byBkZXNjcmliZSBob3Jpem9udGFsIG9yIHZlcnRpY2FsLCBoZW5jZSB0aGUgaXNOYU4oKS4gSWYgdGhlcmUncyBhbiBcIj1cIiBzaWduIGluIHRoZSB2YWx1ZSwgaXQncyByZWxhdGl2ZS5cblx0XHRcdFx0XHR4ID0gXCI1MCVcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHR2ID0geCArIFwiIFwiICsgeSArICgoYS5sZW5ndGggPiAyKSA/IFwiIFwiICsgYVsyXSA6IFwiXCIpO1xuXHRcdFx0XHRpZiAocmVjT2JqKSB7XG5cdFx0XHRcdFx0cmVjT2JqLm94cCA9ICh4LmluZGV4T2YoXCIlXCIpICE9PSAtMSk7XG5cdFx0XHRcdFx0cmVjT2JqLm95cCA9ICh5LmluZGV4T2YoXCIlXCIpICE9PSAtMSk7XG5cdFx0XHRcdFx0cmVjT2JqLm94ciA9ICh4LmNoYXJBdCgxKSA9PT0gXCI9XCIpO1xuXHRcdFx0XHRcdHJlY09iai5veXIgPSAoeS5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0XHRyZWNPYmoub3ggPSBwYXJzZUZsb2F0KHgucmVwbGFjZShfTmFORXhwLCBcIlwiKSk7XG5cdFx0XHRcdFx0cmVjT2JqLm95ID0gcGFyc2VGbG9hdCh5LnJlcGxhY2UoX05hTkV4cCwgXCJcIikpO1xuXHRcdFx0XHRcdHJlY09iai52ID0gdjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVjT2JqIHx8IHY7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIFRha2VzIGFuIGVuZGluZyB2YWx1ZSAodHlwaWNhbGx5IGEgc3RyaW5nLCBidXQgY2FuIGJlIGEgbnVtYmVyKSBhbmQgYSBzdGFydGluZyB2YWx1ZSBhbmQgcmV0dXJucyB0aGUgY2hhbmdlIGJldHdlZW4gdGhlIHR3bywgbG9va2luZyBmb3IgcmVsYXRpdmUgdmFsdWUgaW5kaWNhdG9ycyBsaWtlICs9IGFuZCAtPSBhbmQgaXQgYWxzbyBpZ25vcmVzIHN1ZmZpeGVzIChidXQgbWFrZSBzdXJlIHRoZSBlbmRpbmcgdmFsdWUgc3RhcnRzIHdpdGggYSBudW1iZXIgb3IgKz0vLT0gYW5kIHRoYXQgdGhlIHN0YXJ0aW5nIHZhbHVlIGlzIGEgTlVNQkVSISlcblx0XHRcdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmcpfSBlIEVuZCB2YWx1ZSB3aGljaCBpcyB0eXBpY2FsbHkgYSBzdHJpbmcsIGJ1dCBjb3VsZCBiZSBhIG51bWJlclxuXHRcdFx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IGIgQmVnaW5uaW5nIHZhbHVlIHdoaWNoIGlzIHR5cGljYWxseSBhIHN0cmluZyBidXQgY291bGQgYmUgYSBudW1iZXJcblx0XHRcdCAqIEByZXR1cm4ge251bWJlcn0gQW1vdW50IG9mIGNoYW5nZSBiZXR3ZWVuIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgKHJlbGF0aXZlIHZhbHVlcyB0aGF0IGhhdmUgYSBcIis9XCIgb3IgXCItPVwiIGFyZSByZWNvZ25pemVkKVxuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VDaGFuZ2UgPSBmdW5jdGlvbihlLCBiKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YoZSkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdGUgPSBlKF9pbmRleCwgX3RhcmdldCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICh0eXBlb2YoZSkgPT09IFwic3RyaW5nXCIgJiYgZS5jaGFyQXQoMSkgPT09IFwiPVwiKSA/IHBhcnNlSW50KGUuY2hhckF0KDApICsgXCIxXCIsIDEwKSAqIHBhcnNlRmxvYXQoZS5zdWJzdHIoMikpIDogKHBhcnNlRmxvYXQoZSkgLSBwYXJzZUZsb2F0KGIpKSB8fCAwO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBUYWtlcyBhIHZhbHVlIGFuZCBhIGRlZmF1bHQgbnVtYmVyLCBjaGVja3MgaWYgdGhlIHZhbHVlIGlzIHJlbGF0aXZlLCBudWxsLCBvciBudW1lcmljIGFuZCBzcGl0cyBiYWNrIGEgbm9ybWFsaXplZCBudW1iZXIgYWNjb3JkaW5nbHkuIFByaW1hcmlseSB1c2VkIGluIHRoZSBfcGFyc2VUcmFuc2Zvcm0oKSBmdW5jdGlvbi5cblx0XHRcdCAqIEBwYXJhbSB7T2JqZWN0fSB2IFZhbHVlIHRvIGJlIHBhcnNlZFxuXHRcdFx0ICogQHBhcmFtIHshbnVtYmVyfSBkIERlZmF1bHQgdmFsdWUgKHdoaWNoIGlzIGFsc28gdXNlZCBmb3IgcmVsYXRpdmUgY2FsY3VsYXRpb25zIGlmIFwiKz1cIiBvciBcIi09XCIgaXMgZm91bmQgaW4gdGhlIGZpcnN0IHBhcmFtZXRlcilcblx0XHRcdCAqIEByZXR1cm4ge251bWJlcn0gUGFyc2VkIHZhbHVlXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZVZhbCA9IGZ1bmN0aW9uKHYsIGQpIHtcblx0XHRcdFx0aWYgKHR5cGVvZih2KSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0diA9IHYoX2luZGV4LCBfdGFyZ2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKHYgPT0gbnVsbCkgPyBkIDogKHR5cGVvZih2KSA9PT0gXCJzdHJpbmdcIiAmJiB2LmNoYXJBdCgxKSA9PT0gXCI9XCIpID8gcGFyc2VJbnQodi5jaGFyQXQoMCkgKyBcIjFcIiwgMTApICogcGFyc2VGbG9hdCh2LnN1YnN0cigyKSkgKyBkIDogcGFyc2VGbG9hdCh2KSB8fCAwO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBUcmFuc2xhdGVzIHN0cmluZ3MgbGlrZSBcIjQwZGVnXCIgb3IgXCI0MFwiIG9yIDQwcmFkXCIgb3IgXCIrPTQwZGVnXCIgb3IgXCIyNzBfc2hvcnRcIiBvciBcIi05MF9jd1wiIG9yIFwiKz00NV9jY3dcIiB0byBhIG51bWVyaWMgcmFkaWFuIGFuZ2xlLiBPZiBjb3Vyc2UgYSBzdGFydGluZy9kZWZhdWx0IHZhbHVlIG11c3QgYmUgZmVkIGluIHRvbyBzbyB0aGF0IHJlbGF0aXZlIHZhbHVlcyBjYW4gYmUgY2FsY3VsYXRlZCBwcm9wZXJseS5cblx0XHRcdCAqIEBwYXJhbSB7T2JqZWN0fSB2IFZhbHVlIHRvIGJlIHBhcnNlZFxuXHRcdFx0ICogQHBhcmFtIHshbnVtYmVyfSBkIERlZmF1bHQgdmFsdWUgKHdoaWNoIGlzIGFsc28gdXNlZCBmb3IgcmVsYXRpdmUgY2FsY3VsYXRpb25zIGlmIFwiKz1cIiBvciBcIi09XCIgaXMgZm91bmQgaW4gdGhlIGZpcnN0IHBhcmFtZXRlcilcblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gcCBwcm9wZXJ0eSBuYW1lIGZvciBkaXJlY3Rpb25hbEVuZCAob3B0aW9uYWwgLSBvbmx5IHVzZWQgd2hlbiB0aGUgcGFyc2VkIHZhbHVlIGlzIGRpcmVjdGlvbmFsIChcIl9zaG9ydFwiLCBcIl9jd1wiLCBvciBcIl9jY3dcIiBzdWZmaXgpLiBXZSBuZWVkIGEgd2F5IHRvIHN0b3JlIHRoZSB1bmNvbXBlbnNhdGVkIHZhbHVlIHNvIHRoYXQgYXQgdGhlIGVuZCBvZiB0aGUgdHdlZW4sIHdlIHNldCBpdCB0byBleGFjdGx5IHdoYXQgd2FzIHJlcXVlc3RlZCB3aXRoIG5vIGRpcmVjdGlvbmFsIGNvbXBlbnNhdGlvbikuIFByb3BlcnR5IG5hbWUgd291bGQgYmUgXCJyb3RhdGlvblwiLCBcInJvdGF0aW9uWFwiLCBvciBcInJvdGF0aW9uWVwiXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdD19IGRpcmVjdGlvbmFsRW5kIEFuIG9iamVjdCB0aGF0IHdpbGwgc3RvcmUgdGhlIHJhdyBlbmQgdmFsdWVzIGZvciBkaXJlY3Rpb25hbCBhbmdsZXMgKFwiX3Nob3J0XCIsIFwiX2N3XCIsIG9yIFwiX2Njd1wiIHN1ZmZpeCkuIFdlIG5lZWQgYSB3YXkgdG8gc3RvcmUgdGhlIHVuY29tcGVuc2F0ZWQgdmFsdWUgc28gdGhhdCBhdCB0aGUgZW5kIG9mIHRoZSB0d2Vlbiwgd2Ugc2V0IGl0IHRvIGV4YWN0bHkgd2hhdCB3YXMgcmVxdWVzdGVkIHdpdGggbm8gZGlyZWN0aW9uYWwgY29tcGVuc2F0aW9uLlxuXHRcdFx0ICogQHJldHVybiB7bnVtYmVyfSBwYXJzZWQgYW5nbGUgaW4gcmFkaWFuc1xuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VBbmdsZSA9IGZ1bmN0aW9uKHYsIGQsIHAsIGRpcmVjdGlvbmFsRW5kKSB7XG5cdFx0XHRcdHZhciBtaW4gPSAwLjAwMDAwMSxcblx0XHRcdFx0XHRjYXAsIHNwbGl0LCBkaWYsIHJlc3VsdCwgaXNSZWxhdGl2ZTtcblx0XHRcdFx0aWYgKHR5cGVvZih2KSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0diA9IHYoX2luZGV4LCBfdGFyZ2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodiA9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZDtcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YodikgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRyZXN1bHQgPSB2O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNhcCA9IDM2MDtcblx0XHRcdFx0XHRzcGxpdCA9IHYuc3BsaXQoXCJfXCIpO1xuXHRcdFx0XHRcdGlzUmVsYXRpdmUgPSAodi5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0XHRkaWYgPSAoaXNSZWxhdGl2ZSA/IHBhcnNlSW50KHYuY2hhckF0KDApICsgXCIxXCIsIDEwKSAqIHBhcnNlRmxvYXQoc3BsaXRbMF0uc3Vic3RyKDIpKSA6IHBhcnNlRmxvYXQoc3BsaXRbMF0pKSAqICgodi5pbmRleE9mKFwicmFkXCIpID09PSAtMSkgPyAxIDogX1JBRDJERUcpIC0gKGlzUmVsYXRpdmUgPyAwIDogZCk7XG5cdFx0XHRcdFx0aWYgKHNwbGl0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0aWYgKGRpcmVjdGlvbmFsRW5kKSB7XG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbmFsRW5kW3BdID0gZCArIGRpZjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh2LmluZGV4T2YoXCJzaG9ydFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gZGlmICUgY2FwO1xuXHRcdFx0XHRcdFx0XHRpZiAoZGlmICE9PSBkaWYgJSAoY2FwIC8gMikpIHtcblx0XHRcdFx0XHRcdFx0XHRkaWYgPSAoZGlmIDwgMCkgPyBkaWYgKyBjYXAgOiBkaWYgLSBjYXA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh2LmluZGV4T2YoXCJfY3dcIikgIT09IC0xICYmIGRpZiA8IDApIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gKChkaWYgKyBjYXAgKiA5OTk5OTk5OTk5KSAlIGNhcCkgLSAoKGRpZiAvIGNhcCkgfCAwKSAqIGNhcDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodi5pbmRleE9mKFwiY2N3XCIpICE9PSAtMSAmJiBkaWYgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdGRpZiA9ICgoZGlmIC0gY2FwICogOTk5OTk5OTk5OSkgJSBjYXApIC0gKChkaWYgLyBjYXApIHwgMCkgKiBjYXA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlc3VsdCA9IGQgKyBkaWY7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJlc3VsdCA8IG1pbiAmJiByZXN1bHQgPiAtbWluKSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fSxcblxuXHRcdFx0X2NvbG9yTG9va3VwID0ge2FxdWE6WzAsMjU1LDI1NV0sXG5cdFx0XHRcdGxpbWU6WzAsMjU1LDBdLFxuXHRcdFx0XHRzaWx2ZXI6WzE5MiwxOTIsMTkyXSxcblx0XHRcdFx0YmxhY2s6WzAsMCwwXSxcblx0XHRcdFx0bWFyb29uOlsxMjgsMCwwXSxcblx0XHRcdFx0dGVhbDpbMCwxMjgsMTI4XSxcblx0XHRcdFx0Ymx1ZTpbMCwwLDI1NV0sXG5cdFx0XHRcdG5hdnk6WzAsMCwxMjhdLFxuXHRcdFx0XHR3aGl0ZTpbMjU1LDI1NSwyNTVdLFxuXHRcdFx0XHRmdWNoc2lhOlsyNTUsMCwyNTVdLFxuXHRcdFx0XHRvbGl2ZTpbMTI4LDEyOCwwXSxcblx0XHRcdFx0eWVsbG93OlsyNTUsMjU1LDBdLFxuXHRcdFx0XHRvcmFuZ2U6WzI1NSwxNjUsMF0sXG5cdFx0XHRcdGdyYXk6WzEyOCwxMjgsMTI4XSxcblx0XHRcdFx0cHVycGxlOlsxMjgsMCwxMjhdLFxuXHRcdFx0XHRncmVlbjpbMCwxMjgsMF0sXG5cdFx0XHRcdHJlZDpbMjU1LDAsMF0sXG5cdFx0XHRcdHBpbms6WzI1NSwxOTIsMjAzXSxcblx0XHRcdFx0Y3lhbjpbMCwyNTUsMjU1XSxcblx0XHRcdFx0dHJhbnNwYXJlbnQ6WzI1NSwyNTUsMjU1LDBdfSxcblxuXHRcdFx0X2h1ZSA9IGZ1bmN0aW9uKGgsIG0xLCBtMikge1xuXHRcdFx0XHRoID0gKGggPCAwKSA/IGggKyAxIDogKGggPiAxKSA/IGggLSAxIDogaDtcblx0XHRcdFx0cmV0dXJuICgoKChoICogNiA8IDEpID8gbTEgKyAobTIgLSBtMSkgKiBoICogNiA6IChoIDwgMC41KSA/IG0yIDogKGggKiAzIDwgMikgPyBtMSArIChtMiAtIG0xKSAqICgyIC8gMyAtIGgpICogNiA6IG0xKSAqIDI1NSkgKyAwLjUpIHwgMDtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgUGFyc2VzIGEgY29sb3IgKGxpa2UgIzlGMCwgI0ZGOTkwMCwgcmdiKDI1NSw1MSwxNTMpIG9yIGhzbCgxMDgsIDUwJSwgMTAlKSkgaW50byBhbiBhcnJheSB3aXRoIDMgZWxlbWVudHMgZm9yIHJlZCwgZ3JlZW4sIGFuZCBibHVlIG9yIGlmIHRvSFNMIHBhcmFtZXRlciBpcyB0cnVlLCBpdCB3aWxsIHBvcHVsYXRlIHRoZSBhcnJheSB3aXRoIGh1ZSwgc2F0dXJhdGlvbiwgYW5kIGxpZ2h0bmVzcyB2YWx1ZXMuIElmIGEgcmVsYXRpdmUgdmFsdWUgaXMgZm91bmQgaW4gYW4gaHNsKCkgb3IgaHNsYSgpIHN0cmluZywgaXQgd2lsbCBwcmVzZXJ2ZSB0aG9zZSByZWxhdGl2ZSBwcmVmaXhlcyBhbmQgYWxsIHRoZSB2YWx1ZXMgaW4gdGhlIGFycmF5IHdpbGwgYmUgc3RyaW5ncyBpbnN0ZWFkIG9mIG51bWJlcnMgKGluIGFsbCBvdGhlciBjYXNlcyBpdCB3aWxsIGJlIHBvcHVsYXRlZCB3aXRoIG51bWJlcnMpLlxuXHRcdFx0ICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcil9IHYgVGhlIHZhbHVlIHRoZSBzaG91bGQgYmUgcGFyc2VkIHdoaWNoIGNvdWxkIGJlIGEgc3RyaW5nIGxpa2UgIzlGMCBvciByZ2IoMjU1LDEwMiw1MSkgb3IgcmdiYSgyNTUsMCwwLDAuNSkgb3IgaXQgY291bGQgYmUgYSBudW1iZXIgbGlrZSAweEZGMDBDQyBvciBldmVuIGEgbmFtZWQgY29sb3IgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLlxuXHRcdFx0ICogQHBhcmFtIHsoYm9vbGVhbil9IHRvSFNMIElmIHRydWUsIGFuIGhzbCgpIG9yIGhzbGEoKSB2YWx1ZSB3aWxsIGJlIHJldHVybmVkIGluc3RlYWQgb2YgcmdiKCkgb3IgcmdiYSgpXG5cdFx0XHQgKiBAcmV0dXJuIHtBcnJheS48bnVtYmVyPn0gQW4gYXJyYXkgY29udGFpbmluZyByZWQsIGdyZWVuLCBhbmQgYmx1ZSAoYW5kIG9wdGlvbmFsbHkgYWxwaGEpIGluIHRoYXQgb3JkZXIsIG9yIGlmIHRoZSB0b0hTTCBwYXJhbWV0ZXIgd2FzIHRydWUsIHRoZSBhcnJheSB3aWxsIGNvbnRhaW4gaHVlLCBzYXR1cmF0aW9uIGFuZCBsaWdodG5lc3MgKGFuZCBvcHRpb25hbGx5IGFscGhhKSBpbiB0aGF0IG9yZGVyLiBBbHdheXMgbnVtYmVycyB1bmxlc3MgdGhlcmUncyBhIHJlbGF0aXZlIHByZWZpeCBmb3VuZCBpbiBhbiBoc2woKSBvciBoc2xhKCkgc3RyaW5nIGFuZCB0b0hTTCBpcyB0cnVlLlxuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VDb2xvciA9IENTU1BsdWdpbi5wYXJzZUNvbG9yID0gZnVuY3Rpb24odiwgdG9IU0wpIHtcblx0XHRcdFx0dmFyIGEsIHIsIGcsIGIsIGgsIHMsIGwsIG1heCwgbWluLCBkLCB3YXNIU0w7XG5cdFx0XHRcdGlmICghdikge1xuXHRcdFx0XHRcdGEgPSBfY29sb3JMb29rdXAuYmxhY2s7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHYpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0YSA9IFt2ID4+IDE2LCAodiA+PiA4KSAmIDI1NSwgdiAmIDI1NV07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKHYuY2hhckF0KHYubGVuZ3RoIC0gMSkgPT09IFwiLFwiKSB7IC8vc29tZXRpbWVzIGEgdHJhaWxpbmcgY29tbWEgaXMgaW5jbHVkZWQgYW5kIHdlIHNob3VsZCBjaG9wIGl0IG9mZiAodHlwaWNhbGx5IGZyb20gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgbGlrZSBhIHRleHRTaGFkb3c6XCIycHggMnB4IDJweCBibHVlLCA1cHggNXB4IDVweCByZ2IoMjU1LDAsMClcIiAtIGluIHRoaXMgZXhhbXBsZSBcImJsdWUsXCIgaGFzIGEgdHJhaWxpbmcgY29tbWEuIFdlIGNvdWxkIHN0cmlwIGl0IG91dCBpbnNpZGUgcGFyc2VDb21wbGV4KCkgYnV0IHdlJ2QgbmVlZCB0byBkbyBpdCB0byB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIHBsdXMgaXQgd291bGRuJ3QgcHJvdmlkZSBwcm90ZWN0aW9uIGZyb20gb3RoZXIgcG90ZW50aWFsIHNjZW5hcmlvcyBsaWtlIGlmIHRoZSB1c2VyIHBhc3NlcyBpbiBhIHNpbWlsYXIgdmFsdWUuXG5cdFx0XHRcdFx0XHR2ID0gdi5zdWJzdHIoMCwgdi5sZW5ndGggLSAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKF9jb2xvckxvb2t1cFt2XSkge1xuXHRcdFx0XHRcdFx0YSA9IF9jb2xvckxvb2t1cFt2XTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHYuY2hhckF0KDApID09PSBcIiNcIikge1xuXHRcdFx0XHRcdFx0aWYgKHYubGVuZ3RoID09PSA0KSB7IC8vZm9yIHNob3J0aGFuZCBsaWtlICM5RjBcblx0XHRcdFx0XHRcdFx0ciA9IHYuY2hhckF0KDEpO1xuXHRcdFx0XHRcdFx0XHRnID0gdi5jaGFyQXQoMik7XG5cdFx0XHRcdFx0XHRcdGIgPSB2LmNoYXJBdCgzKTtcblx0XHRcdFx0XHRcdFx0diA9IFwiI1wiICsgciArIHIgKyBnICsgZyArIGIgKyBiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0diA9IHBhcnNlSW50KHYuc3Vic3RyKDEpLCAxNik7XG5cdFx0XHRcdFx0XHRhID0gW3YgPj4gMTYsICh2ID4+IDgpICYgMjU1LCB2ICYgMjU1XTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHYuc3Vic3RyKDAsIDMpID09PSBcImhzbFwiKSB7XG5cdFx0XHRcdFx0XHRhID0gd2FzSFNMID0gdi5tYXRjaChfbnVtRXhwKTtcblx0XHRcdFx0XHRcdGlmICghdG9IU0wpIHtcblx0XHRcdFx0XHRcdFx0aCA9IChOdW1iZXIoYVswXSkgJSAzNjApIC8gMzYwO1xuXHRcdFx0XHRcdFx0XHRzID0gTnVtYmVyKGFbMV0pIC8gMTAwO1xuXHRcdFx0XHRcdFx0XHRsID0gTnVtYmVyKGFbMl0pIC8gMTAwO1xuXHRcdFx0XHRcdFx0XHRnID0gKGwgPD0gMC41KSA/IGwgKiAocyArIDEpIDogbCArIHMgLSBsICogcztcblx0XHRcdFx0XHRcdFx0ciA9IGwgKiAyIC0gZztcblx0XHRcdFx0XHRcdFx0aWYgKGEubGVuZ3RoID4gMykge1xuXHRcdFx0XHRcdFx0XHRcdGFbM10gPSBOdW1iZXIodlszXSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0YVswXSA9IF9odWUoaCArIDEgLyAzLCByLCBnKTtcblx0XHRcdFx0XHRcdFx0YVsxXSA9IF9odWUoaCwgciwgZyk7XG5cdFx0XHRcdFx0XHRcdGFbMl0gPSBfaHVlKGggLSAxIC8gMywgciwgZyk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHYuaW5kZXhPZihcIj1cIikgIT09IC0xKSB7IC8vaWYgcmVsYXRpdmUgdmFsdWVzIGFyZSBmb3VuZCwganVzdCByZXR1cm4gdGhlIHJhdyBzdHJpbmdzIHdpdGggdGhlIHJlbGF0aXZlIHByZWZpeGVzIGluIHBsYWNlLlxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdi5tYXRjaChfcmVsTnVtRXhwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0YSA9IHYubWF0Y2goX251bUV4cCkgfHwgX2NvbG9yTG9va3VwLnRyYW5zcGFyZW50O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhWzBdID0gTnVtYmVyKGFbMF0pO1xuXHRcdFx0XHRcdGFbMV0gPSBOdW1iZXIoYVsxXSk7XG5cdFx0XHRcdFx0YVsyXSA9IE51bWJlcihhWzJdKTtcblx0XHRcdFx0XHRpZiAoYS5sZW5ndGggPiAzKSB7XG5cdFx0XHRcdFx0XHRhWzNdID0gTnVtYmVyKGFbM10pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodG9IU0wgJiYgIXdhc0hTTCkge1xuXHRcdFx0XHRcdHIgPSBhWzBdIC8gMjU1O1xuXHRcdFx0XHRcdGcgPSBhWzFdIC8gMjU1O1xuXHRcdFx0XHRcdGIgPSBhWzJdIC8gMjU1O1xuXHRcdFx0XHRcdG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuXHRcdFx0XHRcdG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuXHRcdFx0XHRcdGwgPSAobWF4ICsgbWluKSAvIDI7XG5cdFx0XHRcdFx0aWYgKG1heCA9PT0gbWluKSB7XG5cdFx0XHRcdFx0XHRoID0gcyA9IDA7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGQgPSBtYXggLSBtaW47XG5cdFx0XHRcdFx0XHRzID0gbCA+IDAuNSA/IGQgLyAoMiAtIG1heCAtIG1pbikgOiBkIC8gKG1heCArIG1pbik7XG5cdFx0XHRcdFx0XHRoID0gKG1heCA9PT0gcikgPyAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKSA6IChtYXggPT09IGcpID8gKGIgLSByKSAvIGQgKyAyIDogKHIgLSBnKSAvIGQgKyA0O1xuXHRcdFx0XHRcdFx0aCAqPSA2MDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YVswXSA9IChoICsgMC41KSB8IDA7XG5cdFx0XHRcdFx0YVsxXSA9IChzICogMTAwICsgMC41KSB8IDA7XG5cdFx0XHRcdFx0YVsyXSA9IChsICogMTAwICsgMC41KSB8IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGE7XG5cdFx0XHR9LFxuXHRcdFx0X2Zvcm1hdENvbG9ycyA9IGZ1bmN0aW9uKHMsIHRvSFNMKSB7XG5cdFx0XHRcdHZhciBjb2xvcnMgPSBzLm1hdGNoKF9jb2xvckV4cCkgfHwgW10sXG5cdFx0XHRcdFx0Y2hhckluZGV4ID0gMCxcblx0XHRcdFx0XHRwYXJzZWQgPSBjb2xvcnMubGVuZ3RoID8gXCJcIiA6IHMsXG5cdFx0XHRcdFx0aSwgY29sb3IsIHRlbXA7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjb2xvcnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjb2xvciA9IGNvbG9yc1tpXTtcblx0XHRcdFx0XHR0ZW1wID0gcy5zdWJzdHIoY2hhckluZGV4LCBzLmluZGV4T2YoY29sb3IsIGNoYXJJbmRleCktY2hhckluZGV4KTtcblx0XHRcdFx0XHRjaGFySW5kZXggKz0gdGVtcC5sZW5ndGggKyBjb2xvci5sZW5ndGg7XG5cdFx0XHRcdFx0Y29sb3IgPSBfcGFyc2VDb2xvcihjb2xvciwgdG9IU0wpO1xuXHRcdFx0XHRcdGlmIChjb2xvci5sZW5ndGggPT09IDMpIHtcblx0XHRcdFx0XHRcdGNvbG9yLnB1c2goMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBhcnNlZCArPSB0ZW1wICsgKHRvSFNMID8gXCJoc2xhKFwiICsgY29sb3JbMF0gKyBcIixcIiArIGNvbG9yWzFdICsgXCIlLFwiICsgY29sb3JbMl0gKyBcIiUsXCIgKyBjb2xvclszXSA6IFwicmdiYShcIiArIGNvbG9yLmpvaW4oXCIsXCIpKSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBwYXJzZWQgKyBzLnN1YnN0cihjaGFySW5kZXgpO1xuXHRcdFx0fSxcblx0XHRcdF9jb2xvckV4cCA9IFwiKD86XFxcXGIoPzooPzpyZ2J8cmdiYXxoc2x8aHNsYSlcXFxcKC4rP1xcXFwpKXxcXFxcQiMoPzpbMC05YS1mXXszfSl7MSwyfVxcXFxiXCI7IC8vd2UnbGwgZHluYW1pY2FsbHkgYnVpbGQgdGhpcyBSZWd1bGFyIEV4cHJlc3Npb24gdG8gY29uc2VydmUgZmlsZSBzaXplLiBBZnRlciBidWlsZGluZyBpdCwgaXQgd2lsbCBiZSBhYmxlIHRvIGZpbmQgcmdiKCksIHJnYmEoKSwgIyAoaGV4YWRlY2ltYWwpLCBhbmQgbmFtZWQgY29sb3IgdmFsdWVzIGxpa2UgcmVkLCBibHVlLCBwdXJwbGUsIGV0Yy5cblxuXHRcdGZvciAocCBpbiBfY29sb3JMb29rdXApIHtcblx0XHRcdF9jb2xvckV4cCArPSBcInxcIiArIHAgKyBcIlxcXFxiXCI7XG5cdFx0fVxuXHRcdF9jb2xvckV4cCA9IG5ldyBSZWdFeHAoX2NvbG9yRXhwK1wiKVwiLCBcImdpXCIpO1xuXG5cdFx0Q1NTUGx1Z2luLmNvbG9yU3RyaW5nRmlsdGVyID0gZnVuY3Rpb24oYSkge1xuXHRcdFx0dmFyIGNvbWJpbmVkID0gYVswXSArIGFbMV0sXG5cdFx0XHRcdHRvSFNMO1xuXHRcdFx0aWYgKF9jb2xvckV4cC50ZXN0KGNvbWJpbmVkKSkge1xuXHRcdFx0XHR0b0hTTCA9IChjb21iaW5lZC5pbmRleE9mKFwiaHNsKFwiKSAhPT0gLTEgfHwgY29tYmluZWQuaW5kZXhPZihcImhzbGEoXCIpICE9PSAtMSk7XG5cdFx0XHRcdGFbMF0gPSBfZm9ybWF0Q29sb3JzKGFbMF0sIHRvSFNMKTtcblx0XHRcdFx0YVsxXSA9IF9mb3JtYXRDb2xvcnMoYVsxXSwgdG9IU0wpO1xuXHRcdFx0fVxuXHRcdFx0X2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cdFx0fTtcblxuXHRcdGlmICghVHdlZW5MaXRlLmRlZmF1bHRTdHJpbmdGaWx0ZXIpIHtcblx0XHRcdFR3ZWVuTGl0ZS5kZWZhdWx0U3RyaW5nRmlsdGVyID0gQ1NTUGx1Z2luLmNvbG9yU3RyaW5nRmlsdGVyO1xuXHRcdH1cblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlIFJldHVybnMgYSBmb3JtYXR0ZXIgZnVuY3Rpb24gdGhhdCBoYW5kbGVzIHRha2luZyBhIHN0cmluZyAob3IgbnVtYmVyIGluIHNvbWUgY2FzZXMpIGFuZCByZXR1cm5pbmcgYSBjb25zaXN0ZW50bHkgZm9ybWF0dGVkIG9uZSBpbiB0ZXJtcyBvZiBkZWxpbWl0ZXJzLCBxdWFudGl0eSBvZiB2YWx1ZXMsIGV0Yy4gRm9yIGV4YW1wbGUsIHdlIG1heSBnZXQgYm94U2hhZG93IHZhbHVlcyBkZWZpbmVkIGFzIFwiMHB4IHJlZFwiIG9yIFwiMHB4IDBweCAxMHB4IHJnYigyNTUsMCwwKVwiIG9yIFwiMHB4IDBweCAyMHB4IDIwcHggI0YwMFwiIGFuZCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0IHdoYXQgd2UgZ2V0IGJhY2sgaXMgZGVzY3JpYmVkIHdpdGggNCBudW1iZXJzIGFuZCBhIGNvbG9yLiBUaGlzIGFsbG93cyB1cyB0byBmZWVkIGl0IGludG8gdGhlIF9wYXJzZUNvbXBsZXgoKSBtZXRob2QgYW5kIHNwbGl0IHRoZSB2YWx1ZXMgdXAgYXBwcm9wcmlhdGVseS4gVGhlIG5lYXQgdGhpbmcgYWJvdXQgdGhpcyBfZ2V0Rm9ybWF0dGVyKCkgZnVuY3Rpb24gaXMgdGhhdCB0aGUgZGZsdCBkZWZpbmVzIGEgcGF0dGVybiBhcyB3ZWxsIGFzIGEgZGVmYXVsdCwgc28gZm9yIGV4YW1wbGUsIF9nZXRGb3JtYXR0ZXIoXCIwcHggMHB4IDBweCAwcHggIzc3N1wiLCB0cnVlKSBub3Qgb25seSBzZXRzIHRoZSBkZWZhdWx0IGFzIDBweCBmb3IgYWxsIGRpc3RhbmNlcyBhbmQgIzc3NyBmb3IgdGhlIGNvbG9yLCBidXQgYWxzbyBzZXRzIHRoZSBwYXR0ZXJuIHN1Y2ggdGhhdCA0IG51bWJlcnMgYW5kIGEgY29sb3Igd2lsbCBhbHdheXMgZ2V0IHJldHVybmVkLlxuXHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gZGZsdCBUaGUgZGVmYXVsdCB2YWx1ZSBhbmQgcGF0dGVybiB0byBmb2xsb3cuIFNvIFwiMHB4IDBweCAwcHggMHB4ICM3NzdcIiB3aWxsIGVuc3VyZSB0aGF0IDQgbnVtYmVycyBhbmQgYSBjb2xvciB3aWxsIGFsd2F5cyBnZXQgcmV0dXJuZWQuXG5cdFx0ICogQHBhcmFtIHtib29sZWFuPX0gY2xyIElmIHRydWUsIHRoZSB2YWx1ZXMgc2hvdWxkIGJlIHNlYXJjaGVkIGZvciBjb2xvci1yZWxhdGVkIGRhdGEuIEZvciBleGFtcGxlLCBib3hTaGFkb3cgdmFsdWVzIHR5cGljYWxseSBjb250YWluIGEgY29sb3Igd2hlcmVhcyBib3JkZXJSYWRpdXMgZG9uJ3QuXG5cdFx0ICogQHBhcmFtIHtib29sZWFuPX0gY29sbGFwc2libGUgSWYgdHJ1ZSwgdGhlIHZhbHVlIGlzIGEgdG9wL2xlZnQvcmlnaHQvYm90dG9tIHN0eWxlIG9uZSB0aGF0IGFjdHMgbGlrZSBtYXJnaW4gb3IgcGFkZGluZywgd2hlcmUgaWYgb25seSBvbmUgdmFsdWUgaXMgcmVjZWl2ZWQsIGl0J3MgdXNlZCBmb3IgYWxsIDQ7IGlmIDIgYXJlIHJlY2VpdmVkLCB0aGUgZmlyc3QgaXMgZHVwbGljYXRlZCBmb3IgM3JkIChib3R0b20pIGFuZCB0aGUgMm5kIGlzIGR1cGxpY2F0ZWQgZm9yIHRoZSA0dGggc3BvdCAobGVmdCksIGV0Yy5cblx0XHQgKiBAcmV0dXJuIHtGdW5jdGlvbn0gZm9ybWF0dGVyIGZ1bmN0aW9uXG5cdFx0ICovXG5cdFx0dmFyIF9nZXRGb3JtYXR0ZXIgPSBmdW5jdGlvbihkZmx0LCBjbHIsIGNvbGxhcHNpYmxlLCBtdWx0aSkge1xuXHRcdFx0XHRpZiAoZGZsdCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHYpIHtyZXR1cm4gdjt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBkQ29sb3IgPSBjbHIgPyAoZGZsdC5tYXRjaChfY29sb3JFeHApIHx8IFtcIlwiXSlbMF0gOiBcIlwiLFxuXHRcdFx0XHRcdGRWYWxzID0gZGZsdC5zcGxpdChkQ29sb3IpLmpvaW4oXCJcIikubWF0Y2goX3ZhbHVlc0V4cCkgfHwgW10sXG5cdFx0XHRcdFx0cGZ4ID0gZGZsdC5zdWJzdHIoMCwgZGZsdC5pbmRleE9mKGRWYWxzWzBdKSksXG5cdFx0XHRcdFx0c2Z4ID0gKGRmbHQuY2hhckF0KGRmbHQubGVuZ3RoIC0gMSkgPT09IFwiKVwiKSA/IFwiKVwiIDogXCJcIixcblx0XHRcdFx0XHRkZWxpbSA9IChkZmx0LmluZGV4T2YoXCIgXCIpICE9PSAtMSkgPyBcIiBcIiA6IFwiLFwiLFxuXHRcdFx0XHRcdG51bVZhbHMgPSBkVmFscy5sZW5ndGgsXG5cdFx0XHRcdFx0ZFNmeCA9IChudW1WYWxzID4gMCkgPyBkVmFsc1swXS5yZXBsYWNlKF9udW1FeHAsIFwiXCIpIDogXCJcIixcblx0XHRcdFx0XHRmb3JtYXR0ZXI7XG5cdFx0XHRcdGlmICghbnVtVmFscykge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbih2KSB7cmV0dXJuIHY7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2xyKSB7XG5cdFx0XHRcdFx0Zm9ybWF0dGVyID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHRcdFx0dmFyIGNvbG9yLCB2YWxzLCBpLCBhO1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZih2KSA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdFx0XHR2ICs9IGRTZng7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKG11bHRpICYmIF9jb21tYXNPdXRzaWRlUGFyZW5FeHAudGVzdCh2KSkge1xuXHRcdFx0XHRcdFx0XHRhID0gdi5yZXBsYWNlKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAsIFwifFwiKS5zcGxpdChcInxcIik7XG5cdFx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0YVtpXSA9IGZvcm1hdHRlcihhW2ldKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYS5qb2luKFwiLFwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNvbG9yID0gKHYubWF0Y2goX2NvbG9yRXhwKSB8fCBbZENvbG9yXSlbMF07XG5cdFx0XHRcdFx0XHR2YWxzID0gdi5zcGxpdChjb2xvcikuam9pbihcIlwiKS5tYXRjaChfdmFsdWVzRXhwKSB8fCBbXTtcblx0XHRcdFx0XHRcdGkgPSB2YWxzLmxlbmd0aDtcblx0XHRcdFx0XHRcdGlmIChudW1WYWxzID4gaS0tKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICgrK2kgPCBudW1WYWxzKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFsc1tpXSA9IGNvbGxhcHNpYmxlID8gdmFsc1soKChpIC0gMSkgLyAyKSB8IDApXSA6IGRWYWxzW2ldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gcGZ4ICsgdmFscy5qb2luKGRlbGltKSArIGRlbGltICsgY29sb3IgKyBzZnggKyAodi5pbmRleE9mKFwiaW5zZXRcIikgIT09IC0xID8gXCIgaW5zZXRcIiA6IFwiXCIpO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0cmV0dXJuIGZvcm1hdHRlcjtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdGZvcm1hdHRlciA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0XHR2YXIgdmFscywgYSwgaTtcblx0XHRcdFx0XHRpZiAodHlwZW9mKHYpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHR2ICs9IGRTZng7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChtdWx0aSAmJiBfY29tbWFzT3V0c2lkZVBhcmVuRXhwLnRlc3QodikpIHtcblx0XHRcdFx0XHRcdGEgPSB2LnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCJ8XCIpLnNwbGl0KFwifFwiKTtcblx0XHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGFbaV0gPSBmb3JtYXR0ZXIoYVtpXSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gYS5qb2luKFwiLFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFscyA9IHYubWF0Y2goX3ZhbHVlc0V4cCkgfHwgW107XG5cdFx0XHRcdFx0aSA9IHZhbHMubGVuZ3RoO1xuXHRcdFx0XHRcdGlmIChudW1WYWxzID4gaS0tKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoKytpIDwgbnVtVmFscykge1xuXHRcdFx0XHRcdFx0XHR2YWxzW2ldID0gY29sbGFwc2libGUgPyB2YWxzWygoKGkgLSAxKSAvIDIpIHwgMCldIDogZFZhbHNbaV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBwZnggKyB2YWxzLmpvaW4oZGVsaW0pICsgc2Z4O1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRyZXR1cm4gZm9ybWF0dGVyO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSByZXR1cm5zIGEgZm9ybWF0dGVyIGZ1bmN0aW9uIHRoYXQncyB1c2VkIGZvciBlZGdlLXJlbGF0ZWQgdmFsdWVzIGxpa2UgbWFyZ2luVG9wLCBtYXJnaW5MZWZ0LCBwYWRkaW5nQm90dG9tLCBwYWRkaW5nUmlnaHQsIGV0Yy4gSnVzdCBwYXNzIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgcmVsYXRlZCB0byB0aGUgZWRnZXMuXG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHByb3BzIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgcHJvcGVydHkgbmFtZXMgaW4gb3JkZXIgZnJvbSB0b3AgdG8gbGVmdCwgbGlrZSBcIm1hcmdpblRvcCxtYXJnaW5SaWdodCxtYXJnaW5Cb3R0b20sbWFyZ2luTGVmdFwiXG5cdFx0XHQgKiBAcmV0dXJuIHtGdW5jdGlvbn0gYSBmb3JtYXR0ZXIgZnVuY3Rpb25cblx0XHRcdCAqL1xuXHRcdFx0X2dldEVkZ2VQYXJzZXIgPSBmdW5jdGlvbihwcm9wcykge1xuXHRcdFx0XHRwcm9wcyA9IHByb3BzLnNwbGl0KFwiLFwiKTtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdFx0XHR2YXIgYSA9IChlICsgXCJcIikuc3BsaXQoXCIgXCIpLFxuXHRcdFx0XHRcdFx0aTtcblx0XHRcdFx0XHR2YXJzID0ge307XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuXHRcdFx0XHRcdFx0dmFyc1twcm9wc1tpXV0gPSBhW2ldID0gYVtpXSB8fCBhWygoKGkgLSAxKSAvIDIpID4+IDApXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGNzc3AucGFyc2UodCwgdmFycywgcHQsIHBsdWdpbik7XG5cdFx0XHRcdH07XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBAcHJpdmF0ZSB1c2VkIHdoZW4gb3RoZXIgcGx1Z2lucyBtdXN0IHR3ZWVuIHZhbHVlcyBmaXJzdCwgbGlrZSBCZXppZXJQbHVnaW4gb3IgVGhyb3dQcm9wc1BsdWdpbiwgZXRjLiBUaGF0IHBsdWdpbidzIHNldFJhdGlvKCkgZ2V0cyBjYWxsZWQgZmlyc3Qgc28gdGhhdCB0aGUgdmFsdWVzIGFyZSB1cGRhdGVkLCBhbmQgdGhlbiB3ZSBsb29wIHRocm91Z2ggdGhlIE1pbmlQcm9wVHdlZW5zIHdoaWNoIGhhbmRsZSBjb3B5aW5nIHRoZSB2YWx1ZXMgaW50byB0aGVpciBhcHByb3ByaWF0ZSBzbG90cyBzbyB0aGF0IHRoZXkgY2FuIHRoZW4gYmUgYXBwbGllZCBjb3JyZWN0bHkgaW4gdGhlIG1haW4gQ1NTUGx1Z2luIHNldFJhdGlvKCkgbWV0aG9kLiBSZW1lbWJlciwgd2UgdHlwaWNhbGx5IGNyZWF0ZSBhIHByb3h5IG9iamVjdCB0aGF0IGhhcyBhIGJ1bmNoIG9mIHVuaXF1ZWx5LW5hbWVkIHByb3BlcnRpZXMgdGhhdCB3ZSBmZWVkIHRvIHRoZSBzdWItcGx1Z2luIGFuZCBpdCBkb2VzIGl0cyBtYWdpYyBub3JtYWxseSwgYW5kIHRoZW4gd2UgbXVzdCBpbnRlcnByZXQgdGhvc2UgdmFsdWVzIGFuZCBhcHBseSB0aGVtIHRvIHRoZSBjc3MgYmVjYXVzZSBvZnRlbiBudW1iZXJzIG11c3QgZ2V0IGNvbWJpbmVkL2NvbmNhdGVuYXRlZCwgc3VmZml4ZXMgYWRkZWQsIGV0Yy4gdG8gd29yayB3aXRoIGNzcywgbGlrZSBib3hTaGFkb3cgY291bGQgaGF2ZSA0IHZhbHVlcyBwbHVzIGEgY29sb3IuXG5cdFx0XHRfc2V0UGx1Z2luUmF0aW8gPSBfaW50ZXJuYWxzLl9zZXRQbHVnaW5SYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0UmF0aW8odik7XG5cdFx0XHRcdHZhciBkID0gdGhpcy5kYXRhLFxuXHRcdFx0XHRcdHByb3h5ID0gZC5wcm94eSxcblx0XHRcdFx0XHRtcHQgPSBkLmZpcnN0TVBULFxuXHRcdFx0XHRcdG1pbiA9IDAuMDAwMDAxLFxuXHRcdFx0XHRcdHZhbCwgcHQsIGksIHN0ciwgcDtcblx0XHRcdFx0d2hpbGUgKG1wdCkge1xuXHRcdFx0XHRcdHZhbCA9IHByb3h5W21wdC52XTtcblx0XHRcdFx0XHRpZiAobXB0LnIpIHtcblx0XHRcdFx0XHRcdHZhbCA9IE1hdGgucm91bmQodmFsKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbCA8IG1pbiAmJiB2YWwgPiAtbWluKSB7XG5cdFx0XHRcdFx0XHR2YWwgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtcHQudFttcHQucF0gPSB2YWw7XG5cdFx0XHRcdFx0bXB0ID0gbXB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkLmF1dG9Sb3RhdGUpIHtcblx0XHRcdFx0XHRkLmF1dG9Sb3RhdGUucm90YXRpb24gPSBkLm1vZCA/IGQubW9kKHByb3h5LnJvdGF0aW9uLCB0aGlzLnQpIDogcHJveHkucm90YXRpb247IC8vc3BlY2lhbCBjYXNlIGZvciBNb2RpZnlQbHVnaW4gdG8gaG9vayBpbnRvIGFuIGF1dG8tcm90YXRpbmcgYmV6aWVyXG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9hdCB0aGUgZW5kLCB3ZSBtdXN0IHNldCB0aGUgQ1NTUHJvcFR3ZWVuJ3MgXCJlXCIgKGVuZCkgdmFsdWUgZHluYW1pY2FsbHkgaGVyZSBiZWNhdXNlIHRoYXQncyB3aGF0IGlzIHVzZWQgaW4gdGhlIGZpbmFsIHNldFJhdGlvKCkgbWV0aG9kLiBTYW1lIGZvciBcImJcIiBhdCB0aGUgYmVnaW5uaW5nLlxuXHRcdFx0XHRpZiAodiA9PT0gMSB8fCB2ID09PSAwKSB7XG5cdFx0XHRcdFx0bXB0ID0gZC5maXJzdE1QVDtcblx0XHRcdFx0XHRwID0gKHYgPT09IDEpID8gXCJlXCIgOiBcImJcIjtcblx0XHRcdFx0XHR3aGlsZSAobXB0KSB7XG5cdFx0XHRcdFx0XHRwdCA9IG1wdC50O1xuXHRcdFx0XHRcdFx0aWYgKCFwdC50eXBlKSB7XG5cdFx0XHRcdFx0XHRcdHB0W3BdID0gcHQucyArIHB0LnhzMDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocHQudHlwZSA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRzdHIgPSBwdC54czAgKyBwdC5zICsgcHQueHMxO1xuXHRcdFx0XHRcdFx0XHRmb3IgKGkgPSAxOyBpIDwgcHQubDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RyICs9IHB0W1wieG5cIitpXSArIHB0W1wieHNcIisoaSsxKV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cHRbcF0gPSBzdHI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtcHQgPSBtcHQuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIEBjb25zdHJ1Y3RvciBVc2VkIGJ5IGEgZmV3IFNwZWNpYWxQcm9wcyB0byBob2xkIGltcG9ydGFudCB2YWx1ZXMgZm9yIHByb3hpZXMuIEZvciBleGFtcGxlLCBfcGFyc2VUb1Byb3h5KCkgY3JlYXRlcyBhIE1pbmlQcm9wVHdlZW4gaW5zdGFuY2UgZm9yIGVhY2ggcHJvcGVydHkgdGhhdCBtdXN0IGdldCB0d2VlbmVkIG9uIHRoZSBwcm94eSwgYW5kIHdlIHJlY29yZCB0aGUgb3JpZ2luYWwgcHJvcGVydHkgbmFtZSBhcyB3ZWxsIGFzIHRoZSB1bmlxdWUgb25lIHdlIGNyZWF0ZSBmb3IgdGhlIHByb3h5LCBwbHVzIHdoZXRoZXIgb3Igbm90IHRoZSB2YWx1ZSBuZWVkcyB0byBiZSByb3VuZGVkIHBsdXMgdGhlIG9yaWdpbmFsIHZhbHVlLlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IHRhcmdldCBvYmplY3Qgd2hvc2UgcHJvcGVydHkgd2UncmUgdHdlZW5pbmcgKG9mdGVuIGEgQ1NTUHJvcFR3ZWVuKVxuXHRcdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIHByb3BlcnR5IG5hbWVcblx0XHRcdCAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmd8b2JqZWN0KX0gdiB2YWx1ZVxuXHRcdFx0ICogQHBhcmFtIHtNaW5pUHJvcFR3ZWVuPX0gbmV4dCBuZXh0IE1pbmlQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0XG5cdFx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSByIGlmIHRydWUsIHRoZSB0d2VlbmVkIHZhbHVlIHNob3VsZCBiZSByb3VuZGVkIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcblx0XHRcdCAqL1xuXHRcdFx0TWluaVByb3BUd2VlbiA9IGZ1bmN0aW9uKHQsIHAsIHYsIG5leHQsIHIpIHtcblx0XHRcdFx0dGhpcy50ID0gdDtcblx0XHRcdFx0dGhpcy5wID0gcDtcblx0XHRcdFx0dGhpcy52ID0gdjtcblx0XHRcdFx0dGhpcy5yID0gcjtcblx0XHRcdFx0aWYgKG5leHQpIHtcblx0XHRcdFx0XHRuZXh0Ll9wcmV2ID0gdGhpcztcblx0XHRcdFx0XHR0aGlzLl9uZXh0ID0gbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBNb3N0IG90aGVyIHBsdWdpbnMgKGxpa2UgQmV6aWVyUGx1Z2luIGFuZCBUaHJvd1Byb3BzUGx1Z2luIGFuZCBvdGhlcnMpIGNhbiBvbmx5IHR3ZWVuIG51bWVyaWMgdmFsdWVzLCBidXQgQ1NTUGx1Z2luIG11c3QgYWNjb21tb2RhdGUgc3BlY2lhbCB2YWx1ZXMgdGhhdCBoYXZlIGEgYnVuY2ggb2YgZXh0cmEgZGF0YSAobGlrZSBhIHN1ZmZpeCBvciBzdHJpbmdzIGJldHdlZW4gbnVtZXJpYyB2YWx1ZXMsIGV0Yy4pLiBGb3IgZXhhbXBsZSwgYm94U2hhZG93IGhhcyB2YWx1ZXMgbGlrZSBcIjEwcHggMTBweCAyMHB4IDMwcHggcmdiKDI1NSwwLDApXCIgd2hpY2ggd291bGQgdXR0ZXJseSBjb25mdXNlIG90aGVyIHBsdWdpbnMuIFRoaXMgbWV0aG9kIGFsbG93cyB1cyB0byBzcGxpdCB0aGF0IGRhdGEgYXBhcnQgYW5kIGdyYWIgb25seSB0aGUgbnVtZXJpYyBkYXRhIGFuZCBhdHRhY2ggaXQgdG8gdW5pcXVlbHktbmFtZWQgcHJvcGVydGllcyBvZiBhIGdlbmVyaWMgcHJveHkgb2JqZWN0ICh7fSkgc28gdGhhdCB3ZSBjYW4gZmVlZCB0aGF0IHRvIHZpcnR1YWxseSBhbnkgcGx1Z2luIHRvIGhhdmUgdGhlIG51bWJlcnMgdHdlZW5lZC4gSG93ZXZlciwgd2UgbXVzdCBhbHNvIGtlZXAgdHJhY2sgb2Ygd2hpY2ggcHJvcGVydGllcyBmcm9tIHRoZSBwcm94eSBnbyB3aXRoIHdoaWNoIENTU1Byb3BUd2VlbiB2YWx1ZXMgYW5kIGluc3RhbmNlcy4gU28gd2UgY3JlYXRlIGEgbGlua2VkIGxpc3Qgb2YgTWluaVByb3BUd2VlbnMuIEVhY2ggb25lIHJlY29yZHMgYSB0YXJnZXQgKHRoZSBvcmlnaW5hbCBDU1NQcm9wVHdlZW4pLCBwcm9wZXJ0eSAobGlrZSBcInNcIiBvciBcInhuMVwiIG9yIFwieG4yXCIpIHRoYXQgd2UncmUgdHdlZW5pbmcgYW5kIHRoZSB1bmlxdWUgcHJvcGVydHkgbmFtZSB0aGF0IHdhcyB1c2VkIGZvciB0aGUgcHJveHkgKGxpa2UgXCJib3hTaGFkb3dfeG4xXCIgYW5kIFwiYm94U2hhZG93X3huMlwiKSBhbmQgd2hldGhlciBvciBub3QgdGhleSBuZWVkIHRvIGJlIHJvdW5kZWQuIFRoYXQgd2F5LCBpbiB0aGUgX3NldFBsdWdpblJhdGlvKCkgbWV0aG9kIHdlIGNhbiBzaW1wbHkgY29weSB0aGUgdmFsdWVzIG92ZXIgZnJvbSB0aGUgcHJveHkgdG8gdGhlIENTU1Byb3BUd2VlbiBpbnN0YW5jZShzKS4gVGhlbiwgd2hlbiB0aGUgbWFpbiBDU1NQbHVnaW4gc2V0UmF0aW8oKSBtZXRob2QgcnVucyBhbmQgYXBwbGllcyB0aGUgQ1NTUHJvcFR3ZWVuIHZhbHVlcyBhY2NvcmRpbmdseSwgdGhleSdyZSB1cGRhdGVkIG5pY2VseS4gU28gdGhlIGV4dGVybmFsIHBsdWdpbiB0d2VlbnMgdGhlIG51bWJlcnMsIF9zZXRQbHVnaW5SYXRpbygpIGNvcGllcyB0aGVtIG92ZXIsIGFuZCBzZXRSYXRpbygpIGFjdHMgbm9ybWFsbHksIGFwcGx5aW5nIGNzcy1zcGVjaWZpYyB2YWx1ZXMgdG8gdGhlIGVsZW1lbnQuXG5cdFx0XHQgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIG9iamVjdCB0aGF0IGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG5cdFx0XHQgKiAgLSBwcm94eTogYSBnZW5lcmljIG9iamVjdCBjb250YWluaW5nIHRoZSBzdGFydGluZyB2YWx1ZXMgZm9yIGFsbCB0aGUgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgdHdlZW5lZCBieSB0aGUgZXh0ZXJuYWwgcGx1Z2luLiAgVGhpcyBpcyB3aGF0IHdlIGZlZWQgdG8gdGhlIGV4dGVybmFsIF9vbkluaXRUd2VlbigpIGFzIHRoZSB0YXJnZXRcblx0XHRcdCAqICAtIGVuZDogYSBnZW5lcmljIG9iamVjdCBjb250YWluaW5nIHRoZSBlbmRpbmcgdmFsdWVzIGZvciBhbGwgdGhlIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIHR3ZWVuZWQgYnkgdGhlIGV4dGVybmFsIHBsdWdpbi4gVGhpcyBpcyB3aGF0IHdlIGZlZWQgdG8gdGhlIGV4dGVybmFsIHBsdWdpbidzIF9vbkluaXRUd2VlbigpIGFzIHRoZSBkZXN0aW5hdGlvbiB2YWx1ZXNcblx0XHRcdCAqICAtIGZpcnN0TVBUOiB0aGUgZmlyc3QgTWluaVByb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Rcblx0XHRcdCAqICAtIHB0OiB0aGUgZmlyc3QgQ1NTUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdCB0aGF0IHdhcyBjcmVhdGVkIHdoZW4gcGFyc2luZy4gSWYgc2hhbGxvdyBpcyB0cnVlLCB0aGlzIGxpbmtlZCBsaXN0IHdpbGwgTk9UIGF0dGFjaCB0byB0aGUgb25lIHBhc3NlZCBpbnRvIHRoZSBfcGFyc2VUb1Byb3h5KCkgYXMgdGhlIFwicHRcIiAoNHRoKSBwYXJhbWV0ZXIuXG5cdFx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgdGFyZ2V0IG9iamVjdCB0byBiZSB0d2VlbmVkXG5cdFx0XHQgKiBAcGFyYW0geyEoT2JqZWN0fHN0cmluZyl9IHZhcnMgdGhlIG9iamVjdCBjb250YWluaW5nIHRoZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdHdlZW5pbmcgdmFsdWVzICh0eXBpY2FsbHkgdGhlIGVuZC9kZXN0aW5hdGlvbiB2YWx1ZXMpIHRoYXQgc2hvdWxkIGJlIHBhcnNlZFxuXHRcdFx0ICogQHBhcmFtIHshQ1NTUGx1Z2lufSBjc3NwIFRoZSBDU1NQbHVnaW4gaW5zdGFuY2Vcblx0XHRcdCAqIEBwYXJhbSB7Q1NTUHJvcFR3ZWVuPX0gcHQgdGhlIG5leHQgQ1NTUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdFxuXHRcdFx0ICogQHBhcmFtIHtUd2VlblBsdWdpbj19IHBsdWdpbiB0aGUgZXh0ZXJuYWwgVHdlZW5QbHVnaW4gaW5zdGFuY2UgdGhhdCB3aWxsIGJlIGhhbmRsaW5nIHR3ZWVuaW5nIHRoZSBudW1lcmljIHZhbHVlc1xuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gc2hhbGxvdyBpZiB0cnVlLCB0aGUgcmVzdWx0aW5nIGxpbmtlZCBsaXN0IGZyb20gdGhlIHBhcnNlIHdpbGwgTk9UIGJlIGF0dGFjaGVkIHRvIHRoZSBDU1NQcm9wVHdlZW4gdGhhdCB3YXMgcGFzc2VkIGluIGFzIHRoZSBcInB0XCIgKDR0aCkgcGFyYW1ldGVyLlxuXHRcdFx0ICogQHJldHVybiBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6IHByb3h5LCBlbmQsIGZpcnN0TVBULCBhbmQgcHQgKHNlZSBhYm92ZSBmb3IgZGVzY3JpcHRpb25zKVxuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VUb1Byb3h5ID0gX2ludGVybmFscy5fcGFyc2VUb1Byb3h5ID0gZnVuY3Rpb24odCwgdmFycywgY3NzcCwgcHQsIHBsdWdpbiwgc2hhbGxvdykge1xuXHRcdFx0XHR2YXIgYnB0ID0gcHQsXG5cdFx0XHRcdFx0c3RhcnQgPSB7fSxcblx0XHRcdFx0XHRlbmQgPSB7fSxcblx0XHRcdFx0XHR0cmFuc2Zvcm0gPSBjc3NwLl90cmFuc2Zvcm0sXG5cdFx0XHRcdFx0b2xkRm9yY2UgPSBfZm9yY2VQVCxcblx0XHRcdFx0XHRpLCBwLCB4cCwgbXB0LCBmaXJzdFBUO1xuXHRcdFx0XHRjc3NwLl90cmFuc2Zvcm0gPSBudWxsO1xuXHRcdFx0XHRfZm9yY2VQVCA9IHZhcnM7XG5cdFx0XHRcdHB0ID0gZmlyc3RQVCA9IGNzc3AucGFyc2UodCwgdmFycywgcHQsIHBsdWdpbik7XG5cdFx0XHRcdF9mb3JjZVBUID0gb2xkRm9yY2U7XG5cdFx0XHRcdC8vYnJlYWsgb2ZmIGZyb20gdGhlIGxpbmtlZCBsaXN0IHNvIHRoZSBuZXcgb25lcyBhcmUgaXNvbGF0ZWQuXG5cdFx0XHRcdGlmIChzaGFsbG93KSB7XG5cdFx0XHRcdFx0Y3NzcC5fdHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuXHRcdFx0XHRcdGlmIChicHQpIHtcblx0XHRcdFx0XHRcdGJwdC5fcHJldiA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoYnB0Ll9wcmV2KSB7XG5cdFx0XHRcdFx0XHRcdGJwdC5fcHJldi5fbmV4dCA9IG51bGw7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHdoaWxlIChwdCAmJiBwdCAhPT0gYnB0KSB7XG5cdFx0XHRcdFx0aWYgKHB0LnR5cGUgPD0gMSkge1xuXHRcdFx0XHRcdFx0cCA9IHB0LnA7XG5cdFx0XHRcdFx0XHRlbmRbcF0gPSBwdC5zICsgcHQuYztcblx0XHRcdFx0XHRcdHN0YXJ0W3BdID0gcHQucztcblx0XHRcdFx0XHRcdGlmICghc2hhbGxvdykge1xuXHRcdFx0XHRcdFx0XHRtcHQgPSBuZXcgTWluaVByb3BUd2VlbihwdCwgXCJzXCIsIHAsIG1wdCwgcHQucik7XG5cdFx0XHRcdFx0XHRcdHB0LmMgPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHB0LnR5cGUgPT09IDEpIHtcblx0XHRcdFx0XHRcdFx0aSA9IHB0Lmw7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0eHAgPSBcInhuXCIgKyBpO1xuXHRcdFx0XHRcdFx0XHRcdHAgPSBwdC5wICsgXCJfXCIgKyB4cDtcblx0XHRcdFx0XHRcdFx0XHRlbmRbcF0gPSBwdC5kYXRhW3hwXTtcblx0XHRcdFx0XHRcdFx0XHRzdGFydFtwXSA9IHB0W3hwXTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIXNoYWxsb3cpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1wdCA9IG5ldyBNaW5pUHJvcFR3ZWVuKHB0LCB4cCwgcCwgbXB0LCBwdC5yeHBbeHBdKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4ge3Byb3h5OnN0YXJ0LCBlbmQ6ZW5kLCBmaXJzdE1QVDptcHQsIHB0OmZpcnN0UFR9O1xuXHRcdFx0fSxcblxuXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQGNvbnN0cnVjdG9yIEVhY2ggcHJvcGVydHkgdGhhdCBpcyB0d2VlbmVkIGhhcyBhdCBsZWFzdCBvbmUgQ1NTUHJvcFR3ZWVuIGFzc29jaWF0ZWQgd2l0aCBpdC4gVGhlc2UgaW5zdGFuY2VzIHN0b3JlIGltcG9ydGFudCBpbmZvcm1hdGlvbiBsaWtlIHRoZSB0YXJnZXQsIHByb3BlcnR5LCBzdGFydGluZyB2YWx1ZSwgYW1vdW50IG9mIGNoYW5nZSwgZXRjLiBUaGV5IGNhbiBhbHNvIG9wdGlvbmFsbHkgaGF2ZSBhIG51bWJlciBvZiBcImV4dHJhXCIgc3RyaW5ncyBhbmQgbnVtZXJpYyB2YWx1ZXMgbmFtZWQgeHMxLCB4bjEsIHhzMiwgeG4yLCB4czMsIHhuMywgZXRjLiB3aGVyZSBcInNcIiBpbmRpY2F0ZXMgc3RyaW5nIGFuZCBcIm5cIiBpbmRpY2F0ZXMgbnVtYmVyLiBUaGVzZSBjYW4gYmUgcGllY2VkIHRvZ2V0aGVyIGluIGEgY29tcGxleC12YWx1ZSB0d2VlbiAodHlwZToxKSB0aGF0IGhhcyBhbHRlcm5hdGluZyB0eXBlcyBvZiBkYXRhIGxpa2UgYSBzdHJpbmcsIG51bWJlciwgc3RyaW5nLCBudW1iZXIsIGV0Yy4gRm9yIGV4YW1wbGUsIGJveFNoYWRvdyBjb3VsZCBiZSBcIjVweCA1cHggOHB4IHJnYigxMDIsIDEwMiwgNTEpXCIuIEluIHRoYXQgdmFsdWUsIHRoZXJlIGFyZSA2IG51bWJlcnMgdGhhdCBtYXkgbmVlZCB0byB0d2VlbiBhbmQgdGhlbiBwaWVjZWQgYmFjayB0b2dldGhlciBpbnRvIGEgc3RyaW5nIGFnYWluIHdpdGggc3BhY2VzLCBzdWZmaXhlcywgZXRjLiB4czAgaXMgc3BlY2lhbCBpbiB0aGF0IGl0IHN0b3JlcyB0aGUgc3VmZml4IGZvciBzdGFuZGFyZCAodHlwZTowKSB0d2VlbnMsIC1PUi0gdGhlIGZpcnN0IHN0cmluZyAocHJlZml4KSBpbiBhIGNvbXBsZXgtdmFsdWUgKHR5cGU6MSkgQ1NTUHJvcFR3ZWVuIC1PUi0gaXQgY2FuIGJlIHRoZSBub24tdHdlZW5pbmcgdmFsdWUgaW4gYSB0eXBlOi0xIENTU1Byb3BUd2Vlbi4gV2UgZG8gdGhpcyB0byBjb25zZXJ2ZSBtZW1vcnkuXG5cdFx0XHQgKiBDU1NQcm9wVHdlZW5zIGhhdmUgdGhlIGZvbGxvd2luZyBvcHRpb25hbCBwcm9wZXJ0aWVzIGFzIHdlbGwgKG5vdCBkZWZpbmVkIHRocm91Z2ggdGhlIGNvbnN0cnVjdG9yKTpcblx0XHRcdCAqICAtIGw6IExlbmd0aCBpbiB0ZXJtcyBvZiB0aGUgbnVtYmVyIG9mIGV4dHJhIHByb3BlcnRpZXMgdGhhdCB0aGUgQ1NTUHJvcFR3ZWVuIGhhcyAoZGVmYXVsdDogMCkuIEZvciBleGFtcGxlLCBmb3IgYSBib3hTaGFkb3cgd2UgbWF5IG5lZWQgdG8gdHdlZW4gNSBudW1iZXJzIGluIHdoaWNoIGNhc2UgbCB3b3VsZCBiZSA1OyBLZWVwIGluIG1pbmQgdGhhdCB0aGUgc3RhcnQvZW5kIHZhbHVlcyBmb3IgdGhlIGZpcnN0IG51bWJlciB0aGF0J3MgdHdlZW5lZCBhcmUgYWx3YXlzIHN0b3JlZCBpbiB0aGUgcyBhbmQgYyBwcm9wZXJ0aWVzIHRvIGNvbnNlcnZlIG1lbW9yeS4gQWxsIGFkZGl0aW9uYWwgdmFsdWVzIHRoZXJlYWZ0ZXIgYXJlIHN0b3JlZCBpbiB4bjEsIHhuMiwgZXRjLlxuXHRcdFx0ICogIC0geGZpcnN0OiBUaGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IHN1Yi1DU1NQcm9wVHdlZW5zIHRoYXQgYXJlIHR3ZWVuaW5nIHByb3BlcnRpZXMgb2YgdGhpcyBpbnN0YW5jZS4gRm9yIGV4YW1wbGUsIHdlIG1heSBzcGxpdCB1cCBhIGJveFNoYWRvdyB0d2VlbiBzbyB0aGF0IHRoZXJlJ3MgYSBtYWluIENTU1Byb3BUd2VlbiBvZiB0eXBlOjEgdGhhdCBoYXMgdmFyaW91cyB4cyogYW5kIHhuKiB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBoLXNoYWRvdywgdi1zaGFkb3csIGJsdXIsIGNvbG9yLCBldGMuIFRoZW4gd2Ugc3Bhd24gYSBDU1NQcm9wVHdlZW4gZm9yIGVhY2ggb2YgdGhvc2UgdGhhdCBoYXMgYSBoaWdoZXIgcHJpb3JpdHkgYW5kIHJ1bnMgQkVGT1JFIHRoZSBtYWluIENTU1Byb3BUd2VlbiBzbyB0aGF0IHRoZSB2YWx1ZXMgYXJlIGFsbCBzZXQgYnkgdGhlIHRpbWUgaXQgbmVlZHMgdG8gcmUtYXNzZW1ibGUgdGhlbS4gVGhlIHhmaXJzdCBnaXZlcyB1cyBhbiBlYXN5IHdheSB0byBpZGVudGlmeSB0aGUgZmlyc3Qgb25lIGluIHRoYXQgY2hhaW4gd2hpY2ggdHlwaWNhbGx5IGVuZHMgYXQgdGhlIG1haW4gb25lIChiZWNhdXNlIHRoZXkncmUgYWxsIHByZXBlbmRlIHRvIHRoZSBsaW5rZWQgbGlzdClcblx0XHRcdCAqICAtIHBsdWdpbjogVGhlIFR3ZWVuUGx1Z2luIGluc3RhbmNlIHRoYXQgd2lsbCBoYW5kbGUgdGhlIHR3ZWVuaW5nIG9mIGFueSBjb21wbGV4IHZhbHVlcy4gRm9yIGV4YW1wbGUsIHNvbWV0aW1lcyB3ZSBkb24ndCB3YW50IHRvIHVzZSBub3JtYWwgc3VidHdlZW5zIChsaWtlIHhmaXJzdCByZWZlcnMgdG8pIHRvIHR3ZWVuIHRoZSB2YWx1ZXMgLSB3ZSBtaWdodCB3YW50IFRocm93UHJvcHNQbHVnaW4gb3IgQmV6aWVyUGx1Z2luIHNvbWUgb3RoZXIgcGx1Z2luIHRvIGRvIHRoZSBhY3R1YWwgdHdlZW5pbmcsIHNvIHdlIGNyZWF0ZSBhIHBsdWdpbiBpbnN0YW5jZSBhbmQgc3RvcmUgYSByZWZlcmVuY2UgaGVyZS4gV2UgbmVlZCB0aGlzIHJlZmVyZW5jZSBzbyB0aGF0IGlmIHdlIGdldCBhIHJlcXVlc3QgdG8gcm91bmQgdmFsdWVzIG9yIGRpc2FibGUgYSB0d2Vlbiwgd2UgY2FuIHBhc3MgYWxvbmcgdGhhdCByZXF1ZXN0LlxuXHRcdFx0ICogIC0gZGF0YTogQXJiaXRyYXJ5IGRhdGEgdGhhdCBuZWVkcyB0byBiZSBzdG9yZWQgd2l0aCB0aGUgQ1NTUHJvcFR3ZWVuLiBUeXBpY2FsbHkgaWYgd2UncmUgZ29pbmcgdG8gaGF2ZSBhIHBsdWdpbiBoYW5kbGUgdGhlIHR3ZWVuaW5nIG9mIGEgY29tcGxleC12YWx1ZSB0d2Vlbiwgd2UgY3JlYXRlIGEgZ2VuZXJpYyBvYmplY3QgdGhhdCBzdG9yZXMgdGhlIEVORCB2YWx1ZXMgdGhhdCB3ZSdyZSB0d2VlbmluZyB0byBhbmQgdGhlIENTU1Byb3BUd2VlbidzIHhzMSwgeHMyLCBldGMuIGhhdmUgdGhlIHN0YXJ0aW5nIHZhbHVlcy4gV2Ugc3RvcmUgdGhhdCBvYmplY3QgYXMgZGF0YS4gVGhhdCB3YXksIHdlIGNhbiBzaW1wbHkgcGFzcyB0aGF0IG9iamVjdCB0byB0aGUgcGx1Z2luIGFuZCB1c2UgdGhlIENTU1Byb3BUd2VlbiBhcyB0aGUgdGFyZ2V0LlxuXHRcdFx0ICogIC0gc2V0UmF0aW86IE9ubHkgdXNlZCBmb3IgdHlwZToyIHR3ZWVucyB0aGF0IHJlcXVpcmUgY3VzdG9tIGZ1bmN0aW9uYWxpdHkuIEluIHRoaXMgY2FzZSwgd2UgY2FsbCB0aGUgQ1NTUHJvcFR3ZWVuJ3Mgc2V0UmF0aW8oKSBtZXRob2QgYW5kIHBhc3MgdGhlIHJhdGlvIGVhY2ggdGltZSB0aGUgdHdlZW4gdXBkYXRlcy4gVGhpcyBpc24ndCBxdWl0ZSBhcyBlZmZpY2llbnQgYXMgZG9pbmcgdGhpbmdzIGRpcmVjdGx5IGluIHRoZSBDU1NQbHVnaW4ncyBzZXRSYXRpbygpIG1ldGhvZCwgYnV0IGl0J3MgdmVyeSBjb252ZW5pZW50IGFuZCBmbGV4aWJsZS5cblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCBUYXJnZXQgb2JqZWN0IHdob3NlIHByb3BlcnR5IHdpbGwgYmUgdHdlZW5lZC4gT2Z0ZW4gYSBET00gZWxlbWVudCwgYnV0IG5vdCBhbHdheXMuIEl0IGNvdWxkIGJlIGFueXRoaW5nLlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9IHAgUHJvcGVydHkgdG8gdHdlZW4gKG5hbWUpLiBGb3IgZXhhbXBsZSwgdG8gdHdlZW4gZWxlbWVudC53aWR0aCwgcCB3b3VsZCBiZSBcIndpZHRoXCIuXG5cdFx0XHQgKiBAcGFyYW0ge251bWJlcn0gcyBTdGFydGluZyBudW1lcmljIHZhbHVlXG5cdFx0XHQgKiBAcGFyYW0ge251bWJlcn0gYyBDaGFuZ2UgaW4gbnVtZXJpYyB2YWx1ZSBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIGVudGlyZSB0d2Vlbi4gRm9yIGV4YW1wbGUsIGlmIGVsZW1lbnQud2lkdGggc3RhcnRzIGF0IDUgYW5kIHNob3VsZCBlbmQgYXQgMTAwLCBjIHdvdWxkIGJlIDk1LlxuXHRcdFx0ICogQHBhcmFtIHtDU1NQcm9wVHdlZW49fSBuZXh0IFRoZSBuZXh0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3QuIElmIG9uZSBpcyBkZWZpbmVkLCB3ZSB3aWxsIGRlZmluZSBpdHMgX3ByZXYgYXMgdGhlIG5ldyBpbnN0YW5jZSwgYW5kIHRoZSBuZXcgaW5zdGFuY2UncyBfbmV4dCB3aWxsIGJlIHBvaW50ZWQgYXQgaXQuXG5cdFx0XHQgKiBAcGFyYW0ge251bWJlcj19IHR5cGUgVGhlIHR5cGUgb2YgQ1NTUHJvcFR3ZWVuIHdoZXJlIC0xID0gYSBub24tdHdlZW5pbmcgdmFsdWUsIDAgPSBhIHN0YW5kYXJkIHNpbXBsZSB0d2VlbiwgMSA9IGEgY29tcGxleCB2YWx1ZSAobGlrZSBvbmUgdGhhdCBoYXMgbXVsdGlwbGUgbnVtYmVycyBpbiBhIGNvbW1hLSBvciBzcGFjZS1kZWxpbWl0ZWQgc3RyaW5nIGxpa2UgYm9yZGVyOlwiMXB4IHNvbGlkIHJlZFwiKSwgYW5kIDIgPSBvbmUgdGhhdCB1c2VzIGEgY3VzdG9tIHNldFJhdGlvIGZ1bmN0aW9uIHRoYXQgZG9lcyBhbGwgb2YgdGhlIHdvcmsgb2YgYXBwbHlpbmcgdGhlIHZhbHVlcyBvbiBlYWNoIHVwZGF0ZS5cblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gbiBOYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBvdmVyd3JpdGluZyBwdXJwb3NlcyB3aGljaCBpcyB0eXBpY2FsbHkgdGhlIHNhbWUgYXMgcCBidXQgbm90IGFsd2F5cy4gRm9yIGV4YW1wbGUsIHdlIG1heSBuZWVkIHRvIGNyZWF0ZSBhIHN1YnR3ZWVuIGZvciB0aGUgMm5kIHBhcnQgb2YgYSBcImNsaXA6cmVjdCguLi4pXCIgdHdlZW4gaW4gd2hpY2ggY2FzZSBcInBcIiBtaWdodCBiZSB4czEgYnV0IFwiblwiIGlzIHN0aWxsIFwiY2xpcFwiXG5cdFx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSByIElmIHRydWUsIHRoZSB2YWx1ZShzKSBzaG91bGQgYmUgcm91bmRlZFxuXHRcdFx0ICogQHBhcmFtIHtudW1iZXI9fSBwciBQcmlvcml0eSBpbiB0aGUgbGlua2VkIGxpc3Qgb3JkZXIuIEhpZ2hlciBwcmlvcml0eSBDU1NQcm9wVHdlZW5zIHdpbGwgYmUgdXBkYXRlZCBiZWZvcmUgbG93ZXIgcHJpb3JpdHkgb25lcy4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgMC5cblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gYiBCZWdpbm5pbmcgdmFsdWUuIFdlIHN0b3JlIHRoaXMgdG8gZW5zdXJlIHRoYXQgaXQgaXMgRVhBQ1RMWSB3aGF0IGl0IHdhcyB3aGVuIHRoZSB0d2VlbiBiZWdhbiB3aXRob3V0IGFueSByaXNrIG9mIGludGVycHJldGF0aW9uIGlzc3Vlcy5cblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gZSBFbmRpbmcgdmFsdWUuIFdlIHN0b3JlIHRoaXMgdG8gZW5zdXJlIHRoYXQgaXQgaXMgRVhBQ1RMWSB3aGF0IHRoZSB1c2VyIGRlZmluZWQgYXQgdGhlIGVuZCBvZiB0aGUgdHdlZW4gd2l0aG91dCBhbnkgcmlzayBvZiBpbnRlcnByZXRhdGlvbiBpc3N1ZXMuXG5cdFx0XHQgKi9cblx0XHRcdENTU1Byb3BUd2VlbiA9IF9pbnRlcm5hbHMuQ1NTUHJvcFR3ZWVuID0gZnVuY3Rpb24odCwgcCwgcywgYywgbmV4dCwgdHlwZSwgbiwgciwgcHIsIGIsIGUpIHtcblx0XHRcdFx0dGhpcy50ID0gdDsgLy90YXJnZXRcblx0XHRcdFx0dGhpcy5wID0gcDsgLy9wcm9wZXJ0eVxuXHRcdFx0XHR0aGlzLnMgPSBzOyAvL3N0YXJ0aW5nIHZhbHVlXG5cdFx0XHRcdHRoaXMuYyA9IGM7IC8vY2hhbmdlIHZhbHVlXG5cdFx0XHRcdHRoaXMubiA9IG4gfHwgcDsgLy9uYW1lIHRoYXQgdGhpcyBDU1NQcm9wVHdlZW4gc2hvdWxkIGJlIGFzc29jaWF0ZWQgdG8gKHVzdWFsbHkgdGhlIHNhbWUgYXMgcCwgYnV0IG5vdCBhbHdheXMgLSBuIGlzIHdoYXQgb3ZlcndyaXRpbmcgbG9va3MgYXQpXG5cdFx0XHRcdGlmICghKHQgaW5zdGFuY2VvZiBDU1NQcm9wVHdlZW4pKSB7XG5cdFx0XHRcdFx0X292ZXJ3cml0ZVByb3BzLnB1c2godGhpcy5uKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnIgPSByOyAvL3JvdW5kIChib29sZWFuKVxuXHRcdFx0XHR0aGlzLnR5cGUgPSB0eXBlIHx8IDA7IC8vMCA9IG5vcm1hbCB0d2VlbiwgLTEgPSBub24tdHdlZW5pbmcgKGluIHdoaWNoIGNhc2UgeHMwIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgdGFyZ2V0J3MgcHJvcGVydHksIGxpa2UgdHAudFt0cC5wXSA9IHRwLnhzMCksIDEgPSBjb21wbGV4LXZhbHVlIFNwZWNpYWxQcm9wLCAyID0gY3VzdG9tIHNldFJhdGlvKCkgdGhhdCBkb2VzIGFsbCB0aGUgd29ya1xuXHRcdFx0XHRpZiAocHIpIHtcblx0XHRcdFx0XHR0aGlzLnByID0gcHI7XG5cdFx0XHRcdFx0X2hhc1ByaW9yaXR5ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmIgPSAoYiA9PT0gdW5kZWZpbmVkKSA/IHMgOiBiO1xuXHRcdFx0XHR0aGlzLmUgPSAoZSA9PT0gdW5kZWZpbmVkKSA/IHMgKyBjIDogZTtcblx0XHRcdFx0aWYgKG5leHQpIHtcblx0XHRcdFx0XHR0aGlzLl9uZXh0ID0gbmV4dDtcblx0XHRcdFx0XHRuZXh0Ll9wcmV2ID0gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0X2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kLCBuZXh0LCBvdmVyd3JpdGVQcm9wKSB7IC8vY2xlYW5zIHVwIHNvbWUgY29kZSByZWR1bmRhbmNpZXMgYW5kIGhlbHBzIG1pbmlmaWNhdGlvbi4gSnVzdCBhIGZhc3Qgd2F5IHRvIGFkZCBhIE5VTUVSSUMgbm9uLXR3ZWVuaW5nIENTU1Byb3BUd2VlblxuXHRcdFx0XHR2YXIgcHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHRhcmdldCwgcHJvcCwgc3RhcnQsIGVuZCAtIHN0YXJ0LCBuZXh0LCAtMSwgb3ZlcndyaXRlUHJvcCk7XG5cdFx0XHRcdHB0LmIgPSBzdGFydDtcblx0XHRcdFx0cHQuZSA9IHB0LnhzMCA9IGVuZDtcblx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBUYWtlcyBhIHRhcmdldCwgdGhlIGJlZ2lubmluZyB2YWx1ZSBhbmQgZW5kaW5nIHZhbHVlIChhcyBzdHJpbmdzKSBhbmQgcGFyc2VzIHRoZW0gaW50byBhIENTU1Byb3BUd2VlbiAocG9zc2libHkgd2l0aCBjaGlsZCBDU1NQcm9wVHdlZW5zKSB0aGF0IGFjY29tbW9kYXRlcyBtdWx0aXBsZSBudW1iZXJzLCBjb2xvcnMsIGNvbW1hLWRlbGltaXRlZCB2YWx1ZXMsIGV0Yy4gRm9yIGV4YW1wbGU6XG5cdFx0XHQgKiBzcC5wYXJzZUNvbXBsZXgoZWxlbWVudCwgXCJib3hTaGFkb3dcIiwgXCI1cHggMTBweCAyMHB4IHJnYigyNTUsMTAyLDUxKVwiLCBcIjBweCAwcHggMHB4IHJlZFwiLCB0cnVlLCBcIjBweCAwcHggMHB4IHJnYigwLDAsMCwwKVwiLCBwdCk7XG5cdFx0XHQgKiBJdCB3aWxsIHdhbGsgdGhyb3VnaCB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzICh3aGljaCBzaG91bGQgYmUgaW4gdGhlIHNhbWUgZm9ybWF0IHdpdGggdGhlIHNhbWUgbnVtYmVyIGFuZCB0eXBlIG9mIHZhbHVlcykgYW5kIGZpZ3VyZSBvdXQgd2hpY2ggcGFydHMgYXJlIG51bWJlcnMsIHdoYXQgc3RyaW5ncyBzZXBhcmF0ZSB0aGUgbnVtZXJpYy90d2VlbmFibGUgdmFsdWVzLCBhbmQgdGhlbiBjcmVhdGUgdGhlIENTU1Byb3BUd2VlbnMgYWNjb3JkaW5nbHkuIElmIGEgcGx1Z2luIGlzIGRlZmluZWQsIG5vIGNoaWxkIENTU1Byb3BUd2VlbnMgd2lsbCBiZSBjcmVhdGVkLiBJbnN0ZWFkLCB0aGUgZW5kaW5nIHZhbHVlcyB3aWxsIGJlIHN0b3JlZCBpbiB0aGUgXCJkYXRhXCIgcHJvcGVydHkgb2YgdGhlIHJldHVybmVkIENTU1Byb3BUd2VlbiBsaWtlOiB7czotNSwgeG4xOi0xMCwgeG4yOi0yMCwgeG4zOjI1NSwgeG40OjAsIHhuNTowfSBzbyB0aGF0IGl0IGNhbiBiZSBmZWQgdG8gYW55IG90aGVyIHBsdWdpbiBhbmQgaXQnbGwgYmUgcGxhaW4gbnVtZXJpYyB0d2VlbnMgYnV0IHRoZSByZWNvbXBvc2l0aW9uIG9mIHRoZSBjb21wbGV4IHZhbHVlIHdpbGwgYmUgaGFuZGxlZCBpbnNpZGUgQ1NTUGx1Z2luJ3Mgc2V0UmF0aW8oKS5cblx0XHRcdCAqIElmIGEgc2V0UmF0aW8gaXMgZGVmaW5lZCwgdGhlIHR5cGUgb2YgdGhlIENTU1Byb3BUd2VlbiB3aWxsIGJlIHNldCB0byAyIGFuZCByZWNvbXBvc2l0aW9uIG9mIHRoZSB2YWx1ZXMgd2lsbCBiZSB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhhdCBtZXRob2QuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCB3aG9zZSBwcm9wZXJ0eSB3aWxsIGJlIHR3ZWVuZWRcblx0XHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gcCBQcm9wZXJ0eSB0aGF0IHdpbGwgYmUgdHdlZW5lZCAoaXRzIG5hbWUsIGxpa2UgXCJsZWZ0XCIgb3IgXCJiYWNrZ3JvdW5kQ29sb3JcIiBvciBcImJveFNoYWRvd1wiKVxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9IGIgQmVnaW5uaW5nIHZhbHVlXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gZSBFbmRpbmcgdmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xycyBJZiB0cnVlLCB0aGUgdmFsdWUgY291bGQgY29udGFpbiBhIGNvbG9yIHZhbHVlIGxpa2UgXCJyZ2IoMjU1LDAsMClcIiBvciBcIiNGMDBcIiBvciBcInJlZFwiLiBUaGUgZGVmYXVsdCBpcyBmYWxzZSwgc28gbm8gY29sb3JzIHdpbGwgYmUgcmVjb2duaXplZCAoYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24pXG5cdFx0XHQgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyfE9iamVjdCl9IGRmbHQgVGhlIGRlZmF1bHQgYmVnaW5uaW5nIHZhbHVlIHRoYXQgc2hvdWxkIGJlIHVzZWQgaWYgbm8gdmFsaWQgYmVnaW5uaW5nIHZhbHVlIGlzIGRlZmluZWQgb3IgaWYgdGhlIG51bWJlciBvZiB2YWx1ZXMgaW5zaWRlIHRoZSBjb21wbGV4IGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBkb24ndCBtYXRjaFxuXHRcdFx0ICogQHBhcmFtIHs/Q1NTUHJvcFR3ZWVufSBwdCBDU1NQcm9wVHdlZW4gaW5zdGFuY2UgdGhhdCBpcyB0aGUgY3VycmVudCBoZWFkIG9mIHRoZSBsaW5rZWQgbGlzdCAod2UnbGwgcHJlcGVuZCB0byB0aGlzKS5cblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyPX0gcHIgUHJpb3JpdHkgaW4gdGhlIGxpbmtlZCBsaXN0IG9yZGVyLiBIaWdoZXIgcHJpb3JpdHkgcHJvcGVydGllcyB3aWxsIGJlIHVwZGF0ZWQgYmVmb3JlIGxvd2VyIHByaW9yaXR5IG9uZXMuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIDAuXG5cdFx0XHQgKiBAcGFyYW0ge1R3ZWVuUGx1Z2luPX0gcGx1Z2luIElmIGEgcGx1Z2luIHNob3VsZCBoYW5kbGUgdGhlIHR3ZWVuaW5nIG9mIGV4dHJhIHByb3BlcnRpZXMsIHBhc3MgdGhlIHBsdWdpbiBpbnN0YW5jZSBoZXJlLiBJZiBvbmUgaXMgZGVmaW5lZCwgdGhlbiBOTyBzdWJ0d2VlbnMgd2lsbCBiZSBjcmVhdGVkIGZvciBhbnkgZXh0cmEgcHJvcGVydGllcyAodGhlIHByb3BlcnRpZXMgd2lsbCBiZSBjcmVhdGVkIC0ganVzdCBub3QgYWRkaXRpb25hbCBDU1NQcm9wVHdlZW4gaW5zdGFuY2VzIHRvIHR3ZWVuIHRoZW0pIGJlY2F1c2UgdGhlIHBsdWdpbiBpcyBleHBlY3RlZCB0byBkbyBzby4gSG93ZXZlciwgdGhlIGVuZCB2YWx1ZXMgV0lMTCBiZSBwb3B1bGF0ZWQgaW4gdGhlIFwiZGF0YVwiIHByb3BlcnR5LCBsaWtlIHtzOjEwMCwgeG4xOjUwLCB4bjI6MzAwfVxuXHRcdFx0ICogQHBhcmFtIHtmdW5jdGlvbihudW1iZXIpPX0gc2V0UmF0aW8gSWYgdmFsdWVzIHNob3VsZCBiZSBzZXQgaW4gYSBjdXN0b20gZnVuY3Rpb24gaW5zdGVhZCBvZiBiZWluZyBwaWVjZWQgdG9nZXRoZXIgaW4gYSB0eXBlOjEgKGNvbXBsZXgtdmFsdWUpIENTU1Byb3BUd2VlbiwgZGVmaW5lIHRoYXQgY3VzdG9tIGZ1bmN0aW9uIGhlcmUuXG5cdFx0XHQgKiBAcmV0dXJuIHtDU1NQcm9wVHdlZW59IFRoZSBmaXJzdCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0IHdoaWNoIGluY2x1ZGVzIHRoZSBuZXcgb25lKHMpIGFkZGVkIGJ5IHRoZSBwYXJzZUNvbXBsZXgoKSBjYWxsLlxuXHRcdFx0ICovXG5cdFx0XHRfcGFyc2VDb21wbGV4ID0gQ1NTUGx1Z2luLnBhcnNlQ29tcGxleCA9IGZ1bmN0aW9uKHQsIHAsIGIsIGUsIGNscnMsIGRmbHQsIHB0LCBwciwgcGx1Z2luLCBzZXRSYXRpbykge1xuXHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwicGFyc2VDb21wbGV4OiBcIitwK1wiLCBiOiBcIitiK1wiLCBlOiBcIitlKTtcblx0XHRcdFx0YiA9IGIgfHwgZGZsdCB8fCBcIlwiO1xuXHRcdFx0XHRpZiAodHlwZW9mKGUpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRlID0gZShfaW5kZXgsIF90YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgKHNldFJhdGlvID8gMiA6IDEpLCBudWxsLCBmYWxzZSwgcHIsIGIsIGUpO1xuXHRcdFx0XHRlICs9IFwiXCI7IC8vZW5zdXJlcyBpdCdzIGEgc3RyaW5nXG5cdFx0XHRcdGlmIChjbHJzICYmIF9jb2xvckV4cC50ZXN0KGUgKyBiKSkgeyAvL2lmIGNvbG9ycyBhcmUgZm91bmQsIG5vcm1hbGl6ZSB0aGUgZm9ybWF0dGluZyB0byByZ2JhKCkgb3IgaHNsYSgpLlxuXHRcdFx0XHRcdGUgPSBbYiwgZV07XG5cdFx0XHRcdFx0Q1NTUGx1Z2luLmNvbG9yU3RyaW5nRmlsdGVyKGUpO1xuXHRcdFx0XHRcdGIgPSBlWzBdO1xuXHRcdFx0XHRcdGUgPSBlWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBiYSA9IGIuc3BsaXQoXCIsIFwiKS5qb2luKFwiLFwiKS5zcGxpdChcIiBcIiksIC8vYmVnaW5uaW5nIGFycmF5XG5cdFx0XHRcdFx0ZWEgPSBlLnNwbGl0KFwiLCBcIikuam9pbihcIixcIikuc3BsaXQoXCIgXCIpLCAvL2VuZGluZyBhcnJheVxuXHRcdFx0XHRcdGwgPSBiYS5sZW5ndGgsXG5cdFx0XHRcdFx0YXV0b1JvdW5kID0gKF9hdXRvUm91bmQgIT09IGZhbHNlKSxcblx0XHRcdFx0XHRpLCB4aSwgbmksIGJ2LCBldiwgYm51bXMsIGVudW1zLCBibiwgaGFzQWxwaGEsIHRlbXAsIGN2LCBzdHIsIHVzZUhTTDtcblx0XHRcdFx0aWYgKGUuaW5kZXhPZihcIixcIikgIT09IC0xIHx8IGIuaW5kZXhPZihcIixcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0YmEgPSBiYS5qb2luKFwiIFwiKS5yZXBsYWNlKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAsIFwiLCBcIikuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdGVhID0gZWEuam9pbihcIiBcIikucmVwbGFjZShfY29tbWFzT3V0c2lkZVBhcmVuRXhwLCBcIiwgXCIpLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRsID0gYmEubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChsICE9PSBlYS5sZW5ndGgpIHtcblx0XHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwibWlzbWF0Y2hlZCBmb3JtYXR0aW5nIGRldGVjdGVkIG9uIFwiICsgcCArIFwiIChcIiArIGIgKyBcIiB2cyBcIiArIGUgKyBcIilcIik7XG5cdFx0XHRcdFx0YmEgPSAoZGZsdCB8fCBcIlwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0bCA9IGJhLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdC5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdHB0LnNldFJhdGlvID0gc2V0UmF0aW87XG5cdFx0XHRcdF9jb2xvckV4cC5sYXN0SW5kZXggPSAwO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0YnYgPSBiYVtpXTtcblx0XHRcdFx0XHRldiA9IGVhW2ldO1xuXHRcdFx0XHRcdGJuID0gcGFyc2VGbG9hdChidik7XG5cdFx0XHRcdFx0Ly9pZiB0aGUgdmFsdWUgYmVnaW5zIHdpdGggYSBudW1iZXIgKG1vc3QgY29tbW9uKS4gSXQncyBmaW5lIGlmIGl0IGhhcyBhIHN1ZmZpeCBsaWtlIHB4XG5cdFx0XHRcdFx0aWYgKGJuIHx8IGJuID09PSAwKSB7XG5cdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKFwiXCIsIGJuLCBfcGFyc2VDaGFuZ2UoZXYsIGJuKSwgZXYucmVwbGFjZShfcmVsTnVtRXhwLCBcIlwiKSwgKGF1dG9Sb3VuZCAmJiBldi5pbmRleE9mKFwicHhcIikgIT09IC0xKSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHQvL2lmIHRoZSB2YWx1ZSBpcyBhIGNvbG9yXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChjbHJzICYmIF9jb2xvckV4cC50ZXN0KGJ2KSkge1xuXHRcdFx0XHRcdFx0c3RyID0gZXYuaW5kZXhPZihcIilcIikgKyAxO1xuXHRcdFx0XHRcdFx0c3RyID0gXCIpXCIgKyAoc3RyID8gZXYuc3Vic3RyKHN0cikgOiBcIlwiKTsgLy9pZiB0aGVyZSdzIGEgY29tbWEgb3IgKSBhdCB0aGUgZW5kLCByZXRhaW4gaXQuXG5cdFx0XHRcdFx0XHR1c2VIU0wgPSAoZXYuaW5kZXhPZihcImhzbFwiKSAhPT0gLTEgJiYgX3N1cHBvcnRzT3BhY2l0eSk7XG5cdFx0XHRcdFx0XHRidiA9IF9wYXJzZUNvbG9yKGJ2LCB1c2VIU0wpO1xuXHRcdFx0XHRcdFx0ZXYgPSBfcGFyc2VDb2xvcihldiwgdXNlSFNMKTtcblx0XHRcdFx0XHRcdGhhc0FscGhhID0gKGJ2Lmxlbmd0aCArIGV2Lmxlbmd0aCA+IDYpO1xuXHRcdFx0XHRcdFx0aWYgKGhhc0FscGhhICYmICFfc3VwcG9ydHNPcGFjaXR5ICYmIGV2WzNdID09PSAwKSB7IC8vb2xkZXIgdmVyc2lvbnMgb2YgSUUgZG9uJ3Qgc3VwcG9ydCByZ2JhKCksIHNvIGlmIHRoZSBkZXN0aW5hdGlvbiBhbHBoYSBpcyAwLCBqdXN0IHVzZSBcInRyYW5zcGFyZW50XCIgZm9yIHRoZSBlbmQgY29sb3Jcblx0XHRcdFx0XHRcdFx0cHRbXCJ4c1wiICsgcHQubF0gKz0gcHQubCA/IFwiIHRyYW5zcGFyZW50XCIgOiBcInRyYW5zcGFyZW50XCI7XG5cdFx0XHRcdFx0XHRcdHB0LmUgPSBwdC5lLnNwbGl0KGVhW2ldKS5qb2luKFwidHJhbnNwYXJlbnRcIik7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZiAoIV9zdXBwb3J0c09wYWNpdHkpIHsgLy9vbGQgdmVyc2lvbnMgb2YgSUUgZG9uJ3Qgc3VwcG9ydCByZ2JhKCkuXG5cdFx0XHRcdFx0XHRcdFx0aGFzQWxwaGEgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAodXNlSFNMKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHQuYXBwZW5kWHRyYSgoaGFzQWxwaGEgPyBcImhzbGEoXCIgOiBcImhzbChcIiksIGJ2WzBdLCBfcGFyc2VDaGFuZ2UoZXZbMF0sIGJ2WzBdKSwgXCIsXCIsIGZhbHNlLCB0cnVlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMV0sIF9wYXJzZUNoYW5nZShldlsxXSwgYnZbMV0pLCBcIiUsXCIsIGZhbHNlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMl0sIF9wYXJzZUNoYW5nZShldlsyXSwgYnZbMl0pLCAoaGFzQWxwaGEgPyBcIiUsXCIgOiBcIiVcIiArIHN0ciksIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKChoYXNBbHBoYSA/IFwicmdiYShcIiA6IFwicmdiKFwiKSwgYnZbMF0sIGV2WzBdIC0gYnZbMF0sIFwiLFwiLCB0cnVlLCB0cnVlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMV0sIGV2WzFdIC0gYnZbMV0sIFwiLFwiLCB0cnVlKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmFwcGVuZFh0cmEoXCJcIiwgYnZbMl0sIGV2WzJdIC0gYnZbMl0sIChoYXNBbHBoYSA/IFwiLFwiIDogc3RyKSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoaGFzQWxwaGEpIHtcblx0XHRcdFx0XHRcdFx0XHRidiA9IChidi5sZW5ndGggPCA0KSA/IDEgOiBidlszXTtcblx0XHRcdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKFwiXCIsIGJ2LCAoKGV2Lmxlbmd0aCA8IDQpID8gMSA6IGV2WzNdKSAtIGJ2LCBzdHIsIGZhbHNlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0X2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7IC8vb3RoZXJ3aXNlIHRoZSB0ZXN0KCkgb24gdGhlIFJlZ0V4cCBjb3VsZCBtb3ZlIHRoZSBsYXN0SW5kZXggYW5kIHRhaW50IGZ1dHVyZSByZXN1bHRzLlxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGJudW1zID0gYnYubWF0Y2goX251bUV4cCk7IC8vZ2V0cyBlYWNoIGdyb3VwIG9mIG51bWJlcnMgaW4gdGhlIGJlZ2lubmluZyB2YWx1ZSBzdHJpbmcgYW5kIGRyb3BzIHRoZW0gaW50byBhbiBhcnJheVxuXG5cdFx0XHRcdFx0XHQvL2lmIG5vIG51bWJlciBpcyBmb3VuZCwgdHJlYXQgaXQgYXMgYSBub24tdHdlZW5pbmcgdmFsdWUgYW5kIGp1c3QgYXBwZW5kIHRoZSBzdHJpbmcgdG8gdGhlIGN1cnJlbnQgeHMuXG5cdFx0XHRcdFx0XHRpZiAoIWJudW1zKSB7XG5cdFx0XHRcdFx0XHRcdHB0W1wieHNcIiArIHB0LmxdICs9IChwdC5sIHx8IHB0W1wieHNcIiArIHB0LmxdKSA/IFwiIFwiICsgZXYgOiBldjtcblxuXHRcdFx0XHRcdFx0Ly9sb29wIHRocm91Z2ggYWxsIHRoZSBudW1iZXJzIHRoYXQgYXJlIGZvdW5kIGFuZCBjb25zdHJ1Y3QgdGhlIGV4dHJhIHZhbHVlcyBvbiB0aGUgcHQuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbnVtcyA9IGV2Lm1hdGNoKF9yZWxOdW1FeHApOyAvL2dldCBlYWNoIGdyb3VwIG9mIG51bWJlcnMgaW4gdGhlIGVuZCB2YWx1ZSBzdHJpbmcgYW5kIGRyb3AgdGhlbSBpbnRvIGFuIGFycmF5LiBXZSBhbGxvdyByZWxhdGl2ZSB2YWx1ZXMgdG9vLCBsaWtlICs9NTAgb3IgLT0uNVxuXHRcdFx0XHRcdFx0XHRpZiAoIWVudW1zIHx8IGVudW1zLmxlbmd0aCAhPT0gYm51bXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly9ERUJVRzogX2xvZyhcIm1pc21hdGNoZWQgZm9ybWF0dGluZyBkZXRlY3RlZCBvbiBcIiArIHAgKyBcIiAoXCIgKyBiICsgXCIgdnMgXCIgKyBlICsgXCIpXCIpO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBwdDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRuaSA9IDA7XG5cdFx0XHRcdFx0XHRcdGZvciAoeGkgPSAwOyB4aSA8IGJudW1zLmxlbmd0aDsgeGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdGN2ID0gYm51bXNbeGldO1xuXHRcdFx0XHRcdFx0XHRcdHRlbXAgPSBidi5pbmRleE9mKGN2LCBuaSk7XG5cdFx0XHRcdFx0XHRcdFx0cHQuYXBwZW5kWHRyYShidi5zdWJzdHIobmksIHRlbXAgLSBuaSksIE51bWJlcihjdiksIF9wYXJzZUNoYW5nZShlbnVtc1t4aV0sIGN2KSwgXCJcIiwgKGF1dG9Sb3VuZCAmJiBidi5zdWJzdHIodGVtcCArIGN2Lmxlbmd0aCwgMikgPT09IFwicHhcIiksICh4aSA9PT0gMCkpO1xuXHRcdFx0XHRcdFx0XHRcdG5pID0gdGVtcCArIGN2Lmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwdFtcInhzXCIgKyBwdC5sXSArPSBidi5zdWJzdHIobmkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHQvL2lmIHRoZXJlIGFyZSByZWxhdGl2ZSB2YWx1ZXMgKFwiKz1cIiBvciBcIi09XCIgcHJlZml4KSwgd2UgbmVlZCB0byBhZGp1c3QgdGhlIGVuZGluZyB2YWx1ZSB0byBlbGltaW5hdGUgdGhlIHByZWZpeGVzIGFuZCBjb21iaW5lIHRoZSB2YWx1ZXMgcHJvcGVybHkuXG5cdFx0XHRcdGlmIChlLmluZGV4T2YoXCI9XCIpICE9PSAtMSkgaWYgKHB0LmRhdGEpIHtcblx0XHRcdFx0XHRzdHIgPSBwdC54czAgKyBwdC5kYXRhLnM7XG5cdFx0XHRcdFx0Zm9yIChpID0gMTsgaSA8IHB0Lmw7IGkrKykge1xuXHRcdFx0XHRcdFx0c3RyICs9IHB0W1wieHNcIiArIGldICsgcHQuZGF0YVtcInhuXCIgKyBpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQuZSA9IHN0ciArIHB0W1wieHNcIiArIGldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghcHQubCkge1xuXHRcdFx0XHRcdHB0LnR5cGUgPSAtMTtcblx0XHRcdFx0XHRwdC54czAgPSBwdC5lO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBwdC54Zmlyc3QgfHwgcHQ7XG5cdFx0XHR9LFxuXHRcdFx0aSA9IDk7XG5cblxuXHRcdHAgPSBDU1NQcm9wVHdlZW4ucHJvdG90eXBlO1xuXHRcdHAubCA9IHAucHIgPSAwOyAvL2xlbmd0aCAobnVtYmVyIG9mIGV4dHJhIHByb3BlcnRpZXMgbGlrZSB4bjEsIHhuMiwgeG4zLCBldGMuXG5cdFx0d2hpbGUgKC0taSA+IDApIHtcblx0XHRcdHBbXCJ4blwiICsgaV0gPSAwO1xuXHRcdFx0cFtcInhzXCIgKyBpXSA9IFwiXCI7XG5cdFx0fVxuXHRcdHAueHMwID0gXCJcIjtcblx0XHRwLl9uZXh0ID0gcC5fcHJldiA9IHAueGZpcnN0ID0gcC5kYXRhID0gcC5wbHVnaW4gPSBwLnNldFJhdGlvID0gcC5yeHAgPSBudWxsO1xuXG5cblx0XHQvKipcblx0XHQgKiBBcHBlbmRzIGFuZCBleHRyYSB0d2VlbmluZyB2YWx1ZSB0byBhIENTU1Byb3BUd2VlbiBhbmQgYXV0b21hdGljYWxseSBtYW5hZ2VzIGFueSBwcmVmaXggYW5kIHN1ZmZpeCBzdHJpbmdzLiBUaGUgZmlyc3QgZXh0cmEgdmFsdWUgaXMgc3RvcmVkIGluIHRoZSBzIGFuZCBjIG9mIHRoZSBtYWluIENTU1Byb3BUd2VlbiBpbnN0YW5jZSwgYnV0IHRoZXJlYWZ0ZXIgYW55IGV4dHJhcyBhcmUgc3RvcmVkIGluIHRoZSB4bjEsIHhuMiwgeG4zLCBldGMuIFRoZSBwcmVmaXhlcyBhbmQgc3VmZml4ZXMgYXJlIHN0b3JlZCBpbiB0aGUgeHMwLCB4czEsIHhzMiwgZXRjLiBwcm9wZXJ0aWVzLiBGb3IgZXhhbXBsZSwgaWYgSSB3YWxrIHRocm91Z2ggYSBjbGlwIHZhbHVlIGxpa2UgXCJyZWN0KDEwcHgsIDVweCwgMHB4LCAyMHB4KVwiLCB0aGUgdmFsdWVzIHdvdWxkIGJlIHN0b3JlZCBsaWtlIHRoaXM6XG5cdFx0ICogeHMwOlwicmVjdChcIiwgczoxMCwgeHMxOlwicHgsIFwiLCB4bjE6NSwgeHMyOlwicHgsIFwiLCB4bjI6MCwgeHMzOlwicHgsIFwiLCB4bjM6MjAsIHhuNDpcInB4KVwiXG5cdFx0ICogQW5kIHRoZXknZCBhbGwgZ2V0IGpvaW5lZCB0b2dldGhlciB3aGVuIHRoZSBDU1NQbHVnaW4gcmVuZGVycyAoaW4gdGhlIHNldFJhdGlvKCkgbWV0aG9kKS5cblx0XHQgKiBAcGFyYW0ge3N0cmluZz19IHBmeCBQcmVmaXggKGlmIGFueSlcblx0XHQgKiBAcGFyYW0geyFudW1iZXJ9IHMgU3RhcnRpbmcgdmFsdWVcblx0XHQgKiBAcGFyYW0geyFudW1iZXJ9IGMgQ2hhbmdlIGluIG51bWVyaWMgdmFsdWUgb3ZlciB0aGUgY291cnNlIG9mIHRoZSBlbnRpcmUgdHdlZW4uIEZvciBleGFtcGxlLCBpZiB0aGUgc3RhcnQgaXMgNSBhbmQgdGhlIGVuZCBpcyAxMDAsIHRoZSBjaGFuZ2Ugd291bGQgYmUgOTUuXG5cdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBzZnggU3VmZml4IChpZiBhbnkpXG5cdFx0ICogQHBhcmFtIHtib29sZWFuPX0gciBSb3VuZCAoaWYgdHJ1ZSkuXG5cdFx0ICogQHBhcmFtIHtib29sZWFuPX0gcGFkIElmIHRydWUsIHRoaXMgZXh0cmEgdmFsdWUgc2hvdWxkIGJlIHNlcGFyYXRlZCBieSB0aGUgcHJldmlvdXMgb25lIGJ5IGEgc3BhY2UuIElmIHRoZXJlIGlzIG5vIHByZXZpb3VzIGV4dHJhIGFuZCBwYWQgaXMgdHJ1ZSwgaXQgd2lsbCBhdXRvbWF0aWNhbGx5IGRyb3AgdGhlIHNwYWNlLlxuXHRcdCAqIEByZXR1cm4ge0NTU1Byb3BUd2Vlbn0gcmV0dXJucyBpdHNlbGYgc28gdGhhdCBtdWx0aXBsZSBtZXRob2RzIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLlxuXHRcdCAqL1xuXHRcdHAuYXBwZW5kWHRyYSA9IGZ1bmN0aW9uKHBmeCwgcywgYywgc2Z4LCByLCBwYWQpIHtcblx0XHRcdHZhciBwdCA9IHRoaXMsXG5cdFx0XHRcdGwgPSBwdC5sO1xuXHRcdFx0cHRbXCJ4c1wiICsgbF0gKz0gKHBhZCAmJiAobCB8fCBwdFtcInhzXCIgKyBsXSkpID8gXCIgXCIgKyBwZnggOiBwZnggfHwgXCJcIjtcblx0XHRcdGlmICghYykgaWYgKGwgIT09IDAgJiYgIXB0LnBsdWdpbikgeyAvL3R5cGljYWxseSB3ZSdsbCBjb21iaW5lIG5vbi1jaGFuZ2luZyB2YWx1ZXMgcmlnaHQgaW50byB0aGUgeHMgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UsIGJ1dCB3ZSBkb24ndCBjb21iaW5lIHRoZW0gd2hlbiB0aGVyZSdzIGEgcGx1Z2luIHRoYXQgd2lsbCBiZSB0d2VlbmluZyB0aGUgdmFsdWVzIGJlY2F1c2UgaXQgbWF5IGRlcGVuZCBvbiB0aGUgdmFsdWVzIGJlaW5nIHNwbGl0IGFwYXJ0LCBsaWtlIGZvciBhIGJlemllciwgaWYgYSB2YWx1ZSBkb2Vzbid0IGNoYW5nZSBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgc2Vjb25kIGl0ZXJhdGlvbiBidXQgdGhlbiBpdCBkb2VzIG9uIHRoZSAzcmQsIHdlJ2xsIHJ1biBpbnRvIHRyb3VibGUgYmVjYXVzZSB0aGVyZSdzIG5vIHhuIHNsb3QgZm9yIHRoYXQgdmFsdWUhXG5cdFx0XHRcdHB0W1wieHNcIiArIGxdICs9IHMgKyAoc2Z4IHx8IFwiXCIpO1xuXHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHR9XG5cdFx0XHRwdC5sKys7XG5cdFx0XHRwdC50eXBlID0gcHQuc2V0UmF0aW8gPyAyIDogMTtcblx0XHRcdHB0W1wieHNcIiArIHB0LmxdID0gc2Z4IHx8IFwiXCI7XG5cdFx0XHRpZiAobCA+IDApIHtcblx0XHRcdFx0cHQuZGF0YVtcInhuXCIgKyBsXSA9IHMgKyBjO1xuXHRcdFx0XHRwdC5yeHBbXCJ4blwiICsgbF0gPSByOyAvL3JvdW5kIGV4dHJhIHByb3BlcnR5ICh3ZSBuZWVkIHRvIHRhcCBpbnRvIHRoaXMgaW4gdGhlIF9wYXJzZVRvUHJveHkoKSBtZXRob2QpXG5cdFx0XHRcdHB0W1wieG5cIiArIGxdID0gcztcblx0XHRcdFx0aWYgKCFwdC5wbHVnaW4pIHtcblx0XHRcdFx0XHRwdC54Zmlyc3QgPSBuZXcgQ1NTUHJvcFR3ZWVuKHB0LCBcInhuXCIgKyBsLCBzLCBjLCBwdC54Zmlyc3QgfHwgcHQsIDAsIHB0Lm4sIHIsIHB0LnByKTtcblx0XHRcdFx0XHRwdC54Zmlyc3QueHMwID0gMDsgLy9qdXN0IHRvIGVuc3VyZSB0aGF0IHRoZSBwcm9wZXJ0eSBzdGF5cyBudW1lcmljIHdoaWNoIGhlbHBzIG1vZGVybiBicm93c2VycyBzcGVlZCB1cCBwcm9jZXNzaW5nLiBSZW1lbWJlciwgaW4gdGhlIHNldFJhdGlvKCkgbWV0aG9kLCB3ZSBkbyBwdC50W3B0LnBdID0gdmFsICsgcHQueHMwIHNvIGlmIHB0LnhzMCBpcyBcIlwiICh0aGUgZGVmYXVsdCksIGl0J2xsIGNhc3QgdGhlIGVuZCB2YWx1ZSBhcyBhIHN0cmluZy4gV2hlbiBhIHByb3BlcnR5IGlzIGEgbnVtYmVyIHNvbWV0aW1lcyBhbmQgYSBzdHJpbmcgc29tZXRpbWVzLCBpdCBwcmV2ZW50cyB0aGUgY29tcGlsZXIgZnJvbSBsb2NraW5nIGluIHRoZSBkYXRhIHR5cGUsIHNsb3dpbmcgdGhpbmdzIGRvd24gc2xpZ2h0bHkuXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0fVxuXHRcdFx0cHQuZGF0YSA9IHtzOnMgKyBjfTtcblx0XHRcdHB0LnJ4cCA9IHt9O1xuXHRcdFx0cHQucyA9IHM7XG5cdFx0XHRwdC5jID0gYztcblx0XHRcdHB0LnIgPSByO1xuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBAY29uc3RydWN0b3IgQSBTcGVjaWFsUHJvcCBpcyBiYXNpY2FsbHkgYSBjc3MgcHJvcGVydHkgdGhhdCBuZWVkcyB0byBiZSB0cmVhdGVkIGluIGEgbm9uLXN0YW5kYXJkIHdheSwgbGlrZSBpZiBpdCBtYXkgY29udGFpbiBhIGNvbXBsZXggdmFsdWUgbGlrZSBib3hTaGFkb3c6XCI1cHggMTBweCAxNXB4IHJnYigyNTUsIDEwMiwgNTEpXCIgb3IgaWYgaXQgaXMgYXNzb2NpYXRlZCB3aXRoIGFub3RoZXIgcGx1Z2luIGxpa2UgVGhyb3dQcm9wc1BsdWdpbiBvciBCZXppZXJQbHVnaW4uIEV2ZXJ5IFNwZWNpYWxQcm9wIGlzIGFzc29jaWF0ZWQgd2l0aCBhIHBhcnRpY3VsYXIgcHJvcGVydHkgbmFtZSBsaWtlIFwiYm94U2hhZG93XCIgb3IgXCJ0aHJvd1Byb3BzXCIgb3IgXCJiZXppZXJcIiBhbmQgaXQgd2lsbCBpbnRlcmNlcHQgdGhvc2UgdmFsdWVzIGluIHRoZSB2YXJzIG9iamVjdCB0aGF0J3MgcGFzc2VkIHRvIHRoZSBDU1NQbHVnaW4gYW5kIGhhbmRsZSB0aGVtIGFjY29yZGluZ2x5LlxuXHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gcCBQcm9wZXJ0eSBuYW1lIChsaWtlIFwiYm94U2hhZG93XCIgb3IgXCJ0aHJvd1Byb3BzXCIpXG5cdFx0ICogQHBhcmFtIHtPYmplY3Q9fSBvcHRpb25zIEFuIG9iamVjdCBjb250YWluaW5nIGFueSBvZiB0aGUgZm9sbG93aW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9uczpcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIGRlZmF1bHRWYWx1ZTogdGhlIGRlZmF1bHQgdmFsdWVcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIHBhcnNlcjogQSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgd2hlbiB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBuYW1lIGlzIGZvdW5kIGluIHRoZSB2YXJzLiBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBDU1NQcm9wVHdlZW4gaW5zdGFuY2UgYW5kIGl0IHNob3VsZCBlbnN1cmUgdGhhdCBpdCBpcyBwcm9wZXJseSBpbnNlcnRlZCBpbnRvIHRoZSBsaW5rZWQgbGlzdC4gSXQgd2lsbCByZWNlaXZlIDQgcGFyYW10ZXJzOiAxKSBUaGUgdGFyZ2V0LCAyKSBUaGUgdmFsdWUgZGVmaW5lZCBpbiB0aGUgdmFycywgMykgVGhlIENTU1BsdWdpbiBpbnN0YW5jZSAod2hvc2UgX2ZpcnN0UFQgc2hvdWxkIGJlIHVzZWQgZm9yIHRoZSBsaW5rZWQgbGlzdCksIGFuZCA0KSBBIGNvbXB1dGVkIHN0eWxlIG9iamVjdCBpZiBvbmUgd2FzIGNhbGN1bGF0ZWQgKHRoaXMgaXMgYSBzcGVlZCBvcHRpbWl6YXRpb24gdGhhdCBhbGxvd3MgcmV0cmlldmFsIG9mIHN0YXJ0aW5nIHZhbHVlcyBxdWlja2VyKVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gZm9ybWF0dGVyOiBhIGZ1bmN0aW9uIHRoYXQgZm9ybWF0cyBhbnkgdmFsdWUgcmVjZWl2ZWQgZm9yIHRoaXMgc3BlY2lhbCBwcm9wZXJ0eSAoZm9yIGV4YW1wbGUsIGJveFNoYWRvdyBjb3VsZCB0YWtlIFwiNXB4IDVweCByZWRcIiBhbmQgZm9ybWF0IGl0IHRvIFwiNXB4IDVweCAwcHggMHB4IHJlZFwiIHNvIHRoYXQgYm90aCB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIGhhdmUgYSBjb21tb24gb3JkZXIgYW5kIHF1YW50aXR5IG9mIHZhbHVlcy4pXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBwcmVmaXg6IGlmIHRydWUsIHdlJ2xsIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHByb3BlcnR5IHJlcXVpcmVzIGEgdmVuZG9yIHByZWZpeCAobGlrZSBXZWJraXQgb3IgTW96IG9yIG1zIG9yIE8pXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBjb2xvcjogc2V0IHRoaXMgdG8gdHJ1ZSBpZiB0aGUgdmFsdWUgZm9yIHRoaXMgU3BlY2lhbFByb3AgbWF5IGNvbnRhaW4gY29sb3ItcmVsYXRlZCB2YWx1ZXMgbGlrZSByZ2IoKSwgcmdiYSgpLCBldGMuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBwcmlvcml0eTogcHJpb3JpdHkgaW4gdGhlIGxpbmtlZCBsaXN0IG9yZGVyLiBIaWdoZXIgcHJpb3JpdHkgU3BlY2lhbFByb3BzIHdpbGwgYmUgdXBkYXRlZCBiZWZvcmUgbG93ZXIgcHJpb3JpdHkgb25lcy4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgMC5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIG11bHRpOiBpZiB0cnVlLCB0aGUgZm9ybWF0dGVyIHNob3VsZCBhY2NvbW1vZGF0ZSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcywgbGlrZSBib3hTaGFkb3cgY291bGQgaGF2ZSBtdWx0aXBsZSBib3hTaGFkb3dzIGxpc3RlZCBvdXQuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBjb2xsYXBzaWJsZTogaWYgdHJ1ZSwgdGhlIGZvcm1hdHRlciBzaG91bGQgdHJlYXQgdGhlIHZhbHVlIGxpa2UgaXQncyBhIHRvcC9yaWdodC9ib3R0b20vbGVmdCB2YWx1ZSB0aGF0IGNvdWxkIGJlIGNvbGxhcHNlZCwgbGlrZSBcIjVweFwiIHdvdWxkIGFwcGx5IHRvIGFsbCwgXCI1cHgsIDEwcHhcIiB3b3VsZCB1c2UgNXB4IGZvciB0b3AvYm90dG9tIGFuZCAxMHB4IGZvciByaWdodC9sZWZ0LCBldGMuXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBrZXl3b3JkOiBhIHNwZWNpYWwga2V5d29yZCB0aGF0IGNhbiBbb3B0aW9uYWxseV0gYmUgZm91bmQgaW5zaWRlIHRoZSB2YWx1ZSAobGlrZSBcImluc2V0XCIgZm9yIGJveFNoYWRvdykuIFRoaXMgYWxsb3dzIHVzIHRvIHZhbGlkYXRlIGJlZ2lubmluZy9lbmRpbmcgdmFsdWVzIHRvIG1ha2Ugc3VyZSB0aGV5IG1hdGNoIChpZiB0aGUga2V5d29yZCBpcyBmb3VuZCBpbiBvbmUsIGl0J2xsIGJlIGFkZGVkIHRvIHRoZSBvdGhlciBmb3IgY29uc2lzdGVuY3kgYnkgZGVmYXVsdCkuXG5cdFx0ICovXG5cdFx0dmFyIFNwZWNpYWxQcm9wID0gZnVuY3Rpb24ocCwgb3B0aW9ucykge1xuXHRcdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XHRcdFx0dGhpcy5wID0gb3B0aW9ucy5wcmVmaXggPyBfY2hlY2tQcm9wUHJlZml4KHApIHx8IHAgOiBwO1xuXHRcdFx0XHRfc3BlY2lhbFByb3BzW3BdID0gX3NwZWNpYWxQcm9wc1t0aGlzLnBdID0gdGhpcztcblx0XHRcdFx0dGhpcy5mb3JtYXQgPSBvcHRpb25zLmZvcm1hdHRlciB8fCBfZ2V0Rm9ybWF0dGVyKG9wdGlvbnMuZGVmYXVsdFZhbHVlLCBvcHRpb25zLmNvbG9yLCBvcHRpb25zLmNvbGxhcHNpYmxlLCBvcHRpb25zLm11bHRpKTtcblx0XHRcdFx0aWYgKG9wdGlvbnMucGFyc2VyKSB7XG5cdFx0XHRcdFx0dGhpcy5wYXJzZSA9IG9wdGlvbnMucGFyc2VyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuY2xycyA9IG9wdGlvbnMuY29sb3I7XG5cdFx0XHRcdHRoaXMubXVsdGkgPSBvcHRpb25zLm11bHRpO1xuXHRcdFx0XHR0aGlzLmtleXdvcmQgPSBvcHRpb25zLmtleXdvcmQ7XG5cdFx0XHRcdHRoaXMuZGZsdCA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuXHRcdFx0XHR0aGlzLnByID0gb3B0aW9ucy5wcmlvcml0eSB8fCAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly9zaG9ydGN1dCBmb3IgY3JlYXRpbmcgYSBuZXcgU3BlY2lhbFByb3AgdGhhdCBjYW4gYWNjZXB0IG11bHRpcGxlIHByb3BlcnRpZXMgYXMgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCAoaGVscHMgbWluaWZpY2F0aW9uKS4gZGZsdCBjYW4gYmUgYW4gYXJyYXkgZm9yIG11bHRpcGxlIHZhbHVlcyAod2UgZG9uJ3QgZG8gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBiZWNhdXNlIHRoZSBkZWZhdWx0IHZhbHVlIG1heSBjb250YWluIGNvbW1hcywgbGlrZSByZWN0KDBweCwwcHgsMHB4LDBweCkpLiBXZSBhdHRhY2ggdGhpcyBtZXRob2QgdG8gdGhlIFNwZWNpYWxQcm9wIGNsYXNzL29iamVjdCBpbnN0ZWFkIG9mIHVzaW5nIGEgcHJpdmF0ZSBfY3JlYXRlU3BlY2lhbFByb3AoKSBtZXRob2Qgc28gdGhhdCB3ZSBjYW4gdGFwIGludG8gaXQgZXh0ZXJuYWxseSBpZiBuZWNlc3NhcnksIGxpa2UgZnJvbSBhbm90aGVyIHBsdWdpbi5cblx0XHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcCA9IF9pbnRlcm5hbHMuX3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wID0gZnVuY3Rpb24ocCwgb3B0aW9ucywgZGVmYXVsdHMpIHtcblx0XHRcdFx0aWYgKHR5cGVvZihvcHRpb25zKSAhPT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRcdG9wdGlvbnMgPSB7cGFyc2VyOmRlZmF1bHRzfTsgLy90byBtYWtlIGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgQmV6aWVyUGx1Z2luIGFuZCBUaHJvd1Byb3BzUGx1Z2luXG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGEgPSBwLnNwbGl0KFwiLFwiKSxcblx0XHRcdFx0XHRkID0gb3B0aW9ucy5kZWZhdWx0VmFsdWUsXG5cdFx0XHRcdFx0aSwgdGVtcDtcblx0XHRcdFx0ZGVmYXVsdHMgPSBkZWZhdWx0cyB8fCBbZF07XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3B0aW9ucy5wcmVmaXggPSAoaSA9PT0gMCAmJiBvcHRpb25zLnByZWZpeCk7XG5cdFx0XHRcdFx0b3B0aW9ucy5kZWZhdWx0VmFsdWUgPSBkZWZhdWx0c1tpXSB8fCBkO1xuXHRcdFx0XHRcdHRlbXAgPSBuZXcgU3BlY2lhbFByb3AoYVtpXSwgb3B0aW9ucyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vY3JlYXRlcyBhIHBsYWNlaG9sZGVyIHNwZWNpYWwgcHJvcCBmb3IgYSBwbHVnaW4gc28gdGhhdCB0aGUgcHJvcGVydHkgZ2V0cyBjYXVnaHQgdGhlIGZpcnN0IHRpbWUgYSB0d2VlbiBvZiBpdCBpcyBhdHRlbXB0ZWQsIGFuZCBhdCB0aGF0IHRpbWUgaXQgbWFrZXMgdGhlIHBsdWdpbiByZWdpc3RlciBpdHNlbGYsIHRodXMgdGFraW5nIG92ZXIgZm9yIGFsbCBmdXR1cmUgdHdlZW5zIG9mIHRoYXQgcHJvcGVydHkuIFRoaXMgYWxsb3dzIHVzIHRvIG5vdCBtYW5kYXRlIHRoYXQgdGhpbmdzIGxvYWQgaW4gYSBwYXJ0aWN1bGFyIG9yZGVyIGFuZCBpdCBhbHNvIGFsbG93cyB1cyB0byBsb2coKSBhbiBlcnJvciB0aGF0IGluZm9ybXMgdGhlIHVzZXIgd2hlbiB0aGV5IGF0dGVtcHQgdG8gdHdlZW4gYW4gZXh0ZXJuYWwgcGx1Z2luLXJlbGF0ZWQgcHJvcGVydHkgd2l0aG91dCBsb2FkaW5nIGl0cyAuanMgZmlsZS5cblx0XHRcdF9yZWdpc3RlclBsdWdpblByb3AgPSBfaW50ZXJuYWxzLl9yZWdpc3RlclBsdWdpblByb3AgPSBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdGlmICghX3NwZWNpYWxQcm9wc1twXSkge1xuXHRcdFx0XHRcdHZhciBwbHVnaW5OYW1lID0gcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHAuc3Vic3RyKDEpICsgXCJQbHVnaW5cIjtcblx0XHRcdFx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AocCwge3BhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luLCB2YXJzKSB7XG5cdFx0XHRcdFx0XHR2YXIgcGx1Z2luQ2xhc3MgPSBfZ2xvYmFscy5jb20uZ3JlZW5zb2NrLnBsdWdpbnNbcGx1Z2luTmFtZV07XG5cdFx0XHRcdFx0XHRpZiAoIXBsdWdpbkNsYXNzKSB7XG5cdFx0XHRcdFx0XHRcdF9sb2coXCJFcnJvcjogXCIgKyBwbHVnaW5OYW1lICsgXCIganMgZmlsZSBub3QgbG9hZGVkLlwiKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cGx1Z2luQ2xhc3MuX2Nzc1JlZ2lzdGVyKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gX3NwZWNpYWxQcm9wc1twXS5wYXJzZSh0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luLCB2YXJzKTtcblx0XHRcdFx0XHR9fSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblxuXHRcdHAgPSBTcGVjaWFsUHJvcC5wcm90b3R5cGU7XG5cblx0XHQvKipcblx0XHQgKiBBbGlhcyBmb3IgX3BhcnNlQ29tcGxleCgpIHRoYXQgYXV0b21hdGljYWxseSBwbHVncyBpbiBjZXJ0YWluIHZhbHVlcyBmb3IgdGhpcyBTcGVjaWFsUHJvcCwgbGlrZSBpdHMgcHJvcGVydHkgbmFtZSwgd2hldGhlciBvciBub3QgY29sb3JzIHNob3VsZCBiZSBzZW5zZWQsIHRoZSBkZWZhdWx0IHZhbHVlLCBhbmQgcHJpb3JpdHkuIEl0IGFsc28gbG9va3MgZm9yIGFueSBrZXl3b3JkIHRoYXQgdGhlIFNwZWNpYWxQcm9wIGRlZmluZXMgKGxpa2UgXCJpbnNldFwiIGZvciBib3hTaGFkb3cpIGFuZCBlbnN1cmVzIHRoYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiB2YWx1ZXMgZm9yIFNwZWNpYWxQcm9wcyB3aGVyZSBtdWx0aSBpcyB0cnVlIChsaWtlIGJveFNoYWRvdyBhbmQgdGV4dFNoYWRvdyBjYW4gaGF2ZSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0KVxuXHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCB0YXJnZXQgZWxlbWVudFxuXHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXJ8b2JqZWN0KX0gYiBiZWdpbm5pbmcgdmFsdWVcblx0XHQgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyfG9iamVjdCl9IGUgZW5kaW5nIChkZXN0aW5hdGlvbikgdmFsdWVcblx0XHQgKiBAcGFyYW0ge0NTU1Byb3BUd2Vlbj19IHB0IG5leHQgQ1NTUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdFxuXHRcdCAqIEBwYXJhbSB7VHdlZW5QbHVnaW49fSBwbHVnaW4gSWYgYW5vdGhlciBwbHVnaW4gd2lsbCBiZSB0d2VlbmluZyB0aGUgY29tcGxleCB2YWx1ZSwgdGhhdCBUd2VlblBsdWdpbiBpbnN0YW5jZSBnb2VzIGhlcmUuXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbj19IHNldFJhdGlvIElmIGEgY3VzdG9tIHNldFJhdGlvKCkgbWV0aG9kIHNob3VsZCBiZSB1c2VkIHRvIGhhbmRsZSB0aGlzIGNvbXBsZXggdmFsdWUsIHRoYXQgZ29lcyBoZXJlLlxuXHRcdCAqIEByZXR1cm4ge0NTU1Byb3BUd2Vlbj19IEZpcnN0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Rcblx0XHQgKi9cblx0XHRwLnBhcnNlQ29tcGxleCA9IGZ1bmN0aW9uKHQsIGIsIGUsIHB0LCBwbHVnaW4sIHNldFJhdGlvKSB7XG5cdFx0XHR2YXIga3dkID0gdGhpcy5rZXl3b3JkLFxuXHRcdFx0XHRpLCBiYSwgZWEsIGwsIGJpLCBlaTtcblx0XHRcdC8vaWYgdGhpcyBTcGVjaWFsUHJvcCdzIHZhbHVlIGNhbiBjb250YWluIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzIChsaWtlIGJveFNoYWRvdyBvciB0ZXh0U2hhZG93KSwgd2UgbXVzdCBwYXJzZSB0aGVtIGluIGEgc3BlY2lhbCB3YXksIGFuZCBsb29rIGZvciBhIGtleXdvcmQgKGxpa2UgXCJpbnNldFwiIGZvciBib3hTaGFkb3cpIGFuZCBlbnN1cmUgdGhhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgQk9USCBoYXZlIGl0IGlmIHRoZSBlbmQgZGVmaW5lcyBpdCBhcyBzdWNoLiBXZSBhbHNvIG11c3QgZW5zdXJlIHRoYXQgdGhlcmUgYXJlIGFuIGVxdWFsIG51bWJlciBvZiB2YWx1ZXMgc3BlY2lmaWVkICh3ZSBjYW4ndCB0d2VlbiAxIGJveFNoYWRvdyB0byAzIGZvciBleGFtcGxlKVxuXHRcdFx0aWYgKHRoaXMubXVsdGkpIGlmIChfY29tbWFzT3V0c2lkZVBhcmVuRXhwLnRlc3QoZSkgfHwgX2NvbW1hc091dHNpZGVQYXJlbkV4cC50ZXN0KGIpKSB7XG5cdFx0XHRcdGJhID0gYi5yZXBsYWNlKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAsIFwifFwiKS5zcGxpdChcInxcIik7XG5cdFx0XHRcdGVhID0gZS5yZXBsYWNlKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAsIFwifFwiKS5zcGxpdChcInxcIik7XG5cdFx0XHR9IGVsc2UgaWYgKGt3ZCkge1xuXHRcdFx0XHRiYSA9IFtiXTtcblx0XHRcdFx0ZWEgPSBbZV07XG5cdFx0XHR9XG5cdFx0XHRpZiAoZWEpIHtcblx0XHRcdFx0bCA9IChlYS5sZW5ndGggPiBiYS5sZW5ndGgpID8gZWEubGVuZ3RoIDogYmEubGVuZ3RoO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0YiA9IGJhW2ldID0gYmFbaV0gfHwgdGhpcy5kZmx0O1xuXHRcdFx0XHRcdGUgPSBlYVtpXSA9IGVhW2ldIHx8IHRoaXMuZGZsdDtcblx0XHRcdFx0XHRpZiAoa3dkKSB7XG5cdFx0XHRcdFx0XHRiaSA9IGIuaW5kZXhPZihrd2QpO1xuXHRcdFx0XHRcdFx0ZWkgPSBlLmluZGV4T2Yoa3dkKTtcblx0XHRcdFx0XHRcdGlmIChiaSAhPT0gZWkpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGVpID09PSAtMSkgeyAvL2lmIHRoZSBrZXl3b3JkIGlzbid0IGluIHRoZSBlbmQgdmFsdWUsIHJlbW92ZSBpdCBmcm9tIHRoZSBiZWdpbm5pbmcgb25lLlxuXHRcdFx0XHRcdFx0XHRcdGJhW2ldID0gYmFbaV0uc3BsaXQoa3dkKS5qb2luKFwiXCIpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGJpID09PSAtMSkgeyAvL2lmIHRoZSBrZXl3b3JkIGlzbid0IGluIHRoZSBiZWdpbm5pbmcsIGFkZCBpdC5cblx0XHRcdFx0XHRcdFx0XHRiYVtpXSArPSBcIiBcIiArIGt3ZDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRiID0gYmEuam9pbihcIiwgXCIpO1xuXHRcdFx0XHRlID0gZWEuam9pbihcIiwgXCIpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIF9wYXJzZUNvbXBsZXgodCwgdGhpcy5wLCBiLCBlLCB0aGlzLmNscnMsIHRoaXMuZGZsdCwgcHQsIHRoaXMucHIsIHBsdWdpbiwgc2V0UmF0aW8pO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBBY2NlcHRzIGEgdGFyZ2V0IGFuZCBlbmQgdmFsdWUgYW5kIHNwaXRzIGJhY2sgYSBDU1NQcm9wVHdlZW4gdGhhdCBoYXMgYmVlbiBpbnNlcnRlZCBpbnRvIHRoZSBDU1NQbHVnaW4ncyBsaW5rZWQgbGlzdCBhbmQgY29uZm9ybXMgd2l0aCBhbGwgdGhlIGNvbnZlbnRpb25zIHdlIHVzZSBpbnRlcm5hbGx5LCBsaWtlIHR5cGU6LTEsIDAsIDEsIG9yIDIsIHNldHRpbmcgdXAgYW55IGV4dHJhIHByb3BlcnR5IHR3ZWVucywgcHJpb3JpdHksIGV0Yy4gRm9yIGV4YW1wbGUsIGlmIHdlIGhhdmUgYSBib3hTaGFkb3cgU3BlY2lhbFByb3AgYW5kIGNhbGw6XG5cdFx0ICogdGhpcy5fZmlyc3RQVCA9IHNwLnBhcnNlKGVsZW1lbnQsIFwiNXB4IDEwcHggMjBweCByZ2IoMjU1MCwxMDIsNTEpXCIsIFwiYm94U2hhZG93XCIsIHRoaXMpO1xuXHRcdCAqIEl0IHNob3VsZCBmaWd1cmUgb3V0IHRoZSBzdGFydGluZyB2YWx1ZSBvZiB0aGUgZWxlbWVudCdzIGJveFNoYWRvdywgY29tcGFyZSBpdCB0byB0aGUgcHJvdmlkZWQgZW5kIHZhbHVlIGFuZCBjcmVhdGUgYWxsIHRoZSBuZWNlc3NhcnkgQ1NTUHJvcFR3ZWVucyBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZXMgdG8gdHdlZW4gdGhlIGJveFNoYWRvdy4gVGhlIENTU1Byb3BUd2VlbiB0aGF0IGdldHMgc3BpdCBiYWNrIHNob3VsZCBhbHJlYWR5IGJlIGluc2VydGVkIGludG8gdGhlIGxpbmtlZCBsaXN0ICh0aGUgNHRoIHBhcmFtZXRlciBpcyB0aGUgY3VycmVudCBoZWFkLCBzbyBwcmVwZW5kIHRvIHRoYXQpLlxuXHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCBUYXJnZXQgb2JqZWN0IHdob3NlIHByb3BlcnR5IGlzIGJlaW5nIHR3ZWVuZWRcblx0XHQgKiBAcGFyYW0ge09iamVjdH0gZSBFbmQgdmFsdWUgYXMgcHJvdmlkZWQgaW4gdGhlIHZhcnMgb2JqZWN0ICh0eXBpY2FsbHkgYSBzdHJpbmcsIGJ1dCBub3QgYWx3YXlzIC0gbGlrZSBhIHRocm93UHJvcHMgd291bGQgYmUgYW4gb2JqZWN0KS5cblx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZVxuXHRcdCAqIEBwYXJhbSB7IUNTU1BsdWdpbn0gY3NzcCBUaGUgQ1NTUGx1Z2luIGluc3RhbmNlIHRoYXQgc2hvdWxkIGJlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHR3ZWVuLlxuXHRcdCAqIEBwYXJhbSB7P0NTU1Byb3BUd2Vlbn0gcHQgVGhlIENTU1Byb3BUd2VlbiB0aGF0IGlzIHRoZSBjdXJyZW50IGhlYWQgb2YgdGhlIGxpbmtlZCBsaXN0ICh3ZSdsbCBwcmVwZW5kIHRvIGl0KVxuXHRcdCAqIEBwYXJhbSB7VHdlZW5QbHVnaW49fSBwbHVnaW4gSWYgYSBwbHVnaW4gd2lsbCBiZSB1c2VkIHRvIHR3ZWVuIHRoZSBwYXJzZWQgdmFsdWUsIHRoaXMgaXMgdGhlIHBsdWdpbiBpbnN0YW5jZS5cblx0XHQgKiBAcGFyYW0ge09iamVjdD19IHZhcnMgT3JpZ2luYWwgdmFycyBvYmplY3QgdGhhdCBjb250YWlucyB0aGUgZGF0YSBmb3IgcGFyc2luZy5cblx0XHQgKiBAcmV0dXJuIHtDU1NQcm9wVHdlZW59IFRoZSBmaXJzdCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0IHdoaWNoIGluY2x1ZGVzIHRoZSBuZXcgb25lKHMpIGFkZGVkIGJ5IHRoZSBwYXJzZSgpIGNhbGwuXG5cdFx0ICovXG5cdFx0cC5wYXJzZSA9IGZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdHJldHVybiB0aGlzLnBhcnNlQ29tcGxleCh0LnN0eWxlLCB0aGlzLmZvcm1hdChfZ2V0U3R5bGUodCwgdGhpcy5wLCBfY3MsIGZhbHNlLCB0aGlzLmRmbHQpKSwgdGhpcy5mb3JtYXQoZSksIHB0LCBwbHVnaW4pO1xuXHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBSZWdpc3RlcnMgYSBzcGVjaWFsIHByb3BlcnR5IHRoYXQgc2hvdWxkIGJlIGludGVyY2VwdGVkIGZyb20gYW55IFwiY3NzXCIgb2JqZWN0cyBkZWZpbmVkIGluIHR3ZWVucy4gVGhpcyBhbGxvd3MgeW91IHRvIGhhbmRsZSB0aGVtIGhvd2V2ZXIgeW91IHdhbnQgd2l0aG91dCBDU1NQbHVnaW4gZG9pbmcgaXQgZm9yIHlvdS4gVGhlIDJuZCBwYXJhbWV0ZXIgc2hvdWxkIGJlIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIDMgcGFyYW1ldGVyczpcblx0XHQgKiAgMSkgVGFyZ2V0IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSBzaG91bGQgYmUgdHdlZW5lZCAodHlwaWNhbGx5IGEgRE9NIGVsZW1lbnQpXG5cdFx0ICogIDIpIFRoZSBlbmQvZGVzdGluYXRpb24gdmFsdWUgKGNvdWxkIGJlIGEgc3RyaW5nLCBudW1iZXIsIG9iamVjdCwgb3Igd2hhdGV2ZXIgeW91IHdhbnQpXG5cdFx0ICogIDMpIFRoZSB0d2VlbiBpbnN0YW5jZSAoeW91IHByb2JhYmx5IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgdGhpcywgYnV0IGl0IGNhbiBiZSB1c2VmdWwgZm9yIGxvb2tpbmcgdXAgaW5mb3JtYXRpb24gbGlrZSB0aGUgZHVyYXRpb24pXG5cdFx0ICpcblx0XHQgKiBUaGVuLCB5b3VyIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGNhbGxlZCBlYWNoIHRpbWUgdGhlIHR3ZWVuIGdldHMgcmVuZGVyZWQsIHBhc3NpbmcgYSBudW1lcmljIFwicmF0aW9cIiBwYXJhbWV0ZXIgdG8geW91ciBmdW5jdGlvbiB0aGF0IGluZGljYXRlcyB0aGUgY2hhbmdlIGZhY3RvciAodXN1YWxseSBiZXR3ZWVuIDAgYW5kIDEpLiBGb3IgZXhhbXBsZTpcblx0XHQgKlxuXHRcdCAqIENTU1BsdWdpbi5yZWdpc3RlclNwZWNpYWxQcm9wKFwibXlDdXN0b21Qcm9wXCIsIGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUsIHR3ZWVuKSB7XG5cdFx0ICogICAgICB2YXIgc3RhcnQgPSB0YXJnZXQuc3R5bGUud2lkdGg7XG5cdFx0ICogICAgICByZXR1cm4gZnVuY3Rpb24ocmF0aW8pIHtcblx0XHQgKiAgICAgICAgICAgICAgdGFyZ2V0LnN0eWxlLndpZHRoID0gKHN0YXJ0ICsgdmFsdWUgKiByYXRpbykgKyBcInB4XCI7XG5cdFx0ICogICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2V0IHdpZHRoIHRvIFwiICsgdGFyZ2V0LnN0eWxlLndpZHRoKTtcblx0XHQgKiAgICAgICAgICB9XG5cdFx0ICogfSwgMCk7XG5cdFx0ICpcblx0XHQgKiBUaGVuLCB3aGVuIEkgZG8gdGhpcyB0d2VlbiwgaXQgd2lsbCB0cmlnZ2VyIG15IHNwZWNpYWwgcHJvcGVydHk6XG5cdFx0ICpcblx0XHQgKiBUd2VlbkxpdGUudG8oZWxlbWVudCwgMSwge2Nzczp7bXlDdXN0b21Qcm9wOjEwMH19KTtcblx0XHQgKlxuXHRcdCAqIEluIHRoZSBleGFtcGxlLCBvZiBjb3Vyc2UsIHdlJ3JlIGp1c3QgY2hhbmdpbmcgdGhlIHdpZHRoLCBidXQgeW91IGNhbiBkbyBhbnl0aGluZyB5b3Ugd2FudC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gbmFtZSBQcm9wZXJ0eSBuYW1lIChvciBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcykgdGhhdCBzaG91bGQgYmUgaW50ZXJjZXB0ZWQgYW5kIGhhbmRsZWQgYnkgeW91ciBmdW5jdGlvbi4gRm9yIGV4YW1wbGUsIGlmIEkgZGVmaW5lIFwibXlDdXN0b21Qcm9wXCIsIHRoZW4gaXQgd291bGQgaGFuZGxlIHRoYXQgcG9ydGlvbiBvZiB0aGUgZm9sbG93aW5nIHR3ZWVuOiBUd2VlbkxpdGUudG8oZWxlbWVudCwgMSwge2Nzczp7bXlDdXN0b21Qcm9wOjEwMH19KVxuXHRcdCAqIEBwYXJhbSB7IWZ1bmN0aW9uKE9iamVjdCwgT2JqZWN0LCBPYmplY3QsIHN0cmluZyk6ZnVuY3Rpb24obnVtYmVyKX0gb25Jbml0VHdlZW4gVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbiBhIHR3ZWVuIG9mIHRoaXMgc3BlY2lhbCBwcm9wZXJ0eSBpcyBwZXJmb3JtZWQuIFRoZSBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgNCBwYXJhbWV0ZXJzOiAxKSBUYXJnZXQgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIHR3ZWVuZWQsIDIpIFZhbHVlIHRoYXQgd2FzIHBhc3NlZCB0byB0aGUgdHdlZW4sIDMpIFRoZSB0d2VlbiBpbnN0YW5jZSBpdHNlbGYgKHJhcmVseSB1c2VkKSwgYW5kIDQpIFRoZSBwcm9wZXJ0eSBuYW1lIHRoYXQncyBiZWluZyB0d2VlbmVkLiBZb3VyIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHNob3VsZCBiZSBjYWxsZWQgb24gZXZlcnkgdXBkYXRlIG9mIHRoZSB0d2Vlbi4gVGhhdCBmdW5jdGlvbiB3aWxsIHJlY2VpdmUgYSBzaW5nbGUgcGFyYW1ldGVyIHRoYXQgaXMgYSBcImNoYW5nZSBmYWN0b3JcIiB2YWx1ZSAodHlwaWNhbGx5IGJldHdlZW4gMCBhbmQgMSkgaW5kaWNhdGluZyB0aGUgYW1vdW50IG9mIGNoYW5nZSBhcyBhIHJhdGlvLiBZb3UgY2FuIHVzZSB0aGlzIHRvIGRldGVybWluZSBob3cgdG8gc2V0IHRoZSB2YWx1ZXMgYXBwcm9wcmlhdGVseSBpbiB5b3VyIGZ1bmN0aW9uLlxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyPX0gcHJpb3JpdHkgUHJpb3JpdHkgdGhhdCBoZWxwcyB0aGUgZW5naW5lIGRldGVybWluZSB0aGUgb3JkZXIgaW4gd2hpY2ggdG8gc2V0IHRoZSBwcm9wZXJ0aWVzIChkZWZhdWx0OiAwKS4gSGlnaGVyIHByaW9yaXR5IHByb3BlcnRpZXMgd2lsbCBiZSB1cGRhdGVkIGJlZm9yZSBsb3dlciBwcmlvcml0eSBvbmVzLlxuXHRcdCAqL1xuXHRcdENTU1BsdWdpbi5yZWdpc3RlclNwZWNpYWxQcm9wID0gZnVuY3Rpb24obmFtZSwgb25Jbml0VHdlZW4sIHByaW9yaXR5KSB7XG5cdFx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AobmFtZSwge3BhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luLCB2YXJzKSB7XG5cdFx0XHRcdHZhciBydiA9IG5ldyBDU1NQcm9wVHdlZW4odCwgcCwgMCwgMCwgcHQsIDIsIHAsIGZhbHNlLCBwcmlvcml0eSk7XG5cdFx0XHRcdHJ2LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0cnYuc2V0UmF0aW8gPSBvbkluaXRUd2Vlbih0LCBlLCBjc3NwLl90d2VlbiwgcCk7XG5cdFx0XHRcdHJldHVybiBydjtcblx0XHRcdH0sIHByaW9yaXR5OnByaW9yaXR5fSk7XG5cdFx0fTtcblxuXG5cblxuXG5cblx0XHQvL3RyYW5zZm9ybS1yZWxhdGVkIG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcblx0XHRDU1NQbHVnaW4udXNlU1ZHVHJhbnNmb3JtQXR0ciA9IF9pc1NhZmFyaSB8fCBfaXNGaXJlZm94OyAvL1NhZmFyaSBhbmQgRmlyZWZveCBib3RoIGhhdmUgc29tZSByZW5kZXJpbmcgYnVncyB3aGVuIGFwcGx5aW5nIENTUyB0cmFuc2Zvcm1zIHRvIFNWRyBlbGVtZW50cywgc28gZGVmYXVsdCB0byB1c2luZyB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUgaW5zdGVhZCAodXNlcnMgY2FuIG92ZXJyaWRlIHRoaXMpLlxuXHRcdHZhciBfdHJhbnNmb3JtUHJvcHMgPSAoXCJzY2FsZVgsc2NhbGVZLHNjYWxlWix4LHkseixza2V3WCxza2V3WSxyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHBlcnNwZWN0aXZlLHhQZXJjZW50LHlQZXJjZW50XCIpLnNwbGl0KFwiLFwiKSxcblx0XHRcdF90cmFuc2Zvcm1Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChcInRyYW5zZm9ybVwiKSwgLy90aGUgSmF2YXNjcmlwdCAoY2FtZWxDYXNlKSB0cmFuc2Zvcm0gcHJvcGVydHksIGxpa2UgbXNUcmFuc2Zvcm0sIFdlYmtpdFRyYW5zZm9ybSwgTW96VHJhbnNmb3JtLCBvciBPVHJhbnNmb3JtLlxuXHRcdFx0X3RyYW5zZm9ybVByb3BDU1MgPSBfcHJlZml4Q1NTICsgXCJ0cmFuc2Zvcm1cIixcblx0XHRcdF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX2NoZWNrUHJvcFByZWZpeChcInRyYW5zZm9ybU9yaWdpblwiKSxcblx0XHRcdF9zdXBwb3J0czNEID0gKF9jaGVja1Byb3BQcmVmaXgoXCJwZXJzcGVjdGl2ZVwiKSAhPT0gbnVsbCksXG5cdFx0XHRUcmFuc2Zvcm0gPSBfaW50ZXJuYWxzLlRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR0aGlzLnBlcnNwZWN0aXZlID0gcGFyc2VGbG9hdChDU1NQbHVnaW4uZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlKSB8fCAwO1xuXHRcdFx0XHR0aGlzLmZvcmNlM0QgPSAoQ1NTUGx1Z2luLmRlZmF1bHRGb3JjZTNEID09PSBmYWxzZSB8fCAhX3N1cHBvcnRzM0QpID8gZmFsc2UgOiBDU1NQbHVnaW4uZGVmYXVsdEZvcmNlM0QgfHwgXCJhdXRvXCI7XG5cdFx0XHR9LFxuXHRcdFx0X1NWR0VsZW1lbnQgPSB3aW5kb3cuU1ZHRWxlbWVudCxcblx0XHRcdF91c2VTVkdUcmFuc2Zvcm1BdHRyLFxuXHRcdFx0Ly9Tb21lIGJyb3dzZXJzIChsaWtlIEZpcmVmb3ggYW5kIElFKSBkb24ndCBob25vciB0cmFuc2Zvcm0tb3JpZ2luIHByb3Blcmx5IGluIFNWRyBlbGVtZW50cywgc28gd2UgbmVlZCB0byBtYW51YWxseSBhZGp1c3QgdGhlIG1hdHJpeCBhY2NvcmRpbmdseS4gV2UgZmVhdHVyZSBkZXRlY3QgaGVyZSByYXRoZXIgdGhhbiBhbHdheXMgZG9pbmcgdGhlIGNvbnZlcnNpb24gZm9yIGNlcnRhaW4gYnJvd3NlcnMgYmVjYXVzZSB0aGV5IG1heSBmaXggdGhlIHByb2JsZW0gYXQgc29tZSBwb2ludCBpbiB0aGUgZnV0dXJlLlxuXG5cdFx0XHRfY3JlYXRlU1ZHID0gZnVuY3Rpb24odHlwZSwgY29udGFpbmVyLCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdHZhciBlbGVtZW50ID0gX2RvYy5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCB0eXBlKSxcblx0XHRcdFx0XHRyZWcgPSAvKFthLXpdKShbQS1aXSkvZyxcblx0XHRcdFx0XHRwO1xuXHRcdFx0XHRmb3IgKHAgaW4gYXR0cmlidXRlcykge1xuXHRcdFx0XHRcdGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgcC5yZXBsYWNlKHJlZywgXCIkMS0kMlwiKS50b0xvd2VyQ2FzZSgpLCBhdHRyaWJ1dGVzW3BdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250YWluZXIuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cdFx0XHRcdHJldHVybiBlbGVtZW50O1xuXHRcdFx0fSxcblx0XHRcdF9kb2NFbGVtZW50ID0gX2RvYy5kb2N1bWVudEVsZW1lbnQsXG5cdFx0XHRfZm9yY2VTVkdUcmFuc2Zvcm1BdHRyID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvL0lFIGFuZCBBbmRyb2lkIHN0b2NrIGRvbid0IHN1cHBvcnQgQ1NTIHRyYW5zZm9ybXMgb24gU1ZHIGVsZW1lbnRzLCBzbyB3ZSBtdXN0IHdyaXRlIHRoZW0gdG8gdGhlIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLiBXZSBwb3B1bGF0ZSB0aGlzIHZhcmlhYmxlIGluIHRoZSBfcGFyc2VUcmFuc2Zvcm0oKSBtZXRob2QsIGFuZCBvbmx5IGlmL3doZW4gd2UgY29tZSBhY3Jvc3MgYW4gU1ZHIGVsZW1lbnRcblx0XHRcdFx0dmFyIGZvcmNlID0gX2llVmVycyB8fCAoL0FuZHJvaWQvaS50ZXN0KF9hZ2VudCkgJiYgIXdpbmRvdy5jaHJvbWUpLFxuXHRcdFx0XHRcdHN2ZywgcmVjdCwgd2lkdGg7XG5cdFx0XHRcdGlmIChfZG9jLmNyZWF0ZUVsZW1lbnROUyAmJiAhZm9yY2UpIHsgLy9JRTggYW5kIGVhcmxpZXIgZG9lc24ndCBzdXBwb3J0IFNWRyBhbnl3YXlcblx0XHRcdFx0XHRzdmcgPSBfY3JlYXRlU1ZHKFwic3ZnXCIsIF9kb2NFbGVtZW50KTtcblx0XHRcdFx0XHRyZWN0ID0gX2NyZWF0ZVNWRyhcInJlY3RcIiwgc3ZnLCB7d2lkdGg6MTAwLCBoZWlnaHQ6NTAsIHg6MTAwfSk7XG5cdFx0XHRcdFx0d2lkdGggPSByZWN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuXHRcdFx0XHRcdHJlY3Quc3R5bGVbX3RyYW5zZm9ybU9yaWdpblByb3BdID0gXCI1MCUgNTAlXCI7XG5cdFx0XHRcdFx0cmVjdC5zdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSBcInNjYWxlWCgwLjUpXCI7XG5cdFx0XHRcdFx0Zm9yY2UgPSAod2lkdGggPT09IHJlY3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggJiYgIShfaXNGaXJlZm94ICYmIF9zdXBwb3J0czNEKSk7IC8vbm90ZTogRmlyZWZveCBmYWlscyB0aGUgdGVzdCBldmVuIHRob3VnaCBpdCBkb2VzIHN1cHBvcnQgQ1NTIHRyYW5zZm9ybXMgaW4gM0QuIFNpbmNlIHdlIGNhbid0IHB1c2ggM0Qgc3R1ZmYgaW50byB0aGUgdHJhbnNmb3JtIGF0dHJpYnV0ZSwgd2UgZm9yY2UgRmlyZWZveCB0byBwYXNzIHRoZSB0ZXN0IGhlcmUgKGFzIGxvbmcgYXMgaXQgZG9lcyB0cnVseSBzdXBwb3J0IDNEKS5cblx0XHRcdFx0XHRfZG9jRWxlbWVudC5yZW1vdmVDaGlsZChzdmcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmb3JjZTtcblx0XHRcdH0pKCksXG5cdFx0XHRfcGFyc2VTVkdPcmlnaW4gPSBmdW5jdGlvbihlLCBsb2NhbCwgZGVjb3JhdGVlLCBhYnNvbHV0ZSwgc21vb3RoT3JpZ2luLCBza2lwUmVjb3JkKSB7XG5cdFx0XHRcdHZhciB0bSA9IGUuX2dzVHJhbnNmb3JtLFxuXHRcdFx0XHRcdG0gPSBfZ2V0TWF0cml4KGUsIHRydWUpLFxuXHRcdFx0XHRcdHYsIHgsIHksIHhPcmlnaW4sIHlPcmlnaW4sIGEsIGIsIGMsIGQsIHR4LCB0eSwgZGV0ZXJtaW5hbnQsIHhPcmlnaW5PbGQsIHlPcmlnaW5PbGQ7XG5cdFx0XHRcdGlmICh0bSkge1xuXHRcdFx0XHRcdHhPcmlnaW5PbGQgPSB0bS54T3JpZ2luOyAvL3JlY29yZCB0aGUgb3JpZ2luYWwgdmFsdWVzIGJlZm9yZSB3ZSBhbHRlciB0aGVtLlxuXHRcdFx0XHRcdHlPcmlnaW5PbGQgPSB0bS55T3JpZ2luO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghYWJzb2x1dGUgfHwgKHYgPSBhYnNvbHV0ZS5zcGxpdChcIiBcIikpLmxlbmd0aCA8IDIpIHtcblx0XHRcdFx0XHRiID0gZS5nZXRCQm94KCk7XG5cdFx0XHRcdFx0bG9jYWwgPSBfcGFyc2VQb3NpdGlvbihsb2NhbCkuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdHYgPSBbKGxvY2FsWzBdLmluZGV4T2YoXCIlXCIpICE9PSAtMSA/IHBhcnNlRmxvYXQobG9jYWxbMF0pIC8gMTAwICogYi53aWR0aCA6IHBhcnNlRmxvYXQobG9jYWxbMF0pKSArIGIueCxcblx0XHRcdFx0XHRcdCAobG9jYWxbMV0uaW5kZXhPZihcIiVcIikgIT09IC0xID8gcGFyc2VGbG9hdChsb2NhbFsxXSkgLyAxMDAgKiBiLmhlaWdodCA6IHBhcnNlRmxvYXQobG9jYWxbMV0pKSArIGIueV07XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGVjb3JhdGVlLnhPcmlnaW4gPSB4T3JpZ2luID0gcGFyc2VGbG9hdCh2WzBdKTtcblx0XHRcdFx0ZGVjb3JhdGVlLnlPcmlnaW4gPSB5T3JpZ2luID0gcGFyc2VGbG9hdCh2WzFdKTtcblx0XHRcdFx0aWYgKGFic29sdXRlICYmIG0gIT09IF9pZGVudGl0eTJETWF0cml4KSB7IC8vaWYgc3ZnT3JpZ2luIGlzIGJlaW5nIHNldCwgd2UgbXVzdCBpbnZlcnQgdGhlIG1hdHJpeCBhbmQgZGV0ZXJtaW5lIHdoZXJlIHRoZSBhYnNvbHV0ZSBwb2ludCBpcywgZmFjdG9yaW5nIGluIHRoZSBjdXJyZW50IHRyYW5zZm9ybXMuIE90aGVyd2lzZSwgdGhlIHN2Z09yaWdpbiB3b3VsZCBiZSBiYXNlZCBvbiB0aGUgZWxlbWVudCdzIG5vbi10cmFuc2Zvcm1lZCBwb3NpdGlvbiBvbiB0aGUgY2FudmFzLlxuXHRcdFx0XHRcdGEgPSBtWzBdO1xuXHRcdFx0XHRcdGIgPSBtWzFdO1xuXHRcdFx0XHRcdGMgPSBtWzJdO1xuXHRcdFx0XHRcdGQgPSBtWzNdO1xuXHRcdFx0XHRcdHR4ID0gbVs0XTtcblx0XHRcdFx0XHR0eSA9IG1bNV07XG5cdFx0XHRcdFx0ZGV0ZXJtaW5hbnQgPSAoYSAqIGQgLSBiICogYyk7XG5cdFx0XHRcdFx0eCA9IHhPcmlnaW4gKiAoZCAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoLWMgLyBkZXRlcm1pbmFudCkgKyAoKGMgKiB0eSAtIGQgKiB0eCkgLyBkZXRlcm1pbmFudCk7XG5cdFx0XHRcdFx0eSA9IHhPcmlnaW4gKiAoLWIgLyBkZXRlcm1pbmFudCkgKyB5T3JpZ2luICogKGEgLyBkZXRlcm1pbmFudCkgLSAoKGEgKiB0eSAtIGIgKiB0eCkgLyBkZXRlcm1pbmFudCk7XG5cdFx0XHRcdFx0eE9yaWdpbiA9IGRlY29yYXRlZS54T3JpZ2luID0gdlswXSA9IHg7XG5cdFx0XHRcdFx0eU9yaWdpbiA9IGRlY29yYXRlZS55T3JpZ2luID0gdlsxXSA9IHk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRtKSB7IC8vYXZvaWQganVtcCB3aGVuIHRyYW5zZm9ybU9yaWdpbiBpcyBjaGFuZ2VkIC0gYWRqdXN0IHRoZSB4L3kgdmFsdWVzIGFjY29yZGluZ2x5XG5cdFx0XHRcdFx0aWYgKHNraXBSZWNvcmQpIHtcblx0XHRcdFx0XHRcdGRlY29yYXRlZS54T2Zmc2V0ID0gdG0ueE9mZnNldDtcblx0XHRcdFx0XHRcdGRlY29yYXRlZS55T2Zmc2V0ID0gdG0ueU9mZnNldDtcblx0XHRcdFx0XHRcdHRtID0gZGVjb3JhdGVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc21vb3RoT3JpZ2luIHx8IChzbW9vdGhPcmlnaW4gIT09IGZhbHNlICYmIENTU1BsdWdpbi5kZWZhdWx0U21vb3RoT3JpZ2luICE9PSBmYWxzZSkpIHtcblx0XHRcdFx0XHRcdHggPSB4T3JpZ2luIC0geE9yaWdpbk9sZDtcblx0XHRcdFx0XHRcdHkgPSB5T3JpZ2luIC0geU9yaWdpbk9sZDtcblx0XHRcdFx0XHRcdC8vb3JpZ2luYWxseSwgd2Ugc2ltcGx5IGFkanVzdGVkIHRoZSB4IGFuZCB5IHZhbHVlcywgYnV0IHRoYXQgd291bGQgY2F1c2UgcHJvYmxlbXMgaWYsIGZvciBleGFtcGxlLCB5b3UgY3JlYXRlZCBhIHJvdGF0aW9uYWwgdHdlZW4gcGFydC13YXkgdGhyb3VnaCBhbiB4L3kgdHdlZW4uIE1hbmFnaW5nIHRoZSBvZmZzZXQgaW4gYSBzZXBhcmF0ZSB2YXJpYWJsZSBnaXZlcyB1cyB1bHRpbWF0ZSBmbGV4aWJpbGl0eS5cblx0XHRcdFx0XHRcdC8vdG0ueCAtPSB4IC0gKHggKiBtWzBdICsgeSAqIG1bMl0pO1xuXHRcdFx0XHRcdFx0Ly90bS55IC09IHkgLSAoeCAqIG1bMV0gKyB5ICogbVszXSk7XG5cdFx0XHRcdFx0XHR0bS54T2Zmc2V0ICs9ICh4ICogbVswXSArIHkgKiBtWzJdKSAtIHg7XG5cdFx0XHRcdFx0XHR0bS55T2Zmc2V0ICs9ICh4ICogbVsxXSArIHkgKiBtWzNdKSAtIHk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRtLnhPZmZzZXQgPSB0bS55T2Zmc2V0ID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFza2lwUmVjb3JkKSB7XG5cdFx0XHRcdFx0ZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIiwgdi5qb2luKFwiIFwiKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfY2FuR2V0QkJveCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXR1cm4gZS5nZXRCQm94KCk7IC8vRmlyZWZveCB0aHJvd3MgZXJyb3JzIGlmIHlvdSB0cnkgY2FsbGluZyBnZXRCQm94KCkgb24gYW4gU1ZHIGVsZW1lbnQgdGhhdCdzIG5vdCByZW5kZXJlZCAobGlrZSBpbiBhIDxzeW1ib2w+IG9yIDxkZWZzPikuIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTYxMjExOFxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0fSxcblx0XHRcdF9pc1NWRyA9IGZ1bmN0aW9uKGUpIHsgLy9yZXBvcnRzIGlmIHRoZSBlbGVtZW50IGlzIGFuIFNWRyBvbiB3aGljaCBnZXRCQm94KCkgYWN0dWFsbHkgd29ya3Ncblx0XHRcdFx0cmV0dXJuICEhKF9TVkdFbGVtZW50ICYmIGUuZ2V0QkJveCAmJiBlLmdldENUTSAmJiBfY2FuR2V0QkJveChlKSAmJiAoIWUucGFyZW50Tm9kZSB8fCAoZS5wYXJlbnROb2RlLmdldEJCb3ggJiYgZS5wYXJlbnROb2RlLmdldENUTSkpKTtcblx0XHRcdH0sXG5cdFx0XHRfaWRlbnRpdHkyRE1hdHJpeCA9IFsxLDAsMCwxLDAsMF0sXG5cdFx0XHRfZ2V0TWF0cml4ID0gZnVuY3Rpb24oZSwgZm9yY2UyRCkge1xuXHRcdFx0XHR2YXIgdG0gPSBlLl9nc1RyYW5zZm9ybSB8fCBuZXcgVHJhbnNmb3JtKCksXG5cdFx0XHRcdFx0cm5kID0gMTAwMDAwLFxuXHRcdFx0XHRcdHN0eWxlID0gZS5zdHlsZSxcblx0XHRcdFx0XHRpc0RlZmF1bHQsIHMsIG0sIG4sIGRlYywgbm9uZTtcblx0XHRcdFx0aWYgKF90cmFuc2Zvcm1Qcm9wKSB7XG5cdFx0XHRcdFx0cyA9IF9nZXRTdHlsZShlLCBfdHJhbnNmb3JtUHJvcENTUywgbnVsbCwgdHJ1ZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZS5jdXJyZW50U3R5bGUpIHtcblx0XHRcdFx0XHQvL2ZvciBvbGRlciB2ZXJzaW9ucyBvZiBJRSwgd2UgbmVlZCB0byBpbnRlcnByZXQgdGhlIGZpbHRlciBwb3J0aW9uIHRoYXQgaXMgaW4gdGhlIGZvcm1hdDogcHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChNMTE9Ni4xMjMyMzM5OTU3MzY3NjZlLTE3LCBNMTI9LTEsIE0yMT0xLCBNMjI9Ni4xMjMyMzM5OTU3MzY3NjZlLTE3LCBzaXppbmdNZXRob2Q9J2F1dG8gZXhwYW5kJykgTm90aWNlIHRoYXQgd2UgbmVlZCB0byBzd2FwIGIgYW5kIGMgY29tcGFyZWQgdG8gYSBub3JtYWwgbWF0cml4LlxuXHRcdFx0XHRcdHMgPSBlLmN1cnJlbnRTdHlsZS5maWx0ZXIubWF0Y2goX2llR2V0TWF0cml4RXhwKTtcblx0XHRcdFx0XHRzID0gKHMgJiYgcy5sZW5ndGggPT09IDQpID8gW3NbMF0uc3Vic3RyKDQpLCBOdW1iZXIoc1syXS5zdWJzdHIoNCkpLCBOdW1iZXIoc1sxXS5zdWJzdHIoNCkpLCBzWzNdLnN1YnN0cig0KSwgKHRtLnggfHwgMCksICh0bS55IHx8IDApXS5qb2luKFwiLFwiKSA6IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXNEZWZhdWx0ID0gKCFzIHx8IHMgPT09IFwibm9uZVwiIHx8IHMgPT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIpO1xuXHRcdFx0XHRpZiAoaXNEZWZhdWx0ICYmIF90cmFuc2Zvcm1Qcm9wICYmICgobm9uZSA9IChfZ2V0Q29tcHV0ZWRTdHlsZShlKS5kaXNwbGF5ID09PSBcIm5vbmVcIikpIHx8ICFlLnBhcmVudE5vZGUpKSB7XG5cdFx0XHRcdFx0aWYgKG5vbmUpIHsgLy9icm93c2VycyBkb24ndCByZXBvcnQgdHJhbnNmb3JtcyBhY2N1cmF0ZWx5IHVubGVzcyB0aGUgZWxlbWVudCBpcyBpbiB0aGUgRE9NIGFuZCBoYXMgYSBkaXNwbGF5IHZhbHVlIHRoYXQncyBub3QgXCJub25lXCIuXG5cdFx0XHRcdFx0XHRuID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghZS5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0XHRkZWMgPSAxOyAvL2ZsYWdcblx0XHRcdFx0XHRcdF9kb2NFbGVtZW50LmFwcGVuZENoaWxkKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzID0gX2dldFN0eWxlKGUsIF90cmFuc2Zvcm1Qcm9wQ1NTLCBudWxsLCB0cnVlKTtcblx0XHRcdFx0XHRpc0RlZmF1bHQgPSAoIXMgfHwgcyA9PT0gXCJub25lXCIgfHwgcyA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIik7XG5cdFx0XHRcdFx0aWYgKG4pIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBuO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobm9uZSkge1xuXHRcdFx0XHRcdFx0X3JlbW92ZVByb3Aoc3R5bGUsIFwiZGlzcGxheVwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGRlYykge1xuXHRcdFx0XHRcdFx0X2RvY0VsZW1lbnQucmVtb3ZlQ2hpbGQoZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0bS5zdmcgfHwgKGUuZ2V0QkJveCAmJiBfaXNTVkcoZSkpKSB7XG5cdFx0XHRcdFx0aWYgKGlzRGVmYXVsdCAmJiAoc3R5bGVbX3RyYW5zZm9ybVByb3BdICsgXCJcIikuaW5kZXhPZihcIm1hdHJpeFwiKSAhPT0gLTEpIHsgLy9zb21lIGJyb3dzZXJzIChsaWtlIENocm9tZSA0MCkgZG9uJ3QgY29ycmVjdGx5IHJlcG9ydCB0cmFuc2Zvcm1zIHRoYXQgYXJlIGFwcGxpZWQgaW5saW5lIG9uIGFuIFNWRyBlbGVtZW50ICh0aGV5IGRvbid0IGdldCBpbmNsdWRlZCBpbiB0aGUgY29tcHV0ZWQgc3R5bGUpLCBzbyB3ZSBkb3VibGUtY2hlY2sgaGVyZSBhbmQgYWNjZXB0IG1hdHJpeCB2YWx1ZXNcblx0XHRcdFx0XHRcdHMgPSBzdHlsZVtfdHJhbnNmb3JtUHJvcF07XG5cdFx0XHRcdFx0XHRpc0RlZmF1bHQgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtID0gZS5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cdFx0XHRcdFx0aWYgKGlzRGVmYXVsdCAmJiBtKSB7XG5cdFx0XHRcdFx0XHRpZiAobS5pbmRleE9mKFwibWF0cml4XCIpICE9PSAtMSkgeyAvL2p1c3QgaW4gY2FzZSB0aGVyZSdzIGEgXCJ0cmFuc2Zvcm1cIiB2YWx1ZSBzcGVjaWZpZWQgYXMgYW4gYXR0cmlidXRlIGluc3RlYWQgb2YgQ1NTIHN0eWxlLiBBY2NlcHQgZWl0aGVyIGEgbWF0cml4KCkgb3Igc2ltcGxlIHRyYW5zbGF0ZSgpIHZhbHVlIHRob3VnaC5cblx0XHRcdFx0XHRcdFx0cyA9IG07XG5cdFx0XHRcdFx0XHRcdGlzRGVmYXVsdCA9IDA7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKG0uaW5kZXhPZihcInRyYW5zbGF0ZVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0cyA9IFwibWF0cml4KDEsMCwwLDEsXCIgKyBtLm1hdGNoKC8oPzpcXC18XFxiKVtcXGRcXC1cXC5lXStcXGIvZ2kpLmpvaW4oXCIsXCIpICsgXCIpXCI7XG5cdFx0XHRcdFx0XHRcdGlzRGVmYXVsdCA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpc0RlZmF1bHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gX2lkZW50aXR5MkRNYXRyaXg7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9zcGxpdCB0aGUgbWF0cml4IHZhbHVlcyBvdXQgaW50byBhbiBhcnJheSAobSBmb3IgbWF0cml4KVxuXHRcdFx0XHRtID0gKHMgfHwgXCJcIikubWF0Y2goX251bUV4cCkgfHwgW107XG5cdFx0XHRcdGkgPSBtLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0biA9IE51bWJlcihtW2ldKTtcblx0XHRcdFx0XHRtW2ldID0gKGRlYyA9IG4gLSAobiB8PSAwKSkgPyAoKGRlYyAqIHJuZCArIChkZWMgPCAwID8gLTAuNSA6IDAuNSkpIHwgMCkgLyBybmQgKyBuIDogbjsgLy9jb252ZXJ0IHN0cmluZ3MgdG8gTnVtYmVycyBhbmQgcm91bmQgdG8gNSBkZWNpbWFsIHBsYWNlcyB0byBhdm9pZCBpc3N1ZXMgd2l0aCB0aW55IG51bWJlcnMuIFJvdWdobHkgMjB4IGZhc3RlciB0aGFuIE51bWJlci50b0ZpeGVkKCkuIFdlIGFsc28gbXVzdCBtYWtlIHN1cmUgdG8gcm91bmQgYmVmb3JlIGRpdmlkaW5nIHNvIHRoYXQgdmFsdWVzIGxpa2UgMC45OTk5OTk5OTk5IGJlY29tZSAxIHRvIGF2b2lkIGdsaXRjaGVzIGluIGJyb3dzZXIgcmVuZGVyaW5nIGFuZCBpbnRlcnByZXRhdGlvbiBvZiBmbGlwcGVkL3JvdGF0ZWQgM0QgbWF0cmljZXMuIEFuZCBkb24ndCBqdXN0IG11bHRpcGx5IHRoZSBudW1iZXIgYnkgcm5kLCBmbG9vciBpdCwgYW5kIHRoZW4gZGl2aWRlIGJ5IHJuZCBiZWNhdXNlIHRoZSBiaXR3aXNlIG9wZXJhdGlvbnMgbWF4IG91dCBhdCBhIDMyLWJpdCBzaWduZWQgaW50ZWdlciwgdGh1cyBpdCBjb3VsZCBnZXQgY2xpcHBlZCBhdCBhIHJlbGF0aXZlbHkgbG93IHZhbHVlIChsaWtlIDIyLDAwMC4wMDAwMCBmb3IgZXhhbXBsZSkuXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIChmb3JjZTJEICYmIG0ubGVuZ3RoID4gNikgPyBbbVswXSwgbVsxXSwgbVs0XSwgbVs1XSwgbVsxMl0sIG1bMTNdXSA6IG07XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFBhcnNlcyB0aGUgdHJhbnNmb3JtIHZhbHVlcyBmb3IgYW4gZWxlbWVudCwgcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIHgsIHksIHosIHNjYWxlWCwgc2NhbGVZLCBzY2FsZVosIHJvdGF0aW9uLCByb3RhdGlvblgsIHJvdGF0aW9uWSwgc2tld1gsIGFuZCBza2V3WSBwcm9wZXJ0aWVzLiBOb3RlOiBieSBkZWZhdWx0IChmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyksIGFsbCBza2V3aW5nIGlzIGNvbWJpbmVkIGludG8gc2tld1ggYW5kIHJvdGF0aW9uIGJ1dCBza2V3WSBzdGlsbCBoYXMgYSBwbGFjZSBpbiB0aGUgdHJhbnNmb3JtIG9iamVjdCBzbyB0aGF0IHdlIGNhbiByZWNvcmQgaG93IG11Y2ggb2YgdGhlIHNrZXcgaXMgYXR0cmlidXRlZCB0byBza2V3WCB2cyBza2V3WS4gUmVtZW1iZXIsIGEgc2tld1kgb2YgMTAgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBhbmQgc2tld1ggb2YgLTEwLlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IHRhcmdldCBlbGVtZW50XG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdD19IGNzIGNvbXB1dGVkIHN0eWxlIG9iamVjdCAob3B0aW9uYWwpXG5cdFx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSByZWMgaWYgdHJ1ZSwgdGhlIHRyYW5zZm9ybSB2YWx1ZXMgd2lsbCBiZSByZWNvcmRlZCB0byB0aGUgdGFyZ2V0IGVsZW1lbnQncyBfZ3NUcmFuc2Zvcm0gb2JqZWN0LCBsaWtlIHRhcmdldC5fZ3NUcmFuc2Zvcm0gPSB7eDowLCB5OjAsIHo6MCwgc2NhbGVYOjEuLi59XG5cdFx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBwYXJzZSBpZiB0cnVlLCB3ZSdsbCBpZ25vcmUgYW55IF9nc1RyYW5zZm9ybSB2YWx1ZXMgdGhhdCBhbHJlYWR5IGV4aXN0IG9uIHRoZSBlbGVtZW50LCBhbmQgZm9yY2UgYSByZXBhcnNpbmcgb2YgdGhlIGNzcyAoY2FsY3VsYXRlZCBzdHlsZSlcblx0XHRcdCAqIEByZXR1cm4ge29iamVjdH0gb2JqZWN0IGNvbnRhaW5pbmcgYWxsIG9mIHRoZSB0cmFuc2Zvcm0gcHJvcGVydGllcy92YWx1ZXMgbGlrZSB7eDowLCB5OjAsIHo6MCwgc2NhbGVYOjEuLi59XG5cdFx0XHQgKi9cblx0XHRcdF9nZXRUcmFuc2Zvcm0gPSBfaW50ZXJuYWxzLmdldFRyYW5zZm9ybSA9IGZ1bmN0aW9uKHQsIGNzLCByZWMsIHBhcnNlKSB7XG5cdFx0XHRcdGlmICh0Ll9nc1RyYW5zZm9ybSAmJiByZWMgJiYgIXBhcnNlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHQuX2dzVHJhbnNmb3JtOyAvL2lmIHRoZSBlbGVtZW50IGFscmVhZHkgaGFzIGEgX2dzVHJhbnNmb3JtLCB1c2UgdGhhdC4gTm90ZTogc29tZSBicm93c2VycyBkb24ndCBhY2N1cmF0ZWx5IHJldHVybiB0aGUgY2FsY3VsYXRlZCBzdHlsZSBmb3IgdGhlIHRyYW5zZm9ybSAocGFydGljdWxhcmx5IGZvciBTVkcpLCBzbyBpdCdzIGFsbW9zdCBhbHdheXMgc2FmZXN0IHRvIGp1c3QgdXNlIHRoZSB2YWx1ZXMgd2UndmUgYWxyZWFkeSBhcHBsaWVkIHJhdGhlciB0aGFuIHJlLXBhcnNpbmcgdGhpbmdzLlxuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciB0bSA9IHJlYyA/IHQuX2dzVHJhbnNmb3JtIHx8IG5ldyBUcmFuc2Zvcm0oKSA6IG5ldyBUcmFuc2Zvcm0oKSxcblx0XHRcdFx0XHRpbnZYID0gKHRtLnNjYWxlWCA8IDApLCAvL2luIG9yZGVyIHRvIGludGVycHJldCB0aGluZ3MgcHJvcGVybHksIHdlIG5lZWQgdG8ga25vdyBpZiB0aGUgdXNlciBhcHBsaWVkIGEgbmVnYXRpdmUgc2NhbGVYIHByZXZpb3VzbHkgc28gdGhhdCB3ZSBjYW4gYWRqdXN0IHRoZSByb3RhdGlvbiBhbmQgc2tld1ggYWNjb3JkaW5nbHkuIE90aGVyd2lzZSwgaWYgd2UgYWx3YXlzIGludGVycHJldCBhIGZsaXBwZWQgbWF0cml4IGFzIGFmZmVjdGluZyBzY2FsZVkgYW5kIHRoZSB1c2VyIG9ubHkgd2FudHMgdG8gdHdlZW4gdGhlIHNjYWxlWCBvbiBtdWx0aXBsZSBzZXF1ZW50aWFsIHR3ZWVucywgaXQgd291bGQga2VlcCB0aGUgbmVnYXRpdmUgc2NhbGVZIHdpdGhvdXQgdGhhdCBiZWluZyB0aGUgdXNlcidzIGludGVudC5cblx0XHRcdFx0XHRtaW4gPSAwLjAwMDAyLFxuXHRcdFx0XHRcdHJuZCA9IDEwMDAwMCxcblx0XHRcdFx0XHR6T3JpZ2luID0gX3N1cHBvcnRzM0QgPyBwYXJzZUZsb2F0KF9nZXRTdHlsZSh0LCBfdHJhbnNmb3JtT3JpZ2luUHJvcCwgY3MsIGZhbHNlLCBcIjAgMCAwXCIpLnNwbGl0KFwiIFwiKVsyXSkgfHwgdG0uek9yaWdpbiAgfHwgMCA6IDAsXG5cdFx0XHRcdFx0ZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlID0gcGFyc2VGbG9hdChDU1NQbHVnaW4uZGVmYXVsdFRyYW5zZm9ybVBlcnNwZWN0aXZlKSB8fCAwLFxuXHRcdFx0XHRcdG0sIGksIHNjYWxlWCwgc2NhbGVZLCByb3RhdGlvbiwgc2tld1g7XG5cblx0XHRcdFx0dG0uc3ZnID0gISEodC5nZXRCQm94ICYmIF9pc1NWRyh0KSk7XG5cdFx0XHRcdGlmICh0bS5zdmcpIHtcblx0XHRcdFx0XHRfcGFyc2VTVkdPcmlnaW4odCwgX2dldFN0eWxlKHQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCBjcywgZmFsc2UsIFwiNTAlIDUwJVwiKSArIFwiXCIsIHRtLCB0LmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiKSk7XG5cdFx0XHRcdFx0X3VzZVNWR1RyYW5zZm9ybUF0dHIgPSBDU1NQbHVnaW4udXNlU1ZHVHJhbnNmb3JtQXR0ciB8fCBfZm9yY2VTVkdUcmFuc2Zvcm1BdHRyO1xuXHRcdFx0XHR9XG5cdFx0XHRcdG0gPSBfZ2V0TWF0cml4KHQpO1xuXHRcdFx0XHRpZiAobSAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHtcblxuXHRcdFx0XHRcdGlmIChtLmxlbmd0aCA9PT0gMTYpIHtcblx0XHRcdFx0XHRcdC8vd2UnbGwgb25seSBsb29rIGF0IHRoZXNlIHBvc2l0aW9uLXJlbGF0ZWQgNiB2YXJpYWJsZXMgZmlyc3QgYmVjYXVzZSBpZiB4L3kveiBhbGwgbWF0Y2gsIGl0J3MgcmVsYXRpdmVseSBzYWZlIHRvIGFzc3VtZSB3ZSBkb24ndCBuZWVkIHRvIHJlLXBhcnNlIGV2ZXJ5dGhpbmcgd2hpY2ggcmlza3MgbG9zaW5nIGltcG9ydGFudCByb3RhdGlvbmFsIGluZm9ybWF0aW9uIChsaWtlIHJvdGF0aW9uWDoxODAgcGx1cyByb3RhdGlvblk6MTgwIHdvdWxkIGxvb2sgdGhlIHNhbWUgYXMgcm90YXRpb246MTgwIC0gdGhlcmUncyBubyB3YXkgdG8ga25vdyBmb3Igc3VyZSB3aGljaCBkaXJlY3Rpb24gd2FzIHRha2VuIGJhc2VkIHNvbGVseSBvbiB0aGUgbWF0cml4M2QoKSB2YWx1ZXMpXG5cdFx0XHRcdFx0XHR2YXIgYTExID0gbVswXSwgYTIxID0gbVsxXSwgYTMxID0gbVsyXSwgYTQxID0gbVszXSxcblx0XHRcdFx0XHRcdFx0YTEyID0gbVs0XSwgYTIyID0gbVs1XSwgYTMyID0gbVs2XSwgYTQyID0gbVs3XSxcblx0XHRcdFx0XHRcdFx0YTEzID0gbVs4XSwgYTIzID0gbVs5XSwgYTMzID0gbVsxMF0sXG5cdFx0XHRcdFx0XHRcdGExNCA9IG1bMTJdLCBhMjQgPSBtWzEzXSwgYTM0ID0gbVsxNF0sXG5cdFx0XHRcdFx0XHRcdGE0MyA9IG1bMTFdLFxuXHRcdFx0XHRcdFx0XHRhbmdsZSA9IE1hdGguYXRhbjIoYTMyLCBhMzMpLFxuXHRcdFx0XHRcdFx0XHR0MSwgdDIsIHQzLCB0NCwgY29zLCBzaW47XG5cblx0XHRcdFx0XHRcdC8vd2UgbWFudWFsbHkgY29tcGVuc2F0ZSBmb3Igbm9uLXplcm8geiBjb21wb25lbnQgb2YgdHJhbnNmb3JtT3JpZ2luIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gU2FmYXJpXG5cdFx0XHRcdFx0XHRpZiAodG0uek9yaWdpbikge1xuXHRcdFx0XHRcdFx0XHRhMzQgPSAtdG0uek9yaWdpbjtcblx0XHRcdFx0XHRcdFx0YTE0ID0gYTEzKmEzNC1tWzEyXTtcblx0XHRcdFx0XHRcdFx0YTI0ID0gYTIzKmEzNC1tWzEzXTtcblx0XHRcdFx0XHRcdFx0YTM0ID0gYTMzKmEzNCt0bS56T3JpZ2luLW1bMTRdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dG0ucm90YXRpb25YID0gYW5nbGUgKiBfUkFEMkRFRztcblx0XHRcdFx0XHRcdC8vcm90YXRpb25YXG5cdFx0XHRcdFx0XHRpZiAoYW5nbGUpIHtcblx0XHRcdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0c2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0dDEgPSBhMTIqY29zK2ExMypzaW47XG5cdFx0XHRcdFx0XHRcdHQyID0gYTIyKmNvcythMjMqc2luO1xuXHRcdFx0XHRcdFx0XHR0MyA9IGEzMipjb3MrYTMzKnNpbjtcblx0XHRcdFx0XHRcdFx0YTEzID0gYTEyKi1zaW4rYTEzKmNvcztcblx0XHRcdFx0XHRcdFx0YTIzID0gYTIyKi1zaW4rYTIzKmNvcztcblx0XHRcdFx0XHRcdFx0YTMzID0gYTMyKi1zaW4rYTMzKmNvcztcblx0XHRcdFx0XHRcdFx0YTQzID0gYTQyKi1zaW4rYTQzKmNvcztcblx0XHRcdFx0XHRcdFx0YTEyID0gdDE7XG5cdFx0XHRcdFx0XHRcdGEyMiA9IHQyO1xuXHRcdFx0XHRcdFx0XHRhMzIgPSB0Mztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vcm90YXRpb25ZXG5cdFx0XHRcdFx0XHRhbmdsZSA9IE1hdGguYXRhbjIoLWEzMSwgYTMzKTtcblx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uWSA9IGFuZ2xlICogX1JBRDJERUc7XG5cdFx0XHRcdFx0XHRpZiAoYW5nbGUpIHtcblx0XHRcdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0c2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0dDEgPSBhMTEqY29zLWExMypzaW47XG5cdFx0XHRcdFx0XHRcdHQyID0gYTIxKmNvcy1hMjMqc2luO1xuXHRcdFx0XHRcdFx0XHR0MyA9IGEzMSpjb3MtYTMzKnNpbjtcblx0XHRcdFx0XHRcdFx0YTIzID0gYTIxKnNpbithMjMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMzMgPSBhMzEqc2luK2EzMypjb3M7XG5cdFx0XHRcdFx0XHRcdGE0MyA9IGE0MSpzaW4rYTQzKmNvcztcblx0XHRcdFx0XHRcdFx0YTExID0gdDE7XG5cdFx0XHRcdFx0XHRcdGEyMSA9IHQyO1xuXHRcdFx0XHRcdFx0XHRhMzEgPSB0Mztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vcm90YXRpb25aXG5cdFx0XHRcdFx0XHRhbmdsZSA9IE1hdGguYXRhbjIoYTIxLCBhMTEpO1xuXHRcdFx0XHRcdFx0dG0ucm90YXRpb24gPSBhbmdsZSAqIF9SQUQyREVHO1xuXHRcdFx0XHRcdFx0aWYgKGFuZ2xlKSB7XG5cdFx0XHRcdFx0XHRcdGNvcyA9IE1hdGguY29zKC1hbmdsZSk7XG5cdFx0XHRcdFx0XHRcdHNpbiA9IE1hdGguc2luKC1hbmdsZSk7XG5cdFx0XHRcdFx0XHRcdGExMSA9IGExMSpjb3MrYTEyKnNpbjtcblx0XHRcdFx0XHRcdFx0dDIgPSBhMjEqY29zK2EyMipzaW47XG5cdFx0XHRcdFx0XHRcdGEyMiA9IGEyMSotc2luK2EyMipjb3M7XG5cdFx0XHRcdFx0XHRcdGEzMiA9IGEzMSotc2luK2EzMipjb3M7XG5cdFx0XHRcdFx0XHRcdGEyMSA9IHQyO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAodG0ucm90YXRpb25YICYmIE1hdGguYWJzKHRtLnJvdGF0aW9uWCkgKyBNYXRoLmFicyh0bS5yb3RhdGlvbikgPiAzNTkuOSkgeyAvL3doZW4gcm90YXRpb25ZIGlzIHNldCwgaXQgd2lsbCBvZnRlbiBiZSBwYXJzZWQgYXMgMTgwIGRlZ3JlZXMgZGlmZmVyZW50IHRoYW4gaXQgc2hvdWxkIGJlLCBhbmQgcm90YXRpb25YIGFuZCByb3RhdGlvbiBib3RoIGJlaW5nIDE4MCAoaXQgbG9va3MgdGhlIHNhbWUpLCBzbyB3ZSBhZGp1c3QgZm9yIHRoYXQgaGVyZS5cblx0XHRcdFx0XHRcdFx0dG0ucm90YXRpb25YID0gdG0ucm90YXRpb24gPSAwO1xuXHRcdFx0XHRcdFx0XHR0bS5yb3RhdGlvblkgPSAxODAgLSB0bS5yb3RhdGlvblk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHRtLnNjYWxlWCA9ICgoTWF0aC5zcXJ0KGExMSAqIGExMSArIGEyMSAqIGEyMSkgKiBybmQgKyAwLjUpIHwgMCkgLyBybmQ7XG5cdFx0XHRcdFx0XHR0bS5zY2FsZVkgPSAoKE1hdGguc3FydChhMjIgKiBhMjIgKyBhMjMgKiBhMjMpICogcm5kICsgMC41KSB8IDApIC8gcm5kO1xuXHRcdFx0XHRcdFx0dG0uc2NhbGVaID0gKChNYXRoLnNxcnQoYTMyICogYTMyICsgYTMzICogYTMzKSAqIHJuZCArIDAuNSkgfCAwKSAvIHJuZDtcblx0XHRcdFx0XHRcdGlmICh0bS5yb3RhdGlvblggfHwgdG0ucm90YXRpb25ZKSB7XG5cdFx0XHRcdFx0XHRcdHRtLnNrZXdYID0gMDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRtLnNrZXdYID0gKGExMiB8fCBhMjIpID8gTWF0aC5hdGFuMihhMTIsIGEyMikgKiBfUkFEMkRFRyArIHRtLnJvdGF0aW9uIDogdG0uc2tld1ggfHwgMDtcblx0XHRcdFx0XHRcdFx0aWYgKE1hdGguYWJzKHRtLnNrZXdYKSA+IDkwICYmIE1hdGguYWJzKHRtLnNrZXdYKSA8IDI3MCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChpbnZYKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0bS5zY2FsZVggKj0gLTE7XG5cdFx0XHRcdFx0XHRcdFx0XHR0bS5za2V3WCArPSAodG0ucm90YXRpb24gPD0gMCkgPyAxODAgOiAtMTgwO1xuXHRcdFx0XHRcdFx0XHRcdFx0dG0ucm90YXRpb24gKz0gKHRtLnJvdGF0aW9uIDw9IDApID8gMTgwIDogLTE4MDtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0dG0uc2NhbGVZICo9IC0xO1xuXHRcdFx0XHRcdFx0XHRcdFx0dG0uc2tld1ggKz0gKHRtLnNrZXdYIDw9IDApID8gMTgwIDogLTE4MDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRtLnBlcnNwZWN0aXZlID0gYTQzID8gMSAvICgoYTQzIDwgMCkgPyAtYTQzIDogYTQzKSA6IDA7XG5cdFx0XHRcdFx0XHR0bS54ID0gYTE0O1xuXHRcdFx0XHRcdFx0dG0ueSA9IGEyNDtcblx0XHRcdFx0XHRcdHRtLnogPSBhMzQ7XG5cdFx0XHRcdFx0XHRpZiAodG0uc3ZnKSB7XG5cdFx0XHRcdFx0XHRcdHRtLnggLT0gdG0ueE9yaWdpbiAtICh0bS54T3JpZ2luICogYTExIC0gdG0ueU9yaWdpbiAqIGExMik7XG5cdFx0XHRcdFx0XHRcdHRtLnkgLT0gdG0ueU9yaWdpbiAtICh0bS55T3JpZ2luICogYTIxIC0gdG0ueE9yaWdpbiAqIGEyMik7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCghX3N1cHBvcnRzM0QgfHwgcGFyc2UgfHwgIW0ubGVuZ3RoIHx8IHRtLnggIT09IG1bNF0gfHwgdG0ueSAhPT0gbVs1XSB8fCAoIXRtLnJvdGF0aW9uWCAmJiAhdG0ucm90YXRpb25ZKSkpIHsgLy9zb21ldGltZXMgYSA2LWVsZW1lbnQgbWF0cml4IGlzIHJldHVybmVkIGV2ZW4gd2hlbiB3ZSBwZXJmb3JtZWQgM0QgdHJhbnNmb3JtcywgbGlrZSBpZiByb3RhdGlvblggYW5kIHJvdGF0aW9uWSBhcmUgMTgwLiBJbiBjYXNlcyBsaWtlIHRoaXMsIHdlIHN0aWxsIG5lZWQgdG8gaG9ub3IgdGhlIDNEIHRyYW5zZm9ybXMuIElmIHdlIGp1c3QgcmVseSBvbiB0aGUgMkQgaW5mbywgaXQgY291bGQgYWZmZWN0IGhvdyB0aGUgZGF0YSBpcyBpbnRlcnByZXRlZCwgbGlrZSBzY2FsZVkgbWlnaHQgZ2V0IHNldCB0byAtMSBvciByb3RhdGlvbiBjb3VsZCBnZXQgb2Zmc2V0IGJ5IDE4MCBkZWdyZWVzLiBGb3IgZXhhbXBsZSwgZG8gYSBUd2VlbkxpdGUudG8oZWxlbWVudCwgMSwge2Nzczp7cm90YXRpb25YOjE4MCwgcm90YXRpb25ZOjE4MH19KSBhbmQgdGhlbiBsYXRlciwgVHdlZW5MaXRlLnRvKGVsZW1lbnQsIDEsIHtjc3M6e3JvdGF0aW9uWDowfX0pIGFuZCB3aXRob3V0IHRoaXMgY29uZGl0aW9uYWwgbG9naWMgaW4gcGxhY2UsIGl0J2QganVtcCB0byBhIHN0YXRlIG9mIGJlaW5nIHVucm90YXRlZCB3aGVuIHRoZSAybmQgdHdlZW4gc3RhcnRzLiBUaGVuIGFnYWluLCB3ZSBuZWVkIHRvIGhvbm9yIHRoZSBmYWN0IHRoYXQgdGhlIHVzZXIgQ09VTEQgYWx0ZXIgdGhlIHRyYW5zZm9ybXMgb3V0c2lkZSBvZiBDU1NQbHVnaW4sIGxpa2UgYnkgbWFudWFsbHkgYXBwbHlpbmcgbmV3IGNzcywgc28gd2UgdHJ5IHRvIHNlbnNlIHRoYXQgYnkgbG9va2luZyBhdCB4IGFuZCB5IGJlY2F1c2UgaWYgdGhvc2UgY2hhbmdlZCwgd2Uga25vdyB0aGUgY2hhbmdlcyB3ZXJlIG1hZGUgb3V0c2lkZSBDU1NQbHVnaW4gYW5kIHdlIGZvcmNlIGEgcmVpbnRlcnByZXRhdGlvbiBvZiB0aGUgbWF0cml4IHZhbHVlcy4gQWxzbywgaW4gV2Via2l0IGJyb3dzZXJzLCBpZiB0aGUgZWxlbWVudCdzIFwiZGlzcGxheVwiIGlzIFwibm9uZVwiLCBpdHMgY2FsY3VsYXRlZCBzdHlsZSB2YWx1ZSB3aWxsIGFsd2F5cyByZXR1cm4gZW1wdHksIHNvIGlmIHdlJ3ZlIGFscmVhZHkgcmVjb3JkZWQgdGhlIHZhbHVlcyBpbiB0aGUgX2dzVHJhbnNmb3JtIG9iamVjdCwgd2UnbGwganVzdCByZWx5IG9uIHRob3NlLlxuXHRcdFx0XHRcdFx0dmFyIGsgPSAobS5sZW5ndGggPj0gNiksXG5cdFx0XHRcdFx0XHRcdGEgPSBrID8gbVswXSA6IDEsXG5cdFx0XHRcdFx0XHRcdGIgPSBtWzFdIHx8IDAsXG5cdFx0XHRcdFx0XHRcdGMgPSBtWzJdIHx8IDAsXG5cdFx0XHRcdFx0XHRcdGQgPSBrID8gbVszXSA6IDE7XG5cdFx0XHRcdFx0XHR0bS54ID0gbVs0XSB8fCAwO1xuXHRcdFx0XHRcdFx0dG0ueSA9IG1bNV0gfHwgMDtcblx0XHRcdFx0XHRcdHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTtcblx0XHRcdFx0XHRcdHNjYWxlWSA9IE1hdGguc3FydChkICogZCArIGMgKiBjKTtcblx0XHRcdFx0XHRcdHJvdGF0aW9uID0gKGEgfHwgYikgPyBNYXRoLmF0YW4yKGIsIGEpICogX1JBRDJERUcgOiB0bS5yb3RhdGlvbiB8fCAwOyAvL25vdGU6IGlmIHNjYWxlWCBpcyAwLCB3ZSBjYW5ub3QgYWNjdXJhdGVseSBtZWFzdXJlIHJvdGF0aW9uLiBTYW1lIGZvciBza2V3WCB3aXRoIGEgc2NhbGVZIG9mIDAuIFRoZXJlZm9yZSwgd2UgZGVmYXVsdCB0byB0aGUgcHJldmlvdXNseSByZWNvcmRlZCB2YWx1ZSAob3IgemVybyBpZiB0aGF0IGRvZXNuJ3QgZXhpc3QpLlxuXHRcdFx0XHRcdFx0c2tld1ggPSAoYyB8fCBkKSA/IE1hdGguYXRhbjIoYywgZCkgKiBfUkFEMkRFRyArIHJvdGF0aW9uIDogdG0uc2tld1ggfHwgMDtcblx0XHRcdFx0XHRcdGlmIChNYXRoLmFicyhza2V3WCkgPiA5MCAmJiBNYXRoLmFicyhza2V3WCkgPCAyNzApIHtcblx0XHRcdFx0XHRcdFx0aWYgKGludlgpIHtcblx0XHRcdFx0XHRcdFx0XHRzY2FsZVggKj0gLTE7XG5cdFx0XHRcdFx0XHRcdFx0c2tld1ggKz0gKHJvdGF0aW9uIDw9IDApID8gMTgwIDogLTE4MDtcblx0XHRcdFx0XHRcdFx0XHRyb3RhdGlvbiArPSAocm90YXRpb24gPD0gMCkgPyAxODAgOiAtMTgwO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHNjYWxlWSAqPSAtMTtcblx0XHRcdFx0XHRcdFx0XHRza2V3WCArPSAoc2tld1ggPD0gMCkgPyAxODAgOiAtMTgwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0bS5zY2FsZVggPSBzY2FsZVg7XG5cdFx0XHRcdFx0XHR0bS5zY2FsZVkgPSBzY2FsZVk7XG5cdFx0XHRcdFx0XHR0bS5yb3RhdGlvbiA9IHJvdGF0aW9uO1xuXHRcdFx0XHRcdFx0dG0uc2tld1ggPSBza2V3WDtcblx0XHRcdFx0XHRcdGlmIChfc3VwcG9ydHMzRCkge1xuXHRcdFx0XHRcdFx0XHR0bS5yb3RhdGlvblggPSB0bS5yb3RhdGlvblkgPSB0bS56ID0gMDtcblx0XHRcdFx0XHRcdFx0dG0ucGVyc3BlY3RpdmUgPSBkZWZhdWx0VHJhbnNmb3JtUGVyc3BlY3RpdmU7XG5cdFx0XHRcdFx0XHRcdHRtLnNjYWxlWiA9IDE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodG0uc3ZnKSB7XG5cdFx0XHRcdFx0XHRcdHRtLnggLT0gdG0ueE9yaWdpbiAtICh0bS54T3JpZ2luICogYSArIHRtLnlPcmlnaW4gKiBjKTtcblx0XHRcdFx0XHRcdFx0dG0ueSAtPSB0bS55T3JpZ2luIC0gKHRtLnhPcmlnaW4gKiBiICsgdG0ueU9yaWdpbiAqIGQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0bS56T3JpZ2luID0gek9yaWdpbjtcblx0XHRcdFx0XHQvL3NvbWUgYnJvd3NlcnMgaGF2ZSBhIGhhcmQgdGltZSB3aXRoIHZlcnkgc21hbGwgdmFsdWVzIGxpa2UgMi40NDkyOTM1OTgyOTQ3MDY0ZS0xNiAobm90aWNlIHRoZSBcImUtXCIgdG93YXJkcyB0aGUgZW5kKSBhbmQgd291bGQgcmVuZGVyIHRoZSBvYmplY3Qgc2xpZ2h0bHkgb2ZmLiBTbyB3ZSByb3VuZCB0byAwIGluIHRoZXNlIGNhc2VzLiBUaGUgY29uZGl0aW9uYWwgbG9naWMgaGVyZSBpcyBmYXN0ZXIgdGhhbiBjYWxsaW5nIE1hdGguYWJzKCkuIEFsc28sIGJyb3dzZXJzIHRlbmQgdG8gcmVuZGVyIGEgU0xJR0hUTFkgcm90YXRlZCBvYmplY3QgaW4gYSBmdXp6eSB3YXksIHNvIHdlIG5lZWQgdG8gc25hcCB0byBleGFjdGx5IDAgd2hlbiBhcHByb3ByaWF0ZS5cblx0XHRcdFx0XHRmb3IgKGkgaW4gdG0pIHtcblx0XHRcdFx0XHRcdGlmICh0bVtpXSA8IG1pbikgaWYgKHRtW2ldID4gLW1pbikge1xuXHRcdFx0XHRcdFx0XHR0bVtpXSA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vREVCVUc6IF9sb2coXCJwYXJzZWQgcm90YXRpb24gb2YgXCIgKyB0LmdldEF0dHJpYnV0ZShcImlkXCIpK1wiOiBcIisodG0ucm90YXRpb25YKStcIiwgXCIrKHRtLnJvdGF0aW9uWSkrXCIsIFwiKyh0bS5yb3RhdGlvbikrXCIsIHNjYWxlOiBcIit0bS5zY2FsZVgrXCIsIFwiK3RtLnNjYWxlWStcIiwgXCIrdG0uc2NhbGVaK1wiLCBwb3NpdGlvbjogXCIrdG0ueCtcIiwgXCIrdG0ueStcIiwgXCIrdG0ueitcIiwgcGVyc3BlY3RpdmU6IFwiK3RtLnBlcnNwZWN0aXZlKyBcIiwgb3JpZ2luOiBcIisgdG0ueE9yaWdpbisgXCIsXCIrIHRtLnlPcmlnaW4pO1xuXHRcdFx0XHRpZiAocmVjKSB7XG5cdFx0XHRcdFx0dC5fZ3NUcmFuc2Zvcm0gPSB0bTsgLy9yZWNvcmQgdG8gdGhlIG9iamVjdCdzIF9nc1RyYW5zZm9ybSB3aGljaCB3ZSB1c2Ugc28gdGhhdCB0d2VlbnMgY2FuIGNvbnRyb2wgaW5kaXZpZHVhbCBwcm9wZXJ0aWVzIGluZGVwZW5kZW50bHkgKHdlIG5lZWQgYWxsIHRoZSBwcm9wZXJ0aWVzIHRvIGFjY3VyYXRlbHkgcmVjb21wb3NlIHRoZSBtYXRyaXggaW4gdGhlIHNldFJhdGlvKCkgbWV0aG9kKVxuXHRcdFx0XHRcdGlmICh0bS5zdmcpIHsgLy9pZiB3ZSdyZSBzdXBwb3NlZCB0byBhcHBseSB0cmFuc2Zvcm1zIHRvIHRoZSBTVkcgZWxlbWVudCdzIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCBtYWtlIHN1cmUgdGhlcmUgYXJlbid0IGFueSBDU1MgdHJhbnNmb3JtcyBhcHBsaWVkIG9yIHRoZXknbGwgb3ZlcnJpZGUgdGhlIGF0dHJpYnV0ZSBvbmVzLiBBbHNvIGNsZWFyIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlIGlmIHdlJ3JlIHVzaW5nIENTUywganVzdCB0byBiZSBjbGVhbi5cblx0XHRcdFx0XHRcdGlmIChfdXNlU1ZHVHJhbnNmb3JtQXR0ciAmJiB0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSkge1xuXHRcdFx0XHRcdFx0XHRUd2VlbkxpdGUuZGVsYXllZENhbGwoMC4wMDEsIGZ1bmN0aW9uKCl7IC8vaWYgd2UgYXBwbHkgdGhpcyByaWdodCBhd2F5IChiZWZvcmUgYW55dGhpbmcgaGFzIHJlbmRlcmVkKSwgd2UgcmlzayB0aGVyZSBiZWluZyBubyB0cmFuc2Zvcm1zIGZvciBhIGJyaWVmIG1vbWVudCBhbmQgaXQgYWxzbyBpbnRlcmZlcmVzIHdpdGggYWRqdXN0aW5nIHRoZSB0cmFuc2Zvcm1PcmlnaW4gaW4gYSB0d2VlbiB3aXRoIGltbWVkaWF0ZVJlbmRlcjp0cnVlIChpdCdkIHRyeSByZWFkaW5nIHRoZSBtYXRyaXggYW5kIGl0IHdvdWxkbid0IGhhdmUgdGhlIGFwcHJvcHJpYXRlIGRhdGEgaW4gcGxhY2UgYmVjYXVzZSB3ZSBqdXN0IHJlbW92ZWQgaXQpLlxuXHRcdFx0XHRcdFx0XHRcdF9yZW1vdmVQcm9wKHQuc3R5bGUsIF90cmFuc2Zvcm1Qcm9wKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCFfdXNlU1ZHVHJhbnNmb3JtQXR0ciAmJiB0LmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSkge1xuXHRcdFx0XHRcdFx0XHRUd2VlbkxpdGUuZGVsYXllZENhbGwoMC4wMDEsIGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0XHRcdFx0dC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdG07XG5cdFx0XHR9LFxuXG5cdFx0XHQvL2ZvciBzZXR0aW5nIDJEIHRyYW5zZm9ybXMgaW4gSUU2LCBJRTcsIGFuZCBJRTggKG11c3QgdXNlIGEgXCJmaWx0ZXJcIiB0byBlbXVsYXRlIHRoZSBiZWhhdmlvciBvZiBtb2Rlcm4gZGF5IGJyb3dzZXIgdHJhbnNmb3Jtcylcblx0XHRcdF9zZXRJRVRyYW5zZm9ybVJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHR2YXIgdCA9IHRoaXMuZGF0YSwgLy9yZWZlcnMgdG8gdGhlIGVsZW1lbnQncyBfZ3NUcmFuc2Zvcm0gb2JqZWN0XG5cdFx0XHRcdFx0YW5nID0gLXQucm90YXRpb24gKiBfREVHMlJBRCxcblx0XHRcdFx0XHRza2V3ID0gYW5nICsgdC5za2V3WCAqIF9ERUcyUkFELFxuXHRcdFx0XHRcdHJuZCA9IDEwMDAwMCxcblx0XHRcdFx0XHRhID0gKChNYXRoLmNvcyhhbmcpICogdC5zY2FsZVggKiBybmQpIHwgMCkgLyBybmQsXG5cdFx0XHRcdFx0YiA9ICgoTWF0aC5zaW4oYW5nKSAqIHQuc2NhbGVYICogcm5kKSB8IDApIC8gcm5kLFxuXHRcdFx0XHRcdGMgPSAoKE1hdGguc2luKHNrZXcpICogLXQuc2NhbGVZICogcm5kKSB8IDApIC8gcm5kLFxuXHRcdFx0XHRcdGQgPSAoKE1hdGguY29zKHNrZXcpICogdC5zY2FsZVkgKiBybmQpIHwgMCkgLyBybmQsXG5cdFx0XHRcdFx0c3R5bGUgPSB0aGlzLnQuc3R5bGUsXG5cdFx0XHRcdFx0Y3MgPSB0aGlzLnQuY3VycmVudFN0eWxlLFxuXHRcdFx0XHRcdGZpbHRlcnMsIHZhbDtcblx0XHRcdFx0aWYgKCFjcykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YWwgPSBiOyAvL2p1c3QgZm9yIHN3YXBwaW5nIHRoZSB2YXJpYWJsZXMgYW4gaW52ZXJ0aW5nIHRoZW0gKHJldXNlZCBcInZhbFwiIHRvIGF2b2lkIGNyZWF0aW5nIGFub3RoZXIgdmFyaWFibGUgaW4gbWVtb3J5KS4gSUUncyBmaWx0ZXIgbWF0cml4IHVzZXMgYSBub24tc3RhbmRhcmQgbWF0cml4IGNvbmZpZ3VyYXRpb24gKGFuZ2xlIGdvZXMgdGhlIG9wcG9zaXRlIHdheSwgYW5kIGIgYW5kIGMgYXJlIHJldmVyc2VkIGFuZCBpbnZlcnRlZClcblx0XHRcdFx0YiA9IC1jO1xuXHRcdFx0XHRjID0gLXZhbDtcblx0XHRcdFx0ZmlsdGVycyA9IGNzLmZpbHRlcjtcblx0XHRcdFx0c3R5bGUuZmlsdGVyID0gXCJcIjsgLy9yZW1vdmUgZmlsdGVycyBzbyB0aGF0IHdlIGNhbiBhY2N1cmF0ZWx5IG1lYXN1cmUgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0XG5cdFx0XHRcdHZhciB3ID0gdGhpcy50Lm9mZnNldFdpZHRoLFxuXHRcdFx0XHRcdGggPSB0aGlzLnQub2Zmc2V0SGVpZ2h0LFxuXHRcdFx0XHRcdGNsaXAgPSAoY3MucG9zaXRpb24gIT09IFwiYWJzb2x1dGVcIiksXG5cdFx0XHRcdFx0bSA9IFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChNMTE9XCIgKyBhICsgXCIsIE0xMj1cIiArIGIgKyBcIiwgTTIxPVwiICsgYyArIFwiLCBNMjI9XCIgKyBkLFxuXHRcdFx0XHRcdG94ID0gdC54ICsgKHcgKiB0LnhQZXJjZW50IC8gMTAwKSxcblx0XHRcdFx0XHRveSA9IHQueSArIChoICogdC55UGVyY2VudCAvIDEwMCksXG5cdFx0XHRcdFx0ZHgsIGR5O1xuXG5cdFx0XHRcdC8vaWYgdHJhbnNmb3JtT3JpZ2luIGlzIGJlaW5nIHVzZWQsIGFkanVzdCB0aGUgb2Zmc2V0IHggYW5kIHlcblx0XHRcdFx0aWYgKHQub3ggIT0gbnVsbCkge1xuXHRcdFx0XHRcdGR4ID0gKCh0Lm94cCkgPyB3ICogdC5veCAqIDAuMDEgOiB0Lm94KSAtIHcgLyAyO1xuXHRcdFx0XHRcdGR5ID0gKCh0Lm95cCkgPyBoICogdC5veSAqIDAuMDEgOiB0Lm95KSAtIGggLyAyO1xuXHRcdFx0XHRcdG94ICs9IGR4IC0gKGR4ICogYSArIGR5ICogYik7XG5cdFx0XHRcdFx0b3kgKz0gZHkgLSAoZHggKiBjICsgZHkgKiBkKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICghY2xpcCkge1xuXHRcdFx0XHRcdG0gKz0gXCIsIHNpemluZ01ldGhvZD0nYXV0byBleHBhbmQnKVwiO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGR4ID0gKHcgLyAyKTtcblx0XHRcdFx0XHRkeSA9IChoIC8gMik7XG5cdFx0XHRcdFx0Ly90cmFuc2xhdGUgdG8gZW5zdXJlIHRoYXQgdHJhbnNmb3JtYXRpb25zIG9jY3VyIGFyb3VuZCB0aGUgY29ycmVjdCBvcmlnaW4gKGRlZmF1bHQgaXMgY2VudGVyKS5cblx0XHRcdFx0XHRtICs9IFwiLCBEeD1cIiArIChkeCAtIChkeCAqIGEgKyBkeSAqIGIpICsgb3gpICsgXCIsIER5PVwiICsgKGR5IC0gKGR4ICogYyArIGR5ICogZCkgKyBveSkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZmlsdGVycy5pbmRleE9mKFwiRFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuTWF0cml4KFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRzdHlsZS5maWx0ZXIgPSBmaWx0ZXJzLnJlcGxhY2UoX2llU2V0TWF0cml4RXhwLCBtKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZS5maWx0ZXIgPSBtICsgXCIgXCIgKyBmaWx0ZXJzOyAvL3dlIG11c3QgYWx3YXlzIHB1dCB0aGUgdHJhbnNmb3JtL21hdHJpeCBGSVJTVCAoYmVmb3JlIGFscGhhKG9wYWNpdHk9eHgpKSB0byBhdm9pZCBhbiBJRSBidWcgdGhhdCBzbGljZXMgcGFydCBvZiB0aGUgb2JqZWN0IHdoZW4gcm90YXRpb24gaXMgYXBwbGllZCB3aXRoIGFscGhhLlxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9hdCB0aGUgZW5kIG9yIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4sIGlmIHRoZSBtYXRyaXggaXMgbm9ybWFsICgxLCAwLCAwLCAxKSBhbmQgb3BhY2l0eSBpcyAxMDAgKG9yIGRvZXNuJ3QgZXhpc3QpLCByZW1vdmUgdGhlIGZpbHRlciB0byBpbXByb3ZlIGJyb3dzZXIgcGVyZm9ybWFuY2UuXG5cdFx0XHRcdGlmICh2ID09PSAwIHx8IHYgPT09IDEpIGlmIChhID09PSAxKSBpZiAoYiA9PT0gMCkgaWYgKGMgPT09IDApIGlmIChkID09PSAxKSBpZiAoIWNsaXAgfHwgbS5pbmRleE9mKFwiRHg9MCwgRHk9MFwiKSAhPT0gLTEpIGlmICghX29wYWNpdHlFeHAudGVzdChmaWx0ZXJzKSB8fCBwYXJzZUZsb2F0KFJlZ0V4cC4kMSkgPT09IDEwMCkgaWYgKGZpbHRlcnMuaW5kZXhPZihcImdyYWRpZW50KFwiICYmIGZpbHRlcnMuaW5kZXhPZihcIkFscGhhXCIpKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoXCJmaWx0ZXJcIik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL3dlIG11c3Qgc2V0IHRoZSBtYXJnaW5zIEFGVEVSIGFwcGx5aW5nIHRoZSBmaWx0ZXIgaW4gb3JkZXIgdG8gYXZvaWQgc29tZSBidWdzIGluIElFOCB0aGF0IGNvdWxkIChpbiByYXJlIHNjZW5hcmlvcykgY2F1c2UgdGhlbSB0byBiZSBpZ25vcmVkIGludGVybWl0dGVudGx5ICh2aWJyYXRpb24pLlxuXHRcdFx0XHRpZiAoIWNsaXApIHtcblx0XHRcdFx0XHR2YXIgbXVsdCA9IChfaWVWZXJzIDwgOCkgPyAxIDogLTEsIC8vaW4gSW50ZXJuZXQgRXhwbG9yZXIgNyBhbmQgYmVmb3JlLCB0aGUgYm94IG1vZGVsIGlzIGJyb2tlbiwgY2F1c2luZyB0aGUgYnJvd3NlciB0byB0cmVhdCB0aGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBhY3R1YWwgcm90YXRlZCBmaWx0ZXJlZCBpbWFnZSBhcyB0aGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBib3ggaXRzZWxmLCBidXQgTWljcm9zb2Z0IGNvcnJlY3RlZCB0aGF0IGluIElFOC4gV2UgbXVzdCB1c2UgYSBuZWdhdGl2ZSBvZmZzZXQgaW4gSUU4IG9uIHRoZSByaWdodC9ib3R0b21cblx0XHRcdFx0XHRcdG1hcmcsIHByb3AsIGRpZjtcblx0XHRcdFx0XHRkeCA9IHQuaWVPZmZzZXRYIHx8IDA7XG5cdFx0XHRcdFx0ZHkgPSB0LmllT2Zmc2V0WSB8fCAwO1xuXHRcdFx0XHRcdHQuaWVPZmZzZXRYID0gTWF0aC5yb3VuZCgodyAtICgoYSA8IDAgPyAtYSA6IGEpICogdyArIChiIDwgMCA/IC1iIDogYikgKiBoKSkgLyAyICsgb3gpO1xuXHRcdFx0XHRcdHQuaWVPZmZzZXRZID0gTWF0aC5yb3VuZCgoaCAtICgoZCA8IDAgPyAtZCA6IGQpICogaCArIChjIDwgMCA/IC1jIDogYykgKiB3KSkgLyAyICsgb3kpO1xuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCA0OyBpKyspIHtcblx0XHRcdFx0XHRcdHByb3AgPSBfbWFyZ2luc1tpXTtcblx0XHRcdFx0XHRcdG1hcmcgPSBjc1twcm9wXTtcblx0XHRcdFx0XHRcdC8vd2UgbmVlZCB0byBnZXQgdGhlIGN1cnJlbnQgbWFyZ2luIGluIGNhc2UgaXQgaXMgYmVpbmcgdHdlZW5lZCBzZXBhcmF0ZWx5ICh3ZSB3YW50IHRvIHJlc3BlY3QgdGhhdCB0d2VlbidzIGNoYW5nZXMpXG5cdFx0XHRcdFx0XHR2YWwgPSAobWFyZy5pbmRleE9mKFwicHhcIikgIT09IC0xKSA/IHBhcnNlRmxvYXQobWFyZykgOiBfY29udmVydFRvUGl4ZWxzKHRoaXMudCwgcHJvcCwgcGFyc2VGbG9hdChtYXJnKSwgbWFyZy5yZXBsYWNlKF9zdWZmaXhFeHAsIFwiXCIpKSB8fCAwO1xuXHRcdFx0XHRcdFx0aWYgKHZhbCAhPT0gdFtwcm9wXSkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSAoaSA8IDIpID8gLXQuaWVPZmZzZXRYIDogLXQuaWVPZmZzZXRZOyAvL2lmIGFub3RoZXIgdHdlZW4gaXMgY29udHJvbGxpbmcgYSBtYXJnaW4sIHdlIGNhbm5vdCBvbmx5IGFwcGx5IHRoZSBkaWZmZXJlbmNlIGluIHRoZSBpZU9mZnNldHMsIHNvIHdlIGVzc2VudGlhbGx5IHplcm8tb3V0IHRoZSBkeCBhbmQgZHkgaGVyZSBpbiB0aGF0IGNhc2UuIFdlIHJlY29yZCB0aGUgbWFyZ2luKHMpIGxhdGVyIHNvIHRoYXQgd2UgY2FuIGtlZXAgY29tcGFyaW5nIHRoZW0sIG1ha2luZyB0aGlzIGNvZGUgdmVyeSBmbGV4aWJsZS5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGRpZiA9IChpIDwgMikgPyBkeCAtIHQuaWVPZmZzZXRYIDogZHkgLSB0LmllT2Zmc2V0WTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHN0eWxlW3Byb3BdID0gKHRbcHJvcF0gPSBNYXRoLnJvdW5kKCB2YWwgLSBkaWYgKiAoKGkgPT09IDAgfHwgaSA9PT0gMikgPyAxIDogbXVsdCkgKSkgKyBcInB4XCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvKiB0cmFuc2xhdGVzIGEgc3VwZXIgc21hbGwgZGVjaW1hbCB0byBhIHN0cmluZyBXSVRIT1VUIHNjaWVudGlmaWMgbm90YXRpb25cblx0XHRcdF9zYWZlRGVjaW1hbCA9IGZ1bmN0aW9uKG4pIHtcblx0XHRcdFx0dmFyIHMgPSAobiA8IDAgPyAtbiA6IG4pICsgXCJcIixcblx0XHRcdFx0XHRhID0gcy5zcGxpdChcImUtXCIpO1xuXHRcdFx0XHRyZXR1cm4gKG4gPCAwID8gXCItMC5cIiA6IFwiMC5cIikgKyBuZXcgQXJyYXkocGFyc2VJbnQoYVsxXSwgMTApIHx8IDApLmpvaW4oXCIwXCIpICsgYVswXS5zcGxpdChcIi5cIikuam9pbihcIlwiKTtcblx0XHRcdH0sXG5cdFx0XHQqL1xuXG5cdFx0XHRfc2V0VHJhbnNmb3JtUmF0aW8gPSBfaW50ZXJuYWxzLnNldDNEVHJhbnNmb3JtUmF0aW8gPSBfaW50ZXJuYWxzLnNldFRyYW5zZm9ybVJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHR2YXIgdCA9IHRoaXMuZGF0YSwgLy9yZWZlcnMgdG8gdGhlIGVsZW1lbnQncyBfZ3NUcmFuc2Zvcm0gb2JqZWN0XG5cdFx0XHRcdFx0c3R5bGUgPSB0aGlzLnQuc3R5bGUsXG5cdFx0XHRcdFx0YW5nbGUgPSB0LnJvdGF0aW9uLFxuXHRcdFx0XHRcdHJvdGF0aW9uWCA9IHQucm90YXRpb25YLFxuXHRcdFx0XHRcdHJvdGF0aW9uWSA9IHQucm90YXRpb25ZLFxuXHRcdFx0XHRcdHN4ID0gdC5zY2FsZVgsXG5cdFx0XHRcdFx0c3kgPSB0LnNjYWxlWSxcblx0XHRcdFx0XHRzeiA9IHQuc2NhbGVaLFxuXHRcdFx0XHRcdHggPSB0LngsXG5cdFx0XHRcdFx0eSA9IHQueSxcblx0XHRcdFx0XHR6ID0gdC56LFxuXHRcdFx0XHRcdGlzU1ZHID0gdC5zdmcsXG5cdFx0XHRcdFx0cGVyc3BlY3RpdmUgPSB0LnBlcnNwZWN0aXZlLFxuXHRcdFx0XHRcdGZvcmNlM0QgPSB0LmZvcmNlM0QsXG5cdFx0XHRcdFx0YTExLCBhMTIsIGExMywgYTIxLCBhMjIsIGEyMywgYTMxLCBhMzIsIGEzMywgYTQxLCBhNDIsIGE0Myxcblx0XHRcdFx0XHR6T3JpZ2luLCBtaW4sIGNvcywgc2luLCB0MSwgdDIsIHRyYW5zZm9ybSwgY29tbWEsIHplcm8sIHNrZXcsIHJuZDtcblx0XHRcdFx0Ly9jaGVjayB0byBzZWUgaWYgd2Ugc2hvdWxkIHJlbmRlciBhcyAyRCAoYW5kIFNWR3MgbXVzdCB1c2UgMkQgd2hlbiBfdXNlU1ZHVHJhbnNmb3JtQXR0ciBpcyB0cnVlKVxuXHRcdFx0XHRpZiAoKCgoKHYgPT09IDEgfHwgdiA9PT0gMCkgJiYgZm9yY2UzRCA9PT0gXCJhdXRvXCIgJiYgKHRoaXMudHdlZW4uX3RvdGFsVGltZSA9PT0gdGhpcy50d2Vlbi5fdG90YWxEdXJhdGlvbiB8fCAhdGhpcy50d2Vlbi5fdG90YWxUaW1lKSkgfHwgIWZvcmNlM0QpICYmICF6ICYmICFwZXJzcGVjdGl2ZSAmJiAhcm90YXRpb25ZICYmICFyb3RhdGlvblggJiYgc3ogPT09IDEpIHx8IChfdXNlU1ZHVHJhbnNmb3JtQXR0ciAmJiBpc1NWRykgfHwgIV9zdXBwb3J0czNEKSB7IC8vb24gdGhlIGZpbmFsIHJlbmRlciAod2hpY2ggY291bGQgYmUgMCBmb3IgYSBmcm9tIHR3ZWVuKSwgaWYgdGhlcmUgYXJlIG5vIDNEIGFzcGVjdHMsIHJlbmRlciBpbiAyRCB0byBmcmVlIHVwIG1lbW9yeSBhbmQgaW1wcm92ZSBwZXJmb3JtYW5jZSBlc3BlY2lhbGx5IG9uIG1vYmlsZSBkZXZpY2VzLiBDaGVjayB0aGUgdHdlZW4ncyB0b3RhbFRpbWUvdG90YWxEdXJhdGlvbiB0b28gaW4gb3JkZXIgdG8gbWFrZSBzdXJlIGl0IGRvZXNuJ3QgaGFwcGVuIGJldHdlZW4gcmVwZWF0cyBpZiBpdCdzIGEgcmVwZWF0aW5nIHR3ZWVuLlxuXG5cdFx0XHRcdFx0Ly8yRFxuXHRcdFx0XHRcdGlmIChhbmdsZSB8fCB0LnNrZXdYIHx8IGlzU1ZHKSB7XG5cdFx0XHRcdFx0XHRhbmdsZSAqPSBfREVHMlJBRDtcblx0XHRcdFx0XHRcdHNrZXcgPSB0LnNrZXdYICogX0RFRzJSQUQ7XG5cdFx0XHRcdFx0XHRybmQgPSAxMDAwMDA7XG5cdFx0XHRcdFx0XHRhMTEgPSBNYXRoLmNvcyhhbmdsZSkgKiBzeDtcblx0XHRcdFx0XHRcdGEyMSA9IE1hdGguc2luKGFuZ2xlKSAqIHN4O1xuXHRcdFx0XHRcdFx0YTEyID0gTWF0aC5zaW4oYW5nbGUgLSBza2V3KSAqIC1zeTtcblx0XHRcdFx0XHRcdGEyMiA9IE1hdGguY29zKGFuZ2xlIC0gc2tldykgKiBzeTtcblx0XHRcdFx0XHRcdGlmIChza2V3ICYmIHQuc2tld1R5cGUgPT09IFwic2ltcGxlXCIpIHsgLy9ieSBkZWZhdWx0LCB3ZSBjb21wZW5zYXRlIHNrZXdpbmcgb24gdGhlIG90aGVyIGF4aXMgdG8gbWFrZSBpdCBsb29rIG1vcmUgbmF0dXJhbCwgYnV0IHlvdSBjYW4gc2V0IHRoZSBza2V3VHlwZSB0byBcInNpbXBsZVwiIHRvIHVzZSB0aGUgdW5jb21wZW5zYXRlZCBza2V3aW5nIHRoYXQgQ1NTIGRvZXNcblx0XHRcdFx0XHRcdFx0dDEgPSBNYXRoLnRhbihza2V3IC0gdC5za2V3WSAqIF9ERUcyUkFEKTtcblx0XHRcdFx0XHRcdFx0dDEgPSBNYXRoLnNxcnQoMSArIHQxICogdDEpO1xuXHRcdFx0XHRcdFx0XHRhMTIgKj0gdDE7XG5cdFx0XHRcdFx0XHRcdGEyMiAqPSB0MTtcblx0XHRcdFx0XHRcdFx0aWYgKHQuc2tld1kpIHtcblx0XHRcdFx0XHRcdFx0XHR0MSA9IE1hdGgudGFuKHQuc2tld1kgKiBfREVHMlJBRCk7XG5cdFx0XHRcdFx0XHRcdFx0dDEgPSBNYXRoLnNxcnQoMSArIHQxICogdDEpO1xuXHRcdFx0XHRcdFx0XHRcdGExMSAqPSB0MTtcblx0XHRcdFx0XHRcdFx0XHRhMjEgKj0gdDE7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChpc1NWRykge1xuXHRcdFx0XHRcdFx0XHR4ICs9IHQueE9yaWdpbiAtICh0LnhPcmlnaW4gKiBhMTEgKyB0LnlPcmlnaW4gKiBhMTIpICsgdC54T2Zmc2V0O1xuXHRcdFx0XHRcdFx0XHR5ICs9IHQueU9yaWdpbiAtICh0LnhPcmlnaW4gKiBhMjEgKyB0LnlPcmlnaW4gKiBhMjIpICsgdC55T2Zmc2V0O1xuXHRcdFx0XHRcdFx0XHRpZiAoX3VzZVNWR1RyYW5zZm9ybUF0dHIgJiYgKHQueFBlcmNlbnQgfHwgdC55UGVyY2VudCkpIHsgLy9UaGUgU1ZHIHNwZWMgZG9lc24ndCBzdXBwb3J0IHBlcmNlbnRhZ2UtYmFzZWQgdHJhbnNsYXRpb24gaW4gdGhlIFwidHJhbnNmb3JtXCIgYXR0cmlidXRlLCBzbyB3ZSBtZXJnZSBpdCBpbnRvIHRoZSBtYXRyaXggdG8gc2ltdWxhdGUgaXQuXG5cdFx0XHRcdFx0XHRcdFx0bWluID0gdGhpcy50LmdldEJCb3goKTtcblx0XHRcdFx0XHRcdFx0XHR4ICs9IHQueFBlcmNlbnQgKiAwLjAxICogbWluLndpZHRoO1xuXHRcdFx0XHRcdFx0XHRcdHkgKz0gdC55UGVyY2VudCAqIDAuMDEgKiBtaW4uaGVpZ2h0O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdG1pbiA9IDAuMDAwMDAxO1xuXHRcdFx0XHRcdFx0XHRpZiAoeCA8IG1pbikgaWYgKHggPiAtbWluKSB7XG5cdFx0XHRcdFx0XHRcdFx0eCA9IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHkgPCBtaW4pIGlmICh5ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0XHRcdHkgPSAwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0cmFuc2Zvcm0gPSAoKChhMTEgKiBybmQpIHwgMCkgLyBybmQpICsgXCIsXCIgKyAoKChhMjEgKiBybmQpIHwgMCkgLyBybmQpICsgXCIsXCIgKyAoKChhMTIgKiBybmQpIHwgMCkgLyBybmQpICsgXCIsXCIgKyAoKChhMjIgKiBybmQpIHwgMCkgLyBybmQpICsgXCIsXCIgKyB4ICsgXCIsXCIgKyB5ICsgXCIpXCI7XG5cdFx0XHRcdFx0XHRpZiAoaXNTVkcgJiYgX3VzZVNWR1RyYW5zZm9ybUF0dHIpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy50LnNldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiLCBcIm1hdHJpeChcIiArIHRyYW5zZm9ybSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvL3NvbWUgYnJvd3NlcnMgaGF2ZSBhIGhhcmQgdGltZSB3aXRoIHZlcnkgc21hbGwgdmFsdWVzIGxpa2UgMi40NDkyOTM1OTgyOTQ3MDY0ZS0xNiAobm90aWNlIHRoZSBcImUtXCIgdG93YXJkcyB0aGUgZW5kKSBhbmQgd291bGQgcmVuZGVyIHRoZSBvYmplY3Qgc2xpZ2h0bHkgb2ZmLiBTbyB3ZSByb3VuZCB0byA1IGRlY2ltYWwgcGxhY2VzLlxuXHRcdFx0XHRcdFx0XHRzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoKHQueFBlcmNlbnQgfHwgdC55UGVyY2VudCkgPyBcInRyYW5zbGF0ZShcIiArIHQueFBlcmNlbnQgKyBcIiUsXCIgKyB0LnlQZXJjZW50ICsgXCIlKSBtYXRyaXgoXCIgOiBcIm1hdHJpeChcIikgKyB0cmFuc2Zvcm07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9ICgodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSA/IFwidHJhbnNsYXRlKFwiICsgdC54UGVyY2VudCArIFwiJSxcIiArIHQueVBlcmNlbnQgKyBcIiUpIG1hdHJpeChcIiA6IFwibWF0cml4KFwiKSArIHN4ICsgXCIsMCwwLFwiICsgc3kgKyBcIixcIiArIHggKyBcIixcIiArIHkgKyBcIilcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKF9pc0ZpcmVmb3gpIHsgLy9GaXJlZm94IGhhcyBhIGJ1ZyAoYXQgbGVhc3QgaW4gdjI1KSB0aGF0IGNhdXNlcyBpdCB0byByZW5kZXIgdGhlIHRyYW5zcGFyZW50IHBhcnQgb2YgMzItYml0IFBORyBpbWFnZXMgYXMgYmxhY2sgd2hlbiBkaXNwbGF5ZWQgaW5zaWRlIGFuIGlmcmFtZSBhbmQgdGhlIDNEIHNjYWxlIGlzIHZlcnkgc21hbGwgYW5kIGRvZXNuJ3QgY2hhbmdlIHN1ZmZpY2llbnRseSBlbm91Z2ggYmV0d2VlbiByZW5kZXJzIChsaWtlIGlmIHlvdSB1c2UgYSBQb3dlcjQuZWFzZUluT3V0IHRvIHNjYWxlIGZyb20gMCB0byAxIHdoZXJlIHRoZSBiZWdpbm5pbmcgdmFsdWVzIG9ubHkgY2hhbmdlIGEgdGlueSBhbW91bnQgdG8gYmVnaW4gdGhlIHR3ZWVuIGJlZm9yZSBhY2NlbGVyYXRpbmcpLiBJbiB0aGlzIGNhc2UsIHdlIGZvcmNlIHRoZSBzY2FsZSB0byBiZSAwLjAwMDAyIGluc3RlYWQgd2hpY2ggaXMgdmlzdWFsbHkgdGhlIHNhbWUgYnV0IHdvcmtzIGFyb3VuZCB0aGUgRmlyZWZveCBpc3N1ZS5cblx0XHRcdFx0XHRtaW4gPSAwLjAwMDE7XG5cdFx0XHRcdFx0aWYgKHN4IDwgbWluICYmIHN4ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0c3ggPSBzeiA9IDAuMDAwMDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzeSA8IG1pbiAmJiBzeSA+IC1taW4pIHtcblx0XHRcdFx0XHRcdHN5ID0gc3ogPSAwLjAwMDAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocGVyc3BlY3RpdmUgJiYgIXQueiAmJiAhdC5yb3RhdGlvblggJiYgIXQucm90YXRpb25ZKSB7IC8vRmlyZWZveCBoYXMgYSBidWcgdGhhdCBjYXVzZXMgZWxlbWVudHMgdG8gaGF2ZSBhbiBvZGQgc3VwZXItdGhpbiwgYnJva2VuL2RvdHRlZCBibGFjayBib3JkZXIgb24gZWxlbWVudHMgdGhhdCBoYXZlIGEgcGVyc3BlY3RpdmUgc2V0IGJ1dCBhcmVuJ3QgdXRpbGl6aW5nIDNEIHNwYWNlIChubyByb3RhdGlvblgsIHJvdGF0aW9uWSwgb3IgeikuXG5cdFx0XHRcdFx0XHRwZXJzcGVjdGl2ZSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChhbmdsZSB8fCB0LnNrZXdYKSB7XG5cdFx0XHRcdFx0YW5nbGUgKj0gX0RFRzJSQUQ7XG5cdFx0XHRcdFx0Y29zID0gYTExID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRcdHNpbiA9IGEyMSA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdFx0XHRpZiAodC5za2V3WCkge1xuXHRcdFx0XHRcdFx0YW5nbGUgLT0gdC5za2V3WCAqIF9ERUcyUkFEO1xuXHRcdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRcdFx0c2luID0gTWF0aC5zaW4oYW5nbGUpO1xuXHRcdFx0XHRcdFx0aWYgKHQuc2tld1R5cGUgPT09IFwic2ltcGxlXCIpIHsgLy9ieSBkZWZhdWx0LCB3ZSBjb21wZW5zYXRlIHNrZXdpbmcgb24gdGhlIG90aGVyIGF4aXMgdG8gbWFrZSBpdCBsb29rIG1vcmUgbmF0dXJhbCwgYnV0IHlvdSBjYW4gc2V0IHRoZSBza2V3VHlwZSB0byBcInNpbXBsZVwiIHRvIHVzZSB0aGUgdW5jb21wZW5zYXRlZCBza2V3aW5nIHRoYXQgQ1NTIGRvZXNcblx0XHRcdFx0XHRcdFx0dDEgPSBNYXRoLnRhbigodC5za2V3WCAtIHQuc2tld1kpICogX0RFRzJSQUQpO1xuXHRcdFx0XHRcdFx0XHR0MSA9IE1hdGguc3FydCgxICsgdDEgKiB0MSk7XG5cdFx0XHRcdFx0XHRcdGNvcyAqPSB0MTtcblx0XHRcdFx0XHRcdFx0c2luICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRpZiAodC5za2V3WSkge1xuXHRcdFx0XHRcdFx0XHRcdHQxID0gTWF0aC50YW4odC5za2V3WSAqIF9ERUcyUkFEKTtcblx0XHRcdFx0XHRcdFx0XHR0MSA9IE1hdGguc3FydCgxICsgdDEgKiB0MSk7XG5cdFx0XHRcdFx0XHRcdFx0YTExICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRcdGEyMSAqPSB0MTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhMTIgPSAtc2luO1xuXHRcdFx0XHRcdGEyMiA9IGNvcztcblxuXHRcdFx0XHR9IGVsc2UgaWYgKCFyb3RhdGlvblkgJiYgIXJvdGF0aW9uWCAmJiBzeiA9PT0gMSAmJiAhcGVyc3BlY3RpdmUgJiYgIWlzU1ZHKSB7IC8vaWYgd2UncmUgb25seSB0cmFuc2xhdGluZyBhbmQvb3IgMkQgc2NhbGluZywgdGhpcyBpcyBmYXN0ZXIuLi5cblx0XHRcdFx0XHRzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSAoKHQueFBlcmNlbnQgfHwgdC55UGVyY2VudCkgPyBcInRyYW5zbGF0ZShcIiArIHQueFBlcmNlbnQgKyBcIiUsXCIgKyB0LnlQZXJjZW50ICsgXCIlKSB0cmFuc2xhdGUzZChcIiA6IFwidHJhbnNsYXRlM2QoXCIpICsgeCArIFwicHgsXCIgKyB5ICsgXCJweCxcIiArIHogK1wicHgpXCIgKyAoKHN4ICE9PSAxIHx8IHN5ICE9PSAxKSA/IFwiIHNjYWxlKFwiICsgc3ggKyBcIixcIiArIHN5ICsgXCIpXCIgOiBcIlwiKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YTExID0gYTIyID0gMTtcblx0XHRcdFx0XHRhMTIgPSBhMjEgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIEtFWSAgSU5ERVggICBBRkZFQ1RTXG5cdFx0XHRcdC8vIGExMSAgMCAgICAgICByb3RhdGlvbiwgcm90YXRpb25ZLCBzY2FsZVhcblx0XHRcdFx0Ly8gYTIxICAxICAgICAgIHJvdGF0aW9uLCByb3RhdGlvblksIHNjYWxlWFxuXHRcdFx0XHQvLyBhMzEgIDIgICAgICAgcm90YXRpb25ZLCBzY2FsZVhcblx0XHRcdFx0Ly8gYTQxICAzICAgICAgIHJvdGF0aW9uWSwgc2NhbGVYXG5cdFx0XHRcdC8vIGExMiAgNCAgICAgICByb3RhdGlvbiwgc2tld1gsIHJvdGF0aW9uWCwgc2NhbGVZXG5cdFx0XHRcdC8vIGEyMiAgNSAgICAgICByb3RhdGlvbiwgc2tld1gsIHJvdGF0aW9uWCwgc2NhbGVZXG5cdFx0XHRcdC8vIGEzMiAgNiAgICAgICByb3RhdGlvblgsIHNjYWxlWVxuXHRcdFx0XHQvLyBhNDIgIDcgICAgICAgcm90YXRpb25YLCBzY2FsZVlcblx0XHRcdFx0Ly8gYTEzICA4ICAgICAgIHJvdGF0aW9uWSwgcm90YXRpb25YLCBzY2FsZVpcblx0XHRcdFx0Ly8gYTIzICA5ICAgICAgIHJvdGF0aW9uWSwgcm90YXRpb25YLCBzY2FsZVpcblx0XHRcdFx0Ly8gYTMzICAxMCAgICAgIHJvdGF0aW9uWSwgcm90YXRpb25YLCBzY2FsZVpcblx0XHRcdFx0Ly8gYTQzICAxMSAgICAgIHJvdGF0aW9uWSwgcm90YXRpb25YLCBwZXJzcGVjdGl2ZSwgc2NhbGVaXG5cdFx0XHRcdC8vIGExNCAgMTIgICAgICB4LCB6T3JpZ2luLCBzdmdPcmlnaW5cblx0XHRcdFx0Ly8gYTI0ICAxMyAgICAgIHksIHpPcmlnaW4sIHN2Z09yaWdpblxuXHRcdFx0XHQvLyBhMzQgIDE0ICAgICAgeiwgek9yaWdpblxuXHRcdFx0XHQvLyBhNDQgIDE1XG5cdFx0XHRcdC8vIHJvdGF0aW9uOiBNYXRoLmF0YW4yKGEyMSwgYTExKVxuXHRcdFx0XHQvLyByb3RhdGlvblk6IE1hdGguYXRhbjIoYTEzLCBhMzMpIChvciBNYXRoLmF0YW4yKGExMywgYTExKSlcblx0XHRcdFx0Ly8gcm90YXRpb25YOiBNYXRoLmF0YW4yKGEzMiwgYTMzKVxuXHRcdFx0XHRhMzMgPSAxO1xuXHRcdFx0XHRhMTMgPSBhMjMgPSBhMzEgPSBhMzIgPSBhNDEgPSBhNDIgPSAwO1xuXHRcdFx0XHRhNDMgPSAocGVyc3BlY3RpdmUpID8gLTEgLyBwZXJzcGVjdGl2ZSA6IDA7XG5cdFx0XHRcdHpPcmlnaW4gPSB0LnpPcmlnaW47XG5cdFx0XHRcdG1pbiA9IDAuMDAwMDAxOyAvL3RocmVzaG9sZCBiZWxvdyB3aGljaCBicm93c2VycyB1c2Ugc2NpZW50aWZpYyBub3RhdGlvbiB3aGljaCB3b24ndCB3b3JrLlxuXHRcdFx0XHRjb21tYSA9IFwiLFwiO1xuXHRcdFx0XHR6ZXJvID0gXCIwXCI7XG5cdFx0XHRcdGFuZ2xlID0gcm90YXRpb25ZICogX0RFRzJSQUQ7XG5cdFx0XHRcdGlmIChhbmdsZSkge1xuXHRcdFx0XHRcdGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdFx0YTMxID0gLXNpbjtcblx0XHRcdFx0XHRhNDEgPSBhNDMqLXNpbjtcblx0XHRcdFx0XHRhMTMgPSBhMTEqc2luO1xuXHRcdFx0XHRcdGEyMyA9IGEyMSpzaW47XG5cdFx0XHRcdFx0YTMzID0gY29zO1xuXHRcdFx0XHRcdGE0MyAqPSBjb3M7XG5cdFx0XHRcdFx0YTExICo9IGNvcztcblx0XHRcdFx0XHRhMjEgKj0gY29zO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGFuZ2xlID0gcm90YXRpb25YICogX0RFRzJSQUQ7XG5cdFx0XHRcdGlmIChhbmdsZSkge1xuXHRcdFx0XHRcdGNvcyA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdFx0dDEgPSBhMTIqY29zK2ExMypzaW47XG5cdFx0XHRcdFx0dDIgPSBhMjIqY29zK2EyMypzaW47XG5cdFx0XHRcdFx0YTMyID0gYTMzKnNpbjtcblx0XHRcdFx0XHRhNDIgPSBhNDMqc2luO1xuXHRcdFx0XHRcdGExMyA9IGExMiotc2luK2ExMypjb3M7XG5cdFx0XHRcdFx0YTIzID0gYTIyKi1zaW4rYTIzKmNvcztcblx0XHRcdFx0XHRhMzMgPSBhMzMqY29zO1xuXHRcdFx0XHRcdGE0MyA9IGE0Mypjb3M7XG5cdFx0XHRcdFx0YTEyID0gdDE7XG5cdFx0XHRcdFx0YTIyID0gdDI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHN6ICE9PSAxKSB7XG5cdFx0XHRcdFx0YTEzKj1zejtcblx0XHRcdFx0XHRhMjMqPXN6O1xuXHRcdFx0XHRcdGEzMyo9c3o7XG5cdFx0XHRcdFx0YTQzKj1zejtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc3kgIT09IDEpIHtcblx0XHRcdFx0XHRhMTIqPXN5O1xuXHRcdFx0XHRcdGEyMio9c3k7XG5cdFx0XHRcdFx0YTMyKj1zeTtcblx0XHRcdFx0XHRhNDIqPXN5O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzeCAhPT0gMSkge1xuXHRcdFx0XHRcdGExMSo9c3g7XG5cdFx0XHRcdFx0YTIxKj1zeDtcblx0XHRcdFx0XHRhMzEqPXN4O1xuXHRcdFx0XHRcdGE0MSo9c3g7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoek9yaWdpbiB8fCBpc1NWRykge1xuXHRcdFx0XHRcdGlmICh6T3JpZ2luKSB7XG5cdFx0XHRcdFx0XHR4ICs9IGExMyotek9yaWdpbjtcblx0XHRcdFx0XHRcdHkgKz0gYTIzKi16T3JpZ2luO1xuXHRcdFx0XHRcdFx0eiArPSBhMzMqLXpPcmlnaW4rek9yaWdpbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGlzU1ZHKSB7IC8vZHVlIHRvIGJ1Z3MgaW4gc29tZSBicm93c2Vycywgd2UgbmVlZCB0byBtYW5hZ2UgdGhlIHRyYW5zZm9ybS1vcmlnaW4gb2YgU1ZHIG1hbnVhbGx5XG5cdFx0XHRcdFx0XHR4ICs9IHQueE9yaWdpbiAtICh0LnhPcmlnaW4gKiBhMTEgKyB0LnlPcmlnaW4gKiBhMTIpICsgdC54T2Zmc2V0O1xuXHRcdFx0XHRcdFx0eSArPSB0LnlPcmlnaW4gLSAodC54T3JpZ2luICogYTIxICsgdC55T3JpZ2luICogYTIyKSArIHQueU9mZnNldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHggPCBtaW4gJiYgeCA+IC1taW4pIHtcblx0XHRcdFx0XHRcdHggPSB6ZXJvO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoeSA8IG1pbiAmJiB5ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0eSA9IHplcm87XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh6IDwgbWluICYmIHogPiAtbWluKSB7XG5cdFx0XHRcdFx0XHR6ID0gMDsgLy9kb24ndCB1c2Ugc3RyaW5nIGJlY2F1c2Ugd2UgY2FsY3VsYXRlIHBlcnNwZWN0aXZlIGxhdGVyIGFuZCBuZWVkIHRoZSBudW1iZXIuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9vcHRpbWl6ZWQgd2F5IG9mIGNvbmNhdGVuYXRpbmcgYWxsIHRoZSB2YWx1ZXMgaW50byBhIHN0cmluZy4gSWYgd2UgZG8gaXQgYWxsIGluIG9uZSBzaG90LCBpdCdzIHNsb3dlciBiZWNhdXNlIG9mIHRoZSB3YXkgYnJvd3NlcnMgaGF2ZSB0byBjcmVhdGUgdGVtcCBzdHJpbmdzIGFuZCB0aGUgd2F5IGl0IGFmZmVjdHMgbWVtb3J5LiBJZiB3ZSBkbyBpdCBwaWVjZS1ieS1waWVjZSB3aXRoICs9LCBpdCdzIGEgYml0IHNsb3dlciB0b28uIFdlIGZvdW5kIHRoYXQgZG9pbmcgaXQgaW4gdGhlc2Ugc2l6ZWQgY2h1bmtzIHdvcmtzIGJlc3Qgb3ZlcmFsbDpcblx0XHRcdFx0dHJhbnNmb3JtID0gKCh0LnhQZXJjZW50IHx8IHQueVBlcmNlbnQpID8gXCJ0cmFuc2xhdGUoXCIgKyB0LnhQZXJjZW50ICsgXCIlLFwiICsgdC55UGVyY2VudCArIFwiJSkgbWF0cml4M2QoXCIgOiBcIm1hdHJpeDNkKFwiKTtcblx0XHRcdFx0dHJhbnNmb3JtICs9ICgoYTExIDwgbWluICYmIGExMSA+IC1taW4pID8gemVybyA6IGExMSkgKyBjb21tYSArICgoYTIxIDwgbWluICYmIGEyMSA+IC1taW4pID8gemVybyA6IGEyMSkgKyBjb21tYSArICgoYTMxIDwgbWluICYmIGEzMSA+IC1taW4pID8gemVybyA6IGEzMSk7XG5cdFx0XHRcdHRyYW5zZm9ybSArPSBjb21tYSArICgoYTQxIDwgbWluICYmIGE0MSA+IC1taW4pID8gemVybyA6IGE0MSkgKyBjb21tYSArICgoYTEyIDwgbWluICYmIGExMiA+IC1taW4pID8gemVybyA6IGExMikgKyBjb21tYSArICgoYTIyIDwgbWluICYmIGEyMiA+IC1taW4pID8gemVybyA6IGEyMik7XG5cdFx0XHRcdGlmIChyb3RhdGlvblggfHwgcm90YXRpb25ZIHx8IHN6ICE9PSAxKSB7IC8vcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIChvZnRlbiB0aGVyZSdzIG5vIHJvdGF0aW9uWCBvciByb3RhdGlvblksIHNvIHdlIGNhbiBza2lwIHRoZXNlIGNhbGN1bGF0aW9ucylcblx0XHRcdFx0XHR0cmFuc2Zvcm0gKz0gY29tbWEgKyAoKGEzMiA8IG1pbiAmJiBhMzIgPiAtbWluKSA/IHplcm8gOiBhMzIpICsgY29tbWEgKyAoKGE0MiA8IG1pbiAmJiBhNDIgPiAtbWluKSA/IHplcm8gOiBhNDIpICsgY29tbWEgKyAoKGExMyA8IG1pbiAmJiBhMTMgPiAtbWluKSA/IHplcm8gOiBhMTMpO1xuXHRcdFx0XHRcdHRyYW5zZm9ybSArPSBjb21tYSArICgoYTIzIDwgbWluICYmIGEyMyA+IC1taW4pID8gemVybyA6IGEyMykgKyBjb21tYSArICgoYTMzIDwgbWluICYmIGEzMyA+IC1taW4pID8gemVybyA6IGEzMykgKyBjb21tYSArICgoYTQzIDwgbWluICYmIGE0MyA+IC1taW4pID8gemVybyA6IGE0MykgKyBjb21tYTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0cmFuc2Zvcm0gKz0gXCIsMCwwLDAsMCwxLDAsXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHJhbnNmb3JtICs9IHggKyBjb21tYSArIHkgKyBjb21tYSArIHogKyBjb21tYSArIChwZXJzcGVjdGl2ZSA/ICgxICsgKC16IC8gcGVyc3BlY3RpdmUpKSA6IDEpICsgXCIpXCI7XG5cblx0XHRcdFx0c3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXHRcdFx0fTtcblxuXHRcdHAgPSBUcmFuc2Zvcm0ucHJvdG90eXBlO1xuXHRcdHAueCA9IHAueSA9IHAueiA9IHAuc2tld1ggPSBwLnNrZXdZID0gcC5yb3RhdGlvbiA9IHAucm90YXRpb25YID0gcC5yb3RhdGlvblkgPSBwLnpPcmlnaW4gPSBwLnhQZXJjZW50ID0gcC55UGVyY2VudCA9IHAueE9mZnNldCA9IHAueU9mZnNldCA9IDA7XG5cdFx0cC5zY2FsZVggPSBwLnNjYWxlWSA9IHAuc2NhbGVaID0gMTtcblxuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInRyYW5zZm9ybSxzY2FsZSxzY2FsZVgsc2NhbGVZLHNjYWxlWix4LHkseixyb3RhdGlvbixyb3RhdGlvblgscm90YXRpb25ZLHJvdGF0aW9uWixza2V3WCxza2V3WSxzaG9ydFJvdGF0aW9uLHNob3J0Um90YXRpb25YLHNob3J0Um90YXRpb25ZLHNob3J0Um90YXRpb25aLHRyYW5zZm9ybU9yaWdpbixzdmdPcmlnaW4sdHJhbnNmb3JtUGVyc3BlY3RpdmUsZGlyZWN0aW9uYWxSb3RhdGlvbixwYXJzZVRyYW5zZm9ybSxmb3JjZTNELHNrZXdUeXBlLHhQZXJjZW50LHlQZXJjZW50LHNtb290aE9yaWdpblwiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHBhcnNpbmdQcm9wLCBjc3NwLCBwdCwgcGx1Z2luLCB2YXJzKSB7XG5cdFx0XHRpZiAoY3NzcC5fbGFzdFBhcnNlZFRyYW5zZm9ybSA9PT0gdmFycykgeyByZXR1cm4gcHQ7IH0gLy9vbmx5IG5lZWQgdG8gcGFyc2UgdGhlIHRyYW5zZm9ybSBvbmNlLCBhbmQgb25seSBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBpdC5cblx0XHRcdGNzc3AuX2xhc3RQYXJzZWRUcmFuc2Zvcm0gPSB2YXJzO1xuXHRcdFx0dmFyIHN3YXBGdW5jO1xuXHRcdFx0aWYgKHR5cGVvZih2YXJzW3BhcnNpbmdQcm9wXSkgPT09IFwiZnVuY3Rpb25cIikgeyAvL3doYXRldmVyIHByb3BlcnR5IHRyaWdnZXJzIHRoZSBpbml0aWFsIHBhcnNpbmcgbWlnaHQgYmUgYSBmdW5jdGlvbi1iYXNlZCB2YWx1ZSBpbiB3aGljaCBjYXNlIGl0IGFscmVhZHkgZ290IGNhbGxlZCBpbiBwYXJzZSgpLCB0aHVzIHdlIGRvbid0IHdhbnQgdG8gY2FsbCBpdCBhZ2FpbiBpbiBoZXJlLiBUaGUgbW9zdCBlZmZpY2llbnQgd2F5IHRvIGF2b2lkIHRoaXMgaXMgdG8gdGVtcG9yYXJpbHkgc3dhcCB0aGUgdmFsdWUgZGlyZWN0bHkgaW50byB0aGUgdmFycyBvYmplY3QsIGFuZCB0aGVuIGFmdGVyIHdlIGRvIGFsbCBvdXIgcGFyc2luZyBpbiB0aGlzIGZ1bmN0aW9uLCB3ZSdsbCBzd2FwIGl0IGJhY2sgYWdhaW4uXG5cdFx0XHRcdHN3YXBGdW5jID0gdmFyc1twYXJzaW5nUHJvcF07XG5cdFx0XHRcdHZhcnNbcGFyc2luZ1Byb3BdID0gZTtcblx0XHRcdH1cblx0XHRcdHZhciBvcmlnaW5hbEdTVHJhbnNmb3JtID0gdC5fZ3NUcmFuc2Zvcm0sXG5cdFx0XHRcdHN0eWxlID0gdC5zdHlsZSxcblx0XHRcdFx0bWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdGkgPSBfdHJhbnNmb3JtUHJvcHMubGVuZ3RoLFxuXHRcdFx0XHR2ID0gdmFycyxcblx0XHRcdFx0ZW5kUm90YXRpb25zID0ge30sXG5cdFx0XHRcdHRyYW5zZm9ybU9yaWdpblN0cmluZyA9IFwidHJhbnNmb3JtT3JpZ2luXCIsXG5cdFx0XHRcdG0xID0gX2dldFRyYW5zZm9ybSh0LCBfY3MsIHRydWUsIHYucGFyc2VUcmFuc2Zvcm0pLFxuXHRcdFx0XHRvcmlnID0gdi50cmFuc2Zvcm0gJiYgKCh0eXBlb2Yodi50cmFuc2Zvcm0pID09PSBcImZ1bmN0aW9uXCIpID8gdi50cmFuc2Zvcm0oX2luZGV4LCBfdGFyZ2V0KSA6IHYudHJhbnNmb3JtKSxcblx0XHRcdFx0bTIsIGNvcHksIGhhczNELCBoYXNDaGFuZ2UsIGRyLCB4LCB5LCBtYXRyaXgsIHA7XG5cdFx0XHRjc3NwLl90cmFuc2Zvcm0gPSBtMTtcblx0XHRcdGlmIChvcmlnICYmIHR5cGVvZihvcmlnKSA9PT0gXCJzdHJpbmdcIiAmJiBfdHJhbnNmb3JtUHJvcCkgeyAvL2ZvciB2YWx1ZXMgbGlrZSB0cmFuc2Zvcm06XCJyb3RhdGUoNjBkZWcpIHNjYWxlKDAuNSwgMC44KVwiXG5cdFx0XHRcdGNvcHkgPSBfdGVtcERpdi5zdHlsZTsgLy9kb24ndCB1c2UgdGhlIG9yaWdpbmFsIHRhcmdldCBiZWNhdXNlIGl0IG1pZ2h0IGJlIFNWRyBpbiB3aGljaCBjYXNlIHNvbWUgYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IGNvbXB1dGVkIHN0eWxlIGNvcnJlY3RseS5cblx0XHRcdFx0Y29weVtfdHJhbnNmb3JtUHJvcF0gPSBvcmlnO1xuXHRcdFx0XHRjb3B5LmRpc3BsYXkgPSBcImJsb2NrXCI7IC8vaWYgZGlzcGxheSBpcyBcIm5vbmVcIiwgdGhlIGJyb3dzZXIgb2Z0ZW4gcmVmdXNlcyB0byByZXBvcnQgdGhlIHRyYW5zZm9ybSBwcm9wZXJ0aWVzIGNvcnJlY3RseS5cblx0XHRcdFx0Y29weS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRcdFx0X2RvYy5ib2R5LmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcblx0XHRcdFx0bTIgPSBfZ2V0VHJhbnNmb3JtKF90ZW1wRGl2LCBudWxsLCBmYWxzZSk7XG5cdFx0XHRcdGlmIChtMS5zdmcpIHsgLy9pZiBpdCdzIGFuIFNWRyBlbGVtZW50LCB4L3kgcGFydCBvZiB0aGUgbWF0cml4IHdpbGwgYmUgYWZmZWN0ZWQgYnkgd2hhdGV2ZXIgd2UgdXNlIGFzIHRoZSBvcmlnaW4gYW5kIHRoZSBvZmZzZXRzLCBzbyBjb21wZW5zYXRlIGhlcmUuLi5cblx0XHRcdFx0XHR4ID0gbTEueE9yaWdpbjtcblx0XHRcdFx0XHR5ID0gbTEueU9yaWdpbjtcblx0XHRcdFx0XHRtMi54IC09IG0xLnhPZmZzZXQ7XG5cdFx0XHRcdFx0bTIueSAtPSBtMS55T2Zmc2V0O1xuXHRcdFx0XHRcdGlmICh2LnRyYW5zZm9ybU9yaWdpbiB8fCB2LnN2Z09yaWdpbikgeyAvL2lmIHRoaXMgdHdlZW4gaXMgYWx0ZXJpbmcgdGhlIG9yaWdpbiwgd2UgbXVzdCBmYWN0b3IgdGhhdCBpbiBoZXJlLiBUaGUgYWN0dWFsIHdvcmsgb2YgcmVjb3JkaW5nIHRoZSB0cmFuc2Zvcm1PcmlnaW4gdmFsdWVzIGFuZCBzZXR0aW5nIHVwIHRoZSBQcm9wVHdlZW4gaXMgZG9uZSBsYXRlciAoc3RpbGwgaW5zaWRlIHRoaXMgZnVuY3Rpb24pIHNvIHdlIGNhbm5vdCBsZWF2ZSB0aGUgY2hhbmdlcyBpbnRhY3QgaGVyZSAtIHdlIG9ubHkgd2FudCB0byB1cGRhdGUgdGhlIHgveSBhY2NvcmRpbmdseS5cblx0XHRcdFx0XHRcdG9yaWcgPSB7fTtcblx0XHRcdFx0XHRcdF9wYXJzZVNWR09yaWdpbih0LCBfcGFyc2VQb3NpdGlvbih2LnRyYW5zZm9ybU9yaWdpbiksIG9yaWcsIHYuc3ZnT3JpZ2luLCB2LnNtb290aE9yaWdpbiwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR4ID0gb3JpZy54T3JpZ2luO1xuXHRcdFx0XHRcdFx0eSA9IG9yaWcueU9yaWdpbjtcblx0XHRcdFx0XHRcdG0yLnggLT0gb3JpZy54T2Zmc2V0IC0gbTEueE9mZnNldDtcblx0XHRcdFx0XHRcdG0yLnkgLT0gb3JpZy55T2Zmc2V0IC0gbTEueU9mZnNldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHggfHwgeSkge1xuXHRcdFx0XHRcdFx0bWF0cml4ID0gX2dldE1hdHJpeChfdGVtcERpdiwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRtMi54IC09IHggLSAoeCAqIG1hdHJpeFswXSArIHkgKiBtYXRyaXhbMl0pO1xuXHRcdFx0XHRcdFx0bTIueSAtPSB5IC0gKHggKiBtYXRyaXhbMV0gKyB5ICogbWF0cml4WzNdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0X2RvYy5ib2R5LnJlbW92ZUNoaWxkKF90ZW1wRGl2KTtcblx0XHRcdFx0aWYgKCFtMi5wZXJzcGVjdGl2ZSkge1xuXHRcdFx0XHRcdG0yLnBlcnNwZWN0aXZlID0gbTEucGVyc3BlY3RpdmU7IC8vdHdlZW5pbmcgdG8gbm8gcGVyc3BlY3RpdmUgZ2l2ZXMgdmVyeSB1bmludHVpdGl2ZSByZXN1bHRzIC0ganVzdCBrZWVwIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGluIHRoYXQgY2FzZS5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodi54UGVyY2VudCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0bTIueFBlcmNlbnQgPSBfcGFyc2VWYWwodi54UGVyY2VudCwgbTEueFBlcmNlbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2LnlQZXJjZW50ICE9IG51bGwpIHtcblx0XHRcdFx0XHRtMi55UGVyY2VudCA9IF9wYXJzZVZhbCh2LnlQZXJjZW50LCBtMS55UGVyY2VudCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodHlwZW9mKHYpID09PSBcIm9iamVjdFwiKSB7IC8vZm9yIHZhbHVlcyBsaWtlIHNjYWxlWCwgc2NhbGVZLCByb3RhdGlvbiwgeCwgeSwgc2tld1gsIGFuZCBza2V3WSBvciB0cmFuc2Zvcm06ey4uLn0gKG9iamVjdClcblx0XHRcdFx0bTIgPSB7c2NhbGVYOl9wYXJzZVZhbCgodi5zY2FsZVggIT0gbnVsbCkgPyB2LnNjYWxlWCA6IHYuc2NhbGUsIG0xLnNjYWxlWCksXG5cdFx0XHRcdFx0c2NhbGVZOl9wYXJzZVZhbCgodi5zY2FsZVkgIT0gbnVsbCkgPyB2LnNjYWxlWSA6IHYuc2NhbGUsIG0xLnNjYWxlWSksXG5cdFx0XHRcdFx0c2NhbGVaOl9wYXJzZVZhbCh2LnNjYWxlWiwgbTEuc2NhbGVaKSxcblx0XHRcdFx0XHR4Ol9wYXJzZVZhbCh2LngsIG0xLngpLFxuXHRcdFx0XHRcdHk6X3BhcnNlVmFsKHYueSwgbTEueSksXG5cdFx0XHRcdFx0ejpfcGFyc2VWYWwodi56LCBtMS56KSxcblx0XHRcdFx0XHR4UGVyY2VudDpfcGFyc2VWYWwodi54UGVyY2VudCwgbTEueFBlcmNlbnQpLFxuXHRcdFx0XHRcdHlQZXJjZW50Ol9wYXJzZVZhbCh2LnlQZXJjZW50LCBtMS55UGVyY2VudCksXG5cdFx0XHRcdFx0cGVyc3BlY3RpdmU6X3BhcnNlVmFsKHYudHJhbnNmb3JtUGVyc3BlY3RpdmUsIG0xLnBlcnNwZWN0aXZlKX07XG5cdFx0XHRcdGRyID0gdi5kaXJlY3Rpb25hbFJvdGF0aW9uO1xuXHRcdFx0XHRpZiAoZHIgIT0gbnVsbCkge1xuXHRcdFx0XHRcdGlmICh0eXBlb2YoZHIpID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGNvcHkgaW4gZHIpIHtcblx0XHRcdFx0XHRcdFx0dltjb3B5XSA9IGRyW2NvcHldO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2LnJvdGF0aW9uID0gZHI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlb2Yodi54KSA9PT0gXCJzdHJpbmdcIiAmJiB2LnguaW5kZXhPZihcIiVcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0bTIueCA9IDA7XG5cdFx0XHRcdFx0bTIueFBlcmNlbnQgPSBfcGFyc2VWYWwodi54LCBtMS54UGVyY2VudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHR5cGVvZih2LnkpID09PSBcInN0cmluZ1wiICYmIHYueS5pbmRleE9mKFwiJVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRtMi55ID0gMDtcblx0XHRcdFx0XHRtMi55UGVyY2VudCA9IF9wYXJzZVZhbCh2LnksIG0xLnlQZXJjZW50KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG0yLnJvdGF0aW9uID0gX3BhcnNlQW5nbGUoKFwicm90YXRpb25cIiBpbiB2KSA/IHYucm90YXRpb24gOiAoXCJzaG9ydFJvdGF0aW9uXCIgaW4gdikgPyB2LnNob3J0Um90YXRpb24gKyBcIl9zaG9ydFwiIDogKFwicm90YXRpb25aXCIgaW4gdikgPyB2LnJvdGF0aW9uWiA6IG0xLnJvdGF0aW9uIC0gbTEuc2tld1ksIG0xLnJvdGF0aW9uIC0gbTEuc2tld1ksIFwicm90YXRpb25cIiwgZW5kUm90YXRpb25zKTsgLy9zZWUgbm90ZXMgYmVsb3cgYWJvdXQgc2tld1kgZm9yIHdoeSB3ZSBzdWJ0cmFjdCBpdCBmcm9tIHJvdGF0aW9uIGhlcmVcblx0XHRcdFx0aWYgKF9zdXBwb3J0czNEKSB7XG5cdFx0XHRcdFx0bTIucm90YXRpb25YID0gX3BhcnNlQW5nbGUoKFwicm90YXRpb25YXCIgaW4gdikgPyB2LnJvdGF0aW9uWCA6IChcInNob3J0Um90YXRpb25YXCIgaW4gdikgPyB2LnNob3J0Um90YXRpb25YICsgXCJfc2hvcnRcIiA6IG0xLnJvdGF0aW9uWCB8fCAwLCBtMS5yb3RhdGlvblgsIFwicm90YXRpb25YXCIsIGVuZFJvdGF0aW9ucyk7XG5cdFx0XHRcdFx0bTIucm90YXRpb25ZID0gX3BhcnNlQW5nbGUoKFwicm90YXRpb25ZXCIgaW4gdikgPyB2LnJvdGF0aW9uWSA6IChcInNob3J0Um90YXRpb25ZXCIgaW4gdikgPyB2LnNob3J0Um90YXRpb25ZICsgXCJfc2hvcnRcIiA6IG0xLnJvdGF0aW9uWSB8fCAwLCBtMS5yb3RhdGlvblksIFwicm90YXRpb25ZXCIsIGVuZFJvdGF0aW9ucyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bTIuc2tld1ggPSBfcGFyc2VBbmdsZSh2LnNrZXdYLCBtMS5za2V3WCAtIG0xLnNrZXdZKTsgLy9zZWUgbm90ZXMgYmVsb3cgYWJvdXQgc2tld1kgYW5kIHdoeSB3ZSBzdWJ0cmFjdCBpdCBmcm9tIHNrZXdYIGhlcmVcblxuXHRcdFx0XHQvL25vdGU6IGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBjb21iaW5lIGFsbCBza2V3aW5nIGludG8gdGhlIHNrZXdYIGFuZCByb3RhdGlvbiB2YWx1ZXMsIGlnbm9yaW5nIHNrZXdZIGJ1dCB3ZSBtdXN0IHN0aWxsIHJlY29yZCBpdCBzbyB0aGF0IHdlIGNhbiBkaXNjZXJuIGhvdyBtdWNoIG9mIHRoZSBvdmVyYWxsIHNrZXcgaXMgYXR0cmlidXRlZCB0byBza2V3WCB2cy4gc2tld1kuIE90aGVyd2lzZSwgaWYgdGhlIHNrZXdZIHdvdWxkIGFsd2F5cyBhY3QgcmVsYXRpdmUgKHR3ZWVuIHNrZXdZIHRvIDEwZGVnLCBmb3IgZXhhbXBsZSwgbXVsdGlwbGUgdGltZXMgYW5kIGlmIHdlIGFsd2F5cyBjb21iaW5lIHRoaW5ncyBpbnRvIHNrZXdYLCB3ZSBjYW4ndCByZW1lbWJlciB0aGF0IHNrZXdZIHdhcyAxMCBmcm9tIGxhc3QgdGltZSkuIFJlbWVtYmVyLCBhIHNrZXdZIG9mIDEwIGRlZ3JlZXMgbG9va3MgdGhlIHNhbWUgYXMgYSByb3RhdGlvbiBvZiAxMCBkZWdyZWVzIHBsdXMgYSBza2V3WCBvZiAtMTAgZGVncmVlcy5cblx0XHRcdFx0aWYgKChtMi5za2V3WSA9IF9wYXJzZUFuZ2xlKHYuc2tld1ksIG0xLnNrZXdZKSkpIHtcblx0XHRcdFx0XHRtMi5za2V3WCArPSBtMi5za2V3WTtcblx0XHRcdFx0XHRtMi5yb3RhdGlvbiArPSBtMi5za2V3WTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKF9zdXBwb3J0czNEICYmIHYuZm9yY2UzRCAhPSBudWxsKSB7XG5cdFx0XHRcdG0xLmZvcmNlM0QgPSB2LmZvcmNlM0Q7XG5cdFx0XHRcdGhhc0NoYW5nZSA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdG0xLnNrZXdUeXBlID0gdi5za2V3VHlwZSB8fCBtMS5za2V3VHlwZSB8fCBDU1NQbHVnaW4uZGVmYXVsdFNrZXdUeXBlO1xuXG5cdFx0XHRoYXMzRCA9IChtMS5mb3JjZTNEIHx8IG0xLnogfHwgbTEucm90YXRpb25YIHx8IG0xLnJvdGF0aW9uWSB8fCBtMi56IHx8IG0yLnJvdGF0aW9uWCB8fCBtMi5yb3RhdGlvblkgfHwgbTIucGVyc3BlY3RpdmUpO1xuXHRcdFx0aWYgKCFoYXMzRCAmJiB2LnNjYWxlICE9IG51bGwpIHtcblx0XHRcdFx0bTIuc2NhbGVaID0gMTsgLy9ubyBuZWVkIHRvIHR3ZWVuIHNjYWxlWi5cblx0XHRcdH1cblxuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdHAgPSBfdHJhbnNmb3JtUHJvcHNbaV07XG5cdFx0XHRcdG9yaWcgPSBtMltwXSAtIG0xW3BdO1xuXHRcdFx0XHRpZiAob3JpZyA+IG1pbiB8fCBvcmlnIDwgLW1pbiB8fCB2W3BdICE9IG51bGwgfHwgX2ZvcmNlUFRbcF0gIT0gbnVsbCkge1xuXHRcdFx0XHRcdGhhc0NoYW5nZSA9IHRydWU7XG5cdFx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKG0xLCBwLCBtMVtwXSwgb3JpZywgcHQpO1xuXHRcdFx0XHRcdGlmIChwIGluIGVuZFJvdGF0aW9ucykge1xuXHRcdFx0XHRcdFx0cHQuZSA9IGVuZFJvdGF0aW9uc1twXTsgLy9kaXJlY3Rpb25hbCByb3RhdGlvbnMgdHlwaWNhbGx5IGhhdmUgY29tcGVuc2F0ZWQgdmFsdWVzIGR1cmluZyB0aGUgdHdlZW4sIGJ1dCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGV5IGVuZCBhdCBleGFjdGx5IHdoYXQgdGhlIHVzZXIgcmVxdWVzdGVkXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0LnhzMCA9IDA7IC8vZW5zdXJlcyB0aGUgdmFsdWUgc3RheXMgbnVtZXJpYyBpbiBzZXRSYXRpbygpXG5cdFx0XHRcdFx0cHQucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHRcdGNzc3AuX292ZXJ3cml0ZVByb3BzLnB1c2gocHQubik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0b3JpZyA9IHYudHJhbnNmb3JtT3JpZ2luO1xuXHRcdFx0aWYgKG0xLnN2ZyAmJiAob3JpZyB8fCB2LnN2Z09yaWdpbikpIHtcblx0XHRcdFx0eCA9IG0xLnhPZmZzZXQ7IC8vd2hlbiB3ZSBjaGFuZ2UgdGhlIG9yaWdpbiwgaW4gb3JkZXIgdG8gcHJldmVudCB0aGluZ3MgZnJvbSBqdW1waW5nIHdlIGFkanVzdCB0aGUgeC95IHNvIHdlIG11c3QgcmVjb3JkIHRob3NlIGhlcmUgc28gdGhhdCB3ZSBjYW4gY3JlYXRlIFByb3BUd2VlbnMgZm9yIHRoZW0gYW5kIGZsaXAgdGhlbSBhdCB0aGUgc2FtZSB0aW1lIGFzIHRoZSBvcmlnaW5cblx0XHRcdFx0eSA9IG0xLnlPZmZzZXQ7XG5cdFx0XHRcdF9wYXJzZVNWR09yaWdpbih0LCBfcGFyc2VQb3NpdGlvbihvcmlnKSwgbTIsIHYuc3ZnT3JpZ2luLCB2LnNtb290aE9yaWdpbik7XG5cdFx0XHRcdHB0ID0gX2FkZE5vblR3ZWVuaW5nTnVtZXJpY1BUKG0xLCBcInhPcmlnaW5cIiwgKG9yaWdpbmFsR1NUcmFuc2Zvcm0gPyBtMSA6IG0yKS54T3JpZ2luLCBtMi54T3JpZ2luLCBwdCwgdHJhbnNmb3JtT3JpZ2luU3RyaW5nKTsgLy9ub3RlOiBpZiB0aGVyZSB3YXNuJ3QgYSB0cmFuc2Zvcm1PcmlnaW4gZGVmaW5lZCB5ZXQsIGp1c3Qgc3RhcnQgd2l0aCB0aGUgZGVzdGluYXRpb24gb25lOyBpdCdzIHdhc3RlZnVsIG90aGVyd2lzZSwgYW5kIGl0IGNhdXNlcyBwcm9ibGVtcyB3aXRoIGZyb21UbygpIHR3ZWVucy4gRm9yIGV4YW1wbGUsIFR3ZWVuTGl0ZS50byhcIiN3aGVlbFwiLCAzLCB7cm90YXRpb246MTgwLCB0cmFuc2Zvcm1PcmlnaW46XCI1MCUgNTAlXCIsIGRlbGF5OjF9KTsgVHdlZW5MaXRlLmZyb21UbyhcIiN3aGVlbFwiLCAzLCB7c2NhbGU6MC41LCB0cmFuc2Zvcm1PcmlnaW46XCI1MCUgNTAlXCJ9LCB7c2NhbGU6MSwgZGVsYXk6Mn0pOyB3b3VsZCBjYXVzZSBhIGp1bXAgd2hlbiB0aGUgZnJvbSB2YWx1ZXMgcmV2ZXJ0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIDJuZCB0d2Vlbi5cblx0XHRcdFx0cHQgPSBfYWRkTm9uVHdlZW5pbmdOdW1lcmljUFQobTEsIFwieU9yaWdpblwiLCAob3JpZ2luYWxHU1RyYW5zZm9ybSA/IG0xIDogbTIpLnlPcmlnaW4sIG0yLnlPcmlnaW4sIHB0LCB0cmFuc2Zvcm1PcmlnaW5TdHJpbmcpO1xuXHRcdFx0XHRpZiAoeCAhPT0gbTEueE9mZnNldCB8fCB5ICE9PSBtMS55T2Zmc2V0KSB7XG5cdFx0XHRcdFx0cHQgPSBfYWRkTm9uVHdlZW5pbmdOdW1lcmljUFQobTEsIFwieE9mZnNldFwiLCAob3JpZ2luYWxHU1RyYW5zZm9ybSA/IHggOiBtMS54T2Zmc2V0KSwgbTEueE9mZnNldCwgcHQsIHRyYW5zZm9ybU9yaWdpblN0cmluZyk7XG5cdFx0XHRcdFx0cHQgPSBfYWRkTm9uVHdlZW5pbmdOdW1lcmljUFQobTEsIFwieU9mZnNldFwiLCAob3JpZ2luYWxHU1RyYW5zZm9ybSA/IHkgOiBtMS55T2Zmc2V0KSwgbTEueU9mZnNldCwgcHQsIHRyYW5zZm9ybU9yaWdpblN0cmluZyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0b3JpZyA9IF91c2VTVkdUcmFuc2Zvcm1BdHRyID8gbnVsbCA6IFwiMHB4IDBweFwiOyAvL2NlcnRhaW4gYnJvd3NlcnMgKGxpa2UgZmlyZWZveCkgY29tcGxldGVseSBib3RjaCB0cmFuc2Zvcm0tb3JpZ2luLCBzbyB3ZSBtdXN0IHJlbW92ZSBpdCB0byBwcmV2ZW50IGl0IGZyb20gY29udGFtaW5hdGluZyB0cmFuc2Zvcm1zLiBXZSBtYW5hZ2UgaXQgb3Vyc2VsdmVzIHdpdGggeE9yaWdpbiBhbmQgeU9yaWdpblxuXHRcdFx0fVxuXHRcdFx0aWYgKG9yaWcgfHwgKF9zdXBwb3J0czNEICYmIGhhczNEICYmIG0xLnpPcmlnaW4pKSB7IC8vaWYgYW55dGhpbmcgM0QgaXMgaGFwcGVuaW5nIGFuZCB0aGVyZSdzIGEgdHJhbnNmb3JtT3JpZ2luIHdpdGggYSB6IGNvbXBvbmVudCB0aGF0J3Mgbm9uLXplcm8sIHdlIG11c3QgZW5zdXJlIHRoYXQgdGhlIHRyYW5zZm9ybU9yaWdpbidzIHotY29tcG9uZW50IGlzIHNldCB0byAwIHNvIHRoYXQgd2UgY2FuIG1hbnVhbGx5IGRvIHRob3NlIGNhbGN1bGF0aW9ucyB0byBnZXQgYXJvdW5kIFNhZmFyaSBidWdzLiBFdmVuIGlmIHRoZSB1c2VyIGRpZG4ndCBzcGVjaWZpY2FsbHkgZGVmaW5lIGEgXCJ0cmFuc2Zvcm1PcmlnaW5cIiBpbiB0aGlzIHBhcnRpY3VsYXIgdHdlZW4gKG1heWJlIHRoZXkgZGlkIGl0IHZpYSBjc3MgZGlyZWN0bHkpLlxuXHRcdFx0XHRpZiAoX3RyYW5zZm9ybVByb3ApIHtcblx0XHRcdFx0XHRoYXNDaGFuZ2UgPSB0cnVlO1xuXHRcdFx0XHRcdHAgPSBfdHJhbnNmb3JtT3JpZ2luUHJvcDtcblx0XHRcdFx0XHRvcmlnID0gKG9yaWcgfHwgX2dldFN0eWxlKHQsIHAsIF9jcywgZmFsc2UsIFwiNTAlIDUwJVwiKSkgKyBcIlwiOyAvL2Nhc3QgYXMgc3RyaW5nIHRvIGF2b2lkIGVycm9yc1xuXHRcdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihzdHlsZSwgcCwgMCwgMCwgcHQsIC0xLCB0cmFuc2Zvcm1PcmlnaW5TdHJpbmcpO1xuXHRcdFx0XHRcdHB0LmIgPSBzdHlsZVtwXTtcblx0XHRcdFx0XHRwdC5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdFx0aWYgKF9zdXBwb3J0czNEKSB7XG5cdFx0XHRcdFx0XHRjb3B5ID0gbTEuek9yaWdpbjtcblx0XHRcdFx0XHRcdG9yaWcgPSBvcmlnLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRcdG0xLnpPcmlnaW4gPSAoKG9yaWcubGVuZ3RoID4gMiAmJiAhKGNvcHkgIT09IDAgJiYgb3JpZ1syXSA9PT0gXCIwcHhcIikpID8gcGFyc2VGbG9hdChvcmlnWzJdKSA6IGNvcHkpIHx8IDA7IC8vU2FmYXJpIGRvZXNuJ3QgaGFuZGxlIHRoZSB6IHBhcnQgb2YgdHJhbnNmb3JtT3JpZ2luIGNvcnJlY3RseSwgc28gd2UnbGwgbWFudWFsbHkgaGFuZGxlIGl0IGluIHRoZSBfc2V0M0RUcmFuc2Zvcm1SYXRpbygpIG1ldGhvZC5cblx0XHRcdFx0XHRcdHB0LnhzMCA9IHB0LmUgPSBvcmlnWzBdICsgXCIgXCIgKyAob3JpZ1sxXSB8fCBcIjUwJVwiKSArIFwiIDBweFwiOyAvL3dlIG11c3QgZGVmaW5lIGEgeiB2YWx1ZSBvZiAwcHggc3BlY2lmaWNhbGx5IG90aGVyd2lzZSBpT1MgNSBTYWZhcmkgd2lsbCBzdGljayB3aXRoIHRoZSBvbGQgb25lIChpZiBvbmUgd2FzIGRlZmluZWQpIVxuXHRcdFx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKG0xLCBcInpPcmlnaW5cIiwgMCwgMCwgcHQsIC0xLCBwdC5uKTsgLy93ZSBtdXN0IGNyZWF0ZSBhIENTU1Byb3BUd2VlbiBmb3IgdGhlIF9nc1RyYW5zZm9ybS56T3JpZ2luIHNvIHRoYXQgaXQgZ2V0cyByZXNldCBwcm9wZXJseSBhdCB0aGUgYmVnaW5uaW5nIGlmIHRoZSB0d2VlbiBydW5zIGJhY2t3YXJkIChhcyBvcHBvc2VkIHRvIGp1c3Qgc2V0dGluZyBtMS56T3JpZ2luIGhlcmUpXG5cdFx0XHRcdFx0XHRwdC5iID0gY29weTtcblx0XHRcdFx0XHRcdHB0LnhzMCA9IHB0LmUgPSBtMS56T3JpZ2luO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwdC54czAgPSBwdC5lID0gb3JpZztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvL2ZvciBvbGRlciB2ZXJzaW9ucyBvZiBJRSAoNi04KSwgd2UgbmVlZCB0byBtYW51YWxseSBjYWxjdWxhdGUgdGhpbmdzIGluc2lkZSB0aGUgc2V0UmF0aW8oKSBmdW5jdGlvbi4gV2UgcmVjb3JkIG9yaWdpbiB4IGFuZCB5IChveCBhbmQgb3kpIGFuZCB3aGV0aGVyIG9yIG5vdCB0aGUgdmFsdWVzIGFyZSBwZXJjZW50YWdlcyAob3hwIGFuZCBveXApLlxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF9wYXJzZVBvc2l0aW9uKG9yaWcgKyBcIlwiLCBtMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChoYXNDaGFuZ2UpIHtcblx0XHRcdFx0Y3NzcC5fdHJhbnNmb3JtVHlwZSA9ICghKG0xLnN2ZyAmJiBfdXNlU1ZHVHJhbnNmb3JtQXR0cikgJiYgKGhhczNEIHx8IHRoaXMuX3RyYW5zZm9ybVR5cGUgPT09IDMpKSA/IDMgOiAyOyAvL3F1aWNrZXIgdGhhbiBjYWxsaW5nIGNzc3AuX2VuYWJsZVRyYW5zZm9ybXMoKTtcblx0XHRcdH1cblx0XHRcdGlmIChzd2FwRnVuYykge1xuXHRcdFx0XHR2YXJzW3BhcnNpbmdQcm9wXSA9IHN3YXBGdW5jO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH0sIHByZWZpeDp0cnVlfSk7XG5cblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJib3hTaGFkb3dcIiwge2RlZmF1bHRWYWx1ZTpcIjBweCAwcHggMHB4IDBweCAjOTk5XCIsIHByZWZpeDp0cnVlLCBjb2xvcjp0cnVlLCBtdWx0aTp0cnVlLCBrZXl3b3JkOlwiaW5zZXRcIn0pO1xuXG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYm9yZGVyUmFkaXVzXCIsIHtkZWZhdWx0VmFsdWU6XCIwcHhcIiwgcGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdGUgPSB0aGlzLmZvcm1hdChlKTtcblx0XHRcdHZhciBwcm9wcyA9IFtcImJvcmRlclRvcExlZnRSYWRpdXNcIixcImJvcmRlclRvcFJpZ2h0UmFkaXVzXCIsXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiLFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1c1wiXSxcblx0XHRcdFx0c3R5bGUgPSB0LnN0eWxlLFxuXHRcdFx0XHRlYTEsIGksIGVzMiwgYnMyLCBicywgZXMsIGJuLCBlbiwgdywgaCwgZXNmeCwgYnNmeCwgcmVsLCBobiwgdm4sIGVtO1xuXHRcdFx0dyA9IHBhcnNlRmxvYXQodC5vZmZzZXRXaWR0aCk7XG5cdFx0XHRoID0gcGFyc2VGbG9hdCh0Lm9mZnNldEhlaWdodCk7XG5cdFx0XHRlYTEgPSBlLnNwbGl0KFwiIFwiKTtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyAvL2lmIHdlJ3JlIGRlYWxpbmcgd2l0aCBwZXJjZW50YWdlcywgd2UgbXVzdCBjb252ZXJ0IHRoaW5ncyBzZXBhcmF0ZWx5IGZvciB0aGUgaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgYXhpcyFcblx0XHRcdFx0aWYgKHRoaXMucC5pbmRleE9mKFwiYm9yZGVyXCIpKSB7IC8vb2xkZXIgYnJvd3NlcnMgdXNlZCBhIHByZWZpeFxuXHRcdFx0XHRcdHByb3BzW2ldID0gX2NoZWNrUHJvcFByZWZpeChwcm9wc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0YnMgPSBiczIgPSBfZ2V0U3R5bGUodCwgcHJvcHNbaV0sIF9jcywgZmFsc2UsIFwiMHB4XCIpO1xuXHRcdFx0XHRpZiAoYnMuaW5kZXhPZihcIiBcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0YnMyID0gYnMuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdGJzID0gYnMyWzBdO1xuXHRcdFx0XHRcdGJzMiA9IGJzMlsxXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlcyA9IGVzMiA9IGVhMVtpXTtcblx0XHRcdFx0Ym4gPSBwYXJzZUZsb2F0KGJzKTtcblx0XHRcdFx0YnNmeCA9IGJzLnN1YnN0cigoYm4gKyBcIlwiKS5sZW5ndGgpO1xuXHRcdFx0XHRyZWwgPSAoZXMuY2hhckF0KDEpID09PSBcIj1cIik7XG5cdFx0XHRcdGlmIChyZWwpIHtcblx0XHRcdFx0XHRlbiA9IHBhcnNlSW50KGVzLmNoYXJBdCgwKStcIjFcIiwgMTApO1xuXHRcdFx0XHRcdGVzID0gZXMuc3Vic3RyKDIpO1xuXHRcdFx0XHRcdGVuICo9IHBhcnNlRmxvYXQoZXMpO1xuXHRcdFx0XHRcdGVzZnggPSBlcy5zdWJzdHIoKGVuICsgXCJcIikubGVuZ3RoIC0gKGVuIDwgMCA/IDEgOiAwKSkgfHwgXCJcIjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbiA9IHBhcnNlRmxvYXQoZXMpO1xuXHRcdFx0XHRcdGVzZnggPSBlcy5zdWJzdHIoKGVuICsgXCJcIikubGVuZ3RoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZXNmeCA9PT0gXCJcIikge1xuXHRcdFx0XHRcdGVzZnggPSBfc3VmZml4TWFwW3BdIHx8IGJzZng7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGVzZnggIT09IGJzZngpIHtcblx0XHRcdFx0XHRobiA9IF9jb252ZXJ0VG9QaXhlbHModCwgXCJib3JkZXJMZWZ0XCIsIGJuLCBic2Z4KTsgLy9ob3Jpem9udGFsIG51bWJlciAod2UgdXNlIGEgYm9ndXMgXCJib3JkZXJMZWZ0XCIgcHJvcGVydHkganVzdCBiZWNhdXNlIHRoZSBfY29udmVydFRvUGl4ZWxzKCkgbWV0aG9kIHNlYXJjaGVzIGZvciB0aGUga2V5d29yZHMgXCJMZWZ0XCIsIFwiUmlnaHRcIiwgXCJUb3BcIiwgYW5kIFwiQm90dG9tXCIgdG8gZGV0ZXJtaW5lIG9mIGl0J3MgYSBob3Jpem9udGFsIG9yIHZlcnRpY2FsIHByb3BlcnR5LCBhbmQgd2UgbmVlZCBcImJvcmRlclwiIGluIHRoZSBuYW1lIHNvIHRoYXQgaXQga25vd3MgaXQgc2hvdWxkIG1lYXN1cmUgcmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQgaXRzZWxmLCBub3QgaXRzIHBhcmVudC5cblx0XHRcdFx0XHR2biA9IF9jb252ZXJ0VG9QaXhlbHModCwgXCJib3JkZXJUb3BcIiwgYm4sIGJzZngpOyAvL3ZlcnRpY2FsIG51bWJlclxuXHRcdFx0XHRcdGlmIChlc2Z4ID09PSBcIiVcIikge1xuXHRcdFx0XHRcdFx0YnMgPSAoaG4gLyB3ICogMTAwKSArIFwiJVwiO1xuXHRcdFx0XHRcdFx0YnMyID0gKHZuIC8gaCAqIDEwMCkgKyBcIiVcIjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGVzZnggPT09IFwiZW1cIikge1xuXHRcdFx0XHRcdFx0ZW0gPSBfY29udmVydFRvUGl4ZWxzKHQsIFwiYm9yZGVyTGVmdFwiLCAxLCBcImVtXCIpO1xuXHRcdFx0XHRcdFx0YnMgPSAoaG4gLyBlbSkgKyBcImVtXCI7XG5cdFx0XHRcdFx0XHRiczIgPSAodm4gLyBlbSkgKyBcImVtXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGJzID0gaG4gKyBcInB4XCI7XG5cdFx0XHRcdFx0XHRiczIgPSB2biArIFwicHhcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHJlbCkge1xuXHRcdFx0XHRcdFx0ZXMgPSAocGFyc2VGbG9hdChicykgKyBlbikgKyBlc2Z4O1xuXHRcdFx0XHRcdFx0ZXMyID0gKHBhcnNlRmxvYXQoYnMyKSArIGVuKSArIGVzZng7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gX3BhcnNlQ29tcGxleChzdHlsZSwgcHJvcHNbaV0sIGJzICsgXCIgXCIgKyBiczIsIGVzICsgXCIgXCIgKyBlczIsIGZhbHNlLCBcIjBweFwiLCBwdCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fSwgcHJlZml4OnRydWUsIGZvcm1hdHRlcjpfZ2V0Rm9ybWF0dGVyKFwiMHB4IDBweCAwcHggMHB4XCIsIGZhbHNlLCB0cnVlKX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJvcmRlckJvdHRvbUxlZnRSYWRpdXMsYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMsYm9yZGVyVG9wTGVmdFJhZGl1cyxib3JkZXJUb3BSaWdodFJhZGl1c1wiLCB7ZGVmYXVsdFZhbHVlOlwiMHB4XCIsIHBhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luKSB7XG5cdFx0XHRyZXR1cm4gX3BhcnNlQ29tcGxleCh0LnN0eWxlLCBwLCB0aGlzLmZvcm1hdChfZ2V0U3R5bGUodCwgcCwgX2NzLCBmYWxzZSwgXCIwcHggMHB4XCIpKSwgdGhpcy5mb3JtYXQoZSksIGZhbHNlLCBcIjBweFwiLCBwdCk7XG5cdFx0fSwgcHJlZml4OnRydWUsIGZvcm1hdHRlcjpfZ2V0Rm9ybWF0dGVyKFwiMHB4IDBweFwiLCBmYWxzZSwgdHJ1ZSl9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJiYWNrZ3JvdW5kUG9zaXRpb25cIiwge2RlZmF1bHRWYWx1ZTpcIjAgMFwiLCBwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0dmFyIGJwID0gXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCIsXG5cdFx0XHRcdGNzID0gKF9jcyB8fCBfZ2V0Q29tcHV0ZWRTdHlsZSh0LCBudWxsKSksXG5cdFx0XHRcdGJzID0gdGhpcy5mb3JtYXQoICgoY3MpID8gX2llVmVycyA/IGNzLmdldFByb3BlcnR5VmFsdWUoYnAgKyBcIi14XCIpICsgXCIgXCIgKyBjcy5nZXRQcm9wZXJ0eVZhbHVlKGJwICsgXCIteVwiKSA6IGNzLmdldFByb3BlcnR5VmFsdWUoYnApIDogdC5jdXJyZW50U3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uWCArIFwiIFwiICsgdC5jdXJyZW50U3R5bGUuYmFja2dyb3VuZFBvc2l0aW9uWSkgfHwgXCIwIDBcIiksIC8vSW50ZXJuZXQgRXhwbG9yZXIgZG9lc24ndCByZXBvcnQgYmFja2dyb3VuZC1wb3NpdGlvbiBjb3JyZWN0bHkgLSB3ZSBtdXN0IHF1ZXJ5IGJhY2tncm91bmQtcG9zaXRpb24teCBhbmQgYmFja2dyb3VuZC1wb3NpdGlvbi15IGFuZCBjb21iaW5lIHRoZW0gKGV2ZW4gaW4gSUUxMCkuIEJlZm9yZSBJRTksIHdlIG11c3QgZG8gdGhlIHNhbWUgd2l0aCB0aGUgY3VycmVudFN0eWxlIG9iamVjdCBhbmQgdXNlIGNhbWVsQ2FzZVxuXHRcdFx0XHRlcyA9IHRoaXMuZm9ybWF0KGUpLFxuXHRcdFx0XHRiYSwgZWEsIGksIHBjdCwgb3ZlcmxhcCwgc3JjO1xuXHRcdFx0aWYgKChicy5pbmRleE9mKFwiJVwiKSAhPT0gLTEpICE9PSAoZXMuaW5kZXhPZihcIiVcIikgIT09IC0xKSAmJiBlcy5zcGxpdChcIixcIikubGVuZ3RoIDwgMikge1xuXHRcdFx0XHRzcmMgPSBfZ2V0U3R5bGUodCwgXCJiYWNrZ3JvdW5kSW1hZ2VcIikucmVwbGFjZShfdXJsRXhwLCBcIlwiKTtcblx0XHRcdFx0aWYgKHNyYyAmJiBzcmMgIT09IFwibm9uZVwiKSB7XG5cdFx0XHRcdFx0YmEgPSBicy5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0ZWEgPSBlcy5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0X3RlbXBJbWcuc2V0QXR0cmlidXRlKFwic3JjXCIsIHNyYyk7IC8vc2V0IHRoZSB0ZW1wIElNRydzIHNyYyB0byB0aGUgYmFja2dyb3VuZC1pbWFnZSBzbyB0aGF0IHdlIGNhbiBtZWFzdXJlIGl0cyB3aWR0aC9oZWlnaHRcblx0XHRcdFx0XHRpID0gMjtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdGJzID0gYmFbaV07XG5cdFx0XHRcdFx0XHRwY3QgPSAoYnMuaW5kZXhPZihcIiVcIikgIT09IC0xKTtcblx0XHRcdFx0XHRcdGlmIChwY3QgIT09IChlYVtpXS5pbmRleE9mKFwiJVwiKSAhPT0gLTEpKSB7XG5cdFx0XHRcdFx0XHRcdG92ZXJsYXAgPSAoaSA9PT0gMCkgPyB0Lm9mZnNldFdpZHRoIC0gX3RlbXBJbWcud2lkdGggOiB0Lm9mZnNldEhlaWdodCAtIF90ZW1wSW1nLmhlaWdodDtcblx0XHRcdFx0XHRcdFx0YmFbaV0gPSBwY3QgPyAocGFyc2VGbG9hdChicykgLyAxMDAgKiBvdmVybGFwKSArIFwicHhcIiA6IChwYXJzZUZsb2F0KGJzKSAvIG92ZXJsYXAgKiAxMDApICsgXCIlXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJzID0gYmEuam9pbihcIiBcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnBhcnNlQ29tcGxleCh0LnN0eWxlLCBicywgZXMsIHB0LCBwbHVnaW4pO1xuXHRcdH0sIGZvcm1hdHRlcjpfcGFyc2VQb3NpdGlvbn0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJhY2tncm91bmRTaXplXCIsIHtkZWZhdWx0VmFsdWU6XCIwIDBcIiwgZm9ybWF0dGVyOmZ1bmN0aW9uKHYpIHtcblx0XHRcdHYgKz0gXCJcIjsgLy9lbnN1cmUgaXQncyBhIHN0cmluZ1xuXHRcdFx0cmV0dXJuIF9wYXJzZVBvc2l0aW9uKHYuaW5kZXhPZihcIiBcIikgPT09IC0xID8gdiArIFwiIFwiICsgdiA6IHYpOyAvL2lmIHNldCB0byBzb21ldGhpbmcgbGlrZSBcIjEwMCUgMTAwJVwiLCBTYWZhcmkgdHlwaWNhbGx5IHJlcG9ydHMgdGhlIGNvbXB1dGVkIHN0eWxlIGFzIGp1c3QgXCIxMDAlXCIgKG5vIDJuZCB2YWx1ZSksIGJ1dCB3ZSBzaG91bGQgZW5zdXJlIHRoYXQgdGhlcmUgYXJlIHR3byB2YWx1ZXMsIHNvIGNvcHkgdGhlIGZpcnN0IG9uZS4gT3RoZXJ3aXNlLCBpdCdkIGJlIGludGVycHJldGVkIGFzIFwiMTAwJSAwXCIgKHdyb25nKS5cblx0XHR9fSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwicGVyc3BlY3RpdmVcIiwge2RlZmF1bHRWYWx1ZTpcIjBweFwiLCBwcmVmaXg6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInBlcnNwZWN0aXZlT3JpZ2luXCIsIHtkZWZhdWx0VmFsdWU6XCI1MCUgNTAlXCIsIHByZWZpeDp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwidHJhbnNmb3JtU3R5bGVcIiwge3ByZWZpeDp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYmFja2ZhY2VWaXNpYmlsaXR5XCIsIHtwcmVmaXg6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInVzZXJTZWxlY3RcIiwge3ByZWZpeDp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwibWFyZ2luXCIsIHtwYXJzZXI6X2dldEVkZ2VQYXJzZXIoXCJtYXJnaW5Ub3AsbWFyZ2luUmlnaHQsbWFyZ2luQm90dG9tLG1hcmdpbkxlZnRcIil9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJwYWRkaW5nXCIsIHtwYXJzZXI6X2dldEVkZ2VQYXJzZXIoXCJwYWRkaW5nVG9wLHBhZGRpbmdSaWdodCxwYWRkaW5nQm90dG9tLHBhZGRpbmdMZWZ0XCIpfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiY2xpcFwiLCB7ZGVmYXVsdFZhbHVlOlwicmVjdCgwcHgsMHB4LDBweCwwcHgpXCIsIHBhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luKXtcblx0XHRcdHZhciBiLCBjcywgZGVsaW07XG5cdFx0XHRpZiAoX2llVmVycyA8IDkpIHsgLy9JRTggYW5kIGVhcmxpZXIgZG9uJ3QgcmVwb3J0IGEgXCJjbGlwXCIgdmFsdWUgaW4gdGhlIGN1cnJlbnRTdHlsZSAtIGluc3RlYWQsIHRoZSB2YWx1ZXMgYXJlIHNwbGl0IGFwYXJ0IGludG8gY2xpcFRvcCwgY2xpcFJpZ2h0LCBjbGlwQm90dG9tLCBhbmQgY2xpcExlZnQuIEFsc28sIGluIElFNyBhbmQgZWFybGllciwgdGhlIHZhbHVlcyBpbnNpZGUgcmVjdCgpIGFyZSBzcGFjZS1kZWxpbWl0ZWQsIG5vdCBjb21tYS1kZWxpbWl0ZWQuXG5cdFx0XHRcdGNzID0gdC5jdXJyZW50U3R5bGU7XG5cdFx0XHRcdGRlbGltID0gX2llVmVycyA8IDggPyBcIiBcIiA6IFwiLFwiO1xuXHRcdFx0XHRiID0gXCJyZWN0KFwiICsgY3MuY2xpcFRvcCArIGRlbGltICsgY3MuY2xpcFJpZ2h0ICsgZGVsaW0gKyBjcy5jbGlwQm90dG9tICsgZGVsaW0gKyBjcy5jbGlwTGVmdCArIFwiKVwiO1xuXHRcdFx0XHRlID0gdGhpcy5mb3JtYXQoZSkuc3BsaXQoXCIsXCIpLmpvaW4oZGVsaW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YiA9IHRoaXMuZm9ybWF0KF9nZXRTdHlsZSh0LCB0aGlzLnAsIF9jcywgZmFsc2UsIHRoaXMuZGZsdCkpO1xuXHRcdFx0XHRlID0gdGhpcy5mb3JtYXQoZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgodC5zdHlsZSwgYiwgZSwgcHQsIHBsdWdpbik7XG5cdFx0fX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInRleHRTaGFkb3dcIiwge2RlZmF1bHRWYWx1ZTpcIjBweCAwcHggMHB4ICM5OTlcIiwgY29sb3I6dHJ1ZSwgbXVsdGk6dHJ1ZX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImF1dG9Sb3VuZCxzdHJpY3RVbml0c1wiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0KSB7cmV0dXJuIHB0O319KTsgLy9qdXN0IHNvIHRoYXQgd2UgY2FuIGlnbm9yZSB0aGVzZSBwcm9wZXJ0aWVzIChub3QgdHdlZW4gdGhlbSlcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJib3JkZXJcIiwge2RlZmF1bHRWYWx1ZTpcIjBweCBzb2xpZCAjMDAwXCIsIHBhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luKSB7XG5cdFx0XHR2YXIgYncgPSBfZ2V0U3R5bGUodCwgXCJib3JkZXJUb3BXaWR0aFwiLCBfY3MsIGZhbHNlLCBcIjBweFwiKSxcblx0XHRcdFx0ZW5kID0gdGhpcy5mb3JtYXQoZSkuc3BsaXQoXCIgXCIpLFxuXHRcdFx0XHRlc2Z4ID0gZW5kWzBdLnJlcGxhY2UoX3N1ZmZpeEV4cCwgXCJcIik7XG5cdFx0XHRpZiAoZXNmeCAhPT0gXCJweFwiKSB7IC8vaWYgd2UncmUgYW5pbWF0aW5nIHRvIGEgbm9uLXB4IHZhbHVlLCB3ZSBuZWVkIHRvIGNvbnZlcnQgdGhlIGJlZ2lubmluZyB3aWR0aCB0byB0aGF0IHVuaXQuXG5cdFx0XHRcdGJ3ID0gKHBhcnNlRmxvYXQoYncpIC8gX2NvbnZlcnRUb1BpeGVscyh0LCBcImJvcmRlclRvcFdpZHRoXCIsIDEsIGVzZngpKSArIGVzZng7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXJzZUNvbXBsZXgodC5zdHlsZSwgdGhpcy5mb3JtYXQoYncgKyBcIiBcIiArIF9nZXRTdHlsZSh0LCBcImJvcmRlclRvcFN0eWxlXCIsIF9jcywgZmFsc2UsIFwic29saWRcIikgKyBcIiBcIiArIF9nZXRTdHlsZSh0LCBcImJvcmRlclRvcENvbG9yXCIsIF9jcywgZmFsc2UsIFwiIzAwMFwiKSksIGVuZC5qb2luKFwiIFwiKSwgcHQsIHBsdWdpbik7XG5cdFx0XHR9LCBjb2xvcjp0cnVlLCBmb3JtYXR0ZXI6ZnVuY3Rpb24odikge1xuXHRcdFx0XHR2YXIgYSA9IHYuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRyZXR1cm4gYVswXSArIFwiIFwiICsgKGFbMV0gfHwgXCJzb2xpZFwiKSArIFwiIFwiICsgKHYubWF0Y2goX2NvbG9yRXhwKSB8fCBbXCIjMDAwXCJdKVswXTtcblx0XHRcdH19KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJib3JkZXJXaWR0aFwiLCB7cGFyc2VyOl9nZXRFZGdlUGFyc2VyKFwiYm9yZGVyVG9wV2lkdGgsYm9yZGVyUmlnaHRXaWR0aCxib3JkZXJCb3R0b21XaWR0aCxib3JkZXJMZWZ0V2lkdGhcIil9KTsgLy9GaXJlZm94IGRvZXNuJ3QgcGljayB1cCBvbiBib3JkZXJXaWR0aCBzZXQgaW4gc3R5bGUgc2hlZXRzIChvbmx5IGlubGluZSkuXG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiZmxvYXQsY3NzRmxvYXQsc3R5bGVGbG9hdFwiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBzID0gdC5zdHlsZSxcblx0XHRcdFx0cHJvcCA9IChcImNzc0Zsb2F0XCIgaW4gcykgPyBcImNzc0Zsb2F0XCIgOiBcInN0eWxlRmxvYXRcIjtcblx0XHRcdHJldHVybiBuZXcgQ1NTUHJvcFR3ZWVuKHMsIHByb3AsIDAsIDAsIHB0LCAtMSwgcCwgZmFsc2UsIDAsIHNbcHJvcF0sIGUpO1xuXHRcdH19KTtcblxuXHRcdC8vb3BhY2l0eS1yZWxhdGVkXG5cdFx0dmFyIF9zZXRJRU9wYWNpdHlSYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dmFyIHQgPSB0aGlzLnQsIC8vcmVmZXJzIHRvIHRoZSBlbGVtZW50J3Mgc3R5bGUgcHJvcGVydHlcblx0XHRcdFx0XHRmaWx0ZXJzID0gdC5maWx0ZXIgfHwgX2dldFN0eWxlKHRoaXMuZGF0YSwgXCJmaWx0ZXJcIikgfHwgXCJcIixcblx0XHRcdFx0XHR2YWwgPSAodGhpcy5zICsgdGhpcy5jICogdikgfCAwLFxuXHRcdFx0XHRcdHNraXA7XG5cdFx0XHRcdGlmICh2YWwgPT09IDEwMCkgeyAvL2ZvciBvbGRlciB2ZXJzaW9ucyBvZiBJRSB0aGF0IG5lZWQgdG8gdXNlIGEgZmlsdGVyIHRvIGFwcGx5IG9wYWNpdHksIHdlIHNob3VsZCByZW1vdmUgdGhlIGZpbHRlciBpZiBvcGFjaXR5IGhpdHMgMSBpbiBvcmRlciB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLCBidXQgbWFrZSBzdXJlIHRoZXJlIGlzbid0IGEgdHJhbnNmb3JtIChtYXRyaXgpIG9yIGdyYWRpZW50IGluIHRoZSBmaWx0ZXJzLlxuXHRcdFx0XHRcdGlmIChmaWx0ZXJzLmluZGV4T2YoXCJhdHJpeChcIikgPT09IC0xICYmIGZpbHRlcnMuaW5kZXhPZihcInJhZGllbnQoXCIpID09PSAtMSAmJiBmaWx0ZXJzLmluZGV4T2YoXCJvYWRlcihcIikgPT09IC0xKSB7XG5cdFx0XHRcdFx0XHR0LnJlbW92ZUF0dHJpYnV0ZShcImZpbHRlclwiKTtcblx0XHRcdFx0XHRcdHNraXAgPSAoIV9nZXRTdHlsZSh0aGlzLmRhdGEsIFwiZmlsdGVyXCIpKTsgLy9pZiBhIGNsYXNzIGlzIGFwcGxpZWQgdGhhdCBoYXMgYW4gYWxwaGEgZmlsdGVyLCBpdCB3aWxsIHRha2UgZWZmZWN0ICh3ZSBkb24ndCB3YW50IHRoYXQpLCBzbyByZS1hcHBseSBvdXIgYWxwaGEgZmlsdGVyIGluIHRoYXQgY2FzZS4gV2UgbXVzdCBmaXJzdCByZW1vdmUgaXQgYW5kIHRoZW4gY2hlY2suXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHQuZmlsdGVyID0gZmlsdGVycy5yZXBsYWNlKF9hbHBoYUZpbHRlckV4cCwgXCJcIik7XG5cdFx0XHRcdFx0XHRza2lwID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFza2lwKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMueG4xKSB7XG5cdFx0XHRcdFx0XHR0LmZpbHRlciA9IGZpbHRlcnMgPSBmaWx0ZXJzIHx8IChcImFscGhhKG9wYWNpdHk9XCIgKyB2YWwgKyBcIilcIik7IC8vd29ya3MgYXJvdW5kIGJ1ZyBpbiBJRTcvOCB0aGF0IHByZXZlbnRzIGNoYW5nZXMgdG8gXCJ2aXNpYmlsaXR5XCIgZnJvbSBiZWluZyBhcHBsaWVkIHByb3Blcmx5IGlmIHRoZSBmaWx0ZXIgaXMgY2hhbmdlZCB0byBhIGRpZmZlcmVudCBhbHBoYSBvbiB0aGUgc2FtZSBmcmFtZS5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGZpbHRlcnMuaW5kZXhPZihcInBhY2l0eVwiKSA9PT0gLTEpIHsgLy9vbmx5IHVzZWQgaWYgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdGhlIHN0YW5kYXJkIG9wYWNpdHkgc3R5bGUgcHJvcGVydHkgKElFIDcgYW5kIDgpLiBXZSBvbWl0IHRoZSBcIk9cIiB0byBhdm9pZCBjYXNlLXNlbnNpdGl2aXR5IGlzc3Vlc1xuXHRcdFx0XHRcdFx0aWYgKHZhbCAhPT0gMCB8fCAhdGhpcy54bjEpIHsgLy9idWdzIGluIElFNy84IHdvbid0IHJlbmRlciB0aGUgZmlsdGVyIHByb3Blcmx5IGlmIG9wYWNpdHkgaXMgQURERUQgb24gdGhlIHNhbWUgZnJhbWUvcmVuZGVyIGFzIFwidmlzaWJpbGl0eVwiIGNoYW5nZXMgKHRoaXMueG4xIGlzIDEgaWYgdGhpcyB0d2VlbiBpcyBhbiBcImF1dG9BbHBoYVwiIHR3ZWVuKVxuXHRcdFx0XHRcdFx0XHR0LmZpbHRlciA9IGZpbHRlcnMgKyBcIiBhbHBoYShvcGFjaXR5PVwiICsgdmFsICsgXCIpXCI7IC8vd2Ugcm91bmQgdGhlIHZhbHVlIGJlY2F1c2Ugb3RoZXJ3aXNlLCBidWdzIGluIElFNy84IGNhbiBwcmV2ZW50IFwidmlzaWJpbGl0eVwiIGNoYW5nZXMgZnJvbSBiZWluZyBhcHBsaWVkIHByb3Blcmx5LlxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0LmZpbHRlciA9IGZpbHRlcnMucmVwbGFjZShfb3BhY2l0eUV4cCwgXCJvcGFjaXR5PVwiICsgdmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwib3BhY2l0eSxhbHBoYSxhdXRvQWxwaGFcIiwge2RlZmF1bHRWYWx1ZTpcIjFcIiwgcGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBiID0gcGFyc2VGbG9hdChfZ2V0U3R5bGUodCwgXCJvcGFjaXR5XCIsIF9jcywgZmFsc2UsIFwiMVwiKSksXG5cdFx0XHRcdHN0eWxlID0gdC5zdHlsZSxcblx0XHRcdFx0aXNBdXRvQWxwaGEgPSAocCA9PT0gXCJhdXRvQWxwaGFcIik7XG5cdFx0XHRpZiAodHlwZW9mKGUpID09PSBcInN0cmluZ1wiICYmIGUuY2hhckF0KDEpID09PSBcIj1cIikge1xuXHRcdFx0XHRlID0gKChlLmNoYXJBdCgwKSA9PT0gXCItXCIpID8gLTEgOiAxKSAqIHBhcnNlRmxvYXQoZS5zdWJzdHIoMikpICsgYjtcblx0XHRcdH1cblx0XHRcdGlmIChpc0F1dG9BbHBoYSAmJiBiID09PSAxICYmIF9nZXRTdHlsZSh0LCBcInZpc2liaWxpdHlcIiwgX2NzKSA9PT0gXCJoaWRkZW5cIiAmJiBlICE9PSAwKSB7IC8vaWYgdmlzaWJpbGl0eSBpcyBpbml0aWFsbHkgc2V0IHRvIFwiaGlkZGVuXCIsIHdlIHNob3VsZCBpbnRlcnByZXQgdGhhdCBhcyBpbnRlbnQgdG8gbWFrZSBvcGFjaXR5IDAgKGEgY29udmVuaWVuY2UpXG5cdFx0XHRcdGIgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aWYgKF9zdXBwb3J0c09wYWNpdHkpIHtcblx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBcIm9wYWNpdHlcIiwgYiwgZSAtIGIsIHB0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB0ID0gbmV3IENTU1Byb3BUd2VlbihzdHlsZSwgXCJvcGFjaXR5XCIsIGIgKiAxMDAsIChlIC0gYikgKiAxMDAsIHB0KTtcblx0XHRcdFx0cHQueG4xID0gaXNBdXRvQWxwaGEgPyAxIDogMDsgLy93ZSBuZWVkIHRvIHJlY29yZCB3aGV0aGVyIG9yIG5vdCB0aGlzIGlzIGFuIGF1dG9BbHBoYSBzbyB0aGF0IGluIHRoZSBzZXRSYXRpbygpLCB3ZSBrbm93IHRvIGR1cGxpY2F0ZSB0aGUgc2V0dGluZyBvZiB0aGUgYWxwaGEgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgYSBidWcgaW4gSUU3IGFuZCBJRTggdGhhdCBwcmV2ZW50cyBjaGFuZ2VzIHRvIFwidmlzaWJpbGl0eVwiIGZyb20gdGFraW5nIGVmZmVjdCBpZiB0aGUgZmlsdGVyIGlzIGNoYW5nZWQgdG8gYSBkaWZmZXJlbnQgYWxwaGEob3BhY2l0eSkgYXQgdGhlIHNhbWUgdGltZS4gU2V0dGluZyBpdCB0byB0aGUgU0FNRSB2YWx1ZSBmaXJzdCwgdGhlbiB0aGUgbmV3IHZhbHVlIHdvcmtzIGFyb3VuZCB0aGUgSUU3LzggYnVnLlxuXHRcdFx0XHRzdHlsZS56b29tID0gMTsgLy9oZWxwcyBjb3JyZWN0IGFuIElFIGlzc3VlLlxuXHRcdFx0XHRwdC50eXBlID0gMjtcblx0XHRcdFx0cHQuYiA9IFwiYWxwaGEob3BhY2l0eT1cIiArIHB0LnMgKyBcIilcIjtcblx0XHRcdFx0cHQuZSA9IFwiYWxwaGEob3BhY2l0eT1cIiArIChwdC5zICsgcHQuYykgKyBcIilcIjtcblx0XHRcdFx0cHQuZGF0YSA9IHQ7XG5cdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0cHQuc2V0UmF0aW8gPSBfc2V0SUVPcGFjaXR5UmF0aW87XG5cdFx0XHR9XG5cdFx0XHRpZiAoaXNBdXRvQWxwaGEpIHsgLy93ZSBoYXZlIHRvIGNyZWF0ZSB0aGUgXCJ2aXNpYmlsaXR5XCIgUHJvcFR3ZWVuIGFmdGVyIHRoZSBvcGFjaXR5IG9uZSBpbiB0aGUgbGlua2VkIGxpc3Qgc28gdGhhdCB0aGV5IHJ1biBpbiB0aGUgb3JkZXIgdGhhdCB3b3JrcyBwcm9wZXJseSBpbiBJRTggYW5kIGVhcmxpZXJcblx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBcInZpc2liaWxpdHlcIiwgMCwgMCwgcHQsIC0xLCBudWxsLCBmYWxzZSwgMCwgKChiICE9PSAwKSA/IFwiaW5oZXJpdFwiIDogXCJoaWRkZW5cIiksICgoZSA9PT0gMCkgPyBcImhpZGRlblwiIDogXCJpbmhlcml0XCIpKTtcblx0XHRcdFx0cHQueHMwID0gXCJpbmhlcml0XCI7XG5cdFx0XHRcdGNzc3AuX292ZXJ3cml0ZVByb3BzLnB1c2gocHQubik7XG5cdFx0XHRcdGNzc3AuX292ZXJ3cml0ZVByb3BzLnB1c2gocCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fX0pO1xuXG5cblx0XHR2YXIgX3JlbW92ZVByb3AgPSBmdW5jdGlvbihzLCBwKSB7XG5cdFx0XHRcdGlmIChwKSB7XG5cdFx0XHRcdFx0aWYgKHMucmVtb3ZlUHJvcGVydHkpIHtcblx0XHRcdFx0XHRcdGlmIChwLnN1YnN0cigwLDIpID09PSBcIm1zXCIgfHwgcC5zdWJzdHIoMCw2KSA9PT0gXCJ3ZWJraXRcIikgeyAvL01pY3Jvc29mdCBhbmQgc29tZSBXZWJraXQgYnJvd3NlcnMgZG9uJ3QgY29uZm9ybSB0byB0aGUgc3RhbmRhcmQgb2YgY2FwaXRhbGl6aW5nIHRoZSBmaXJzdCBwcmVmaXggY2hhcmFjdGVyLCBzbyB3ZSBhZGp1c3Qgc28gdGhhdCB3aGVuIHdlIHByZWZpeCB0aGUgY2FwcyB3aXRoIGEgZGFzaCwgaXQncyBjb3JyZWN0IChvdGhlcndpc2UgaXQnZCBiZSBcIm1zLXRyYW5zZm9ybVwiIGluc3RlYWQgb2YgXCItbXMtdHJhbnNmb3JtXCIgZm9yIElFOSwgZm9yIGV4YW1wbGUpXG5cdFx0XHRcdFx0XHRcdHAgPSBcIi1cIiArIHA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzLnJlbW92ZVByb3BlcnR5KHAucmVwbGFjZShfY2Fwc0V4cCwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHsgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG5cdFx0XHRcdFx0XHRzLnJlbW92ZUF0dHJpYnV0ZShwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfc2V0Q2xhc3NOYW1lUmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHRoaXMudC5fZ3NDbGFzc1BUID0gdGhpcztcblx0XHRcdFx0aWYgKHYgPT09IDEgfHwgdiA9PT0gMCkge1xuXHRcdFx0XHRcdHRoaXMudC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCAodiA9PT0gMCkgPyB0aGlzLmIgOiB0aGlzLmUpO1xuXHRcdFx0XHRcdHZhciBtcHQgPSB0aGlzLmRhdGEsIC8vZmlyc3QgTWluaVByb3BUd2VlblxuXHRcdFx0XHRcdFx0cyA9IHRoaXMudC5zdHlsZTtcblx0XHRcdFx0XHR3aGlsZSAobXB0KSB7XG5cdFx0XHRcdFx0XHRpZiAoIW1wdC52KSB7XG5cdFx0XHRcdFx0XHRcdF9yZW1vdmVQcm9wKHMsIG1wdC5wKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHNbbXB0LnBdID0gbXB0LnY7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtcHQgPSBtcHQuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh2ID09PSAxICYmIHRoaXMudC5fZ3NDbGFzc1BUID09PSB0aGlzKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnQuX2dzQ2xhc3NQVCA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMudC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSAhPT0gdGhpcy5lKSB7XG5cdFx0XHRcdFx0dGhpcy50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuZSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiY2xhc3NOYW1lXCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycykge1xuXHRcdFx0dmFyIGIgPSB0LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIsIC8vZG9uJ3QgdXNlIHQuY2xhc3NOYW1lIGJlY2F1c2UgaXQgZG9lc24ndCB3b3JrIGNvbnNpc3RlbnRseSBvbiBTVkcgZWxlbWVudHM7IGdldEF0dHJpYnV0ZShcImNsYXNzXCIpIGFuZCBzZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB2YWx1ZVwiKSBpcyBtb3JlIHJlbGlhYmxlLlxuXHRcdFx0XHRjc3NUZXh0ID0gdC5zdHlsZS5jc3NUZXh0LFxuXHRcdFx0XHRkaWZEYXRhLCBicywgY25wdCwgY25wdExvb2t1cCwgbXB0O1xuXHRcdFx0cHQgPSBjc3NwLl9jbGFzc05hbWVQVCA9IG5ldyBDU1NQcm9wVHdlZW4odCwgcCwgMCwgMCwgcHQsIDIpO1xuXHRcdFx0cHQuc2V0UmF0aW8gPSBfc2V0Q2xhc3NOYW1lUmF0aW87XG5cdFx0XHRwdC5wciA9IC0xMTtcblx0XHRcdF9oYXNQcmlvcml0eSA9IHRydWU7XG5cdFx0XHRwdC5iID0gYjtcblx0XHRcdGJzID0gX2dldEFsbFN0eWxlcyh0LCBfY3MpO1xuXHRcdFx0Ly9pZiB0aGVyZSdzIGEgY2xhc3NOYW1lIHR3ZWVuIGFscmVhZHkgb3BlcmF0aW5nIG9uIHRoZSB0YXJnZXQsIGZvcmNlIGl0IHRvIGl0cyBlbmQgc28gdGhhdCB0aGUgbmVjZXNzYXJ5IGlubGluZSBzdHlsZXMgYXJlIHJlbW92ZWQgYW5kIHRoZSBjbGFzcyBuYW1lIGlzIGFwcGxpZWQgYmVmb3JlIHdlIGRldGVybWluZSB0aGUgZW5kIHN0YXRlICh3ZSBkb24ndCB3YW50IGlubGluZSBzdHlsZXMgaW50ZXJmZXJpbmcgdGhhdCB3ZXJlIHRoZXJlIGp1c3QgZm9yIGNsYXNzLXNwZWNpZmljIHZhbHVlcylcblx0XHRcdGNucHQgPSB0Ll9nc0NsYXNzUFQ7XG5cdFx0XHRpZiAoY25wdCkge1xuXHRcdFx0XHRjbnB0TG9va3VwID0ge307XG5cdFx0XHRcdG1wdCA9IGNucHQuZGF0YTsgLy9maXJzdCBNaW5pUHJvcFR3ZWVuIHdoaWNoIHN0b3JlcyB0aGUgaW5saW5lIHN0eWxlcyAtIHdlIG5lZWQgdG8gZm9yY2UgdGhlc2Ugc28gdGhhdCB0aGUgaW5saW5lIHN0eWxlcyBkb24ndCBjb250YW1pbmF0ZSB0aGluZ3MuIE90aGVyd2lzZSwgdGhlcmUncyBhIHNtYWxsIGNoYW5jZSB0aGF0IGEgdHdlZW4gY291bGQgc3RhcnQgYW5kIHRoZSBpbmxpbmUgdmFsdWVzIG1hdGNoIHRoZSBkZXN0aW5hdGlvbiB2YWx1ZXMgYW5kIHRoZXkgbmV2ZXIgZ2V0IGNsZWFuZWQuXG5cdFx0XHRcdHdoaWxlIChtcHQpIHtcblx0XHRcdFx0XHRjbnB0TG9va3VwW21wdC5wXSA9IDE7XG5cdFx0XHRcdFx0bXB0ID0gbXB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNucHQuc2V0UmF0aW8oMSk7XG5cdFx0XHR9XG5cdFx0XHR0Ll9nc0NsYXNzUFQgPSBwdDtcblx0XHRcdHB0LmUgPSAoZS5jaGFyQXQoMSkgIT09IFwiPVwiKSA/IGUgOiBiLnJlcGxhY2UobmV3IFJlZ0V4cChcIig/OlxcXFxzfF4pXCIgKyBlLnN1YnN0cigyKSArIFwiKD8hW1xcXFx3LV0pXCIpLCBcIlwiKSArICgoZS5jaGFyQXQoMCkgPT09IFwiK1wiKSA/IFwiIFwiICsgZS5zdWJzdHIoMikgOiBcIlwiKTtcblx0XHRcdHQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgcHQuZSk7XG5cdFx0XHRkaWZEYXRhID0gX2Nzc0RpZih0LCBicywgX2dldEFsbFN0eWxlcyh0KSwgdmFycywgY25wdExvb2t1cCk7XG5cdFx0XHR0LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIGIpO1xuXHRcdFx0cHQuZGF0YSA9IGRpZkRhdGEuZmlyc3RNUFQ7XG5cdFx0XHR0LnN0eWxlLmNzc1RleHQgPSBjc3NUZXh0OyAvL3dlIHJlY29yZGVkIGNzc1RleHQgYmVmb3JlIHdlIHN3YXBwZWQgY2xhc3NlcyBhbmQgcmFuIF9nZXRBbGxTdHlsZXMoKSBiZWNhdXNlIGluIGNhc2VzIHdoZW4gYSBjbGFzc05hbWUgdHdlZW4gaXMgb3ZlcndyaXR0ZW4sIHdlIHJlbW92ZSBhbGwgdGhlIHJlbGF0ZWQgdHdlZW5pbmcgcHJvcGVydGllcyBmcm9tIHRoYXQgY2xhc3MgY2hhbmdlIChvdGhlcndpc2UgY2xhc3Mtc3BlY2lmaWMgc3R1ZmYgY2FuJ3Qgb3ZlcnJpZGUgcHJvcGVydGllcyB3ZSd2ZSBkaXJlY3RseSBzZXQgb24gdGhlIHRhcmdldCdzIHN0eWxlIG9iamVjdCBkdWUgdG8gc3BlY2lmaWNpdHkpLlxuXHRcdFx0cHQgPSBwdC54Zmlyc3QgPSBjc3NwLnBhcnNlKHQsIGRpZkRhdGEuZGlmcywgcHQsIHBsdWdpbik7IC8vd2UgcmVjb3JkIHRoZSBDU1NQcm9wVHdlZW4gYXMgdGhlIHhmaXJzdCBzbyB0aGF0IHdlIGNhbiBoYW5kbGUgb3ZlcndyaXRpbmcgcHJvcGVydGx5IChpZiBcImNsYXNzTmFtZVwiIGdldHMgb3ZlcndyaXR0ZW4sIHdlIG11c3Qga2lsbCBhbGwgdGhlIHByb3BlcnRpZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjbGFzc05hbWUgcGFydCBvZiB0aGUgdHdlZW4sIHNvIHdlIGNhbiBsb29wIHRocm91Z2ggZnJvbSB4Zmlyc3QgdG8gdGhlIHB0IGl0c2VsZilcblx0XHRcdHJldHVybiBwdDtcblx0XHR9fSk7XG5cblxuXHRcdHZhciBfc2V0Q2xlYXJQcm9wc1JhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0aWYgKHYgPT09IDEgfHwgdiA9PT0gMCkgaWYgKHRoaXMuZGF0YS5fdG90YWxUaW1lID09PSB0aGlzLmRhdGEuX3RvdGFsRHVyYXRpb24gJiYgdGhpcy5kYXRhLmRhdGEgIT09IFwiaXNGcm9tU3RhcnRcIikgeyAvL3RoaXMuZGF0YSByZWZlcnMgdG8gdGhlIHR3ZWVuLiBPbmx5IGNsZWFyIGF0IHRoZSBFTkQgb2YgdGhlIHR3ZWVuIChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBtYWtlIHRoZSByYXRpbyBnbyBmcm9tIDEgdG8gMCwgc28gd2UgY2FuJ3QganVzdCBjaGVjayB0aGF0IGFuZCBpZiB0aGUgdHdlZW4gaXMgdGhlIHplcm8tZHVyYXRpb24gb25lIHRoYXQncyBjcmVhdGVkIGludGVybmFsbHkgdG8gcmVuZGVyIHRoZSBzdGFydGluZyB2YWx1ZXMgaW4gYSBmcm9tKCkgdHdlZW4sIGlnbm9yZSB0aGF0IGJlY2F1c2Ugb3RoZXJ3aXNlLCBmb3IgZXhhbXBsZSwgZnJvbSguLi57aGVpZ2h0OjEwMCwgY2xlYXJQcm9wczpcImhlaWdodFwiLCBkZWxheToxfSkgd291bGQgd2lwZSB0aGUgaGVpZ2h0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHR3ZWVuIGFuZCBhZnRlciAxIHNlY29uZCwgaXQnZCBraWNrIGJhY2sgaW4pLlxuXHRcdFx0XHR2YXIgcyA9IHRoaXMudC5zdHlsZSxcblx0XHRcdFx0XHR0cmFuc2Zvcm1QYXJzZSA9IF9zcGVjaWFsUHJvcHMudHJhbnNmb3JtLnBhcnNlLFxuXHRcdFx0XHRcdGEsIHAsIGksIGNsZWFyVHJhbnNmb3JtLCB0cmFuc2Zvcm07XG5cdFx0XHRcdGlmICh0aGlzLmUgPT09IFwiYWxsXCIpIHtcblx0XHRcdFx0XHRzLmNzc1RleHQgPSBcIlwiO1xuXHRcdFx0XHRcdGNsZWFyVHJhbnNmb3JtID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhID0gdGhpcy5lLnNwbGl0KFwiIFwiKS5qb2luKFwiXCIpLnNwbGl0KFwiLFwiKTtcblx0XHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRwID0gYVtpXTtcblx0XHRcdFx0XHRcdGlmIChfc3BlY2lhbFByb3BzW3BdKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChfc3BlY2lhbFByb3BzW3BdLnBhcnNlID09PSB0cmFuc2Zvcm1QYXJzZSkge1xuXHRcdFx0XHRcdFx0XHRcdGNsZWFyVHJhbnNmb3JtID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRwID0gKHAgPT09IFwidHJhbnNmb3JtT3JpZ2luXCIpID8gX3RyYW5zZm9ybU9yaWdpblByb3AgOiBfc3BlY2lhbFByb3BzW3BdLnA7IC8vZW5zdXJlcyB0aGF0IHNwZWNpYWwgcHJvcGVydGllcyB1c2UgdGhlIHByb3BlciBicm93c2VyLXNwZWNpZmljIHByb3BlcnR5IG5hbWUsIGxpa2UgXCJzY2FsZVhcIiBtaWdodCBiZSBcIi13ZWJraXQtdHJhbnNmb3JtXCIgb3IgXCJib3hTaGFkb3dcIiBtaWdodCBiZSBcIi1tb3otYm94LXNoYWRvd1wiXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdF9yZW1vdmVQcm9wKHMsIHApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2xlYXJUcmFuc2Zvcm0pIHtcblx0XHRcdFx0XHRfcmVtb3ZlUHJvcChzLCBfdHJhbnNmb3JtUHJvcCk7XG5cdFx0XHRcdFx0dHJhbnNmb3JtID0gdGhpcy50Ll9nc1RyYW5zZm9ybTtcblx0XHRcdFx0XHRpZiAodHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0XHRpZiAodHJhbnNmb3JtLnN2Zykge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnQucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnQucmVtb3ZlQXR0cmlidXRlKFwidHJhbnNmb3JtXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMudC5fZ3NUcmFuc2Zvcm07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9O1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImNsZWFyUHJvcHNcIiwge3BhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCkge1xuXHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHQsIHAsIDAsIDAsIHB0LCAyKTtcblx0XHRcdHB0LnNldFJhdGlvID0gX3NldENsZWFyUHJvcHNSYXRpbztcblx0XHRcdHB0LmUgPSBlO1xuXHRcdFx0cHQucHIgPSAtMTA7XG5cdFx0XHRwdC5kYXRhID0gY3NzcC5fdHdlZW47XG5cdFx0XHRfaGFzUHJpb3JpdHkgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH19KTtcblxuXHRcdHAgPSBcImJlemllcix0aHJvd1Byb3BzLHBoeXNpY3NQcm9wcyxwaHlzaWNzMkRcIi5zcGxpdChcIixcIik7XG5cdFx0aSA9IHAubGVuZ3RoO1xuXHRcdHdoaWxlIChpLS0pIHtcblx0XHRcdF9yZWdpc3RlclBsdWdpblByb3AocFtpXSk7XG5cdFx0fVxuXG5cblxuXG5cblxuXG5cblx0XHRwID0gQ1NTUGx1Z2luLnByb3RvdHlwZTtcblx0XHRwLl9maXJzdFBUID0gcC5fbGFzdFBhcnNlZFRyYW5zZm9ybSA9IHAuX3RyYW5zZm9ybSA9IG51bGw7XG5cblx0XHQvL2dldHMgY2FsbGVkIHdoZW4gdGhlIHR3ZWVuIHJlbmRlcnMgZm9yIHRoZSBmaXJzdCB0aW1lLiBUaGlzIGtpY2tzIGV2ZXJ5dGhpbmcgb2ZmLCByZWNvcmRpbmcgc3RhcnQvZW5kIHZhbHVlcywgZXRjLlxuXHRcdHAuX29uSW5pdFR3ZWVuID0gZnVuY3Rpb24odGFyZ2V0LCB2YXJzLCB0d2VlbiwgaW5kZXgpIHtcblx0XHRcdGlmICghdGFyZ2V0Lm5vZGVUeXBlKSB7IC8vY3NzIGlzIG9ubHkgZm9yIGRvbSBlbGVtZW50c1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90YXJnZXQgPSBfdGFyZ2V0ID0gdGFyZ2V0O1xuXHRcdFx0dGhpcy5fdHdlZW4gPSB0d2Vlbjtcblx0XHRcdHRoaXMuX3ZhcnMgPSB2YXJzO1xuXHRcdFx0X2luZGV4ID0gaW5kZXg7XG5cdFx0XHRfYXV0b1JvdW5kID0gdmFycy5hdXRvUm91bmQ7XG5cdFx0XHRfaGFzUHJpb3JpdHkgPSBmYWxzZTtcblx0XHRcdF9zdWZmaXhNYXAgPSB2YXJzLnN1ZmZpeE1hcCB8fCBDU1NQbHVnaW4uc3VmZml4TWFwO1xuXHRcdFx0X2NzID0gX2dldENvbXB1dGVkU3R5bGUodGFyZ2V0LCBcIlwiKTtcblx0XHRcdF9vdmVyd3JpdGVQcm9wcyA9IHRoaXMuX292ZXJ3cml0ZVByb3BzO1xuXHRcdFx0dmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuXHRcdFx0XHR2LCBwdCwgcHQyLCBmaXJzdCwgbGFzdCwgbmV4dCwgekluZGV4LCB0cHQsIHRocmVlRDtcblx0XHRcdGlmIChfcmVxU2FmYXJpRml4KSBpZiAoc3R5bGUuekluZGV4ID09PSBcIlwiKSB7XG5cdFx0XHRcdHYgPSBfZ2V0U3R5bGUodGFyZ2V0LCBcInpJbmRleFwiLCBfY3MpO1xuXHRcdFx0XHRpZiAodiA9PT0gXCJhdXRvXCIgfHwgdiA9PT0gXCJcIikge1xuXHRcdFx0XHRcdC8vY29ycmVjdHMgYSBidWcgaW4gW25vbi1BbmRyb2lkXSBTYWZhcmkgdGhhdCBwcmV2ZW50cyBpdCBmcm9tIHJlcGFpbnRpbmcgZWxlbWVudHMgaW4gdGhlaXIgbmV3IHBvc2l0aW9ucyBpZiB0aGV5IGRvbid0IGhhdmUgYSB6SW5kZXggc2V0LiBXZSBhbHNvIGNhbid0IGp1c3QgYXBwbHkgdGhpcyBpbnNpZGUgX3BhcnNlVHJhbnNmb3JtKCkgYmVjYXVzZSBhbnl0aGluZyB0aGF0J3MgbW92ZWQgaW4gYW55IHdheSAobGlrZSB1c2luZyBcImxlZnRcIiBvciBcInRvcFwiIGluc3RlYWQgb2YgdHJhbnNmb3JtcyBsaWtlIFwieFwiIGFuZCBcInlcIikgY2FuIGJlIGFmZmVjdGVkLCBzbyBpdCBpcyBiZXN0IHRvIGVuc3VyZSB0aGF0IGFueXRoaW5nIHRoYXQncyB0d2VlbmluZyBoYXMgYSB6LWluZGV4LiBTZXR0aW5nIFwiV2Via2l0UGVyc3BlY3RpdmVcIiB0byBhIG5vbi16ZXJvIHZhbHVlIHdvcmtlZCB0b28gZXhjZXB0IHRoYXQgb24gaU9TIFNhZmFyaSB0aGluZ3Mgd291bGQgZmxpY2tlciByYW5kb21seS4gUGx1cyB6SW5kZXggaXMgbGVzcyBtZW1vcnktaW50ZW5zaXZlLlxuXHRcdFx0XHRcdHRoaXMuX2FkZExhenlTZXQoc3R5bGUsIFwiekluZGV4XCIsIDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YodmFycykgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0Zmlyc3QgPSBzdHlsZS5jc3NUZXh0O1xuXHRcdFx0XHR2ID0gX2dldEFsbFN0eWxlcyh0YXJnZXQsIF9jcyk7XG5cdFx0XHRcdHN0eWxlLmNzc1RleHQgPSBmaXJzdCArIFwiO1wiICsgdmFycztcblx0XHRcdFx0diA9IF9jc3NEaWYodGFyZ2V0LCB2LCBfZ2V0QWxsU3R5bGVzKHRhcmdldCkpLmRpZnM7XG5cdFx0XHRcdGlmICghX3N1cHBvcnRzT3BhY2l0eSAmJiBfb3BhY2l0eVZhbEV4cC50ZXN0KHZhcnMpKSB7XG5cdFx0XHRcdFx0di5vcGFjaXR5ID0gcGFyc2VGbG9hdCggUmVnRXhwLiQxICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFycyA9IHY7XG5cdFx0XHRcdHN0eWxlLmNzc1RleHQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZhcnMuY2xhc3NOYW1lKSB7IC8vY2xhc3NOYW1lIHR3ZWVucyB3aWxsIGNvbWJpbmUgYW55IGRpZmZlcmVuY2VzIHRoZXkgZmluZCBpbiB0aGUgY3NzIHdpdGggdGhlIHZhcnMgdGhhdCBhcmUgcGFzc2VkIGluLCBzbyB7Y2xhc3NOYW1lOlwibXlDbGFzc1wiLCBzY2FsZTowLjUsIGxlZnQ6MjB9IHdvdWxkIHdvcmsuXG5cdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdCA9IF9zcGVjaWFsUHJvcHMuY2xhc3NOYW1lLnBhcnNlKHRhcmdldCwgdmFycy5jbGFzc05hbWUsIFwiY2xhc3NOYW1lXCIsIHRoaXMsIG51bGwsIG51bGwsIHZhcnMpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0ID0gdGhpcy5wYXJzZSh0YXJnZXQsIHZhcnMsIG51bGwpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fdHJhbnNmb3JtVHlwZSkge1xuXHRcdFx0XHR0aHJlZUQgPSAodGhpcy5fdHJhbnNmb3JtVHlwZSA9PT0gMyk7XG5cdFx0XHRcdGlmICghX3RyYW5zZm9ybVByb3ApIHtcblx0XHRcdFx0XHRzdHlsZS56b29tID0gMTsgLy9oZWxwcyBjb3JyZWN0IGFuIElFIGlzc3VlLlxuXHRcdFx0XHR9IGVsc2UgaWYgKF9pc1NhZmFyaSkge1xuXHRcdFx0XHRcdF9yZXFTYWZhcmlGaXggPSB0cnVlO1xuXHRcdFx0XHRcdC8vaWYgekluZGV4IGlzbid0IHNldCwgaU9TIFNhZmFyaSBkb2Vzbid0IHJlcGFpbnQgdGhpbmdzIGNvcnJlY3RseSBzb21ldGltZXMgKHNlZW1pbmdseSBhdCByYW5kb20pLlxuXHRcdFx0XHRcdGlmIChzdHlsZS56SW5kZXggPT09IFwiXCIpIHtcblx0XHRcdFx0XHRcdHpJbmRleCA9IF9nZXRTdHlsZSh0YXJnZXQsIFwiekluZGV4XCIsIF9jcyk7XG5cdFx0XHRcdFx0XHRpZiAoekluZGV4ID09PSBcImF1dG9cIiB8fCB6SW5kZXggPT09IFwiXCIpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fYWRkTGF6eVNldChzdHlsZSwgXCJ6SW5kZXhcIiwgMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vU2V0dGluZyBXZWJraXRCYWNrZmFjZVZpc2liaWxpdHkgY29ycmVjdHMgMyBidWdzOlxuXHRcdFx0XHRcdC8vIDEpIFtub24tQW5kcm9pZF0gU2FmYXJpIHNraXBzIHJlbmRlcmluZyBjaGFuZ2VzIHRvIFwidG9wXCIgYW5kIFwibGVmdFwiIHRoYXQgYXJlIG1hZGUgb24gdGhlIHNhbWUgZnJhbWUvcmVuZGVyIGFzIGEgdHJhbnNmb3JtIHVwZGF0ZS5cblx0XHRcdFx0XHQvLyAyKSBpT1MgU2FmYXJpIHNvbWV0aW1lcyBuZWdsZWN0cyB0byByZXBhaW50IGVsZW1lbnRzIGluIHRoZWlyIG5ldyBwb3NpdGlvbnMuIFNldHRpbmcgXCJXZWJraXRQZXJzcGVjdGl2ZVwiIHRvIGEgbm9uLXplcm8gdmFsdWUgd29ya2VkIHRvbyBleGNlcHQgdGhhdCBvbiBpT1MgU2FmYXJpIHRoaW5ncyB3b3VsZCBmbGlja2VyIHJhbmRvbWx5LlxuXHRcdFx0XHRcdC8vIDMpIFNhZmFyaSBzb21ldGltZXMgZGlzcGxheWVkIG9kZCBhcnRpZmFjdHMgd2hlbiB0d2VlbmluZyB0aGUgdHJhbnNmb3JtIChvciBXZWJraXRUcmFuc2Zvcm0pIHByb3BlcnR5LCBsaWtlIGdob3N0cyBvZiB0aGUgZWRnZXMgb2YgdGhlIGVsZW1lbnQgcmVtYWluZWQuIERlZmluaXRlbHkgYSBicm93c2VyIGJ1Zy5cblx0XHRcdFx0XHQvL05vdGU6IHdlIGFsbG93IHRoZSB1c2VyIHRvIG92ZXJyaWRlIHRoZSBhdXRvLXNldHRpbmcgYnkgZGVmaW5pbmcgV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IGluIHRoZSB2YXJzIG9mIHRoZSB0d2Vlbi5cblx0XHRcdFx0XHRpZiAoX2lzU2FmYXJpTFQ2KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9hZGRMYXp5U2V0KHN0eWxlLCBcIldlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eVwiLCB0aGlzLl92YXJzLldlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSB8fCAodGhyZWVEID8gXCJ2aXNpYmxlXCIgOiBcImhpZGRlblwiKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHB0MiA9IHB0O1xuXHRcdFx0XHR3aGlsZSAocHQyICYmIHB0Mi5fbmV4dCkge1xuXHRcdFx0XHRcdHB0MiA9IHB0Mi5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHR0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHRhcmdldCwgXCJ0cmFuc2Zvcm1cIiwgMCwgMCwgbnVsbCwgMik7XG5cdFx0XHRcdHRoaXMuX2xpbmtDU1NQKHRwdCwgbnVsbCwgcHQyKTtcblx0XHRcdFx0dHB0LnNldFJhdGlvID0gX3RyYW5zZm9ybVByb3AgPyBfc2V0VHJhbnNmb3JtUmF0aW8gOiBfc2V0SUVUcmFuc2Zvcm1SYXRpbztcblx0XHRcdFx0dHB0LmRhdGEgPSB0aGlzLl90cmFuc2Zvcm0gfHwgX2dldFRyYW5zZm9ybSh0YXJnZXQsIF9jcywgdHJ1ZSk7XG5cdFx0XHRcdHRwdC50d2VlbiA9IHR3ZWVuO1xuXHRcdFx0XHR0cHQucHIgPSAtMTsgLy9lbnN1cmVzIHRoYXQgdGhlIHRyYW5zZm9ybXMgZ2V0IGFwcGxpZWQgYWZ0ZXIgdGhlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQuXG5cdFx0XHRcdF9vdmVyd3JpdGVQcm9wcy5wb3AoKTsgLy93ZSBkb24ndCB3YW50IHRvIGZvcmNlIHRoZSBvdmVyd3JpdGUgb2YgYWxsIFwidHJhbnNmb3JtXCIgdHdlZW5zIG9mIHRoZSB0YXJnZXQgLSB3ZSBvbmx5IGNhcmUgYWJvdXQgaW5kaXZpZHVhbCB0cmFuc2Zvcm0gcHJvcGVydGllcyBsaWtlIHNjYWxlWCwgcm90YXRpb24sIGV0Yy4gVGhlIENTU1Byb3BUd2VlbiBjb25zdHJ1Y3RvciBhdXRvbWF0aWNhbGx5IGFkZHMgdGhlIHByb3BlcnR5IHRvIF9vdmVyd3JpdGVQcm9wcyB3aGljaCBpcyB3aHkgd2UgbmVlZCB0byBwb3AoKSBoZXJlLlxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX2hhc1ByaW9yaXR5KSB7XG5cdFx0XHRcdC8vcmVvcmRlcnMgdGhlIGxpbmtlZCBsaXN0IGluIG9yZGVyIG9mIHByIChwcmlvcml0eSlcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0bmV4dCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHRcdHB0MiA9IGZpcnN0O1xuXHRcdFx0XHRcdHdoaWxlIChwdDIgJiYgcHQyLnByID4gcHQucHIpIHtcblx0XHRcdFx0XHRcdHB0MiA9IHB0Mi5fbmV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChwdC5fcHJldiA9IHB0MiA/IHB0Mi5fcHJldiA6IGxhc3QpKSB7XG5cdFx0XHRcdFx0XHRwdC5fcHJldi5fbmV4dCA9IHB0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmaXJzdCA9IHB0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKHB0Ll9uZXh0ID0gcHQyKSkge1xuXHRcdFx0XHRcdFx0cHQyLl9wcmV2ID0gcHQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGxhc3QgPSBwdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBuZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBmaXJzdDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH07XG5cblxuXHRcdHAucGFyc2UgPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBzdHlsZSA9IHRhcmdldC5zdHlsZSxcblx0XHRcdFx0cCwgc3AsIGJuLCBlbiwgYnMsIGVzLCBic2Z4LCBlc2Z4LCBpc1N0ciwgcmVsO1xuXHRcdFx0Zm9yIChwIGluIHZhcnMpIHtcblx0XHRcdFx0ZXMgPSB2YXJzW3BdOyAvL2VuZGluZyB2YWx1ZSBzdHJpbmdcblx0XHRcdFx0aWYgKHR5cGVvZihlcykgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdGVzID0gZXMoX2luZGV4LCBfdGFyZ2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzcCA9IF9zcGVjaWFsUHJvcHNbcF07IC8vU3BlY2lhbFByb3AgbG9va3VwLlxuXHRcdFx0XHRpZiAoc3ApIHtcblx0XHRcdFx0XHRwdCA9IHNwLnBhcnNlKHRhcmdldCwgZXMsIHAsIHRoaXMsIHB0LCBwbHVnaW4sIHZhcnMpO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0YnMgPSBfZ2V0U3R5bGUodGFyZ2V0LCBwLCBfY3MpICsgXCJcIjtcblx0XHRcdFx0XHRpc1N0ciA9ICh0eXBlb2YoZXMpID09PSBcInN0cmluZ1wiKTtcblx0XHRcdFx0XHRpZiAocCA9PT0gXCJjb2xvclwiIHx8IHAgPT09IFwiZmlsbFwiIHx8IHAgPT09IFwic3Ryb2tlXCIgfHwgcC5pbmRleE9mKFwiQ29sb3JcIikgIT09IC0xIHx8IChpc1N0ciAmJiBfcmdiaHNsRXhwLnRlc3QoZXMpKSkgeyAvL09wZXJhIHVzZXMgYmFja2dyb3VuZDogdG8gZGVmaW5lIGNvbG9yIHNvbWV0aW1lcyBpbiBhZGRpdGlvbiB0byBiYWNrZ3JvdW5kQ29sb3I6XG5cdFx0XHRcdFx0XHRpZiAoIWlzU3RyKSB7XG5cdFx0XHRcdFx0XHRcdGVzID0gX3BhcnNlQ29sb3IoZXMpO1xuXHRcdFx0XHRcdFx0XHRlcyA9ICgoZXMubGVuZ3RoID4gMykgPyBcInJnYmEoXCIgOiBcInJnYihcIikgKyBlcy5qb2luKFwiLFwiKSArIFwiKVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cHQgPSBfcGFyc2VDb21wbGV4KHN0eWxlLCBwLCBicywgZXMsIHRydWUsIFwidHJhbnNwYXJlbnRcIiwgcHQsIDAsIHBsdWdpbik7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGlzU3RyICYmIF9jb21wbGV4RXhwLnRlc3QoZXMpKSB7XG5cdFx0XHRcdFx0XHRwdCA9IF9wYXJzZUNvbXBsZXgoc3R5bGUsIHAsIGJzLCBlcywgdHJ1ZSwgbnVsbCwgcHQsIDAsIHBsdWdpbik7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ym4gPSBwYXJzZUZsb2F0KGJzKTtcblx0XHRcdFx0XHRcdGJzZnggPSAoYm4gfHwgYm4gPT09IDApID8gYnMuc3Vic3RyKChibiArIFwiXCIpLmxlbmd0aCkgOiBcIlwiOyAvL3JlbWVtYmVyLCBicyBjb3VsZCBiZSBub24tbnVtZXJpYyBsaWtlIFwibm9ybWFsXCIgZm9yIGZvbnRXZWlnaHQsIHNvIHdlIHNob3VsZCBkZWZhdWx0IHRvIGEgYmxhbmsgc3VmZml4IGluIHRoYXQgY2FzZS5cblxuXHRcdFx0XHRcdFx0aWYgKGJzID09PSBcIlwiIHx8IGJzID09PSBcImF1dG9cIikge1xuXHRcdFx0XHRcdFx0XHRpZiAocCA9PT0gXCJ3aWR0aFwiIHx8IHAgPT09IFwiaGVpZ2h0XCIpIHtcblx0XHRcdFx0XHRcdFx0XHRibiA9IF9nZXREaW1lbnNpb24odGFyZ2V0LCBwLCBfY3MpO1xuXHRcdFx0XHRcdFx0XHRcdGJzZnggPSBcInB4XCI7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocCA9PT0gXCJsZWZ0XCIgfHwgcCA9PT0gXCJ0b3BcIikge1xuXHRcdFx0XHRcdFx0XHRcdGJuID0gX2NhbGN1bGF0ZU9mZnNldCh0YXJnZXQsIHAsIF9jcyk7XG5cdFx0XHRcdFx0XHRcdFx0YnNmeCA9IFwicHhcIjtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRibiA9IChwICE9PSBcIm9wYWNpdHlcIikgPyAwIDogMTtcblx0XHRcdFx0XHRcdFx0XHRic2Z4ID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZWwgPSAoaXNTdHIgJiYgZXMuY2hhckF0KDEpID09PSBcIj1cIik7XG5cdFx0XHRcdFx0XHRpZiAocmVsKSB7XG5cdFx0XHRcdFx0XHRcdGVuID0gcGFyc2VJbnQoZXMuY2hhckF0KDApICsgXCIxXCIsIDEwKTtcblx0XHRcdFx0XHRcdFx0ZXMgPSBlcy5zdWJzdHIoMik7XG5cdFx0XHRcdFx0XHRcdGVuICo9IHBhcnNlRmxvYXQoZXMpO1xuXHRcdFx0XHRcdFx0XHRlc2Z4ID0gZXMucmVwbGFjZShfc3VmZml4RXhwLCBcIlwiKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVuID0gcGFyc2VGbG9hdChlcyk7XG5cdFx0XHRcdFx0XHRcdGVzZnggPSBpc1N0ciA/IGVzLnJlcGxhY2UoX3N1ZmZpeEV4cCwgXCJcIikgOiBcIlwiO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoZXNmeCA9PT0gXCJcIikge1xuXHRcdFx0XHRcdFx0XHRlc2Z4ID0gKHAgaW4gX3N1ZmZpeE1hcCkgPyBfc3VmZml4TWFwW3BdIDogYnNmeDsgLy9wb3B1bGF0ZSB0aGUgZW5kIHN1ZmZpeCwgcHJpb3JpdGl6aW5nIHRoZSBtYXAsIHRoZW4gaWYgbm9uZSBpcyBmb3VuZCwgdXNlIHRoZSBiZWdpbm5pbmcgc3VmZml4LlxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRlcyA9IChlbiB8fCBlbiA9PT0gMCkgPyAocmVsID8gZW4gKyBibiA6IGVuKSArIGVzZnggOiB2YXJzW3BdOyAvL2Vuc3VyZXMgdGhhdCBhbnkgKz0gb3IgLT0gcHJlZml4ZXMgYXJlIHRha2VuIGNhcmUgb2YuIFJlY29yZCB0aGUgZW5kIHZhbHVlIGJlZm9yZSBub3JtYWxpemluZyB0aGUgc3VmZml4IGJlY2F1c2Ugd2UgYWx3YXlzIHdhbnQgdG8gZW5kIHRoZSB0d2VlbiBvbiBleGFjdGx5IHdoYXQgdGhleSBpbnRlbmRlZCBldmVuIGlmIGl0IGRvZXNuJ3QgbWF0Y2ggdGhlIGJlZ2lubmluZyB2YWx1ZSdzIHN1ZmZpeC5cblxuXHRcdFx0XHRcdFx0Ly9pZiB0aGUgYmVnaW5uaW5nL2VuZGluZyBzdWZmaXhlcyBkb24ndCBtYXRjaCwgbm9ybWFsaXplIHRoZW0uLi5cblx0XHRcdFx0XHRcdGlmIChic2Z4ICE9PSBlc2Z4KSBpZiAoZXNmeCAhPT0gXCJcIikgaWYgKGVuIHx8IGVuID09PSAwKSBpZiAoYm4pIHsgLy9ub3RlOiBpZiB0aGUgYmVnaW5uaW5nIHZhbHVlIChibikgaXMgMCwgd2UgZG9uJ3QgbmVlZCB0byBjb252ZXJ0IHVuaXRzIVxuXHRcdFx0XHRcdFx0XHRibiA9IF9jb252ZXJ0VG9QaXhlbHModGFyZ2V0LCBwLCBibiwgYnNmeCk7XG5cdFx0XHRcdFx0XHRcdGlmIChlc2Z4ID09PSBcIiVcIikge1xuXHRcdFx0XHRcdFx0XHRcdGJuIC89IF9jb252ZXJ0VG9QaXhlbHModGFyZ2V0LCBwLCAxMDAsIFwiJVwiKSAvIDEwMDtcblx0XHRcdFx0XHRcdFx0XHRpZiAodmFycy5zdHJpY3RVbml0cyAhPT0gdHJ1ZSkgeyAvL3NvbWUgYnJvd3NlcnMgcmVwb3J0IG9ubHkgXCJweFwiIHZhbHVlcyBpbnN0ZWFkIG9mIGFsbG93aW5nIFwiJVwiIHdpdGggZ2V0Q29tcHV0ZWRTdHlsZSgpLCBzbyB3ZSBhc3N1bWUgdGhhdCBpZiB3ZSdyZSB0d2VlbmluZyB0byBhICUsIHdlIHNob3VsZCBzdGFydCB0aGVyZSB0b28gdW5sZXNzIHN0cmljdFVuaXRzOnRydWUgaXMgZGVmaW5lZC4gVGhpcyBhcHByb2FjaCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciByZXNwb25zaXZlIGRlc2lnbnMgdGhhdCB1c2UgZnJvbSgpIHR3ZWVucy5cblx0XHRcdFx0XHRcdFx0XHRcdGJzID0gYm4gKyBcIiVcIjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChlc2Z4ID09PSBcImVtXCIgfHwgZXNmeCA9PT0gXCJyZW1cIiB8fCBlc2Z4ID09PSBcInZ3XCIgfHwgZXNmeCA9PT0gXCJ2aFwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ym4gLz0gX2NvbnZlcnRUb1BpeGVscyh0YXJnZXQsIHAsIDEsIGVzZngpO1xuXG5cdFx0XHRcdFx0XHRcdC8vb3RoZXJ3aXNlIGNvbnZlcnQgdG8gcGl4ZWxzLlxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGVzZnggIT09IFwicHhcIikge1xuXHRcdFx0XHRcdFx0XHRcdGVuID0gX2NvbnZlcnRUb1BpeGVscyh0YXJnZXQsIHAsIGVuLCBlc2Z4KTtcblx0XHRcdFx0XHRcdFx0XHRlc2Z4ID0gXCJweFwiOyAvL3dlIGRvbid0IHVzZSBic2Z4IGFmdGVyIHRoaXMsIHNvIHdlIGRvbid0IG5lZWQgdG8gc2V0IGl0IHRvIHB4IHRvby5cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocmVsKSBpZiAoZW4gfHwgZW4gPT09IDApIHtcblx0XHRcdFx0XHRcdFx0XHRlcyA9IChlbiArIGJuKSArIGVzZng7IC8vdGhlIGNoYW5nZXMgd2UgbWFkZSBhZmZlY3QgcmVsYXRpdmUgY2FsY3VsYXRpb25zLCBzbyBhZGp1c3QgdGhlIGVuZCB2YWx1ZSBoZXJlLlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChyZWwpIHtcblx0XHRcdFx0XHRcdFx0ZW4gKz0gYm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICgoYm4gfHwgYm4gPT09IDApICYmIChlbiB8fCBlbiA9PT0gMCkpIHsgLy9mYXN0ZXIgdGhhbiBpc05hTigpLiBBbHNvLCBwcmV2aW91c2x5IHdlIHJlcXVpcmVkIGVuICE9PSBibiBidXQgdGhhdCBkb2Vzbid0IHJlYWxseSBnYWluIG11Y2ggcGVyZm9ybWFuY2UgYW5kIGl0IHByZXZlbnRzIF9wYXJzZVRvUHJveHkoKSBmcm9tIHdvcmtpbmcgcHJvcGVybHkgaWYgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIG1hdGNoIGJ1dCBuZWVkIHRvIGdldCB0d2VlbmVkIGJ5IGFuIGV4dGVybmFsIHBsdWdpbiBhbnl3YXkuIEZvciBleGFtcGxlLCBhIGJlemllciB0d2VlbiB3aGVyZSB0aGUgdGFyZ2V0IHN0YXJ0cyBhdCBsZWZ0OjAgYW5kIGhhcyB0aGVzZSBwb2ludHM6IFt7bGVmdDo1MH0se2xlZnQ6MH1dIHdvdWxkbid0IHdvcmsgcHJvcGVybHkgYmVjYXVzZSB3aGVuIHBhcnNpbmcgdGhlIGxhc3QgcG9pbnQsIGl0J2QgbWF0Y2ggdGhlIGZpcnN0IChjdXJyZW50KSBvbmUgYW5kIGEgbm9uLXR3ZWVuaW5nIENTU1Byb3BUd2VlbiB3b3VsZCBiZSByZWNvcmRlZCB3aGVuIHdlIGFjdHVhbGx5IG5lZWQgYSBub3JtYWwgdHdlZW4gKHR5cGU6MCkgc28gdGhhdCB0aGluZ3MgZ2V0IHVwZGF0ZWQgZHVyaW5nIHRoZSB0d2VlbiBwcm9wZXJseS5cblx0XHRcdFx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBwLCBibiwgZW4gLSBibiwgcHQsIDAsIHAsIChfYXV0b1JvdW5kICE9PSBmYWxzZSAmJiAoZXNmeCA9PT0gXCJweFwiIHx8IHAgPT09IFwiekluZGV4XCIpKSwgMCwgYnMsIGVzKTtcblx0XHRcdFx0XHRcdFx0cHQueHMwID0gZXNmeDtcblx0XHRcdFx0XHRcdFx0Ly9ERUJVRzogX2xvZyhcInR3ZWVuIFwiK3ArXCIgZnJvbSBcIitwdC5iK1wiIChcIitibitlc2Z4K1wiKSB0byBcIitwdC5lK1wiIHdpdGggc3VmZml4OiBcIitwdC54czApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChzdHlsZVtwXSA9PT0gdW5kZWZpbmVkIHx8ICFlcyAmJiAoZXMgKyBcIlwiID09PSBcIk5hTlwiIHx8IGVzID09IG51bGwpKSB7XG5cdFx0XHRcdFx0XHRcdF9sb2coXCJpbnZhbGlkIFwiICsgcCArIFwiIHR3ZWVuIHZhbHVlOiBcIiArIHZhcnNbcF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBwLCBlbiB8fCBibiB8fCAwLCAwLCBwdCwgLTEsIHAsIGZhbHNlLCAwLCBicywgZXMpO1xuXHRcdFx0XHRcdFx0XHRwdC54czAgPSAoZXMgPT09IFwibm9uZVwiICYmIChwID09PSBcImRpc3BsYXlcIiB8fCBwLmluZGV4T2YoXCJTdHlsZVwiKSAhPT0gLTEpKSA/IGJzIDogZXM7IC8vaW50ZXJtZWRpYXRlIHZhbHVlIHNob3VsZCB0eXBpY2FsbHkgYmUgc2V0IGltbWVkaWF0ZWx5IChlbmQgdmFsdWUpIGV4Y2VwdCBmb3IgXCJkaXNwbGF5XCIgb3IgdGhpbmdzIGxpa2UgYm9yZGVyVG9wU3R5bGUsIGJvcmRlckJvdHRvbVN0eWxlLCBldGMuIHdoaWNoIHNob3VsZCB1c2UgdGhlIGJlZ2lubmluZyB2YWx1ZSBkdXJpbmcgdGhlIHR3ZWVuLlxuXHRcdFx0XHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwibm9uLXR3ZWVuaW5nIHZhbHVlIFwiK3ArXCI6IFwiK3B0LnhzMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwbHVnaW4pIGlmIChwdCAmJiAhcHQucGx1Z2luKSB7XG5cdFx0XHRcdFx0cHQucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fTtcblxuXG5cdFx0Ly9nZXRzIGNhbGxlZCBldmVyeSB0aW1lIHRoZSB0d2VlbiB1cGRhdGVzLCBwYXNzaW5nIHRoZSBuZXcgcmF0aW8gKHR5cGljYWxseSBhIHZhbHVlIGJldHdlZW4gMCBhbmQgMSwgYnV0IG5vdCBhbHdheXMgKGZvciBleGFtcGxlLCBpZiBhbiBFbGFzdGljLmVhc2VPdXQgaXMgdXNlZCwgdGhlIHZhbHVlIGNhbiBqdW1wIGFib3ZlIDEgbWlkLXR3ZWVuKS4gSXQgd2lsbCBhbHdheXMgc3RhcnQgYW5kIDAgYW5kIGVuZCBhdCAxLlxuXHRcdHAuc2V0UmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHR2YXIgcHQgPSB0aGlzLl9maXJzdFBULFxuXHRcdFx0XHRtaW4gPSAwLjAwMDAwMSxcblx0XHRcdFx0dmFsLCBzdHIsIGk7XG5cdFx0XHQvL2F0IHRoZSBlbmQgb2YgdGhlIHR3ZWVuLCB3ZSBzZXQgdGhlIHZhbHVlcyB0byBleGFjdGx5IHdoYXQgd2UgcmVjZWl2ZWQgaW4gb3JkZXIgdG8gbWFrZSBzdXJlIG5vbi10d2VlbmluZyB2YWx1ZXMgKGxpa2UgXCJwb3NpdGlvblwiIG9yIFwiZmxvYXRcIiBvciB3aGF0ZXZlcikgYXJlIHNldCBhbmQgc28gdGhhdCBpZiB0aGUgYmVnaW5uaW5nL2VuZGluZyBzdWZmaXhlcyAodW5pdHMpIGRpZG4ndCBtYXRjaCBhbmQgd2Ugbm9ybWFsaXplZCB0byBweCwgdGhlIHZhbHVlIHRoYXQgdGhlIHVzZXIgcGFzc2VkIGluIGlzIHVzZWQgaGVyZS4gV2UgY2hlY2sgdG8gc2VlIGlmIHRoZSB0d2VlbiBpcyBhdCBpdHMgYmVnaW5uaW5nIGluIGNhc2UgaXQncyBhIGZyb20oKSB0d2VlbiBpbiB3aGljaCBjYXNlIHRoZSByYXRpbyB3aWxsIGFjdHVhbGx5IGdvIGZyb20gMSB0byAwIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgdHdlZW4gKGJhY2t3YXJkcykuXG5cdFx0XHRpZiAodiA9PT0gMSAmJiAodGhpcy5fdHdlZW4uX3RpbWUgPT09IHRoaXMuX3R3ZWVuLl9kdXJhdGlvbiB8fCB0aGlzLl90d2Vlbi5fdGltZSA9PT0gMCkpIHtcblx0XHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdFx0aWYgKHB0LnR5cGUgIT09IDIpIHtcblx0XHRcdFx0XHRcdGlmIChwdC5yICYmIHB0LnR5cGUgIT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdHZhbCA9IE1hdGgucm91bmQocHQucyArIHB0LmMpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIXB0LnR5cGUpIHtcblx0XHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gdmFsICsgcHQueHMwO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LnR5cGUgPT09IDEpIHsgLy9jb21wbGV4IHZhbHVlIChvbmUgdGhhdCB0eXBpY2FsbHkgaGFzIG11bHRpcGxlIG51bWJlcnMgaW5zaWRlIGEgc3RyaW5nLCBsaWtlIFwicmVjdCg1cHgsMTBweCwyMHB4LDI1cHgpXCJcblx0XHRcdFx0XHRcdFx0XHRpID0gcHQubDtcblx0XHRcdFx0XHRcdFx0XHRzdHIgPSBwdC54czAgKyB2YWwgKyBwdC54czE7XG5cdFx0XHRcdFx0XHRcdFx0Zm9yIChpID0gMTsgaSA8IHB0Lmw7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RyICs9IHB0W1wieG5cIitpXSArIHB0W1wieHNcIisoaSsxKV07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBzdHI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC5lO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwdC5zZXRSYXRpbyh2KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKHYgfHwgISh0aGlzLl90d2Vlbi5fdGltZSA9PT0gdGhpcy5fdHdlZW4uX2R1cmF0aW9uIHx8IHRoaXMuX3R3ZWVuLl90aW1lID09PSAwKSB8fCB0aGlzLl90d2Vlbi5fcmF3UHJldlRpbWUgPT09IC0wLjAwMDAwMSkge1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHR2YWwgPSBwdC5jICogdiArIHB0LnM7XG5cdFx0XHRcdFx0aWYgKHB0LnIpIHtcblx0XHRcdFx0XHRcdHZhbCA9IE1hdGgucm91bmQodmFsKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbCA8IG1pbikgaWYgKHZhbCA+IC1taW4pIHtcblx0XHRcdFx0XHRcdHZhbCA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghcHQudHlwZSkge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHZhbCArIHB0LnhzMDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LnR5cGUgPT09IDEpIHsgLy9jb21wbGV4IHZhbHVlIChvbmUgdGhhdCB0eXBpY2FsbHkgaGFzIG11bHRpcGxlIG51bWJlcnMgaW5zaWRlIGEgc3RyaW5nLCBsaWtlIFwicmVjdCg1cHgsMTBweCwyMHB4LDI1cHgpXCJcblx0XHRcdFx0XHRcdGkgPSBwdC5sO1xuXHRcdFx0XHRcdFx0aWYgKGkgPT09IDIpIHtcblx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnhzMCArIHZhbCArIHB0LnhzMSArIHB0LnhuMSArIHB0LnhzMjtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaSA9PT0gMykge1xuXHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQueHMwICsgdmFsICsgcHQueHMxICsgcHQueG4xICsgcHQueHMyICsgcHQueG4yICsgcHQueHMzO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChpID09PSA0KSB7XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC54czAgKyB2YWwgKyBwdC54czEgKyBwdC54bjEgKyBwdC54czIgKyBwdC54bjIgKyBwdC54czMgKyBwdC54bjMgKyBwdC54czQ7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGkgPT09IDUpIHtcblx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnhzMCArIHZhbCArIHB0LnhzMSArIHB0LnhuMSArIHB0LnhzMiArIHB0LnhuMiArIHB0LnhzMyArIHB0LnhuMyArIHB0LnhzNCArIHB0LnhuNCArIHB0LnhzNTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHN0ciA9IHB0LnhzMCArIHZhbCArIHB0LnhzMTtcblx0XHRcdFx0XHRcdFx0Zm9yIChpID0gMTsgaSA8IHB0Lmw7IGkrKykge1xuXHRcdFx0XHRcdFx0XHRcdHN0ciArPSBwdFtcInhuXCIraV0gKyBwdFtcInhzXCIrKGkrMSldO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBzdHI7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LnR5cGUgPT09IC0xKSB7IC8vbm9uLXR3ZWVuaW5nIHZhbHVlXG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQueHMwO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwdC5zZXRSYXRpbykgeyAvL2N1c3RvbSBzZXRSYXRpbygpIGZvciB0aGluZ3MgbGlrZSBTcGVjaWFsUHJvcHMsIGV4dGVybmFsIHBsdWdpbnMsIGV0Yy5cblx0XHRcdFx0XHRcdHB0LnNldFJhdGlvKHYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vaWYgdGhlIHR3ZWVuIGlzIHJldmVyc2VkIGFsbCB0aGUgd2F5IGJhY2sgdG8gdGhlIGJlZ2lubmluZywgd2UgbmVlZCB0byByZXN0b3JlIHRoZSBvcmlnaW5hbCB2YWx1ZXMgd2hpY2ggbWF5IGhhdmUgZGlmZmVyZW50IHVuaXRzIChsaWtlICUgaW5zdGVhZCBvZiBweCBvciBlbSBvciB3aGF0ZXZlcikuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRpZiAocHQudHlwZSAhPT0gMikge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LmI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB0LnNldFJhdGlvKHYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICogRm9yY2VzIHJlbmRlcmluZyBvZiB0aGUgdGFyZ2V0J3MgdHJhbnNmb3JtcyAocm90YXRpb24sIHNjYWxlLCBldGMuKSB3aGVuZXZlciB0aGUgQ1NTUGx1Z2luJ3Mgc2V0UmF0aW8oKSBpcyBjYWxsZWQuXG5cdFx0ICogQmFzaWNhbGx5LCB0aGlzIHRlbGxzIHRoZSBDU1NQbHVnaW4gdG8gY3JlYXRlIGEgQ1NTUHJvcFR3ZWVuICh0eXBlIDIpIGFmdGVyIGluc3RhbnRpYXRpb24gdGhhdCBydW5zIGxhc3QgaW4gdGhlIGxpbmtlZFxuXHRcdCAqIGxpc3QgYW5kIGNhbGxzIHRoZSBhcHByb3ByaWF0ZSAoM0Qgb3IgMkQpIHJlbmRlcmluZyBmdW5jdGlvbi4gV2Ugc2VwYXJhdGUgdGhpcyBpbnRvIGl0cyBvd24gbWV0aG9kIHNvIHRoYXQgd2UgY2FuIGNhbGxcblx0XHQgKiBpdCBmcm9tIG90aGVyIHBsdWdpbnMgbGlrZSBCZXppZXJQbHVnaW4gaWYsIGZvciBleGFtcGxlLCBpdCBuZWVkcyB0byBhcHBseSBhbiBhdXRvUm90YXRpb24gYW5kIHRoaXMgQ1NTUGx1Z2luXG5cdFx0ICogZG9lc24ndCBoYXZlIGFueSB0cmFuc2Zvcm0tcmVsYXRlZCBwcm9wZXJ0aWVzIG9mIGl0cyBvd24uIFlvdSBjYW4gY2FsbCB0aGlzIG1ldGhvZCBhcyBtYW55IHRpbWVzIGFzIHlvdVxuXHRcdCAqIHdhbnQgYW5kIGl0IHdvbid0IGNyZWF0ZSBkdXBsaWNhdGUgQ1NTUHJvcFR3ZWVucy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gdGhyZWVEIGlmIHRydWUsIGl0IHNob3VsZCBhcHBseSAzRCB0d2VlbnMgKG90aGVyd2lzZSwganVzdCAyRCBvbmVzIGFyZSBmaW5lIGFuZCB0eXBpY2FsbHkgZmFzdGVyKVxuXHRcdCAqL1xuXHRcdHAuX2VuYWJsZVRyYW5zZm9ybXMgPSBmdW5jdGlvbih0aHJlZUQpIHtcblx0XHRcdHRoaXMuX3RyYW5zZm9ybSA9IHRoaXMuX3RyYW5zZm9ybSB8fCBfZ2V0VHJhbnNmb3JtKHRoaXMuX3RhcmdldCwgX2NzLCB0cnVlKTsgLy9lbnN1cmVzIHRoYXQgdGhlIGVsZW1lbnQgaGFzIGEgX2dzVHJhbnNmb3JtIHByb3BlcnR5IHdpdGggdGhlIGFwcHJvcHJpYXRlIHZhbHVlcy5cblx0XHRcdHRoaXMuX3RyYW5zZm9ybVR5cGUgPSAoISh0aGlzLl90cmFuc2Zvcm0uc3ZnICYmIF91c2VTVkdUcmFuc2Zvcm1BdHRyKSAmJiAodGhyZWVEIHx8IHRoaXMuX3RyYW5zZm9ybVR5cGUgPT09IDMpKSA/IDMgOiAyO1xuXHRcdH07XG5cblx0XHR2YXIgbGF6eVNldCA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdHRoaXMudFt0aGlzLnBdID0gdGhpcy5lO1xuXHRcdFx0dGhpcy5kYXRhLl9saW5rQ1NTUCh0aGlzLCB0aGlzLl9uZXh0LCBudWxsLCB0cnVlKTsgLy93ZSBwdXJwb3NlZnVsbHkga2VlcCB0aGlzLl9uZXh0IGV2ZW4gdGhvdWdoIGl0J2QgbWFrZSBzZW5zZSB0byBudWxsIGl0LCBidXQgdGhpcyBpcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiwgYXMgdGhpcyBoYXBwZW5zIGR1cmluZyB0aGUgd2hpbGUgKHB0KSB7fSBsb29wIGluIHNldFJhdGlvKCkgYXQgdGhlIGJvdHRvbSBvZiB3aGljaCBpdCBzZXRzIHB0ID0gcHQuX25leHQsIHNvIGlmIHdlIG51bGwgaXQsIHRoZSBsaW5rZWQgbGlzdCB3aWxsIGJlIGJyb2tlbiBpbiB0aGF0IGxvb3AuXG5cdFx0fTtcblx0XHQvKiogQHByaXZhdGUgR2l2ZXMgdXMgYSB3YXkgdG8gc2V0IGEgdmFsdWUgb24gdGhlIGZpcnN0IHJlbmRlciAoYW5kIG9ubHkgdGhlIGZpcnN0IHJlbmRlcikuICoqL1xuXHRcdHAuX2FkZExhenlTZXQgPSBmdW5jdGlvbih0LCBwLCB2KSB7XG5cdFx0XHR2YXIgcHQgPSB0aGlzLl9maXJzdFBUID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCB0aGlzLl9maXJzdFBULCAyKTtcblx0XHRcdHB0LmUgPSB2O1xuXHRcdFx0cHQuc2V0UmF0aW8gPSBsYXp5U2V0O1xuXHRcdFx0cHQuZGF0YSA9IHRoaXM7XG5cdFx0fTtcblxuXHRcdC8qKiBAcHJpdmF0ZSAqKi9cblx0XHRwLl9saW5rQ1NTUCA9IGZ1bmN0aW9uKHB0LCBuZXh0LCBwcmV2LCByZW1vdmUpIHtcblx0XHRcdGlmIChwdCkge1xuXHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdG5leHQuX3ByZXYgPSBwdDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHQuX25leHQpIHtcblx0XHRcdFx0XHRwdC5fbmV4dC5fcHJldiA9IHB0Ll9wcmV2O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwdC5fcHJldikge1xuXHRcdFx0XHRcdHB0Ll9wcmV2Ll9uZXh0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fZmlyc3RQVCA9PT0gcHQpIHtcblx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0cmVtb3ZlID0gdHJ1ZTsgLy9qdXN0IHRvIHByZXZlbnQgcmVzZXR0aW5nIHRoaXMuX2ZpcnN0UFQgNSBsaW5lcyBkb3duIGluIGNhc2UgcHQuX25leHQgaXMgbnVsbC4gKG9wdGltaXplZCBmb3Igc3BlZWQpXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHByZXYpIHtcblx0XHRcdFx0XHRwcmV2Ll9uZXh0ID0gcHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIXJlbW92ZSAmJiB0aGlzLl9maXJzdFBUID09PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHB0Ll9uZXh0ID0gbmV4dDtcblx0XHRcdFx0cHQuX3ByZXYgPSBwcmV2O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH07XG5cblx0XHRwLl9tb2QgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBwdCA9IHRoaXMuX2ZpcnN0UFQ7XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHR5cGVvZihsb29rdXBbcHQucF0pID09PSBcImZ1bmN0aW9uXCIgJiYgbG9va3VwW3B0LnBdID09PSBNYXRoLnJvdW5kKSB7IC8vb25seSBnZXRzIGNhbGxlZCBieSBSb3VuZFByb3BzUGx1Z2luIChNb2RpZnlQbHVnaW4gbWFuYWdlcyBhbGwgdGhlIHJlbmRlcmluZyBpbnRlcm5hbGx5IGZvciBDU1NQbHVnaW4gcHJvcGVydGllcyB0aGF0IG5lZWQgbW9kaWZpY2F0aW9uKS4gUmVtZW1iZXIsIHdlIGhhbmRsZSByb3VuZGluZyBhIGJpdCBkaWZmZXJlbnRseSBpbiB0aGlzIHBsdWdpbiBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgbGV2ZXJhZ2luZyBcInJcIiBhcyBhbiBpbmRpY2F0b3IgdGhhdCB0aGUgdmFsdWUgc2hvdWxkIGJlIHJvdW5kZWQgaW50ZXJuYWxseS4uXG5cdFx0XHRcdFx0cHQuciA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly93ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGlmIGFscGhhIG9yIGF1dG9BbHBoYSBpcyBraWxsZWQsIG9wYWNpdHkgaXMgdG9vLiBBbmQgYXV0b0FscGhhIGFmZmVjdHMgdGhlIFwidmlzaWJpbGl0eVwiIHByb3BlcnR5LlxuXHRcdHAuX2tpbGwgPSBmdW5jdGlvbihsb29rdXApIHtcblx0XHRcdHZhciBjb3B5ID0gbG9va3VwLFxuXHRcdFx0XHRwdCwgcCwgeGZpcnN0O1xuXHRcdFx0aWYgKGxvb2t1cC5hdXRvQWxwaGEgfHwgbG9va3VwLmFscGhhKSB7XG5cdFx0XHRcdGNvcHkgPSB7fTtcblx0XHRcdFx0Zm9yIChwIGluIGxvb2t1cCkgeyAvL2NvcHkgdGhlIGxvb2t1cCBzbyB0aGF0IHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgb3JpZ2luYWwgd2hpY2ggbWF5IGJlIHBhc3NlZCBlbHNld2hlcmUuXG5cdFx0XHRcdFx0Y29weVtwXSA9IGxvb2t1cFtwXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb3B5Lm9wYWNpdHkgPSAxO1xuXHRcdFx0XHRpZiAoY29weS5hdXRvQWxwaGEpIHtcblx0XHRcdFx0XHRjb3B5LnZpc2liaWxpdHkgPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAobG9va3VwLmNsYXNzTmFtZSAmJiAocHQgPSB0aGlzLl9jbGFzc05hbWVQVCkpIHsgLy9mb3IgY2xhc3NOYW1lIHR3ZWVucywgd2UgbmVlZCB0byBraWxsIGFueSBhc3NvY2lhdGVkIENTU1Byb3BUd2VlbnMgdG9vOyBhIGxpbmtlZCBsaXN0IHN0YXJ0cyBhdCB0aGUgY2xhc3NOYW1lJ3MgXCJ4Zmlyc3RcIi5cblx0XHRcdFx0eGZpcnN0ID0gcHQueGZpcnN0O1xuXHRcdFx0XHRpZiAoeGZpcnN0ICYmIHhmaXJzdC5fcHJldikge1xuXHRcdFx0XHRcdHRoaXMuX2xpbmtDU1NQKHhmaXJzdC5fcHJldiwgcHQuX25leHQsIHhmaXJzdC5fcHJldi5fcHJldik7IC8vYnJlYWsgb2ZmIHRoZSBwcmV2XG5cdFx0XHRcdH0gZWxzZSBpZiAoeGZpcnN0ID09PSB0aGlzLl9maXJzdFBUKSB7XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwdC5fbmV4dCkge1xuXHRcdFx0XHRcdHRoaXMuX2xpbmtDU1NQKHB0Ll9uZXh0LCBwdC5fbmV4dC5fbmV4dCwgeGZpcnN0Ll9wcmV2KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLl9jbGFzc05hbWVQVCA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRwdCA9IHRoaXMuX2ZpcnN0UFQ7XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHB0LnBsdWdpbiAmJiBwdC5wbHVnaW4gIT09IHAgJiYgcHQucGx1Z2luLl9raWxsKSB7IC8vZm9yIHBsdWdpbnMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIENTU1BsdWdpbiwgd2Ugc2hvdWxkIG5vdGlmeSB0aGVtIG9mIHRoZSBraWxsLlxuXHRcdFx0XHRcdHB0LnBsdWdpbi5fa2lsbChsb29rdXApO1xuXHRcdFx0XHRcdHAgPSBwdC5wbHVnaW47XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBUd2VlblBsdWdpbi5wcm90b3R5cGUuX2tpbGwuY2FsbCh0aGlzLCBjb3B5KTtcblx0XHR9O1xuXG5cblxuXHRcdC8vdXNlZCBieSBjYXNjYWRlVG8oKSBmb3IgZ2F0aGVyaW5nIGFsbCB0aGUgc3R5bGUgcHJvcGVydGllcyBvZiBlYWNoIGNoaWxkIGVsZW1lbnQgaW50byBhbiBhcnJheSBmb3IgY29tcGFyaXNvbi5cblx0XHR2YXIgX2dldENoaWxkU3R5bGVzID0gZnVuY3Rpb24oZSwgcHJvcHMsIHRhcmdldHMpIHtcblx0XHRcdFx0dmFyIGNoaWxkcmVuLCBpLCBjaGlsZCwgdHlwZTtcblx0XHRcdFx0aWYgKGUuc2xpY2UpIHtcblx0XHRcdFx0XHRpID0gZS5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRfZ2V0Q2hpbGRTdHlsZXMoZVtpXSwgcHJvcHMsIHRhcmdldHMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2hpbGRyZW4gPSBlLmNoaWxkTm9kZXM7XG5cdFx0XHRcdGkgPSBjaGlsZHJlbi5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGNoaWxkID0gY2hpbGRyZW5baV07XG5cdFx0XHRcdFx0dHlwZSA9IGNoaWxkLnR5cGU7XG5cdFx0XHRcdFx0aWYgKGNoaWxkLnN0eWxlKSB7XG5cdFx0XHRcdFx0XHRwcm9wcy5wdXNoKF9nZXRBbGxTdHlsZXMoY2hpbGQpKTtcblx0XHRcdFx0XHRcdGlmICh0YXJnZXRzKSB7XG5cdFx0XHRcdFx0XHRcdHRhcmdldHMucHVzaChjaGlsZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgodHlwZSA9PT0gMSB8fCB0eXBlID09PSA5IHx8IHR5cGUgPT09IDExKSAmJiBjaGlsZC5jaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0X2dldENoaWxkU3R5bGVzKGNoaWxkLCBwcm9wcywgdGFyZ2V0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogVHlwaWNhbGx5IG9ubHkgdXNlZnVsIGZvciBjbGFzc05hbWUgdHdlZW5zIHRoYXQgbWF5IGFmZmVjdCBjaGlsZCBlbGVtZW50cywgdGhpcyBtZXRob2QgY3JlYXRlcyBhIFR3ZWVuTGl0ZVxuXHRcdCAqIGFuZCB0aGVuIGNvbXBhcmVzIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIG9mIGFsbCB0aGUgdGFyZ2V0J3MgY2hpbGQgZWxlbWVudHMgYXQgdGhlIHR3ZWVuJ3Mgc3RhcnQgYW5kIGVuZCwgYW5kXG5cdFx0ICogaWYgYW55IGFyZSBkaWZmZXJlbnQsIGl0IGFsc28gY3JlYXRlcyB0d2VlbnMgZm9yIHRob3NlIGFuZCByZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgQUxMIG9mIHRoZSByZXN1bHRpbmdcblx0XHQgKiB0d2VlbnMgKHNvIHRoYXQgeW91IGNhbiBlYXNpbHkgYWRkKCkgdGhlbSB0byBhIFRpbWVsaW5lTGl0ZSwgZm9yIGV4YW1wbGUpLiBUaGUgcmVhc29uIHRoaXMgZnVuY3Rpb25hbGl0eSBpc1xuXHRcdCAqIHdyYXBwZWQgaW50byBhIHNlcGFyYXRlIHN0YXRpYyBtZXRob2Qgb2YgQ1NTUGx1Z2luIGluc3RlYWQgb2YgYmVpbmcgaW50ZWdyYXRlZCBpbnRvIGFsbCByZWd1bGFyIGNsYXNzTmFtZSB0d2VlbnNcblx0XHQgKiBpcyBiZWNhdXNlIGl0IGNyZWF0ZXMgZW50aXJlbHkgbmV3IHR3ZWVucyB0aGF0IG1heSBoYXZlIGNvbXBsZXRlbHkgZGlmZmVyZW50IHRhcmdldHMgdGhhbiB0aGUgb3JpZ2luYWwgdHdlZW4sXG5cdFx0ICogc28gaWYgdGhleSB3ZXJlIGFsbCBsdW1wZWQgaW50byB0aGUgb3JpZ2luYWwgdHdlZW4gaW5zdGFuY2UsIGl0IHdvdWxkIGJlIGluY29uc2lzdGVudCB3aXRoIHRoZSByZXN0IG9mIHRoZSBBUElcblx0XHQgKiBhbmQgaXQgd291bGQgY3JlYXRlIG90aGVyIHByb2JsZW1zLiBGb3IgZXhhbXBsZTpcblx0XHQgKiAgLSBJZiBJIGNyZWF0ZSBhIHR3ZWVuIG9mIGVsZW1lbnRBLCB0aGF0IHR3ZWVuIGluc3RhbmNlIG1heSBzdWRkZW5seSBjaGFuZ2UgaXRzIHRhcmdldCB0byBpbmNsdWRlIDUwIG90aGVyIGVsZW1lbnRzICh1bmludHVpdGl2ZSBpZiBJIHNwZWNpZmljYWxseSBkZWZpbmVkIHRoZSB0YXJnZXQgSSB3YW50ZWQpXG5cdFx0ICogIC0gV2UgY2FuJ3QganVzdCBjcmVhdGUgbmV3IGluZGVwZW5kZW50IHR3ZWVucyBiZWNhdXNlIG90aGVyd2lzZSwgd2hhdCBoYXBwZW5zIGlmIHRoZSBvcmlnaW5hbC9wYXJlbnQgdHdlZW4gaXMgcmV2ZXJzZWQgb3IgcGF1c2Ugb3IgZHJvcHBlZCBpbnRvIGEgVGltZWxpbmVMaXRlIGZvciB0aWdodCBjb250cm9sPyBZb3UnZCBleHBlY3QgdGhhdCB0d2VlbidzIGJlaGF2aW9yIHRvIGFmZmVjdCBhbGwgdGhlIG90aGVycy5cblx0XHQgKiAgLSBBbmFseXppbmcgZXZlcnkgc3R5bGUgcHJvcGVydHkgb2YgZXZlcnkgY2hpbGQgYmVmb3JlIGFuZCBhZnRlciB0aGUgdHdlZW4gaXMgYW4gZXhwZW5zaXZlIG9wZXJhdGlvbiB3aGVuIHRoZXJlIGFyZSBtYW55IGNoaWxkcmVuLCBzbyB0aGlzIGJlaGF2aW9yIHNob3VsZG4ndCBiZSBpbXBvc2VkIG9uIGFsbCBjbGFzc05hbWUgdHdlZW5zIGJ5IGRlZmF1bHQsIGVzcGVjaWFsbHkgc2luY2UgaXQncyBwcm9iYWJseSByYXJlIHRoYXQgdGhpcyBleHRyYSBmdW5jdGlvbmFsaXR5IGlzIG5lZWRlZC5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgb2JqZWN0IHRvIGJlIHR3ZWVuZWRcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gRHVyYXRpb24gaW4gc2Vjb25kcyAob3IgZnJhbWVzIGZvciBmcmFtZXMtYmFzZWQgdHdlZW5zKVxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgZW5kIHZhbHVlcywgbGlrZSB7Y2xhc3NOYW1lOlwibmV3Q2xhc3NcIiwgZWFzZTpMaW5lYXIuZWFzZU5vbmV9XG5cdFx0ICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIFR3ZWVuTGl0ZSBpbnN0YW5jZXNcblx0XHQgKi9cblx0XHRDU1NQbHVnaW4uY2FzY2FkZVRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0dmFyIHR3ZWVuID0gVHdlZW5MaXRlLnRvKHRhcmdldCwgZHVyYXRpb24sIHZhcnMpLFxuXHRcdFx0XHRyZXN1bHRzID0gW3R3ZWVuXSxcblx0XHRcdFx0YiA9IFtdLFxuXHRcdFx0XHRlID0gW10sXG5cdFx0XHRcdHRhcmdldHMgPSBbXSxcblx0XHRcdFx0X3Jlc2VydmVkUHJvcHMgPSBUd2VlbkxpdGUuX2ludGVybmFscy5yZXNlcnZlZFByb3BzLFxuXHRcdFx0XHRpLCBkaWZzLCBwLCBmcm9tO1xuXHRcdFx0dGFyZ2V0ID0gdHdlZW4uX3RhcmdldHMgfHwgdHdlZW4udGFyZ2V0O1xuXHRcdFx0X2dldENoaWxkU3R5bGVzKHRhcmdldCwgYiwgdGFyZ2V0cyk7XG5cdFx0XHR0d2Vlbi5yZW5kZXIoZHVyYXRpb24sIHRydWUsIHRydWUpO1xuXHRcdFx0X2dldENoaWxkU3R5bGVzKHRhcmdldCwgZSk7XG5cdFx0XHR0d2Vlbi5yZW5kZXIoMCwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHR0d2Vlbi5fZW5hYmxlZCh0cnVlKTtcblx0XHRcdGkgPSB0YXJnZXRzLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRkaWZzID0gX2Nzc0RpZih0YXJnZXRzW2ldLCBiW2ldLCBlW2ldKTtcblx0XHRcdFx0aWYgKGRpZnMuZmlyc3RNUFQpIHtcblx0XHRcdFx0XHRkaWZzID0gZGlmcy5kaWZzO1xuXHRcdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdFx0XHRpZiAoX3Jlc2VydmVkUHJvcHNbcF0pIHtcblx0XHRcdFx0XHRcdFx0ZGlmc1twXSA9IHZhcnNbcF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGZyb20gPSB7fTtcblx0XHRcdFx0XHRmb3IgKHAgaW4gZGlmcykge1xuXHRcdFx0XHRcdFx0ZnJvbVtwXSA9IGJbaV1bcF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJlc3VsdHMucHVzaChUd2VlbkxpdGUuZnJvbVRvKHRhcmdldHNbaV0sIGR1cmF0aW9uLCBmcm9tLCBkaWZzKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0XHRUd2VlblBsdWdpbi5hY3RpdmF0ZShbQ1NTUGx1Z2luXSk7XG5cdFx0cmV0dXJuIENTU1BsdWdpbjtcblxuXHR9LCB0cnVlKTtcblxuXHRcblx0XG5cdFxuXHRcblx0XG5cdFxuXHRcblx0XG5cdFxuXHRcbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBSb3VuZFByb3BzUGx1Z2luXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0KGZ1bmN0aW9uKCkge1xuXG5cdFx0dmFyIFJvdW5kUHJvcHNQbHVnaW4gPSBfZ3NTY29wZS5fZ3NEZWZpbmUucGx1Z2luKHtcblx0XHRcdFx0cHJvcE5hbWU6IFwicm91bmRQcm9wc1wiLFxuXHRcdFx0XHR2ZXJzaW9uOiBcIjEuNi4wXCIsXG5cdFx0XHRcdHByaW9yaXR5OiAtMSxcblx0XHRcdFx0QVBJOiAyLFxuXG5cdFx0XHRcdC8vY2FsbGVkIHdoZW4gdGhlIHR3ZWVuIHJlbmRlcnMgZm9yIHRoZSBmaXJzdCB0aW1lLiBUaGlzIGlzIHdoZXJlIGluaXRpYWwgdmFsdWVzIHNob3VsZCBiZSByZWNvcmRlZCBhbmQgYW55IHNldHVwIHJvdXRpbmVzIHNob3VsZCBydW4uXG5cdFx0XHRcdGluaXQ6IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUsIHR3ZWVuKSB7XG5cdFx0XHRcdFx0dGhpcy5fdHdlZW4gPSB0d2Vlbjtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9KSxcblx0XHRcdF9yb3VuZExpbmtlZExpc3QgPSBmdW5jdGlvbihub2RlKSB7XG5cdFx0XHRcdHdoaWxlIChub2RlKSB7XG5cdFx0XHRcdFx0aWYgKCFub2RlLmYgJiYgIW5vZGUuYmxvYikge1xuXHRcdFx0XHRcdFx0bm9kZS5tID0gTWF0aC5yb3VuZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bm9kZSA9IG5vZGUuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRwID0gUm91bmRQcm9wc1BsdWdpbi5wcm90b3R5cGU7XG5cblx0XHRwLl9vbkluaXRBbGxQcm9wcyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5fdHdlZW4sXG5cdFx0XHRcdHJwID0gKHR3ZWVuLnZhcnMucm91bmRQcm9wcy5qb2luKSA/IHR3ZWVuLnZhcnMucm91bmRQcm9wcyA6IHR3ZWVuLnZhcnMucm91bmRQcm9wcy5zcGxpdChcIixcIiksXG5cdFx0XHRcdGkgPSBycC5sZW5ndGgsXG5cdFx0XHRcdGxvb2t1cCA9IHt9LFxuXHRcdFx0XHRycHQgPSB0d2Vlbi5fcHJvcExvb2t1cC5yb3VuZFByb3BzLFxuXHRcdFx0XHRwcm9wLCBwdCwgbmV4dDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRsb29rdXBbcnBbaV1dID0gTWF0aC5yb3VuZDtcblx0XHRcdH1cblx0XHRcdGkgPSBycC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0cHJvcCA9IHJwW2ldO1xuXHRcdFx0XHRwdCA9IHR3ZWVuLl9maXJzdFBUO1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRuZXh0ID0gcHQuX25leHQ7IC8vcmVjb3JkIGhlcmUsIGJlY2F1c2UgaXQgbWF5IGdldCByZW1vdmVkXG5cdFx0XHRcdFx0aWYgKHB0LnBnKSB7XG5cdFx0XHRcdFx0XHRwdC50Ll9tb2QobG9va3VwKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0Lm4gPT09IHByb3ApIHtcblx0XHRcdFx0XHRcdGlmIChwdC5mID09PSAyICYmIHB0LnQpIHsgLy9hIGJsb2IgKHRleHQgY29udGFpbmluZyBtdWx0aXBsZSBudW1lcmljIHZhbHVlcylcblx0XHRcdFx0XHRcdFx0X3JvdW5kTGlua2VkTGlzdChwdC50Ll9maXJzdFBUKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX2FkZChwdC50LCBwcm9wLCBwdC5zLCBwdC5jKTtcblx0XHRcdFx0XHRcdFx0Ly9yZW1vdmUgZnJvbSBsaW5rZWQgbGlzdFxuXHRcdFx0XHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdFx0XHRcdG5leHQuX3ByZXYgPSBwdC5fcHJldjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocHQuX3ByZXYpIHtcblx0XHRcdFx0XHRcdFx0XHRwdC5fcHJldi5fbmV4dCA9IG5leHQ7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodHdlZW4uX2ZpcnN0UFQgPT09IHB0KSB7XG5cdFx0XHRcdFx0XHRcdFx0dHdlZW4uX2ZpcnN0UFQgPSBuZXh0O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHB0Ll9uZXh0ID0gcHQuX3ByZXYgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHR0d2Vlbi5fcHJvcExvb2t1cFtwcm9wXSA9IHJwdDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBuZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHRcdHAuX2FkZCA9IGZ1bmN0aW9uKHRhcmdldCwgcCwgcywgYykge1xuXHRcdFx0dGhpcy5fYWRkVHdlZW4odGFyZ2V0LCBwLCBzLCBzICsgYywgcCwgTWF0aC5yb3VuZCk7XG5cdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcy5wdXNoKHApO1xuXHRcdH07XG5cblx0fSgpKTtcblxuXG5cblxuXG5cblxuXG5cblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEF0dHJQbHVnaW5cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cdChmdW5jdGlvbigpIHtcblxuXHRcdF9nc1Njb3BlLl9nc0RlZmluZS5wbHVnaW4oe1xuXHRcdFx0cHJvcE5hbWU6IFwiYXR0clwiLFxuXHRcdFx0QVBJOiAyLFxuXHRcdFx0dmVyc2lvbjogXCIwLjYuMFwiLFxuXG5cdFx0XHQvL2NhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxuXHRcdFx0aW5pdDogZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSwgdHdlZW4sIGluZGV4KSB7XG5cdFx0XHRcdHZhciBwLCBlbmQ7XG5cdFx0XHRcdGlmICh0eXBlb2YodGFyZ2V0LnNldEF0dHJpYnV0ZSkgIT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKHAgaW4gdmFsdWUpIHtcblx0XHRcdFx0XHRlbmQgPSB2YWx1ZVtwXTtcblx0XHRcdFx0XHRpZiAodHlwZW9mKGVuZCkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0ZW5kID0gZW5kKGluZGV4LCB0YXJnZXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9hZGRUd2Vlbih0YXJnZXQsIFwic2V0QXR0cmlidXRlXCIsIHRhcmdldC5nZXRBdHRyaWJ1dGUocCkgKyBcIlwiLCBlbmQgKyBcIlwiLCBwLCBmYWxzZSwgcCk7XG5cdFx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMucHVzaChwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdH0pO1xuXG5cdH0oKSk7XG5cblxuXG5cblxuXG5cblxuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEaXJlY3Rpb25hbFJvdGF0aW9uUGx1Z2luXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblx0X2dzU2NvcGUuX2dzRGVmaW5lLnBsdWdpbih7XG5cdFx0cHJvcE5hbWU6IFwiZGlyZWN0aW9uYWxSb3RhdGlvblwiLFxuXHRcdHZlcnNpb246IFwiMC4zLjBcIixcblx0XHRBUEk6IDIsXG5cblx0XHQvL2NhbGxlZCB3aGVuIHRoZSB0d2VlbiByZW5kZXJzIGZvciB0aGUgZmlyc3QgdGltZS4gVGhpcyBpcyB3aGVyZSBpbml0aWFsIHZhbHVlcyBzaG91bGQgYmUgcmVjb3JkZWQgYW5kIGFueSBzZXR1cCByb3V0aW5lcyBzaG91bGQgcnVuLlxuXHRcdGluaXQ6IGZ1bmN0aW9uKHRhcmdldCwgdmFsdWUsIHR3ZWVuLCBpbmRleCkge1xuXHRcdFx0aWYgKHR5cGVvZih2YWx1ZSkgIT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0dmFsdWUgPSB7cm90YXRpb246dmFsdWV9O1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5maW5hbHMgPSB7fTtcblx0XHRcdHZhciBjYXAgPSAodmFsdWUudXNlUmFkaWFucyA9PT0gdHJ1ZSkgPyBNYXRoLlBJICogMiA6IDM2MCxcblx0XHRcdFx0bWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdHAsIHYsIHN0YXJ0LCBlbmQsIGRpZiwgc3BsaXQ7XG5cdFx0XHRmb3IgKHAgaW4gdmFsdWUpIHtcblx0XHRcdFx0aWYgKHAgIT09IFwidXNlUmFkaWFuc1wiKSB7XG5cdFx0XHRcdFx0ZW5kID0gdmFsdWVbcF07XG5cdFx0XHRcdFx0aWYgKHR5cGVvZihlbmQpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdGVuZCA9IGVuZChpbmRleCwgdGFyZ2V0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c3BsaXQgPSAoZW5kICsgXCJcIikuc3BsaXQoXCJfXCIpO1xuXHRcdFx0XHRcdHYgPSBzcGxpdFswXTtcblx0XHRcdFx0XHRzdGFydCA9IHBhcnNlRmxvYXQoICh0eXBlb2YodGFyZ2V0W3BdKSAhPT0gXCJmdW5jdGlvblwiKSA/IHRhcmdldFtwXSA6IHRhcmdldFsgKChwLmluZGV4T2YoXCJzZXRcIikgfHwgdHlwZW9mKHRhcmdldFtcImdldFwiICsgcC5zdWJzdHIoMyldKSAhPT0gXCJmdW5jdGlvblwiKSA/IHAgOiBcImdldFwiICsgcC5zdWJzdHIoMykpIF0oKSApO1xuXHRcdFx0XHRcdGVuZCA9IHRoaXMuZmluYWxzW3BdID0gKHR5cGVvZih2KSA9PT0gXCJzdHJpbmdcIiAmJiB2LmNoYXJBdCgxKSA9PT0gXCI9XCIpID8gc3RhcnQgKyBwYXJzZUludCh2LmNoYXJBdCgwKSArIFwiMVwiLCAxMCkgKiBOdW1iZXIodi5zdWJzdHIoMikpIDogTnVtYmVyKHYpIHx8IDA7XG5cdFx0XHRcdFx0ZGlmID0gZW5kIC0gc3RhcnQ7XG5cdFx0XHRcdFx0aWYgKHNwbGl0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0diA9IHNwbGl0LmpvaW4oXCJfXCIpO1xuXHRcdFx0XHRcdFx0aWYgKHYuaW5kZXhPZihcInNob3J0XCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSBkaWYgJSBjYXA7XG5cdFx0XHRcdFx0XHRcdGlmIChkaWYgIT09IGRpZiAlIChjYXAgLyAyKSkge1xuXHRcdFx0XHRcdFx0XHRcdGRpZiA9IChkaWYgPCAwKSA/IGRpZiArIGNhcCA6IGRpZiAtIGNhcDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHYuaW5kZXhPZihcIl9jd1wiKSAhPT0gLTEgJiYgZGlmIDwgMCkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSAoKGRpZiArIGNhcCAqIDk5OTk5OTk5OTkpICUgY2FwKSAtICgoZGlmIC8gY2FwKSB8IDApICogY2FwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2LmluZGV4T2YoXCJjY3dcIikgIT09IC0xICYmIGRpZiA+IDApIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gKChkaWYgLSBjYXAgKiA5OTk5OTk5OTk5KSAlIGNhcCkgLSAoKGRpZiAvIGNhcCkgfCAwKSAqIGNhcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGRpZiA+IG1pbiB8fCBkaWYgPCAtbWluKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9hZGRUd2Vlbih0YXJnZXQsIHAsIHN0YXJ0LCBzdGFydCArIGRpZiwgcCk7XG5cdFx0XHRcdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcy5wdXNoKHApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vY2FsbGVkIGVhY2ggdGltZSB0aGUgdmFsdWVzIHNob3VsZCBiZSB1cGRhdGVkLCBhbmQgdGhlIHJhdGlvIGdldHMgcGFzc2VkIGFzIHRoZSBvbmx5IHBhcmFtZXRlciAodHlwaWNhbGx5IGl0J3MgYSB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEsIGJ1dCBpdCBjYW4gZXhjZWVkIHRob3NlIHdoZW4gdXNpbmcgYW4gZWFzZSBsaWtlIEVsYXN0aWMuZWFzZU91dCBvciBCYWNrLmVhc2VPdXQsIGV0Yy4pXG5cdFx0c2V0OiBmdW5jdGlvbihyYXRpbykge1xuXHRcdFx0dmFyIHB0O1xuXHRcdFx0aWYgKHJhdGlvICE9PSAxKSB7XG5cdFx0XHRcdHRoaXMuX3N1cGVyLnNldFJhdGlvLmNhbGwodGhpcywgcmF0aW8pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHQgPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRpZiAocHQuZikge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSh0aGlzLmZpbmFsc1twdC5wXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSB0aGlzLmZpbmFsc1twdC5wXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHR9KS5fYXV0b0NTUyA9IHRydWU7XG5cblxuXG5cblxuXG5cblx0XG5cdFxuXHRcblx0XG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRWFzZVBhY2tcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRfZ3NTY29wZS5fZ3NEZWZpbmUoXCJlYXNpbmcuQmFja1wiLCBbXCJlYXNpbmcuRWFzZVwiXSwgZnVuY3Rpb24oRWFzZSkge1xuXHRcdFxuXHRcdHZhciB3ID0gKF9nc1Njb3BlLkdyZWVuU29ja0dsb2JhbHMgfHwgX2dzU2NvcGUpLFxuXHRcdFx0Z3MgPSB3LmNvbS5ncmVlbnNvY2ssXG5cdFx0XHRfMlBJID0gTWF0aC5QSSAqIDIsXG5cdFx0XHRfSEFMRl9QSSA9IE1hdGguUEkgLyAyLFxuXHRcdFx0X2NsYXNzID0gZ3MuX2NsYXNzLFxuXHRcdFx0X2NyZWF0ZSA9IGZ1bmN0aW9uKG4sIGYpIHtcblx0XHRcdFx0dmFyIEMgPSBfY2xhc3MoXCJlYXNpbmcuXCIgKyBuLCBmdW5jdGlvbigpe30sIHRydWUpLFxuXHRcdFx0XHRcdHAgPSBDLnByb3RvdHlwZSA9IG5ldyBFYXNlKCk7XG5cdFx0XHRcdHAuY29uc3RydWN0b3IgPSBDO1xuXHRcdFx0XHRwLmdldFJhdGlvID0gZjtcblx0XHRcdFx0cmV0dXJuIEM7XG5cdFx0XHR9LFxuXHRcdFx0X2Vhc2VSZWcgPSBFYXNlLnJlZ2lzdGVyIHx8IGZ1bmN0aW9uKCl7fSwgLy9wdXQgYW4gZW1wdHkgZnVuY3Rpb24gaW4gcGxhY2UganVzdCBhcyBhIHNhZmV0eSBtZWFzdXJlIGluIGNhc2Ugc29tZW9uZSBsb2FkcyBhbiBPTEQgdmVyc2lvbiBvZiBUd2VlbkxpdGUuanMgd2hlcmUgRWFzZS5yZWdpc3RlciBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0X3dyYXAgPSBmdW5jdGlvbihuYW1lLCBFYXNlT3V0LCBFYXNlSW4sIEVhc2VJbk91dCwgYWxpYXNlcykge1xuXHRcdFx0XHR2YXIgQyA9IF9jbGFzcyhcImVhc2luZy5cIituYW1lLCB7XG5cdFx0XHRcdFx0ZWFzZU91dDpuZXcgRWFzZU91dCgpLFxuXHRcdFx0XHRcdGVhc2VJbjpuZXcgRWFzZUluKCksXG5cdFx0XHRcdFx0ZWFzZUluT3V0Om5ldyBFYXNlSW5PdXQoKVxuXHRcdFx0XHR9LCB0cnVlKTtcblx0XHRcdFx0X2Vhc2VSZWcoQywgbmFtZSk7XG5cdFx0XHRcdHJldHVybiBDO1xuXHRcdFx0fSxcblx0XHRcdEVhc2VQb2ludCA9IGZ1bmN0aW9uKHRpbWUsIHZhbHVlLCBuZXh0KSB7XG5cdFx0XHRcdHRoaXMudCA9IHRpbWU7XG5cdFx0XHRcdHRoaXMudiA9IHZhbHVlO1xuXHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdHRoaXMubmV4dCA9IG5leHQ7XG5cdFx0XHRcdFx0bmV4dC5wcmV2ID0gdGhpcztcblx0XHRcdFx0XHR0aGlzLmMgPSBuZXh0LnYgLSB2YWx1ZTtcblx0XHRcdFx0XHR0aGlzLmdhcCA9IG5leHQudCAtIHRpbWU7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8vQmFja1xuXHRcdFx0X2NyZWF0ZUJhY2sgPSBmdW5jdGlvbihuLCBmKSB7XG5cdFx0XHRcdHZhciBDID0gX2NsYXNzKFwiZWFzaW5nLlwiICsgbiwgZnVuY3Rpb24ob3ZlcnNob290KSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9wMSA9IChvdmVyc2hvb3QgfHwgb3ZlcnNob290ID09PSAwKSA/IG92ZXJzaG9vdCA6IDEuNzAxNTg7XG5cdFx0XHRcdFx0XHR0aGlzLl9wMiA9IHRoaXMuX3AxICogMS41MjU7XG5cdFx0XHRcdFx0fSwgdHJ1ZSksXG5cdFx0XHRcdFx0cCA9IEMucHJvdG90eXBlID0gbmV3IEVhc2UoKTtcblx0XHRcdFx0cC5jb25zdHJ1Y3RvciA9IEM7XG5cdFx0XHRcdHAuZ2V0UmF0aW8gPSBmO1xuXHRcdFx0XHRwLmNvbmZpZyA9IGZ1bmN0aW9uKG92ZXJzaG9vdCkge1xuXHRcdFx0XHRcdHJldHVybiBuZXcgQyhvdmVyc2hvb3QpO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHRyZXR1cm4gQztcblx0XHRcdH0sXG5cblx0XHRcdEJhY2sgPSBfd3JhcChcIkJhY2tcIixcblx0XHRcdFx0X2NyZWF0ZUJhY2soXCJCYWNrT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0XHRyZXR1cm4gKChwID0gcCAtIDEpICogcCAqICgodGhpcy5fcDEgKyAxKSAqIHAgKyB0aGlzLl9wMSkgKyAxKTtcblx0XHRcdFx0fSksXG5cdFx0XHRcdF9jcmVhdGVCYWNrKFwiQmFja0luXCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0XHRyZXR1cm4gcCAqIHAgKiAoKHRoaXMuX3AxICsgMSkgKiBwIC0gdGhpcy5fcDEpO1xuXHRcdFx0XHR9KSxcblx0XHRcdFx0X2NyZWF0ZUJhY2soXCJCYWNrSW5PdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRcdHJldHVybiAoKHAgKj0gMikgPCAxKSA/IDAuNSAqIHAgKiBwICogKCh0aGlzLl9wMiArIDEpICogcCAtIHRoaXMuX3AyKSA6IDAuNSAqICgocCAtPSAyKSAqIHAgKiAoKHRoaXMuX3AyICsgMSkgKiBwICsgdGhpcy5fcDIpICsgMik7XG5cdFx0XHRcdH0pXG5cdFx0XHQpLFxuXG5cblx0XHRcdC8vU2xvd01vXG5cdFx0XHRTbG93TW8gPSBfY2xhc3MoXCJlYXNpbmcuU2xvd01vXCIsIGZ1bmN0aW9uKGxpbmVhclJhdGlvLCBwb3dlciwgeW95b01vZGUpIHtcblx0XHRcdFx0cG93ZXIgPSAocG93ZXIgfHwgcG93ZXIgPT09IDApID8gcG93ZXIgOiAwLjc7XG5cdFx0XHRcdGlmIChsaW5lYXJSYXRpbyA9PSBudWxsKSB7XG5cdFx0XHRcdFx0bGluZWFyUmF0aW8gPSAwLjc7XG5cdFx0XHRcdH0gZWxzZSBpZiAobGluZWFyUmF0aW8gPiAxKSB7XG5cdFx0XHRcdFx0bGluZWFyUmF0aW8gPSAxO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3AgPSAobGluZWFyUmF0aW8gIT09IDEpID8gcG93ZXIgOiAwO1xuXHRcdFx0XHR0aGlzLl9wMSA9ICgxIC0gbGluZWFyUmF0aW8pIC8gMjtcblx0XHRcdFx0dGhpcy5fcDIgPSBsaW5lYXJSYXRpbztcblx0XHRcdFx0dGhpcy5fcDMgPSB0aGlzLl9wMSArIHRoaXMuX3AyO1xuXHRcdFx0XHR0aGlzLl9jYWxjRW5kID0gKHlveW9Nb2RlID09PSB0cnVlKTtcblx0XHRcdH0sIHRydWUpLFxuXHRcdFx0cCA9IFNsb3dNby5wcm90b3R5cGUgPSBuZXcgRWFzZSgpLFxuXHRcdFx0U3RlcHBlZEVhc2UsIFJvdWdoRWFzZSwgX2NyZWF0ZUVsYXN0aWM7XG5cblx0XHRwLmNvbnN0cnVjdG9yID0gU2xvd01vO1xuXHRcdHAuZ2V0UmF0aW8gPSBmdW5jdGlvbihwKSB7XG5cdFx0XHR2YXIgciA9IHAgKyAoMC41IC0gcCkgKiB0aGlzLl9wO1xuXHRcdFx0aWYgKHAgPCB0aGlzLl9wMSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fY2FsY0VuZCA/IDEgLSAoKHAgPSAxIC0gKHAgLyB0aGlzLl9wMSkpICogcCkgOiByIC0gKChwID0gMSAtIChwIC8gdGhpcy5fcDEpKSAqIHAgKiBwICogcCAqIHIpO1xuXHRcdFx0fSBlbHNlIGlmIChwID4gdGhpcy5fcDMpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2NhbGNFbmQgPyAxIC0gKHAgPSAocCAtIHRoaXMuX3AzKSAvIHRoaXMuX3AxKSAqIHAgOiByICsgKChwIC0gcikgKiAocCA9IChwIC0gdGhpcy5fcDMpIC8gdGhpcy5fcDEpICogcCAqIHAgKiBwKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLl9jYWxjRW5kID8gMSA6IHI7XG5cdFx0fTtcblx0XHRTbG93TW8uZWFzZSA9IG5ldyBTbG93TW8oMC43LCAwLjcpO1xuXG5cdFx0cC5jb25maWcgPSBTbG93TW8uY29uZmlnID0gZnVuY3Rpb24obGluZWFyUmF0aW8sIHBvd2VyLCB5b3lvTW9kZSkge1xuXHRcdFx0cmV0dXJuIG5ldyBTbG93TW8obGluZWFyUmF0aW8sIHBvd2VyLCB5b3lvTW9kZSk7XG5cdFx0fTtcblxuXG5cdFx0Ly9TdGVwcGVkRWFzZVxuXHRcdFN0ZXBwZWRFYXNlID0gX2NsYXNzKFwiZWFzaW5nLlN0ZXBwZWRFYXNlXCIsIGZ1bmN0aW9uKHN0ZXBzKSB7XG5cdFx0XHRcdHN0ZXBzID0gc3RlcHMgfHwgMTtcblx0XHRcdFx0dGhpcy5fcDEgPSAxIC8gc3RlcHM7XG5cdFx0XHRcdHRoaXMuX3AyID0gc3RlcHMgKyAxO1xuXHRcdFx0fSwgdHJ1ZSk7XG5cdFx0cCA9IFN0ZXBwZWRFYXNlLnByb3RvdHlwZSA9IG5ldyBFYXNlKCk7XG5cdFx0cC5jb25zdHJ1Y3RvciA9IFN0ZXBwZWRFYXNlO1xuXHRcdHAuZ2V0UmF0aW8gPSBmdW5jdGlvbihwKSB7XG5cdFx0XHRpZiAocCA8IDApIHtcblx0XHRcdFx0cCA9IDA7XG5cdFx0XHR9IGVsc2UgaWYgKHAgPj0gMSkge1xuXHRcdFx0XHRwID0gMC45OTk5OTk5OTk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKCh0aGlzLl9wMiAqIHApID4+IDApICogdGhpcy5fcDE7XG5cdFx0fTtcblx0XHRwLmNvbmZpZyA9IFN0ZXBwZWRFYXNlLmNvbmZpZyA9IGZ1bmN0aW9uKHN0ZXBzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFN0ZXBwZWRFYXNlKHN0ZXBzKTtcblx0XHR9O1xuXG5cblx0XHQvL1JvdWdoRWFzZVxuXHRcdFJvdWdoRWFzZSA9IF9jbGFzcyhcImVhc2luZy5Sb3VnaEVhc2VcIiwgZnVuY3Rpb24odmFycykge1xuXHRcdFx0dmFycyA9IHZhcnMgfHwge307XG5cdFx0XHR2YXIgdGFwZXIgPSB2YXJzLnRhcGVyIHx8IFwibm9uZVwiLFxuXHRcdFx0XHRhID0gW10sXG5cdFx0XHRcdGNudCA9IDAsXG5cdFx0XHRcdHBvaW50cyA9ICh2YXJzLnBvaW50cyB8fCAyMCkgfCAwLFxuXHRcdFx0XHRpID0gcG9pbnRzLFxuXHRcdFx0XHRyYW5kb21pemUgPSAodmFycy5yYW5kb21pemUgIT09IGZhbHNlKSxcblx0XHRcdFx0Y2xhbXAgPSAodmFycy5jbGFtcCA9PT0gdHJ1ZSksXG5cdFx0XHRcdHRlbXBsYXRlID0gKHZhcnMudGVtcGxhdGUgaW5zdGFuY2VvZiBFYXNlKSA/IHZhcnMudGVtcGxhdGUgOiBudWxsLFxuXHRcdFx0XHRzdHJlbmd0aCA9ICh0eXBlb2YodmFycy5zdHJlbmd0aCkgPT09IFwibnVtYmVyXCIpID8gdmFycy5zdHJlbmd0aCAqIDAuNCA6IDAuNCxcblx0XHRcdFx0eCwgeSwgYnVtcCwgaW52WCwgb2JqLCBwbnQ7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0eCA9IHJhbmRvbWl6ZSA/IE1hdGgucmFuZG9tKCkgOiAoMSAvIHBvaW50cykgKiBpO1xuXHRcdFx0XHR5ID0gdGVtcGxhdGUgPyB0ZW1wbGF0ZS5nZXRSYXRpbyh4KSA6IHg7XG5cdFx0XHRcdGlmICh0YXBlciA9PT0gXCJub25lXCIpIHtcblx0XHRcdFx0XHRidW1wID0gc3RyZW5ndGg7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGFwZXIgPT09IFwib3V0XCIpIHtcblx0XHRcdFx0XHRpbnZYID0gMSAtIHg7XG5cdFx0XHRcdFx0YnVtcCA9IGludlggKiBpbnZYICogc3RyZW5ndGg7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGFwZXIgPT09IFwiaW5cIikge1xuXHRcdFx0XHRcdGJ1bXAgPSB4ICogeCAqIHN0cmVuZ3RoO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHggPCAwLjUpIHsgIC8vXCJib3RoXCIgKHN0YXJ0KVxuXHRcdFx0XHRcdGludlggPSB4ICogMjtcblx0XHRcdFx0XHRidW1wID0gaW52WCAqIGludlggKiAwLjUgKiBzdHJlbmd0aDtcblx0XHRcdFx0fSBlbHNlIHtcdFx0XHRcdC8vXCJib3RoXCIgKGVuZClcblx0XHRcdFx0XHRpbnZYID0gKDEgLSB4KSAqIDI7XG5cdFx0XHRcdFx0YnVtcCA9IGludlggKiBpbnZYICogMC41ICogc3RyZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJhbmRvbWl6ZSkge1xuXHRcdFx0XHRcdHkgKz0gKE1hdGgucmFuZG9tKCkgKiBidW1wKSAtIChidW1wICogMC41KTtcblx0XHRcdFx0fSBlbHNlIGlmIChpICUgMikge1xuXHRcdFx0XHRcdHkgKz0gYnVtcCAqIDAuNTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR5IC09IGJ1bXAgKiAwLjU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGNsYW1wKSB7XG5cdFx0XHRcdFx0aWYgKHkgPiAxKSB7XG5cdFx0XHRcdFx0XHR5ID0gMTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHkgPCAwKSB7XG5cdFx0XHRcdFx0XHR5ID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0YVtjbnQrK10gPSB7eDp4LCB5Onl9O1xuXHRcdFx0fVxuXHRcdFx0YS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHRcdFx0cmV0dXJuIGEueCAtIGIueDtcblx0XHRcdH0pO1xuXG5cdFx0XHRwbnQgPSBuZXcgRWFzZVBvaW50KDEsIDEsIG51bGwpO1xuXHRcdFx0aSA9IHBvaW50cztcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRvYmogPSBhW2ldO1xuXHRcdFx0XHRwbnQgPSBuZXcgRWFzZVBvaW50KG9iai54LCBvYmoueSwgcG50KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5fcHJldiA9IG5ldyBFYXNlUG9pbnQoMCwgMCwgKHBudC50ICE9PSAwKSA/IHBudCA6IHBudC5uZXh0KTtcblx0XHR9LCB0cnVlKTtcblx0XHRwID0gUm91Z2hFYXNlLnByb3RvdHlwZSA9IG5ldyBFYXNlKCk7XG5cdFx0cC5jb25zdHJ1Y3RvciA9IFJvdWdoRWFzZTtcblx0XHRwLmdldFJhdGlvID0gZnVuY3Rpb24ocCkge1xuXHRcdFx0dmFyIHBudCA9IHRoaXMuX3ByZXY7XG5cdFx0XHRpZiAocCA+IHBudC50KSB7XG5cdFx0XHRcdHdoaWxlIChwbnQubmV4dCAmJiBwID49IHBudC50KSB7XG5cdFx0XHRcdFx0cG50ID0gcG50Lm5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cG50ID0gcG50LnByZXY7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAocG50LnByZXYgJiYgcCA8PSBwbnQudCkge1xuXHRcdFx0XHRcdHBudCA9IHBudC5wcmV2O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9wcmV2ID0gcG50O1xuXHRcdFx0cmV0dXJuIChwbnQudiArICgocCAtIHBudC50KSAvIHBudC5nYXApICogcG50LmMpO1xuXHRcdH07XG5cdFx0cC5jb25maWcgPSBmdW5jdGlvbih2YXJzKSB7XG5cdFx0XHRyZXR1cm4gbmV3IFJvdWdoRWFzZSh2YXJzKTtcblx0XHR9O1xuXHRcdFJvdWdoRWFzZS5lYXNlID0gbmV3IFJvdWdoRWFzZSgpO1xuXG5cblx0XHQvL0JvdW5jZVxuXHRcdF93cmFwKFwiQm91bmNlXCIsXG5cdFx0XHRfY3JlYXRlKFwiQm91bmNlT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0aWYgKHAgPCAxIC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiA3LjU2MjUgKiBwICogcDtcblx0XHRcdFx0fSBlbHNlIGlmIChwIDwgMiAvIDIuNzUpIHtcblx0XHRcdFx0XHRyZXR1cm4gNy41NjI1ICogKHAgLT0gMS41IC8gMi43NSkgKiBwICsgMC43NTtcblx0XHRcdFx0fSBlbHNlIGlmIChwIDwgMi41IC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiA3LjU2MjUgKiAocCAtPSAyLjI1IC8gMi43NSkgKiBwICsgMC45Mzc1O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiA3LjU2MjUgKiAocCAtPSAyLjYyNSAvIDIuNzUpICogcCArIDAuOTg0Mzc1O1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiQm91bmNlSW5cIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRpZiAoKHAgPSAxIC0gcCkgPCAxIC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiAxIC0gKDcuNTYyNSAqIHAgKiBwKTtcblx0XHRcdFx0fSBlbHNlIGlmIChwIDwgMiAvIDIuNzUpIHtcblx0XHRcdFx0XHRyZXR1cm4gMSAtICg3LjU2MjUgKiAocCAtPSAxLjUgLyAyLjc1KSAqIHAgKyAwLjc1KTtcblx0XHRcdFx0fSBlbHNlIGlmIChwIDwgMi41IC8gMi43NSkge1xuXHRcdFx0XHRcdHJldHVybiAxIC0gKDcuNTYyNSAqIChwIC09IDIuMjUgLyAyLjc1KSAqIHAgKyAwLjkzNzUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAxIC0gKDcuNTYyNSAqIChwIC09IDIuNjI1IC8gMi43NSkgKiBwICsgMC45ODQzNzUpO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiQm91bmNlSW5PdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHR2YXIgaW52ZXJ0ID0gKHAgPCAwLjUpO1xuXHRcdFx0XHRpZiAoaW52ZXJ0KSB7XG5cdFx0XHRcdFx0cCA9IDEgLSAocCAqIDIpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHAgPSAocCAqIDIpIC0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocCA8IDEgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cCA9IDcuNTYyNSAqIHAgKiBwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHAgPCAyIC8gMi43NSkge1xuXHRcdFx0XHRcdHAgPSA3LjU2MjUgKiAocCAtPSAxLjUgLyAyLjc1KSAqIHAgKyAwLjc1O1xuXHRcdFx0XHR9IGVsc2UgaWYgKHAgPCAyLjUgLyAyLjc1KSB7XG5cdFx0XHRcdFx0cCA9IDcuNTYyNSAqIChwIC09IDIuMjUgLyAyLjc1KSAqIHAgKyAwLjkzNzU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cCA9IDcuNTYyNSAqIChwIC09IDIuNjI1IC8gMi43NSkgKiBwICsgMC45ODQzNzU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGludmVydCA/ICgxIC0gcCkgKiAwLjUgOiBwICogMC41ICsgMC41O1xuXHRcdFx0fSlcblx0XHQpO1xuXG5cblx0XHQvL0NJUkNcblx0XHRfd3JhcChcIkNpcmNcIixcblx0XHRcdF9jcmVhdGUoXCJDaXJjT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIE1hdGguc3FydCgxIC0gKHAgPSBwIC0gMSkgKiBwKTtcblx0XHRcdH0pLFxuXHRcdFx0X2NyZWF0ZShcIkNpcmNJblwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAtKE1hdGguc3FydCgxIC0gKHAgKiBwKSkgLSAxKTtcblx0XHRcdH0pLFxuXHRcdFx0X2NyZWF0ZShcIkNpcmNJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAoKHAqPTIpIDwgMSkgPyAtMC41ICogKE1hdGguc3FydCgxIC0gcCAqIHApIC0gMSkgOiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAocCAtPSAyKSAqIHApICsgMSk7XG5cdFx0XHR9KVxuXHRcdCk7XG5cblxuXHRcdC8vRWxhc3RpY1xuXHRcdF9jcmVhdGVFbGFzdGljID0gZnVuY3Rpb24obiwgZiwgZGVmKSB7XG5cdFx0XHR2YXIgQyA9IF9jbGFzcyhcImVhc2luZy5cIiArIG4sIGZ1bmN0aW9uKGFtcGxpdHVkZSwgcGVyaW9kKSB7XG5cdFx0XHRcdFx0dGhpcy5fcDEgPSAoYW1wbGl0dWRlID49IDEpID8gYW1wbGl0dWRlIDogMTsgLy9ub3RlOiBpZiBhbXBsaXR1ZGUgaXMgPCAxLCB3ZSBzaW1wbHkgYWRqdXN0IHRoZSBwZXJpb2QgZm9yIGEgbW9yZSBuYXR1cmFsIGZlZWwuIE90aGVyd2lzZSB0aGUgbWF0aCBkb2Vzbid0IHdvcmsgcmlnaHQgYW5kIHRoZSBjdXJ2ZSBzdGFydHMgYXQgMS5cblx0XHRcdFx0XHR0aGlzLl9wMiA9IChwZXJpb2QgfHwgZGVmKSAvIChhbXBsaXR1ZGUgPCAxID8gYW1wbGl0dWRlIDogMSk7XG5cdFx0XHRcdFx0dGhpcy5fcDMgPSB0aGlzLl9wMiAvIF8yUEkgKiAoTWF0aC5hc2luKDEgLyB0aGlzLl9wMSkgfHwgMCk7XG5cdFx0XHRcdFx0dGhpcy5fcDIgPSBfMlBJIC8gdGhpcy5fcDI7IC8vcHJlY2FsY3VsYXRlIHRvIG9wdGltaXplXG5cdFx0XHRcdH0sIHRydWUpLFxuXHRcdFx0XHRwID0gQy5wcm90b3R5cGUgPSBuZXcgRWFzZSgpO1xuXHRcdFx0cC5jb25zdHJ1Y3RvciA9IEM7XG5cdFx0XHRwLmdldFJhdGlvID0gZjtcblx0XHRcdHAuY29uZmlnID0gZnVuY3Rpb24oYW1wbGl0dWRlLCBwZXJpb2QpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBDKGFtcGxpdHVkZSwgcGVyaW9kKTtcblx0XHRcdH07XG5cdFx0XHRyZXR1cm4gQztcblx0XHR9O1xuXHRcdF93cmFwKFwiRWxhc3RpY1wiLFxuXHRcdFx0X2NyZWF0ZUVsYXN0aWMoXCJFbGFzdGljT3V0XCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3AxICogTWF0aC5wb3coMiwgLTEwICogcCkgKiBNYXRoLnNpbiggKHAgLSB0aGlzLl9wMykgKiB0aGlzLl9wMiApICsgMTtcblx0XHRcdH0sIDAuMyksXG5cdFx0XHRfY3JlYXRlRWxhc3RpYyhcIkVsYXN0aWNJblwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAtKHRoaXMuX3AxICogTWF0aC5wb3coMiwgMTAgKiAocCAtPSAxKSkgKiBNYXRoLnNpbiggKHAgLSB0aGlzLl9wMykgKiB0aGlzLl9wMiApKTtcblx0XHRcdH0sIDAuMyksXG5cdFx0XHRfY3JlYXRlRWxhc3RpYyhcIkVsYXN0aWNJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAoKHAgKj0gMikgPCAxKSA/IC0wLjUgKiAodGhpcy5fcDEgKiBNYXRoLnBvdygyLCAxMCAqIChwIC09IDEpKSAqIE1hdGguc2luKCAocCAtIHRoaXMuX3AzKSAqIHRoaXMuX3AyKSkgOiB0aGlzLl9wMSAqIE1hdGgucG93KDIsIC0xMCAqKHAgLT0gMSkpICogTWF0aC5zaW4oIChwIC0gdGhpcy5fcDMpICogdGhpcy5fcDIgKSAqIDAuNSArIDE7XG5cdFx0XHR9LCAwLjQ1KVxuXHRcdCk7XG5cblxuXHRcdC8vRXhwb1xuXHRcdF93cmFwKFwiRXhwb1wiLFxuXHRcdFx0X2NyZWF0ZShcIkV4cG9PdXRcIiwgZnVuY3Rpb24ocCkge1xuXHRcdFx0XHRyZXR1cm4gMSAtIE1hdGgucG93KDIsIC0xMCAqIHApO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiRXhwb0luXCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgLSAwLjAwMTtcblx0XHRcdH0pLFxuXHRcdFx0X2NyZWF0ZShcIkV4cG9Jbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAoKHAgKj0gMikgPCAxKSA/IDAuNSAqIE1hdGgucG93KDIsIDEwICogKHAgLSAxKSkgOiAwLjUgKiAoMiAtIE1hdGgucG93KDIsIC0xMCAqIChwIC0gMSkpKTtcblx0XHRcdH0pXG5cdFx0KTtcblxuXG5cdFx0Ly9TaW5lXG5cdFx0X3dyYXAoXCJTaW5lXCIsXG5cdFx0XHRfY3JlYXRlKFwiU2luZU91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiBNYXRoLnNpbihwICogX0hBTEZfUEkpO1xuXHRcdFx0fSksXG5cdFx0XHRfY3JlYXRlKFwiU2luZUluXCIsIGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0cmV0dXJuIC1NYXRoLmNvcyhwICogX0hBTEZfUEkpICsgMTtcblx0XHRcdH0pLFxuXHRcdFx0X2NyZWF0ZShcIlNpbmVJbk91dFwiLCBmdW5jdGlvbihwKSB7XG5cdFx0XHRcdHJldHVybiAtMC41ICogKE1hdGguY29zKE1hdGguUEkgKiBwKSAtIDEpO1xuXHRcdFx0fSlcblx0XHQpO1xuXG5cdFx0X2NsYXNzKFwiZWFzaW5nLkVhc2VMb29rdXBcIiwge1xuXHRcdFx0XHRmaW5kOmZ1bmN0aW9uKHMpIHtcblx0XHRcdFx0XHRyZXR1cm4gRWFzZS5tYXBbc107XG5cdFx0XHRcdH1cblx0XHRcdH0sIHRydWUpO1xuXG5cdFx0Ly9yZWdpc3RlciB0aGUgbm9uLXN0YW5kYXJkIGVhc2VzXG5cdFx0X2Vhc2VSZWcody5TbG93TW8sIFwiU2xvd01vXCIsIFwiZWFzZSxcIik7XG5cdFx0X2Vhc2VSZWcoUm91Z2hFYXNlLCBcIlJvdWdoRWFzZVwiLCBcImVhc2UsXCIpO1xuXHRcdF9lYXNlUmVnKFN0ZXBwZWRFYXNlLCBcIlN0ZXBwZWRFYXNlXCIsIFwiZWFzZSxcIik7XG5cblx0XHRyZXR1cm4gQmFjaztcblx0XHRcblx0fSwgdHJ1ZSk7XG5cblxufSk7XG5cbmlmIChfZ3NTY29wZS5fZ3NEZWZpbmUpIHsgX2dzU2NvcGUuX2dzUXVldWUucG9wKCkoKTsgfSAvL25lY2Vzc2FyeSBpbiBjYXNlIFR3ZWVuTGl0ZSB3YXMgYWxyZWFkeSBsb2FkZWQgc2VwYXJhdGVseS5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQmFzZSBjbGFzc2VzIGxpa2UgVHdlZW5MaXRlLCBTaW1wbGVUaW1lbGluZSwgRWFzZSwgVGlja2VyLCBldGMuXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbihmdW5jdGlvbih3aW5kb3csIG1vZHVsZU5hbWUpIHtcblxuXHRcdFwidXNlIHN0cmljdFwiO1xuXHRcdHZhciBfZXhwb3J0cyA9IHt9LFxuXHRcdFx0X2dsb2JhbHMgPSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHdpbmRvdy5HcmVlblNvY2tHbG9iYWxzIHx8IHdpbmRvdztcblx0XHRpZiAoX2dsb2JhbHMuVHdlZW5MaXRlKSB7XG5cdFx0XHRyZXR1cm47IC8vaW4gY2FzZSB0aGUgY29yZSBzZXQgb2YgY2xhc3NlcyBpcyBhbHJlYWR5IGxvYWRlZCwgZG9uJ3QgaW5zdGFudGlhdGUgdHdpY2UuXG5cdFx0fVxuXHRcdHZhciBfbmFtZXNwYWNlID0gZnVuY3Rpb24obnMpIHtcblx0XHRcdFx0dmFyIGEgPSBucy5zcGxpdChcIi5cIiksXG5cdFx0XHRcdFx0cCA9IF9nbG9iYWxzLCBpO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHBbYVtpXV0gPSBwID0gcFthW2ldXSB8fCB7fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcDtcblx0XHRcdH0sXG5cdFx0XHRncyA9IF9uYW1lc3BhY2UoXCJjb20uZ3JlZW5zb2NrXCIpLFxuXHRcdFx0X3RpbnlOdW0gPSAwLjAwMDAwMDAwMDEsXG5cdFx0XHRfc2xpY2UgPSBmdW5jdGlvbihhKSB7IC8vZG9uJ3QgdXNlIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRhcmdldCwgMCkgYmVjYXVzZSB0aGF0IGRvZXNuJ3Qgd29yayBpbiBJRTggd2l0aCBhIE5vZGVMaXN0IHRoYXQncyByZXR1cm5lZCBieSBxdWVyeVNlbGVjdG9yQWxsKClcblx0XHRcdFx0dmFyIGIgPSBbXSxcblx0XHRcdFx0XHRsID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSAhPT0gbDsgYi5wdXNoKGFbaSsrXSkpIHt9XG5cdFx0XHRcdHJldHVybiBiO1xuXHRcdFx0fSxcblx0XHRcdF9lbXB0eUZ1bmMgPSBmdW5jdGlvbigpIHt9LFxuXHRcdFx0X2lzQXJyYXkgPSAoZnVuY3Rpb24oKSB7IC8vd29ya3MgYXJvdW5kIGlzc3VlcyBpbiBpZnJhbWUgZW52aXJvbm1lbnRzIHdoZXJlIHRoZSBBcnJheSBnbG9iYWwgaXNuJ3Qgc2hhcmVkLCB0aHVzIGlmIHRoZSBvYmplY3Qgb3JpZ2luYXRlcyBpbiBhIGRpZmZlcmVudCB3aW5kb3cvaWZyYW1lLCBcIihvYmogaW5zdGFuY2VvZiBBcnJheSlcIiB3aWxsIGV2YWx1YXRlIGZhbHNlLiBXZSBhZGRlZCBzb21lIHNwZWVkIG9wdGltaXphdGlvbnMgdG8gYXZvaWQgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCkgdW5sZXNzIGl0J3MgYWJzb2x1dGVseSBuZWNlc3NhcnkgYmVjYXVzZSBpdCdzIFZFUlkgc2xvdyAobGlrZSAyMHggc2xvd2VyKVxuXHRcdFx0XHR2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuXHRcdFx0XHRcdGFycmF5ID0gdG9TdHJpbmcuY2FsbChbXSk7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbihvYmopIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgKG9iaiBpbnN0YW5jZW9mIEFycmF5IHx8ICh0eXBlb2Yob2JqKSA9PT0gXCJvYmplY3RcIiAmJiAhIW9iai5wdXNoICYmIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gYXJyYXkpKTtcblx0XHRcdFx0fTtcblx0XHRcdH0oKSksXG5cdFx0XHRhLCBpLCBwLCBfdGlja2VyLCBfdGlja2VyQWN0aXZlLFxuXHRcdFx0X2RlZkxvb2t1cCA9IHt9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBjb25zdHJ1Y3RvclxuXHRcdFx0ICogRGVmaW5lcyBhIEdyZWVuU29jayBjbGFzcywgb3B0aW9uYWxseSB3aXRoIGFuIGFycmF5IG9mIGRlcGVuZGVuY2llcyB0aGF0IG11c3QgYmUgaW5zdGFudGlhdGVkIGZpcnN0IGFuZCBwYXNzZWQgaW50byB0aGUgZGVmaW5pdGlvbi5cblx0XHRcdCAqIFRoaXMgYWxsb3dzIHVzZXJzIHRvIGxvYWQgR3JlZW5Tb2NrIEpTIGZpbGVzIGluIGFueSBvcmRlciBldmVuIGlmIHRoZXkgaGF2ZSBpbnRlcmRlcGVuZGVuY2llcyAobGlrZSBDU1NQbHVnaW4gZXh0ZW5kcyBUd2VlblBsdWdpbiB3aGljaCBpc1xuXHRcdFx0ICogaW5zaWRlIFR3ZWVuTGl0ZS5qcywgYnV0IGlmIENTU1BsdWdpbiBpcyBsb2FkZWQgZmlyc3QsIGl0IHNob3VsZCB3YWl0IHRvIHJ1biBpdHMgY29kZSB1bnRpbCBUd2VlbkxpdGUuanMgbG9hZHMgYW5kIGluc3RhbnRpYXRlcyBUd2VlblBsdWdpblxuXHRcdFx0ICogYW5kIHRoZW4gcGFzcyBUd2VlblBsdWdpbiB0byBDU1NQbHVnaW4ncyBkZWZpbml0aW9uKS4gVGhpcyBpcyBhbGwgZG9uZSBhdXRvbWF0aWNhbGx5IGFuZCBpbnRlcm5hbGx5LlxuXHRcdFx0ICpcblx0XHRcdCAqIEV2ZXJ5IGRlZmluaXRpb24gd2lsbCBiZSBhZGRlZCB0byBhIFwiY29tLmdyZWVuc29ja1wiIGdsb2JhbCBvYmplY3QgKHR5cGljYWxseSB3aW5kb3csIGJ1dCBpZiBhIHdpbmRvdy5HcmVlblNvY2tHbG9iYWxzIG9iamVjdCBpcyBmb3VuZCxcblx0XHRcdCAqIGl0IHdpbGwgZ28gdGhlcmUgYXMgb2YgdjEuNykuIEZvciBleGFtcGxlLCBUd2VlbkxpdGUgd2lsbCBiZSBmb3VuZCBhdCB3aW5kb3cuY29tLmdyZWVuc29jay5Ud2VlbkxpdGUgYW5kIHNpbmNlIGl0J3MgYSBnbG9iYWwgY2xhc3MgdGhhdCBzaG91bGQgYmUgYXZhaWxhYmxlIGFueXdoZXJlLFxuXHRcdFx0ICogaXQgaXMgQUxTTyByZWZlcmVuY2VkIGF0IHdpbmRvdy5Ud2VlbkxpdGUuIEhvd2V2ZXIgc29tZSBjbGFzc2VzIGFyZW4ndCBjb25zaWRlcmVkIGdsb2JhbCwgbGlrZSB0aGUgYmFzZSBjb20uZ3JlZW5zb2NrLmNvcmUuQW5pbWF0aW9uIGNsYXNzLCBzb1xuXHRcdFx0ICogdGhvc2Ugd2lsbCBvbmx5IGJlIGF0IHRoZSBwYWNrYWdlIGxpa2Ugd2luZG93LmNvbS5ncmVlbnNvY2suY29yZS5BbmltYXRpb24uIEFnYWluLCBpZiB5b3UgZGVmaW5lIGEgR3JlZW5Tb2NrR2xvYmFscyBvYmplY3Qgb24gdGhlIHdpbmRvdywgZXZlcnl0aGluZ1xuXHRcdFx0ICogZ2V0cyB0dWNrZWQgbmVhdGx5IGluc2lkZSB0aGVyZSBpbnN0ZWFkIG9mIG9uIHRoZSB3aW5kb3cgZGlyZWN0bHkuIFRoaXMgYWxsb3dzIHlvdSB0byBkbyBhZHZhbmNlZCB0aGluZ3MgbGlrZSBsb2FkIG11bHRpcGxlIHZlcnNpb25zIG9mIEdyZWVuU29ja1xuXHRcdFx0ICogZmlsZXMgYW5kIHB1dCB0aGVtIGludG8gZGlzdGluY3Qgb2JqZWN0cyAoaW1hZ2luZSBhIGJhbm5lciBhZCB1c2VzIGEgbmV3ZXIgdmVyc2lvbiBidXQgdGhlIG1haW4gc2l0ZSB1c2VzIGFuIG9sZGVyIG9uZSkuIEluIHRoYXQgY2FzZSwgeW91IGNvdWxkXG5cdFx0XHQgKiBzYW5kYm94IHRoZSBiYW5uZXIgb25lIGxpa2U6XG5cdFx0XHQgKlxuXHRcdFx0ICogPHNjcmlwdD5cblx0XHRcdCAqICAgICB2YXIgZ3MgPSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHt9OyAvL3RoZSBuZXdlciB2ZXJzaW9uIHdlJ3JlIGFib3V0IHRvIGxvYWQgY291bGQgbm93IGJlIHJlZmVyZW5jZWQgaW4gYSBcImdzXCIgb2JqZWN0LCBsaWtlIGdzLlR3ZWVuTGl0ZS50byguLi4pLiBVc2Ugd2hhdGV2ZXIgYWxpYXMgeW91IHdhbnQgYXMgbG9uZyBhcyBpdCdzIHVuaXF1ZSwgXCJnc1wiIG9yIFwiYmFubmVyXCIgb3Igd2hhdGV2ZXIuXG5cdFx0XHQgKiA8L3NjcmlwdD5cblx0XHRcdCAqIDxzY3JpcHQgc3JjPVwianMvZ3JlZW5zb2NrL3YxLjcvVHdlZW5NYXguanNcIj48L3NjcmlwdD5cblx0XHRcdCAqIDxzY3JpcHQ+XG5cdFx0XHQgKiAgICAgd2luZG93LkdyZWVuU29ja0dsb2JhbHMgPSB3aW5kb3cuX2dzUXVldWUgPSB3aW5kb3cuX2dzRGVmaW5lID0gbnVsbDsgLy9yZXNldCBpdCBiYWNrIHRvIG51bGwgKGFsb25nIHdpdGggdGhlIHNwZWNpYWwgX2dzUXVldWUgdmFyaWFibGUpIHNvIHRoYXQgdGhlIG5leHQgbG9hZCBvZiBUd2Vlbk1heCBhZmZlY3RzIHRoZSB3aW5kb3cgYW5kIHdlIGNhbiByZWZlcmVuY2UgdGhpbmdzIGRpcmVjdGx5IGxpa2UgVHdlZW5MaXRlLnRvKC4uLilcblx0XHRcdCAqIDwvc2NyaXB0PlxuXHRcdFx0ICogPHNjcmlwdCBzcmM9XCJqcy9ncmVlbnNvY2svdjEuNi9Ud2Vlbk1heC5qc1wiPjwvc2NyaXB0PlxuXHRcdFx0ICogPHNjcmlwdD5cblx0XHRcdCAqICAgICBncy5Ud2VlbkxpdGUudG8oLi4uKTsgLy93b3VsZCB1c2UgdjEuN1xuXHRcdFx0ICogICAgIFR3ZWVuTGl0ZS50byguLi4pOyAvL3dvdWxkIHVzZSB2MS42XG5cdFx0XHQgKiA8L3NjcmlwdD5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IG5zIFRoZSBuYW1lc3BhY2Ugb2YgdGhlIGNsYXNzIGRlZmluaXRpb24sIGxlYXZpbmcgb2ZmIFwiY29tLmdyZWVuc29jay5cIiBhcyB0aGF0J3MgYXNzdW1lZC4gRm9yIGV4YW1wbGUsIFwiVHdlZW5MaXRlXCIgb3IgXCJwbHVnaW5zLkNTU1BsdWdpblwiIG9yIFwiZWFzaW5nLkJhY2tcIi5cblx0XHRcdCAqIEBwYXJhbSB7IUFycmF5LjxzdHJpbmc+fSBkZXBlbmRlbmNpZXMgQW4gYXJyYXkgb2YgZGVwZW5kZW5jaWVzIChkZXNjcmliZWQgYXMgdGhlaXIgbmFtZXNwYWNlcyBtaW51cyBcImNvbS5ncmVlbnNvY2suXCIgcHJlZml4KS4gRm9yIGV4YW1wbGUgW1wiVHdlZW5MaXRlXCIsXCJwbHVnaW5zLlR3ZWVuUGx1Z2luXCIsXCJjb3JlLkFuaW1hdGlvblwiXVxuXHRcdFx0ICogQHBhcmFtIHshZnVuY3Rpb24oKTpPYmplY3R9IGZ1bmMgVGhlIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCBhbmQgcGFzc2VkIHRoZSByZXNvbHZlZCBkZXBlbmRlbmNpZXMgd2hpY2ggd2lsbCByZXR1cm4gdGhlIGFjdHVhbCBjbGFzcyBmb3IgdGhpcyBkZWZpbml0aW9uLlxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gZ2xvYmFsIElmIHRydWUsIHRoZSBjbGFzcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBnbG9iYWwgc2NvcGUgKHR5cGljYWxseSB3aW5kb3cgdW5sZXNzIHlvdSBkZWZpbmUgYSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyBvYmplY3QpXG5cdFx0XHQgKi9cblx0XHRcdERlZmluaXRpb24gPSBmdW5jdGlvbihucywgZGVwZW5kZW5jaWVzLCBmdW5jLCBnbG9iYWwpIHtcblx0XHRcdFx0dGhpcy5zYyA9IChfZGVmTG9va3VwW25zXSkgPyBfZGVmTG9va3VwW25zXS5zYyA6IFtdOyAvL3N1YmNsYXNzZXNcblx0XHRcdFx0X2RlZkxvb2t1cFtuc10gPSB0aGlzO1xuXHRcdFx0XHR0aGlzLmdzQ2xhc3MgPSBudWxsO1xuXHRcdFx0XHR0aGlzLmZ1bmMgPSBmdW5jO1xuXHRcdFx0XHR2YXIgX2NsYXNzZXMgPSBbXTtcblx0XHRcdFx0dGhpcy5jaGVjayA9IGZ1bmN0aW9uKGluaXQpIHtcblx0XHRcdFx0XHR2YXIgaSA9IGRlcGVuZGVuY2llcy5sZW5ndGgsXG5cdFx0XHRcdFx0XHRtaXNzaW5nID0gaSxcblx0XHRcdFx0XHRcdGN1ciwgYSwgbiwgY2wsIGhhc01vZHVsZTtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdGlmICgoY3VyID0gX2RlZkxvb2t1cFtkZXBlbmRlbmNpZXNbaV1dIHx8IG5ldyBEZWZpbml0aW9uKGRlcGVuZGVuY2llc1tpXSwgW10pKS5nc0NsYXNzKSB7XG5cdFx0XHRcdFx0XHRcdF9jbGFzc2VzW2ldID0gY3VyLmdzQ2xhc3M7XG5cdFx0XHRcdFx0XHRcdG1pc3NpbmctLTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaW5pdCkge1xuXHRcdFx0XHRcdFx0XHRjdXIuc2MucHVzaCh0aGlzKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKG1pc3NpbmcgPT09IDAgJiYgZnVuYykge1xuXHRcdFx0XHRcdFx0YSA9IChcImNvbS5ncmVlbnNvY2suXCIgKyBucykuc3BsaXQoXCIuXCIpO1xuXHRcdFx0XHRcdFx0biA9IGEucG9wKCk7XG5cdFx0XHRcdFx0XHRjbCA9IF9uYW1lc3BhY2UoYS5qb2luKFwiLlwiKSlbbl0gPSB0aGlzLmdzQ2xhc3MgPSBmdW5jLmFwcGx5KGZ1bmMsIF9jbGFzc2VzKTtcblxuXHRcdFx0XHRcdFx0Ly9leHBvcnRzIHRvIG11bHRpcGxlIGVudmlyb25tZW50c1xuXHRcdFx0XHRcdFx0aWYgKGdsb2JhbCkge1xuXHRcdFx0XHRcdFx0XHRfZ2xvYmFsc1tuXSA9IF9leHBvcnRzW25dID0gY2w7IC8vcHJvdmlkZXMgYSB3YXkgdG8gYXZvaWQgZ2xvYmFsIG5hbWVzcGFjZSBwb2xsdXRpb24uIEJ5IGRlZmF1bHQsIHRoZSBtYWluIGNsYXNzZXMgbGlrZSBUd2VlbkxpdGUsIFBvd2VyMSwgU3Ryb25nLCBldGMuIGFyZSBhZGRlZCB0byB3aW5kb3cgdW5sZXNzIGEgR3JlZW5Tb2NrR2xvYmFscyBpcyBkZWZpbmVkLiBTbyBpZiB5b3Ugd2FudCB0byBoYXZlIHRoaW5ncyBhZGRlZCB0byBhIGN1c3RvbSBvYmplY3QgaW5zdGVhZCwganVzdCBkbyBzb21ldGhpbmcgbGlrZSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHt9IGJlZm9yZSBsb2FkaW5nIGFueSBHcmVlblNvY2sgZmlsZXMuIFlvdSBjYW4gZXZlbiBzZXQgdXAgYW4gYWxpYXMgbGlrZSB3aW5kb3cuR3JlZW5Tb2NrR2xvYmFscyA9IHdpbmRvd3MuZ3MgPSB7fSBzbyB0aGF0IHlvdSBjYW4gYWNjZXNzIGV2ZXJ5dGhpbmcgbGlrZSBncy5Ud2VlbkxpdGUuIEFsc28gcmVtZW1iZXIgdGhhdCBBTEwgY2xhc3NlcyBhcmUgYWRkZWQgdG8gdGhlIHdpbmRvdy5jb20uZ3JlZW5zb2NrIG9iamVjdCAoaW4gdGhlaXIgcmVzcGVjdGl2ZSBwYWNrYWdlcywgbGlrZSBjb20uZ3JlZW5zb2NrLmVhc2luZy5Qb3dlcjEsIGNvbS5ncmVlbnNvY2suVHdlZW5MaXRlLCBldGMuKVxuXHRcdFx0XHRcdFx0XHRoYXNNb2R1bGUgPSAodHlwZW9mKG1vZHVsZSkgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIWhhc01vZHVsZSAmJiB0eXBlb2YoZGVmaW5lKSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpeyAvL0FNRFxuXHRcdFx0XHRcdFx0XHRcdGRlZmluZSgod2luZG93LkdyZWVuU29ja0FNRFBhdGggPyB3aW5kb3cuR3JlZW5Tb2NrQU1EUGF0aCArIFwiL1wiIDogXCJcIikgKyBucy5zcGxpdChcIi5cIikucG9wKCksIFtdLCBmdW5jdGlvbigpIHsgcmV0dXJuIGNsOyB9KTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChoYXNNb2R1bGUpeyAvL25vZGVcblx0XHRcdFx0XHRcdFx0XHRpZiAobnMgPT09IG1vZHVsZU5hbWUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5leHBvcnRzID0gX2V4cG9ydHNbbW9kdWxlTmFtZV0gPSBjbDtcblx0XHRcdFx0XHRcdFx0XHRcdGZvciAoaSBpbiBfZXhwb3J0cykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbFtpXSA9IF9leHBvcnRzW2ldO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoX2V4cG9ydHNbbW9kdWxlTmFtZV0pIHtcblx0XHRcdFx0XHRcdFx0XHRcdF9leHBvcnRzW21vZHVsZU5hbWVdW25dID0gY2w7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgdGhpcy5zYy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnNjW2ldLmNoZWNrKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLmNoZWNrKHRydWUpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly91c2VkIHRvIGNyZWF0ZSBEZWZpbml0aW9uIGluc3RhbmNlcyAod2hpY2ggYmFzaWNhbGx5IHJlZ2lzdGVycyBhIGNsYXNzIHRoYXQgaGFzIGRlcGVuZGVuY2llcykuXG5cdFx0XHRfZ3NEZWZpbmUgPSB3aW5kb3cuX2dzRGVmaW5lID0gZnVuY3Rpb24obnMsIGRlcGVuZGVuY2llcywgZnVuYywgZ2xvYmFsKSB7XG5cdFx0XHRcdHJldHVybiBuZXcgRGVmaW5pdGlvbihucywgZGVwZW5kZW5jaWVzLCBmdW5jLCBnbG9iYWwpO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly9hIHF1aWNrIHdheSB0byBjcmVhdGUgYSBjbGFzcyB0aGF0IGRvZXNuJ3QgaGF2ZSBhbnkgZGVwZW5kZW5jaWVzLiBSZXR1cm5zIHRoZSBjbGFzcywgYnV0IGZpcnN0IHJlZ2lzdGVycyBpdCBpbiB0aGUgR3JlZW5Tb2NrIG5hbWVzcGFjZSBzbyB0aGF0IG90aGVyIGNsYXNzZXMgY2FuIGdyYWIgaXQgKG90aGVyIGNsYXNzZXMgbWlnaHQgYmUgZGVwZW5kZW50IG9uIHRoZSBjbGFzcykuXG5cdFx0XHRfY2xhc3MgPSBncy5fY2xhc3MgPSBmdW5jdGlvbihucywgZnVuYywgZ2xvYmFsKSB7XG5cdFx0XHRcdGZ1bmMgPSBmdW5jIHx8IGZ1bmN0aW9uKCkge307XG5cdFx0XHRcdF9nc0RlZmluZShucywgW10sIGZ1bmN0aW9uKCl7IHJldHVybiBmdW5jOyB9LCBnbG9iYWwpO1xuXHRcdFx0XHRyZXR1cm4gZnVuYztcblx0XHRcdH07XG5cblx0XHRfZ3NEZWZpbmUuZ2xvYmFscyA9IF9nbG9iYWxzO1xuXG5cblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEVhc2VcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBfYmFzZVBhcmFtcyA9IFswLCAwLCAxLCAxXSxcblx0XHRcdF9ibGFua0FycmF5ID0gW10sXG5cdFx0XHRFYXNlID0gX2NsYXNzKFwiZWFzaW5nLkVhc2VcIiwgZnVuY3Rpb24oZnVuYywgZXh0cmFQYXJhbXMsIHR5cGUsIHBvd2VyKSB7XG5cdFx0XHRcdHRoaXMuX2Z1bmMgPSBmdW5jO1xuXHRcdFx0XHR0aGlzLl90eXBlID0gdHlwZSB8fCAwO1xuXHRcdFx0XHR0aGlzLl9wb3dlciA9IHBvd2VyIHx8IDA7XG5cdFx0XHRcdHRoaXMuX3BhcmFtcyA9IGV4dHJhUGFyYW1zID8gX2Jhc2VQYXJhbXMuY29uY2F0KGV4dHJhUGFyYW1zKSA6IF9iYXNlUGFyYW1zO1xuXHRcdFx0fSwgdHJ1ZSksXG5cdFx0XHRfZWFzZU1hcCA9IEVhc2UubWFwID0ge30sXG5cdFx0XHRfZWFzZVJlZyA9IEVhc2UucmVnaXN0ZXIgPSBmdW5jdGlvbihlYXNlLCBuYW1lcywgdHlwZXMsIGNyZWF0ZSkge1xuXHRcdFx0XHR2YXIgbmEgPSBuYW1lcy5zcGxpdChcIixcIiksXG5cdFx0XHRcdFx0aSA9IG5hLmxlbmd0aCxcblx0XHRcdFx0XHR0YSA9ICh0eXBlcyB8fCBcImVhc2VJbixlYXNlT3V0LGVhc2VJbk91dFwiKS5zcGxpdChcIixcIiksXG5cdFx0XHRcdFx0ZSwgbmFtZSwgaiwgdHlwZTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0bmFtZSA9IG5hW2ldO1xuXHRcdFx0XHRcdGUgPSBjcmVhdGUgPyBfY2xhc3MoXCJlYXNpbmcuXCIrbmFtZSwgbnVsbCwgdHJ1ZSkgOiBncy5lYXNpbmdbbmFtZV0gfHwge307XG5cdFx0XHRcdFx0aiA9IHRhLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1qID4gLTEpIHtcblx0XHRcdFx0XHRcdHR5cGUgPSB0YVtqXTtcblx0XHRcdFx0XHRcdF9lYXNlTWFwW25hbWUgKyBcIi5cIiArIHR5cGVdID0gX2Vhc2VNYXBbdHlwZSArIG5hbWVdID0gZVt0eXBlXSA9IGVhc2UuZ2V0UmF0aW8gPyBlYXNlIDogZWFzZVt0eXBlXSB8fCBuZXcgZWFzZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdHAgPSBFYXNlLnByb3RvdHlwZTtcblx0XHRwLl9jYWxjRW5kID0gZmFsc2U7XG5cdFx0cC5nZXRSYXRpbyA9IGZ1bmN0aW9uKHApIHtcblx0XHRcdGlmICh0aGlzLl9mdW5jKSB7XG5cdFx0XHRcdHRoaXMuX3BhcmFtc1swXSA9IHA7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9mdW5jLmFwcGx5KG51bGwsIHRoaXMuX3BhcmFtcyk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgdCA9IHRoaXMuX3R5cGUsXG5cdFx0XHRcdHB3ID0gdGhpcy5fcG93ZXIsXG5cdFx0XHRcdHIgPSAodCA9PT0gMSkgPyAxIC0gcCA6ICh0ID09PSAyKSA/IHAgOiAocCA8IDAuNSkgPyBwICogMiA6ICgxIC0gcCkgKiAyO1xuXHRcdFx0aWYgKHB3ID09PSAxKSB7XG5cdFx0XHRcdHIgKj0gcjtcblx0XHRcdH0gZWxzZSBpZiAocHcgPT09IDIpIHtcblx0XHRcdFx0ciAqPSByICogcjtcblx0XHRcdH0gZWxzZSBpZiAocHcgPT09IDMpIHtcblx0XHRcdFx0ciAqPSByICogciAqIHI7XG5cdFx0XHR9IGVsc2UgaWYgKHB3ID09PSA0KSB7XG5cdFx0XHRcdHIgKj0gciAqIHIgKiByICogcjtcblx0XHRcdH1cblx0XHRcdHJldHVybiAodCA9PT0gMSkgPyAxIC0gciA6ICh0ID09PSAyKSA/IHIgOiAocCA8IDAuNSkgPyByIC8gMiA6IDEgLSAociAvIDIpO1xuXHRcdH07XG5cblx0XHQvL2NyZWF0ZSBhbGwgdGhlIHN0YW5kYXJkIGVhc2VzIGxpa2UgTGluZWFyLCBRdWFkLCBDdWJpYywgUXVhcnQsIFF1aW50LCBTdHJvbmcsIFBvd2VyMCwgUG93ZXIxLCBQb3dlcjIsIFBvd2VyMywgYW5kIFBvd2VyNCAoZWFjaCB3aXRoIGVhc2VJbiwgZWFzZU91dCwgYW5kIGVhc2VJbk91dClcblx0XHRhID0gW1wiTGluZWFyXCIsXCJRdWFkXCIsXCJDdWJpY1wiLFwiUXVhcnRcIixcIlF1aW50LFN0cm9uZ1wiXTtcblx0XHRpID0gYS5sZW5ndGg7XG5cdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRwID0gYVtpXStcIixQb3dlclwiK2k7XG5cdFx0XHRfZWFzZVJlZyhuZXcgRWFzZShudWxsLG51bGwsMSxpKSwgcCwgXCJlYXNlT3V0XCIsIHRydWUpO1xuXHRcdFx0X2Vhc2VSZWcobmV3IEVhc2UobnVsbCxudWxsLDIsaSksIHAsIFwiZWFzZUluXCIgKyAoKGkgPT09IDApID8gXCIsZWFzZU5vbmVcIiA6IFwiXCIpKTtcblx0XHRcdF9lYXNlUmVnKG5ldyBFYXNlKG51bGwsbnVsbCwzLGkpLCBwLCBcImVhc2VJbk91dFwiKTtcblx0XHR9XG5cdFx0X2Vhc2VNYXAubGluZWFyID0gZ3MuZWFzaW5nLkxpbmVhci5lYXNlSW47XG5cdFx0X2Vhc2VNYXAuc3dpbmcgPSBncy5lYXNpbmcuUXVhZC5lYXNlSW5PdXQ7IC8vZm9yIGpRdWVyeSBmb2xrc1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBFdmVudERpc3BhdGNoZXJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBFdmVudERpc3BhdGNoZXIgPSBfY2xhc3MoXCJldmVudHMuRXZlbnREaXNwYXRjaGVyXCIsIGZ1bmN0aW9uKHRhcmdldCkge1xuXHRcdFx0dGhpcy5fbGlzdGVuZXJzID0ge307XG5cdFx0XHR0aGlzLl9ldmVudFRhcmdldCA9IHRhcmdldCB8fCB0aGlzO1xuXHRcdH0pO1xuXHRcdHAgPSBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlO1xuXG5cdFx0cC5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgY2FsbGJhY2ssIHNjb3BlLCB1c2VQYXJhbSwgcHJpb3JpdHkpIHtcblx0XHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRcdHZhciBsaXN0ID0gdGhpcy5fbGlzdGVuZXJzW3R5cGVdLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxpc3RlbmVyLCBpO1xuXHRcdFx0aWYgKHRoaXMgPT09IF90aWNrZXIgJiYgIV90aWNrZXJBY3RpdmUpIHtcblx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAobGlzdCA9PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuX2xpc3RlbmVyc1t0eXBlXSA9IGxpc3QgPSBbXTtcblx0XHRcdH1cblx0XHRcdGkgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRsaXN0ZW5lciA9IGxpc3RbaV07XG5cdFx0XHRcdGlmIChsaXN0ZW5lci5jID09PSBjYWxsYmFjayAmJiBsaXN0ZW5lci5zID09PSBzY29wZSkge1xuXHRcdFx0XHRcdGxpc3Quc3BsaWNlKGksIDEpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGluZGV4ID09PSAwICYmIGxpc3RlbmVyLnByIDwgcHJpb3JpdHkpIHtcblx0XHRcdFx0XHRpbmRleCA9IGkgKyAxO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRsaXN0LnNwbGljZShpbmRleCwgMCwge2M6Y2FsbGJhY2ssIHM6c2NvcGUsIHVwOnVzZVBhcmFtLCBwcjpwcmlvcml0eX0pO1xuXHRcdH07XG5cblx0XHRwLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0eXBlLCBjYWxsYmFjaykge1xuXHRcdFx0dmFyIGxpc3QgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV0sIGk7XG5cdFx0XHRpZiAobGlzdCkge1xuXHRcdFx0XHRpID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGlmIChsaXN0W2ldLmMgPT09IGNhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cC5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0dmFyIGxpc3QgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV0sXG5cdFx0XHRcdGksIHQsIGxpc3RlbmVyO1xuXHRcdFx0aWYgKGxpc3QpIHtcblx0XHRcdFx0aSA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRpZiAoaSA+IDEpIHtcblx0XHRcdFx0XHRsaXN0ID0gbGlzdC5zbGljZSgwKTsgLy9pbiBjYXNlIGFkZEV2ZW50TGlzdGVuZXIoKSBpcyBjYWxsZWQgZnJvbSB3aXRoaW4gYSBsaXN0ZW5lci9jYWxsYmFjayAob3RoZXJ3aXNlIHRoZSBpbmRleCBjb3VsZCBjaGFuZ2UsIHJlc3VsdGluZyBpbiBhIHNraXApXG5cdFx0XHRcdH1cblx0XHRcdFx0dCA9IHRoaXMuX2V2ZW50VGFyZ2V0O1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRsaXN0ZW5lciA9IGxpc3RbaV07XG5cdFx0XHRcdFx0aWYgKGxpc3RlbmVyKSB7XG5cdFx0XHRcdFx0XHRpZiAobGlzdGVuZXIudXApIHtcblx0XHRcdFx0XHRcdFx0bGlzdGVuZXIuYy5jYWxsKGxpc3RlbmVyLnMgfHwgdCwge3R5cGU6dHlwZSwgdGFyZ2V0OnR9KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGxpc3RlbmVyLmMuY2FsbChsaXN0ZW5lci5zIHx8IHQpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFRpY2tlclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4gXHRcdHZhciBfcmVxQW5pbUZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSxcblx0XHRcdF9jYW5jZWxBbmltRnJhbWUgPSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUsXG5cdFx0XHRfZ2V0VGltZSA9IERhdGUubm93IHx8IGZ1bmN0aW9uKCkge3JldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTt9LFxuXHRcdFx0X2xhc3RVcGRhdGUgPSBfZ2V0VGltZSgpO1xuXG5cdFx0Ly9ub3cgdHJ5IHRvIGRldGVybWluZSB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIGFuZCBjYW5jZWxBbmltYXRpb25GcmFtZSBmdW5jdGlvbnMgYW5kIGlmIG5vbmUgYXJlIGZvdW5kLCB3ZSdsbCB1c2UgYSBzZXRUaW1lb3V0KCkvY2xlYXJUaW1lb3V0KCkgcG9seWZpbGwuXG5cdFx0YSA9IFtcIm1zXCIsXCJtb3pcIixcIndlYmtpdFwiLFwib1wiXTtcblx0XHRpID0gYS5sZW5ndGg7XG5cdFx0d2hpbGUgKC0taSA+IC0xICYmICFfcmVxQW5pbUZyYW1lKSB7XG5cdFx0XHRfcmVxQW5pbUZyYW1lID0gd2luZG93W2FbaV0gKyBcIlJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtcblx0XHRcdF9jYW5jZWxBbmltRnJhbWUgPSB3aW5kb3dbYVtpXSArIFwiQ2FuY2VsQW5pbWF0aW9uRnJhbWVcIl0gfHwgd2luZG93W2FbaV0gKyBcIkNhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZVwiXTtcblx0XHR9XG5cblx0XHRfY2xhc3MoXCJUaWNrZXJcIiwgZnVuY3Rpb24oZnBzLCB1c2VSQUYpIHtcblx0XHRcdHZhciBfc2VsZiA9IHRoaXMsXG5cdFx0XHRcdF9zdGFydFRpbWUgPSBfZ2V0VGltZSgpLFxuXHRcdFx0XHRfdXNlUkFGID0gKHVzZVJBRiAhPT0gZmFsc2UgJiYgX3JlcUFuaW1GcmFtZSkgPyBcImF1dG9cIiA6IGZhbHNlLFxuXHRcdFx0XHRfbGFnVGhyZXNob2xkID0gNTAwLFxuXHRcdFx0XHRfYWRqdXN0ZWRMYWcgPSAzMyxcblx0XHRcdFx0X3RpY2tXb3JkID0gXCJ0aWNrXCIsIC8vaGVscHMgcmVkdWNlIGdjIGJ1cmRlblxuXHRcdFx0XHRfZnBzLCBfcmVxLCBfaWQsIF9nYXAsIF9uZXh0VGltZSxcblx0XHRcdFx0X3RpY2sgPSBmdW5jdGlvbihtYW51YWwpIHtcblx0XHRcdFx0XHR2YXIgZWxhcHNlZCA9IF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSxcblx0XHRcdFx0XHRcdG92ZXJsYXAsIGRpc3BhdGNoO1xuXHRcdFx0XHRcdGlmIChlbGFwc2VkID4gX2xhZ1RocmVzaG9sZCkge1xuXHRcdFx0XHRcdFx0X3N0YXJ0VGltZSArPSBlbGFwc2VkIC0gX2FkanVzdGVkTGFnO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRfbGFzdFVwZGF0ZSArPSBlbGFwc2VkO1xuXHRcdFx0XHRcdF9zZWxmLnRpbWUgPSAoX2xhc3RVcGRhdGUgLSBfc3RhcnRUaW1lKSAvIDEwMDA7XG5cdFx0XHRcdFx0b3ZlcmxhcCA9IF9zZWxmLnRpbWUgLSBfbmV4dFRpbWU7XG5cdFx0XHRcdFx0aWYgKCFfZnBzIHx8IG92ZXJsYXAgPiAwIHx8IG1hbnVhbCA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdFx0X3NlbGYuZnJhbWUrKztcblx0XHRcdFx0XHRcdF9uZXh0VGltZSArPSBvdmVybGFwICsgKG92ZXJsYXAgPj0gX2dhcCA/IDAuMDA0IDogX2dhcCAtIG92ZXJsYXApO1xuXHRcdFx0XHRcdFx0ZGlzcGF0Y2ggPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAobWFudWFsICE9PSB0cnVlKSB7IC8vbWFrZSBzdXJlIHRoZSByZXF1ZXN0IGlzIG1hZGUgYmVmb3JlIHdlIGRpc3BhdGNoIHRoZSBcInRpY2tcIiBldmVudCBzbyB0aGF0IHRpbWluZyBpcyBtYWludGFpbmVkLiBPdGhlcndpc2UsIGlmIHByb2Nlc3NpbmcgdGhlIFwidGlja1wiIHJlcXVpcmVzIGEgYnVuY2ggb2YgdGltZSAobGlrZSAxNW1zKSBhbmQgd2UncmUgdXNpbmcgYSBzZXRUaW1lb3V0KCkgdGhhdCdzIGJhc2VkIG9uIDE2LjdtcywgaXQnZCB0ZWNobmljYWxseSB0YWtlIDMxLjdtcyBiZXR3ZWVuIGZyYW1lcyBvdGhlcndpc2UuXG5cdFx0XHRcdFx0XHRfaWQgPSBfcmVxKF90aWNrKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGRpc3BhdGNoKSB7XG5cdFx0XHRcdFx0XHRfc2VsZi5kaXNwYXRjaEV2ZW50KF90aWNrV29yZCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRFdmVudERpc3BhdGNoZXIuY2FsbChfc2VsZik7XG5cdFx0XHRfc2VsZi50aW1lID0gX3NlbGYuZnJhbWUgPSAwO1xuXHRcdFx0X3NlbGYudGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfdGljayh0cnVlKTtcblx0XHRcdH07XG5cblx0XHRcdF9zZWxmLmxhZ1Ntb290aGluZyA9IGZ1bmN0aW9uKHRocmVzaG9sZCwgYWRqdXN0ZWRMYWcpIHtcblx0XHRcdFx0X2xhZ1RocmVzaG9sZCA9IHRocmVzaG9sZCB8fCAoMSAvIF90aW55TnVtKTsgLy96ZXJvIHNob3VsZCBiZSBpbnRlcnByZXRlZCBhcyBiYXNpY2FsbHkgdW5saW1pdGVkXG5cdFx0XHRcdF9hZGp1c3RlZExhZyA9IE1hdGgubWluKGFkanVzdGVkTGFnLCBfbGFnVGhyZXNob2xkLCAwKTtcblx0XHRcdH07XG5cblx0XHRcdF9zZWxmLnNsZWVwID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmIChfaWQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIV91c2VSQUYgfHwgIV9jYW5jZWxBbmltRnJhbWUpIHtcblx0XHRcdFx0XHRjbGVhclRpbWVvdXQoX2lkKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRfY2FuY2VsQW5pbUZyYW1lKF9pZCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3JlcSA9IF9lbXB0eUZ1bmM7XG5cdFx0XHRcdF9pZCA9IG51bGw7XG5cdFx0XHRcdGlmIChfc2VsZiA9PT0gX3RpY2tlcikge1xuXHRcdFx0XHRcdF90aWNrZXJBY3RpdmUgPSBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0X3NlbGYud2FrZSA9IGZ1bmN0aW9uKHNlYW1sZXNzKSB7XG5cdFx0XHRcdGlmIChfaWQgIT09IG51bGwpIHtcblx0XHRcdFx0XHRfc2VsZi5zbGVlcCgpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHNlYW1sZXNzKSB7XG5cdFx0XHRcdFx0X3N0YXJ0VGltZSArPSAtX2xhc3RVcGRhdGUgKyAoX2xhc3RVcGRhdGUgPSBfZ2V0VGltZSgpKTtcblx0XHRcdFx0fSBlbHNlIGlmIChfc2VsZi5mcmFtZSA+IDEwKSB7IC8vZG9uJ3QgdHJpZ2dlciBsYWdTbW9vdGhpbmcgaWYgd2UncmUganVzdCB3YWtpbmcgdXAsIGFuZCBtYWtlIHN1cmUgdGhhdCBhdCBsZWFzdCAxMCBmcmFtZXMgaGF2ZSBlbGFwc2VkIGJlY2F1c2Ugb2YgdGhlIGlPUyBidWcgdGhhdCB3ZSB3b3JrIGFyb3VuZCBiZWxvdyB3aXRoIHRoZSAxLjUtc2Vjb25kIHNldFRpbW91dCgpLlxuXHRcdFx0XHRcdF9sYXN0VXBkYXRlID0gX2dldFRpbWUoKSAtIF9sYWdUaHJlc2hvbGQgKyA1O1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9yZXEgPSAoX2ZwcyA9PT0gMCkgPyBfZW1wdHlGdW5jIDogKCFfdXNlUkFGIHx8ICFfcmVxQW5pbUZyYW1lKSA/IGZ1bmN0aW9uKGYpIHsgcmV0dXJuIHNldFRpbWVvdXQoZiwgKChfbmV4dFRpbWUgLSBfc2VsZi50aW1lKSAqIDEwMDAgKyAxKSB8IDApOyB9IDogX3JlcUFuaW1GcmFtZTtcblx0XHRcdFx0aWYgKF9zZWxmID09PSBfdGlja2VyKSB7XG5cdFx0XHRcdFx0X3RpY2tlckFjdGl2ZSA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3RpY2soMik7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi5mcHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX2Zwcztcblx0XHRcdFx0fVxuXHRcdFx0XHRfZnBzID0gdmFsdWU7XG5cdFx0XHRcdF9nYXAgPSAxIC8gKF9mcHMgfHwgNjApO1xuXHRcdFx0XHRfbmV4dFRpbWUgPSB0aGlzLnRpbWUgKyBfZ2FwO1xuXHRcdFx0XHRfc2VsZi53YWtlKCk7XG5cdFx0XHR9O1xuXG5cdFx0XHRfc2VsZi51c2VSQUYgPSBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm4gX3VzZVJBRjtcblx0XHRcdFx0fVxuXHRcdFx0XHRfc2VsZi5zbGVlcCgpO1xuXHRcdFx0XHRfdXNlUkFGID0gdmFsdWU7XG5cdFx0XHRcdF9zZWxmLmZwcyhfZnBzKTtcblx0XHRcdH07XG5cdFx0XHRfc2VsZi5mcHMoZnBzKTtcblxuXHRcdFx0Ly9hIGJ1ZyBpbiBpT1MgNiBTYWZhcmkgb2NjYXNpb25hbGx5IHByZXZlbnRzIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZnJvbSB3b3JraW5nIGluaXRpYWxseSwgc28gd2UgdXNlIGEgMS41LXNlY29uZCB0aW1lb3V0IHRoYXQgYXV0b21hdGljYWxseSBmYWxscyBiYWNrIHRvIHNldFRpbWVvdXQoKSBpZiBpdCBzZW5zZXMgdGhpcyBjb25kaXRpb24uXG5cdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoX3VzZVJBRiA9PT0gXCJhdXRvXCIgJiYgX3NlbGYuZnJhbWUgPCA1ICYmIGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSAhPT0gXCJoaWRkZW5cIikge1xuXHRcdFx0XHRcdF9zZWxmLnVzZVJBRihmYWxzZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIDE1MDApO1xuXHRcdH0pO1xuXG5cdFx0cCA9IGdzLlRpY2tlci5wcm90b3R5cGUgPSBuZXcgZ3MuZXZlbnRzLkV2ZW50RGlzcGF0Y2hlcigpO1xuXHRcdHAuY29uc3RydWN0b3IgPSBncy5UaWNrZXI7XG5cblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEFuaW1hdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdFx0dmFyIEFuaW1hdGlvbiA9IF9jbGFzcyhcImNvcmUuQW5pbWF0aW9uXCIsIGZ1bmN0aW9uKGR1cmF0aW9uLCB2YXJzKSB7XG5cdFx0XHRcdHRoaXMudmFycyA9IHZhcnMgPSB2YXJzIHx8IHt9O1xuXHRcdFx0XHR0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsRHVyYXRpb24gPSBkdXJhdGlvbiB8fCAwO1xuXHRcdFx0XHR0aGlzLl9kZWxheSA9IE51bWJlcih2YXJzLmRlbGF5KSB8fCAwO1xuXHRcdFx0XHR0aGlzLl90aW1lU2NhbGUgPSAxO1xuXHRcdFx0XHR0aGlzLl9hY3RpdmUgPSAodmFycy5pbW1lZGlhdGVSZW5kZXIgPT09IHRydWUpO1xuXHRcdFx0XHR0aGlzLmRhdGEgPSB2YXJzLmRhdGE7XG5cdFx0XHRcdHRoaXMuX3JldmVyc2VkID0gKHZhcnMucmV2ZXJzZWQgPT09IHRydWUpO1xuXG5cdFx0XHRcdGlmICghX3Jvb3RUaW1lbGluZSkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIV90aWNrZXJBY3RpdmUpIHsgLy9zb21lIGJyb3dzZXJzIChsaWtlIGlPUyA2IFNhZmFyaSkgc2h1dCBkb3duIEphdmFTY3JpcHQgZXhlY3V0aW9uIHdoZW4gdGhlIHRhYiBpcyBkaXNhYmxlZCBhbmQgdGhleSBbb2NjYXNpb25hbGx5XSBuZWdsZWN0IHRvIHN0YXJ0IHVwIHJlcXVlc3RBbmltYXRpb25GcmFtZSBhZ2FpbiB3aGVuIHJldHVybmluZyAtIHRoaXMgY29kZSBlbnN1cmVzIHRoYXQgdGhlIGVuZ2luZSBzdGFydHMgdXAgYWdhaW4gcHJvcGVybHkuXG5cdFx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgdGwgPSB0aGlzLnZhcnMudXNlRnJhbWVzID8gX3Jvb3RGcmFtZXNUaW1lbGluZSA6IF9yb290VGltZWxpbmU7XG5cdFx0XHRcdHRsLmFkZCh0aGlzLCB0bC5fdGltZSk7XG5cblx0XHRcdFx0aWYgKHRoaXMudmFycy5wYXVzZWQpIHtcblx0XHRcdFx0XHR0aGlzLnBhdXNlZCh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRfdGlja2VyID0gQW5pbWF0aW9uLnRpY2tlciA9IG5ldyBncy5UaWNrZXIoKTtcblx0XHRwID0gQW5pbWF0aW9uLnByb3RvdHlwZTtcblx0XHRwLl9kaXJ0eSA9IHAuX2djID0gcC5faW5pdHRlZCA9IHAuX3BhdXNlZCA9IGZhbHNlO1xuXHRcdHAuX3RvdGFsVGltZSA9IHAuX3RpbWUgPSAwO1xuXHRcdHAuX3Jhd1ByZXZUaW1lID0gLTE7XG5cdFx0cC5fbmV4dCA9IHAuX2xhc3QgPSBwLl9vblVwZGF0ZSA9IHAuX3RpbWVsaW5lID0gcC50aW1lbGluZSA9IG51bGw7XG5cdFx0cC5fcGF1c2VkID0gZmFsc2U7XG5cblxuXHRcdC8vc29tZSBicm93c2VycyAobGlrZSBpT1MpIG9jY2FzaW9uYWxseSBkcm9wIHRoZSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgZXZlbnQgd2hlbiB0aGUgdXNlciBzd2l0Y2hlcyB0byBhIGRpZmZlcmVudCB0YWIgYW5kIHRoZW4gY29tZXMgYmFjayBhZ2Fpbiwgc28gd2UgdXNlIGEgMi1zZWNvbmQgc2V0VGltZW91dCgpIHRvIHNlbnNlIGlmL3doZW4gdGhhdCBjb25kaXRpb24gb2NjdXJzIGFuZCB0aGVuIHdha2UoKSB0aGUgdGlja2VyLlxuXHRcdHZhciBfY2hlY2tUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmIChfdGlja2VyQWN0aXZlICYmIF9nZXRUaW1lKCkgLSBfbGFzdFVwZGF0ZSA+IDIwMDApIHtcblx0XHRcdFx0XHRfdGlja2VyLndha2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzZXRUaW1lb3V0KF9jaGVja1RpbWVvdXQsIDIwMDApO1xuXHRcdFx0fTtcblx0XHRfY2hlY2tUaW1lb3V0KCk7XG5cblxuXHRcdHAucGxheSA9IGZ1bmN0aW9uKGZyb20sIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoZnJvbSAhPSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuc2Vlayhmcm9tLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5yZXZlcnNlZChmYWxzZSkucGF1c2VkKGZhbHNlKTtcblx0XHR9O1xuXG5cdFx0cC5wYXVzZSA9IGZ1bmN0aW9uKGF0VGltZSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdGlmIChhdFRpbWUgIT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnNlZWsoYXRUaW1lLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5wYXVzZWQodHJ1ZSk7XG5cdFx0fTtcblxuXHRcdHAucmVzdW1lID0gZnVuY3Rpb24oZnJvbSwgc3VwcHJlc3NFdmVudHMpIHtcblx0XHRcdGlmIChmcm9tICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zZWVrKGZyb20sIHN1cHByZXNzRXZlbnRzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnBhdXNlZChmYWxzZSk7XG5cdFx0fTtcblxuXHRcdHAuc2VlayA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy50b3RhbFRpbWUoTnVtYmVyKHRpbWUpLCBzdXBwcmVzc0V2ZW50cyAhPT0gZmFsc2UpO1xuXHRcdH07XG5cblx0XHRwLnJlc3RhcnQgPSBmdW5jdGlvbihpbmNsdWRlRGVsYXksIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5yZXZlcnNlZChmYWxzZSkucGF1c2VkKGZhbHNlKS50b3RhbFRpbWUoaW5jbHVkZURlbGF5ID8gLXRoaXMuX2RlbGF5IDogMCwgKHN1cHByZXNzRXZlbnRzICE9PSBmYWxzZSksIHRydWUpO1xuXHRcdH07XG5cblx0XHRwLnJldmVyc2UgPSBmdW5jdGlvbihmcm9tLCBzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0aWYgKGZyb20gIT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnNlZWsoKGZyb20gfHwgdGhpcy50b3RhbER1cmF0aW9uKCkpLCBzdXBwcmVzc0V2ZW50cyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5yZXZlcnNlZCh0cnVlKS5wYXVzZWQoZmFsc2UpO1xuXHRcdH07XG5cblx0XHRwLnJlbmRlciA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSkge1xuXHRcdFx0Ly9zdHViIC0gd2Ugb3ZlcnJpZGUgdGhpcyBtZXRob2QgaW4gc3ViY2xhc3Nlcy5cblx0XHR9O1xuXG5cdFx0cC5pbnZhbGlkYXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl90aW1lID0gdGhpcy5fdG90YWxUaW1lID0gMDtcblx0XHRcdHRoaXMuX2luaXR0ZWQgPSB0aGlzLl9nYyA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSAtMTtcblx0XHRcdGlmICh0aGlzLl9nYyB8fCAhdGhpcy50aW1lbGluZSkge1xuXHRcdFx0XHR0aGlzLl9lbmFibGVkKHRydWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAuaXNBY3RpdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0bCA9IHRoaXMuX3RpbWVsaW5lLCAvL3RoZSAyIHJvb3QgdGltZWxpbmVzIHdvbid0IGhhdmUgYSBfdGltZWxpbmU7IHRoZXkncmUgYWx3YXlzIGFjdGl2ZS5cblx0XHRcdFx0c3RhcnRUaW1lID0gdGhpcy5fc3RhcnRUaW1lLFxuXHRcdFx0XHRyYXdUaW1lO1xuXHRcdFx0cmV0dXJuICghdGwgfHwgKCF0aGlzLl9nYyAmJiAhdGhpcy5fcGF1c2VkICYmIHRsLmlzQWN0aXZlKCkgJiYgKHJhd1RpbWUgPSB0bC5yYXdUaW1lKCkpID49IHN0YXJ0VGltZSAmJiByYXdUaW1lIDwgc3RhcnRUaW1lICsgdGhpcy50b3RhbER1cmF0aW9uKCkgLyB0aGlzLl90aW1lU2NhbGUpKTtcblx0XHR9O1xuXG5cdFx0cC5fZW5hYmxlZCA9IGZ1bmN0aW9uIChlbmFibGVkLCBpZ25vcmVUaW1lbGluZSkge1xuXHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7XG5cdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZ2MgPSAhZW5hYmxlZDtcblx0XHRcdHRoaXMuX2FjdGl2ZSA9IHRoaXMuaXNBY3RpdmUoKTtcblx0XHRcdGlmIChpZ25vcmVUaW1lbGluZSAhPT0gdHJ1ZSkge1xuXHRcdFx0XHRpZiAoZW5hYmxlZCAmJiAhdGhpcy50aW1lbGluZSkge1xuXHRcdFx0XHRcdHRoaXMuX3RpbWVsaW5lLmFkZCh0aGlzLCB0aGlzLl9zdGFydFRpbWUgLSB0aGlzLl9kZWxheSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWVuYWJsZWQgJiYgdGhpcy50aW1lbGluZSkge1xuXHRcdFx0XHRcdHRoaXMuX3RpbWVsaW5lLl9yZW1vdmUodGhpcywgdHJ1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cblx0XHRwLl9raWxsID0gZnVuY3Rpb24odmFycywgdGFyZ2V0KSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdH07XG5cblx0XHRwLmtpbGwgPSBmdW5jdGlvbih2YXJzLCB0YXJnZXQpIHtcblx0XHRcdHRoaXMuX2tpbGwodmFycywgdGFyZ2V0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLl91bmNhY2hlID0gZnVuY3Rpb24oaW5jbHVkZVNlbGYpIHtcblx0XHRcdHZhciB0d2VlbiA9IGluY2x1ZGVTZWxmID8gdGhpcyA6IHRoaXMudGltZWxpbmU7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0dHdlZW4uX2RpcnR5ID0gdHJ1ZTtcblx0XHRcdFx0dHdlZW4gPSB0d2Vlbi50aW1lbGluZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLl9zd2FwU2VsZkluUGFyYW1zID0gZnVuY3Rpb24ocGFyYW1zKSB7XG5cdFx0XHR2YXIgaSA9IHBhcmFtcy5sZW5ndGgsXG5cdFx0XHRcdGNvcHkgPSBwYXJhbXMuY29uY2F0KCk7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0aWYgKHBhcmFtc1tpXSA9PT0gXCJ7c2VsZn1cIikge1xuXHRcdFx0XHRcdGNvcHlbaV0gPSB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY29weTtcblx0XHR9O1xuXG5cdFx0cC5fY2FsbGJhY2sgPSBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHR2YXIgdiA9IHRoaXMudmFycyxcblx0XHRcdFx0Y2FsbGJhY2sgPSB2W3R5cGVdLFxuXHRcdFx0XHRwYXJhbXMgPSB2W3R5cGUgKyBcIlBhcmFtc1wiXSxcblx0XHRcdFx0c2NvcGUgPSB2W3R5cGUgKyBcIlNjb3BlXCJdIHx8IHYuY2FsbGJhY2tTY29wZSB8fCB0aGlzLFxuXHRcdFx0XHRsID0gcGFyYW1zID8gcGFyYW1zLmxlbmd0aCA6IDA7XG5cdFx0XHRzd2l0Y2ggKGwpIHsgLy9zcGVlZCBvcHRpbWl6YXRpb247IGNhbGwoKSBpcyBmYXN0ZXIgdGhhbiBhcHBseSgpIHNvIHVzZSBpdCB3aGVuIHRoZXJlIGFyZSBvbmx5IGEgZmV3IHBhcmFtZXRlcnMgKHdoaWNoIGlzIGJ5IGZhciBtb3N0IGNvbW1vbikuIFByZXZpb3VzbHkgd2Ugc2ltcGx5IGRpZCB2YXIgdiA9IHRoaXMudmFyczsgdlt0eXBlXS5hcHBseSh2W3R5cGUgKyBcIlNjb3BlXCJdIHx8IHYuY2FsbGJhY2tTY29wZSB8fCB0aGlzLCB2W3R5cGUgKyBcIlBhcmFtc1wiXSB8fCBfYmxhbmtBcnJheSk7XG5cdFx0XHRcdGNhc2UgMDogY2FsbGJhY2suY2FsbChzY29wZSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDE6IGNhbGxiYWNrLmNhbGwoc2NvcGUsIHBhcmFtc1swXSk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIDI6IGNhbGxiYWNrLmNhbGwoc2NvcGUsIHBhcmFtc1swXSwgcGFyYW1zWzFdKTsgYnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6IGNhbGxiYWNrLmFwcGx5KHNjb3BlLCBwYXJhbXMpO1xuXHRcdFx0fVxuXHRcdH07XG5cbi8vLS0tLUFuaW1hdGlvbiBnZXR0ZXJzL3NldHRlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHAuZXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uKHR5cGUsIGNhbGxiYWNrLCBwYXJhbXMsIHNjb3BlKSB7XG5cdFx0XHRpZiAoKHR5cGUgfHwgXCJcIikuc3Vic3RyKDAsMikgPT09IFwib25cIikge1xuXHRcdFx0XHR2YXIgdiA9IHRoaXMudmFycztcblx0XHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0XHRyZXR1cm4gdlt0eXBlXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2FsbGJhY2sgPT0gbnVsbCkge1xuXHRcdFx0XHRcdGRlbGV0ZSB2W3R5cGVdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZbdHlwZV0gPSBjYWxsYmFjaztcblx0XHRcdFx0XHR2W3R5cGUgKyBcIlBhcmFtc1wiXSA9IChfaXNBcnJheShwYXJhbXMpICYmIHBhcmFtcy5qb2luKFwiXCIpLmluZGV4T2YoXCJ7c2VsZn1cIikgIT09IC0xKSA/IHRoaXMuX3N3YXBTZWxmSW5QYXJhbXMocGFyYW1zKSA6IHBhcmFtcztcblx0XHRcdFx0XHR2W3R5cGUgKyBcIlNjb3BlXCJdID0gc2NvcGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHR5cGUgPT09IFwib25VcGRhdGVcIikge1xuXHRcdFx0XHRcdHRoaXMuX29uVXBkYXRlID0gY2FsbGJhY2s7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmRlbGF5ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZGVsYXk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcpIHtcblx0XHRcdFx0dGhpcy5zdGFydFRpbWUoIHRoaXMuX3N0YXJ0VGltZSArIHZhbHVlIC0gdGhpcy5fZGVsYXkgKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2RlbGF5ID0gdmFsdWU7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5kdXJhdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0dGhpcy5fZGlydHkgPSBmYWxzZTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2R1cmF0aW9uO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZHVyYXRpb24gPSB0aGlzLl90b3RhbER1cmF0aW9uID0gdmFsdWU7XG5cdFx0XHR0aGlzLl91bmNhY2hlKHRydWUpOyAvL3RydWUgaW4gY2FzZSBpdCdzIGEgVHdlZW5NYXggb3IgVGltZWxpbmVNYXggdGhhdCBoYXMgYSByZXBlYXQgLSB3ZSdsbCBuZWVkIHRvIHJlZnJlc2ggdGhlIHRvdGFsRHVyYXRpb24uXG5cdFx0XHRpZiAodGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcpIGlmICh0aGlzLl90aW1lID4gMCkgaWYgKHRoaXMuX3RpbWUgPCB0aGlzLl9kdXJhdGlvbikgaWYgKHZhbHVlICE9PSAwKSB7XG5cdFx0XHRcdHRoaXMudG90YWxUaW1lKHRoaXMuX3RvdGFsVGltZSAqICh2YWx1ZSAvIHRoaXMuX2R1cmF0aW9uKSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC50b3RhbER1cmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHRoaXMuX2RpcnR5ID0gZmFsc2U7XG5cdFx0XHRyZXR1cm4gKCFhcmd1bWVudHMubGVuZ3RoKSA/IHRoaXMuX3RvdGFsRHVyYXRpb24gOiB0aGlzLmR1cmF0aW9uKHZhbHVlKTtcblx0XHR9O1xuXG5cdFx0cC50aW1lID0gZnVuY3Rpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3RpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fZGlydHkpIHtcblx0XHRcdFx0dGhpcy50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy50b3RhbFRpbWUoKHZhbHVlID4gdGhpcy5fZHVyYXRpb24pID8gdGhpcy5fZHVyYXRpb24gOiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdH07XG5cblx0XHRwLnRvdGFsVGltZSA9IGZ1bmN0aW9uKHRpbWUsIHN1cHByZXNzRXZlbnRzLCB1bmNhcHBlZCkge1xuXHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlKSB7XG5cdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl90b3RhbFRpbWU7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fdGltZWxpbmUpIHtcblx0XHRcdFx0aWYgKHRpbWUgPCAwICYmICF1bmNhcHBlZCkge1xuXHRcdFx0XHRcdHRpbWUgKz0gdGhpcy50b3RhbER1cmF0aW9uKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX2RpcnR5KSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRvdGFsRHVyYXRpb24oKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIHRvdGFsRHVyYXRpb24gPSB0aGlzLl90b3RhbER1cmF0aW9uLFxuXHRcdFx0XHRcdFx0dGwgPSB0aGlzLl90aW1lbGluZTtcblx0XHRcdFx0XHRpZiAodGltZSA+IHRvdGFsRHVyYXRpb24gJiYgIXVuY2FwcGVkKSB7XG5cdFx0XHRcdFx0XHR0aW1lID0gdG90YWxEdXJhdGlvbjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gKHRoaXMuX3BhdXNlZCA/IHRoaXMuX3BhdXNlVGltZSA6IHRsLl90aW1lKSAtICgoIXRoaXMuX3JldmVyc2VkID8gdGltZSA6IHRvdGFsRHVyYXRpb24gLSB0aW1lKSAvIHRoaXMuX3RpbWVTY2FsZSk7XG5cdFx0XHRcdFx0aWYgKCF0bC5fZGlydHkpIHsgLy9mb3IgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnQuIElmIHRoZSBwYXJlbnQncyBjYWNoZSBpcyBhbHJlYWR5IGRpcnR5LCBpdCBhbHJlYWR5IHRvb2sgY2FyZSBvZiBtYXJraW5nIHRoZSBhbmNlc3RvcnMgYXMgZGlydHkgdG9vLCBzbyBza2lwIHRoZSBmdW5jdGlvbiBjYWxsIGhlcmUuXG5cdFx0XHRcdFx0XHR0aGlzLl91bmNhY2hlKGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly9pbiBjYXNlIGFueSBvZiB0aGUgYW5jZXN0b3IgdGltZWxpbmVzIGhhZCBjb21wbGV0ZWQgYnV0IHNob3VsZCBub3cgYmUgZW5hYmxlZCwgd2Ugc2hvdWxkIHJlc2V0IHRoZWlyIHRvdGFsVGltZSgpIHdoaWNoIHdpbGwgYWxzbyBlbnN1cmUgdGhhdCB0aGV5J3JlIGxpbmVkIHVwIHByb3Blcmx5IGFuZCBlbmFibGVkLiBTa2lwIGZvciBhbmltYXRpb25zIHRoYXQgYXJlIG9uIHRoZSByb290ICh3YXN0ZWZ1bCkuIEV4YW1wbGU6IGEgVGltZWxpbmVMaXRlLmV4cG9ydFJvb3QoKSBpcyBwZXJmb3JtZWQgd2hlbiB0aGVyZSdzIGEgcGF1c2VkIHR3ZWVuIG9uIHRoZSByb290LCB0aGUgZXhwb3J0IHdpbGwgbm90IGNvbXBsZXRlIHVudGlsIHRoYXQgdHdlZW4gaXMgdW5wYXVzZWQsIGJ1dCBpbWFnaW5lIGEgY2hpbGQgZ2V0cyByZXN0YXJ0ZWQgbGF0ZXIsIGFmdGVyIGFsbCBbdW5wYXVzZWRdIHR3ZWVucyBoYXZlIGNvbXBsZXRlZC4gVGhlIHN0YXJ0VGltZSBvZiB0aGF0IGNoaWxkIHdvdWxkIGdldCBwdXNoZWQgb3V0LCBidXQgb25lIG9mIHRoZSBhbmNlc3RvcnMgbWF5IGhhdmUgY29tcGxldGVkLlxuXHRcdFx0XHRcdGlmICh0bC5fdGltZWxpbmUpIHtcblx0XHRcdFx0XHRcdHdoaWxlICh0bC5fdGltZWxpbmUpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHRsLl90aW1lbGluZS5fdGltZSAhPT0gKHRsLl9zdGFydFRpbWUgKyB0bC5fdG90YWxUaW1lKSAvIHRsLl90aW1lU2NhbGUpIHtcblx0XHRcdFx0XHRcdFx0XHR0bC50b3RhbFRpbWUodGwuX3RvdGFsVGltZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dGwgPSB0bC5fdGltZWxpbmU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLl9nYykge1xuXHRcdFx0XHRcdHRoaXMuX2VuYWJsZWQodHJ1ZSwgZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aGlzLl90b3RhbFRpbWUgIT09IHRpbWUgfHwgdGhpcy5fZHVyYXRpb24gPT09IDApIHtcblx0XHRcdFx0XHRpZiAoX2xhenlUd2VlbnMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRfbGF6eVJlbmRlcigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLnJlbmRlcih0aW1lLCBzdXBwcmVzc0V2ZW50cywgZmFsc2UpO1xuXHRcdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHsgLy9pbiBjYXNlIHJlbmRlcmluZyBjYXVzZWQgYW55IHR3ZWVucyB0byBsYXp5LWluaXQsIHdlIHNob3VsZCByZW5kZXIgdGhlbSBiZWNhdXNlIHR5cGljYWxseSB3aGVuIHNvbWVvbmUgY2FsbHMgc2VlaygpIG9yIHRpbWUoKSBvciBwcm9ncmVzcygpLCB0aGV5IGV4cGVjdCBhbiBpbW1lZGlhdGUgcmVuZGVyLlxuXHRcdFx0XHRcdFx0X2xhenlSZW5kZXIoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnByb2dyZXNzID0gcC50b3RhbFByb2dyZXNzID0gZnVuY3Rpb24odmFsdWUsIHN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHR2YXIgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uKCk7XG5cdFx0XHRyZXR1cm4gKCFhcmd1bWVudHMubGVuZ3RoKSA/IChkdXJhdGlvbiA/IHRoaXMuX3RpbWUgLyBkdXJhdGlvbiA6IHRoaXMucmF0aW8pIDogdGhpcy50b3RhbFRpbWUoZHVyYXRpb24gKiB2YWx1ZSwgc3VwcHJlc3NFdmVudHMpO1xuXHRcdH07XG5cblx0XHRwLnN0YXJ0VGltZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3N0YXJ0VGltZTtcblx0XHRcdH1cblx0XHRcdGlmICh2YWx1ZSAhPT0gdGhpcy5fc3RhcnRUaW1lKSB7XG5cdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9IHZhbHVlO1xuXHRcdFx0XHRpZiAodGhpcy50aW1lbGluZSkgaWYgKHRoaXMudGltZWxpbmUuX3NvcnRDaGlsZHJlbikge1xuXHRcdFx0XHRcdHRoaXMudGltZWxpbmUuYWRkKHRoaXMsIHZhbHVlIC0gdGhpcy5fZGVsYXkpOyAvL2Vuc3VyZXMgdGhhdCBhbnkgbmVjZXNzYXJ5IHJlLXNlcXVlbmNpbmcgb2YgQW5pbWF0aW9ucyBpbiB0aGUgdGltZWxpbmUgb2NjdXJzIHRvIG1ha2Ugc3VyZSB0aGUgcmVuZGVyaW5nIG9yZGVyIGlzIGNvcnJlY3QuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmVuZFRpbWUgPSBmdW5jdGlvbihpbmNsdWRlUmVwZWF0cykge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3N0YXJ0VGltZSArICgoaW5jbHVkZVJlcGVhdHMgIT0gZmFsc2UpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgOiB0aGlzLmR1cmF0aW9uKCkpIC8gdGhpcy5fdGltZVNjYWxlO1xuXHRcdH07XG5cblx0XHRwLnRpbWVTY2FsZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3RpbWVTY2FsZTtcblx0XHRcdH1cblx0XHRcdHZhbHVlID0gdmFsdWUgfHwgX3RpbnlOdW07IC8vY2FuJ3QgYWxsb3cgemVybyBiZWNhdXNlIGl0J2xsIHRocm93IHRoZSBtYXRoIG9mZlxuXHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lICYmIHRoaXMuX3RpbWVsaW5lLnNtb290aENoaWxkVGltaW5nKSB7XG5cdFx0XHRcdHZhciBwYXVzZVRpbWUgPSB0aGlzLl9wYXVzZVRpbWUsXG5cdFx0XHRcdFx0dCA9IChwYXVzZVRpbWUgfHwgcGF1c2VUaW1lID09PSAwKSA/IHBhdXNlVGltZSA6IHRoaXMuX3RpbWVsaW5lLnRvdGFsVGltZSgpO1xuXHRcdFx0XHR0aGlzLl9zdGFydFRpbWUgPSB0IC0gKCh0IC0gdGhpcy5fc3RhcnRUaW1lKSAqIHRoaXMuX3RpbWVTY2FsZSAvIHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3RpbWVTY2FsZSA9IHZhbHVlO1xuXHRcdFx0cmV0dXJuIHRoaXMuX3VuY2FjaGUoZmFsc2UpO1xuXHRcdH07XG5cblx0XHRwLnJldmVyc2VkID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fcmV2ZXJzZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT0gdGhpcy5fcmV2ZXJzZWQpIHtcblx0XHRcdFx0dGhpcy5fcmV2ZXJzZWQgPSB2YWx1ZTtcblx0XHRcdFx0dGhpcy50b3RhbFRpbWUoKCh0aGlzLl90aW1lbGluZSAmJiAhdGhpcy5fdGltZWxpbmUuc21vb3RoQ2hpbGRUaW1pbmcpID8gdGhpcy50b3RhbER1cmF0aW9uKCkgLSB0aGlzLl90b3RhbFRpbWUgOiB0aGlzLl90b3RhbFRpbWUpLCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLnBhdXNlZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3BhdXNlZDtcblx0XHRcdH1cblx0XHRcdHZhciB0bCA9IHRoaXMuX3RpbWVsaW5lLFxuXHRcdFx0XHRyYXcsIGVsYXBzZWQ7XG5cdFx0XHRpZiAodmFsdWUgIT0gdGhpcy5fcGF1c2VkKSBpZiAodGwpIHtcblx0XHRcdFx0aWYgKCFfdGlja2VyQWN0aXZlICYmICF2YWx1ZSkge1xuXHRcdFx0XHRcdF90aWNrZXIud2FrZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJhdyA9IHRsLnJhd1RpbWUoKTtcblx0XHRcdFx0ZWxhcHNlZCA9IHJhdyAtIHRoaXMuX3BhdXNlVGltZTtcblx0XHRcdFx0aWYgKCF2YWx1ZSAmJiB0bC5zbW9vdGhDaGlsZFRpbWluZykge1xuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0VGltZSArPSBlbGFwc2VkO1xuXHRcdFx0XHRcdHRoaXMuX3VuY2FjaGUoZmFsc2UpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3BhdXNlVGltZSA9IHZhbHVlID8gcmF3IDogbnVsbDtcblx0XHRcdFx0dGhpcy5fcGF1c2VkID0gdmFsdWU7XG5cdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IHRoaXMuaXNBY3RpdmUoKTtcblx0XHRcdFx0aWYgKCF2YWx1ZSAmJiBlbGFwc2VkICE9PSAwICYmIHRoaXMuX2luaXR0ZWQgJiYgdGhpcy5kdXJhdGlvbigpKSB7XG5cdFx0XHRcdFx0cmF3ID0gdGwuc21vb3RoQ2hpbGRUaW1pbmcgPyB0aGlzLl90b3RhbFRpbWUgOiAocmF3IC0gdGhpcy5fc3RhcnRUaW1lKSAvIHRoaXMuX3RpbWVTY2FsZTtcblx0XHRcdFx0XHR0aGlzLnJlbmRlcihyYXcsIChyYXcgPT09IHRoaXMuX3RvdGFsVGltZSksIHRydWUpOyAvL2luIGNhc2UgdGhlIHRhcmdldCdzIHByb3BlcnRpZXMgY2hhbmdlZCB2aWEgc29tZSBvdGhlciB0d2VlbiBvciBtYW51YWwgdXBkYXRlIGJ5IHRoZSB1c2VyLCB3ZSBzaG91bGQgZm9yY2UgYSByZW5kZXIuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9nYyAmJiAhdmFsdWUpIHtcblx0XHRcdFx0dGhpcy5fZW5hYmxlZCh0cnVlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBTaW1wbGVUaW1lbGluZVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdFx0dmFyIFNpbXBsZVRpbWVsaW5lID0gX2NsYXNzKFwiY29yZS5TaW1wbGVUaW1lbGluZVwiLCBmdW5jdGlvbih2YXJzKSB7XG5cdFx0XHRBbmltYXRpb24uY2FsbCh0aGlzLCAwLCB2YXJzKTtcblx0XHRcdHRoaXMuYXV0b1JlbW92ZUNoaWxkcmVuID0gdGhpcy5zbW9vdGhDaGlsZFRpbWluZyA9IHRydWU7XG5cdFx0fSk7XG5cblx0XHRwID0gU2ltcGxlVGltZWxpbmUucHJvdG90eXBlID0gbmV3IEFuaW1hdGlvbigpO1xuXHRcdHAuY29uc3RydWN0b3IgPSBTaW1wbGVUaW1lbGluZTtcblx0XHRwLmtpbGwoKS5fZ2MgPSBmYWxzZTtcblx0XHRwLl9maXJzdCA9IHAuX2xhc3QgPSBwLl9yZWNlbnQgPSBudWxsO1xuXHRcdHAuX3NvcnRDaGlsZHJlbiA9IGZhbHNlO1xuXG5cdFx0cC5hZGQgPSBwLmluc2VydCA9IGZ1bmN0aW9uKGNoaWxkLCBwb3NpdGlvbiwgYWxpZ24sIHN0YWdnZXIpIHtcblx0XHRcdHZhciBwcmV2VHdlZW4sIHN0O1xuXHRcdFx0Y2hpbGQuX3N0YXJ0VGltZSA9IE51bWJlcihwb3NpdGlvbiB8fCAwKSArIGNoaWxkLl9kZWxheTtcblx0XHRcdGlmIChjaGlsZC5fcGF1c2VkKSBpZiAodGhpcyAhPT0gY2hpbGQuX3RpbWVsaW5lKSB7IC8vd2Ugb25seSBhZGp1c3QgdGhlIF9wYXVzZVRpbWUgaWYgaXQgd2Fzbid0IGluIHRoaXMgdGltZWxpbmUgYWxyZWFkeS4gUmVtZW1iZXIsIHNvbWV0aW1lcyBhIHR3ZWVuIHdpbGwgYmUgaW5zZXJ0ZWQgYWdhaW4gaW50byB0aGUgc2FtZSB0aW1lbGluZSB3aGVuIGl0cyBzdGFydFRpbWUgaXMgY2hhbmdlZCBzbyB0aGF0IHRoZSB0d2VlbnMgaW4gdGhlIFRpbWVsaW5lTGl0ZS9NYXggYXJlIHJlLW9yZGVyZWQgcHJvcGVybHkgaW4gdGhlIGxpbmtlZCBsaXN0IChzbyBldmVyeXRoaW5nIHJlbmRlcnMgaW4gdGhlIHByb3BlciBvcmRlcikuXG5cdFx0XHRcdGNoaWxkLl9wYXVzZVRpbWUgPSBjaGlsZC5fc3RhcnRUaW1lICsgKCh0aGlzLnJhd1RpbWUoKSAtIGNoaWxkLl9zdGFydFRpbWUpIC8gY2hpbGQuX3RpbWVTY2FsZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2hpbGQudGltZWxpbmUpIHtcblx0XHRcdFx0Y2hpbGQudGltZWxpbmUuX3JlbW92ZShjaGlsZCwgdHJ1ZSk7IC8vcmVtb3ZlcyBmcm9tIGV4aXN0aW5nIHRpbWVsaW5lIHNvIHRoYXQgaXQgY2FuIGJlIHByb3Blcmx5IGFkZGVkIHRvIHRoaXMgb25lLlxuXHRcdFx0fVxuXHRcdFx0Y2hpbGQudGltZWxpbmUgPSBjaGlsZC5fdGltZWxpbmUgPSB0aGlzO1xuXHRcdFx0aWYgKGNoaWxkLl9nYykge1xuXHRcdFx0XHRjaGlsZC5fZW5hYmxlZCh0cnVlLCB0cnVlKTtcblx0XHRcdH1cblx0XHRcdHByZXZUd2VlbiA9IHRoaXMuX2xhc3Q7XG5cdFx0XHRpZiAodGhpcy5fc29ydENoaWxkcmVuKSB7XG5cdFx0XHRcdHN0ID0gY2hpbGQuX3N0YXJ0VGltZTtcblx0XHRcdFx0d2hpbGUgKHByZXZUd2VlbiAmJiBwcmV2VHdlZW4uX3N0YXJ0VGltZSA+IHN0KSB7XG5cdFx0XHRcdFx0cHJldlR3ZWVuID0gcHJldlR3ZWVuLl9wcmV2O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAocHJldlR3ZWVuKSB7XG5cdFx0XHRcdGNoaWxkLl9uZXh0ID0gcHJldlR3ZWVuLl9uZXh0O1xuXHRcdFx0XHRwcmV2VHdlZW4uX25leHQgPSBjaGlsZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoaWxkLl9uZXh0ID0gdGhpcy5fZmlyc3Q7XG5cdFx0XHRcdHRoaXMuX2ZpcnN0ID0gY2hpbGQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2hpbGQuX25leHQpIHtcblx0XHRcdFx0Y2hpbGQuX25leHQuX3ByZXYgPSBjaGlsZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX2xhc3QgPSBjaGlsZDtcblx0XHRcdH1cblx0XHRcdGNoaWxkLl9wcmV2ID0gcHJldlR3ZWVuO1xuXHRcdFx0dGhpcy5fcmVjZW50ID0gY2hpbGQ7XG5cdFx0XHRpZiAodGhpcy5fdGltZWxpbmUpIHtcblx0XHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLl9yZW1vdmUgPSBmdW5jdGlvbih0d2Vlbiwgc2tpcERpc2FibGUpIHtcblx0XHRcdGlmICh0d2Vlbi50aW1lbGluZSA9PT0gdGhpcykge1xuXHRcdFx0XHRpZiAoIXNraXBEaXNhYmxlKSB7XG5cdFx0XHRcdFx0dHdlZW4uX2VuYWJsZWQoZmFsc2UsIHRydWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHR3ZWVuLl9wcmV2KSB7XG5cdFx0XHRcdFx0dHdlZW4uX3ByZXYuX25leHQgPSB0d2Vlbi5fbmV4dDtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl9maXJzdCA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHR0aGlzLl9maXJzdCA9IHR3ZWVuLl9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0d2Vlbi5fbmV4dCkge1xuXHRcdFx0XHRcdHR3ZWVuLl9uZXh0Ll9wcmV2ID0gdHdlZW4uX3ByZXY7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fbGFzdCA9PT0gdHdlZW4pIHtcblx0XHRcdFx0XHR0aGlzLl9sYXN0ID0gdHdlZW4uX3ByZXY7XG5cdFx0XHRcdH1cblx0XHRcdFx0dHdlZW4uX25leHQgPSB0d2Vlbi5fcHJldiA9IHR3ZWVuLnRpbWVsaW5lID0gbnVsbDtcblx0XHRcdFx0aWYgKHR3ZWVuID09PSB0aGlzLl9yZWNlbnQpIHtcblx0XHRcdFx0XHR0aGlzLl9yZWNlbnQgPSB0aGlzLl9sYXN0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHRoaXMuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0dGhpcy5fdW5jYWNoZSh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fTtcblxuXHRcdHAucmVuZGVyID0gZnVuY3Rpb24odGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLl9maXJzdCxcblx0XHRcdFx0bmV4dDtcblx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RpbWUgPSB0aGlzLl9yYXdQcmV2VGltZSA9IHRpbWU7XG5cdFx0XHR3aGlsZSAodHdlZW4pIHtcblx0XHRcdFx0bmV4dCA9IHR3ZWVuLl9uZXh0OyAvL3JlY29yZCBpdCBoZXJlIGJlY2F1c2UgdGhlIHZhbHVlIGNvdWxkIGNoYW5nZSBhZnRlciByZW5kZXJpbmcuLi5cblx0XHRcdFx0aWYgKHR3ZWVuLl9hY3RpdmUgfHwgKHRpbWUgPj0gdHdlZW4uX3N0YXJ0VGltZSAmJiAhdHdlZW4uX3BhdXNlZCkpIHtcblx0XHRcdFx0XHRpZiAoIXR3ZWVuLl9yZXZlcnNlZCkge1xuXHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKCh0aW1lIC0gdHdlZW4uX3N0YXJ0VGltZSkgKiB0d2Vlbi5fdGltZVNjYWxlLCBzdXBwcmVzc0V2ZW50cywgZm9yY2UpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIoKCghdHdlZW4uX2RpcnR5KSA/IHR3ZWVuLl90b3RhbER1cmF0aW9uIDogdHdlZW4udG90YWxEdXJhdGlvbigpKSAtICgodGltZSAtIHR3ZWVuLl9zdGFydFRpbWUpICogdHdlZW4uX3RpbWVTY2FsZSksIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHR3ZWVuID0gbmV4dDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0cC5yYXdUaW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIV90aWNrZXJBY3RpdmUpIHtcblx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fdG90YWxUaW1lO1xuXHRcdH07XG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBUd2VlbkxpdGVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRcdHZhciBUd2VlbkxpdGUgPSBfY2xhc3MoXCJUd2VlbkxpdGVcIiwgZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0XHRBbmltYXRpb24uY2FsbCh0aGlzLCBkdXJhdGlvbiwgdmFycyk7XG5cdFx0XHRcdHRoaXMucmVuZGVyID0gVHdlZW5MaXRlLnByb3RvdHlwZS5yZW5kZXI7IC8vc3BlZWQgb3B0aW1pemF0aW9uIChhdm9pZCBwcm90b3R5cGUgbG9va3VwIG9uIHRoaXMgXCJob3RcIiBtZXRob2QpXG5cblx0XHRcdFx0aWYgKHRhcmdldCA9PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhyb3cgXCJDYW5ub3QgdHdlZW4gYSBudWxsIHRhcmdldC5cIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudGFyZ2V0ID0gdGFyZ2V0ID0gKHR5cGVvZih0YXJnZXQpICE9PSBcInN0cmluZ1wiKSA/IHRhcmdldCA6IFR3ZWVuTGl0ZS5zZWxlY3Rvcih0YXJnZXQpIHx8IHRhcmdldDtcblxuXHRcdFx0XHR2YXIgaXNTZWxlY3RvciA9ICh0YXJnZXQuanF1ZXJ5IHx8ICh0YXJnZXQubGVuZ3RoICYmIHRhcmdldCAhPT0gd2luZG93ICYmIHRhcmdldFswXSAmJiAodGFyZ2V0WzBdID09PSB3aW5kb3cgfHwgKHRhcmdldFswXS5ub2RlVHlwZSAmJiB0YXJnZXRbMF0uc3R5bGUgJiYgIXRhcmdldC5ub2RlVHlwZSkpKSksXG5cdFx0XHRcdFx0b3ZlcndyaXRlID0gdGhpcy52YXJzLm92ZXJ3cml0ZSxcblx0XHRcdFx0XHRpLCB0YXJnLCB0YXJnZXRzO1xuXG5cdFx0XHRcdHRoaXMuX292ZXJ3cml0ZSA9IG92ZXJ3cml0ZSA9IChvdmVyd3JpdGUgPT0gbnVsbCkgPyBfb3ZlcndyaXRlTG9va3VwW1R3ZWVuTGl0ZS5kZWZhdWx0T3ZlcndyaXRlXSA6ICh0eXBlb2Yob3ZlcndyaXRlKSA9PT0gXCJudW1iZXJcIikgPyBvdmVyd3JpdGUgPj4gMCA6IF9vdmVyd3JpdGVMb29rdXBbb3ZlcndyaXRlXTtcblxuXHRcdFx0XHRpZiAoKGlzU2VsZWN0b3IgfHwgdGFyZ2V0IGluc3RhbmNlb2YgQXJyYXkgfHwgKHRhcmdldC5wdXNoICYmIF9pc0FycmF5KHRhcmdldCkpKSAmJiB0eXBlb2YodGFyZ2V0WzBdKSAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdHRoaXMuX3RhcmdldHMgPSB0YXJnZXRzID0gX3NsaWNlKHRhcmdldCk7ICAvL2Rvbid0IHVzZSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0YXJnZXQsIDApIGJlY2F1c2UgdGhhdCBkb2Vzbid0IHdvcmsgaW4gSUU4IHdpdGggYSBOb2RlTGlzdCB0aGF0J3MgcmV0dXJuZWQgYnkgcXVlcnlTZWxlY3RvckFsbCgpXG5cdFx0XHRcdFx0dGhpcy5fcHJvcExvb2t1cCA9IFtdO1xuXHRcdFx0XHRcdHRoaXMuX3NpYmxpbmdzID0gW107XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHRhcmcgPSB0YXJnZXRzW2ldO1xuXHRcdFx0XHRcdFx0aWYgKCF0YXJnKSB7XG5cdFx0XHRcdFx0XHRcdHRhcmdldHMuc3BsaWNlKGktLSwgMSk7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YodGFyZykgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRcdFx0dGFyZyA9IHRhcmdldHNbaS0tXSA9IFR3ZWVuTGl0ZS5zZWxlY3Rvcih0YXJnKTsgLy9pbiBjYXNlIGl0J3MgYW4gYXJyYXkgb2Ygc3RyaW5nc1xuXHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mKHRhcmcpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGFyZ2V0cy5zcGxpY2UoaSsxLCAxKTsgLy90byBhdm9pZCBhbiBlbmRsZXNzIGxvb3AgKGNhbid0IGltYWdpbmUgd2h5IHRoZSBzZWxlY3RvciB3b3VsZCByZXR1cm4gYSBzdHJpbmcsIGJ1dCBqdXN0IGluIGNhc2UpXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHRhcmcubGVuZ3RoICYmIHRhcmcgIT09IHdpbmRvdyAmJiB0YXJnWzBdICYmICh0YXJnWzBdID09PSB3aW5kb3cgfHwgKHRhcmdbMF0ubm9kZVR5cGUgJiYgdGFyZ1swXS5zdHlsZSAmJiAhdGFyZy5ub2RlVHlwZSkpKSB7IC8vaW4gY2FzZSB0aGUgdXNlciBpcyBwYXNzaW5nIGluIGFuIGFycmF5IG9mIHNlbGVjdG9yIG9iamVjdHMgKGxpa2UgalF1ZXJ5IG9iamVjdHMpLCB3ZSBuZWVkIHRvIGNoZWNrIG9uZSBtb3JlIGxldmVsIGFuZCBwdWxsIHRoaW5ncyBvdXQgaWYgbmVjZXNzYXJ5LiBBbHNvIG5vdGUgdGhhdCA8c2VsZWN0PiBlbGVtZW50cyBwYXNzIGFsbCB0aGUgY3JpdGVyaWEgcmVnYXJkaW5nIGxlbmd0aCBhbmQgdGhlIGZpcnN0IGNoaWxkIGhhdmluZyBzdHlsZSwgc28gd2UgbXVzdCBhbHNvIGNoZWNrIHRvIGVuc3VyZSB0aGUgdGFyZ2V0IGlzbid0IGFuIEhUTUwgbm9kZSBpdHNlbGYuXG5cdFx0XHRcdFx0XHRcdHRhcmdldHMuc3BsaWNlKGktLSwgMSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3RhcmdldHMgPSB0YXJnZXRzID0gdGFyZ2V0cy5jb25jYXQoX3NsaWNlKHRhcmcpKTtcblx0XHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0aGlzLl9zaWJsaW5nc1tpXSA9IF9yZWdpc3Rlcih0YXJnLCB0aGlzLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRpZiAob3ZlcndyaXRlID09PSAxKSBpZiAodGhpcy5fc2libGluZ3NbaV0ubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0XHRfYXBwbHlPdmVyd3JpdGUodGFyZywgdGhpcywgbnVsbCwgMSwgdGhpcy5fc2libGluZ3NbaV0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuX3Byb3BMb29rdXAgPSB7fTtcblx0XHRcdFx0XHR0aGlzLl9zaWJsaW5ncyA9IF9yZWdpc3Rlcih0YXJnZXQsIHRoaXMsIGZhbHNlKTtcblx0XHRcdFx0XHRpZiAob3ZlcndyaXRlID09PSAxKSBpZiAodGhpcy5fc2libGluZ3MubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0X2FwcGx5T3ZlcndyaXRlKHRhcmdldCwgdGhpcywgbnVsbCwgMSwgdGhpcy5fc2libGluZ3MpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy52YXJzLmltbWVkaWF0ZVJlbmRlciB8fCAoZHVyYXRpb24gPT09IDAgJiYgdGhpcy5fZGVsYXkgPT09IDAgJiYgdGhpcy52YXJzLmltbWVkaWF0ZVJlbmRlciAhPT0gZmFsc2UpKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cdFx0XHRcdFx0dGhpcy5yZW5kZXIoTWF0aC5taW4oMCwgLXRoaXMuX2RlbGF5KSk7IC8vaW4gY2FzZSBkZWxheSBpcyBuZWdhdGl2ZVxuXHRcdFx0XHR9XG5cdFx0XHR9LCB0cnVlKSxcblx0XHRcdF9pc1NlbGVjdG9yID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHRyZXR1cm4gKHYgJiYgdi5sZW5ndGggJiYgdiAhPT0gd2luZG93ICYmIHZbMF0gJiYgKHZbMF0gPT09IHdpbmRvdyB8fCAodlswXS5ub2RlVHlwZSAmJiB2WzBdLnN0eWxlICYmICF2Lm5vZGVUeXBlKSkpOyAvL3dlIGNhbm5vdCBjaGVjayBcIm5vZGVUeXBlXCIgaWYgdGhlIHRhcmdldCBpcyB3aW5kb3cgZnJvbSB3aXRoaW4gYW4gaWZyYW1lLCBvdGhlcndpc2UgaXQgd2lsbCB0cmlnZ2VyIGEgc2VjdXJpdHkgZXJyb3IgaW4gc29tZSBicm93c2VycyBsaWtlIEZpcmVmb3guXG5cdFx0XHR9LFxuXHRcdFx0X2F1dG9DU1MgPSBmdW5jdGlvbih2YXJzLCB0YXJnZXQpIHtcblx0XHRcdFx0dmFyIGNzcyA9IHt9LFxuXHRcdFx0XHRcdHA7XG5cdFx0XHRcdGZvciAocCBpbiB2YXJzKSB7XG5cdFx0XHRcdFx0aWYgKCFfcmVzZXJ2ZWRQcm9wc1twXSAmJiAoIShwIGluIHRhcmdldCkgfHwgcCA9PT0gXCJ0cmFuc2Zvcm1cIiB8fCBwID09PSBcInhcIiB8fCBwID09PSBcInlcIiB8fCBwID09PSBcIndpZHRoXCIgfHwgcCA9PT0gXCJoZWlnaHRcIiB8fCBwID09PSBcImNsYXNzTmFtZVwiIHx8IHAgPT09IFwiYm9yZGVyXCIpICYmICghX3BsdWdpbnNbcF0gfHwgKF9wbHVnaW5zW3BdICYmIF9wbHVnaW5zW3BdLl9hdXRvQ1NTKSkpIHsgLy9ub3RlOiA8aW1nPiBlbGVtZW50cyBjb250YWluIHJlYWQtb25seSBcInhcIiBhbmQgXCJ5XCIgcHJvcGVydGllcy4gV2Ugc2hvdWxkIGFsc28gcHJpb3JpdGl6ZSBlZGl0aW5nIGNzcyB3aWR0aC9oZWlnaHQgcmF0aGVyIHRoYW4gdGhlIGVsZW1lbnQncyBwcm9wZXJ0aWVzLlxuXHRcdFx0XHRcdFx0Y3NzW3BdID0gdmFyc1twXTtcblx0XHRcdFx0XHRcdGRlbGV0ZSB2YXJzW3BdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHR2YXJzLmNzcyA9IGNzcztcblx0XHRcdH07XG5cblx0XHRwID0gVHdlZW5MaXRlLnByb3RvdHlwZSA9IG5ldyBBbmltYXRpb24oKTtcblx0XHRwLmNvbnN0cnVjdG9yID0gVHdlZW5MaXRlO1xuXHRcdHAua2lsbCgpLl9nYyA9IGZhbHNlO1xuXG4vLy0tLS1Ud2VlbkxpdGUgZGVmYXVsdHMsIG92ZXJ3cml0ZSBtYW5hZ2VtZW50LCBhbmQgcm9vdCB1cGRhdGVzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXHRcdHAucmF0aW8gPSAwO1xuXHRcdHAuX2ZpcnN0UFQgPSBwLl90YXJnZXRzID0gcC5fb3ZlcndyaXR0ZW5Qcm9wcyA9IHAuX3N0YXJ0QXQgPSBudWxsO1xuXHRcdHAuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQgPSBwLl9sYXp5ID0gZmFsc2U7XG5cblx0XHRUd2VlbkxpdGUudmVyc2lvbiA9IFwiMS4xOS4wXCI7XG5cdFx0VHdlZW5MaXRlLmRlZmF1bHRFYXNlID0gcC5fZWFzZSA9IG5ldyBFYXNlKG51bGwsIG51bGwsIDEsIDEpO1xuXHRcdFR3ZWVuTGl0ZS5kZWZhdWx0T3ZlcndyaXRlID0gXCJhdXRvXCI7XG5cdFx0VHdlZW5MaXRlLnRpY2tlciA9IF90aWNrZXI7XG5cdFx0VHdlZW5MaXRlLmF1dG9TbGVlcCA9IDEyMDtcblx0XHRUd2VlbkxpdGUubGFnU21vb3RoaW5nID0gZnVuY3Rpb24odGhyZXNob2xkLCBhZGp1c3RlZExhZykge1xuXHRcdFx0X3RpY2tlci5sYWdTbW9vdGhpbmcodGhyZXNob2xkLCBhZGp1c3RlZExhZyk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5zZWxlY3RvciA9IHdpbmRvdy4kIHx8IHdpbmRvdy5qUXVlcnkgfHwgZnVuY3Rpb24oZSkge1xuXHRcdFx0dmFyIHNlbGVjdG9yID0gd2luZG93LiQgfHwgd2luZG93LmpRdWVyeTtcblx0XHRcdGlmIChzZWxlY3Rvcikge1xuXHRcdFx0XHRUd2VlbkxpdGUuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0cmV0dXJuIHNlbGVjdG9yKGUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICh0eXBlb2YoZG9jdW1lbnQpID09PSBcInVuZGVmaW5lZFwiKSA/IGUgOiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZSkgOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgoZS5jaGFyQXQoMCkgPT09IFwiI1wiKSA/IGUuc3Vic3RyKDEpIDogZSkpO1xuXHRcdH07XG5cblx0XHR2YXIgX2xhenlUd2VlbnMgPSBbXSxcblx0XHRcdF9sYXp5TG9va3VwID0ge30sXG5cdFx0XHRfbnVtYmVyc0V4cCA9IC8oPzooLXwtPXxcXCs9KT9cXGQqXFwuP1xcZCooPzplW1xcLStdP1xcZCspPylbMC05XS9pZyxcblx0XHRcdC8vX25vbk51bWJlcnNFeHAgPSAvKD86KFtcXC0rXSg/IShcXGR8PSkpKXxbXlxcZFxcLSs9ZV18KGUoPyFbXFwtK11bXFxkXSkpKSsvaWcsXG5cdFx0XHRfc2V0UmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHZhciBwdCA9IHRoaXMuX2ZpcnN0UFQsXG5cdFx0XHRcdFx0bWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdFx0dmFsO1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHR2YWwgPSAhcHQuYmxvYiA/IHB0LmMgKiB2ICsgcHQucyA6IHYgPyB0aGlzLmpvaW4oXCJcIikgOiB0aGlzLnN0YXJ0O1xuXHRcdFx0XHRcdGlmIChwdC5tKSB7XG5cdFx0XHRcdFx0XHR2YWwgPSBwdC5tKHZhbCwgdGhpcy5fdGFyZ2V0IHx8IHB0LnQpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodmFsIDwgbWluKSBpZiAodmFsID4gLW1pbikgeyAvL3ByZXZlbnRzIGlzc3VlcyB3aXRoIGNvbnZlcnRpbmcgdmVyeSBzbWFsbCBudW1iZXJzIHRvIHN0cmluZ3MgaW4gdGhlIGJyb3dzZXJcblx0XHRcdFx0XHRcdHZhbCA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghcHQuZikge1xuXHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHZhbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LmZwKSB7XG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdKHB0LmZwLCB2YWwpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdKHZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHQvL2NvbXBhcmVzIHR3byBzdHJpbmdzIChzdGFydC9lbmQpLCBmaW5kcyB0aGUgbnVtYmVycyB0aGF0IGFyZSBkaWZmZXJlbnQgYW5kIHNwaXRzIGJhY2sgYW4gYXJyYXkgcmVwcmVzZW50aW5nIHRoZSB3aG9sZSB2YWx1ZSBidXQgd2l0aCB0aGUgY2hhbmdpbmcgdmFsdWVzIGlzb2xhdGVkIGFzIGVsZW1lbnRzLiBGb3IgZXhhbXBsZSwgXCJyZ2IoMCwwLDApXCIgYW5kIFwicmdiKDEwMCw1MCwwKVwiIHdvdWxkIGJlY29tZSBbXCJyZ2IoXCIsIDAsIFwiLFwiLCA1MCwgXCIsMClcIl0uIE5vdGljZSBpdCBtZXJnZXMgdGhlIHBhcnRzIHRoYXQgYXJlIGlkZW50aWNhbCAocGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uKS4gVGhlIGFycmF5IGFsc28gaGFzIGEgbGlua2VkIGxpc3Qgb2YgUHJvcFR3ZWVucyBhdHRhY2hlZCBzdGFydGluZyB3aXRoIF9maXJzdFBUIHRoYXQgY29udGFpbiB0aGUgdHdlZW5pbmcgZGF0YSAodCwgcCwgcywgYywgZiwgZXRjLikuIEl0IGFsc28gc3RvcmVzIHRoZSBzdGFydGluZyB2YWx1ZSBhcyBhIFwic3RhcnRcIiBwcm9wZXJ0eSBzbyB0aGF0IHdlIGNhbiByZXZlcnQgdG8gaXQgaWYvd2hlbiBuZWNlc3NhcnksIGxpa2Ugd2hlbiBhIHR3ZWVuIHJld2luZHMgZnVsbHkuIElmIHRoZSBxdWFudGl0eSBvZiBudW1iZXJzIGRpZmZlcnMgYmV0d2VlbiB0aGUgc3RhcnQgYW5kIGVuZCwgaXQgd2lsbCBhbHdheXMgcHJpb3JpdGl6ZSB0aGUgZW5kIHZhbHVlKHMpLiBUaGUgcHQgcGFyYW1ldGVyIGlzIG9wdGlvbmFsIC0gaXQncyBmb3IgYSBQcm9wVHdlZW4gdGhhdCB3aWxsIGJlIGFwcGVuZGVkIHRvIHRoZSBlbmQgb2YgdGhlIGxpbmtlZCBsaXN0IGFuZCBpcyB0eXBpY2FsbHkgZm9yIGFjdHVhbGx5IHNldHRpbmcgdGhlIHZhbHVlIGFmdGVyIGFsbCBvZiB0aGUgZWxlbWVudHMgaGF2ZSBiZWVuIHVwZGF0ZWQgKHdpdGggYXJyYXkuam9pbihcIlwiKSkuXG5cdFx0XHRfYmxvYkRpZiA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIGZpbHRlciwgcHQpIHtcblx0XHRcdFx0dmFyIGEgPSBbc3RhcnQsIGVuZF0sXG5cdFx0XHRcdFx0Y2hhckluZGV4ID0gMCxcblx0XHRcdFx0XHRzID0gXCJcIixcblx0XHRcdFx0XHRjb2xvciA9IDAsXG5cdFx0XHRcdFx0c3RhcnROdW1zLCBlbmROdW1zLCBudW0sIGksIGwsIG5vbk51bWJlcnMsIGN1cnJlbnROdW07XG5cdFx0XHRcdGEuc3RhcnQgPSBzdGFydDtcblx0XHRcdFx0aWYgKGZpbHRlcikge1xuXHRcdFx0XHRcdGZpbHRlcihhKTsgLy9wYXNzIGFuIGFycmF5IHdpdGggdGhlIHN0YXJ0aW5nIGFuZCBlbmRpbmcgdmFsdWVzIGFuZCBsZXQgdGhlIGZpbHRlciBkbyB3aGF0ZXZlciBpdCBuZWVkcyB0byB0aGUgdmFsdWVzLlxuXHRcdFx0XHRcdHN0YXJ0ID0gYVswXTtcblx0XHRcdFx0XHRlbmQgPSBhWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGEubGVuZ3RoID0gMDtcblx0XHRcdFx0c3RhcnROdW1zID0gc3RhcnQubWF0Y2goX251bWJlcnNFeHApIHx8IFtdO1xuXHRcdFx0XHRlbmROdW1zID0gZW5kLm1hdGNoKF9udW1iZXJzRXhwKSB8fCBbXTtcblx0XHRcdFx0aWYgKHB0KSB7XG5cdFx0XHRcdFx0cHQuX25leHQgPSBudWxsO1xuXHRcdFx0XHRcdHB0LmJsb2IgPSAxO1xuXHRcdFx0XHRcdGEuX2ZpcnN0UFQgPSBhLl9hcHBseVBUID0gcHQ7IC8vYXBwbHkgbGFzdCBpbiB0aGUgbGlua2VkIGxpc3QgKHdoaWNoIG1lYW5zIGluc2VydGluZyBpdCBmaXJzdClcblx0XHRcdFx0fVxuXHRcdFx0XHRsID0gZW5kTnVtcy5sZW5ndGg7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRjdXJyZW50TnVtID0gZW5kTnVtc1tpXTtcblx0XHRcdFx0XHRub25OdW1iZXJzID0gZW5kLnN1YnN0cihjaGFySW5kZXgsIGVuZC5pbmRleE9mKGN1cnJlbnROdW0sIGNoYXJJbmRleCktY2hhckluZGV4KTtcblx0XHRcdFx0XHRzICs9IChub25OdW1iZXJzIHx8ICFpKSA/IG5vbk51bWJlcnMgOiBcIixcIjsgLy9ub3RlOiBTVkcgc3BlYyBhbGxvd3Mgb21pc3Npb24gb2YgY29tbWEvc3BhY2Ugd2hlbiBhIG5lZ2F0aXZlIHNpZ24gaXMgd2VkZ2VkIGJldHdlZW4gdHdvIG51bWJlcnMsIGxpa2UgMi41LTUuMyBpbnN0ZWFkIG9mIDIuNSwtNS4zIGJ1dCB3aGVuIHR3ZWVuaW5nLCB0aGUgbmVnYXRpdmUgdmFsdWUgbWF5IHN3aXRjaCB0byBwb3NpdGl2ZSwgc28gd2UgaW5zZXJ0IHRoZSBjb21tYSBqdXN0IGluIGNhc2UuXG5cdFx0XHRcdFx0Y2hhckluZGV4ICs9IG5vbk51bWJlcnMubGVuZ3RoO1xuXHRcdFx0XHRcdGlmIChjb2xvcikgeyAvL3NlbnNlIHJnYmEoKSB2YWx1ZXMgYW5kIHJvdW5kIHRoZW0uXG5cdFx0XHRcdFx0XHRjb2xvciA9IChjb2xvciArIDEpICUgNTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG5vbk51bWJlcnMuc3Vic3RyKC01KSA9PT0gXCJyZ2JhKFwiKSB7XG5cdFx0XHRcdFx0XHRjb2xvciA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChjdXJyZW50TnVtID09PSBzdGFydE51bXNbaV0gfHwgc3RhcnROdW1zLmxlbmd0aCA8PSBpKSB7XG5cdFx0XHRcdFx0XHRzICs9IGN1cnJlbnROdW07XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChzKSB7XG5cdFx0XHRcdFx0XHRcdGEucHVzaChzKTtcblx0XHRcdFx0XHRcdFx0cyA9IFwiXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRudW0gPSBwYXJzZUZsb2F0KHN0YXJ0TnVtc1tpXSk7XG5cdFx0XHRcdFx0XHRhLnB1c2gobnVtKTtcblx0XHRcdFx0XHRcdGEuX2ZpcnN0UFQgPSB7X25leHQ6IGEuX2ZpcnN0UFQsIHQ6YSwgcDogYS5sZW5ndGgtMSwgczpudW0sIGM6KChjdXJyZW50TnVtLmNoYXJBdCgxKSA9PT0gXCI9XCIpID8gcGFyc2VJbnQoY3VycmVudE51bS5jaGFyQXQoMCkgKyBcIjFcIiwgMTApICogcGFyc2VGbG9hdChjdXJyZW50TnVtLnN1YnN0cigyKSkgOiAocGFyc2VGbG9hdChjdXJyZW50TnVtKSAtIG51bSkpIHx8IDAsIGY6MCwgbTooY29sb3IgJiYgY29sb3IgPCA0KSA/IE1hdGgucm91bmQgOiAwfTtcblx0XHRcdFx0XHRcdC8vbm90ZTogd2UgZG9uJ3Qgc2V0IF9wcmV2IGJlY2F1c2Ugd2UnbGwgbmV2ZXIgbmVlZCB0byByZW1vdmUgaW5kaXZpZHVhbCBQcm9wVHdlZW5zIGZyb20gdGhpcyBsaXN0LlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjaGFySW5kZXggKz0gY3VycmVudE51bS5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0cyArPSBlbmQuc3Vic3RyKGNoYXJJbmRleCk7XG5cdFx0XHRcdGlmIChzKSB7XG5cdFx0XHRcdFx0YS5wdXNoKHMpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGEuc2V0UmF0aW8gPSBfc2V0UmF0aW87XG5cdFx0XHRcdHJldHVybiBhO1xuXHRcdFx0fSxcblx0XHRcdC8vbm90ZTogXCJmdW5jUGFyYW1cIiBpcyBvbmx5IG5lY2Vzc2FyeSBmb3IgZnVuY3Rpb24tYmFzZWQgZ2V0dGVycy9zZXR0ZXJzIHRoYXQgcmVxdWlyZSBhbiBleHRyYSBwYXJhbWV0ZXIgbGlrZSBnZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSBhbmQgc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgdmFsdWUpLiBJbiB0aGlzIGV4YW1wbGUsIGZ1bmNQYXJhbSB3b3VsZCBiZSBcIndpZHRoXCIuIFVzZWQgYnkgQXR0clBsdWdpbiBmb3IgZXhhbXBsZS5cblx0XHRcdF9hZGRQcm9wVHdlZW4gPSBmdW5jdGlvbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIG92ZXJ3cml0ZVByb3AsIG1vZCwgZnVuY1BhcmFtLCBzdHJpbmdGaWx0ZXIsIGluZGV4KSB7XG5cdFx0XHRcdGlmICh0eXBlb2YoZW5kKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0ZW5kID0gZW5kKGluZGV4IHx8IDAsIHRhcmdldCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHMgPSAoc3RhcnQgPT09IFwiZ2V0XCIpID8gdGFyZ2V0W3Byb3BdIDogc3RhcnQsXG5cdFx0XHRcdFx0dHlwZSA9IHR5cGVvZih0YXJnZXRbcHJvcF0pLFxuXHRcdFx0XHRcdGlzUmVsYXRpdmUgPSAodHlwZW9mKGVuZCkgPT09IFwic3RyaW5nXCIgJiYgZW5kLmNoYXJBdCgxKSA9PT0gXCI9XCIpLFxuXHRcdFx0XHRcdHB0ID0ge3Q6dGFyZ2V0LCBwOnByb3AsIHM6cywgZjoodHlwZSA9PT0gXCJmdW5jdGlvblwiKSwgcGc6MCwgbjpvdmVyd3JpdGVQcm9wIHx8IHByb3AsIG06KCFtb2QgPyAwIDogKHR5cGVvZihtb2QpID09PSBcImZ1bmN0aW9uXCIpID8gbW9kIDogTWF0aC5yb3VuZCksIHByOjAsIGM6aXNSZWxhdGl2ZSA/IHBhcnNlSW50KGVuZC5jaGFyQXQoMCkgKyBcIjFcIiwgMTApICogcGFyc2VGbG9hdChlbmQuc3Vic3RyKDIpKSA6IChwYXJzZUZsb2F0KGVuZCkgLSBzKSB8fCAwfSxcblx0XHRcdFx0XHRibG9iLCBnZXR0ZXJOYW1lO1xuXHRcdFx0XHRpZiAodHlwZSAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdGlmICh0eXBlID09PSBcImZ1bmN0aW9uXCIgJiYgc3RhcnQgPT09IFwiZ2V0XCIpIHtcblx0XHRcdFx0XHRcdGdldHRlck5hbWUgPSAoKHByb3AuaW5kZXhPZihcInNldFwiKSB8fCB0eXBlb2YodGFyZ2V0W1wiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKV0pICE9PSBcImZ1bmN0aW9uXCIpID8gcHJvcCA6IFwiZ2V0XCIgKyBwcm9wLnN1YnN0cigzKSk7XG5cdFx0XHRcdFx0XHRwdC5zID0gcyA9IGZ1bmNQYXJhbSA/IHRhcmdldFtnZXR0ZXJOYW1lXShmdW5jUGFyYW0pIDogdGFyZ2V0W2dldHRlck5hbWVdKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0eXBlb2YocykgPT09IFwic3RyaW5nXCIgJiYgKGZ1bmNQYXJhbSB8fCBpc05hTihzKSkpIHtcblx0XHRcdFx0XHRcdC8vYSBibG9iIChzdHJpbmcgdGhhdCBoYXMgbXVsdGlwbGUgbnVtYmVycyBpbiBpdClcblx0XHRcdFx0XHRcdHB0LmZwID0gZnVuY1BhcmFtO1xuXHRcdFx0XHRcdFx0YmxvYiA9IF9ibG9iRGlmKHMsIGVuZCwgc3RyaW5nRmlsdGVyIHx8IFR3ZWVuTGl0ZS5kZWZhdWx0U3RyaW5nRmlsdGVyLCBwdCk7XG5cdFx0XHRcdFx0XHRwdCA9IHt0OmJsb2IsIHA6XCJzZXRSYXRpb1wiLCBzOjAsIGM6MSwgZjoyLCBwZzowLCBuOm92ZXJ3cml0ZVByb3AgfHwgcHJvcCwgcHI6MCwgbTowfTsgLy9cIjJcIiBpbmRpY2F0ZXMgaXQncyBhIEJsb2IgcHJvcGVydHkgdHdlZW4uIE5lZWRlZCBmb3IgUm91bmRQcm9wc1BsdWdpbiBmb3IgZXhhbXBsZS5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCFpc1JlbGF0aXZlKSB7XG5cdFx0XHRcdFx0XHRwdC5zID0gcGFyc2VGbG9hdChzKTtcblx0XHRcdFx0XHRcdHB0LmMgPSAocGFyc2VGbG9hdChlbmQpIC0gcHQucykgfHwgMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHB0LmMpIHsgLy9vbmx5IGFkZCBpdCB0byB0aGUgbGlua2VkIGxpc3QgaWYgdGhlcmUncyBhIGNoYW5nZS5cblx0XHRcdFx0XHRpZiAoKHB0Ll9uZXh0ID0gdGhpcy5fZmlyc3RQVCkpIHtcblx0XHRcdFx0XHRcdHB0Ll9uZXh0Ll9wcmV2ID0gcHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdDtcblx0XHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfaW50ZXJuYWxzID0gVHdlZW5MaXRlLl9pbnRlcm5hbHMgPSB7aXNBcnJheTpfaXNBcnJheSwgaXNTZWxlY3RvcjpfaXNTZWxlY3RvciwgbGF6eVR3ZWVuczpfbGF6eVR3ZWVucywgYmxvYkRpZjpfYmxvYkRpZn0sIC8vZ2l2ZXMgdXMgYSB3YXkgdG8gZXhwb3NlIGNlcnRhaW4gcHJpdmF0ZSB2YWx1ZXMgdG8gb3RoZXIgR3JlZW5Tb2NrIGNsYXNzZXMgd2l0aG91dCBjb250YW1pbmF0aW5nIHRoYSBtYWluIFR3ZWVuTGl0ZSBvYmplY3QuXG5cdFx0XHRfcGx1Z2lucyA9IFR3ZWVuTGl0ZS5fcGx1Z2lucyA9IHt9LFxuXHRcdFx0X3R3ZWVuTG9va3VwID0gX2ludGVybmFscy50d2Vlbkxvb2t1cCA9IHt9LFxuXHRcdFx0X3R3ZWVuTG9va3VwTnVtID0gMCxcblx0XHRcdF9yZXNlcnZlZFByb3BzID0gX2ludGVybmFscy5yZXNlcnZlZFByb3BzID0ge2Vhc2U6MSwgZGVsYXk6MSwgb3ZlcndyaXRlOjEsIG9uQ29tcGxldGU6MSwgb25Db21wbGV0ZVBhcmFtczoxLCBvbkNvbXBsZXRlU2NvcGU6MSwgdXNlRnJhbWVzOjEsIHJ1bkJhY2t3YXJkczoxLCBzdGFydEF0OjEsIG9uVXBkYXRlOjEsIG9uVXBkYXRlUGFyYW1zOjEsIG9uVXBkYXRlU2NvcGU6MSwgb25TdGFydDoxLCBvblN0YXJ0UGFyYW1zOjEsIG9uU3RhcnRTY29wZToxLCBvblJldmVyc2VDb21wbGV0ZToxLCBvblJldmVyc2VDb21wbGV0ZVBhcmFtczoxLCBvblJldmVyc2VDb21wbGV0ZVNjb3BlOjEsIG9uUmVwZWF0OjEsIG9uUmVwZWF0UGFyYW1zOjEsIG9uUmVwZWF0U2NvcGU6MSwgZWFzZVBhcmFtczoxLCB5b3lvOjEsIGltbWVkaWF0ZVJlbmRlcjoxLCByZXBlYXQ6MSwgcmVwZWF0RGVsYXk6MSwgZGF0YToxLCBwYXVzZWQ6MSwgcmV2ZXJzZWQ6MSwgYXV0b0NTUzoxLCBsYXp5OjEsIG9uT3ZlcndyaXRlOjEsIGNhbGxiYWNrU2NvcGU6MSwgc3RyaW5nRmlsdGVyOjEsIGlkOjF9LFxuXHRcdFx0X292ZXJ3cml0ZUxvb2t1cCA9IHtub25lOjAsIGFsbDoxLCBhdXRvOjIsIGNvbmN1cnJlbnQ6MywgYWxsT25TdGFydDo0LCBwcmVleGlzdGluZzo1LCBcInRydWVcIjoxLCBcImZhbHNlXCI6MH0sXG5cdFx0XHRfcm9vdEZyYW1lc1RpbWVsaW5lID0gQW5pbWF0aW9uLl9yb290RnJhbWVzVGltZWxpbmUgPSBuZXcgU2ltcGxlVGltZWxpbmUoKSxcblx0XHRcdF9yb290VGltZWxpbmUgPSBBbmltYXRpb24uX3Jvb3RUaW1lbGluZSA9IG5ldyBTaW1wbGVUaW1lbGluZSgpLFxuXHRcdFx0X25leHRHQ0ZyYW1lID0gMzAsXG5cdFx0XHRfbGF6eVJlbmRlciA9IF9pbnRlcm5hbHMubGF6eVJlbmRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaSA9IF9sYXp5VHdlZW5zLmxlbmd0aCxcblx0XHRcdFx0XHR0d2Vlbjtcblx0XHRcdFx0X2xhenlMb29rdXAgPSB7fTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0dHdlZW4gPSBfbGF6eVR3ZWVuc1tpXTtcblx0XHRcdFx0XHRpZiAodHdlZW4gJiYgdHdlZW4uX2xhenkgIT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHR0d2Vlbi5yZW5kZXIodHdlZW4uX2xhenlbMF0sIHR3ZWVuLl9sYXp5WzFdLCB0cnVlKTtcblx0XHRcdFx0XHRcdHR3ZWVuLl9sYXp5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdF9sYXp5VHdlZW5zLmxlbmd0aCA9IDA7XG5cdFx0XHR9O1xuXG5cdFx0X3Jvb3RUaW1lbGluZS5fc3RhcnRUaW1lID0gX3RpY2tlci50aW1lO1xuXHRcdF9yb290RnJhbWVzVGltZWxpbmUuX3N0YXJ0VGltZSA9IF90aWNrZXIuZnJhbWU7XG5cdFx0X3Jvb3RUaW1lbGluZS5fYWN0aXZlID0gX3Jvb3RGcmFtZXNUaW1lbGluZS5fYWN0aXZlID0gdHJ1ZTtcblx0XHRzZXRUaW1lb3V0KF9sYXp5UmVuZGVyLCAxKTsgLy9vbiBzb21lIG1vYmlsZSBkZXZpY2VzLCB0aGVyZSBpc24ndCBhIFwidGlja1wiIGJlZm9yZSBjb2RlIHJ1bnMgd2hpY2ggbWVhbnMgYW55IGxhenkgcmVuZGVycyB3b3VsZG4ndCBydW4gYmVmb3JlIHRoZSBuZXh0IG9mZmljaWFsIFwidGlja1wiLlxuXG5cdFx0QW5pbWF0aW9uLl91cGRhdGVSb290ID0gVHdlZW5MaXRlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgaSwgYSwgcDtcblx0XHRcdFx0aWYgKF9sYXp5VHdlZW5zLmxlbmd0aCkgeyAvL2lmIGNvZGUgaXMgcnVuIG91dHNpZGUgb2YgdGhlIHJlcXVlc3RBbmltYXRpb25GcmFtZSBsb29wLCB0aGVyZSBtYXkgYmUgdHdlZW5zIHF1ZXVlZCBBRlRFUiB0aGUgZW5naW5lIHJlZnJlc2hlZCwgc28gd2UgbmVlZCB0byBlbnN1cmUgYW55IHBlbmRpbmcgcmVuZGVycyBvY2N1ciBiZWZvcmUgd2UgcmVmcmVzaCBhZ2Fpbi5cblx0XHRcdFx0XHRfbGF6eVJlbmRlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9yb290VGltZWxpbmUucmVuZGVyKChfdGlja2VyLnRpbWUgLSBfcm9vdFRpbWVsaW5lLl9zdGFydFRpbWUpICogX3Jvb3RUaW1lbGluZS5fdGltZVNjYWxlLCBmYWxzZSwgZmFsc2UpO1xuXHRcdFx0XHRfcm9vdEZyYW1lc1RpbWVsaW5lLnJlbmRlcigoX3RpY2tlci5mcmFtZSAtIF9yb290RnJhbWVzVGltZWxpbmUuX3N0YXJ0VGltZSkgKiBfcm9vdEZyYW1lc1RpbWVsaW5lLl90aW1lU2NhbGUsIGZhbHNlLCBmYWxzZSk7XG5cdFx0XHRcdGlmIChfbGF6eVR3ZWVucy5sZW5ndGgpIHtcblx0XHRcdFx0XHRfbGF6eVJlbmRlcigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChfdGlja2VyLmZyYW1lID49IF9uZXh0R0NGcmFtZSkgeyAvL2R1bXAgZ2FyYmFnZSBldmVyeSAxMjAgZnJhbWVzIG9yIHdoYXRldmVyIHRoZSB1c2VyIHNldHMgVHdlZW5MaXRlLmF1dG9TbGVlcCB0b1xuXHRcdFx0XHRcdF9uZXh0R0NGcmFtZSA9IF90aWNrZXIuZnJhbWUgKyAocGFyc2VJbnQoVHdlZW5MaXRlLmF1dG9TbGVlcCwgMTApIHx8IDEyMCk7XG5cdFx0XHRcdFx0Zm9yIChwIGluIF90d2Vlbkxvb2t1cCkge1xuXHRcdFx0XHRcdFx0YSA9IF90d2Vlbkxvb2t1cFtwXS50d2VlbnM7XG5cdFx0XHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGFbaV0uX2djKSB7XG5cdFx0XHRcdFx0XHRcdFx0YS5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChhLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgX3R3ZWVuTG9va3VwW3BdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvL2lmIHRoZXJlIGFyZSBubyBtb3JlIHR3ZWVucyBpbiB0aGUgcm9vdCB0aW1lbGluZXMsIG9yIGlmIHRoZXkncmUgYWxsIHBhdXNlZCwgbWFrZSB0aGUgX3RpbWVyIHNsZWVwIHRvIHJlZHVjZSBsb2FkIG9uIHRoZSBDUFUgc2xpZ2h0bHlcblx0XHRcdFx0XHRwID0gX3Jvb3RUaW1lbGluZS5fZmlyc3Q7XG5cdFx0XHRcdFx0aWYgKCFwIHx8IHAuX3BhdXNlZCkgaWYgKFR3ZWVuTGl0ZS5hdXRvU2xlZXAgJiYgIV9yb290RnJhbWVzVGltZWxpbmUuX2ZpcnN0ICYmIF90aWNrZXIuX2xpc3RlbmVycy50aWNrLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKHAgJiYgcC5fcGF1c2VkKSB7XG5cdFx0XHRcdFx0XHRcdHAgPSBwLl9uZXh0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCFwKSB7XG5cdFx0XHRcdFx0XHRcdF90aWNrZXIuc2xlZXAoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRfdGlja2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0aWNrXCIsIEFuaW1hdGlvbi5fdXBkYXRlUm9vdCk7XG5cblx0XHR2YXIgX3JlZ2lzdGVyID0gZnVuY3Rpb24odGFyZ2V0LCB0d2Vlbiwgc2NydWIpIHtcblx0XHRcdFx0dmFyIGlkID0gdGFyZ2V0Ll9nc1R3ZWVuSUQsIGEsIGk7XG5cdFx0XHRcdGlmICghX3R3ZWVuTG9va3VwW2lkIHx8ICh0YXJnZXQuX2dzVHdlZW5JRCA9IGlkID0gXCJ0XCIgKyAoX3R3ZWVuTG9va3VwTnVtKyspKV0pIHtcblx0XHRcdFx0XHRfdHdlZW5Mb29rdXBbaWRdID0ge3RhcmdldDp0YXJnZXQsIHR3ZWVuczpbXX07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHR3ZWVuKSB7XG5cdFx0XHRcdFx0YSA9IF90d2Vlbkxvb2t1cFtpZF0udHdlZW5zO1xuXHRcdFx0XHRcdGFbKGkgPSBhLmxlbmd0aCldID0gdHdlZW47XG5cdFx0XHRcdFx0aWYgKHNjcnViKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGFbaV0gPT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0XHRcdFx0YS5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIF90d2Vlbkxvb2t1cFtpZF0udHdlZW5zO1xuXHRcdFx0fSxcblx0XHRcdF9vbk92ZXJ3cml0ZSA9IGZ1bmN0aW9uKG92ZXJ3cml0dGVuVHdlZW4sIG92ZXJ3cml0aW5nVHdlZW4sIHRhcmdldCwga2lsbGVkUHJvcHMpIHtcblx0XHRcdFx0dmFyIGZ1bmMgPSBvdmVyd3JpdHRlblR3ZWVuLnZhcnMub25PdmVyd3JpdGUsIHIxLCByMjtcblx0XHRcdFx0aWYgKGZ1bmMpIHtcblx0XHRcdFx0XHRyMSA9IGZ1bmMob3ZlcndyaXR0ZW5Ud2Vlbiwgb3ZlcndyaXRpbmdUd2VlbiwgdGFyZ2V0LCBraWxsZWRQcm9wcyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZnVuYyA9IFR3ZWVuTGl0ZS5vbk92ZXJ3cml0ZTtcblx0XHRcdFx0aWYgKGZ1bmMpIHtcblx0XHRcdFx0XHRyMiA9IGZ1bmMob3ZlcndyaXR0ZW5Ud2Vlbiwgb3ZlcndyaXRpbmdUd2VlbiwgdGFyZ2V0LCBraWxsZWRQcm9wcyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIChyMSAhPT0gZmFsc2UgJiYgcjIgIT09IGZhbHNlKTtcblx0XHRcdH0sXG5cdFx0XHRfYXBwbHlPdmVyd3JpdGUgPSBmdW5jdGlvbih0YXJnZXQsIHR3ZWVuLCBwcm9wcywgbW9kZSwgc2libGluZ3MpIHtcblx0XHRcdFx0dmFyIGksIGNoYW5nZWQsIGN1clR3ZWVuLCBsO1xuXHRcdFx0XHRpZiAobW9kZSA9PT0gMSB8fCBtb2RlID49IDQpIHtcblx0XHRcdFx0XHRsID0gc2libGluZ3MubGVuZ3RoO1xuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRcdGlmICgoY3VyVHdlZW4gPSBzaWJsaW5nc1tpXSkgIT09IHR3ZWVuKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghY3VyVHdlZW4uX2djKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGN1clR3ZWVuLl9raWxsKG51bGwsIHRhcmdldCwgdHdlZW4pKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAobW9kZSA9PT0gNSkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9OT1RFOiBBZGQgMC4wMDAwMDAwMDAxIHRvIG92ZXJjb21lIGZsb2F0aW5nIHBvaW50IGVycm9ycyB0aGF0IGNhbiBjYXVzZSB0aGUgc3RhcnRUaW1lIHRvIGJlIFZFUlkgc2xpZ2h0bHkgb2ZmICh3aGVuIGEgdHdlZW4ncyB0aW1lKCkgaXMgc2V0IGZvciBleGFtcGxlKVxuXHRcdFx0XHR2YXIgc3RhcnRUaW1lID0gdHdlZW4uX3N0YXJ0VGltZSArIF90aW55TnVtLFxuXHRcdFx0XHRcdG92ZXJsYXBzID0gW10sXG5cdFx0XHRcdFx0b0NvdW50ID0gMCxcblx0XHRcdFx0XHR6ZXJvRHVyID0gKHR3ZWVuLl9kdXJhdGlvbiA9PT0gMCksXG5cdFx0XHRcdFx0Z2xvYmFsU3RhcnQ7XG5cdFx0XHRcdGkgPSBzaWJsaW5ncy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGlmICgoY3VyVHdlZW4gPSBzaWJsaW5nc1tpXSkgPT09IHR3ZWVuIHx8IGN1clR3ZWVuLl9nYyB8fCBjdXJUd2Vlbi5fcGF1c2VkKSB7XG5cdFx0XHRcdFx0XHQvL2lnbm9yZVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY3VyVHdlZW4uX3RpbWVsaW5lICE9PSB0d2Vlbi5fdGltZWxpbmUpIHtcblx0XHRcdFx0XHRcdGdsb2JhbFN0YXJ0ID0gZ2xvYmFsU3RhcnQgfHwgX2NoZWNrT3ZlcmxhcCh0d2VlbiwgMCwgemVyb0R1cik7XG5cdFx0XHRcdFx0XHRpZiAoX2NoZWNrT3ZlcmxhcChjdXJUd2VlbiwgZ2xvYmFsU3RhcnQsIHplcm9EdXIpID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdG92ZXJsYXBzW29Db3VudCsrXSA9IGN1clR3ZWVuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY3VyVHdlZW4uX3N0YXJ0VGltZSA8PSBzdGFydFRpbWUpIGlmIChjdXJUd2Vlbi5fc3RhcnRUaW1lICsgY3VyVHdlZW4udG90YWxEdXJhdGlvbigpIC8gY3VyVHdlZW4uX3RpbWVTY2FsZSA+IHN0YXJ0VGltZSkgaWYgKCEoKHplcm9EdXIgfHwgIWN1clR3ZWVuLl9pbml0dGVkKSAmJiBzdGFydFRpbWUgLSBjdXJUd2Vlbi5fc3RhcnRUaW1lIDw9IDAuMDAwMDAwMDAwMikpIHtcblx0XHRcdFx0XHRcdG92ZXJsYXBzW29Db3VudCsrXSA9IGN1clR3ZWVuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGkgPSBvQ291bnQ7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGN1clR3ZWVuID0gb3ZlcmxhcHNbaV07XG5cdFx0XHRcdFx0aWYgKG1vZGUgPT09IDIpIGlmIChjdXJUd2Vlbi5fa2lsbChwcm9wcywgdGFyZ2V0LCB0d2VlbikpIHtcblx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAobW9kZSAhPT0gMiB8fCAoIWN1clR3ZWVuLl9maXJzdFBUICYmIGN1clR3ZWVuLl9pbml0dGVkKSkge1xuXHRcdFx0XHRcdFx0aWYgKG1vZGUgIT09IDIgJiYgIV9vbk92ZXJ3cml0ZShjdXJUd2VlbiwgdHdlZW4pKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGN1clR3ZWVuLl9lbmFibGVkKGZhbHNlLCBmYWxzZSkpIHsgLy9pZiBhbGwgcHJvcGVydHkgdHdlZW5zIGhhdmUgYmVlbiBvdmVyd3JpdHRlbiwga2lsbCB0aGUgdHdlZW4uXG5cdFx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gY2hhbmdlZDtcblx0XHRcdH0sXG5cdFx0XHRfY2hlY2tPdmVybGFwID0gZnVuY3Rpb24odHdlZW4sIHJlZmVyZW5jZSwgemVyb0R1cikge1xuXHRcdFx0XHR2YXIgdGwgPSB0d2Vlbi5fdGltZWxpbmUsXG5cdFx0XHRcdFx0dHMgPSB0bC5fdGltZVNjYWxlLFxuXHRcdFx0XHRcdHQgPSB0d2Vlbi5fc3RhcnRUaW1lO1xuXHRcdFx0XHR3aGlsZSAodGwuX3RpbWVsaW5lKSB7XG5cdFx0XHRcdFx0dCArPSB0bC5fc3RhcnRUaW1lO1xuXHRcdFx0XHRcdHRzICo9IHRsLl90aW1lU2NhbGU7XG5cdFx0XHRcdFx0aWYgKHRsLl9wYXVzZWQpIHtcblx0XHRcdFx0XHRcdHJldHVybiAtMTAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0bCA9IHRsLl90aW1lbGluZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0IC89IHRzO1xuXHRcdFx0XHRyZXR1cm4gKHQgPiByZWZlcmVuY2UpID8gdCAtIHJlZmVyZW5jZSA6ICgoemVyb0R1ciAmJiB0ID09PSByZWZlcmVuY2UpIHx8ICghdHdlZW4uX2luaXR0ZWQgJiYgdCAtIHJlZmVyZW5jZSA8IDIgKiBfdGlueU51bSkpID8gX3RpbnlOdW0gOiAoKHQgKz0gdHdlZW4udG90YWxEdXJhdGlvbigpIC8gdHdlZW4uX3RpbWVTY2FsZSAvIHRzKSA+IHJlZmVyZW5jZSArIF90aW55TnVtKSA/IDAgOiB0IC0gcmVmZXJlbmNlIC0gX3RpbnlOdW07XG5cdFx0XHR9O1xuXG5cbi8vLS0tLSBUd2VlbkxpdGUgaW5zdGFuY2UgbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0cC5faW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHYgPSB0aGlzLnZhcnMsXG5cdFx0XHRcdG9wID0gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyxcblx0XHRcdFx0ZHVyID0gdGhpcy5fZHVyYXRpb24sXG5cdFx0XHRcdGltbWVkaWF0ZSA9ICEhdi5pbW1lZGlhdGVSZW5kZXIsXG5cdFx0XHRcdGVhc2UgPSB2LmVhc2UsXG5cdFx0XHRcdGksIGluaXRQbHVnaW5zLCBwdCwgcCwgc3RhcnRWYXJzLCBsO1xuXHRcdFx0aWYgKHYuc3RhcnRBdCkge1xuXHRcdFx0XHRpZiAodGhpcy5fc3RhcnRBdCkge1xuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQucmVuZGVyKC0xLCB0cnVlKTsgLy9pZiB3ZSd2ZSBydW4gYSBzdGFydEF0IHByZXZpb3VzbHkgKHdoZW4gdGhlIHR3ZWVuIGluc3RhbnRpYXRlZCksIHdlIHNob3VsZCByZXZlcnQgaXQgc28gdGhhdCB0aGUgdmFsdWVzIHJlLWluc3RhbnRpYXRlIGNvcnJlY3RseSBwYXJ0aWN1bGFybHkgZm9yIHJlbGF0aXZlIHR3ZWVucy4gV2l0aG91dCB0aGlzLCBhIFR3ZWVuTGl0ZS5mcm9tVG8ob2JqLCAxLCB7eDpcIis9MTAwXCJ9LCB7eDpcIi09MTAwXCJ9KSwgZm9yIGV4YW1wbGUsIHdvdWxkIGFjdHVhbGx5IGp1bXAgdG8gKz0yMDAgYmVjYXVzZSB0aGUgc3RhcnRBdCB3b3VsZCBydW4gdHdpY2UsIGRvdWJsaW5nIHRoZSByZWxhdGl2ZSBjaGFuZ2UuXG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5raWxsKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RhcnRWYXJzID0ge307XG5cdFx0XHRcdGZvciAocCBpbiB2LnN0YXJ0QXQpIHsgLy9jb3B5IHRoZSBwcm9wZXJ0aWVzL3ZhbHVlcyBpbnRvIGEgbmV3IG9iamVjdCB0byBhdm9pZCBjb2xsaXNpb25zLCBsaWtlIHZhciB0byA9IHt4OjB9LCBmcm9tID0ge3g6NTAwfTsgdGltZWxpbmUuZnJvbVRvKGUsIDEsIGZyb20sIHRvKS5mcm9tVG8oZSwgMSwgdG8sIGZyb20pO1xuXHRcdFx0XHRcdHN0YXJ0VmFyc1twXSA9IHYuc3RhcnRBdFtwXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdGFydFZhcnMub3ZlcndyaXRlID0gZmFsc2U7XG5cdFx0XHRcdHN0YXJ0VmFycy5pbW1lZGlhdGVSZW5kZXIgPSB0cnVlO1xuXHRcdFx0XHRzdGFydFZhcnMubGF6eSA9IChpbW1lZGlhdGUgJiYgdi5sYXp5ICE9PSBmYWxzZSk7XG5cdFx0XHRcdHN0YXJ0VmFycy5zdGFydEF0ID0gc3RhcnRWYXJzLmRlbGF5ID0gbnVsbDsgLy9ubyBuZXN0aW5nIG9mIHN0YXJ0QXQgb2JqZWN0cyBhbGxvd2VkIChvdGhlcndpc2UgaXQgY291bGQgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCkuXG5cdFx0XHRcdHRoaXMuX3N0YXJ0QXQgPSBUd2VlbkxpdGUudG8odGhpcy50YXJnZXQsIDAsIHN0YXJ0VmFycyk7XG5cdFx0XHRcdGlmIChpbW1lZGlhdGUpIHtcblx0XHRcdFx0XHRpZiAodGhpcy5fdGltZSA+IDApIHtcblx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQgPSBudWxsOyAvL3R3ZWVucyB0aGF0IHJlbmRlciBpbW1lZGlhdGVseSAobGlrZSBtb3N0IGZyb20oKSBhbmQgZnJvbVRvKCkgdHdlZW5zKSBzaG91bGRuJ3QgcmV2ZXJ0IHdoZW4gdGhlaXIgcGFyZW50IHRpbWVsaW5lJ3MgcGxheWhlYWQgZ29lcyBiYWNrd2FyZCBwYXN0IHRoZSBzdGFydFRpbWUgYmVjYXVzZSB0aGUgaW5pdGlhbCByZW5kZXIgY291bGQgaGF2ZSBoYXBwZW5lZCBhbnl0aW1lIGFuZCBpdCBzaG91bGRuJ3QgYmUgZGlyZWN0bHkgY29ycmVsYXRlZCB0byB0aGlzIHR3ZWVuJ3Mgc3RhcnRUaW1lLiBJbWFnaW5lIHNldHRpbmcgdXAgYSBjb21wbGV4IGFuaW1hdGlvbiB3aGVyZSB0aGUgYmVnaW5uaW5nIHN0YXRlcyBvZiB2YXJpb3VzIG9iamVjdHMgYXJlIHJlbmRlcmVkIGltbWVkaWF0ZWx5IGJ1dCB0aGUgdHdlZW4gZG9lc24ndCBoYXBwZW4gZm9yIHF1aXRlIHNvbWUgdGltZSAtIGlmIHdlIHJldmVydCB0byB0aGUgc3RhcnRpbmcgdmFsdWVzIGFzIHNvb24gYXMgdGhlIHBsYXloZWFkIGdvZXMgYmFja3dhcmQgcGFzdCB0aGUgdHdlZW4ncyBzdGFydFRpbWUsIGl0IHdpbGwgdGhyb3cgdGhpbmdzIG9mZiB2aXN1YWxseS4gUmV2ZXJzaW9uIHNob3VsZCBvbmx5IGhhcHBlbiBpbiBUaW1lbGluZUxpdGUvTWF4IGluc3RhbmNlcyB3aGVyZSBpbW1lZGlhdGVSZW5kZXIgd2FzIGZhbHNlICh3aGljaCBpcyB0aGUgZGVmYXVsdCBpbiB0aGUgY29udmVuaWVuY2UgbWV0aG9kcyBsaWtlIGZyb20oKSkuXG5cdFx0XHRcdFx0fSBlbHNlIGlmIChkdXIgIT09IDApIHtcblx0XHRcdFx0XHRcdHJldHVybjsgLy93ZSBza2lwIGluaXRpYWxpemF0aW9uIGhlcmUgc28gdGhhdCBvdmVyd3JpdGluZyBkb2Vzbid0IG9jY3VyIHVudGlsIHRoZSB0d2VlbiBhY3R1YWxseSBiZWdpbnMuIE90aGVyd2lzZSwgaWYgeW91IGNyZWF0ZSBzZXZlcmFsIGltbWVkaWF0ZVJlbmRlcjp0cnVlIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQvcHJvcGVydGllcyB0byBkcm9wIGludG8gYSBUaW1lbGluZUxpdGUgb3IgVGltZWxpbmVNYXgsIHRoZSBsYXN0IG9uZSBjcmVhdGVkIHdvdWxkIG92ZXJ3cml0ZSB0aGUgZmlyc3Qgb25lcyBiZWNhdXNlIHRoZXkgZGlkbid0IGdldCBwbGFjZWQgaW50byB0aGUgdGltZWxpbmUgeWV0IGJlZm9yZSB0aGUgZmlyc3QgcmVuZGVyIG9jY3VycyBhbmQga2lja3MgaW4gb3ZlcndyaXRpbmcuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHYucnVuQmFja3dhcmRzICYmIGR1ciAhPT0gMCkge1xuXHRcdFx0XHQvL2Zyb20oKSB0d2VlbnMgbXVzdCBiZSBoYW5kbGVkIHVuaXF1ZWx5OiB0aGVpciBiZWdpbm5pbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQgYnV0IHdlIGRvbid0IHdhbnQgb3ZlcndyaXRpbmcgdG8gb2NjdXIgeWV0ICh3aGVuIHRpbWUgaXMgc3RpbGwgMCkuIFdhaXQgdW50aWwgdGhlIHR3ZWVuIGFjdHVhbGx5IGJlZ2lucyBiZWZvcmUgZG9pbmcgYWxsIHRoZSByb3V0aW5lcyBsaWtlIG92ZXJ3cml0aW5nLiBBdCB0aGF0IHRpbWUsIHdlIHNob3VsZCByZW5kZXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gdG8gZW5zdXJlIHRoYXQgdGhpbmdzIGluaXRpYWxpemUgY29ycmVjdGx5IChyZW1lbWJlciwgZnJvbSgpIHR3ZWVucyBnbyBiYWNrd2FyZHMpXG5cdFx0XHRcdGlmICh0aGlzLl9zdGFydEF0KSB7XG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5yZW5kZXIoLTEsIHRydWUpO1xuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQua2lsbCgpO1xuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQgPSBudWxsO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmICh0aGlzLl90aW1lICE9PSAwKSB7IC8vaW4gcmFyZSBjYXNlcyAobGlrZSBpZiBhIGZyb20oKSB0d2VlbiBydW5zIGFuZCB0aGVuIGlzIGludmFsaWRhdGUoKS1lZCksIGltbWVkaWF0ZVJlbmRlciBjb3VsZCBiZSB0cnVlIGJ1dCB0aGUgaW5pdGlhbCBmb3JjZWQtcmVuZGVyIGdldHMgc2tpcHBlZCwgc28gdGhlcmUncyBubyBuZWVkIHRvIGZvcmNlIHRoZSByZW5kZXIgaW4gdGhpcyBjb250ZXh0IHdoZW4gdGhlIF90aW1lIGlzIGdyZWF0ZXIgdGhhbiAwXG5cdFx0XHRcdFx0XHRpbW1lZGlhdGUgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQgPSB7fTtcblx0XHRcdFx0XHRmb3IgKHAgaW4gdikgeyAvL2NvcHkgcHJvcHMgaW50byBhIG5ldyBvYmplY3QgYW5kIHNraXAgYW55IHJlc2VydmVkIHByb3BzLCBvdGhlcndpc2Ugb25Db21wbGV0ZSBvciBvblVwZGF0ZSBvciBvblN0YXJ0IGNvdWxkIGZpcmUuIFdlIHNob3VsZCwgaG93ZXZlciwgcGVybWl0IGF1dG9DU1MgdG8gZ28gdGhyb3VnaC5cblx0XHRcdFx0XHRcdGlmICghX3Jlc2VydmVkUHJvcHNbcF0gfHwgcCA9PT0gXCJhdXRvQ1NTXCIpIHtcblx0XHRcdFx0XHRcdFx0cHRbcF0gPSB2W3BdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdC5vdmVyd3JpdGUgPSAwO1xuXHRcdFx0XHRcdHB0LmRhdGEgPSBcImlzRnJvbVN0YXJ0XCI7IC8vd2UgdGFnIHRoZSB0d2VlbiB3aXRoIGFzIFwiaXNGcm9tU3RhcnRcIiBzbyB0aGF0IGlmIFtpbnNpZGUgYSBwbHVnaW5dIHdlIG5lZWQgdG8gb25seSBkbyBzb21ldGhpbmcgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4sIHdlIGhhdmUgYSB3YXkgb2YgaWRlbnRpZnlpbmcgdGhpcyB0d2VlbiBhcyBtZXJlbHkgdGhlIG9uZSB0aGF0J3Mgc2V0dGluZyB0aGUgYmVnaW5uaW5nIHZhbHVlcyBmb3IgYSBcImZyb20oKVwiIHR3ZWVuLiBGb3IgZXhhbXBsZSwgY2xlYXJQcm9wcyBpbiBDU1NQbHVnaW4gc2hvdWxkIG9ubHkgZ2V0IGFwcGxpZWQgYXQgdGhlIHZlcnkgRU5EIG9mIGEgdHdlZW4gYW5kIHdpdGhvdXQgdGhpcyB0YWcsIGZyb20oLi4ue2hlaWdodDoxMDAsIGNsZWFyUHJvcHM6XCJoZWlnaHRcIiwgZGVsYXk6MX0pIHdvdWxkIHdpcGUgdGhlIGhlaWdodCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiBhbmQgYWZ0ZXIgMSBzZWNvbmQsIGl0J2Qga2ljayBiYWNrIGluLlxuXHRcdFx0XHRcdHB0LmxhenkgPSAoaW1tZWRpYXRlICYmIHYubGF6eSAhPT0gZmFsc2UpO1xuXHRcdFx0XHRcdHB0LmltbWVkaWF0ZVJlbmRlciA9IGltbWVkaWF0ZTsgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyByZW5kZXIgaW1tZWRpYXRlbHkgYnkgZGVmYXVsdCwgYnV0IGlmIHdlJ3JlIG5vdCBzcGVjaWZpY2FsbHkgaW5zdHJ1Y3RlZCB0byByZW5kZXIgdGhpcyB0d2VlbiBpbW1lZGlhdGVseSwgd2Ugc2hvdWxkIHNraXAgdGhpcyBhbmQgbWVyZWx5IF9pbml0KCkgdG8gcmVjb3JkIHRoZSBzdGFydGluZyB2YWx1ZXMgKHJlbmRlcmluZyB0aGVtIGltbWVkaWF0ZWx5IHdvdWxkIHB1c2ggdGhlbSB0byBjb21wbGV0aW9uIHdoaWNoIGlzIHdhc3RlZnVsIGluIHRoYXQgY2FzZSAtIHdlJ2QgaGF2ZSB0byByZW5kZXIoLTEpIGltbWVkaWF0ZWx5IGFmdGVyKVxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQgPSBUd2VlbkxpdGUudG8odGhpcy50YXJnZXQsIDAsIHB0KTtcblx0XHRcdFx0XHRpZiAoIWltbWVkaWF0ZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5faW5pdCgpOyAvL2Vuc3VyZXMgdGhhdCB0aGUgaW5pdGlhbCB2YWx1ZXMgYXJlIHJlY29yZGVkXG5cdFx0XHRcdFx0XHR0aGlzLl9zdGFydEF0Ll9lbmFibGVkKGZhbHNlKTsgLy9ubyBuZWVkIHRvIGhhdmUgdGhlIHR3ZWVuIHJlbmRlciBvbiB0aGUgbmV4dCBjeWNsZS4gRGlzYWJsZSBpdCBiZWNhdXNlIHdlJ2xsIGFsd2F5cyBtYW51YWxseSBjb250cm9sIHRoZSByZW5kZXJzIG9mIHRoZSBfc3RhcnRBdCB0d2Vlbi5cblx0XHRcdFx0XHRcdGlmICh0aGlzLnZhcnMuaW1tZWRpYXRlUmVuZGVyKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQgPSBudWxsO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fdGltZSA9PT0gMCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5fZWFzZSA9IGVhc2UgPSAoIWVhc2UpID8gVHdlZW5MaXRlLmRlZmF1bHRFYXNlIDogKGVhc2UgaW5zdGFuY2VvZiBFYXNlKSA/IGVhc2UgOiAodHlwZW9mKGVhc2UpID09PSBcImZ1bmN0aW9uXCIpID8gbmV3IEVhc2UoZWFzZSwgdi5lYXNlUGFyYW1zKSA6IF9lYXNlTWFwW2Vhc2VdIHx8IFR3ZWVuTGl0ZS5kZWZhdWx0RWFzZTtcblx0XHRcdGlmICh2LmVhc2VQYXJhbXMgaW5zdGFuY2VvZiBBcnJheSAmJiBlYXNlLmNvbmZpZykge1xuXHRcdFx0XHR0aGlzLl9lYXNlID0gZWFzZS5jb25maWcuYXBwbHkoZWFzZSwgdi5lYXNlUGFyYW1zKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2Vhc2VUeXBlID0gdGhpcy5fZWFzZS5fdHlwZTtcblx0XHRcdHRoaXMuX2Vhc2VQb3dlciA9IHRoaXMuX2Vhc2UuX3Bvd2VyO1xuXHRcdFx0dGhpcy5fZmlyc3RQVCA9IG51bGw7XG5cblx0XHRcdGlmICh0aGlzLl90YXJnZXRzKSB7XG5cdFx0XHRcdGwgPSB0aGlzLl90YXJnZXRzLmxlbmd0aDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykge1xuXHRcdFx0XHRcdGlmICggdGhpcy5faW5pdFByb3BzKCB0aGlzLl90YXJnZXRzW2ldLCAodGhpcy5fcHJvcExvb2t1cFtpXSA9IHt9KSwgdGhpcy5fc2libGluZ3NbaV0sIChvcCA/IG9wW2ldIDogbnVsbCksIGkpICkge1xuXHRcdFx0XHRcdFx0aW5pdFBsdWdpbnMgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aW5pdFBsdWdpbnMgPSB0aGlzLl9pbml0UHJvcHModGhpcy50YXJnZXQsIHRoaXMuX3Byb3BMb29rdXAsIHRoaXMuX3NpYmxpbmdzLCBvcCwgMCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpbml0UGx1Z2lucykge1xuXHRcdFx0XHRUd2VlbkxpdGUuX29uUGx1Z2luRXZlbnQoXCJfb25Jbml0QWxsUHJvcHNcIiwgdGhpcyk7IC8vcmVvcmRlcnMgdGhlIGFycmF5IGluIG9yZGVyIG9mIHByaW9yaXR5LiBVc2VzIGEgc3RhdGljIFR3ZWVuUGx1Z2luIG1ldGhvZCBpbiBvcmRlciB0byBtaW5pbWl6ZSBmaWxlIHNpemUgaW4gVHdlZW5MaXRlXG5cdFx0XHR9XG5cdFx0XHRpZiAob3ApIGlmICghdGhpcy5fZmlyc3RQVCkgaWYgKHR5cGVvZih0aGlzLnRhcmdldCkgIT09IFwiZnVuY3Rpb25cIikgeyAvL2lmIGFsbCB0d2VlbmluZyBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBvdmVyd3JpdHRlbiwga2lsbCB0aGUgdHdlZW4uIElmIHRoZSB0YXJnZXQgaXMgYSBmdW5jdGlvbiwgaXQncyBwcm9iYWJseSBhIGRlbGF5ZWRDYWxsIHNvIGxldCBpdCBsaXZlLlxuXHRcdFx0XHR0aGlzLl9lbmFibGVkKGZhbHNlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodi5ydW5CYWNrd2FyZHMpIHtcblx0XHRcdFx0cHQgPSB0aGlzLl9maXJzdFBUO1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRwdC5zICs9IHB0LmM7XG5cdFx0XHRcdFx0cHQuYyA9IC1wdC5jO1xuXHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuX29uVXBkYXRlID0gdi5vblVwZGF0ZTtcblx0XHRcdHRoaXMuX2luaXR0ZWQgPSB0cnVlO1xuXHRcdH07XG5cblx0XHRwLl9pbml0UHJvcHMgPSBmdW5jdGlvbih0YXJnZXQsIHByb3BMb29rdXAsIHNpYmxpbmdzLCBvdmVyd3JpdHRlblByb3BzLCBpbmRleCkge1xuXHRcdFx0dmFyIHAsIGksIGluaXRQbHVnaW5zLCBwbHVnaW4sIHB0LCB2O1xuXHRcdFx0aWYgKHRhcmdldCA9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKF9sYXp5TG9va3VwW3RhcmdldC5fZ3NUd2VlbklEXSkge1xuXHRcdFx0XHRfbGF6eVJlbmRlcigpOyAvL2lmIG90aGVyIHR3ZWVucyBvZiB0aGUgc2FtZSB0YXJnZXQgaGF2ZSByZWNlbnRseSBpbml0dGVkIGJ1dCBoYXZlbid0IHJlbmRlcmVkIHlldCwgd2UndmUgZ290IHRvIGZvcmNlIHRoZSByZW5kZXIgc28gdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWVzIGFyZSBjb3JyZWN0IChpbWFnaW5lIHBvcHVsYXRpbmcgYSB0aW1lbGluZSB3aXRoIGEgYnVuY2ggb2Ygc2VxdWVudGlhbCB0d2VlbnMgYW5kIHRoZW4ganVtcGluZyB0byB0aGUgZW5kKVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMudmFycy5jc3MpIGlmICh0YXJnZXQuc3R5bGUpIGlmICh0YXJnZXQgIT09IHdpbmRvdyAmJiB0YXJnZXQubm9kZVR5cGUpIGlmIChfcGx1Z2lucy5jc3MpIGlmICh0aGlzLnZhcnMuYXV0b0NTUyAhPT0gZmFsc2UpIHsgLy9pdCdzIHNvIGNvbW1vbiB0byB1c2UgVHdlZW5MaXRlL01heCB0byBhbmltYXRlIHRoZSBjc3Mgb2YgRE9NIGVsZW1lbnRzLCB3ZSBhc3N1bWUgdGhhdCBpZiB0aGUgdGFyZ2V0IGlzIGEgRE9NIGVsZW1lbnQsIHRoYXQncyB3aGF0IGlzIGludGVuZGVkIChhIGNvbnZlbmllbmNlIHNvIHRoYXQgdXNlcnMgZG9uJ3QgaGF2ZSB0byB3cmFwIHRoaW5ncyBpbiBjc3M6e30sIGFsdGhvdWdoIHdlIHN0aWxsIHJlY29tbWVuZCBpdCBmb3IgYSBzbGlnaHQgcGVyZm9ybWFuY2UgYm9vc3QgYW5kIGJldHRlciBzcGVjaWZpY2l0eSkuIE5vdGU6IHdlIGNhbm5vdCBjaGVjayBcIm5vZGVUeXBlXCIgb24gdGhlIHdpbmRvdyBpbnNpZGUgYW4gaWZyYW1lLlxuXHRcdFx0XHRfYXV0b0NTUyh0aGlzLnZhcnMsIHRhcmdldCk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHAgaW4gdGhpcy52YXJzKSB7XG5cdFx0XHRcdHYgPSB0aGlzLnZhcnNbcF07XG5cdFx0XHRcdGlmIChfcmVzZXJ2ZWRQcm9wc1twXSkge1xuXHRcdFx0XHRcdGlmICh2KSBpZiAoKHYgaW5zdGFuY2VvZiBBcnJheSkgfHwgKHYucHVzaCAmJiBfaXNBcnJheSh2KSkpIGlmICh2LmpvaW4oXCJcIikuaW5kZXhPZihcIntzZWxmfVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdHRoaXMudmFyc1twXSA9IHYgPSB0aGlzLl9zd2FwU2VsZkluUGFyYW1zKHYsIHRoaXMpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKF9wbHVnaW5zW3BdICYmIChwbHVnaW4gPSBuZXcgX3BsdWdpbnNbcF0oKSkuX29uSW5pdFR3ZWVuKHRhcmdldCwgdGhpcy52YXJzW3BdLCB0aGlzLCBpbmRleCkpIHtcblxuXHRcdFx0XHRcdC8vdCAtIHRhcmdldCBcdFx0W29iamVjdF1cblx0XHRcdFx0XHQvL3AgLSBwcm9wZXJ0eSBcdFx0W3N0cmluZ11cblx0XHRcdFx0XHQvL3MgLSBzdGFydFx0XHRcdFtudW1iZXJdXG5cdFx0XHRcdFx0Ly9jIC0gY2hhbmdlXHRcdFtudW1iZXJdXG5cdFx0XHRcdFx0Ly9mIC0gaXNGdW5jdGlvblx0W2Jvb2xlYW5dXG5cdFx0XHRcdFx0Ly9uIC0gbmFtZVx0XHRcdFtzdHJpbmddXG5cdFx0XHRcdFx0Ly9wZyAtIGlzUGx1Z2luIFx0W2Jvb2xlYW5dXG5cdFx0XHRcdFx0Ly9wciAtIHByaW9yaXR5XHRcdFtudW1iZXJdXG5cdFx0XHRcdFx0Ly9tIC0gbW9kICAgICAgICAgICBbZnVuY3Rpb24gfCAwXVxuXHRcdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdCA9IHtfbmV4dDp0aGlzLl9maXJzdFBULCB0OnBsdWdpbiwgcDpcInNldFJhdGlvXCIsIHM6MCwgYzoxLCBmOjEsIG46cCwgcGc6MSwgcHI6cGx1Z2luLl9wcmlvcml0eSwgbTowfTtcblx0XHRcdFx0XHRpID0gcGx1Z2luLl9vdmVyd3JpdGVQcm9wcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRwcm9wTG9va3VwW3BsdWdpbi5fb3ZlcndyaXRlUHJvcHNbaV1dID0gdGhpcy5fZmlyc3RQVDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBsdWdpbi5fcHJpb3JpdHkgfHwgcGx1Z2luLl9vbkluaXRBbGxQcm9wcykge1xuXHRcdFx0XHRcdFx0aW5pdFBsdWdpbnMgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocGx1Z2luLl9vbkRpc2FibGUgfHwgcGx1Z2luLl9vbkVuYWJsZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5fbm90aWZ5UGx1Z2luc09mRW5hYmxlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwdC5fbmV4dCkge1xuXHRcdFx0XHRcdFx0cHQuX25leHQuX3ByZXYgPSBwdDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwcm9wTG9va3VwW3BdID0gX2FkZFByb3BUd2Vlbi5jYWxsKHRoaXMsIHRhcmdldCwgcCwgXCJnZXRcIiwgdiwgcCwgMCwgbnVsbCwgdGhpcy52YXJzLnN0cmluZ0ZpbHRlciwgaW5kZXgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvdmVyd3JpdHRlblByb3BzKSBpZiAodGhpcy5fa2lsbChvdmVyd3JpdHRlblByb3BzLCB0YXJnZXQpKSB7IC8vYW5vdGhlciB0d2VlbiBtYXkgaGF2ZSB0cmllZCB0byBvdmVyd3JpdGUgcHJvcGVydGllcyBvZiB0aGlzIHR3ZWVuIGJlZm9yZSBpbml0KCkgd2FzIGNhbGxlZCAobGlrZSBpZiB0d28gdHdlZW5zIHN0YXJ0IGF0IHRoZSBzYW1lIHRpbWUsIHRoZSBvbmUgY3JlYXRlZCBzZWNvbmQgd2lsbCBydW4gZmlyc3QpXG5cdFx0XHRcdHJldHVybiB0aGlzLl9pbml0UHJvcHModGFyZ2V0LCBwcm9wTG9va3VwLCBzaWJsaW5ncywgb3ZlcndyaXR0ZW5Qcm9wcywgaW5kZXgpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuX292ZXJ3cml0ZSA+IDEpIGlmICh0aGlzLl9maXJzdFBUKSBpZiAoc2libGluZ3MubGVuZ3RoID4gMSkgaWYgKF9hcHBseU92ZXJ3cml0ZSh0YXJnZXQsIHRoaXMsIHByb3BMb29rdXAsIHRoaXMuX292ZXJ3cml0ZSwgc2libGluZ3MpKSB7XG5cdFx0XHRcdHRoaXMuX2tpbGwocHJvcExvb2t1cCwgdGFyZ2V0KTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX2luaXRQcm9wcyh0YXJnZXQsIHByb3BMb29rdXAsIHNpYmxpbmdzLCBvdmVyd3JpdHRlblByb3BzLCBpbmRleCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fZmlyc3RQVCkgaWYgKCh0aGlzLnZhcnMubGF6eSAhPT0gZmFsc2UgJiYgdGhpcy5fZHVyYXRpb24pIHx8ICh0aGlzLnZhcnMubGF6eSAmJiAhdGhpcy5fZHVyYXRpb24pKSB7IC8vemVybyBkdXJhdGlvbiB0d2VlbnMgZG9uJ3QgbGF6eSByZW5kZXIgYnkgZGVmYXVsdDsgZXZlcnl0aGluZyBlbHNlIGRvZXMuXG5cdFx0XHRcdF9sYXp5TG9va3VwW3RhcmdldC5fZ3NUd2VlbklEXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gaW5pdFBsdWdpbnM7XG5cdFx0fTtcblxuXHRcdHAucmVuZGVyID0gZnVuY3Rpb24odGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKSB7XG5cdFx0XHR2YXIgcHJldlRpbWUgPSB0aGlzLl90aW1lLFxuXHRcdFx0XHRkdXJhdGlvbiA9IHRoaXMuX2R1cmF0aW9uLFxuXHRcdFx0XHRwcmV2UmF3UHJldlRpbWUgPSB0aGlzLl9yYXdQcmV2VGltZSxcblx0XHRcdFx0aXNDb21wbGV0ZSwgY2FsbGJhY2ssIHB0LCByYXdQcmV2VGltZTtcblx0XHRcdGlmICh0aW1lID49IGR1cmF0aW9uIC0gMC4wMDAwMDAxKSB7IC8vdG8gd29yayBhcm91bmQgb2NjYXNpb25hbCBmbG9hdGluZyBwb2ludCBtYXRoIGFydGlmYWN0cy5cblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fdGltZSA9IGR1cmF0aW9uO1xuXHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5fY2FsY0VuZCA/IHRoaXMuX2Vhc2UuZ2V0UmF0aW8oMSkgOiAxO1xuXHRcdFx0XHRpZiAoIXRoaXMuX3JldmVyc2VkICkge1xuXHRcdFx0XHRcdGlzQ29tcGxldGUgPSB0cnVlO1xuXHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvbkNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0Zm9yY2UgPSAoZm9yY2UgfHwgdGhpcy5fdGltZWxpbmUuYXV0b1JlbW92ZUNoaWxkcmVuKTsgLy9vdGhlcndpc2UsIGlmIHRoZSBhbmltYXRpb24gaXMgdW5wYXVzZWQvYWN0aXZhdGVkIGFmdGVyIGl0J3MgYWxyZWFkeSBmaW5pc2hlZCwgaXQgZG9lc24ndCBnZXQgcmVtb3ZlZCBmcm9tIHRoZSBwYXJlbnQgdGltZWxpbmUuXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGR1cmF0aW9uID09PSAwKSBpZiAodGhpcy5faW5pdHRlZCB8fCAhdGhpcy52YXJzLmxhenkgfHwgZm9yY2UpIHsgLy96ZXJvLWR1cmF0aW9uIHR3ZWVucyBhcmUgdHJpY2t5IGJlY2F1c2Ugd2UgbXVzdCBkaXNjZXJuIHRoZSBtb21lbnR1bS9kaXJlY3Rpb24gb2YgdGltZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgc3RhcnRpbmcgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCBvciB0aGUgZW5kaW5nIHZhbHVlcy4gSWYgdGhlIFwicGxheWhlYWRcIiBvZiBpdHMgdGltZWxpbmUgZ29lcyBwYXN0IHRoZSB6ZXJvLWR1cmF0aW9uIHR3ZWVuIGluIHRoZSBmb3J3YXJkIGRpcmVjdGlvbiBvciBsYW5kcyBkaXJlY3RseSBvbiBpdCwgdGhlIGVuZCB2YWx1ZXMgc2hvdWxkIGJlIHJlbmRlcmVkLCBidXQgaWYgdGhlIHRpbWVsaW5lJ3MgXCJwbGF5aGVhZFwiIG1vdmVzIHBhc3QgaXQgaW4gdGhlIGJhY2t3YXJkIGRpcmVjdGlvbiAoZnJvbSBhIHBvc3RpdGl2ZSB0aW1lIHRvIGEgbmVnYXRpdmUgdGltZSksIHRoZSBzdGFydGluZyB2YWx1ZXMgbXVzdCBiZSByZW5kZXJlZC5cblx0XHRcdFx0XHRpZiAodGhpcy5fc3RhcnRUaW1lID09PSB0aGlzLl90aW1lbGluZS5fZHVyYXRpb24pIHsgLy9pZiBhIHplcm8tZHVyYXRpb24gdHdlZW4gaXMgYXQgdGhlIFZFUlkgZW5kIG9mIGEgdGltZWxpbmUgYW5kIHRoYXQgdGltZWxpbmUgcmVuZGVycyBhdCBpdHMgZW5kLCBpdCB3aWxsIHR5cGljYWxseSBhZGQgYSB0aW55IGJpdCBvZiBjdXNoaW9uIHRvIHRoZSByZW5kZXIgdGltZSB0byBwcmV2ZW50IHJvdW5kaW5nIGVycm9ycyBmcm9tIGdldHRpbmcgaW4gdGhlIHdheSBvZiB0d2VlbnMgcmVuZGVyaW5nIHRoZWlyIFZFUlkgZW5kLiBJZiB3ZSB0aGVuIHJldmVyc2UoKSB0aGF0IHRpbWVsaW5lLCB0aGUgemVyby1kdXJhdGlvbiB0d2VlbiB3aWxsIHRyaWdnZXIgaXRzIG9uUmV2ZXJzZUNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRlY2huaWNhbGx5IHRoZSBwbGF5aGVhZCBkaWRuJ3QgcGFzcyBvdmVyIGl0IGFnYWluLiBJdCdzIGEgdmVyeSBzcGVjaWZpYyBlZGdlIGNhc2Ugd2UgbXVzdCBhY2NvbW1vZGF0ZS5cblx0XHRcdFx0XHRcdHRpbWUgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocHJldlJhd1ByZXZUaW1lIDwgMCB8fCAodGltZSA8PSAwICYmIHRpbWUgPj0gLTAuMDAwMDAwMSkgfHwgKHByZXZSYXdQcmV2VGltZSA9PT0gX3RpbnlOdW0gJiYgdGhpcy5kYXRhICE9PSBcImlzUGF1c2VcIikpIGlmIChwcmV2UmF3UHJldlRpbWUgIT09IHRpbWUpIHsgLy9ub3RlOiB3aGVuIHRoaXMuZGF0YSBpcyBcImlzUGF1c2VcIiwgaXQncyBhIGNhbGxiYWNrIGFkZGVkIGJ5IGFkZFBhdXNlKCkgb24gYSB0aW1lbGluZSB0aGF0IHdlIHNob3VsZCBub3QgYmUgdHJpZ2dlcmVkIHdoZW4gTEVBVklORyBpdHMgZXhhY3Qgc3RhcnQgdGltZS4gSW4gb3RoZXIgd29yZHMsIHRsLmFkZFBhdXNlKDEpLnBsYXkoMSkgc2hvdWxkbid0IHBhdXNlLlxuXHRcdFx0XHRcdFx0Zm9yY2UgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWYgKHByZXZSYXdQcmV2VGltZSA+IF90aW55TnVtKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJvblJldmVyc2VDb21wbGV0ZVwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl9yYXdQcmV2VGltZSA9IHJhd1ByZXZUaW1lID0gKCFzdXBwcmVzc0V2ZW50cyB8fCB0aW1lIHx8IHByZXZSYXdQcmV2VGltZSA9PT0gdGltZSkgPyB0aW1lIDogX3RpbnlOdW07IC8vd2hlbiB0aGUgcGxheWhlYWQgYXJyaXZlcyBhdCBFWEFDVExZIHRpbWUgMCAocmlnaHQgb24gdG9wKSBvZiBhIHplcm8tZHVyYXRpb24gdHdlZW4sIHdlIG5lZWQgdG8gZGlzY2VybiBpZiBldmVudHMgYXJlIHN1cHByZXNzZWQgc28gdGhhdCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBhZ2FpbiAobmV4dCB0aW1lKSwgaXQnbGwgdHJpZ2dlciB0aGUgY2FsbGJhY2suIElmIGV2ZW50cyBhcmUgTk9UIHN1cHByZXNzZWQsIG9idmlvdXNseSB0aGUgY2FsbGJhY2sgd291bGQgYmUgdHJpZ2dlcmVkIGluIHRoaXMgcmVuZGVyLiBCYXNpY2FsbHksIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZSBlaXRoZXIgd2hlbiB0aGUgcGxheWhlYWQgQVJSSVZFUyBvciBMRUFWRVMgdGhpcyBleGFjdCBzcG90LCBub3QgYm90aC4gSW1hZ2luZSBkb2luZyBhIHRpbWVsaW5lLnNlZWsoMCkgYW5kIHRoZXJlJ3MgYSBjYWxsYmFjayB0aGF0IHNpdHMgYXQgMC4gU2luY2UgZXZlbnRzIGFyZSBzdXBwcmVzc2VkIG9uIHRoYXQgc2VlaygpIGJ5IGRlZmF1bHQsIG5vdGhpbmcgd2lsbCBmaXJlLCBidXQgd2hlbiB0aGUgcGxheWhlYWQgbW92ZXMgb2ZmIG9mIHRoYXQgcG9zaXRpb24sIHRoZSBjYWxsYmFjayBzaG91bGQgZmlyZS4gVGhpcyBiZWhhdmlvciBpcyB3aGF0IHBlb3BsZSBpbnR1aXRpdmVseSBleHBlY3QuIFdlIHNldCB0aGUgX3Jhd1ByZXZUaW1lIHRvIGJlIGEgcHJlY2lzZSB0aW55IG51bWJlciB0byBpbmRpY2F0ZSB0aGlzIHNjZW5hcmlvIHJhdGhlciB0aGFuIHVzaW5nIGFub3RoZXIgcHJvcGVydHkvdmFyaWFibGUgd2hpY2ggd291bGQgaW5jcmVhc2UgbWVtb3J5IHVzYWdlLiBUaGlzIHRlY2huaXF1ZSBpcyBsZXNzIHJlYWRhYmxlLCBidXQgbW9yZSBlZmZpY2llbnQuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICh0aW1lIDwgMC4wMDAwMDAxKSB7IC8vdG8gd29yayBhcm91bmQgb2NjYXNpb25hbCBmbG9hdGluZyBwb2ludCBtYXRoIGFydGlmYWN0cywgcm91bmQgc3VwZXIgc21hbGwgdmFsdWVzIHRvIDAuXG5cdFx0XHRcdHRoaXMuX3RvdGFsVGltZSA9IHRoaXMuX3RpbWUgPSAwO1xuXHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5fY2FsY0VuZCA/IHRoaXMuX2Vhc2UuZ2V0UmF0aW8oMCkgOiAwO1xuXHRcdFx0XHRpZiAocHJldlRpbWUgIT09IDAgfHwgKGR1cmF0aW9uID09PSAwICYmIHByZXZSYXdQcmV2VGltZSA+IDApKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBcIm9uUmV2ZXJzZUNvbXBsZXRlXCI7XG5cdFx0XHRcdFx0aXNDb21wbGV0ZSA9IHRoaXMuX3JldmVyc2VkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0aW1lIDwgMCkge1xuXHRcdFx0XHRcdHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChkdXJhdGlvbiA9PT0gMCkgaWYgKHRoaXMuX2luaXR0ZWQgfHwgIXRoaXMudmFycy5sYXp5IHx8IGZvcmNlKSB7IC8vemVyby1kdXJhdGlvbiB0d2VlbnMgYXJlIHRyaWNreSBiZWNhdXNlIHdlIG11c3QgZGlzY2VybiB0aGUgbW9tZW50dW0vZGlyZWN0aW9uIG9mIHRpbWUgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHN0YXJ0aW5nIHZhbHVlcyBzaG91bGQgYmUgcmVuZGVyZWQgb3IgdGhlIGVuZGluZyB2YWx1ZXMuIElmIHRoZSBcInBsYXloZWFkXCIgb2YgaXRzIHRpbWVsaW5lIGdvZXMgcGFzdCB0aGUgemVyby1kdXJhdGlvbiB0d2VlbiBpbiB0aGUgZm9yd2FyZCBkaXJlY3Rpb24gb3IgbGFuZHMgZGlyZWN0bHkgb24gaXQsIHRoZSBlbmQgdmFsdWVzIHNob3VsZCBiZSByZW5kZXJlZCwgYnV0IGlmIHRoZSB0aW1lbGluZSdzIFwicGxheWhlYWRcIiBtb3ZlcyBwYXN0IGl0IGluIHRoZSBiYWNrd2FyZCBkaXJlY3Rpb24gKGZyb20gYSBwb3N0aXRpdmUgdGltZSB0byBhIG5lZ2F0aXZlIHRpbWUpLCB0aGUgc3RhcnRpbmcgdmFsdWVzIG11c3QgYmUgcmVuZGVyZWQuXG5cdFx0XHRcdFx0XHRpZiAocHJldlJhd1ByZXZUaW1lID49IDAgJiYgIShwcmV2UmF3UHJldlRpbWUgPT09IF90aW55TnVtICYmIHRoaXMuZGF0YSA9PT0gXCJpc1BhdXNlXCIpKSB7XG5cdFx0XHRcdFx0XHRcdGZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gcmF3UHJldlRpbWUgPSAoIXN1cHByZXNzRXZlbnRzIHx8IHRpbWUgfHwgcHJldlJhd1ByZXZUaW1lID09PSB0aW1lKSA/IHRpbWUgOiBfdGlueU51bTsgLy93aGVuIHRoZSBwbGF5aGVhZCBhcnJpdmVzIGF0IEVYQUNUTFkgdGltZSAwIChyaWdodCBvbiB0b3ApIG9mIGEgemVyby1kdXJhdGlvbiB0d2Vlbiwgd2UgbmVlZCB0byBkaXNjZXJuIGlmIGV2ZW50cyBhcmUgc3VwcHJlc3NlZCBzbyB0aGF0IHdoZW4gdGhlIHBsYXloZWFkIG1vdmVzIGFnYWluIChuZXh0IHRpbWUpLCBpdCdsbCB0cmlnZ2VyIHRoZSBjYWxsYmFjay4gSWYgZXZlbnRzIGFyZSBOT1Qgc3VwcHJlc3NlZCwgb2J2aW91c2x5IHRoZSBjYWxsYmFjayB3b3VsZCBiZSB0cmlnZ2VyZWQgaW4gdGhpcyByZW5kZXIuIEJhc2ljYWxseSwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlIGVpdGhlciB3aGVuIHRoZSBwbGF5aGVhZCBBUlJJVkVTIG9yIExFQVZFUyB0aGlzIGV4YWN0IHNwb3QsIG5vdCBib3RoLiBJbWFnaW5lIGRvaW5nIGEgdGltZWxpbmUuc2VlaygwKSBhbmQgdGhlcmUncyBhIGNhbGxiYWNrIHRoYXQgc2l0cyBhdCAwLiBTaW5jZSBldmVudHMgYXJlIHN1cHByZXNzZWQgb24gdGhhdCBzZWVrKCkgYnkgZGVmYXVsdCwgbm90aGluZyB3aWxsIGZpcmUsIGJ1dCB3aGVuIHRoZSBwbGF5aGVhZCBtb3ZlcyBvZmYgb2YgdGhhdCBwb3NpdGlvbiwgdGhlIGNhbGxiYWNrIHNob3VsZCBmaXJlLiBUaGlzIGJlaGF2aW9yIGlzIHdoYXQgcGVvcGxlIGludHVpdGl2ZWx5IGV4cGVjdC4gV2Ugc2V0IHRoZSBfcmF3UHJldlRpbWUgdG8gYmUgYSBwcmVjaXNlIHRpbnkgbnVtYmVyIHRvIGluZGljYXRlIHRoaXMgc2NlbmFyaW8gcmF0aGVyIHRoYW4gdXNpbmcgYW5vdGhlciBwcm9wZXJ0eS92YXJpYWJsZSB3aGljaCB3b3VsZCBpbmNyZWFzZSBtZW1vcnkgdXNhZ2UuIFRoaXMgdGVjaG5pcXVlIGlzIGxlc3MgcmVhZGFibGUsIGJ1dCBtb3JlIGVmZmljaWVudC5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCF0aGlzLl9pbml0dGVkKSB7IC8vaWYgd2UgcmVuZGVyIHRoZSB2ZXJ5IGJlZ2lubmluZyAodGltZSA9PSAwKSBvZiBhIGZyb21UbygpLCB3ZSBtdXN0IGZvcmNlIHRoZSByZW5kZXIgKG5vcm1hbCB0d2VlbnMgd291bGRuJ3QgbmVlZCB0byByZW5kZXIgYXQgYSB0aW1lIG9mIDAgd2hlbiB0aGUgcHJldlRpbWUgd2FzIGFsc28gMCkuIFRoaXMgaXMgYWxzbyBtYW5kYXRvcnkgdG8gbWFrZSBzdXJlIG92ZXJ3cml0aW5nIGtpY2tzIGluIGltbWVkaWF0ZWx5LlxuXHRcdFx0XHRcdGZvcmNlID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fdG90YWxUaW1lID0gdGhpcy5fdGltZSA9IHRpbWU7XG5cblx0XHRcdFx0aWYgKHRoaXMuX2Vhc2VUeXBlKSB7XG5cdFx0XHRcdFx0dmFyIHIgPSB0aW1lIC8gZHVyYXRpb24sIHR5cGUgPSB0aGlzLl9lYXNlVHlwZSwgcG93ID0gdGhpcy5fZWFzZVBvd2VyO1xuXHRcdFx0XHRcdGlmICh0eXBlID09PSAxIHx8ICh0eXBlID09PSAzICYmIHIgPj0gMC41KSkge1xuXHRcdFx0XHRcdFx0ciA9IDEgLSByO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAodHlwZSA9PT0gMykge1xuXHRcdFx0XHRcdFx0ciAqPSAyO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocG93ID09PSAxKSB7XG5cdFx0XHRcdFx0XHRyICo9IHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDIpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHI7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwb3cgPT09IDMpIHtcblx0XHRcdFx0XHRcdHIgKj0gciAqIHIgKiByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocG93ID09PSA0KSB7XG5cdFx0XHRcdFx0XHRyICo9IHIgKiByICogciAqIHI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKHR5cGUgPT09IDEpIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSAxIC0gcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT09IDIpIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSByO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGltZSAvIGR1cmF0aW9uIDwgMC41KSB7XG5cdFx0XHRcdFx0XHR0aGlzLnJhdGlvID0gciAvIDI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMucmF0aW8gPSAxIC0gKHIgLyAyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5nZXRSYXRpbyh0aW1lIC8gZHVyYXRpb24pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLl90aW1lID09PSBwcmV2VGltZSAmJiAhZm9yY2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fSBlbHNlIGlmICghdGhpcy5faW5pdHRlZCkge1xuXHRcdFx0XHR0aGlzLl9pbml0KCk7XG5cdFx0XHRcdGlmICghdGhpcy5faW5pdHRlZCB8fCB0aGlzLl9nYykgeyAvL2ltbWVkaWF0ZVJlbmRlciB0d2VlbnMgdHlwaWNhbGx5IHdvbid0IGluaXRpYWxpemUgdW50aWwgdGhlIHBsYXloZWFkIGFkdmFuY2VzIChfdGltZSBpcyBncmVhdGVyIHRoYW4gMCkgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgb3ZlcndyaXRpbmcgb2NjdXJzIHByb3Blcmx5LiBBbHNvLCBpZiBhbGwgb2YgdGhlIHR3ZWVuaW5nIHByb3BlcnRpZXMgaGF2ZSBiZWVuIG92ZXJ3cml0dGVuICh3aGljaCB3b3VsZCBjYXVzZSBfZ2MgdG8gYmUgdHJ1ZSwgYXMgc2V0IGluIF9pbml0KCkpLCB3ZSBzaG91bGRuJ3QgY29udGludWUgb3RoZXJ3aXNlIGFuIG9uU3RhcnQgY2FsbGJhY2sgY291bGQgYmUgY2FsbGVkIGZvciBleGFtcGxlLlxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fSBlbHNlIGlmICghZm9yY2UgJiYgdGhpcy5fZmlyc3RQVCAmJiAoKHRoaXMudmFycy5sYXp5ICE9PSBmYWxzZSAmJiB0aGlzLl9kdXJhdGlvbikgfHwgKHRoaXMudmFycy5sYXp5ICYmICF0aGlzLl9kdXJhdGlvbikpKSB7XG5cdFx0XHRcdFx0dGhpcy5fdGltZSA9IHRoaXMuX3RvdGFsVGltZSA9IHByZXZUaW1lO1xuXHRcdFx0XHRcdHRoaXMuX3Jhd1ByZXZUaW1lID0gcHJldlJhd1ByZXZUaW1lO1xuXHRcdFx0XHRcdF9sYXp5VHdlZW5zLnB1c2godGhpcyk7XG5cdFx0XHRcdFx0dGhpcy5fbGF6eSA9IFt0aW1lLCBzdXBwcmVzc0V2ZW50c107XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vX2Vhc2UgaXMgaW5pdGlhbGx5IHNldCB0byBkZWZhdWx0RWFzZSwgc28gbm93IHRoYXQgaW5pdCgpIGhhcyBydW4sIF9lYXNlIGlzIHNldCBwcm9wZXJseSBhbmQgd2UgbmVlZCB0byByZWNhbGN1bGF0ZSB0aGUgcmF0aW8uIE92ZXJhbGwgdGhpcyBpcyBmYXN0ZXIgdGhhbiB1c2luZyBjb25kaXRpb25hbCBsb2dpYyBlYXJsaWVyIGluIHRoZSBtZXRob2QgdG8gYXZvaWQgaGF2aW5nIHRvIHNldCByYXRpbyB0d2ljZSBiZWNhdXNlIHdlIG9ubHkgaW5pdCgpIG9uY2UgYnV0IHJlbmRlclRpbWUoKSBnZXRzIGNhbGxlZCBWRVJZIGZyZXF1ZW50bHkuXG5cdFx0XHRcdGlmICh0aGlzLl90aW1lICYmICFpc0NvbXBsZXRlKSB7XG5cdFx0XHRcdFx0dGhpcy5yYXRpbyA9IHRoaXMuX2Vhc2UuZ2V0UmF0aW8odGhpcy5fdGltZSAvIGR1cmF0aW9uKTtcblx0XHRcdFx0fSBlbHNlIGlmIChpc0NvbXBsZXRlICYmIHRoaXMuX2Vhc2UuX2NhbGNFbmQpIHtcblx0XHRcdFx0XHR0aGlzLnJhdGlvID0gdGhpcy5fZWFzZS5nZXRSYXRpbygodGhpcy5fdGltZSA9PT0gMCkgPyAwIDogMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLl9sYXp5ICE9PSBmYWxzZSkgeyAvL2luIGNhc2UgYSBsYXp5IHJlbmRlciBpcyBwZW5kaW5nLCB3ZSBzaG91bGQgZmx1c2ggaXQgYmVjYXVzZSB0aGUgbmV3IHJlbmRlciBpcyBvY2N1cnJpbmcgbm93IChpbWFnaW5lIGEgbGF6eSB0d2VlbiBpbnN0YW50aWF0aW5nIGFuZCB0aGVuIGltbWVkaWF0ZWx5IHRoZSB1c2VyIGNhbGxzIHR3ZWVuLnNlZWsodHdlZW4uZHVyYXRpb24oKSksIHNraXBwaW5nIHRvIHRoZSBlbmQgLSB0aGUgZW5kIHJlbmRlciB3b3VsZCBiZSBmb3JjZWQsIGFuZCB0aGVuIGlmIHdlIGRpZG4ndCBmbHVzaCB0aGUgbGF6eSByZW5kZXIsIGl0J2QgZmlyZSBBRlRFUiB0aGUgc2VlaygpLCByZW5kZXJpbmcgaXQgYXQgdGhlIHdyb25nIHRpbWUuXG5cdFx0XHRcdHRoaXMuX2xhenkgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdGlmICghdGhpcy5fYWN0aXZlKSBpZiAoIXRoaXMuX3BhdXNlZCAmJiB0aGlzLl90aW1lICE9PSBwcmV2VGltZSAmJiB0aW1lID49IDApIHtcblx0XHRcdFx0dGhpcy5fYWN0aXZlID0gdHJ1ZTsgIC8vc28gdGhhdCBpZiB0aGUgdXNlciByZW5kZXJzIGEgdHdlZW4gKGFzIG9wcG9zZWQgdG8gdGhlIHRpbWVsaW5lIHJlbmRlcmluZyBpdCksIHRoZSB0aW1lbGluZSBpcyBmb3JjZWQgdG8gcmUtcmVuZGVyIGFuZCBhbGlnbiBpdCB3aXRoIHRoZSBwcm9wZXIgdGltZS9mcmFtZSBvbiB0aGUgbmV4dCByZW5kZXJpbmcgY3ljbGUuIE1heWJlIHRoZSB0d2VlbiBhbHJlYWR5IGZpbmlzaGVkIGJ1dCB0aGUgdXNlciBtYW51YWxseSByZS1yZW5kZXJzIGl0IGFzIGhhbGZ3YXkgZG9uZS5cblx0XHRcdH1cblx0XHRcdGlmIChwcmV2VGltZSA9PT0gMCkge1xuXHRcdFx0XHRpZiAodGhpcy5fc3RhcnRBdCkge1xuXHRcdFx0XHRcdGlmICh0aW1lID49IDApIHtcblx0XHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICghY2FsbGJhY2spIHtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gXCJfZHVtbXlHU1wiOyAvL2lmIG5vIGNhbGxiYWNrIGlzIGRlZmluZWQsIHVzZSBhIGR1bW15IHZhbHVlIGp1c3Qgc28gdGhhdCB0aGUgY29uZGl0aW9uIGF0IHRoZSBlbmQgZXZhbHVhdGVzIGFzIHRydWUgYmVjYXVzZSBfc3RhcnRBdCBzaG91bGQgcmVuZGVyIEFGVEVSIHRoZSBub3JtYWwgcmVuZGVyIGxvb3Agd2hlbiB0aGUgdGltZSBpcyBuZWdhdGl2ZS4gV2UgY291bGQgaGFuZGxlIHRoaXMgaW4gYSBtb3JlIGludHVpdGl2ZSB3YXksIG9mIGNvdXJzZSwgYnV0IHRoZSByZW5kZXIgbG9vcCBpcyB0aGUgTU9TVCBpbXBvcnRhbnQgdGhpbmcgdG8gb3B0aW1pemUsIHNvIHRoaXMgdGVjaG5pcXVlIGFsbG93cyB1cyB0byBhdm9pZCBhZGRpbmcgZXh0cmEgY29uZGl0aW9uYWwgbG9naWMgaW4gYSBoaWdoLWZyZXF1ZW5jeSBhcmVhLlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy52YXJzLm9uU3RhcnQpIGlmICh0aGlzLl90aW1lICE9PSAwIHx8IGR1cmF0aW9uID09PSAwKSBpZiAoIXN1cHByZXNzRXZlbnRzKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2FsbGJhY2soXCJvblN0YXJ0XCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRwdCA9IHRoaXMuX2ZpcnN0UFQ7XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHB0LmYpIHtcblx0XHRcdFx0XHRwdC50W3B0LnBdKHB0LmMgKiB0aGlzLnJhdGlvICsgcHQucyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LmMgKiB0aGlzLnJhdGlvICsgcHQucztcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5fb25VcGRhdGUpIHtcblx0XHRcdFx0aWYgKHRpbWUgPCAwKSBpZiAodGhpcy5fc3RhcnRBdCAmJiB0aW1lICE9PSAtMC4wMDAxKSB7IC8vaWYgdGhlIHR3ZWVuIGlzIHBvc2l0aW9uZWQgYXQgdGhlIFZFUlkgYmVnaW5uaW5nIChfc3RhcnRUaW1lIDApIG9mIGl0cyBwYXJlbnQgdGltZWxpbmUsIGl0J3MgaWxsZWdhbCBmb3IgdGhlIHBsYXloZWFkIHRvIGdvIGJhY2sgZnVydGhlciwgc28gd2Ugc2hvdWxkIG5vdCByZW5kZXIgdGhlIHJlY29yZGVkIHN0YXJ0QXQgdmFsdWVzLlxuXHRcdFx0XHRcdHRoaXMuX3N0YXJ0QXQucmVuZGVyKHRpbWUsIHN1cHByZXNzRXZlbnRzLCBmb3JjZSk7IC8vbm90ZTogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIHR1Y2sgdGhpcyBjb25kaXRpb25hbCBsb2dpYyBpbnNpZGUgbGVzcyB0cmF2ZWxlZCBhcmVhcyAobW9zdCB0d2VlbnMgZG9uJ3QgaGF2ZSBhbiBvblVwZGF0ZSkuIFdlJ2QganVzdCBoYXZlIGl0IGF0IHRoZSBlbmQgYmVmb3JlIHRoZSBvbkNvbXBsZXRlLCBidXQgdGhlIHZhbHVlcyBzaG91bGQgYmUgdXBkYXRlZCBiZWZvcmUgYW55IG9uVXBkYXRlIGlzIGNhbGxlZCwgc28gd2UgQUxTTyBwdXQgaXQgaGVyZSBhbmQgdGhlbiBpZiBpdCdzIG5vdCBjYWxsZWQsIHdlIGRvIHNvIGxhdGVyIG5lYXIgdGhlIG9uQ29tcGxldGUuXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFzdXBwcmVzc0V2ZW50cykgaWYgKHRoaXMuX3RpbWUgIT09IHByZXZUaW1lIHx8IGlzQ29tcGxldGUgfHwgZm9yY2UpIHtcblx0XHRcdFx0XHR0aGlzLl9jYWxsYmFjayhcIm9uVXBkYXRlXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoY2FsbGJhY2spIGlmICghdGhpcy5fZ2MgfHwgZm9yY2UpIHsgLy9jaGVjayBfZ2MgYmVjYXVzZSB0aGVyZSdzIGEgY2hhbmNlIHRoYXQga2lsbCgpIGNvdWxkIGJlIGNhbGxlZCBpbiBhbiBvblVwZGF0ZVxuXHRcdFx0XHRpZiAodGltZSA8IDAgJiYgdGhpcy5fc3RhcnRBdCAmJiAhdGhpcy5fb25VcGRhdGUgJiYgdGltZSAhPT0gLTAuMDAwMSkgeyAvLy0wLjAwMDEgaXMgYSBzcGVjaWFsIHZhbHVlIHRoYXQgd2UgdXNlIHdoZW4gbG9vcGluZyBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgb2YgYSByZXBlYXRlZCBUaW1lbGluZU1heCwgaW4gd2hpY2ggY2FzZSB3ZSBzaG91bGRuJ3QgcmVuZGVyIHRoZSBfc3RhcnRBdCB2YWx1ZXMuXG5cdFx0XHRcdFx0dGhpcy5fc3RhcnRBdC5yZW5kZXIodGltZSwgc3VwcHJlc3NFdmVudHMsIGZvcmNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoaXNDb21wbGV0ZSkge1xuXHRcdFx0XHRcdGlmICh0aGlzLl90aW1lbGluZS5hdXRvUmVtb3ZlQ2hpbGRyZW4pIHtcblx0XHRcdFx0XHRcdHRoaXMuX2VuYWJsZWQoZmFsc2UsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5fYWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFzdXBwcmVzc0V2ZW50cyAmJiB0aGlzLnZhcnNbY2FsbGJhY2tdKSB7XG5cdFx0XHRcdFx0dGhpcy5fY2FsbGJhY2soY2FsbGJhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChkdXJhdGlvbiA9PT0gMCAmJiB0aGlzLl9yYXdQcmV2VGltZSA9PT0gX3RpbnlOdW0gJiYgcmF3UHJldlRpbWUgIT09IF90aW55TnVtKSB7IC8vdGhlIG9uQ29tcGxldGUgb3Igb25SZXZlcnNlQ29tcGxldGUgY291bGQgdHJpZ2dlciBtb3ZlbWVudCBvZiB0aGUgcGxheWhlYWQgYW5kIGZvciB6ZXJvLWR1cmF0aW9uIHR3ZWVucyAod2hpY2ggbXVzdCBkaXNjZXJuIGRpcmVjdGlvbikgdGhhdCBsYW5kIGRpcmVjdGx5IGJhY2sgb24gdGhlaXIgc3RhcnQgdGltZSwgd2UgZG9uJ3Qgd2FudCB0byBmaXJlIGFnYWluIG9uIHRoZSBuZXh0IHJlbmRlci4gVGhpbmsgb2Ygc2V2ZXJhbCBhZGRQYXVzZSgpJ3MgaW4gYSB0aW1lbGluZSB0aGF0IGZvcmNlcyB0aGUgcGxheWhlYWQgdG8gYSBjZXJ0YWluIHNwb3QsIGJ1dCB3aGF0IGlmIGl0J3MgYWxyZWFkeSBwYXVzZWQgYW5kIGFub3RoZXIgdHdlZW4gaXMgdHdlZW5pbmcgdGhlIFwidGltZVwiIG9mIHRoZSB0aW1lbGluZT8gRWFjaCB0aW1lIGl0IG1vdmVzIFtmb3J3YXJkXSBwYXN0IHRoYXQgc3BvdCwgaXQgd291bGQgbW92ZSBiYWNrLCBhbmQgc2luY2Ugc3VwcHJlc3NFdmVudHMgaXMgdHJ1ZSwgaXQnZCByZXNldCBfcmF3UHJldlRpbWUgdG8gX3RpbnlOdW0gc28gdGhhdCB3aGVuIGl0IGJlZ2lucyBhZ2FpbiwgdGhlIGNhbGxiYWNrIHdvdWxkIGZpcmUgKHNvIHVsdGltYXRlbHkgaXQgY291bGQgYm91bmNlIGJhY2sgYW5kIGZvcnRoIGR1cmluZyB0aGF0IHR3ZWVuKS4gQWdhaW4sIHRoaXMgaXMgYSB2ZXJ5IHVuY29tbW9uIHNjZW5hcmlvLCBidXQgcG9zc2libGUgbm9uZXRoZWxlc3MuXG5cdFx0XHRcdFx0dGhpcy5fcmF3UHJldlRpbWUgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAuX2tpbGwgPSBmdW5jdGlvbih2YXJzLCB0YXJnZXQsIG92ZXJ3cml0aW5nVHdlZW4pIHtcblx0XHRcdGlmICh2YXJzID09PSBcImFsbFwiKSB7XG5cdFx0XHRcdHZhcnMgPSBudWxsO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHZhcnMgPT0gbnVsbCkgaWYgKHRhcmdldCA9PSBudWxsIHx8IHRhcmdldCA9PT0gdGhpcy50YXJnZXQpIHtcblx0XHRcdFx0dGhpcy5fbGF6eSA9IGZhbHNlO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdFx0dGFyZ2V0ID0gKHR5cGVvZih0YXJnZXQpICE9PSBcInN0cmluZ1wiKSA/ICh0YXJnZXQgfHwgdGhpcy5fdGFyZ2V0cyB8fCB0aGlzLnRhcmdldCkgOiBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0KSB8fCB0YXJnZXQ7XG5cdFx0XHR2YXIgc2ltdWx0YW5lb3VzT3ZlcndyaXRlID0gKG92ZXJ3cml0aW5nVHdlZW4gJiYgdGhpcy5fdGltZSAmJiBvdmVyd3JpdGluZ1R3ZWVuLl9zdGFydFRpbWUgPT09IHRoaXMuX3N0YXJ0VGltZSAmJiB0aGlzLl90aW1lbGluZSA9PT0gb3ZlcndyaXRpbmdUd2Vlbi5fdGltZWxpbmUpLFxuXHRcdFx0XHRpLCBvdmVyd3JpdHRlblByb3BzLCBwLCBwdCwgcHJvcExvb2t1cCwgY2hhbmdlZCwga2lsbFByb3BzLCByZWNvcmQsIGtpbGxlZDtcblx0XHRcdGlmICgoX2lzQXJyYXkodGFyZ2V0KSB8fCBfaXNTZWxlY3Rvcih0YXJnZXQpKSAmJiB0eXBlb2YodGFyZ2V0WzBdKSAhPT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRpID0gdGFyZ2V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0aWYgKHRoaXMuX2tpbGwodmFycywgdGFyZ2V0W2ldLCBvdmVyd3JpdGluZ1R3ZWVuKSkge1xuXHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGhpcy5fdGFyZ2V0cykge1xuXHRcdFx0XHRcdGkgPSB0aGlzLl90YXJnZXRzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdGlmICh0YXJnZXQgPT09IHRoaXMuX3RhcmdldHNbaV0pIHtcblx0XHRcdFx0XHRcdFx0cHJvcExvb2t1cCA9IHRoaXMuX3Byb3BMb29rdXBbaV0gfHwge307XG5cdFx0XHRcdFx0XHRcdHRoaXMuX292ZXJ3cml0dGVuUHJvcHMgPSB0aGlzLl9vdmVyd3JpdHRlblByb3BzIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRvdmVyd3JpdHRlblByb3BzID0gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wc1tpXSA9IHZhcnMgPyB0aGlzLl9vdmVyd3JpdHRlblByb3BzW2ldIHx8IHt9IDogXCJhbGxcIjtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHRhcmdldCAhPT0gdGhpcy50YXJnZXQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cHJvcExvb2t1cCA9IHRoaXMuX3Byb3BMb29rdXA7XG5cdFx0XHRcdFx0b3ZlcndyaXR0ZW5Qcm9wcyA9IHRoaXMuX292ZXJ3cml0dGVuUHJvcHMgPSB2YXJzID8gdGhpcy5fb3ZlcndyaXR0ZW5Qcm9wcyB8fCB7fSA6IFwiYWxsXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAocHJvcExvb2t1cCkge1xuXHRcdFx0XHRcdGtpbGxQcm9wcyA9IHZhcnMgfHwgcHJvcExvb2t1cDtcblx0XHRcdFx0XHRyZWNvcmQgPSAodmFycyAhPT0gb3ZlcndyaXR0ZW5Qcm9wcyAmJiBvdmVyd3JpdHRlblByb3BzICE9PSBcImFsbFwiICYmIHZhcnMgIT09IHByb3BMb29rdXAgJiYgKHR5cGVvZih2YXJzKSAhPT0gXCJvYmplY3RcIiB8fCAhdmFycy5fdGVtcEtpbGwpKTsgLy9fdGVtcEtpbGwgaXMgYSBzdXBlci1zZWNyZXQgd2F5IHRvIGRlbGV0ZSBhIHBhcnRpY3VsYXIgdHdlZW5pbmcgcHJvcGVydHkgYnV0IE5PVCBoYXZlIGl0IHJlbWVtYmVyZWQgYXMgYW4gb2ZmaWNpYWwgb3ZlcndyaXR0ZW4gcHJvcGVydHkgKGxpa2UgaW4gQmV6aWVyUGx1Z2luKVxuXHRcdFx0XHRcdGlmIChvdmVyd3JpdGluZ1R3ZWVuICYmIChUd2VlbkxpdGUub25PdmVyd3JpdGUgfHwgdGhpcy52YXJzLm9uT3ZlcndyaXRlKSkge1xuXHRcdFx0XHRcdFx0Zm9yIChwIGluIGtpbGxQcm9wcykge1xuXHRcdFx0XHRcdFx0XHRpZiAocHJvcExvb2t1cFtwXSkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICgha2lsbGVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRraWxsZWQgPSBbXTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0a2lsbGVkLnB1c2gocCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICgoa2lsbGVkIHx8ICF2YXJzKSAmJiAhX29uT3ZlcndyaXRlKHRoaXMsIG92ZXJ3cml0aW5nVHdlZW4sIHRhcmdldCwga2lsbGVkKSkgeyAvL2lmIHRoZSBvbk92ZXJ3cml0ZSByZXR1cm5lZCBmYWxzZSwgdGhhdCBtZWFucyB0aGUgdXNlciB3YW50cyB0byBvdmVycmlkZSB0aGUgb3ZlcndyaXRpbmcgKGNhbmNlbCBpdCkuXG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRmb3IgKHAgaW4ga2lsbFByb3BzKSB7XG5cdFx0XHRcdFx0XHRpZiAoKHB0ID0gcHJvcExvb2t1cFtwXSkpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHNpbXVsdGFuZW91c092ZXJ3cml0ZSkgeyAvL2lmIGFub3RoZXIgdHdlZW4gb3ZlcndyaXRlcyB0aGlzIG9uZSBhbmQgdGhleSBib3RoIHN0YXJ0IGF0IGV4YWN0bHkgdGhlIHNhbWUgdGltZSwgeWV0IHRoaXMgdHdlZW4gaGFzIGFscmVhZHkgcmVuZGVyZWQgb25jZSAoZm9yIGV4YW1wbGUsIGF0IDAuMDAxKSBiZWNhdXNlIGl0J3MgZmlyc3QgaW4gdGhlIHF1ZXVlLCB3ZSBzaG91bGQgcmV2ZXJ0IHRoZSB2YWx1ZXMgdG8gd2hlcmUgdGhleSB3ZXJlIGF0IDAgc28gdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWVzIGFyZW4ndCBjb250YW1pbmF0ZWQgb24gdGhlIG92ZXJ3cml0aW5nIHR3ZWVuLlxuXHRcdFx0XHRcdFx0XHRcdGlmIChwdC5mKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdKHB0LnMpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQucztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHB0LnBnICYmIHB0LnQuX2tpbGwoa2lsbFByb3BzKSkge1xuXHRcdFx0XHRcdFx0XHRcdGNoYW5nZWQgPSB0cnVlOyAvL3NvbWUgcGx1Z2lucyBuZWVkIHRvIGJlIG5vdGlmaWVkIHNvIHRoZXkgY2FuIHBlcmZvcm0gY2xlYW51cCB0YXNrcyBmaXJzdFxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghcHQucGcgfHwgcHQudC5fb3ZlcndyaXRlUHJvcHMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHB0Ll9wcmV2KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwdC5fcHJldi5fbmV4dCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocHQgPT09IHRoaXMuX2ZpcnN0UFQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHB0Ll9uZXh0KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwdC5fbmV4dC5fcHJldiA9IHB0Ll9wcmV2O1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRwdC5fbmV4dCA9IHB0Ll9wcmV2ID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRkZWxldGUgcHJvcExvb2t1cFtwXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChyZWNvcmQpIHtcblx0XHRcdFx0XHRcdFx0b3ZlcndyaXR0ZW5Qcm9wc1twXSA9IDE7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICghdGhpcy5fZmlyc3RQVCAmJiB0aGlzLl9pbml0dGVkKSB7IC8vaWYgYWxsIHR3ZWVuaW5nIHByb3BlcnRpZXMgYXJlIGtpbGxlZCwga2lsbCB0aGUgdHdlZW4uIFdpdGhvdXQgdGhpcyBsaW5lLCBpZiB0aGVyZSdzIGEgdHdlZW4gd2l0aCBtdWx0aXBsZSB0YXJnZXRzIGFuZCB0aGVuIHlvdSBraWxsVHdlZW5zT2YoKSBlYWNoIHRhcmdldCBpbmRpdmlkdWFsbHksIHRoZSB0d2VlbiB3b3VsZCB0ZWNobmljYWxseSBzdGlsbCByZW1haW4gYWN0aXZlIGFuZCBmaXJlIGl0cyBvbkNvbXBsZXRlIGV2ZW4gdGhvdWdoIHRoZXJlIGFyZW4ndCBhbnkgbW9yZSBwcm9wZXJ0aWVzIHR3ZWVuaW5nLlxuXHRcdFx0XHRcdFx0dGhpcy5fZW5hYmxlZChmYWxzZSwgZmFsc2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0fTtcblxuXHRcdHAuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKHRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQpIHtcblx0XHRcdFx0VHdlZW5MaXRlLl9vblBsdWdpbkV2ZW50KFwiX29uRGlzYWJsZVwiLCB0aGlzKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2ZpcnN0UFQgPSB0aGlzLl9vdmVyd3JpdHRlblByb3BzID0gdGhpcy5fc3RhcnRBdCA9IHRoaXMuX29uVXBkYXRlID0gbnVsbDtcblx0XHRcdHRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQgPSB0aGlzLl9hY3RpdmUgPSB0aGlzLl9sYXp5ID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9wcm9wTG9va3VwID0gKHRoaXMuX3RhcmdldHMpID8ge30gOiBbXTtcblx0XHRcdEFuaW1hdGlvbi5wcm90b3R5cGUuaW52YWxpZGF0ZS5jYWxsKHRoaXMpO1xuXHRcdFx0aWYgKHRoaXMudmFycy5pbW1lZGlhdGVSZW5kZXIpIHtcblx0XHRcdFx0dGhpcy5fdGltZSA9IC1fdGlueU51bTsgLy9mb3JjZXMgYSByZW5kZXIgd2l0aG91dCBoYXZpbmcgdG8gc2V0IHRoZSByZW5kZXIoKSBcImZvcmNlXCIgcGFyYW1ldGVyIHRvIHRydWUgYmVjYXVzZSB3ZSB3YW50IHRvIGFsbG93IGxhenlpbmcgYnkgZGVmYXVsdCAodXNpbmcgdGhlIFwiZm9yY2VcIiBwYXJhbWV0ZXIgYWx3YXlzIGZvcmNlcyBhbiBpbW1lZGlhdGUgZnVsbCByZW5kZXIpXG5cdFx0XHRcdHRoaXMucmVuZGVyKE1hdGgubWluKDAsIC10aGlzLl9kZWxheSkpOyAvL2luIGNhc2UgZGVsYXkgaXMgbmVnYXRpdmUuXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9O1xuXG5cdFx0cC5fZW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQsIGlnbm9yZVRpbWVsaW5lKSB7XG5cdFx0XHRpZiAoIV90aWNrZXJBY3RpdmUpIHtcblx0XHRcdFx0X3RpY2tlci53YWtlKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoZW5hYmxlZCAmJiB0aGlzLl9nYykge1xuXHRcdFx0XHR2YXIgdGFyZ2V0cyA9IHRoaXMuX3RhcmdldHMsXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0aWYgKHRhcmdldHMpIHtcblx0XHRcdFx0XHRpID0gdGFyZ2V0cy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9zaWJsaW5nc1tpXSA9IF9yZWdpc3Rlcih0YXJnZXRzW2ldLCB0aGlzLCB0cnVlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fc2libGluZ3MgPSBfcmVnaXN0ZXIodGhpcy50YXJnZXQsIHRoaXMsIHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRBbmltYXRpb24ucHJvdG90eXBlLl9lbmFibGVkLmNhbGwodGhpcywgZW5hYmxlZCwgaWdub3JlVGltZWxpbmUpO1xuXHRcdFx0aWYgKHRoaXMuX25vdGlmeVBsdWdpbnNPZkVuYWJsZWQpIGlmICh0aGlzLl9maXJzdFBUKSB7XG5cdFx0XHRcdHJldHVybiBUd2VlbkxpdGUuX29uUGx1Z2luRXZlbnQoKGVuYWJsZWQgPyBcIl9vbkVuYWJsZVwiIDogXCJfb25EaXNhYmxlXCIpLCB0aGlzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cbi8vLS0tLVR3ZWVuTGl0ZSBzdGF0aWMgbWV0aG9kcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cdFx0VHdlZW5MaXRlLnRvID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0cmV0dXJuIG5ldyBUd2VlbkxpdGUodGFyZ2V0LCBkdXJhdGlvbiwgdmFycyk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5mcm9tID0gZnVuY3Rpb24odGFyZ2V0LCBkdXJhdGlvbiwgdmFycykge1xuXHRcdFx0dmFycy5ydW5CYWNrd2FyZHMgPSB0cnVlO1xuXHRcdFx0dmFycy5pbW1lZGlhdGVSZW5kZXIgPSAodmFycy5pbW1lZGlhdGVSZW5kZXIgIT0gZmFsc2UpO1xuXHRcdFx0cmV0dXJuIG5ldyBUd2VlbkxpdGUodGFyZ2V0LCBkdXJhdGlvbiwgdmFycyk7XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5mcm9tVG8gPSBmdW5jdGlvbih0YXJnZXQsIGR1cmF0aW9uLCBmcm9tVmFycywgdG9WYXJzKSB7XG5cdFx0XHR0b1ZhcnMuc3RhcnRBdCA9IGZyb21WYXJzO1xuXHRcdFx0dG9WYXJzLmltbWVkaWF0ZVJlbmRlciA9ICh0b1ZhcnMuaW1tZWRpYXRlUmVuZGVyICE9IGZhbHNlICYmIGZyb21WYXJzLmltbWVkaWF0ZVJlbmRlciAhPSBmYWxzZSk7XG5cdFx0XHRyZXR1cm4gbmV3IFR3ZWVuTGl0ZSh0YXJnZXQsIGR1cmF0aW9uLCB0b1ZhcnMpO1xuXHRcdH07XG5cblx0XHRUd2VlbkxpdGUuZGVsYXllZENhbGwgPSBmdW5jdGlvbihkZWxheSwgY2FsbGJhY2ssIHBhcmFtcywgc2NvcGUsIHVzZUZyYW1lcykge1xuXHRcdFx0cmV0dXJuIG5ldyBUd2VlbkxpdGUoY2FsbGJhY2ssIDAsIHtkZWxheTpkZWxheSwgb25Db21wbGV0ZTpjYWxsYmFjaywgb25Db21wbGV0ZVBhcmFtczpwYXJhbXMsIGNhbGxiYWNrU2NvcGU6c2NvcGUsIG9uUmV2ZXJzZUNvbXBsZXRlOmNhbGxiYWNrLCBvblJldmVyc2VDb21wbGV0ZVBhcmFtczpwYXJhbXMsIGltbWVkaWF0ZVJlbmRlcjpmYWxzZSwgbGF6eTpmYWxzZSwgdXNlRnJhbWVzOnVzZUZyYW1lcywgb3ZlcndyaXRlOjB9KTtcblx0XHR9O1xuXG5cdFx0VHdlZW5MaXRlLnNldCA9IGZ1bmN0aW9uKHRhcmdldCwgdmFycykge1xuXHRcdFx0cmV0dXJuIG5ldyBUd2VlbkxpdGUodGFyZ2V0LCAwLCB2YXJzKTtcblx0XHR9O1xuXG5cdFx0VHdlZW5MaXRlLmdldFR3ZWVuc09mID0gZnVuY3Rpb24odGFyZ2V0LCBvbmx5QWN0aXZlKSB7XG5cdFx0XHRpZiAodGFyZ2V0ID09IG51bGwpIHsgcmV0dXJuIFtdOyB9XG5cdFx0XHR0YXJnZXQgPSAodHlwZW9mKHRhcmdldCkgIT09IFwic3RyaW5nXCIpID8gdGFyZ2V0IDogVHdlZW5MaXRlLnNlbGVjdG9yKHRhcmdldCkgfHwgdGFyZ2V0O1xuXHRcdFx0dmFyIGksIGEsIGosIHQ7XG5cdFx0XHRpZiAoKF9pc0FycmF5KHRhcmdldCkgfHwgX2lzU2VsZWN0b3IodGFyZ2V0KSkgJiYgdHlwZW9mKHRhcmdldFswXSkgIT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0aSA9IHRhcmdldC5sZW5ndGg7XG5cdFx0XHRcdGEgPSBbXTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0YSA9IGEuY29uY2F0KFR3ZWVuTGl0ZS5nZXRUd2VlbnNPZih0YXJnZXRbaV0sIG9ubHlBY3RpdmUpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHRcdC8vbm93IGdldCByaWQgb2YgYW55IGR1cGxpY2F0ZXMgKHR3ZWVucyBvZiBhcnJheXMgb2Ygb2JqZWN0cyBjb3VsZCBjYXVzZSBkdXBsaWNhdGVzKVxuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHR0ID0gYVtpXTtcblx0XHRcdFx0XHRqID0gaTtcblx0XHRcdFx0XHR3aGlsZSAoLS1qID4gLTEpIHtcblx0XHRcdFx0XHRcdGlmICh0ID09PSBhW2pdKSB7XG5cdFx0XHRcdFx0XHRcdGEuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YSA9IF9yZWdpc3Rlcih0YXJnZXQpLmNvbmNhdCgpO1xuXHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGlmIChhW2ldLl9nYyB8fCAob25seUFjdGl2ZSAmJiAhYVtpXS5pc0FjdGl2ZSgpKSkge1xuXHRcdFx0XHRcdFx0YS5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9O1xuXG5cdFx0VHdlZW5MaXRlLmtpbGxUd2VlbnNPZiA9IFR3ZWVuTGl0ZS5raWxsRGVsYXllZENhbGxzVG8gPSBmdW5jdGlvbih0YXJnZXQsIG9ubHlBY3RpdmUsIHZhcnMpIHtcblx0XHRcdGlmICh0eXBlb2Yob25seUFjdGl2ZSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0dmFycyA9IG9ubHlBY3RpdmU7IC8vZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IChiZWZvcmUgXCJvbmx5QWN0aXZlXCIgcGFyYW1ldGVyIHdhcyBpbnNlcnRlZClcblx0XHRcdFx0b25seUFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGEgPSBUd2VlbkxpdGUuZ2V0VHdlZW5zT2YodGFyZ2V0LCBvbmx5QWN0aXZlKSxcblx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdGFbaV0uX2tpbGwodmFycywgdGFyZ2V0KTtcblx0XHRcdH1cblx0XHR9O1xuXG5cblxuLypcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIFR3ZWVuUGx1Z2luICAgKGNvdWxkIGVhc2lseSBiZSBzcGxpdCBvdXQgYXMgYSBzZXBhcmF0ZSBmaWxlL2NsYXNzLCBidXQgaW5jbHVkZWQgZm9yIGVhc2Ugb2YgdXNlIChzbyB0aGF0IHBlb3BsZSBkb24ndCBuZWVkIHRvIGluY2x1ZGUgYW5vdGhlciBzY3JpcHQgY2FsbCBiZWZvcmUgbG9hZGluZyBwbHVnaW5zIHdoaWNoIGlzIGVhc3kgdG8gZm9yZ2V0KVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cdFx0dmFyIFR3ZWVuUGx1Z2luID0gX2NsYXNzKFwicGx1Z2lucy5Ud2VlblBsdWdpblwiLCBmdW5jdGlvbihwcm9wcywgcHJpb3JpdHkpIHtcblx0XHRcdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcyA9IChwcm9wcyB8fCBcIlwiKS5zcGxpdChcIixcIik7XG5cdFx0XHRcdFx0dGhpcy5fcHJvcE5hbWUgPSB0aGlzLl9vdmVyd3JpdGVQcm9wc1swXTtcblx0XHRcdFx0XHR0aGlzLl9wcmlvcml0eSA9IHByaW9yaXR5IHx8IDA7XG5cdFx0XHRcdFx0dGhpcy5fc3VwZXIgPSBUd2VlblBsdWdpbi5wcm90b3R5cGU7XG5cdFx0XHRcdH0sIHRydWUpO1xuXG5cdFx0cCA9IFR3ZWVuUGx1Z2luLnByb3RvdHlwZTtcblx0XHRUd2VlblBsdWdpbi52ZXJzaW9uID0gXCIxLjE5LjBcIjtcblx0XHRUd2VlblBsdWdpbi5BUEkgPSAyO1xuXHRcdHAuX2ZpcnN0UFQgPSBudWxsO1xuXHRcdHAuX2FkZFR3ZWVuID0gX2FkZFByb3BUd2Vlbjtcblx0XHRwLnNldFJhdGlvID0gX3NldFJhdGlvO1xuXG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKGxvb2t1cCkge1xuXHRcdFx0dmFyIGEgPSB0aGlzLl9vdmVyd3JpdGVQcm9wcyxcblx0XHRcdFx0cHQgPSB0aGlzLl9maXJzdFBULFxuXHRcdFx0XHRpO1xuXHRcdFx0aWYgKGxvb2t1cFt0aGlzLl9wcm9wTmFtZV0gIT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcyA9IFtdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aSA9IGEubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAobG9va3VwW2FbaV1dICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdGEuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdGlmIChsb29rdXBbcHQubl0gIT0gbnVsbCkge1xuXHRcdFx0XHRcdGlmIChwdC5fbmV4dCkge1xuXHRcdFx0XHRcdFx0cHQuX25leHQuX3ByZXYgPSBwdC5fcHJldjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHB0Ll9wcmV2KSB7XG5cdFx0XHRcdFx0XHRwdC5fcHJldi5fbmV4dCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHRcdFx0cHQuX3ByZXYgPSBudWxsO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5fZmlyc3RQVCA9PT0gcHQpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBwdC5fbmV4dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdFx0cC5fbW9kID0gcC5fcm91bmRQcm9wcyA9IGZ1bmN0aW9uKGxvb2t1cCkge1xuXHRcdFx0dmFyIHB0ID0gdGhpcy5fZmlyc3RQVCxcblx0XHRcdFx0dmFsO1xuXHRcdFx0d2hpbGUgKHB0KSB7XG5cdFx0XHRcdHZhbCA9IGxvb2t1cFt0aGlzLl9wcm9wTmFtZV0gfHwgKHB0Lm4gIT0gbnVsbCAmJiBsb29rdXBbIHB0Lm4uc3BsaXQodGhpcy5fcHJvcE5hbWUgKyBcIl9cIikuam9pbihcIlwiKSBdKTtcblx0XHRcdFx0aWYgKHZhbCAmJiB0eXBlb2YodmFsKSA9PT0gXCJmdW5jdGlvblwiKSB7IC8vc29tZSBwcm9wZXJ0aWVzIHRoYXQgYXJlIHZlcnkgcGx1Z2luLXNwZWNpZmljIGFkZCBhIHByZWZpeCBuYW1lZCBhZnRlciB0aGUgX3Byb3BOYW1lIHBsdXMgYW4gdW5kZXJzY29yZSwgc28gd2UgbmVlZCB0byBpZ25vcmUgdGhhdCBleHRyYSBzdHVmZiBoZXJlLlxuXHRcdFx0XHRcdGlmIChwdC5mID09PSAyKSB7XG5cdFx0XHRcdFx0XHRwdC50Ll9hcHBseVBULm0gPSB2YWw7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB0Lm0gPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFR3ZWVuTGl0ZS5fb25QbHVnaW5FdmVudCA9IGZ1bmN0aW9uKHR5cGUsIHR3ZWVuKSB7XG5cdFx0XHR2YXIgcHQgPSB0d2Vlbi5fZmlyc3RQVCxcblx0XHRcdFx0Y2hhbmdlZCwgcHQyLCBmaXJzdCwgbGFzdCwgbmV4dDtcblx0XHRcdGlmICh0eXBlID09PSBcIl9vbkluaXRBbGxQcm9wc1wiKSB7XG5cdFx0XHRcdC8vc29ydHMgdGhlIFByb3BUd2VlbiBsaW5rZWQgbGlzdCBpbiBvcmRlciBvZiBwcmlvcml0eSBiZWNhdXNlIHNvbWUgcGx1Z2lucyBuZWVkIHRvIHJlbmRlciBlYXJsaWVyL2xhdGVyIHRoYW4gb3RoZXJzLCBsaWtlIE1vdGlvbkJsdXJQbHVnaW4gYXBwbGllcyBpdHMgZWZmZWN0cyBhZnRlciBhbGwgeC95L2FscGhhIHR3ZWVucyBoYXZlIHJlbmRlcmVkIG9uIGVhY2ggZnJhbWUuXG5cdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdG5leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRwdDIgPSBmaXJzdDtcblx0XHRcdFx0XHR3aGlsZSAocHQyICYmIHB0Mi5wciA+IHB0LnByKSB7XG5cdFx0XHRcdFx0XHRwdDIgPSBwdDIuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgocHQuX3ByZXYgPSBwdDIgPyBwdDIuX3ByZXYgOiBsYXN0KSkge1xuXHRcdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Zmlyc3QgPSBwdDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKChwdC5fbmV4dCA9IHB0MikpIHtcblx0XHRcdFx0XHRcdHB0Mi5fcHJldiA9IHB0O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRsYXN0ID0gcHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHR3ZWVuLl9maXJzdFBUID0gZmlyc3Q7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0aWYgKHB0LnBnKSBpZiAodHlwZW9mKHB0LnRbdHlwZV0pID09PSBcImZ1bmN0aW9uXCIpIGlmIChwdC50W3R5cGVdKCkpIHtcblx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0fTtcblxuXHRcdFR3ZWVuUGx1Z2luLmFjdGl2YXRlID0gZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdFx0dmFyIGkgPSBwbHVnaW5zLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRpZiAocGx1Z2luc1tpXS5BUEkgPT09IFR3ZWVuUGx1Z2luLkFQSSkge1xuXHRcdFx0XHRcdF9wbHVnaW5zWyhuZXcgcGx1Z2luc1tpXSgpKS5fcHJvcE5hbWVdID0gcGx1Z2luc1tpXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fTtcblxuXHRcdC8vcHJvdmlkZXMgYSBtb3JlIGNvbmNpc2Ugd2F5IHRvIGRlZmluZSBwbHVnaW5zIHRoYXQgaGF2ZSBubyBkZXBlbmRlbmNpZXMgYmVzaWRlcyBUd2VlblBsdWdpbiBhbmQgVHdlZW5MaXRlLCB3cmFwcGluZyBjb21tb24gYm9pbGVycGxhdGUgc3R1ZmYgaW50byBvbmUgZnVuY3Rpb24gKGFkZGVkIGluIDEuOS4wKS4gWW91IGRvbid0IE5FRUQgdG8gdXNlIHRoaXMgdG8gZGVmaW5lIGEgcGx1Z2luIC0gdGhlIG9sZCB3YXkgc3RpbGwgd29ya3MgYW5kIGNhbiBiZSB1c2VmdWwgaW4gY2VydGFpbiAocmFyZSkgc2l0dWF0aW9ucy5cblx0XHRfZ3NEZWZpbmUucGx1Z2luID0gZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0XHRpZiAoIWNvbmZpZyB8fCAhY29uZmlnLnByb3BOYW1lIHx8ICFjb25maWcuaW5pdCB8fCAhY29uZmlnLkFQSSkgeyB0aHJvdyBcImlsbGVnYWwgcGx1Z2luIGRlZmluaXRpb24uXCI7IH1cblx0XHRcdHZhciBwcm9wTmFtZSA9IGNvbmZpZy5wcm9wTmFtZSxcblx0XHRcdFx0cHJpb3JpdHkgPSBjb25maWcucHJpb3JpdHkgfHwgMCxcblx0XHRcdFx0b3ZlcndyaXRlUHJvcHMgPSBjb25maWcub3ZlcndyaXRlUHJvcHMsXG5cdFx0XHRcdG1hcCA9IHtpbml0OlwiX29uSW5pdFR3ZWVuXCIsIHNldDpcInNldFJhdGlvXCIsIGtpbGw6XCJfa2lsbFwiLCByb3VuZDpcIl9tb2RcIiwgbW9kOlwiX21vZFwiLCBpbml0QWxsOlwiX29uSW5pdEFsbFByb3BzXCJ9LFxuXHRcdFx0XHRQbHVnaW4gPSBfY2xhc3MoXCJwbHVnaW5zLlwiICsgcHJvcE5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wTmFtZS5zdWJzdHIoMSkgKyBcIlBsdWdpblwiLFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0VHdlZW5QbHVnaW4uY2FsbCh0aGlzLCBwcm9wTmFtZSwgcHJpb3JpdHkpO1xuXHRcdFx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMgPSBvdmVyd3JpdGVQcm9wcyB8fCBbXTtcblx0XHRcdFx0XHR9LCAoY29uZmlnLmdsb2JhbCA9PT0gdHJ1ZSkpLFxuXHRcdFx0XHRwID0gUGx1Z2luLnByb3RvdHlwZSA9IG5ldyBUd2VlblBsdWdpbihwcm9wTmFtZSksXG5cdFx0XHRcdHByb3A7XG5cdFx0XHRwLmNvbnN0cnVjdG9yID0gUGx1Z2luO1xuXHRcdFx0UGx1Z2luLkFQSSA9IGNvbmZpZy5BUEk7XG5cdFx0XHRmb3IgKHByb3AgaW4gbWFwKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YoY29uZmlnW3Byb3BdKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0cFttYXBbcHJvcF1dID0gY29uZmlnW3Byb3BdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRQbHVnaW4udmVyc2lvbiA9IGNvbmZpZy52ZXJzaW9uO1xuXHRcdFx0VHdlZW5QbHVnaW4uYWN0aXZhdGUoW1BsdWdpbl0pO1xuXHRcdFx0cmV0dXJuIFBsdWdpbjtcblx0XHR9O1xuXG5cblx0XHQvL25vdyBydW4gdGhyb3VnaCBhbGwgdGhlIGRlcGVuZGVuY2llcyBkaXNjb3ZlcmVkIGFuZCBpZiBhbnkgYXJlIG1pc3NpbmcsIGxvZyB0aGF0IHRvIHRoZSBjb25zb2xlIGFzIGEgd2FybmluZy4gVGhpcyBpcyB3aHkgaXQncyBiZXN0IHRvIGhhdmUgVHdlZW5MaXRlIGxvYWQgbGFzdCAtIGl0IGNhbiBjaGVjayBhbGwgdGhlIGRlcGVuZGVuY2llcyBmb3IgeW91LlxuXHRcdGEgPSB3aW5kb3cuX2dzUXVldWU7XG5cdFx0aWYgKGEpIHtcblx0XHRcdGZvciAoaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGFbaV0oKTtcblx0XHRcdH1cblx0XHRcdGZvciAocCBpbiBfZGVmTG9va3VwKSB7XG5cdFx0XHRcdGlmICghX2RlZkxvb2t1cFtwXS5mdW5jKSB7XG5cdFx0XHRcdFx0d2luZG93LmNvbnNvbGUubG9nKFwiR1NBUCBlbmNvdW50ZXJlZCBtaXNzaW5nIGRlcGVuZGVuY3k6IFwiICsgcCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRfdGlja2VyQWN0aXZlID0gZmFsc2U7IC8vZW5zdXJlcyB0aGF0IHRoZSBmaXJzdCBvZmZpY2lhbCBhbmltYXRpb24gZm9yY2VzIGEgdGlja2VyLnRpY2soKSB0byB1cGRhdGUgdGhlIHRpbWUgd2hlbiBpdCBpcyBpbnN0YW50aWF0ZWRcblxufSkoKHR5cGVvZihtb2R1bGUpICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzICYmIHR5cGVvZihnbG9iYWwpICE9PSBcInVuZGVmaW5lZFwiKSA/IGdsb2JhbCA6IHRoaXMgfHwgd2luZG93LCBcIlR3ZWVuTWF4XCIpOyIsIi8qIVxuICogVkVSU0lPTjogMC4yLjBcbiAqIERBVEU6IDIwMTYtMTEtMDRcbiAqIFVQREFURVMgQU5EIERPQ1MgQVQ6IGh0dHA6Ly9ncmVlbnNvY2suY29tXG4gKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDA4LTIwMTYsIEdyZWVuU29jay4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgd29yayBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvclxuICogQ2x1YiBHcmVlblNvY2sgbWVtYmVycywgdGhlIHNvZnR3YXJlIGFncmVlbWVudCB0aGF0IHdhcyBpc3N1ZWQgd2l0aCB5b3VyIG1lbWJlcnNoaXAuXG4gKlxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4gKiovXG52YXIgX2dzU2NvcGUgPSAodHlwZW9mKG1vZHVsZSkgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMgJiYgdHlwZW9mKGdsb2JhbCkgIT09IFwidW5kZWZpbmVkXCIpID8gZ2xvYmFsIDogdGhpcyB8fCB3aW5kb3c7IC8vaGVscHMgZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBBTUQvUmVxdWlyZUpTIGFuZCBDb21tb25KUy9Ob2RlXG4oX2dzU2NvcGUuX2dzUXVldWUgfHwgKF9nc1Njb3BlLl9nc1F1ZXVlID0gW10pKS5wdXNoKCBmdW5jdGlvbigpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRfZ3NTY29wZS5fZ3NEZWZpbmUoXCJlYXNpbmcuQ3VzdG9tRWFzZVwiLCBbXCJlYXNpbmcuRWFzZVwiXSwgZnVuY3Rpb24oRWFzZSkge1xuXG5cdFx0dmFyIF9udW1iZXJzRXhwID0gLyg/OigtfC09fFxcKz0pP1xcZCpcXC4/XFxkKig/OmVbXFwtK10/XFxkKyk/KVswLTldL2lnLFxuXHRcdFx0X3N2Z1BhdGhFeHAgPSAvW2FjaGxtcXN0dnpdfCgtP1xcZCpcXC4/XFxkKig/OmVbXFwtK10/XFxkKyk/KVswLTldL2lnLFxuXHRcdFx0X3NjaWVudGlmaWMgPSAvW1xcK1xcLV0/XFxkKlxcLj9cXGQrZVtcXCtcXC1dP1xcZCsvaWcsXG5cdFx0XHRfbmVlZHNQYXJzaW5nRXhwID0gL1tjTGxzU10vZyxcblx0XHRcdF9iZXppZXJFcnJvciA9IFwiQ3VzdG9tRWFzZSBvbmx5IGFjY2VwdHMgQ3ViaWMgQmV6aWVyIGRhdGEuXCIsXG5cdFx0XHRfYmV6aWVyVG9Qb2ludHMgPSBmdW5jdGlvbiAoeDEsIHkxLCB4MiwgeTIsIHgzLCB5MywgeDQsIHk0LCB0aHJlc2hvbGQsIHBvaW50cywgaW5kZXgpIHtcblx0XHRcdFx0dmFyIHgxMiA9ICh4MSArIHgyKSAvIDIsXG5cdFx0XHRcdFx0eTEyID0gKHkxICsgeTIpIC8gMixcblx0XHRcdFx0XHR4MjMgPSAoeDIgKyB4MykgLyAyLFxuXHRcdFx0XHRcdHkyMyA9ICh5MiArIHkzKSAvIDIsXG5cdFx0XHRcdFx0eDM0ID0gKHgzICsgeDQpIC8gMixcblx0XHRcdFx0XHR5MzQgPSAoeTMgKyB5NCkgLyAyLFxuXHRcdFx0XHRcdHgxMjMgPSAoeDEyICsgeDIzKSAvIDIsXG5cdFx0XHRcdFx0eTEyMyA9ICh5MTIgKyB5MjMpIC8gMixcblx0XHRcdFx0XHR4MjM0ID0gKHgyMyArIHgzNCkgLyAyLFxuXHRcdFx0XHRcdHkyMzQgPSAoeTIzICsgeTM0KSAvIDIsXG5cdFx0XHRcdFx0eDEyMzQgPSAoeDEyMyArIHgyMzQpIC8gMixcblx0XHRcdFx0XHR5MTIzNCA9ICh5MTIzICsgeTIzNCkgLyAyLFxuXHRcdFx0XHRcdGR4ID0geDQgLSB4MSxcblx0XHRcdFx0XHRkeSA9IHk0IC0geTEsXG5cdFx0XHRcdFx0ZDIgPSBNYXRoLmFicygoeDIgLSB4NCkgKiBkeSAtICh5MiAtIHk0KSAqIGR4KSxcblx0XHRcdFx0XHRkMyA9IE1hdGguYWJzKCh4MyAtIHg0KSAqIGR5IC0gKHkzIC0geTQpICogZHgpLFxuXHRcdFx0XHRcdGxlbmd0aDtcblx0XHRcdFx0aWYgKCFwb2ludHMpIHtcblx0XHRcdFx0XHRwb2ludHMgPSBbe3g6IHgxLCB5OiB5MX0sIHt4OiB4NCwgeTogeTR9XTtcblx0XHRcdFx0XHRpbmRleCA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cG9pbnRzLnNwbGljZShpbmRleCB8fCBwb2ludHMubGVuZ3RoIC0gMSwgMCwge3g6IHgxMjM0LCB5OiB5MTIzNH0pO1xuXHRcdFx0XHRpZiAoKGQyICsgZDMpICogKGQyICsgZDMpID4gdGhyZXNob2xkICogKGR4ICogZHggKyBkeSAqIGR5KSkge1xuXHRcdFx0XHRcdGxlbmd0aCA9IHBvaW50cy5sZW5ndGg7XG5cdFx0XHRcdFx0X2JlemllclRvUG9pbnRzKHgxLCB5MSwgeDEyLCB5MTIsIHgxMjMsIHkxMjMsIHgxMjM0LCB5MTIzNCwgdGhyZXNob2xkLCBwb2ludHMsIGluZGV4KTtcblx0XHRcdFx0XHRfYmV6aWVyVG9Qb2ludHMoeDEyMzQsIHkxMjM0LCB4MjM0LCB5MjM0LCB4MzQsIHkzNCwgeDQsIHk0LCB0aHJlc2hvbGQsIHBvaW50cywgaW5kZXggKyAxICsgKHBvaW50cy5sZW5ndGggLSBsZW5ndGgpKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcG9pbnRzO1xuXHRcdFx0fSxcblxuXHRcdFx0X3BhdGhEYXRhVG9CZXppZXIgPSBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHR2YXIgYSA9IChkICsgXCJcIikucmVwbGFjZShfc2NpZW50aWZpYywgZnVuY3Rpb24gKG0pIHtcblx0XHRcdFx0XHRcdFx0dmFyIG4gPSArbTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuIDwgMC4wMDAxICYmIG4gPiAtMC4wMDAxKSA/IDAgOiBuO1xuXHRcdFx0XHRcdFx0fSkubWF0Y2goX3N2Z1BhdGhFeHApIHx8IFtdLCAvL3NvbWUgYXV0aG9yaW5nIHByb2dyYW1zIHNwaXQgb3V0IHZlcnkgc21hbGwgbnVtYmVycyBpbiBzY2llbnRpZmljIG5vdGF0aW9uIGxpa2UgXCIxZS01XCIsIHNvIG1ha2Ugc3VyZSB3ZSByb3VuZCB0aGF0IGRvd24gdG8gMCBmaXJzdC5cblx0XHRcdFx0XHRwYXRoID0gW10sXG5cdFx0XHRcdFx0cmVsYXRpdmVYID0gMCxcblx0XHRcdFx0XHRyZWxhdGl2ZVkgPSAwLFxuXHRcdFx0XHRcdGVsZW1lbnRzID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0bCA9IDIsXG5cdFx0XHRcdFx0aSwgeCwgeSwgY29tbWFuZCwgaXNSZWxhdGl2ZSwgc2VnbWVudCwgc3RhcnRYLCBzdGFydFksIHByZXZDb21tYW5kLCBkaWZYLCBkaWZZO1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZWxlbWVudHM7IGkrKykge1xuXHRcdFx0XHRcdHByZXZDb21tYW5kID0gY29tbWFuZDtcblx0XHRcdFx0XHRpZiAoaXNOYU4oYVtpXSkpIHtcblx0XHRcdFx0XHRcdGNvbW1hbmQgPSBhW2ldLnRvVXBwZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRpc1JlbGF0aXZlID0gKGNvbW1hbmQgIT09IGFbaV0pOyAvL2xvd2VyIGNhc2UgbWVhbnMgcmVsYXRpdmVcblx0XHRcdFx0XHR9IGVsc2UgeyAvL2NvbW1hbmRzIGxpa2UgXCJDXCIgY2FuIGJlIHN0cnVuZyB0b2dldGhlciB3aXRob3V0IGFueSBuZXcgY29tbWFuZCBjaGFyYWN0ZXJzIGJldHdlZW4uXG5cdFx0XHRcdFx0XHRpLS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHggPSArYVtpICsgMV07XG5cdFx0XHRcdFx0eSA9ICthW2kgKyAyXTtcblx0XHRcdFx0XHRpZiAoaXNSZWxhdGl2ZSkge1xuXHRcdFx0XHRcdFx0eCArPSByZWxhdGl2ZVg7XG5cdFx0XHRcdFx0XHR5ICs9IHJlbGF0aXZlWTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCFpKSB7XG5cdFx0XHRcdFx0XHRzdGFydFggPSB4O1xuXHRcdFx0XHRcdFx0c3RhcnRZID0geTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGNvbW1hbmQgPT09IFwiTVwiKSB7XG5cdFx0XHRcdFx0XHRpZiAoc2VnbWVudCAmJiBzZWdtZW50Lmxlbmd0aCA8IDgpIHsgLy9pZiB0aGUgcGF0aCBkYXRhIHdhcyBmdW5reSBhbmQganVzdCBoYWQgYSBNIHdpdGggbm8gYWN0dWFsIGRyYXdpbmcgYW55d2hlcmUsIHNraXAgaXQuXG5cdFx0XHRcdFx0XHRcdHBhdGgubGVuZ3RoIC09IDE7XG5cdFx0XHRcdFx0XHRcdGwgPSAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmVsYXRpdmVYID0gc3RhcnRYID0geDtcblx0XHRcdFx0XHRcdHJlbGF0aXZlWSA9IHN0YXJ0WSA9IHk7XG5cdFx0XHRcdFx0XHRzZWdtZW50ID0gW3gsIHldO1xuXHRcdFx0XHRcdFx0bCA9IDI7XG5cdFx0XHRcdFx0XHRwYXRoLnB1c2goc2VnbWVudCk7XG5cdFx0XHRcdFx0XHRpICs9IDI7XG5cdFx0XHRcdFx0XHRjb21tYW5kID0gXCJMXCI7IC8vYW4gXCJNXCIgd2l0aCBtb3JlIHRoYW4gMiB2YWx1ZXMgZ2V0cyBpbnRlcnByZXRlZCBhcyBcImxpbmVUb1wiIGNvbW1hbmRzIChcIkxcIikuXG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiQ1wiKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXNlZ21lbnQpIHtcblx0XHRcdFx0XHRcdFx0c2VnbWVudCA9IFswLCAwXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNlZ21lbnRbbCsrXSA9IHg7XG5cdFx0XHRcdFx0XHRzZWdtZW50W2wrK10gPSB5O1xuXHRcdFx0XHRcdFx0aWYgKCFpc1JlbGF0aXZlKSB7XG5cdFx0XHRcdFx0XHRcdHJlbGF0aXZlWCA9IHJlbGF0aXZlWSA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzZWdtZW50W2wrK10gPSByZWxhdGl2ZVggKyBhW2kgKyAzXSAqIDE7IC8vbm90ZTogXCIqMVwiIGlzIGp1c3QgYSBmYXN0L3Nob3J0IHdheSB0byBjYXN0IHRoZSB2YWx1ZSBhcyBhIE51bWJlci4gV0FBQVkgZmFzdGVyIGluIENocm9tZSwgc2xpZ2h0bHkgc2xvd2VyIGluIEZpcmVmb3guXG5cdFx0XHRcdFx0XHRzZWdtZW50W2wrK10gPSByZWxhdGl2ZVkgKyBhW2kgKyA0XSAqIDE7XG5cdFx0XHRcdFx0XHRzZWdtZW50W2wrK10gPSByZWxhdGl2ZVggPSByZWxhdGl2ZVggKyBhW2kgKyA1XSAqIDE7XG5cdFx0XHRcdFx0XHRzZWdtZW50W2wrK10gPSByZWxhdGl2ZVkgPSByZWxhdGl2ZVkgKyBhW2kgKyA2XSAqIDE7XG5cdFx0XHRcdFx0XHRpICs9IDY7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiU1wiKSB7XG5cdFx0XHRcdFx0XHRpZiAocHJldkNvbW1hbmQgPT09IFwiQ1wiIHx8IHByZXZDb21tYW5kID09PSBcIlNcIikge1xuXHRcdFx0XHRcdFx0XHRkaWZYID0gcmVsYXRpdmVYIC0gc2VnbWVudFtsIC0gNF07XG5cdFx0XHRcdFx0XHRcdGRpZlkgPSByZWxhdGl2ZVkgLSBzZWdtZW50W2wgLSAzXTtcblx0XHRcdFx0XHRcdFx0c2VnbWVudFtsKytdID0gcmVsYXRpdmVYICsgZGlmWDtcblx0XHRcdFx0XHRcdFx0c2VnbWVudFtsKytdID0gcmVsYXRpdmVZICsgZGlmWTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHNlZ21lbnRbbCsrXSA9IHJlbGF0aXZlWDtcblx0XHRcdFx0XHRcdFx0c2VnbWVudFtsKytdID0gcmVsYXRpdmVZO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c2VnbWVudFtsKytdID0geDtcblx0XHRcdFx0XHRcdHNlZ21lbnRbbCsrXSA9IHk7XG5cdFx0XHRcdFx0XHRpZiAoIWlzUmVsYXRpdmUpIHtcblx0XHRcdFx0XHRcdFx0cmVsYXRpdmVYID0gcmVsYXRpdmVZID0gMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNlZ21lbnRbbCsrXSA9IHJlbGF0aXZlWCA9IHJlbGF0aXZlWCArIGFbaSArIDNdICogMTtcblx0XHRcdFx0XHRcdHNlZ21lbnRbbCsrXSA9IHJlbGF0aXZlWSA9IHJlbGF0aXZlWSArIGFbaSArIDRdICogMTtcblx0XHRcdFx0XHRcdGkgKz0gNDtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJMXCIgfHwgY29tbWFuZCA9PT0gXCJaXCIpIHtcblx0XHRcdFx0XHRcdGlmIChjb21tYW5kID09PSBcIlpcIikge1xuXHRcdFx0XHRcdFx0XHR4ID0gc3RhcnRYO1xuXHRcdFx0XHRcdFx0XHR5ID0gc3RhcnRZO1xuXHRcdFx0XHRcdFx0XHRzZWdtZW50LmNsb3NlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoY29tbWFuZCA9PT0gXCJMXCIgfHwgTWF0aC5hYnMocmVsYXRpdmVYIC0geCkgPiAwLjUgfHwgTWF0aC5hYnMocmVsYXRpdmVZIC0geSkgPiAwLjUpIHtcblx0XHRcdFx0XHRcdFx0c2VnbWVudFtsKytdID0gcmVsYXRpdmVYICsgKHggLSByZWxhdGl2ZVgpIC8gMztcblx0XHRcdFx0XHRcdFx0c2VnbWVudFtsKytdID0gcmVsYXRpdmVZICsgKHkgLSByZWxhdGl2ZVkpIC8gMztcblx0XHRcdFx0XHRcdFx0c2VnbWVudFtsKytdID0gcmVsYXRpdmVYICsgKHggLSByZWxhdGl2ZVgpICogMiAvIDM7XG5cdFx0XHRcdFx0XHRcdHNlZ21lbnRbbCsrXSA9IHJlbGF0aXZlWSArICh5IC0gcmVsYXRpdmVZKSAqIDIgLyAzO1xuXHRcdFx0XHRcdFx0XHRzZWdtZW50W2wrK10gPSB4O1xuXHRcdFx0XHRcdFx0XHRzZWdtZW50W2wrK10gPSB5O1xuXHRcdFx0XHRcdFx0XHRpZiAoY29tbWFuZCA9PT0gXCJMXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRpICs9IDI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJlbGF0aXZlWCA9IHg7XG5cdFx0XHRcdFx0XHRyZWxhdGl2ZVkgPSB5O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBfYmV6aWVyRXJyb3I7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHBhdGhbMF07XG5cdFx0XHR9LFxuXG5cdFx0XHRfZmluZE1pbmltdW0gPSBmdW5jdGlvbiAodmFsdWVzKSB7XG5cdFx0XHRcdHZhciBsID0gdmFsdWVzLmxlbmd0aCxcblx0XHRcdFx0XHRtaW4gPSA5OTk5OTk5OTk5OTksXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0Zm9yIChpID0gMTsgaSA8IGw7IGkgKz0gNikge1xuXHRcdFx0XHRcdGlmICgrdmFsdWVzW2ldIDwgbWluKSB7XG5cdFx0XHRcdFx0XHRtaW4gPSArdmFsdWVzW2ldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbWluO1xuXHRcdFx0fSxcblxuXHRcdFx0X25vcm1hbGl6ZSA9IGZ1bmN0aW9uICh2YWx1ZXMsIGhlaWdodCwgb3JpZ2luWSkgeyAvL3Rha2VzIGFsbCB0aGUgcG9pbnRzIGFuZCB0cmFuc2xhdGVzL3NjYWxlcyB0aGVtIHNvIHRoYXQgdGhlIHggc3RhcnRzIGF0IDAgYW5kIGVuZHMgYXQgMS5cblx0XHRcdFx0aWYgKCFvcmlnaW5ZICYmIG9yaWdpblkgIT09IDApIHtcblx0XHRcdFx0XHRvcmlnaW5ZID0gTWF0aC5tYXgoK3ZhbHVlc1t2YWx1ZXMubGVuZ3RoLTFdLCArdmFsdWVzWzFdKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgdHggPSArdmFsdWVzWzBdICogLTEsXG5cdFx0XHRcdFx0dHkgPSAtb3JpZ2luWSxcblx0XHRcdFx0XHRsID0gdmFsdWVzLmxlbmd0aCxcblx0XHRcdFx0XHRzeCA9IDEgLyAoK3ZhbHVlc1tsIC0gMl0gKyB0eCksXG5cdFx0XHRcdFx0c3kgPSAtaGVpZ2h0IHx8ICgoTWF0aC5hYnMoK3ZhbHVlc1tsIC0gMV0gLSArdmFsdWVzWzFdKSA8IDAuMDEgKiAoK3ZhbHVlc1tsIC0gMl0gLSArdmFsdWVzWzBdKSkgPyBfZmluZE1pbmltdW0odmFsdWVzKSArIHR5IDogK3ZhbHVlc1tsIC0gMV0gKyB0eSksXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0aWYgKHN5KSB7IC8vdHlwaWNhbGx5IHkgZW5kcyBhdCAxIChzbyB0aGF0IHRoZSBlbmQgdmFsdWVzIGFyZSByZWFjaGVkKVxuXHRcdFx0XHRcdHN5ID0gMSAvIHN5O1xuXHRcdFx0XHR9IGVsc2UgeyAvL2luIGNhc2UgdGhlIGVhc2UgcmV0dXJucyB0byBpdHMgYmVnaW5uaW5nIHZhbHVlLCBzY2FsZSBldmVyeXRoaW5nIHByb3BvcnRpb25hbGx5XG5cdFx0XHRcdFx0c3kgPSAtc3g7XG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMikge1xuXHRcdFx0XHRcdHZhbHVlc1tpXSA9ICgrdmFsdWVzW2ldICsgdHgpICogc3g7XG5cdFx0XHRcdFx0dmFsdWVzW2kgKyAxXSA9ICgrdmFsdWVzW2kgKyAxXSArIHR5KSAqIHN5O1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRfZ2V0UmF0aW8gPSBmdW5jdGlvbiAocCkge1xuXHRcdFx0XHR2YXIgcG9pbnQgPSB0aGlzLmxvb2t1cFsocCAqIHRoaXMubCkgfCAwXSB8fCB0aGlzLmxvb2t1cFt0aGlzLmwgLSAxXTtcblx0XHRcdFx0aWYgKHBvaW50Lm54IDwgcCkge1xuXHRcdFx0XHRcdHBvaW50ID0gcG9pbnQubjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcG9pbnQueSArICgocCAtIHBvaW50LngpIC8gcG9pbnQuY3gpICogcG9pbnQuY3k7XG5cdFx0XHR9LFxuXG5cblx0XHRcdEN1c3RvbUVhc2UgPSBmdW5jdGlvbiAoaWQsIGRhdGEsIGNvbmZpZykge1xuXHRcdFx0XHR0aGlzLl9jYWxjRW5kID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5pZCA9IGlkO1xuXHRcdFx0XHRpZiAoaWQpIHtcblx0XHRcdFx0XHRFYXNlLm1hcFtpZF0gPSB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuZ2V0UmF0aW8gPSBfZ2V0UmF0aW87IC8vc3BlZWQgb3B0aW1pemF0aW9uLCBmYXN0ZXIgbG9va3Vwcy5cblx0XHRcdFx0dGhpcy5zZXREYXRhKGRhdGEsIGNvbmZpZyk7XG5cdFx0XHR9LFxuXHRcdFx0cCA9IEN1c3RvbUVhc2UucHJvdG90eXBlID0gbmV3IEVhc2UoKTtcblxuXHRcdHAuY29uc3RydWN0b3IgPSBDdXN0b21FYXNlO1xuXG5cdFx0cC5zZXREYXRhID0gZnVuY3Rpb24oZGF0YSwgY29uZmlnKSB7XG5cdFx0XHRkYXRhID0gZGF0YSB8fCBcIjAsMCwxLDFcIjtcblx0XHRcdHZhciB2YWx1ZXMgPSBkYXRhLm1hdGNoKF9udW1iZXJzRXhwKSxcblx0XHRcdFx0Y2xvc2VzdCA9IDEsXG5cdFx0XHRcdHBvaW50cyA9IFtdLFxuXHRcdFx0XHRsLCBhMSwgYTIsIGksIGluYywgaiwgcG9pbnQsIHByZXZQb2ludCwgcCwgcHJlY2lzaW9uO1xuXHRcdFx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdFx0cHJlY2lzaW9uID0gY29uZmlnLnByZWNpc2lvbiB8fCAxO1xuXHRcdFx0dGhpcy5kYXRhID0gZGF0YTtcblx0XHRcdHRoaXMubG9va3VwID0gW107XG5cdFx0XHR0aGlzLnBvaW50cyA9IHBvaW50cztcblx0XHRcdHRoaXMuZmFzdCA9IChwcmVjaXNpb24gPD0gMSk7XG5cdFx0XHRpZiAoX25lZWRzUGFyc2luZ0V4cC50ZXN0KGRhdGEpIHx8IChkYXRhLmluZGV4T2YoXCJNXCIpICE9PSAtMSAmJiBkYXRhLmluZGV4T2YoXCJDXCIpID09PSAtMSkpIHtcblx0XHRcdFx0dmFsdWVzID0gX3BhdGhEYXRhVG9CZXppZXIoZGF0YSk7XG5cdFx0XHR9XG5cdFx0XHRsID0gdmFsdWVzLmxlbmd0aDtcblx0XHRcdGlmIChsID09PSA0KSB7XG5cdFx0XHRcdHZhbHVlcy51bnNoaWZ0KDAsIDApO1xuXHRcdFx0XHR2YWx1ZXMucHVzaCgxLCAxKTtcblx0XHRcdFx0bCA9IDg7XG5cdFx0XHR9IGVsc2UgaWYgKChsIC0gMikgJSA2KSB7XG5cdFx0XHRcdHRocm93IF9iZXppZXJFcnJvcjtcblx0XHRcdH1cblx0XHRcdGlmICgrdmFsdWVzWzBdICE9PSAwIHx8ICt2YWx1ZXNbbCAtIDJdICE9PSAxKSB7XG5cdFx0XHRcdF9ub3JtYWxpemUodmFsdWVzLCBjb25maWcuaGVpZ2h0LCBjb25maWcub3JpZ2luWSk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMucmF3QmV6aWVyID0gdmFsdWVzO1xuXG5cdFx0XHRmb3IgKGkgPSAyOyBpIDwgbDsgaSArPSA2KSB7XG5cdFx0XHRcdGExID0ge3g6ICt2YWx1ZXNbaSAtIDJdLCB5OiArdmFsdWVzW2kgLSAxXX07XG5cdFx0XHRcdGEyID0ge3g6ICt2YWx1ZXNbaSArIDRdLCB5OiArdmFsdWVzW2kgKyA1XX07XG5cdFx0XHRcdHBvaW50cy5wdXNoKGExLCBhMik7XG5cdFx0XHRcdF9iZXppZXJUb1BvaW50cyhhMS54LCBhMS55LCArdmFsdWVzW2ldLCArdmFsdWVzW2kgKyAxXSwgK3ZhbHVlc1tpICsgMl0sICt2YWx1ZXNbaSArIDNdLCBhMi54LCBhMi55LCAxIC8gKHByZWNpc2lvbiAqIDIwMDAwMCksIHBvaW50cywgcG9pbnRzLmxlbmd0aCAtIDEpO1xuXHRcdFx0fVxuXHRcdFx0bCA9IHBvaW50cy5sZW5ndGg7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdHBvaW50ID0gcG9pbnRzW2ldO1xuXHRcdFx0XHRwcmV2UG9pbnQgPSBwb2ludHNbaSAtIDFdIHx8IHBvaW50O1xuXHRcdFx0XHRpZiAocG9pbnQueCA+IHByZXZQb2ludC54IHx8IChwcmV2UG9pbnQueSAhPT0gcG9pbnQueSAmJiBwcmV2UG9pbnQueCA9PT0gcG9pbnQueCkgfHwgcG9pbnQgPT09IHByZXZQb2ludCkgeyAvL2lmIGEgcG9pbnQgZ29lcyBCQUNLV0FSRCBpbiB0aW1lIG9yIGlzIGEgZHVwbGljYXRlLCBqdXN0IGRyb3AgaXQuXG5cdFx0XHRcdFx0cHJldlBvaW50LmN4ID0gcG9pbnQueCAtIHByZXZQb2ludC54OyAvL2NoYW5nZSBpbiB4IGJldHdlZW4gdGhpcyBwb2ludCBhbmQgdGhlIG5leHQgcG9pbnQgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcblx0XHRcdFx0XHRwcmV2UG9pbnQuY3kgPSBwb2ludC55IC0gcHJldlBvaW50Lnk7XG5cdFx0XHRcdFx0cHJldlBvaW50Lm4gPSBwb2ludDtcblx0XHRcdFx0XHRwcmV2UG9pbnQubnggPSBwb2ludC54OyAvL25leHQgcG9pbnQncyB4IHZhbHVlIChwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24sIG1ha2luZyBsb29rdXBzIGZhc3RlciBpbiBnZXRSYXRpbygpKS4gUmVtZW1iZXIsIHRoZSBsb29rdXAgd2lsbCBhbHdheXMgbGFuZCBvbiBhIHNwb3Qgd2hlcmUgaXQncyBlaXRoZXIgdGhpcyBwb2ludCBvciB0aGUgdmVyeSBuZXh0IG9uZSAobmV2ZXIgYmV5b25kIHRoYXQpXG5cdFx0XHRcdFx0aWYgKHRoaXMuZmFzdCAmJiBpID4gMSAmJiBNYXRoLmFicyhwcmV2UG9pbnQuY3kgLyBwcmV2UG9pbnQuY3ggLSBwb2ludHNbaSAtIDJdLmN5IC8gcG9pbnRzW2kgLSAyXS5jeCkgPiAyKSB7IC8vaWYgdGhlcmUncyBhIHN1ZGRlbiBjaGFuZ2UgaW4gZGlyZWN0aW9uLCBwcmlvcml0aXplIGFjY3VyYWN5IG92ZXIgc3BlZWQuIExpa2UgYSBib3VuY2UgZWFzZSAtIHlvdSBkb24ndCB3YW50IHRvIHJpc2sgdGhlIHNhbXBsaW5nIGNodW5rcyBsYW5kaW5nIG9uIGVhY2ggc2lkZSBvZiB0aGUgYm91bmNlIGFuY2hvciBhbmQgaGF2aW5nIGl0IGNsaXBwZWQgb2ZmLlxuXHRcdFx0XHRcdFx0dGhpcy5mYXN0ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwcmV2UG9pbnQuY3ggPCBjbG9zZXN0KSB7XG5cdFx0XHRcdFx0XHRpZiAoIXByZXZQb2ludC5jeCkge1xuXHRcdFx0XHRcdFx0XHRwcmV2UG9pbnQuY3ggPSAwLjAwMTsgLy9hdm9pZHMgbWF0aCBwcm9ibGVtcyBpbiBnZXRSYXRpbygpIChkaXZpZGluZyBieSB6ZXJvKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y2xvc2VzdCA9IHByZXZQb2ludC5jeDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cG9pbnRzLnNwbGljZShpLS0sIDEpO1xuXHRcdFx0XHRcdGwtLTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0bCA9ICgxIC8gY2xvc2VzdCArIDEpIHwgMDtcblx0XHRcdHRoaXMubCA9IGw7IC8vcmVjb3JkIGZvciBzcGVlZCBvcHRpbWl6YXRpb25cblx0XHRcdGluYyA9IDEgLyBsO1xuXHRcdFx0aiA9IDA7XG5cdFx0XHRwb2ludCA9IHBvaW50c1swXTtcblx0XHRcdGlmICh0aGlzLmZhc3QpIHtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykgeyAvL2ZvciBmYXN0ZXN0IGxvb2t1cHMsIHdlIGp1c3Qgc2FtcGxlIGFsb25nIHRoZSBwYXRoIGF0IGVxdWFsIHggKHRpbWUpIGRpc3RhbmNlLiBVc2VzIG1vcmUgbWVtb3J5IGFuZCBpcyBzbGlnaHRseSBsZXNzIGFjY3VyYXRlIGZvciBhbmNob3JzIHRoYXQgZG9uJ3QgbGFuZCBvbiB0aGUgc2FtcGxpbmcgcG9pbnRzLCBidXQgZm9yIHRoZSB2YXN0IG1ham9yaXR5IG9mIGVhc2VzIGl0J3MgZXhjZWxsZW50IChhbmQgZmFzdCkuXG5cdFx0XHRcdFx0cCA9IGkgKiBpbmM7XG5cdFx0XHRcdFx0aWYgKHBvaW50Lm54IDwgcCkge1xuXHRcdFx0XHRcdFx0cG9pbnQgPSBwb2ludHNbKytqXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YTEgPSBwb2ludC55ICsgKChwIC0gcG9pbnQueCkgLyBwb2ludC5jeCkgKiBwb2ludC5jeTtcblx0XHRcdFx0XHR0aGlzLmxvb2t1cFtpXSA9IHt4OiBwLCBjeDogaW5jLCB5OiBhMSwgY3k6IDAsIG54OiA5fTtcblx0XHRcdFx0XHRpZiAoaSkge1xuXHRcdFx0XHRcdFx0dGhpcy5sb29rdXBbaSAtIDFdLmN5ID0gYTEgLSB0aGlzLmxvb2t1cFtpIC0gMV0ueTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5sb29rdXBbbCAtIDFdLmN5ID0gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXS55IC0gYTE7XG5cdFx0XHR9IGVsc2UgeyAvL3RoaXMgb3B0aW9uIGlzIG1vcmUgYWNjdXJhdGUsIGVuc3VyaW5nIHRoYXQgRVZFUlkgYW5jaG9yIGlzIGhpdCBwZXJmZWN0bHkuIENsaXBwaW5nIGFjcm9zcyBhIGJvdW5jZSwgZm9yIGV4YW1wbGUsIHdvdWxkIG5ldmVyIGhhcHBlbi5cblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGw7IGkrKykgeyAvL2J1aWxkIGEgbG9va3VwIHRhYmxlIGJhc2VkIG9uIHRoZSBzbWFsbGVzdCBkaXN0YW5jZSBzbyB0aGF0IHdlIGNhbiBpbnN0YW50bHkgZmluZCB0aGUgYXBwcm9wcmlhdGUgcG9pbnQgKHdlbGwsIGl0J2xsIGVpdGhlciBiZSB0aGF0IHBvaW50IG9yIHRoZSB2ZXJ5IG5leHQgb25lKS4gV2UnbGwgbG9vayB1cCBiYXNlZCBvbiB0aGUgbGluZWFyIHByb2dyZXNzLiBTbyBpdCdzIGl0J3MgMC41IGFuZCB0aGUgbG9va3VwIHRhYmxlIGhhcyAxMDAgZWxlbWVudHMsIGl0J2QgYmUgbGlrZSBsb29rdXBbTWF0aC5mbG9vcigwLjUgKiAxMDApXVxuXHRcdFx0XHRcdGlmIChwb2ludC5ueCA8IGkgKiBpbmMpIHtcblx0XHRcdFx0XHRcdHBvaW50ID0gcG9pbnRzWysral07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMubG9va3VwW2ldID0gcG9pbnQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH07XG5cblx0XHRwLmdldFJhdGlvID0gX2dldFJhdGlvO1xuXG5cdFx0cC5nZXRTVkdEYXRhID0gZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0XHRyZXR1cm4gQ3VzdG9tRWFzZS5nZXRTVkdEYXRhKHRoaXMsIGNvbmZpZyk7XG5cdFx0fTtcblxuXHRcdEN1c3RvbUVhc2UuY3JlYXRlID0gZnVuY3Rpb24gKGlkLCBkYXRhLCBjb25maWcpIHtcblx0XHRcdHJldHVybiBuZXcgQ3VzdG9tRWFzZShpZCwgZGF0YSwgY29uZmlnKTtcblx0XHR9O1xuXG5cdFx0Q3VzdG9tRWFzZS52ZXJzaW9uID0gXCIwLjIuMFwiO1xuXG5cdFx0Q3VzdG9tRWFzZS5iZXppZXJUb1BvaW50cyA9IF9iZXppZXJUb1BvaW50cztcblx0XHRDdXN0b21FYXNlLmdldCA9IGZ1bmN0aW9uIChpZCkge1xuXHRcdFx0cmV0dXJuIEVhc2UubWFwW2lkXTtcblx0XHR9O1xuXHRcdEN1c3RvbUVhc2UuZ2V0U1ZHRGF0YSA9IGZ1bmN0aW9uKGVhc2UsIGNvbmZpZykge1xuXHRcdFx0Y29uZmlnID0gY29uZmlnIHx8IHt9O1xuXHRcdFx0dmFyIHJuZCA9IDEwMDAsXG5cdFx0XHRcdHdpZHRoID0gY29uZmlnLndpZHRoIHx8IDEwMCxcblx0XHRcdFx0aGVpZ2h0ID0gY29uZmlnLmhlaWdodCB8fCAxMDAsXG5cdFx0XHRcdHggPSBjb25maWcueCB8fCAwLFxuXHRcdFx0XHR5ID0gKGNvbmZpZy55IHx8IDApICsgaGVpZ2h0LFxuXHRcdFx0XHRlID0gY29uZmlnLnBhdGgsXG5cdFx0XHRcdGEsIHNsb3BlLCBpLCBpbmMsIHR4LCB0eSwgcHJlY2lzaW9uLCB0aHJlc2hvbGQsIHByZXZYLCBwcmV2WTtcblx0XHRcdGlmIChjb25maWcuaW52ZXJ0KSB7XG5cdFx0XHRcdGhlaWdodCA9IC1oZWlnaHQ7XG5cdFx0XHRcdHkgPSAwO1xuXHRcdFx0fVxuXHRcdFx0ZWFzZSA9IGVhc2UuZ2V0UmF0aW8gPyBlYXNlIDogRWFzZS5tYXBbZWFzZV0gfHwgY29uc29sZS5sb2coXCJObyBlYXNlIGZvdW5kOiBcIiwgZWFzZSk7XG5cdFx0XHRpZiAoIWVhc2UucmF3QmV6aWVyKSB7XG5cdFx0XHRcdGEgPSBbXCJNXCIgKyB4ICsgXCIsXCIgKyB5XTtcblx0XHRcdFx0cHJlY2lzaW9uID0gTWF0aC5tYXgoNSwgKGNvbmZpZy5wcmVjaXNpb24gfHwgMSkgKiAyMDApO1xuXHRcdFx0XHRpbmMgPSAxIC8gcHJlY2lzaW9uO1xuXHRcdFx0XHRwcmVjaXNpb24gKz0gMjtcblx0XHRcdFx0dGhyZXNob2xkID0gNSAvIHByZWNpc2lvbjtcblx0XHRcdFx0cHJldlggPSAoKCh4ICsgaW5jICogd2lkdGgpICogcm5kKSB8IDApIC8gcm5kO1xuXHRcdFx0XHRwcmV2WSA9ICgoKHkgKyBlYXNlLmdldFJhdGlvKGluYykgKiAtaGVpZ2h0KSAqIHJuZCkgfCAwKSAvIHJuZDtcblx0XHRcdFx0c2xvcGUgPSAocHJldlkgLSB5KSAvIChwcmV2WCAtIHgpO1xuXHRcdFx0XHRmb3IgKGkgPSAyOyBpIDwgcHJlY2lzaW9uOyBpKyspIHtcblx0XHRcdFx0XHR0eCA9ICgoKHggKyBpICogaW5jICogd2lkdGgpICogcm5kKSB8IDApIC8gcm5kO1xuXHRcdFx0XHRcdHR5ID0gKCgoeSArIGVhc2UuZ2V0UmF0aW8oaSAqIGluYykgKiAtaGVpZ2h0KSAqIHJuZCkgfCAwKSAvIHJuZDtcblx0XHRcdFx0XHRpZiAoTWF0aC5hYnMoKHR5IC0gcHJldlkpIC8gKHR4IC0gcHJldlgpIC0gc2xvcGUpID4gdGhyZXNob2xkIHx8IGkgPT09IHByZWNpc2lvbiAtIDEpIHsgLy9vbmx5IGFkZCBwb2ludHMgd2hlbiB0aGUgc2xvcGUgY2hhbmdlcyBiZXlvbmQgdGhlIHRocmVzaG9sZFxuXHRcdFx0XHRcdFx0YS5wdXNoKHByZXZYICsgXCIsXCIgKyBwcmV2WSk7XG5cdFx0XHRcdFx0XHRzbG9wZSA9ICh0eSAtIHByZXZZKSAvICh0eCAtIHByZXZYKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHJldlggPSB0eDtcblx0XHRcdFx0XHRwcmV2WSA9IHR5O1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRhID0gW107XG5cdFx0XHRcdHByZWNpc2lvbiA9IGVhc2UucmF3QmV6aWVyLmxlbmd0aDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IHByZWNpc2lvbjsgaSArPSAyKSB7XG5cdFx0XHRcdFx0YS5wdXNoKCgoKHggKyBlYXNlLnJhd0JlemllcltpXSAqIHdpZHRoKSAqIHJuZCkgfCAwKSAvIHJuZCArIFwiLFwiICsgKCgoeSArIGVhc2UucmF3QmV6aWVyW2kgKyAxXSAqIC1oZWlnaHQpICogcm5kKSB8IDApIC8gcm5kKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRhWzBdID0gXCJNXCIgKyBhWzBdO1xuXHRcdFx0XHRhWzFdID0gXCJDXCIgKyBhWzFdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGUpIHtcblx0XHRcdFx0KHR5cGVvZihlKSA9PT0gXCJzdHJpbmdcIiA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZSkgOiBlKS5zZXRBdHRyaWJ1dGUoXCJkXCIsIGEuam9pbihcIiBcIikpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGEuam9pbihcIiBcIik7XG5cdFx0fTtcblxuXHRcdHJldHVybiBDdXN0b21FYXNlO1xuXG5cdH0sIHRydWUpO1xuXG59KTsgaWYgKF9nc1Njb3BlLl9nc0RlZmluZSkgeyBfZ3NTY29wZS5fZ3NRdWV1ZS5wb3AoKSgpOyB9XG5cbi8vZXhwb3J0IHRvIEFNRC9SZXF1aXJlSlMgYW5kIENvbW1vbkpTL05vZGUgKHByZWN1cnNvciB0byBmdWxsIG1vZHVsYXIgYnVpbGQgc3lzdGVtIGNvbWluZyBhdCBhIGxhdGVyIGRhdGUpXG4oZnVuY3Rpb24obmFtZSkge1xuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIGdldEdsb2JhbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAoX2dzU2NvcGUuR3JlZW5Tb2NrR2xvYmFscyB8fCBfZ3NTY29wZSlbbmFtZV07XG5cdH07XG5cdGlmICh0eXBlb2YoZGVmaW5lKSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHsgLy9BTURcblx0XHRkZWZpbmUoW1wiVHdlZW5MaXRlXCJdLCBnZXRHbG9iYWwpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZihtb2R1bGUpICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7IC8vbm9kZVxuXHRcdHJlcXVpcmUoXCIuLi9Ud2VlbkxpdGUuanNcIik7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnZXRHbG9iYWwoKTtcblx0fVxufShcIkN1c3RvbUVhc2VcIikpOyIsIi8qIVxuICogVkVSU0lPTjogMS4xOS4wXG4gKiBEQVRFOiAyMDE2LTA3LTE0XG4gKiBVUERBVEVTIEFORCBET0NTIEFUOiBodHRwOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDE2LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cDovL2dyZWVuc29jay5jb20vc3RhbmRhcmQtbGljZW5zZSBvciBmb3JcbiAqIENsdWIgR3JlZW5Tb2NrIG1lbWJlcnMsIHRoZSBzb2Z0d2FyZSBhZ3JlZW1lbnQgdGhhdCB3YXMgaXNzdWVkIHdpdGggeW91ciBtZW1iZXJzaGlwLlxuICogXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqL1xudmFyIF9nc1Njb3BlID0gKHR5cGVvZihtb2R1bGUpICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzICYmIHR5cGVvZihnbG9iYWwpICE9PSBcInVuZGVmaW5lZFwiKSA/IGdsb2JhbCA6IHRoaXMgfHwgd2luZG93OyAvL2hlbHBzIGVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggQU1EL1JlcXVpcmVKUyBhbmQgQ29tbW9uSlMvTm9kZVxuKF9nc1Njb3BlLl9nc1F1ZXVlIHx8IChfZ3NTY29wZS5fZ3NRdWV1ZSA9IFtdKSkucHVzaCggZnVuY3Rpb24oKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0X2dzU2NvcGUuX2dzRGVmaW5lKFwicGx1Z2lucy5DU1NQbHVnaW5cIiwgW1wicGx1Z2lucy5Ud2VlblBsdWdpblwiLFwiVHdlZW5MaXRlXCJdLCBmdW5jdGlvbihUd2VlblBsdWdpbiwgVHdlZW5MaXRlKSB7XG5cblx0XHQvKiogQGNvbnN0cnVjdG9yICoqL1xuXHRcdHZhciBDU1NQbHVnaW4gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0VHdlZW5QbHVnaW4uY2FsbCh0aGlzLCBcImNzc1wiKTtcblx0XHRcdFx0dGhpcy5fb3ZlcndyaXRlUHJvcHMubGVuZ3RoID0gMDtcblx0XHRcdFx0dGhpcy5zZXRSYXRpbyA9IENTU1BsdWdpbi5wcm90b3R5cGUuc2V0UmF0aW87IC8vc3BlZWQgb3B0aW1pemF0aW9uIChhdm9pZCBwcm90b3R5cGUgbG9va3VwIG9uIHRoaXMgXCJob3RcIiBtZXRob2QpXG5cdFx0XHR9LFxuXHRcdFx0X2dsb2JhbHMgPSBfZ3NTY29wZS5fZ3NEZWZpbmUuZ2xvYmFscyxcblx0XHRcdF9oYXNQcmlvcml0eSwgLy90dXJucyB0cnVlIHdoZW5ldmVyIGEgQ1NTUHJvcFR3ZWVuIGluc3RhbmNlIGlzIGNyZWF0ZWQgdGhhdCBoYXMgYSBwcmlvcml0eSBvdGhlciB0aGFuIDAuIFRoaXMgaGVscHMgdXMgZGlzY2VybiB3aGV0aGVyIG9yIG5vdCB3ZSBzaG91bGQgc3BlbmQgdGhlIHRpbWUgb3JnYW5pemluZyB0aGUgbGlua2VkIGxpc3Qgb3Igbm90IGFmdGVyIGEgQ1NTUGx1Z2luJ3MgX29uSW5pdFR3ZWVuKCkgbWV0aG9kIGlzIGNhbGxlZC5cblx0XHRcdF9zdWZmaXhNYXAsIC8vd2Ugc2V0IHRoaXMgaW4gX29uSW5pdFR3ZWVuKCkgZWFjaCB0aW1lIGFzIGEgd2F5IHRvIGhhdmUgYSBwZXJzaXN0ZW50IHZhcmlhYmxlIHdlIGNhbiB1c2UgaW4gb3RoZXIgbWV0aG9kcyBsaWtlIF9wYXJzZSgpIHdpdGhvdXQgaGF2aW5nIHRvIHBhc3MgaXQgYXJvdW5kIGFzIGEgcGFyYW1ldGVyIGFuZCB3ZSBrZWVwIF9wYXJzZSgpIGRlY291cGxlZCBmcm9tIGEgcGFydGljdWxhciBDU1NQbHVnaW4gaW5zdGFuY2Vcblx0XHRcdF9jcywgLy9jb21wdXRlZCBzdHlsZSAod2Ugc3RvcmUgdGhpcyBpbiBhIHNoYXJlZCB2YXJpYWJsZSB0byBjb25zZXJ2ZSBtZW1vcnkgYW5kIG1ha2UgbWluaWZpY2F0aW9uIHRpZ2h0ZXJcblx0XHRcdF9vdmVyd3JpdGVQcm9wcywgLy9hbGlhcyB0byB0aGUgY3VycmVudGx5IGluc3RhbnRpYXRpbmcgQ1NTUGx1Z2luJ3MgX292ZXJ3cml0ZVByb3BzIGFycmF5LiBXZSB1c2UgdGhpcyBjbG9zdXJlIGluIG9yZGVyIHRvIGF2b2lkIGhhdmluZyB0byBwYXNzIGEgcmVmZXJlbmNlIGFyb3VuZCBmcm9tIG1ldGhvZCB0byBtZXRob2QgYW5kIGFpZCBpbiBtaW5pZmljYXRpb24uXG5cdFx0XHRfc3BlY2lhbFByb3BzID0ge30sXG5cdFx0XHRwID0gQ1NTUGx1Z2luLnByb3RvdHlwZSA9IG5ldyBUd2VlblBsdWdpbihcImNzc1wiKTtcblxuXHRcdHAuY29uc3RydWN0b3IgPSBDU1NQbHVnaW47XG5cdFx0Q1NTUGx1Z2luLnZlcnNpb24gPSBcIjEuMTkuMFwiO1xuXHRcdENTU1BsdWdpbi5BUEkgPSAyO1xuXHRcdENTU1BsdWdpbi5kZWZhdWx0VHJhbnNmb3JtUGVyc3BlY3RpdmUgPSAwO1xuXHRcdENTU1BsdWdpbi5kZWZhdWx0U2tld1R5cGUgPSBcImNvbXBlbnNhdGVkXCI7XG5cdFx0Q1NTUGx1Z2luLmRlZmF1bHRTbW9vdGhPcmlnaW4gPSB0cnVlO1xuXHRcdHAgPSBcInB4XCI7IC8vd2UnbGwgcmV1c2UgdGhlIFwicFwiIHZhcmlhYmxlIHRvIGtlZXAgZmlsZSBzaXplIGRvd25cblx0XHRDU1NQbHVnaW4uc3VmZml4TWFwID0ge3RvcDpwLCByaWdodDpwLCBib3R0b206cCwgbGVmdDpwLCB3aWR0aDpwLCBoZWlnaHQ6cCwgZm9udFNpemU6cCwgcGFkZGluZzpwLCBtYXJnaW46cCwgcGVyc3BlY3RpdmU6cCwgbGluZUhlaWdodDpcIlwifTtcblxuXG5cdFx0dmFyIF9udW1FeHAgPSAvKD86XFwtfFxcLnxcXGIpKFxcZHxcXC58ZVxcLSkrL2csXG5cdFx0XHRfcmVsTnVtRXhwID0gLyg/OlxcZHxcXC1cXGR8XFwuXFxkfFxcLVxcLlxcZHxcXCs9XFxkfFxcLT1cXGR8XFwrPS5cXGR8XFwtPVxcLlxcZCkrL2csXG5cdFx0XHRfdmFsdWVzRXhwID0gLyg/OlxcKz18XFwtPXxcXC18XFxiKVtcXGRcXC1cXC5dK1thLXpBLVowLTldKig/OiV8XFxiKS9naSwgLy9maW5kcyBhbGwgdGhlIHZhbHVlcyB0aGF0IGJlZ2luIHdpdGggbnVtYmVycyBvciArPSBvciAtPSBhbmQgdGhlbiBhIG51bWJlci4gSW5jbHVkZXMgc3VmZml4ZXMuIFdlIHVzZSB0aGlzIHRvIHNwbGl0IGNvbXBsZXggdmFsdWVzIGFwYXJ0IGxpa2UgXCIxcHggNXB4IDIwcHggcmdiKDI1NSwxMDIsNTEpXCJcblx0XHRcdF9OYU5FeHAgPSAvKD8hWystXT9cXGQqXFwuP1xcZCt8WystXXxlWystXVxcZCspW14wLTldL2csIC8vYWxzbyBhbGxvd3Mgc2NpZW50aWZpYyBub3RhdGlvbiBhbmQgZG9lc24ndCBraWxsIHRoZSBsZWFkaW5nIC0vKyBpbiAtPSBhbmQgKz1cblx0XHRcdF9zdWZmaXhFeHAgPSAvKD86XFxkfFxcLXxcXCt8PXwjfFxcLikqL2csXG5cdFx0XHRfb3BhY2l0eUV4cCA9IC9vcGFjaXR5ICo9ICooW14pXSopL2ksXG5cdFx0XHRfb3BhY2l0eVZhbEV4cCA9IC9vcGFjaXR5OihbXjtdKikvaSxcblx0XHRcdF9hbHBoYUZpbHRlckV4cCA9IC9hbHBoYVxcKG9wYWNpdHkgKj0uKz9cXCkvaSxcblx0XHRcdF9yZ2Joc2xFeHAgPSAvXihyZ2J8aHNsKS8sXG5cdFx0XHRfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG5cdFx0XHRfY2FtZWxFeHAgPSAvLShbYS16XSkvZ2ksXG5cdFx0XHRfdXJsRXhwID0gLyheKD86dXJsXFwoXFxcInx1cmxcXCgpKXwoPzooXFxcIlxcKSkkfFxcKSQpL2dpLCAvL2ZvciBwdWxsaW5nIG91dCB1cmxzIGZyb20gdXJsKC4uLikgb3IgdXJsKFwiLi4uXCIpIHN0cmluZ3MgKHNvbWUgYnJvd3NlcnMgd3JhcCB1cmxzIGluIHF1b3Rlcywgc29tZSBkb24ndCB3aGVuIHJlcG9ydGluZyB0aGluZ3MgbGlrZSBiYWNrZ3JvdW5kSW1hZ2UpXG5cdFx0XHRfY2FtZWxGdW5jID0gZnVuY3Rpb24ocywgZykgeyByZXR1cm4gZy50b1VwcGVyQ2FzZSgpOyB9LFxuXHRcdFx0X2hvcml6RXhwID0gLyg/OkxlZnR8UmlnaHR8V2lkdGgpL2ksXG5cdFx0XHRfaWVHZXRNYXRyaXhFeHAgPSAvKE0xMXxNMTJ8TTIxfE0yMik9W1xcZFxcLVxcLmVdKy9naSxcblx0XHRcdF9pZVNldE1hdHJpeEV4cCA9IC9wcm9naWRcXDpEWEltYWdlVHJhbnNmb3JtXFwuTWljcm9zb2Z0XFwuTWF0cml4XFwoLis/XFwpL2ksXG5cdFx0XHRfY29tbWFzT3V0c2lkZVBhcmVuRXhwID0gLywoPz1bXlxcKV0qKD86XFwofCQpKS9naSwgLy9maW5kcyBhbnkgY29tbWFzIHRoYXQgYXJlIG5vdCB3aXRoaW4gcGFyZW50aGVzaXNcblx0XHRcdF9jb21wbGV4RXhwID0gL1tcXHMsXFwoXS9pLCAvL2ZvciB0ZXN0aW5nIGEgc3RyaW5nIHRvIGZpbmQgaWYgaXQgaGFzIGEgc3BhY2UsIGNvbW1hLCBvciBvcGVuIHBhcmVudGhlc2lzIChjbHVlcyB0aGF0IGl0J3MgYSBjb21wbGV4IHZhbHVlKVxuXHRcdFx0X0RFRzJSQUQgPSBNYXRoLlBJIC8gMTgwLFxuXHRcdFx0X1JBRDJERUcgPSAxODAgLyBNYXRoLlBJLFxuXHRcdFx0X2ZvcmNlUFQgPSB7fSxcblx0XHRcdF9kb2MgPSBkb2N1bWVudCxcblx0XHRcdF9jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0XHRyZXR1cm4gX2RvYy5jcmVhdGVFbGVtZW50TlMgPyBfZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiwgdHlwZSkgOiBfZG9jLmNyZWF0ZUVsZW1lbnQodHlwZSk7XG5cdFx0XHR9LFxuXHRcdFx0X3RlbXBEaXYgPSBfY3JlYXRlRWxlbWVudChcImRpdlwiKSxcblx0XHRcdF90ZW1wSW1nID0gX2NyZWF0ZUVsZW1lbnQoXCJpbWdcIiksXG5cdFx0XHRfaW50ZXJuYWxzID0gQ1NTUGx1Z2luLl9pbnRlcm5hbHMgPSB7X3NwZWNpYWxQcm9wczpfc3BlY2lhbFByb3BzfSwgLy9wcm92aWRlcyBhIGhvb2sgdG8gYSBmZXcgaW50ZXJuYWwgbWV0aG9kcyB0aGF0IHdlIG5lZWQgdG8gYWNjZXNzIGZyb20gaW5zaWRlIG90aGVyIHBsdWdpbnNcblx0XHRcdF9hZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQsXG5cdFx0XHRfYXV0b1JvdW5kLFxuXHRcdFx0X3JlcVNhZmFyaUZpeCwgLy93ZSB3b24ndCBhcHBseSB0aGUgU2FmYXJpIHRyYW5zZm9ybSBmaXggdW50aWwgd2UgYWN0dWFsbHkgY29tZSBhY3Jvc3MgYSB0d2VlbiB0aGF0IGFmZmVjdHMgYSB0cmFuc2Zvcm0gcHJvcGVydHkgKHRvIG1haW50YWluIGJlc3QgcGVyZm9ybWFuY2UpLlxuXG5cdFx0XHRfaXNTYWZhcmksXG5cdFx0XHRfaXNGaXJlZm94LCAvL0ZpcmVmb3ggaGFzIGEgYnVnIHRoYXQgY2F1c2VzIDNEIHRyYW5zZm9ybWVkIGVsZW1lbnRzIHRvIHJhbmRvbWx5IGRpc2FwcGVhciB1bmxlc3MgYSByZXBhaW50IGlzIGZvcmNlZCBhZnRlciBlYWNoIHVwZGF0ZSBvbiBlYWNoIGVsZW1lbnQuXG5cdFx0XHRfaXNTYWZhcmlMVDYsIC8vU2FmYXJpIChhbmQgQW5kcm9pZCA0IHdoaWNoIHVzZXMgYSBmbGF2b3Igb2YgU2FmYXJpKSBoYXMgYSBidWcgdGhhdCBwcmV2ZW50cyBjaGFuZ2VzIHRvIFwidG9wXCIgYW5kIFwibGVmdFwiIHByb3BlcnRpZXMgZnJvbSByZW5kZXJpbmcgcHJvcGVybHkgaWYgY2hhbmdlZCBvbiB0aGUgc2FtZSBmcmFtZSBhcyBhIHRyYW5zZm9ybSBVTkxFU1Mgd2Ugc2V0IHRoZSBlbGVtZW50J3MgV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IHRvIGhpZGRlbiAod2VpcmQsIEkga25vdykuIERvaW5nIHRoaXMgZm9yIEFuZHJvaWQgMyBhbmQgZWFybGllciBzZWVtcyB0byBhY3R1YWxseSBjYXVzZSBvdGhlciBwcm9ibGVtcywgdGhvdWdoIChmdW4hKVxuXHRcdFx0X2llVmVycyxcblx0XHRcdF9zdXBwb3J0c09wYWNpdHkgPSAoZnVuY3Rpb24oKSB7IC8vd2Ugc2V0IF9pc1NhZmFyaSwgX2llVmVycywgX2lzRmlyZWZveCwgYW5kIF9zdXBwb3J0c09wYWNpdHkgYWxsIGluIG9uZSBmdW5jdGlvbiBoZXJlIHRvIHJlZHVjZSBmaWxlIHNpemUgc2xpZ2h0bHksIGVzcGVjaWFsbHkgaW4gdGhlIG1pbmlmaWVkIHZlcnNpb24uXG5cdFx0XHRcdHZhciBpID0gX2FnZW50LmluZGV4T2YoXCJBbmRyb2lkXCIpLFxuXHRcdFx0XHRcdGEgPSBfY3JlYXRlRWxlbWVudChcImFcIik7XG5cdFx0XHRcdF9pc1NhZmFyaSA9IChfYWdlbnQuaW5kZXhPZihcIlNhZmFyaVwiKSAhPT0gLTEgJiYgX2FnZW50LmluZGV4T2YoXCJDaHJvbWVcIikgPT09IC0xICYmIChpID09PSAtMSB8fCBOdW1iZXIoX2FnZW50LnN1YnN0cihpKzgsIDEpKSA+IDMpKTtcblx0XHRcdFx0X2lzU2FmYXJpTFQ2ID0gKF9pc1NhZmFyaSAmJiAoTnVtYmVyKF9hZ2VudC5zdWJzdHIoX2FnZW50LmluZGV4T2YoXCJWZXJzaW9uL1wiKSs4LCAxKSkgPCA2KSk7XG5cdFx0XHRcdF9pc0ZpcmVmb3ggPSAoX2FnZW50LmluZGV4T2YoXCJGaXJlZm94XCIpICE9PSAtMSk7XG5cdFx0XHRcdGlmICgoL01TSUUgKFswLTldezEsfVtcXC4wLTldezAsfSkvKS5leGVjKF9hZ2VudCkgfHwgKC9UcmlkZW50XFwvLipydjooWzAtOV17MSx9W1xcLjAtOV17MCx9KS8pLmV4ZWMoX2FnZW50KSkge1xuXHRcdFx0XHRcdF9pZVZlcnMgPSBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWEpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0YS5zdHlsZS5jc3NUZXh0ID0gXCJ0b3A6MXB4O29wYWNpdHk6LjU1O1wiO1xuXHRcdFx0XHRyZXR1cm4gL14wLjU1Ly50ZXN0KGEuc3R5bGUub3BhY2l0eSk7XG5cdFx0XHR9KCkpLFxuXHRcdFx0X2dldElFT3BhY2l0eSA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0cmV0dXJuIChfb3BhY2l0eUV4cC50ZXN0KCAoKHR5cGVvZih2KSA9PT0gXCJzdHJpbmdcIikgPyB2IDogKHYuY3VycmVudFN0eWxlID8gdi5jdXJyZW50U3R5bGUuZmlsdGVyIDogdi5zdHlsZS5maWx0ZXIpIHx8IFwiXCIpICkgPyAoIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApIC8gMTAwICkgOiAxKTtcblx0XHRcdH0sXG5cdFx0XHRfbG9nID0gZnVuY3Rpb24ocykgey8vZm9yIGxvZ2dpbmcgbWVzc2FnZXMsIGJ1dCBpbiBhIHdheSB0aGF0IHdvbid0IHRocm93IGVycm9ycyBpbiBvbGQgdmVyc2lvbnMgb2YgSUUuXG5cdFx0XHRcdGlmICh3aW5kb3cuY29uc29sZSkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKHMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X3RhcmdldCwgLy93aGVuIGluaXR0aW5nIGEgQ1NTUGx1Z2luLCB3ZSBzZXQgdGhpcyB2YXJpYWJsZSBzbyB0aGF0IHdlIGNhbiBhY2Nlc3MgaXQgZnJvbSB3aXRoaW4gbWFueSBvdGhlciBmdW5jdGlvbnMgd2l0aG91dCBoYXZpbmcgdG8gcGFzcyBpdCBhcm91bmQgYXMgcGFyYW1zXG5cdFx0XHRfaW5kZXgsIC8vd2hlbiBpbml0dGluZyBhIENTU1BsdWdpbiwgd2Ugc2V0IHRoaXMgdmFyaWFibGUgc28gdGhhdCB3ZSBjYW4gYWNjZXNzIGl0IGZyb20gd2l0aGluIG1hbnkgb3RoZXIgZnVuY3Rpb25zIHdpdGhvdXQgaGF2aW5nIHRvIHBhc3MgaXQgYXJvdW5kIGFzIHBhcmFtc1xuXG5cdFx0XHRfcHJlZml4Q1NTID0gXCJcIiwgLy90aGUgbm9uLWNhbWVsQ2FzZSB2ZW5kb3IgcHJlZml4IGxpa2UgXCItby1cIiwgXCItbW96LVwiLCBcIi1tcy1cIiwgb3IgXCItd2Via2l0LVwiXG5cdFx0XHRfcHJlZml4ID0gXCJcIiwgLy9jYW1lbENhc2UgdmVuZG9yIHByZWZpeCBsaWtlIFwiT1wiLCBcIm1zXCIsIFwiV2Via2l0XCIsIG9yIFwiTW96XCIuXG5cblx0XHRcdC8vIEBwcml2YXRlIGZlZWQgaW4gYSBjYW1lbENhc2UgcHJvcGVydHkgbmFtZSBsaWtlIFwidHJhbnNmb3JtXCIgYW5kIGl0IHdpbGwgY2hlY2sgdG8gc2VlIGlmIGl0IGlzIHZhbGlkIGFzLWlzIG9yIGlmIGl0IG5lZWRzIGEgdmVuZG9yIHByZWZpeC4gSXQgcmV0dXJucyB0aGUgY29ycmVjdGVkIGNhbWVsQ2FzZSBwcm9wZXJ0eSBuYW1lIChpLmUuIFwiV2Via2l0VHJhbnNmb3JtXCIgb3IgXCJNb3pUcmFuc2Zvcm1cIiBvciBcInRyYW5zZm9ybVwiIG9yIG51bGwgaWYgbm8gc3VjaCBwcm9wZXJ0eSBpcyBmb3VuZCwgbGlrZSBpZiB0aGUgYnJvd3NlciBpcyBJRTggb3IgYmVmb3JlLCBcInRyYW5zZm9ybVwiIHdvbid0IGJlIGZvdW5kIGF0IGFsbClcblx0XHRcdF9jaGVja1Byb3BQcmVmaXggPSBmdW5jdGlvbihwLCBlKSB7XG5cdFx0XHRcdGUgPSBlIHx8IF90ZW1wRGl2O1xuXHRcdFx0XHR2YXIgcyA9IGUuc3R5bGUsXG5cdFx0XHRcdFx0YSwgaTtcblx0XHRcdFx0aWYgKHNbcF0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiBwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHAgPSBwLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcC5zdWJzdHIoMSk7XG5cdFx0XHRcdGEgPSBbXCJPXCIsXCJNb3pcIixcIm1zXCIsXCJNc1wiLFwiV2Via2l0XCJdO1xuXHRcdFx0XHRpID0gNTtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xICYmIHNbYVtpXStwXSA9PT0gdW5kZWZpbmVkKSB7IH1cblx0XHRcdFx0aWYgKGkgPj0gMCkge1xuXHRcdFx0XHRcdF9wcmVmaXggPSAoaSA9PT0gMykgPyBcIm1zXCIgOiBhW2ldO1xuXHRcdFx0XHRcdF9wcmVmaXhDU1MgPSBcIi1cIiArIF9wcmVmaXgudG9Mb3dlckNhc2UoKSArIFwiLVwiO1xuXHRcdFx0XHRcdHJldHVybiBfcHJlZml4ICsgcDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH0sXG5cblx0XHRcdF9nZXRDb21wdXRlZFN0eWxlID0gX2RvYy5kZWZhdWx0VmlldyA/IF9kb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSA6IGZ1bmN0aW9uKCkge30sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgUmV0dXJucyB0aGUgY3NzIHN0eWxlIGZvciBhIHBhcnRpY3VsYXIgcHJvcGVydHkgb2YgYW4gZWxlbWVudC4gRm9yIGV4YW1wbGUsIHRvIGdldCB3aGF0ZXZlciB0aGUgY3VycmVudCBcImxlZnRcIiBjc3MgdmFsdWUgZm9yIGFuIGVsZW1lbnQgd2l0aCBhbiBJRCBvZiBcIm15RWxlbWVudFwiLCB5b3UgY291bGQgZG86XG5cdFx0XHQgKiB2YXIgY3VycmVudExlZnQgPSBDU1NQbHVnaW4uZ2V0U3R5bGUoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibXlFbGVtZW50XCIpLCBcImxlZnRcIik7XG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBlbGVtZW50IHdob3NlIHN0eWxlIHByb3BlcnR5IHlvdSB3YW50IHRvIHF1ZXJ5XG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAobGlrZSBcImxlZnRcIiBvciBcInRvcFwiIG9yIFwibWFyZ2luVG9wXCIsIGV0Yy4pXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdD19IGNzIENvbXB1dGVkIHN0eWxlIG9iamVjdC4gVGhpcyBqdXN0IHByb3ZpZGVzIGEgd2F5IHRvIHNwZWVkIHByb2Nlc3NpbmcgaWYgeW91J3JlIGdvaW5nIHRvIGdldCBzZXZlcmFsIHByb3BlcnRpZXMgb24gdGhlIHNhbWUgZWxlbWVudCBpbiBxdWljayBzdWNjZXNzaW9uIC0geW91IGNhbiByZXVzZSB0aGUgcmVzdWx0IG9mIHRoZSBnZXRDb21wdXRlZFN0eWxlKCkgY2FsbC5cblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IGNhbGMgSWYgdHJ1ZSwgdGhlIHZhbHVlIHdpbGwgbm90IGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgZWxlbWVudCdzIFwic3R5bGVcIiBwcm9wZXJ0eSAoaWYgaXQgZXhpc3RzIHRoZXJlKSwgYnV0IGluc3RlYWQgdGhlIGdldENvbXB1dGVkU3R5bGUoKSByZXN1bHQgd2lsbCBiZSB1c2VkLiBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCB0aGUgYnJvd3NlciBpdHNlbGYgaXMgaW50ZXJwcmV0aW5nIHRoZSB2YWx1ZS5cblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gZGZsdCBEZWZhdWx0IHZhbHVlIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkIGluIHRoZSBwbGFjZSBvZiBudWxsLCBcIm5vbmVcIiwgXCJhdXRvXCIgb3IgXCJhdXRvIGF1dG9cIi5cblx0XHRcdCAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBjdXJyZW50IHByb3BlcnR5IHZhbHVlXG5cdFx0XHQgKi9cblx0XHRcdF9nZXRTdHlsZSA9IENTU1BsdWdpbi5nZXRTdHlsZSA9IGZ1bmN0aW9uKHQsIHAsIGNzLCBjYWxjLCBkZmx0KSB7XG5cdFx0XHRcdHZhciBydjtcblx0XHRcdFx0aWYgKCFfc3VwcG9ydHNPcGFjaXR5KSBpZiAocCA9PT0gXCJvcGFjaXR5XCIpIHsgLy9zZXZlcmFsIHZlcnNpb25zIG9mIElFIGRvbid0IHVzZSB0aGUgc3RhbmRhcmQgXCJvcGFjaXR5XCIgcHJvcGVydHkgLSB0aGV5IHVzZSB0aGluZ3MgbGlrZSBmaWx0ZXI6YWxwaGEob3BhY2l0eT01MCksIHNvIHdlIHBhcnNlIHRoYXQgaGVyZS5cblx0XHRcdFx0XHRyZXR1cm4gX2dldElFT3BhY2l0eSh0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWNhbGMgJiYgdC5zdHlsZVtwXSkge1xuXHRcdFx0XHRcdHJ2ID0gdC5zdHlsZVtwXTtcblx0XHRcdFx0fSBlbHNlIGlmICgoY3MgPSBjcyB8fCBfZ2V0Q29tcHV0ZWRTdHlsZSh0KSkpIHtcblx0XHRcdFx0XHRydiA9IGNzW3BdIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocCkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHQuY3VycmVudFN0eWxlKSB7XG5cdFx0XHRcdFx0cnYgPSB0LmN1cnJlbnRTdHlsZVtwXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKGRmbHQgIT0gbnVsbCAmJiAoIXJ2IHx8IHJ2ID09PSBcIm5vbmVcIiB8fCBydiA9PT0gXCJhdXRvXCIgfHwgcnYgPT09IFwiYXV0byBhdXRvXCIpKSA/IGRmbHQgOiBydjtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgUGFzcyB0aGUgdGFyZ2V0IGVsZW1lbnQsIHRoZSBwcm9wZXJ0eSBuYW1lLCB0aGUgbnVtZXJpYyB2YWx1ZSwgYW5kIHRoZSBzdWZmaXggKGxpa2UgXCIlXCIsIFwiZW1cIiwgXCJweFwiLCBldGMuKSBhbmQgaXQgd2lsbCBzcGl0IGJhY2sgdGhlIGVxdWl2YWxlbnQgcGl4ZWwgbnVtYmVyLlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBlbGVtZW50XG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAobGlrZSBcImxlZnRcIiwgXCJ0b3BcIiwgXCJtYXJnaW5MZWZ0XCIsIGV0Yy4pXG5cdFx0XHQgKiBAcGFyYW0geyFudW1iZXJ9IHYgVmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gc2Z4IFN1ZmZpeCAobGlrZSBcInB4XCIgb3IgXCIlXCIgb3IgXCJlbVwiKVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFuPX0gcmVjdXJzZSBJZiB0cnVlLCB0aGUgY2FsbCBpcyBhIHJlY3Vyc2l2ZSBvbmUuIEluIHNvbWUgYnJvd3NlcnMgKGxpa2UgSUU3LzgpLCBvY2Nhc2lvbmFsbHkgdGhlIHZhbHVlIGlzbid0IGFjY3VyYXRlbHkgcmVwb3J0ZWQgaW5pdGlhbGx5LCBidXQgaWYgd2UgcnVuIHRoZSBmdW5jdGlvbiBhZ2FpbiBpdCB3aWxsIHRha2UgZWZmZWN0LlxuXHRcdFx0ICogQHJldHVybiB7bnVtYmVyfSB2YWx1ZSBpbiBwaXhlbHNcblx0XHRcdCAqL1xuXHRcdFx0X2NvbnZlcnRUb1BpeGVscyA9IF9pbnRlcm5hbHMuY29udmVydFRvUGl4ZWxzID0gZnVuY3Rpb24odCwgcCwgdiwgc2Z4LCByZWN1cnNlKSB7XG5cdFx0XHRcdGlmIChzZnggPT09IFwicHhcIiB8fCAhc2Z4KSB7IHJldHVybiB2OyB9XG5cdFx0XHRcdGlmIChzZnggPT09IFwiYXV0b1wiIHx8ICF2KSB7IHJldHVybiAwOyB9XG5cdFx0XHRcdHZhciBob3JpeiA9IF9ob3JpekV4cC50ZXN0KHApLFxuXHRcdFx0XHRcdG5vZGUgPSB0LFxuXHRcdFx0XHRcdHN0eWxlID0gX3RlbXBEaXYuc3R5bGUsXG5cdFx0XHRcdFx0bmVnID0gKHYgPCAwKSxcblx0XHRcdFx0XHRwcmVjaXNlID0gKHYgPT09IDEpLFxuXHRcdFx0XHRcdHBpeCwgY2FjaGUsIHRpbWU7XG5cdFx0XHRcdGlmIChuZWcpIHtcblx0XHRcdFx0XHR2ID0gLXY7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHByZWNpc2UpIHtcblx0XHRcdFx0XHR2ICo9IDEwMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc2Z4ID09PSBcIiVcIiAmJiBwLmluZGV4T2YoXCJib3JkZXJcIikgIT09IC0xKSB7XG5cdFx0XHRcdFx0cGl4ID0gKHYgLyAxMDApICogKGhvcml6ID8gdC5jbGllbnRXaWR0aCA6IHQuY2xpZW50SGVpZ2h0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MCBzb2xpZCByZWQ7cG9zaXRpb246XCIgKyBfZ2V0U3R5bGUodCwgXCJwb3NpdGlvblwiKSArIFwiO2xpbmUtaGVpZ2h0OjA7XCI7XG5cdFx0XHRcdFx0aWYgKHNmeCA9PT0gXCIlXCIgfHwgIW5vZGUuYXBwZW5kQ2hpbGQgfHwgc2Z4LmNoYXJBdCgwKSA9PT0gXCJ2XCIgfHwgc2Z4ID09PSBcInJlbVwiKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gdC5wYXJlbnROb2RlIHx8IF9kb2MuYm9keTtcblx0XHRcdFx0XHRcdGNhY2hlID0gbm9kZS5fZ3NDYWNoZTtcblx0XHRcdFx0XHRcdHRpbWUgPSBUd2VlbkxpdGUudGlja2VyLmZyYW1lO1xuXHRcdFx0XHRcdFx0aWYgKGNhY2hlICYmIGhvcml6ICYmIGNhY2hlLnRpbWUgPT09IHRpbWUpIHsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb246IHdlIHJlY29yZCB0aGUgd2lkdGggb2YgZWxlbWVudHMgYWxvbmcgd2l0aCB0aGUgdGlja2VyIGZyYW1lIHNvIHRoYXQgd2UgY2FuIHF1aWNrbHkgZ2V0IGl0IGFnYWluIG9uIHRoZSBzYW1lIHRpY2sgKHNlZW1zIHJlbGF0aXZlbHkgc2FmZSB0byBhc3N1bWUgaXQgd291bGRuJ3QgY2hhbmdlIG9uIHRoZSBzYW1lIHRpY2spXG5cdFx0XHRcdFx0XHRcdHJldHVybiBjYWNoZS53aWR0aCAqIHYgLyAxMDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzdHlsZVsoaG9yaXogPyBcIndpZHRoXCIgOiBcImhlaWdodFwiKV0gPSB2ICsgc2Z4O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdHlsZVsoaG9yaXogPyBcImJvcmRlckxlZnRXaWR0aFwiIDogXCJib3JkZXJUb3BXaWR0aFwiKV0gPSB2ICsgc2Z4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRub2RlLmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcblx0XHRcdFx0XHRwaXggPSBwYXJzZUZsb2F0KF90ZW1wRGl2Wyhob3JpeiA/IFwib2Zmc2V0V2lkdGhcIiA6IFwib2Zmc2V0SGVpZ2h0XCIpXSk7XG5cdFx0XHRcdFx0bm9kZS5yZW1vdmVDaGlsZChfdGVtcERpdik7XG5cdFx0XHRcdFx0aWYgKGhvcml6ICYmIHNmeCA9PT0gXCIlXCIgJiYgQ1NTUGx1Z2luLmNhY2hlV2lkdGhzICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0Y2FjaGUgPSBub2RlLl9nc0NhY2hlID0gbm9kZS5fZ3NDYWNoZSB8fCB7fTtcblx0XHRcdFx0XHRcdGNhY2hlLnRpbWUgPSB0aW1lO1xuXHRcdFx0XHRcdFx0Y2FjaGUud2lkdGggPSBwaXggLyB2ICogMTAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocGl4ID09PSAwICYmICFyZWN1cnNlKSB7XG5cdFx0XHRcdFx0XHRwaXggPSBfY29udmVydFRvUGl4ZWxzKHQsIHAsIHYsIHNmeCwgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwcmVjaXNlKSB7XG5cdFx0XHRcdFx0cGl4IC89IDEwMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbmVnID8gLXBpeCA6IHBpeDtcblx0XHRcdH0sXG5cdFx0XHRfY2FsY3VsYXRlT2Zmc2V0ID0gX2ludGVybmFscy5jYWxjdWxhdGVPZmZzZXQgPSBmdW5jdGlvbih0LCBwLCBjcykgeyAvL2ZvciBmaWd1cmluZyBvdXQgXCJ0b3BcIiBvciBcImxlZnRcIiBpbiBweCB3aGVuIGl0J3MgXCJhdXRvXCIuIFdlIG5lZWQgdG8gZmFjdG9yIGluIG1hcmdpbiB3aXRoIHRoZSBvZmZzZXRMZWZ0L29mZnNldFRvcFxuXHRcdFx0XHRpZiAoX2dldFN0eWxlKHQsIFwicG9zaXRpb25cIiwgY3MpICE9PSBcImFic29sdXRlXCIpIHsgcmV0dXJuIDA7IH1cblx0XHRcdFx0dmFyIGRpbSA9ICgocCA9PT0gXCJsZWZ0XCIpID8gXCJMZWZ0XCIgOiBcIlRvcFwiKSxcblx0XHRcdFx0XHR2ID0gX2dldFN0eWxlKHQsIFwibWFyZ2luXCIgKyBkaW0sIGNzKTtcblx0XHRcdFx0cmV0dXJuIHRbXCJvZmZzZXRcIiArIGRpbV0gLSAoX2NvbnZlcnRUb1BpeGVscyh0LCBwLCBwYXJzZUZsb2F0KHYpLCB2LnJlcGxhY2UoX3N1ZmZpeEV4cCwgXCJcIikpIHx8IDApO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQHByaXZhdGUgcmV0dXJucyBhdCBvYmplY3QgY29udGFpbmluZyBBTEwgb2YgdGhlIHN0eWxlIHByb3BlcnRpZXMgaW4gY2FtZWxDYXNlIGFuZCB0aGVpciBhc3NvY2lhdGVkIHZhbHVlcy5cblx0XHRcdF9nZXRBbGxTdHlsZXMgPSBmdW5jdGlvbih0LCBjcykge1xuXHRcdFx0XHR2YXIgcyA9IHt9LFxuXHRcdFx0XHRcdGksIHRyLCBwO1xuXHRcdFx0XHRpZiAoKGNzID0gY3MgfHwgX2dldENvbXB1dGVkU3R5bGUodCwgbnVsbCkpKSB7XG5cdFx0XHRcdFx0aWYgKChpID0gY3MubGVuZ3RoKSkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdHAgPSBjc1tpXTtcblx0XHRcdFx0XHRcdFx0aWYgKHAuaW5kZXhPZihcIi10cmFuc2Zvcm1cIikgPT09IC0xIHx8IF90cmFuc2Zvcm1Qcm9wQ1NTID09PSBwKSB7IC8vU29tZSB3ZWJraXQgYnJvd3NlcnMgZHVwbGljYXRlIHRyYW5zZm9ybSB2YWx1ZXMsIG9uZSBub24tcHJlZml4ZWQgYW5kIG9uZSBwcmVmaXhlZCAoXCJ0cmFuc2Zvcm1cIiBhbmQgXCJXZWJraXRUcmFuc2Zvcm1cIiksIHNvIHdlIG11c3Qgd2VlZCBvdXQgdGhlIGV4dHJhIG9uZSBoZXJlLlxuXHRcdFx0XHRcdFx0XHRcdHNbcC5yZXBsYWNlKF9jYW1lbEV4cCwgX2NhbWVsRnVuYyldID0gY3MuZ2V0UHJvcGVydHlWYWx1ZShwKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7IC8vc29tZSBicm93c2VycyBiZWhhdmUgZGlmZmVyZW50bHkgLSBjcy5sZW5ndGggaXMgYWx3YXlzIDAsIHNvIHdlIG11c3QgZG8gYSBmb3IuLi5pbiBsb29wLlxuXHRcdFx0XHRcdFx0Zm9yIChpIGluIGNzKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChpLmluZGV4T2YoXCJUcmFuc2Zvcm1cIikgPT09IC0xIHx8IF90cmFuc2Zvcm1Qcm9wID09PSBpKSB7IC8vU29tZSB3ZWJraXQgYnJvd3NlcnMgZHVwbGljYXRlIHRyYW5zZm9ybSB2YWx1ZXMsIG9uZSBub24tcHJlZml4ZWQgYW5kIG9uZSBwcmVmaXhlZCAoXCJ0cmFuc2Zvcm1cIiBhbmQgXCJXZWJraXRUcmFuc2Zvcm1cIiksIHNvIHdlIG11c3Qgd2VlZCBvdXQgdGhlIGV4dHJhIG9uZSBoZXJlLlxuXHRcdFx0XHRcdFx0XHRcdHNbaV0gPSBjc1tpXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmICgoY3MgPSB0LmN1cnJlbnRTdHlsZSB8fCB0LnN0eWxlKSkge1xuXHRcdFx0XHRcdGZvciAoaSBpbiBjcykge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZihpKSA9PT0gXCJzdHJpbmdcIiAmJiBzW2ldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0c1tpLnJlcGxhY2UoX2NhbWVsRXhwLCBfY2FtZWxGdW5jKV0gPSBjc1tpXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFfc3VwcG9ydHNPcGFjaXR5KSB7XG5cdFx0XHRcdFx0cy5vcGFjaXR5ID0gX2dldElFT3BhY2l0eSh0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0ciA9IF9nZXRUcmFuc2Zvcm0odCwgY3MsIGZhbHNlKTtcblx0XHRcdFx0cy5yb3RhdGlvbiA9IHRyLnJvdGF0aW9uO1xuXHRcdFx0XHRzLnNrZXdYID0gdHIuc2tld1g7XG5cdFx0XHRcdHMuc2NhbGVYID0gdHIuc2NhbGVYO1xuXHRcdFx0XHRzLnNjYWxlWSA9IHRyLnNjYWxlWTtcblx0XHRcdFx0cy54ID0gdHIueDtcblx0XHRcdFx0cy55ID0gdHIueTtcblx0XHRcdFx0aWYgKF9zdXBwb3J0czNEKSB7XG5cdFx0XHRcdFx0cy56ID0gdHIuejtcblx0XHRcdFx0XHRzLnJvdGF0aW9uWCA9IHRyLnJvdGF0aW9uWDtcblx0XHRcdFx0XHRzLnJvdGF0aW9uWSA9IHRyLnJvdGF0aW9uWTtcblx0XHRcdFx0XHRzLnNjYWxlWiA9IHRyLnNjYWxlWjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocy5maWx0ZXJzKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHMuZmlsdGVycztcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIEBwcml2YXRlIGFuYWx5emVzIHR3byBzdHlsZSBvYmplY3RzIChhcyByZXR1cm5lZCBieSBfZ2V0QWxsU3R5bGVzKCkpIGFuZCBvbmx5IGxvb2tzIGZvciBkaWZmZXJlbmNlcyBiZXR3ZWVuIHRoZW0gdGhhdCBjb250YWluIHR3ZWVuYWJsZSB2YWx1ZXMgKGxpa2UgYSBudW1iZXIgb3IgY29sb3IpLiBJdCByZXR1cm5zIGFuIG9iamVjdCB3aXRoIGEgXCJkaWZzXCIgcHJvcGVydHkgd2hpY2ggcmVmZXJzIHRvIGFuIG9iamVjdCBjb250YWluaW5nIG9ubHkgdGhvc2UgaXNvbGF0ZWQgcHJvcGVydGllcyBhbmQgdmFsdWVzIGZvciB0d2VlbmluZywgYW5kIGEgXCJmaXJzdE1QVFwiIHByb3BlcnR5IHdoaWNoIHJlZmVycyB0byB0aGUgZmlyc3QgTWluaVByb3BUd2VlbiBpbnN0YW5jZSBpbiBhIGxpbmtlZCBsaXN0IHRoYXQgcmVjb3JkZWQgYWxsIHRoZSBzdGFydGluZyB2YWx1ZXMgb2YgdGhlIGRpZmZlcmVudCBwcm9wZXJ0aWVzIHNvIHRoYXQgd2UgY2FuIHJldmVydCB0byB0aGVtIGF0IHRoZSBlbmQgb3IgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiAtIHdlIGRvbid0IHdhbnQgdGhlIGNhc2NhZGluZyB0byBnZXQgbWVzc2VkIHVwLiBUaGUgZm9yY2VMb29rdXAgcGFyYW1ldGVyIGlzIGFuIG9wdGlvbmFsIGdlbmVyaWMgb2JqZWN0IHdpdGggcHJvcGVydGllcyB0aGF0IHNob3VsZCBiZSBmb3JjZWQgaW50byB0aGUgcmVzdWx0cyAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjbGFzc05hbWUgdHdlZW5zIHRoYXQgYXJlIG92ZXJ3cml0aW5nIG90aGVycyBiZWNhdXNlIGltYWdpbmUgYSBzY2VuYXJpbyB3aGVyZSBhIHJvbGxvdmVyL3JvbGxvdXQgYWRkcy9yZW1vdmVzIGEgY2xhc3MgYW5kIHRoZSB1c2VyIHN3aXBlcyB0aGUgbW91c2Ugb3ZlciB0aGUgdGFyZ2V0IFNVUEVSIGZhc3QsIHRodXMgbm90aGluZyBhY3R1YWxseSBjaGFuZ2VkIHlldCBhbmQgdGhlIHN1YnNlcXVlbnQgY29tcGFyaXNvbiBvZiB0aGUgcHJvcGVydGllcyB3b3VsZCBpbmRpY2F0ZSB0aGV5IG1hdGNoIChlc3BlY2lhbGx5IHdoZW4gcHggcm91bmRpbmcgaXMgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uKSwgdGh1cyBubyB0d2VlbmluZyBpcyBuZWNlc3NhcnkgZXZlbiB0aG91Z2ggaXQgU0hPVUxEIHR3ZWVuIGFuZCByZW1vdmUgdGhvc2UgcHJvcGVydGllcyBhZnRlciB0aGUgdHdlZW4gKG90aGVyd2lzZSB0aGUgaW5saW5lIHN0eWxlcyB3aWxsIGNvbnRhbWluYXRlIHRoaW5ncykuIFNlZSB0aGUgY2xhc3NOYW1lIFNwZWNpYWxQcm9wIGNvZGUgZm9yIGRldGFpbHMuXG5cdFx0XHRfY3NzRGlmID0gZnVuY3Rpb24odCwgczEsIHMyLCB2YXJzLCBmb3JjZUxvb2t1cCkge1xuXHRcdFx0XHR2YXIgZGlmcyA9IHt9LFxuXHRcdFx0XHRcdHN0eWxlID0gdC5zdHlsZSxcblx0XHRcdFx0XHR2YWwsIHAsIG1wdDtcblx0XHRcdFx0Zm9yIChwIGluIHMyKSB7XG5cdFx0XHRcdFx0aWYgKHAgIT09IFwiY3NzVGV4dFwiKSBpZiAocCAhPT0gXCJsZW5ndGhcIikgaWYgKGlzTmFOKHApKSBpZiAoczFbcF0gIT09ICh2YWwgPSBzMltwXSkgfHwgKGZvcmNlTG9va3VwICYmIGZvcmNlTG9va3VwW3BdKSkgaWYgKHAuaW5kZXhPZihcIk9yaWdpblwiKSA9PT0gLTEpIGlmICh0eXBlb2YodmFsKSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YodmFsKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdFx0ZGlmc1twXSA9ICh2YWwgPT09IFwiYXV0b1wiICYmIChwID09PSBcImxlZnRcIiB8fCBwID09PSBcInRvcFwiKSkgPyBfY2FsY3VsYXRlT2Zmc2V0KHQsIHApIDogKCh2YWwgPT09IFwiXCIgfHwgdmFsID09PSBcImF1dG9cIiB8fCB2YWwgPT09IFwibm9uZVwiKSAmJiB0eXBlb2YoczFbcF0pID09PSBcInN0cmluZ1wiICYmIHMxW3BdLnJlcGxhY2UoX05hTkV4cCwgXCJcIikgIT09IFwiXCIpID8gMCA6IHZhbDsgLy9pZiB0aGUgZW5kaW5nIHZhbHVlIGlzIGRlZmF1bHRpbmcgKFwiXCIgb3IgXCJhdXRvXCIpLCB3ZSBjaGVjayB0aGUgc3RhcnRpbmcgdmFsdWUgYW5kIGlmIGl0IGNhbiBiZSBwYXJzZWQgaW50byBhIG51bWJlciAoYSBzdHJpbmcgd2hpY2ggY291bGQgaGF2ZSBhIHN1ZmZpeCB0b28sIGxpa2UgNzAwcHgpLCB0aGVuIHdlIHN3YXAgaW4gMCBmb3IgXCJcIiBvciBcImF1dG9cIiBzbyB0aGF0IHRoaW5ncyBhY3R1YWxseSB0d2Vlbi5cblx0XHRcdFx0XHRcdGlmIChzdHlsZVtwXSAhPT0gdW5kZWZpbmVkKSB7IC8vZm9yIGNsYXNzTmFtZSB0d2VlbnMsIHdlIG11c3QgcmVtZW1iZXIgd2hpY2ggcHJvcGVydGllcyBhbHJlYWR5IGV4aXN0ZWQgaW5saW5lIC0gdGhlIG9uZXMgdGhhdCBkaWRuJ3Qgc2hvdWxkIGJlIHJlbW92ZWQgd2hlbiB0aGUgdHdlZW4gaXNuJ3QgaW4gcHJvZ3Jlc3MgYmVjYXVzZSB0aGV5IHdlcmUgb25seSBpbnRyb2R1Y2VkIHRvIGZhY2lsaXRhdGUgdGhlIHRyYW5zaXRpb24gYmV0d2VlbiBjbGFzc2VzLlxuXHRcdFx0XHRcdFx0XHRtcHQgPSBuZXcgTWluaVByb3BUd2VlbihzdHlsZSwgcCwgc3R5bGVbcF0sIG1wdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2YXJzKSB7XG5cdFx0XHRcdFx0Zm9yIChwIGluIHZhcnMpIHsgLy9jb3B5IHByb3BlcnRpZXMgKGV4Y2VwdCBjbGFzc05hbWUpXG5cdFx0XHRcdFx0XHRpZiAocCAhPT0gXCJjbGFzc05hbWVcIikge1xuXHRcdFx0XHRcdFx0XHRkaWZzW3BdID0gdmFyc1twXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtkaWZzOmRpZnMsIGZpcnN0TVBUOm1wdH07XG5cdFx0XHR9LFxuXHRcdFx0X2RpbWVuc2lvbnMgPSB7d2lkdGg6W1wiTGVmdFwiLFwiUmlnaHRcIl0sIGhlaWdodDpbXCJUb3BcIixcIkJvdHRvbVwiXX0sXG5cdFx0XHRfbWFyZ2lucyA9IFtcIm1hcmdpbkxlZnRcIixcIm1hcmdpblJpZ2h0XCIsXCJtYXJnaW5Ub3BcIixcIm1hcmdpbkJvdHRvbVwiXSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBHZXRzIHRoZSB3aWR0aCBvciBoZWlnaHQgb2YgYW4gZWxlbWVudFxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBlbGVtZW50XG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgUHJvcGVydHkgbmFtZSAoXCJ3aWR0aFwiIG9yIFwiaGVpZ2h0XCIpXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdD19IGNzIENvbXB1dGVkIHN0eWxlIG9iamVjdCAoaWYgb25lIGV4aXN0cykuIEp1c3QgYSBzcGVlZCBvcHRpbWl6YXRpb24uXG5cdFx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9IERpbWVuc2lvbiAoaW4gcGl4ZWxzKVxuXHRcdFx0ICovXG5cdFx0XHRfZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24odCwgcCwgY3MpIHtcblx0XHRcdFx0aWYgKCh0Lm5vZGVOYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIikgeyAvL0Nocm9tZSBubyBsb25nZXIgc3VwcG9ydHMgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IG9uIFNWRyBlbGVtZW50cy5cblx0XHRcdFx0XHRyZXR1cm4gKGNzIHx8IF9nZXRDb21wdXRlZFN0eWxlKHQpKVtwXSB8fCAwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHQuZ2V0QkJveCAmJiBfaXNTVkcodCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdC5nZXRCQm94KClbcF0gfHwgMDtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgdiA9IHBhcnNlRmxvYXQoKHAgPT09IFwid2lkdGhcIikgPyB0Lm9mZnNldFdpZHRoIDogdC5vZmZzZXRIZWlnaHQpLFxuXHRcdFx0XHRcdGEgPSBfZGltZW5zaW9uc1twXSxcblx0XHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHRcdGNzID0gY3MgfHwgX2dldENvbXB1dGVkU3R5bGUodCwgbnVsbCk7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdHYgLT0gcGFyc2VGbG9hdCggX2dldFN0eWxlKHQsIFwicGFkZGluZ1wiICsgYVtpXSwgY3MsIHRydWUpICkgfHwgMDtcblx0XHRcdFx0XHR2IC09IHBhcnNlRmxvYXQoIF9nZXRTdHlsZSh0LCBcImJvcmRlclwiICsgYVtpXSArIFwiV2lkdGhcIiwgY3MsIHRydWUpICkgfHwgMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdjtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEBwcml2YXRlIFBhcnNlcyBwb3NpdGlvbi1yZWxhdGVkIGNvbXBsZXggc3RyaW5ncyBsaWtlIFwidG9wIGxlZnRcIiBvciBcIjUwcHggMTBweFwiIG9yIFwiNzAlIDIwJVwiLCBldGMuIHdoaWNoIGFyZSB1c2VkIGZvciB0aGluZ3MgbGlrZSB0cmFuc2Zvcm1PcmlnaW4gb3IgYmFja2dyb3VuZFBvc2l0aW9uLiBPcHRpb25hbGx5IGRlY29yYXRlcyBhIHN1cHBsaWVkIG9iamVjdCAocmVjT2JqKSB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczogXCJveFwiIChvZmZzZXRYKSwgXCJveVwiIChvZmZzZXRZKSwgXCJveHBcIiAoaWYgdHJ1ZSwgXCJveFwiIGlzIGEgcGVyY2VudGFnZSBub3QgYSBwaXhlbCB2YWx1ZSksIGFuZCBcIm94eVwiIChpZiB0cnVlLCBcIm95XCIgaXMgYSBwZXJjZW50YWdlIG5vdCBhIHBpeGVsIHZhbHVlKVxuXHRcdFx0X3BhcnNlUG9zaXRpb24gPSBmdW5jdGlvbih2LCByZWNPYmopIHtcblx0XHRcdFx0aWYgKHYgPT09IFwiY29udGFpblwiIHx8IHYgPT09IFwiYXV0b1wiIHx8IHYgPT09IFwiYXV0byBhdXRvXCIpIHsgLy9ub3RlOiBGaXJlZm94IHVzZXMgXCJhdXRvIGF1dG9cIiBhcyBkZWZhdWx0IHdoZXJlYXMgQ2hyb21lIHVzZXMgXCJhdXRvXCIuXG5cdFx0XHRcdFx0cmV0dXJuIHYgKyBcIiBcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodiA9PSBudWxsIHx8IHYgPT09IFwiXCIpIHtcblx0XHRcdFx0XHR2ID0gXCIwIDBcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgYSA9IHYuc3BsaXQoXCIgXCIpLFxuXHRcdFx0XHRcdHggPSAodi5pbmRleE9mKFwibGVmdFwiKSAhPT0gLTEpID8gXCIwJVwiIDogKHYuaW5kZXhPZihcInJpZ2h0XCIpICE9PSAtMSkgPyBcIjEwMCVcIiA6IGFbMF0sXG5cdFx0XHRcdFx0eSA9ICh2LmluZGV4T2YoXCJ0b3BcIikgIT09IC0xKSA/IFwiMCVcIiA6ICh2LmluZGV4T2YoXCJib3R0b21cIikgIT09IC0xKSA/IFwiMTAwJVwiIDogYVsxXSxcblx0XHRcdFx0XHRpO1xuXHRcdFx0XHRpZiAoYS5sZW5ndGggPiAzICYmICFyZWNPYmopIHsgLy9tdWx0aXBsZSBwb3NpdGlvbnNcblx0XHRcdFx0XHRhID0gdi5zcGxpdChcIiwgXCIpLmpvaW4oXCIsXCIpLnNwbGl0KFwiLFwiKTtcblx0XHRcdFx0XHR2ID0gW107XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHYucHVzaChfcGFyc2VQb3NpdGlvbihhW2ldKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2LmpvaW4oXCIsXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh5ID09IG51bGwpIHtcblx0XHRcdFx0XHR5ID0gKHggPT09IFwiY2VudGVyXCIpID8gXCI1MCVcIiA6IFwiMFwiO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHkgPT09IFwiY2VudGVyXCIpIHtcblx0XHRcdFx0XHR5ID0gXCI1MCVcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoeCA9PT0gXCJjZW50ZXJcIiB8fCAoaXNOYU4ocGFyc2VGbG9hdCh4KSkgJiYgKHggKyBcIlwiKS5pbmRleE9mKFwiPVwiKSA9PT0gLTEpKSB7IC8vcmVtZW1iZXIsIHRoZSB1c2VyIGNvdWxkIGZsaXAtZmxvcCB0aGUgdmFsdWVzIGFuZCBzYXkgXCJib3R0b20gY2VudGVyXCIgb3IgXCJjZW50ZXIgYm90dG9tXCIsIGV0Yy4gXCJjZW50ZXJcIiBpcyBhbWJpZ3VvdXMgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkIHRvIGRlc2NyaWJlIGhvcml6b250YWwgb3IgdmVydGljYWwsIGhlbmNlIHRoZSBpc05hTigpLiBJZiB0aGVyZSdzIGFuIFwiPVwiIHNpZ24gaW4gdGhlIHZhbHVlLCBpdCdzIHJlbGF0aXZlLlxuXHRcdFx0XHRcdHggPSBcIjUwJVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHYgPSB4ICsgXCIgXCIgKyB5ICsgKChhLmxlbmd0aCA+IDIpID8gXCIgXCIgKyBhWzJdIDogXCJcIik7XG5cdFx0XHRcdGlmIChyZWNPYmopIHtcblx0XHRcdFx0XHRyZWNPYmoub3hwID0gKHguaW5kZXhPZihcIiVcIikgIT09IC0xKTtcblx0XHRcdFx0XHRyZWNPYmoub3lwID0gKHkuaW5kZXhPZihcIiVcIikgIT09IC0xKTtcblx0XHRcdFx0XHRyZWNPYmoub3hyID0gKHguY2hhckF0KDEpID09PSBcIj1cIik7XG5cdFx0XHRcdFx0cmVjT2JqLm95ciA9ICh5LmNoYXJBdCgxKSA9PT0gXCI9XCIpO1xuXHRcdFx0XHRcdHJlY09iai5veCA9IHBhcnNlRmxvYXQoeC5yZXBsYWNlKF9OYU5FeHAsIFwiXCIpKTtcblx0XHRcdFx0XHRyZWNPYmoub3kgPSBwYXJzZUZsb2F0KHkucmVwbGFjZShfTmFORXhwLCBcIlwiKSk7XG5cdFx0XHRcdFx0cmVjT2JqLnYgPSB2O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZWNPYmogfHwgdjtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgVGFrZXMgYW4gZW5kaW5nIHZhbHVlICh0eXBpY2FsbHkgYSBzdHJpbmcsIGJ1dCBjYW4gYmUgYSBudW1iZXIpIGFuZCBhIHN0YXJ0aW5nIHZhbHVlIGFuZCByZXR1cm5zIHRoZSBjaGFuZ2UgYmV0d2VlbiB0aGUgdHdvLCBsb29raW5nIGZvciByZWxhdGl2ZSB2YWx1ZSBpbmRpY2F0b3JzIGxpa2UgKz0gYW5kIC09IGFuZCBpdCBhbHNvIGlnbm9yZXMgc3VmZml4ZXMgKGJ1dCBtYWtlIHN1cmUgdGhlIGVuZGluZyB2YWx1ZSBzdGFydHMgd2l0aCBhIG51bWJlciBvciArPS8tPSBhbmQgdGhhdCB0aGUgc3RhcnRpbmcgdmFsdWUgaXMgYSBOVU1CRVIhKVxuXHRcdFx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyl9IGUgRW5kIHZhbHVlIHdoaWNoIGlzIHR5cGljYWxseSBhIHN0cmluZywgYnV0IGNvdWxkIGJlIGEgbnVtYmVyXG5cdFx0XHQgKiBAcGFyYW0geyhudW1iZXJ8c3RyaW5nKX0gYiBCZWdpbm5pbmcgdmFsdWUgd2hpY2ggaXMgdHlwaWNhbGx5IGEgc3RyaW5nIGJ1dCBjb3VsZCBiZSBhIG51bWJlclxuXHRcdFx0ICogQHJldHVybiB7bnVtYmVyfSBBbW91bnQgb2YgY2hhbmdlIGJldHdlZW4gdGhlIGJlZ2lubmluZyBhbmQgZW5kaW5nIHZhbHVlcyAocmVsYXRpdmUgdmFsdWVzIHRoYXQgaGF2ZSBhIFwiKz1cIiBvciBcIi09XCIgYXJlIHJlY29nbml6ZWQpXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZUNoYW5nZSA9IGZ1bmN0aW9uKGUsIGIpIHtcblx0XHRcdFx0aWYgKHR5cGVvZihlKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0ZSA9IGUoX2luZGV4LCBfdGFyZ2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKHR5cGVvZihlKSA9PT0gXCJzdHJpbmdcIiAmJiBlLmNoYXJBdCgxKSA9PT0gXCI9XCIpID8gcGFyc2VJbnQoZS5jaGFyQXQoMCkgKyBcIjFcIiwgMTApICogcGFyc2VGbG9hdChlLnN1YnN0cigyKSkgOiAocGFyc2VGbG9hdChlKSAtIHBhcnNlRmxvYXQoYikpIHx8IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIFRha2VzIGEgdmFsdWUgYW5kIGEgZGVmYXVsdCBudW1iZXIsIGNoZWNrcyBpZiB0aGUgdmFsdWUgaXMgcmVsYXRpdmUsIG51bGwsIG9yIG51bWVyaWMgYW5kIHNwaXRzIGJhY2sgYSBub3JtYWxpemVkIG51bWJlciBhY2NvcmRpbmdseS4gUHJpbWFyaWx5IHVzZWQgaW4gdGhlIF9wYXJzZVRyYW5zZm9ybSgpIGZ1bmN0aW9uLlxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3R9IHYgVmFsdWUgdG8gYmUgcGFyc2VkXG5cdFx0XHQgKiBAcGFyYW0geyFudW1iZXJ9IGQgRGVmYXVsdCB2YWx1ZSAod2hpY2ggaXMgYWxzbyB1c2VkIGZvciByZWxhdGl2ZSBjYWxjdWxhdGlvbnMgaWYgXCIrPVwiIG9yIFwiLT1cIiBpcyBmb3VuZCBpbiB0aGUgZmlyc3QgcGFyYW1ldGVyKVxuXHRcdFx0ICogQHJldHVybiB7bnVtYmVyfSBQYXJzZWQgdmFsdWVcblx0XHRcdCAqL1xuXHRcdFx0X3BhcnNlVmFsID0gZnVuY3Rpb24odiwgZCkge1xuXHRcdFx0XHRpZiAodHlwZW9mKHYpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHR2ID0gdihfaW5kZXgsIF90YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiAodiA9PSBudWxsKSA/IGQgOiAodHlwZW9mKHYpID09PSBcInN0cmluZ1wiICYmIHYuY2hhckF0KDEpID09PSBcIj1cIikgPyBwYXJzZUludCh2LmNoYXJBdCgwKSArIFwiMVwiLCAxMCkgKiBwYXJzZUZsb2F0KHYuc3Vic3RyKDIpKSArIGQgOiBwYXJzZUZsb2F0KHYpIHx8IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIFRyYW5zbGF0ZXMgc3RyaW5ncyBsaWtlIFwiNDBkZWdcIiBvciBcIjQwXCIgb3IgNDByYWRcIiBvciBcIis9NDBkZWdcIiBvciBcIjI3MF9zaG9ydFwiIG9yIFwiLTkwX2N3XCIgb3IgXCIrPTQ1X2Njd1wiIHRvIGEgbnVtZXJpYyByYWRpYW4gYW5nbGUuIE9mIGNvdXJzZSBhIHN0YXJ0aW5nL2RlZmF1bHQgdmFsdWUgbXVzdCBiZSBmZWQgaW4gdG9vIHNvIHRoYXQgcmVsYXRpdmUgdmFsdWVzIGNhbiBiZSBjYWxjdWxhdGVkIHByb3Blcmx5LlxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3R9IHYgVmFsdWUgdG8gYmUgcGFyc2VkXG5cdFx0XHQgKiBAcGFyYW0geyFudW1iZXJ9IGQgRGVmYXVsdCB2YWx1ZSAod2hpY2ggaXMgYWxzbyB1c2VkIGZvciByZWxhdGl2ZSBjYWxjdWxhdGlvbnMgaWYgXCIrPVwiIG9yIFwiLT1cIiBpcyBmb3VuZCBpbiB0aGUgZmlyc3QgcGFyYW1ldGVyKVxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBwIHByb3BlcnR5IG5hbWUgZm9yIGRpcmVjdGlvbmFsRW5kIChvcHRpb25hbCAtIG9ubHkgdXNlZCB3aGVuIHRoZSBwYXJzZWQgdmFsdWUgaXMgZGlyZWN0aW9uYWwgKFwiX3Nob3J0XCIsIFwiX2N3XCIsIG9yIFwiX2Njd1wiIHN1ZmZpeCkuIFdlIG5lZWQgYSB3YXkgdG8gc3RvcmUgdGhlIHVuY29tcGVuc2F0ZWQgdmFsdWUgc28gdGhhdCBhdCB0aGUgZW5kIG9mIHRoZSB0d2Vlbiwgd2Ugc2V0IGl0IHRvIGV4YWN0bHkgd2hhdCB3YXMgcmVxdWVzdGVkIHdpdGggbm8gZGlyZWN0aW9uYWwgY29tcGVuc2F0aW9uKS4gUHJvcGVydHkgbmFtZSB3b3VsZCBiZSBcInJvdGF0aW9uXCIsIFwicm90YXRpb25YXCIsIG9yIFwicm90YXRpb25ZXCJcblx0XHRcdCAqIEBwYXJhbSB7T2JqZWN0PX0gZGlyZWN0aW9uYWxFbmQgQW4gb2JqZWN0IHRoYXQgd2lsbCBzdG9yZSB0aGUgcmF3IGVuZCB2YWx1ZXMgZm9yIGRpcmVjdGlvbmFsIGFuZ2xlcyAoXCJfc2hvcnRcIiwgXCJfY3dcIiwgb3IgXCJfY2N3XCIgc3VmZml4KS4gV2UgbmVlZCBhIHdheSB0byBzdG9yZSB0aGUgdW5jb21wZW5zYXRlZCB2YWx1ZSBzbyB0aGF0IGF0IHRoZSBlbmQgb2YgdGhlIHR3ZWVuLCB3ZSBzZXQgaXQgdG8gZXhhY3RseSB3aGF0IHdhcyByZXF1ZXN0ZWQgd2l0aCBubyBkaXJlY3Rpb25hbCBjb21wZW5zYXRpb24uXG5cdFx0XHQgKiBAcmV0dXJuIHtudW1iZXJ9IHBhcnNlZCBhbmdsZSBpbiByYWRpYW5zXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZUFuZ2xlID0gZnVuY3Rpb24odiwgZCwgcCwgZGlyZWN0aW9uYWxFbmQpIHtcblx0XHRcdFx0dmFyIG1pbiA9IDAuMDAwMDAxLFxuXHRcdFx0XHRcdGNhcCwgc3BsaXQsIGRpZiwgcmVzdWx0LCBpc1JlbGF0aXZlO1xuXHRcdFx0XHRpZiAodHlwZW9mKHYpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHR2ID0gdihfaW5kZXgsIF90YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2ID09IG51bGwpIHtcblx0XHRcdFx0XHRyZXN1bHQgPSBkO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZih2KSA9PT0gXCJudW1iZXJcIikge1xuXHRcdFx0XHRcdHJlc3VsdCA9IHY7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2FwID0gMzYwO1xuXHRcdFx0XHRcdHNwbGl0ID0gdi5zcGxpdChcIl9cIik7XG5cdFx0XHRcdFx0aXNSZWxhdGl2ZSA9ICh2LmNoYXJBdCgxKSA9PT0gXCI9XCIpO1xuXHRcdFx0XHRcdGRpZiA9IChpc1JlbGF0aXZlID8gcGFyc2VJbnQodi5jaGFyQXQoMCkgKyBcIjFcIiwgMTApICogcGFyc2VGbG9hdChzcGxpdFswXS5zdWJzdHIoMikpIDogcGFyc2VGbG9hdChzcGxpdFswXSkpICogKCh2LmluZGV4T2YoXCJyYWRcIikgPT09IC0xKSA/IDEgOiBfUkFEMkRFRykgLSAoaXNSZWxhdGl2ZSA/IDAgOiBkKTtcblx0XHRcdFx0XHRpZiAoc3BsaXQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRpZiAoZGlyZWN0aW9uYWxFbmQpIHtcblx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uYWxFbmRbcF0gPSBkICsgZGlmO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHYuaW5kZXhPZihcInNob3J0XCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSBkaWYgJSBjYXA7XG5cdFx0XHRcdFx0XHRcdGlmIChkaWYgIT09IGRpZiAlIChjYXAgLyAyKSkge1xuXHRcdFx0XHRcdFx0XHRcdGRpZiA9IChkaWYgPCAwKSA/IGRpZiArIGNhcCA6IGRpZiAtIGNhcDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHYuaW5kZXhPZihcIl9jd1wiKSAhPT0gLTEgJiYgZGlmIDwgMCkge1xuXHRcdFx0XHRcdFx0XHRkaWYgPSAoKGRpZiArIGNhcCAqIDk5OTk5OTk5OTkpICUgY2FwKSAtICgoZGlmIC8gY2FwKSB8IDApICogY2FwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2LmluZGV4T2YoXCJjY3dcIikgIT09IC0xICYmIGRpZiA+IDApIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gKChkaWYgLSBjYXAgKiA5OTk5OTk5OTk5KSAlIGNhcCkgLSAoKGRpZiAvIGNhcCkgfCAwKSAqIGNhcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmVzdWx0ID0gZCArIGRpZjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocmVzdWx0IDwgbWluICYmIHJlc3VsdCA+IC1taW4pIHtcblx0XHRcdFx0XHRyZXN1bHQgPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9LFxuXG5cdFx0XHRfY29sb3JMb29rdXAgPSB7YXF1YTpbMCwyNTUsMjU1XSxcblx0XHRcdFx0bGltZTpbMCwyNTUsMF0sXG5cdFx0XHRcdHNpbHZlcjpbMTkyLDE5MiwxOTJdLFxuXHRcdFx0XHRibGFjazpbMCwwLDBdLFxuXHRcdFx0XHRtYXJvb246WzEyOCwwLDBdLFxuXHRcdFx0XHR0ZWFsOlswLDEyOCwxMjhdLFxuXHRcdFx0XHRibHVlOlswLDAsMjU1XSxcblx0XHRcdFx0bmF2eTpbMCwwLDEyOF0sXG5cdFx0XHRcdHdoaXRlOlsyNTUsMjU1LDI1NV0sXG5cdFx0XHRcdGZ1Y2hzaWE6WzI1NSwwLDI1NV0sXG5cdFx0XHRcdG9saXZlOlsxMjgsMTI4LDBdLFxuXHRcdFx0XHR5ZWxsb3c6WzI1NSwyNTUsMF0sXG5cdFx0XHRcdG9yYW5nZTpbMjU1LDE2NSwwXSxcblx0XHRcdFx0Z3JheTpbMTI4LDEyOCwxMjhdLFxuXHRcdFx0XHRwdXJwbGU6WzEyOCwwLDEyOF0sXG5cdFx0XHRcdGdyZWVuOlswLDEyOCwwXSxcblx0XHRcdFx0cmVkOlsyNTUsMCwwXSxcblx0XHRcdFx0cGluazpbMjU1LDE5MiwyMDNdLFxuXHRcdFx0XHRjeWFuOlswLDI1NSwyNTVdLFxuXHRcdFx0XHR0cmFuc3BhcmVudDpbMjU1LDI1NSwyNTUsMF19LFxuXG5cdFx0XHRfaHVlID0gZnVuY3Rpb24oaCwgbTEsIG0yKSB7XG5cdFx0XHRcdGggPSAoaCA8IDApID8gaCArIDEgOiAoaCA+IDEpID8gaCAtIDEgOiBoO1xuXHRcdFx0XHRyZXR1cm4gKCgoKGggKiA2IDwgMSkgPyBtMSArIChtMiAtIG0xKSAqIGggKiA2IDogKGggPCAwLjUpID8gbTIgOiAoaCAqIDMgPCAyKSA/IG0xICsgKG0yIC0gbTEpICogKDIgLyAzIC0gaCkgKiA2IDogbTEpICogMjU1KSArIDAuNSkgfCAwO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAcHJpdmF0ZSBQYXJzZXMgYSBjb2xvciAobGlrZSAjOUYwLCAjRkY5OTAwLCByZ2IoMjU1LDUxLDE1Mykgb3IgaHNsKDEwOCwgNTAlLCAxMCUpKSBpbnRvIGFuIGFycmF5IHdpdGggMyBlbGVtZW50cyBmb3IgcmVkLCBncmVlbiwgYW5kIGJsdWUgb3IgaWYgdG9IU0wgcGFyYW1ldGVyIGlzIHRydWUsIGl0IHdpbGwgcG9wdWxhdGUgdGhlIGFycmF5IHdpdGggaHVlLCBzYXR1cmF0aW9uLCBhbmQgbGlnaHRuZXNzIHZhbHVlcy4gSWYgYSByZWxhdGl2ZSB2YWx1ZSBpcyBmb3VuZCBpbiBhbiBoc2woKSBvciBoc2xhKCkgc3RyaW5nLCBpdCB3aWxsIHByZXNlcnZlIHRob3NlIHJlbGF0aXZlIHByZWZpeGVzIGFuZCBhbGwgdGhlIHZhbHVlcyBpbiB0aGUgYXJyYXkgd2lsbCBiZSBzdHJpbmdzIGluc3RlYWQgb2YgbnVtYmVycyAoaW4gYWxsIG90aGVyIGNhc2VzIGl0IHdpbGwgYmUgcG9wdWxhdGVkIHdpdGggbnVtYmVycykuXG5cdFx0XHQgKiBAcGFyYW0geyhzdHJpbmd8bnVtYmVyKX0gdiBUaGUgdmFsdWUgdGhlIHNob3VsZCBiZSBwYXJzZWQgd2hpY2ggY291bGQgYmUgYSBzdHJpbmcgbGlrZSAjOUYwIG9yIHJnYigyNTUsMTAyLDUxKSBvciByZ2JhKDI1NSwwLDAsMC41KSBvciBpdCBjb3VsZCBiZSBhIG51bWJlciBsaWtlIDB4RkYwMENDIG9yIGV2ZW4gYSBuYW1lZCBjb2xvciBsaWtlIHJlZCwgYmx1ZSwgcHVycGxlLCBldGMuXG5cdFx0XHQgKiBAcGFyYW0geyhib29sZWFuKX0gdG9IU0wgSWYgdHJ1ZSwgYW4gaHNsKCkgb3IgaHNsYSgpIHZhbHVlIHdpbGwgYmUgcmV0dXJuZWQgaW5zdGVhZCBvZiByZ2IoKSBvciByZ2JhKClcblx0XHRcdCAqIEByZXR1cm4ge0FycmF5LjxudW1iZXI+fSBBbiBhcnJheSBjb250YWluaW5nIHJlZCwgZ3JlZW4sIGFuZCBibHVlIChhbmQgb3B0aW9uYWxseSBhbHBoYSkgaW4gdGhhdCBvcmRlciwgb3IgaWYgdGhlIHRvSFNMIHBhcmFtZXRlciB3YXMgdHJ1ZSwgdGhlIGFycmF5IHdpbGwgY29udGFpbiBodWUsIHNhdHVyYXRpb24gYW5kIGxpZ2h0bmVzcyAoYW5kIG9wdGlvbmFsbHkgYWxwaGEpIGluIHRoYXQgb3JkZXIuIEFsd2F5cyBudW1iZXJzIHVubGVzcyB0aGVyZSdzIGEgcmVsYXRpdmUgcHJlZml4IGZvdW5kIGluIGFuIGhzbCgpIG9yIGhzbGEoKSBzdHJpbmcgYW5kIHRvSFNMIGlzIHRydWUuXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZUNvbG9yID0gQ1NTUGx1Z2luLnBhcnNlQ29sb3IgPSBmdW5jdGlvbih2LCB0b0hTTCkge1xuXHRcdFx0XHR2YXIgYSwgciwgZywgYiwgaCwgcywgbCwgbWF4LCBtaW4sIGQsIHdhc0hTTDtcblx0XHRcdFx0aWYgKCF2KSB7XG5cdFx0XHRcdFx0YSA9IF9jb2xvckxvb2t1cC5ibGFjaztcblx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YodikgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRhID0gW3YgPj4gMTYsICh2ID4+IDgpICYgMjU1LCB2ICYgMjU1XTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAodi5jaGFyQXQodi5sZW5ndGggLSAxKSA9PT0gXCIsXCIpIHsgLy9zb21ldGltZXMgYSB0cmFpbGluZyBjb21tYSBpcyBpbmNsdWRlZCBhbmQgd2Ugc2hvdWxkIGNob3AgaXQgb2ZmICh0eXBpY2FsbHkgZnJvbSBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHZhbHVlcyBsaWtlIGEgdGV4dFNoYWRvdzpcIjJweCAycHggMnB4IGJsdWUsIDVweCA1cHggNXB4IHJnYigyNTUsMCwwKVwiIC0gaW4gdGhpcyBleGFtcGxlIFwiYmx1ZSxcIiBoYXMgYSB0cmFpbGluZyBjb21tYS4gV2UgY291bGQgc3RyaXAgaXQgb3V0IGluc2lkZSBwYXJzZUNvbXBsZXgoKSBidXQgd2UnZCBuZWVkIHRvIGRvIGl0IHRvIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgcGx1cyBpdCB3b3VsZG4ndCBwcm92aWRlIHByb3RlY3Rpb24gZnJvbSBvdGhlciBwb3RlbnRpYWwgc2NlbmFyaW9zIGxpa2UgaWYgdGhlIHVzZXIgcGFzc2VzIGluIGEgc2ltaWxhciB2YWx1ZS5cblx0XHRcdFx0XHRcdHYgPSB2LnN1YnN0cigwLCB2Lmxlbmd0aCAtIDEpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoX2NvbG9yTG9va3VwW3ZdKSB7XG5cdFx0XHRcdFx0XHRhID0gX2NvbG9yTG9va3VwW3ZdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodi5jaGFyQXQoMCkgPT09IFwiI1wiKSB7XG5cdFx0XHRcdFx0XHRpZiAodi5sZW5ndGggPT09IDQpIHsgLy9mb3Igc2hvcnRoYW5kIGxpa2UgIzlGMFxuXHRcdFx0XHRcdFx0XHRyID0gdi5jaGFyQXQoMSk7XG5cdFx0XHRcdFx0XHRcdGcgPSB2LmNoYXJBdCgyKTtcblx0XHRcdFx0XHRcdFx0YiA9IHYuY2hhckF0KDMpO1xuXHRcdFx0XHRcdFx0XHR2ID0gXCIjXCIgKyByICsgciArIGcgKyBnICsgYiArIGI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR2ID0gcGFyc2VJbnQodi5zdWJzdHIoMSksIDE2KTtcblx0XHRcdFx0XHRcdGEgPSBbdiA+PiAxNiwgKHYgPj4gOCkgJiAyNTUsIHYgJiAyNTVdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodi5zdWJzdHIoMCwgMykgPT09IFwiaHNsXCIpIHtcblx0XHRcdFx0XHRcdGEgPSB3YXNIU0wgPSB2Lm1hdGNoKF9udW1FeHApO1xuXHRcdFx0XHRcdFx0aWYgKCF0b0hTTCkge1xuXHRcdFx0XHRcdFx0XHRoID0gKE51bWJlcihhWzBdKSAlIDM2MCkgLyAzNjA7XG5cdFx0XHRcdFx0XHRcdHMgPSBOdW1iZXIoYVsxXSkgLyAxMDA7XG5cdFx0XHRcdFx0XHRcdGwgPSBOdW1iZXIoYVsyXSkgLyAxMDA7XG5cdFx0XHRcdFx0XHRcdGcgPSAobCA8PSAwLjUpID8gbCAqIChzICsgMSkgOiBsICsgcyAtIGwgKiBzO1xuXHRcdFx0XHRcdFx0XHRyID0gbCAqIDIgLSBnO1xuXHRcdFx0XHRcdFx0XHRpZiAoYS5sZW5ndGggPiAzKSB7XG5cdFx0XHRcdFx0XHRcdFx0YVszXSA9IE51bWJlcih2WzNdKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRhWzBdID0gX2h1ZShoICsgMSAvIDMsIHIsIGcpO1xuXHRcdFx0XHRcdFx0XHRhWzFdID0gX2h1ZShoLCByLCBnKTtcblx0XHRcdFx0XHRcdFx0YVsyXSA9IF9odWUoaCAtIDEgLyAzLCByLCBnKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodi5pbmRleE9mKFwiPVwiKSAhPT0gLTEpIHsgLy9pZiByZWxhdGl2ZSB2YWx1ZXMgYXJlIGZvdW5kLCBqdXN0IHJldHVybiB0aGUgcmF3IHN0cmluZ3Mgd2l0aCB0aGUgcmVsYXRpdmUgcHJlZml4ZXMgaW4gcGxhY2UuXG5cdFx0XHRcdFx0XHRcdHJldHVybiB2Lm1hdGNoKF9yZWxOdW1FeHApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRhID0gdi5tYXRjaChfbnVtRXhwKSB8fCBfY29sb3JMb29rdXAudHJhbnNwYXJlbnQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGFbMF0gPSBOdW1iZXIoYVswXSk7XG5cdFx0XHRcdFx0YVsxXSA9IE51bWJlcihhWzFdKTtcblx0XHRcdFx0XHRhWzJdID0gTnVtYmVyKGFbMl0pO1xuXHRcdFx0XHRcdGlmIChhLmxlbmd0aCA+IDMpIHtcblx0XHRcdFx0XHRcdGFbM10gPSBOdW1iZXIoYVszXSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0b0hTTCAmJiAhd2FzSFNMKSB7XG5cdFx0XHRcdFx0ciA9IGFbMF0gLyAyNTU7XG5cdFx0XHRcdFx0ZyA9IGFbMV0gLyAyNTU7XG5cdFx0XHRcdFx0YiA9IGFbMl0gLyAyNTU7XG5cdFx0XHRcdFx0bWF4ID0gTWF0aC5tYXgociwgZywgYik7XG5cdFx0XHRcdFx0bWluID0gTWF0aC5taW4ociwgZywgYik7XG5cdFx0XHRcdFx0bCA9IChtYXggKyBtaW4pIC8gMjtcblx0XHRcdFx0XHRpZiAobWF4ID09PSBtaW4pIHtcblx0XHRcdFx0XHRcdGggPSBzID0gMDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZCA9IG1heCAtIG1pbjtcblx0XHRcdFx0XHRcdHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcblx0XHRcdFx0XHRcdGggPSAobWF4ID09PSByKSA/IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApIDogKG1heCA9PT0gZykgPyAoYiAtIHIpIC8gZCArIDIgOiAociAtIGcpIC8gZCArIDQ7XG5cdFx0XHRcdFx0XHRoICo9IDYwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRhWzBdID0gKGggKyAwLjUpIHwgMDtcblx0XHRcdFx0XHRhWzFdID0gKHMgKiAxMDAgKyAwLjUpIHwgMDtcblx0XHRcdFx0XHRhWzJdID0gKGwgKiAxMDAgKyAwLjUpIHwgMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdH0sXG5cdFx0XHRfZm9ybWF0Q29sb3JzID0gZnVuY3Rpb24ocywgdG9IU0wpIHtcblx0XHRcdFx0dmFyIGNvbG9ycyA9IHMubWF0Y2goX2NvbG9yRXhwKSB8fCBbXSxcblx0XHRcdFx0XHRjaGFySW5kZXggPSAwLFxuXHRcdFx0XHRcdHBhcnNlZCA9IGNvbG9ycy5sZW5ndGggPyBcIlwiIDogcyxcblx0XHRcdFx0XHRpLCBjb2xvciwgdGVtcDtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGNvbG9yID0gY29sb3JzW2ldO1xuXHRcdFx0XHRcdHRlbXAgPSBzLnN1YnN0cihjaGFySW5kZXgsIHMuaW5kZXhPZihjb2xvciwgY2hhckluZGV4KS1jaGFySW5kZXgpO1xuXHRcdFx0XHRcdGNoYXJJbmRleCArPSB0ZW1wLmxlbmd0aCArIGNvbG9yLmxlbmd0aDtcblx0XHRcdFx0XHRjb2xvciA9IF9wYXJzZUNvbG9yKGNvbG9yLCB0b0hTTCk7XG5cdFx0XHRcdFx0aWYgKGNvbG9yLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRcdFx0Y29sb3IucHVzaCgxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cGFyc2VkICs9IHRlbXAgKyAodG9IU0wgPyBcImhzbGEoXCIgKyBjb2xvclswXSArIFwiLFwiICsgY29sb3JbMV0gKyBcIiUsXCIgKyBjb2xvclsyXSArIFwiJSxcIiArIGNvbG9yWzNdIDogXCJyZ2JhKFwiICsgY29sb3Iuam9pbihcIixcIikpICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHBhcnNlZCArIHMuc3Vic3RyKGNoYXJJbmRleCk7XG5cdFx0XHR9LFxuXHRcdFx0X2NvbG9yRXhwID0gXCIoPzpcXFxcYig/Oig/OnJnYnxyZ2JhfGhzbHxoc2xhKVxcXFwoLis/XFxcXCkpfFxcXFxCIyg/OlswLTlhLWZdezN9KXsxLDJ9XFxcXGJcIjsgLy93ZSdsbCBkeW5hbWljYWxseSBidWlsZCB0aGlzIFJlZ3VsYXIgRXhwcmVzc2lvbiB0byBjb25zZXJ2ZSBmaWxlIHNpemUuIEFmdGVyIGJ1aWxkaW5nIGl0LCBpdCB3aWxsIGJlIGFibGUgdG8gZmluZCByZ2IoKSwgcmdiYSgpLCAjIChoZXhhZGVjaW1hbCksIGFuZCBuYW1lZCBjb2xvciB2YWx1ZXMgbGlrZSByZWQsIGJsdWUsIHB1cnBsZSwgZXRjLlxuXG5cdFx0Zm9yIChwIGluIF9jb2xvckxvb2t1cCkge1xuXHRcdFx0X2NvbG9yRXhwICs9IFwifFwiICsgcCArIFwiXFxcXGJcIjtcblx0XHR9XG5cdFx0X2NvbG9yRXhwID0gbmV3IFJlZ0V4cChfY29sb3JFeHArXCIpXCIsIFwiZ2lcIik7XG5cblx0XHRDU1NQbHVnaW4uY29sb3JTdHJpbmdGaWx0ZXIgPSBmdW5jdGlvbihhKSB7XG5cdFx0XHR2YXIgY29tYmluZWQgPSBhWzBdICsgYVsxXSxcblx0XHRcdFx0dG9IU0w7XG5cdFx0XHRpZiAoX2NvbG9yRXhwLnRlc3QoY29tYmluZWQpKSB7XG5cdFx0XHRcdHRvSFNMID0gKGNvbWJpbmVkLmluZGV4T2YoXCJoc2woXCIpICE9PSAtMSB8fCBjb21iaW5lZC5pbmRleE9mKFwiaHNsYShcIikgIT09IC0xKTtcblx0XHRcdFx0YVswXSA9IF9mb3JtYXRDb2xvcnMoYVswXSwgdG9IU0wpO1xuXHRcdFx0XHRhWzFdID0gX2Zvcm1hdENvbG9ycyhhWzFdLCB0b0hTTCk7XG5cdFx0XHR9XG5cdFx0XHRfY29sb3JFeHAubGFzdEluZGV4ID0gMDtcblx0XHR9O1xuXG5cdFx0aWYgKCFUd2VlbkxpdGUuZGVmYXVsdFN0cmluZ0ZpbHRlcikge1xuXHRcdFx0VHdlZW5MaXRlLmRlZmF1bHRTdHJpbmdGaWx0ZXIgPSBDU1NQbHVnaW4uY29sb3JTdHJpbmdGaWx0ZXI7XG5cdFx0fVxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGUgUmV0dXJucyBhIGZvcm1hdHRlciBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgdGFraW5nIGEgc3RyaW5nIChvciBudW1iZXIgaW4gc29tZSBjYXNlcykgYW5kIHJldHVybmluZyBhIGNvbnNpc3RlbnRseSBmb3JtYXR0ZWQgb25lIGluIHRlcm1zIG9mIGRlbGltaXRlcnMsIHF1YW50aXR5IG9mIHZhbHVlcywgZXRjLiBGb3IgZXhhbXBsZSwgd2UgbWF5IGdldCBib3hTaGFkb3cgdmFsdWVzIGRlZmluZWQgYXMgXCIwcHggcmVkXCIgb3IgXCIwcHggMHB4IDEwcHggcmdiKDI1NSwwLDApXCIgb3IgXCIwcHggMHB4IDIwcHggMjBweCAjRjAwXCIgYW5kIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXQgd2hhdCB3ZSBnZXQgYmFjayBpcyBkZXNjcmliZWQgd2l0aCA0IG51bWJlcnMgYW5kIGEgY29sb3IuIFRoaXMgYWxsb3dzIHVzIHRvIGZlZWQgaXQgaW50byB0aGUgX3BhcnNlQ29tcGxleCgpIG1ldGhvZCBhbmQgc3BsaXQgdGhlIHZhbHVlcyB1cCBhcHByb3ByaWF0ZWx5LiBUaGUgbmVhdCB0aGluZyBhYm91dCB0aGlzIF9nZXRGb3JtYXR0ZXIoKSBmdW5jdGlvbiBpcyB0aGF0IHRoZSBkZmx0IGRlZmluZXMgYSBwYXR0ZXJuIGFzIHdlbGwgYXMgYSBkZWZhdWx0LCBzbyBmb3IgZXhhbXBsZSwgX2dldEZvcm1hdHRlcihcIjBweCAwcHggMHB4IDBweCAjNzc3XCIsIHRydWUpIG5vdCBvbmx5IHNldHMgdGhlIGRlZmF1bHQgYXMgMHB4IGZvciBhbGwgZGlzdGFuY2VzIGFuZCAjNzc3IGZvciB0aGUgY29sb3IsIGJ1dCBhbHNvIHNldHMgdGhlIHBhdHRlcm4gc3VjaCB0aGF0IDQgbnVtYmVycyBhbmQgYSBjb2xvciB3aWxsIGFsd2F5cyBnZXQgcmV0dXJuZWQuXG5cdFx0ICogQHBhcmFtIHshc3RyaW5nfSBkZmx0IFRoZSBkZWZhdWx0IHZhbHVlIGFuZCBwYXR0ZXJuIHRvIGZvbGxvdy4gU28gXCIwcHggMHB4IDBweCAwcHggIzc3N1wiIHdpbGwgZW5zdXJlIHRoYXQgNCBudW1iZXJzIGFuZCBhIGNvbG9yIHdpbGwgYWx3YXlzIGdldCByZXR1cm5lZC5cblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBjbHIgSWYgdHJ1ZSwgdGhlIHZhbHVlcyBzaG91bGQgYmUgc2VhcmNoZWQgZm9yIGNvbG9yLXJlbGF0ZWQgZGF0YS4gRm9yIGV4YW1wbGUsIGJveFNoYWRvdyB2YWx1ZXMgdHlwaWNhbGx5IGNvbnRhaW4gYSBjb2xvciB3aGVyZWFzIGJvcmRlclJhZGl1cyBkb24ndC5cblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBjb2xsYXBzaWJsZSBJZiB0cnVlLCB0aGUgdmFsdWUgaXMgYSB0b3AvbGVmdC9yaWdodC9ib3R0b20gc3R5bGUgb25lIHRoYXQgYWN0cyBsaWtlIG1hcmdpbiBvciBwYWRkaW5nLCB3aGVyZSBpZiBvbmx5IG9uZSB2YWx1ZSBpcyByZWNlaXZlZCwgaXQncyB1c2VkIGZvciBhbGwgNDsgaWYgMiBhcmUgcmVjZWl2ZWQsIHRoZSBmaXJzdCBpcyBkdXBsaWNhdGVkIGZvciAzcmQgKGJvdHRvbSkgYW5kIHRoZSAybmQgaXMgZHVwbGljYXRlZCBmb3IgdGhlIDR0aCBzcG90IChsZWZ0KSwgZXRjLlxuXHRcdCAqIEByZXR1cm4ge0Z1bmN0aW9ufSBmb3JtYXR0ZXIgZnVuY3Rpb25cblx0XHQgKi9cblx0XHR2YXIgX2dldEZvcm1hdHRlciA9IGZ1bmN0aW9uKGRmbHQsIGNsciwgY29sbGFwc2libGUsIG11bHRpKSB7XG5cdFx0XHRcdGlmIChkZmx0ID09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24odikge3JldHVybiB2O307XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGRDb2xvciA9IGNsciA/IChkZmx0Lm1hdGNoKF9jb2xvckV4cCkgfHwgW1wiXCJdKVswXSA6IFwiXCIsXG5cdFx0XHRcdFx0ZFZhbHMgPSBkZmx0LnNwbGl0KGRDb2xvcikuam9pbihcIlwiKS5tYXRjaChfdmFsdWVzRXhwKSB8fCBbXSxcblx0XHRcdFx0XHRwZnggPSBkZmx0LnN1YnN0cigwLCBkZmx0LmluZGV4T2YoZFZhbHNbMF0pKSxcblx0XHRcdFx0XHRzZnggPSAoZGZsdC5jaGFyQXQoZGZsdC5sZW5ndGggLSAxKSA9PT0gXCIpXCIpID8gXCIpXCIgOiBcIlwiLFxuXHRcdFx0XHRcdGRlbGltID0gKGRmbHQuaW5kZXhPZihcIiBcIikgIT09IC0xKSA/IFwiIFwiIDogXCIsXCIsXG5cdFx0XHRcdFx0bnVtVmFscyA9IGRWYWxzLmxlbmd0aCxcblx0XHRcdFx0XHRkU2Z4ID0gKG51bVZhbHMgPiAwKSA/IGRWYWxzWzBdLnJlcGxhY2UoX251bUV4cCwgXCJcIikgOiBcIlwiLFxuXHRcdFx0XHRcdGZvcm1hdHRlcjtcblx0XHRcdFx0aWYgKCFudW1WYWxzKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKHYpIHtyZXR1cm4gdjt9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjbHIpIHtcblx0XHRcdFx0XHRmb3JtYXR0ZXIgPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdFx0XHR2YXIgY29sb3IsIHZhbHMsIGksIGE7XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mKHYpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHRcdHYgKz0gZFNmeDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAobXVsdGkgJiYgX2NvbW1hc091dHNpZGVQYXJlbkV4cC50ZXN0KHYpKSB7XG5cdFx0XHRcdFx0XHRcdGEgPSB2LnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCJ8XCIpLnNwbGl0KFwifFwiKTtcblx0XHRcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRhW2ldID0gZm9ybWF0dGVyKGFbaV0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiBhLmpvaW4oXCIsXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y29sb3IgPSAodi5tYXRjaChfY29sb3JFeHApIHx8IFtkQ29sb3JdKVswXTtcblx0XHRcdFx0XHRcdHZhbHMgPSB2LnNwbGl0KGNvbG9yKS5qb2luKFwiXCIpLm1hdGNoKF92YWx1ZXNFeHApIHx8IFtdO1xuXHRcdFx0XHRcdFx0aSA9IHZhbHMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0aWYgKG51bVZhbHMgPiBpLS0pIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCsraSA8IG51bVZhbHMpIHtcblx0XHRcdFx0XHRcdFx0XHR2YWxzW2ldID0gY29sbGFwc2libGUgPyB2YWxzWygoKGkgLSAxKSAvIDIpIHwgMCldIDogZFZhbHNbaV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBwZnggKyB2YWxzLmpvaW4oZGVsaW0pICsgZGVsaW0gKyBjb2xvciArIHNmeCArICh2LmluZGV4T2YoXCJpbnNldFwiKSAhPT0gLTEgPyBcIiBpbnNldFwiIDogXCJcIik7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRyZXR1cm4gZm9ybWF0dGVyO1xuXG5cdFx0XHRcdH1cblx0XHRcdFx0Zm9ybWF0dGVyID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHRcdHZhciB2YWxzLCBhLCBpO1xuXHRcdFx0XHRcdGlmICh0eXBlb2YodikgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRcdHYgKz0gZFNmeDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKG11bHRpICYmIF9jb21tYXNPdXRzaWRlUGFyZW5FeHAudGVzdCh2KSkge1xuXHRcdFx0XHRcdFx0YSA9IHYucmVwbGFjZShfY29tbWFzT3V0c2lkZVBhcmVuRXhwLCBcInxcIikuc3BsaXQoXCJ8XCIpO1xuXHRcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0YVtpXSA9IGZvcm1hdHRlcihhW2ldKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBhLmpvaW4oXCIsXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2YWxzID0gdi5tYXRjaChfdmFsdWVzRXhwKSB8fCBbXTtcblx0XHRcdFx0XHRpID0gdmFscy5sZW5ndGg7XG5cdFx0XHRcdFx0aWYgKG51bVZhbHMgPiBpLS0pIHtcblx0XHRcdFx0XHRcdHdoaWxlICgrK2kgPCBudW1WYWxzKSB7XG5cdFx0XHRcdFx0XHRcdHZhbHNbaV0gPSBjb2xsYXBzaWJsZSA/IHZhbHNbKCgoaSAtIDEpIC8gMikgfCAwKV0gOiBkVmFsc1tpXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHBmeCArIHZhbHMuam9pbihkZWxpbSkgKyBzZng7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHJldHVybiBmb3JtYXR0ZXI7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIHJldHVybnMgYSBmb3JtYXR0ZXIgZnVuY3Rpb24gdGhhdCdzIHVzZWQgZm9yIGVkZ2UtcmVsYXRlZCB2YWx1ZXMgbGlrZSBtYXJnaW5Ub3AsIG1hcmdpbkxlZnQsIHBhZGRpbmdCb3R0b20sIHBhZGRpbmdSaWdodCwgZXRjLiBKdXN0IHBhc3MgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyByZWxhdGVkIHRvIHRoZSBlZGdlcy5cblx0XHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gcHJvcHMgYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcyBpbiBvcmRlciBmcm9tIHRvcCB0byBsZWZ0LCBsaWtlIFwibWFyZ2luVG9wLG1hcmdpblJpZ2h0LG1hcmdpbkJvdHRvbSxtYXJnaW5MZWZ0XCJcblx0XHRcdCAqIEByZXR1cm4ge0Z1bmN0aW9ufSBhIGZvcm1hdHRlciBmdW5jdGlvblxuXHRcdFx0ICovXG5cdFx0XHRfZ2V0RWRnZVBhcnNlciA9IGZ1bmN0aW9uKHByb3BzKSB7XG5cdFx0XHRcdHByb3BzID0gcHJvcHMuc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycykge1xuXHRcdFx0XHRcdHZhciBhID0gKGUgKyBcIlwiKS5zcGxpdChcIiBcIiksXG5cdFx0XHRcdFx0XHRpO1xuXHRcdFx0XHRcdHZhcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgNDsgaSsrKSB7XG5cdFx0XHRcdFx0XHR2YXJzW3Byb3BzW2ldXSA9IGFbaV0gPSBhW2ldIHx8IGFbKCgoaSAtIDEpIC8gMikgPj4gMCldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gY3NzcC5wYXJzZSh0LCB2YXJzLCBwdCwgcGx1Z2luKTtcblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEBwcml2YXRlIHVzZWQgd2hlbiBvdGhlciBwbHVnaW5zIG11c3QgdHdlZW4gdmFsdWVzIGZpcnN0LCBsaWtlIEJlemllclBsdWdpbiBvciBUaHJvd1Byb3BzUGx1Z2luLCBldGMuIFRoYXQgcGx1Z2luJ3Mgc2V0UmF0aW8oKSBnZXRzIGNhbGxlZCBmaXJzdCBzbyB0aGF0IHRoZSB2YWx1ZXMgYXJlIHVwZGF0ZWQsIGFuZCB0aGVuIHdlIGxvb3AgdGhyb3VnaCB0aGUgTWluaVByb3BUd2VlbnMgd2hpY2ggaGFuZGxlIGNvcHlpbmcgdGhlIHZhbHVlcyBpbnRvIHRoZWlyIGFwcHJvcHJpYXRlIHNsb3RzIHNvIHRoYXQgdGhleSBjYW4gdGhlbiBiZSBhcHBsaWVkIGNvcnJlY3RseSBpbiB0aGUgbWFpbiBDU1NQbHVnaW4gc2V0UmF0aW8oKSBtZXRob2QuIFJlbWVtYmVyLCB3ZSB0eXBpY2FsbHkgY3JlYXRlIGEgcHJveHkgb2JqZWN0IHRoYXQgaGFzIGEgYnVuY2ggb2YgdW5pcXVlbHktbmFtZWQgcHJvcGVydGllcyB0aGF0IHdlIGZlZWQgdG8gdGhlIHN1Yi1wbHVnaW4gYW5kIGl0IGRvZXMgaXRzIG1hZ2ljIG5vcm1hbGx5LCBhbmQgdGhlbiB3ZSBtdXN0IGludGVycHJldCB0aG9zZSB2YWx1ZXMgYW5kIGFwcGx5IHRoZW0gdG8gdGhlIGNzcyBiZWNhdXNlIG9mdGVuIG51bWJlcnMgbXVzdCBnZXQgY29tYmluZWQvY29uY2F0ZW5hdGVkLCBzdWZmaXhlcyBhZGRlZCwgZXRjLiB0byB3b3JrIHdpdGggY3NzLCBsaWtlIGJveFNoYWRvdyBjb3VsZCBoYXZlIDQgdmFsdWVzIHBsdXMgYSBjb2xvci5cblx0XHRcdF9zZXRQbHVnaW5SYXRpbyA9IF9pbnRlcm5hbHMuX3NldFBsdWdpblJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXRSYXRpbyh2KTtcblx0XHRcdFx0dmFyIGQgPSB0aGlzLmRhdGEsXG5cdFx0XHRcdFx0cHJveHkgPSBkLnByb3h5LFxuXHRcdFx0XHRcdG1wdCA9IGQuZmlyc3RNUFQsXG5cdFx0XHRcdFx0bWluID0gMC4wMDAwMDEsXG5cdFx0XHRcdFx0dmFsLCBwdCwgaSwgc3RyLCBwO1xuXHRcdFx0XHR3aGlsZSAobXB0KSB7XG5cdFx0XHRcdFx0dmFsID0gcHJveHlbbXB0LnZdO1xuXHRcdFx0XHRcdGlmIChtcHQucikge1xuXHRcdFx0XHRcdFx0dmFsID0gTWF0aC5yb3VuZCh2YWwpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodmFsIDwgbWluICYmIHZhbCA+IC1taW4pIHtcblx0XHRcdFx0XHRcdHZhbCA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1wdC50W21wdC5wXSA9IHZhbDtcblx0XHRcdFx0XHRtcHQgPSBtcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGQuYXV0b1JvdGF0ZSkge1xuXHRcdFx0XHRcdGQuYXV0b1JvdGF0ZS5yb3RhdGlvbiA9IGQubW9kID8gZC5tb2QocHJveHkucm90YXRpb24sIHRoaXMudCkgOiBwcm94eS5yb3RhdGlvbjsgLy9zcGVjaWFsIGNhc2UgZm9yIE1vZGlmeVBsdWdpbiB0byBob29rIGludG8gYW4gYXV0by1yb3RhdGluZyBiZXppZXJcblx0XHRcdFx0fVxuXHRcdFx0XHQvL2F0IHRoZSBlbmQsIHdlIG11c3Qgc2V0IHRoZSBDU1NQcm9wVHdlZW4ncyBcImVcIiAoZW5kKSB2YWx1ZSBkeW5hbWljYWxseSBoZXJlIGJlY2F1c2UgdGhhdCdzIHdoYXQgaXMgdXNlZCBpbiB0aGUgZmluYWwgc2V0UmF0aW8oKSBtZXRob2QuIFNhbWUgZm9yIFwiYlwiIGF0IHRoZSBiZWdpbm5pbmcuXG5cdFx0XHRcdGlmICh2ID09PSAxIHx8IHYgPT09IDApIHtcblx0XHRcdFx0XHRtcHQgPSBkLmZpcnN0TVBUO1xuXHRcdFx0XHRcdHAgPSAodiA9PT0gMSkgPyBcImVcIiA6IFwiYlwiO1xuXHRcdFx0XHRcdHdoaWxlIChtcHQpIHtcblx0XHRcdFx0XHRcdHB0ID0gbXB0LnQ7XG5cdFx0XHRcdFx0XHRpZiAoIXB0LnR5cGUpIHtcblx0XHRcdFx0XHRcdFx0cHRbcF0gPSBwdC5zICsgcHQueHMwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChwdC50eXBlID09PSAxKSB7XG5cdFx0XHRcdFx0XHRcdHN0ciA9IHB0LnhzMCArIHB0LnMgKyBwdC54czE7XG5cdFx0XHRcdFx0XHRcdGZvciAoaSA9IDE7IGkgPCBwdC5sOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHRzdHIgKz0gcHRbXCJ4blwiK2ldICsgcHRbXCJ4c1wiKyhpKzEpXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRwdFtwXSA9IHN0cjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1wdCA9IG1wdC5fbmV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogQHByaXZhdGUgQGNvbnN0cnVjdG9yIFVzZWQgYnkgYSBmZXcgU3BlY2lhbFByb3BzIHRvIGhvbGQgaW1wb3J0YW50IHZhbHVlcyBmb3IgcHJveGllcy4gRm9yIGV4YW1wbGUsIF9wYXJzZVRvUHJveHkoKSBjcmVhdGVzIGEgTWluaVByb3BUd2VlbiBpbnN0YW5jZSBmb3IgZWFjaCBwcm9wZXJ0eSB0aGF0IG11c3QgZ2V0IHR3ZWVuZWQgb24gdGhlIHByb3h5LCBhbmQgd2UgcmVjb3JkIHRoZSBvcmlnaW5hbCBwcm9wZXJ0eSBuYW1lIGFzIHdlbGwgYXMgdGhlIHVuaXF1ZSBvbmUgd2UgY3JlYXRlIGZvciB0aGUgcHJveHksIHBsdXMgd2hldGhlciBvciBub3QgdGhlIHZhbHVlIG5lZWRzIHRvIGJlIHJvdW5kZWQgcGx1cyB0aGUgb3JpZ2luYWwgdmFsdWUuXG5cdFx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgdGFyZ2V0IG9iamVjdCB3aG9zZSBwcm9wZXJ0eSB3ZSdyZSB0d2VlbmluZyAob2Z0ZW4gYSBDU1NQcm9wVHdlZW4pXG5cdFx0XHQgKiBAcGFyYW0geyFzdHJpbmd9IHAgcHJvcGVydHkgbmFtZVxuXHRcdFx0ICogQHBhcmFtIHsobnVtYmVyfHN0cmluZ3xvYmplY3QpfSB2IHZhbHVlXG5cdFx0XHQgKiBAcGFyYW0ge01pbmlQcm9wVHdlZW49fSBuZXh0IG5leHQgTWluaVByb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Rcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHIgaWYgdHJ1ZSwgdGhlIHR3ZWVuZWQgdmFsdWUgc2hvdWxkIGJlIHJvdW5kZWQgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuXHRcdFx0ICovXG5cdFx0XHRNaW5pUHJvcFR3ZWVuID0gZnVuY3Rpb24odCwgcCwgdiwgbmV4dCwgcikge1xuXHRcdFx0XHR0aGlzLnQgPSB0O1xuXHRcdFx0XHR0aGlzLnAgPSBwO1xuXHRcdFx0XHR0aGlzLnYgPSB2O1xuXHRcdFx0XHR0aGlzLnIgPSByO1xuXHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdG5leHQuX3ByZXYgPSB0aGlzO1xuXHRcdFx0XHRcdHRoaXMuX25leHQgPSBuZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIEBwcml2YXRlIE1vc3Qgb3RoZXIgcGx1Z2lucyAobGlrZSBCZXppZXJQbHVnaW4gYW5kIFRocm93UHJvcHNQbHVnaW4gYW5kIG90aGVycykgY2FuIG9ubHkgdHdlZW4gbnVtZXJpYyB2YWx1ZXMsIGJ1dCBDU1NQbHVnaW4gbXVzdCBhY2NvbW1vZGF0ZSBzcGVjaWFsIHZhbHVlcyB0aGF0IGhhdmUgYSBidW5jaCBvZiBleHRyYSBkYXRhIChsaWtlIGEgc3VmZml4IG9yIHN0cmluZ3MgYmV0d2VlbiBudW1lcmljIHZhbHVlcywgZXRjLikuIEZvciBleGFtcGxlLCBib3hTaGFkb3cgaGFzIHZhbHVlcyBsaWtlIFwiMTBweCAxMHB4IDIwcHggMzBweCByZ2IoMjU1LDAsMClcIiB3aGljaCB3b3VsZCB1dHRlcmx5IGNvbmZ1c2Ugb3RoZXIgcGx1Z2lucy4gVGhpcyBtZXRob2QgYWxsb3dzIHVzIHRvIHNwbGl0IHRoYXQgZGF0YSBhcGFydCBhbmQgZ3JhYiBvbmx5IHRoZSBudW1lcmljIGRhdGEgYW5kIGF0dGFjaCBpdCB0byB1bmlxdWVseS1uYW1lZCBwcm9wZXJ0aWVzIG9mIGEgZ2VuZXJpYyBwcm94eSBvYmplY3QgKHt9KSBzbyB0aGF0IHdlIGNhbiBmZWVkIHRoYXQgdG8gdmlydHVhbGx5IGFueSBwbHVnaW4gdG8gaGF2ZSB0aGUgbnVtYmVycyB0d2VlbmVkLiBIb3dldmVyLCB3ZSBtdXN0IGFsc28ga2VlcCB0cmFjayBvZiB3aGljaCBwcm9wZXJ0aWVzIGZyb20gdGhlIHByb3h5IGdvIHdpdGggd2hpY2ggQ1NTUHJvcFR3ZWVuIHZhbHVlcyBhbmQgaW5zdGFuY2VzLiBTbyB3ZSBjcmVhdGUgYSBsaW5rZWQgbGlzdCBvZiBNaW5pUHJvcFR3ZWVucy4gRWFjaCBvbmUgcmVjb3JkcyBhIHRhcmdldCAodGhlIG9yaWdpbmFsIENTU1Byb3BUd2VlbiksIHByb3BlcnR5IChsaWtlIFwic1wiIG9yIFwieG4xXCIgb3IgXCJ4bjJcIikgdGhhdCB3ZSdyZSB0d2VlbmluZyBhbmQgdGhlIHVuaXF1ZSBwcm9wZXJ0eSBuYW1lIHRoYXQgd2FzIHVzZWQgZm9yIHRoZSBwcm94eSAobGlrZSBcImJveFNoYWRvd194bjFcIiBhbmQgXCJib3hTaGFkb3dfeG4yXCIpIGFuZCB3aGV0aGVyIG9yIG5vdCB0aGV5IG5lZWQgdG8gYmUgcm91bmRlZC4gVGhhdCB3YXksIGluIHRoZSBfc2V0UGx1Z2luUmF0aW8oKSBtZXRob2Qgd2UgY2FuIHNpbXBseSBjb3B5IHRoZSB2YWx1ZXMgb3ZlciBmcm9tIHRoZSBwcm94eSB0byB0aGUgQ1NTUHJvcFR3ZWVuIGluc3RhbmNlKHMpLiBUaGVuLCB3aGVuIHRoZSBtYWluIENTU1BsdWdpbiBzZXRSYXRpbygpIG1ldGhvZCBydW5zIGFuZCBhcHBsaWVzIHRoZSBDU1NQcm9wVHdlZW4gdmFsdWVzIGFjY29yZGluZ2x5LCB0aGV5J3JlIHVwZGF0ZWQgbmljZWx5LiBTbyB0aGUgZXh0ZXJuYWwgcGx1Z2luIHR3ZWVucyB0aGUgbnVtYmVycywgX3NldFBsdWdpblJhdGlvKCkgY29waWVzIHRoZW0gb3ZlciwgYW5kIHNldFJhdGlvKCkgYWN0cyBub3JtYWxseSwgYXBwbHlpbmcgY3NzLXNwZWNpZmljIHZhbHVlcyB0byB0aGUgZWxlbWVudC5cblx0XHRcdCAqIFRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IHRoYXQgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcblx0XHRcdCAqICAtIHByb3h5OiBhIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0YXJ0aW5nIHZhbHVlcyBmb3IgYWxsIHRoZSBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSB0d2VlbmVkIGJ5IHRoZSBleHRlcm5hbCBwbHVnaW4uICBUaGlzIGlzIHdoYXQgd2UgZmVlZCB0byB0aGUgZXh0ZXJuYWwgX29uSW5pdFR3ZWVuKCkgYXMgdGhlIHRhcmdldFxuXHRcdFx0ICogIC0gZW5kOiBhIGdlbmVyaWMgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGVuZGluZyB2YWx1ZXMgZm9yIGFsbCB0aGUgcHJvcGVydGllcyB0aGF0IHdpbGwgYmUgdHdlZW5lZCBieSB0aGUgZXh0ZXJuYWwgcGx1Z2luLiBUaGlzIGlzIHdoYXQgd2UgZmVlZCB0byB0aGUgZXh0ZXJuYWwgcGx1Z2luJ3MgX29uSW5pdFR3ZWVuKCkgYXMgdGhlIGRlc3RpbmF0aW9uIHZhbHVlc1xuXHRcdFx0ICogIC0gZmlyc3RNUFQ6IHRoZSBmaXJzdCBNaW5pUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdFxuXHRcdFx0ICogIC0gcHQ6IHRoZSBmaXJzdCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0IHRoYXQgd2FzIGNyZWF0ZWQgd2hlbiBwYXJzaW5nLiBJZiBzaGFsbG93IGlzIHRydWUsIHRoaXMgbGlua2VkIGxpc3Qgd2lsbCBOT1QgYXR0YWNoIHRvIHRoZSBvbmUgcGFzc2VkIGludG8gdGhlIF9wYXJzZVRvUHJveHkoKSBhcyB0aGUgXCJwdFwiICg0dGgpIHBhcmFtZXRlci5cblx0XHRcdCAqIEBwYXJhbSB7IU9iamVjdH0gdCB0YXJnZXQgb2JqZWN0IHRvIGJlIHR3ZWVuZWRcblx0XHRcdCAqIEBwYXJhbSB7IShPYmplY3R8c3RyaW5nKX0gdmFycyB0aGUgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGluZm9ybWF0aW9uIGFib3V0IHRoZSB0d2VlbmluZyB2YWx1ZXMgKHR5cGljYWxseSB0aGUgZW5kL2Rlc3RpbmF0aW9uIHZhbHVlcykgdGhhdCBzaG91bGQgYmUgcGFyc2VkXG5cdFx0XHQgKiBAcGFyYW0geyFDU1NQbHVnaW59IGNzc3AgVGhlIENTU1BsdWdpbiBpbnN0YW5jZVxuXHRcdFx0ICogQHBhcmFtIHtDU1NQcm9wVHdlZW49fSBwdCB0aGUgbmV4dCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0XG5cdFx0XHQgKiBAcGFyYW0ge1R3ZWVuUGx1Z2luPX0gcGx1Z2luIHRoZSBleHRlcm5hbCBUd2VlblBsdWdpbiBpbnN0YW5jZSB0aGF0IHdpbGwgYmUgaGFuZGxpbmcgdHdlZW5pbmcgdGhlIG51bWVyaWMgdmFsdWVzXG5cdFx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBzaGFsbG93IGlmIHRydWUsIHRoZSByZXN1bHRpbmcgbGlua2VkIGxpc3QgZnJvbSB0aGUgcGFyc2Ugd2lsbCBOT1QgYmUgYXR0YWNoZWQgdG8gdGhlIENTU1Byb3BUd2VlbiB0aGF0IHdhcyBwYXNzZWQgaW4gYXMgdGhlIFwicHRcIiAoNHRoKSBwYXJhbWV0ZXIuXG5cdFx0XHQgKiBAcmV0dXJuIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczogcHJveHksIGVuZCwgZmlyc3RNUFQsIGFuZCBwdCAoc2VlIGFib3ZlIGZvciBkZXNjcmlwdGlvbnMpXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZVRvUHJveHkgPSBfaW50ZXJuYWxzLl9wYXJzZVRvUHJveHkgPSBmdW5jdGlvbih0LCB2YXJzLCBjc3NwLCBwdCwgcGx1Z2luLCBzaGFsbG93KSB7XG5cdFx0XHRcdHZhciBicHQgPSBwdCxcblx0XHRcdFx0XHRzdGFydCA9IHt9LFxuXHRcdFx0XHRcdGVuZCA9IHt9LFxuXHRcdFx0XHRcdHRyYW5zZm9ybSA9IGNzc3AuX3RyYW5zZm9ybSxcblx0XHRcdFx0XHRvbGRGb3JjZSA9IF9mb3JjZVBULFxuXHRcdFx0XHRcdGksIHAsIHhwLCBtcHQsIGZpcnN0UFQ7XG5cdFx0XHRcdGNzc3AuX3RyYW5zZm9ybSA9IG51bGw7XG5cdFx0XHRcdF9mb3JjZVBUID0gdmFycztcblx0XHRcdFx0cHQgPSBmaXJzdFBUID0gY3NzcC5wYXJzZSh0LCB2YXJzLCBwdCwgcGx1Z2luKTtcblx0XHRcdFx0X2ZvcmNlUFQgPSBvbGRGb3JjZTtcblx0XHRcdFx0Ly9icmVhayBvZmYgZnJvbSB0aGUgbGlua2VkIGxpc3Qgc28gdGhlIG5ldyBvbmVzIGFyZSBpc29sYXRlZC5cblx0XHRcdFx0aWYgKHNoYWxsb3cpIHtcblx0XHRcdFx0XHRjc3NwLl90cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG5cdFx0XHRcdFx0aWYgKGJwdCkge1xuXHRcdFx0XHRcdFx0YnB0Ll9wcmV2ID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmIChicHQuX3ByZXYpIHtcblx0XHRcdFx0XHRcdFx0YnB0Ll9wcmV2Ll9uZXh0ID0gbnVsbDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0d2hpbGUgKHB0ICYmIHB0ICE9PSBicHQpIHtcblx0XHRcdFx0XHRpZiAocHQudHlwZSA8PSAxKSB7XG5cdFx0XHRcdFx0XHRwID0gcHQucDtcblx0XHRcdFx0XHRcdGVuZFtwXSA9IHB0LnMgKyBwdC5jO1xuXHRcdFx0XHRcdFx0c3RhcnRbcF0gPSBwdC5zO1xuXHRcdFx0XHRcdFx0aWYgKCFzaGFsbG93KSB7XG5cdFx0XHRcdFx0XHRcdG1wdCA9IG5ldyBNaW5pUHJvcFR3ZWVuKHB0LCBcInNcIiwgcCwgbXB0LCBwdC5yKTtcblx0XHRcdFx0XHRcdFx0cHQuYyA9IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAocHQudHlwZSA9PT0gMSkge1xuXHRcdFx0XHRcdFx0XHRpID0gcHQubDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHR4cCA9IFwieG5cIiArIGk7XG5cdFx0XHRcdFx0XHRcdFx0cCA9IHB0LnAgKyBcIl9cIiArIHhwO1xuXHRcdFx0XHRcdFx0XHRcdGVuZFtwXSA9IHB0LmRhdGFbeHBdO1xuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0W3BdID0gcHRbeHBdO1xuXHRcdFx0XHRcdFx0XHRcdGlmICghc2hhbGxvdykge1xuXHRcdFx0XHRcdFx0XHRcdFx0bXB0ID0gbmV3IE1pbmlQcm9wVHdlZW4ocHQsIHhwLCBwLCBtcHQsIHB0LnJ4cFt4cF0pO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB7cHJveHk6c3RhcnQsIGVuZDplbmQsIGZpcnN0TVBUOm1wdCwgcHQ6Zmlyc3RQVH07XG5cdFx0XHR9LFxuXG5cblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBAY29uc3RydWN0b3IgRWFjaCBwcm9wZXJ0eSB0aGF0IGlzIHR3ZWVuZWQgaGFzIGF0IGxlYXN0IG9uZSBDU1NQcm9wVHdlZW4gYXNzb2NpYXRlZCB3aXRoIGl0LiBUaGVzZSBpbnN0YW5jZXMgc3RvcmUgaW1wb3J0YW50IGluZm9ybWF0aW9uIGxpa2UgdGhlIHRhcmdldCwgcHJvcGVydHksIHN0YXJ0aW5nIHZhbHVlLCBhbW91bnQgb2YgY2hhbmdlLCBldGMuIFRoZXkgY2FuIGFsc28gb3B0aW9uYWxseSBoYXZlIGEgbnVtYmVyIG9mIFwiZXh0cmFcIiBzdHJpbmdzIGFuZCBudW1lcmljIHZhbHVlcyBuYW1lZCB4czEsIHhuMSwgeHMyLCB4bjIsIHhzMywgeG4zLCBldGMuIHdoZXJlIFwic1wiIGluZGljYXRlcyBzdHJpbmcgYW5kIFwiblwiIGluZGljYXRlcyBudW1iZXIuIFRoZXNlIGNhbiBiZSBwaWVjZWQgdG9nZXRoZXIgaW4gYSBjb21wbGV4LXZhbHVlIHR3ZWVuICh0eXBlOjEpIHRoYXQgaGFzIGFsdGVybmF0aW5nIHR5cGVzIG9mIGRhdGEgbGlrZSBhIHN0cmluZywgbnVtYmVyLCBzdHJpbmcsIG51bWJlciwgZXRjLiBGb3IgZXhhbXBsZSwgYm94U2hhZG93IGNvdWxkIGJlIFwiNXB4IDVweCA4cHggcmdiKDEwMiwgMTAyLCA1MSlcIi4gSW4gdGhhdCB2YWx1ZSwgdGhlcmUgYXJlIDYgbnVtYmVycyB0aGF0IG1heSBuZWVkIHRvIHR3ZWVuIGFuZCB0aGVuIHBpZWNlZCBiYWNrIHRvZ2V0aGVyIGludG8gYSBzdHJpbmcgYWdhaW4gd2l0aCBzcGFjZXMsIHN1ZmZpeGVzLCBldGMuIHhzMCBpcyBzcGVjaWFsIGluIHRoYXQgaXQgc3RvcmVzIHRoZSBzdWZmaXggZm9yIHN0YW5kYXJkICh0eXBlOjApIHR3ZWVucywgLU9SLSB0aGUgZmlyc3Qgc3RyaW5nIChwcmVmaXgpIGluIGEgY29tcGxleC12YWx1ZSAodHlwZToxKSBDU1NQcm9wVHdlZW4gLU9SLSBpdCBjYW4gYmUgdGhlIG5vbi10d2VlbmluZyB2YWx1ZSBpbiBhIHR5cGU6LTEgQ1NTUHJvcFR3ZWVuLiBXZSBkbyB0aGlzIHRvIGNvbnNlcnZlIG1lbW9yeS5cblx0XHRcdCAqIENTU1Byb3BUd2VlbnMgaGF2ZSB0aGUgZm9sbG93aW5nIG9wdGlvbmFsIHByb3BlcnRpZXMgYXMgd2VsbCAobm90IGRlZmluZWQgdGhyb3VnaCB0aGUgY29uc3RydWN0b3IpOlxuXHRcdFx0ICogIC0gbDogTGVuZ3RoIGluIHRlcm1zIG9mIHRoZSBudW1iZXIgb2YgZXh0cmEgcHJvcGVydGllcyB0aGF0IHRoZSBDU1NQcm9wVHdlZW4gaGFzIChkZWZhdWx0OiAwKS4gRm9yIGV4YW1wbGUsIGZvciBhIGJveFNoYWRvdyB3ZSBtYXkgbmVlZCB0byB0d2VlbiA1IG51bWJlcnMgaW4gd2hpY2ggY2FzZSBsIHdvdWxkIGJlIDU7IEtlZXAgaW4gbWluZCB0aGF0IHRoZSBzdGFydC9lbmQgdmFsdWVzIGZvciB0aGUgZmlyc3QgbnVtYmVyIHRoYXQncyB0d2VlbmVkIGFyZSBhbHdheXMgc3RvcmVkIGluIHRoZSBzIGFuZCBjIHByb3BlcnRpZXMgdG8gY29uc2VydmUgbWVtb3J5LiBBbGwgYWRkaXRpb25hbCB2YWx1ZXMgdGhlcmVhZnRlciBhcmUgc3RvcmVkIGluIHhuMSwgeG4yLCBldGMuXG5cdFx0XHQgKiAgLSB4Zmlyc3Q6IFRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgc3ViLUNTU1Byb3BUd2VlbnMgdGhhdCBhcmUgdHdlZW5pbmcgcHJvcGVydGllcyBvZiB0aGlzIGluc3RhbmNlLiBGb3IgZXhhbXBsZSwgd2UgbWF5IHNwbGl0IHVwIGEgYm94U2hhZG93IHR3ZWVuIHNvIHRoYXQgdGhlcmUncyBhIG1haW4gQ1NTUHJvcFR3ZWVuIG9mIHR5cGU6MSB0aGF0IGhhcyB2YXJpb3VzIHhzKiBhbmQgeG4qIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggdGhlIGgtc2hhZG93LCB2LXNoYWRvdywgYmx1ciwgY29sb3IsIGV0Yy4gVGhlbiB3ZSBzcGF3biBhIENTU1Byb3BUd2VlbiBmb3IgZWFjaCBvZiB0aG9zZSB0aGF0IGhhcyBhIGhpZ2hlciBwcmlvcml0eSBhbmQgcnVucyBCRUZPUkUgdGhlIG1haW4gQ1NTUHJvcFR3ZWVuIHNvIHRoYXQgdGhlIHZhbHVlcyBhcmUgYWxsIHNldCBieSB0aGUgdGltZSBpdCBuZWVkcyB0byByZS1hc3NlbWJsZSB0aGVtLiBUaGUgeGZpcnN0IGdpdmVzIHVzIGFuIGVhc3kgd2F5IHRvIGlkZW50aWZ5IHRoZSBmaXJzdCBvbmUgaW4gdGhhdCBjaGFpbiB3aGljaCB0eXBpY2FsbHkgZW5kcyBhdCB0aGUgbWFpbiBvbmUgKGJlY2F1c2UgdGhleSdyZSBhbGwgcHJlcGVuZGUgdG8gdGhlIGxpbmtlZCBsaXN0KVxuXHRcdFx0ICogIC0gcGx1Z2luOiBUaGUgVHdlZW5QbHVnaW4gaW5zdGFuY2UgdGhhdCB3aWxsIGhhbmRsZSB0aGUgdHdlZW5pbmcgb2YgYW55IGNvbXBsZXggdmFsdWVzLiBGb3IgZXhhbXBsZSwgc29tZXRpbWVzIHdlIGRvbid0IHdhbnQgdG8gdXNlIG5vcm1hbCBzdWJ0d2VlbnMgKGxpa2UgeGZpcnN0IHJlZmVycyB0bykgdG8gdHdlZW4gdGhlIHZhbHVlcyAtIHdlIG1pZ2h0IHdhbnQgVGhyb3dQcm9wc1BsdWdpbiBvciBCZXppZXJQbHVnaW4gc29tZSBvdGhlciBwbHVnaW4gdG8gZG8gdGhlIGFjdHVhbCB0d2VlbmluZywgc28gd2UgY3JlYXRlIGEgcGx1Z2luIGluc3RhbmNlIGFuZCBzdG9yZSBhIHJlZmVyZW5jZSBoZXJlLiBXZSBuZWVkIHRoaXMgcmVmZXJlbmNlIHNvIHRoYXQgaWYgd2UgZ2V0IGEgcmVxdWVzdCB0byByb3VuZCB2YWx1ZXMgb3IgZGlzYWJsZSBhIHR3ZWVuLCB3ZSBjYW4gcGFzcyBhbG9uZyB0aGF0IHJlcXVlc3QuXG5cdFx0XHQgKiAgLSBkYXRhOiBBcmJpdHJhcnkgZGF0YSB0aGF0IG5lZWRzIHRvIGJlIHN0b3JlZCB3aXRoIHRoZSBDU1NQcm9wVHdlZW4uIFR5cGljYWxseSBpZiB3ZSdyZSBnb2luZyB0byBoYXZlIGEgcGx1Z2luIGhhbmRsZSB0aGUgdHdlZW5pbmcgb2YgYSBjb21wbGV4LXZhbHVlIHR3ZWVuLCB3ZSBjcmVhdGUgYSBnZW5lcmljIG9iamVjdCB0aGF0IHN0b3JlcyB0aGUgRU5EIHZhbHVlcyB0aGF0IHdlJ3JlIHR3ZWVuaW5nIHRvIGFuZCB0aGUgQ1NTUHJvcFR3ZWVuJ3MgeHMxLCB4czIsIGV0Yy4gaGF2ZSB0aGUgc3RhcnRpbmcgdmFsdWVzLiBXZSBzdG9yZSB0aGF0IG9iamVjdCBhcyBkYXRhLiBUaGF0IHdheSwgd2UgY2FuIHNpbXBseSBwYXNzIHRoYXQgb2JqZWN0IHRvIHRoZSBwbHVnaW4gYW5kIHVzZSB0aGUgQ1NTUHJvcFR3ZWVuIGFzIHRoZSB0YXJnZXQuXG5cdFx0XHQgKiAgLSBzZXRSYXRpbzogT25seSB1c2VkIGZvciB0eXBlOjIgdHdlZW5zIHRoYXQgcmVxdWlyZSBjdXN0b20gZnVuY3Rpb25hbGl0eS4gSW4gdGhpcyBjYXNlLCB3ZSBjYWxsIHRoZSBDU1NQcm9wVHdlZW4ncyBzZXRSYXRpbygpIG1ldGhvZCBhbmQgcGFzcyB0aGUgcmF0aW8gZWFjaCB0aW1lIHRoZSB0d2VlbiB1cGRhdGVzLiBUaGlzIGlzbid0IHF1aXRlIGFzIGVmZmljaWVudCBhcyBkb2luZyB0aGluZ3MgZGlyZWN0bHkgaW4gdGhlIENTU1BsdWdpbidzIHNldFJhdGlvKCkgbWV0aG9kLCBidXQgaXQncyB2ZXJ5IGNvbnZlbmllbnQgYW5kIGZsZXhpYmxlLlxuXHRcdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBvYmplY3Qgd2hvc2UgcHJvcGVydHkgd2lsbCBiZSB0d2VlbmVkLiBPZnRlbiBhIERPTSBlbGVtZW50LCBidXQgbm90IGFsd2F5cy4gSXQgY291bGQgYmUgYW55dGhpbmcuXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gcCBQcm9wZXJ0eSB0byB0d2VlbiAobmFtZSkuIEZvciBleGFtcGxlLCB0byB0d2VlbiBlbGVtZW50LndpZHRoLCBwIHdvdWxkIGJlIFwid2lkdGhcIi5cblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBzIFN0YXJ0aW5nIG51bWVyaWMgdmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBjIENoYW5nZSBpbiBudW1lcmljIHZhbHVlIG92ZXIgdGhlIGNvdXJzZSBvZiB0aGUgZW50aXJlIHR3ZWVuLiBGb3IgZXhhbXBsZSwgaWYgZWxlbWVudC53aWR0aCBzdGFydHMgYXQgNSBhbmQgc2hvdWxkIGVuZCBhdCAxMDAsIGMgd291bGQgYmUgOTUuXG5cdFx0XHQgKiBAcGFyYW0ge0NTU1Byb3BUd2Vlbj19IG5leHQgVGhlIG5leHQgQ1NTUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdC4gSWYgb25lIGlzIGRlZmluZWQsIHdlIHdpbGwgZGVmaW5lIGl0cyBfcHJldiBhcyB0aGUgbmV3IGluc3RhbmNlLCBhbmQgdGhlIG5ldyBpbnN0YW5jZSdzIF9uZXh0IHdpbGwgYmUgcG9pbnRlZCBhdCBpdC5cblx0XHRcdCAqIEBwYXJhbSB7bnVtYmVyPX0gdHlwZSBUaGUgdHlwZSBvZiBDU1NQcm9wVHdlZW4gd2hlcmUgLTEgPSBhIG5vbi10d2VlbmluZyB2YWx1ZSwgMCA9IGEgc3RhbmRhcmQgc2ltcGxlIHR3ZWVuLCAxID0gYSBjb21wbGV4IHZhbHVlIChsaWtlIG9uZSB0aGF0IGhhcyBtdWx0aXBsZSBudW1iZXJzIGluIGEgY29tbWEtIG9yIHNwYWNlLWRlbGltaXRlZCBzdHJpbmcgbGlrZSBib3JkZXI6XCIxcHggc29saWQgcmVkXCIpLCBhbmQgMiA9IG9uZSB0aGF0IHVzZXMgYSBjdXN0b20gc2V0UmF0aW8gZnVuY3Rpb24gdGhhdCBkb2VzIGFsbCBvZiB0aGUgd29yayBvZiBhcHBseWluZyB0aGUgdmFsdWVzIG9uIGVhY2ggdXBkYXRlLlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBuIE5hbWUgb2YgdGhlIHByb3BlcnR5IHRoYXQgc2hvdWxkIGJlIHVzZWQgZm9yIG92ZXJ3cml0aW5nIHB1cnBvc2VzIHdoaWNoIGlzIHR5cGljYWxseSB0aGUgc2FtZSBhcyBwIGJ1dCBub3QgYWx3YXlzLiBGb3IgZXhhbXBsZSwgd2UgbWF5IG5lZWQgdG8gY3JlYXRlIGEgc3VidHdlZW4gZm9yIHRoZSAybmQgcGFydCBvZiBhIFwiY2xpcDpyZWN0KC4uLilcIiB0d2VlbiBpbiB3aGljaCBjYXNlIFwicFwiIG1pZ2h0IGJlIHhzMSBidXQgXCJuXCIgaXMgc3RpbGwgXCJjbGlwXCJcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHIgSWYgdHJ1ZSwgdGhlIHZhbHVlKHMpIHNob3VsZCBiZSByb3VuZGVkXG5cdFx0XHQgKiBAcGFyYW0ge251bWJlcj19IHByIFByaW9yaXR5IGluIHRoZSBsaW5rZWQgbGlzdCBvcmRlci4gSGlnaGVyIHByaW9yaXR5IENTU1Byb3BUd2VlbnMgd2lsbCBiZSB1cGRhdGVkIGJlZm9yZSBsb3dlciBwcmlvcml0eSBvbmVzLiBUaGUgZGVmYXVsdCBwcmlvcml0eSBpcyAwLlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBiIEJlZ2lubmluZyB2YWx1ZS4gV2Ugc3RvcmUgdGhpcyB0byBlbnN1cmUgdGhhdCBpdCBpcyBFWEFDVExZIHdoYXQgaXQgd2FzIHdoZW4gdGhlIHR3ZWVuIGJlZ2FuIHdpdGhvdXQgYW55IHJpc2sgb2YgaW50ZXJwcmV0YXRpb24gaXNzdWVzLlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmc9fSBlIEVuZGluZyB2YWx1ZS4gV2Ugc3RvcmUgdGhpcyB0byBlbnN1cmUgdGhhdCBpdCBpcyBFWEFDVExZIHdoYXQgdGhlIHVzZXIgZGVmaW5lZCBhdCB0aGUgZW5kIG9mIHRoZSB0d2VlbiB3aXRob3V0IGFueSByaXNrIG9mIGludGVycHJldGF0aW9uIGlzc3Vlcy5cblx0XHRcdCAqL1xuXHRcdFx0Q1NTUHJvcFR3ZWVuID0gX2ludGVybmFscy5DU1NQcm9wVHdlZW4gPSBmdW5jdGlvbih0LCBwLCBzLCBjLCBuZXh0LCB0eXBlLCBuLCByLCBwciwgYiwgZSkge1xuXHRcdFx0XHR0aGlzLnQgPSB0OyAvL3RhcmdldFxuXHRcdFx0XHR0aGlzLnAgPSBwOyAvL3Byb3BlcnR5XG5cdFx0XHRcdHRoaXMucyA9IHM7IC8vc3RhcnRpbmcgdmFsdWVcblx0XHRcdFx0dGhpcy5jID0gYzsgLy9jaGFuZ2UgdmFsdWVcblx0XHRcdFx0dGhpcy5uID0gbiB8fCBwOyAvL25hbWUgdGhhdCB0aGlzIENTU1Byb3BUd2VlbiBzaG91bGQgYmUgYXNzb2NpYXRlZCB0byAodXN1YWxseSB0aGUgc2FtZSBhcyBwLCBidXQgbm90IGFsd2F5cyAtIG4gaXMgd2hhdCBvdmVyd3JpdGluZyBsb29rcyBhdClcblx0XHRcdFx0aWYgKCEodCBpbnN0YW5jZW9mIENTU1Byb3BUd2VlbikpIHtcblx0XHRcdFx0XHRfb3ZlcndyaXRlUHJvcHMucHVzaCh0aGlzLm4pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuciA9IHI7IC8vcm91bmQgKGJvb2xlYW4pXG5cdFx0XHRcdHRoaXMudHlwZSA9IHR5cGUgfHwgMDsgLy8wID0gbm9ybWFsIHR3ZWVuLCAtMSA9IG5vbi10d2VlbmluZyAoaW4gd2hpY2ggY2FzZSB4czAgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSB0YXJnZXQncyBwcm9wZXJ0eSwgbGlrZSB0cC50W3RwLnBdID0gdHAueHMwKSwgMSA9IGNvbXBsZXgtdmFsdWUgU3BlY2lhbFByb3AsIDIgPSBjdXN0b20gc2V0UmF0aW8oKSB0aGF0IGRvZXMgYWxsIHRoZSB3b3JrXG5cdFx0XHRcdGlmIChwcikge1xuXHRcdFx0XHRcdHRoaXMucHIgPSBwcjtcblx0XHRcdFx0XHRfaGFzUHJpb3JpdHkgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYiA9IChiID09PSB1bmRlZmluZWQpID8gcyA6IGI7XG5cdFx0XHRcdHRoaXMuZSA9IChlID09PSB1bmRlZmluZWQpID8gcyArIGMgOiBlO1xuXHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdHRoaXMuX25leHQgPSBuZXh0O1xuXHRcdFx0XHRcdG5leHQuX3ByZXYgPSB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRfYWRkTm9uVHdlZW5pbmdOdW1lcmljUFQgPSBmdW5jdGlvbih0YXJnZXQsIHByb3AsIHN0YXJ0LCBlbmQsIG5leHQsIG92ZXJ3cml0ZVByb3ApIHsgLy9jbGVhbnMgdXAgc29tZSBjb2RlIHJlZHVuZGFuY2llcyBhbmQgaGVscHMgbWluaWZpY2F0aW9uLiBKdXN0IGEgZmFzdCB3YXkgdG8gYWRkIGEgTlVNRVJJQyBub24tdHdlZW5pbmcgQ1NTUHJvcFR3ZWVuXG5cdFx0XHRcdHZhciBwdCA9IG5ldyBDU1NQcm9wVHdlZW4odGFyZ2V0LCBwcm9wLCBzdGFydCwgZW5kIC0gc3RhcnQsIG5leHQsIC0xLCBvdmVyd3JpdGVQcm9wKTtcblx0XHRcdFx0cHQuYiA9IHN0YXJ0O1xuXHRcdFx0XHRwdC5lID0gcHQueHMwID0gZW5kO1xuXHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFRha2VzIGEgdGFyZ2V0LCB0aGUgYmVnaW5uaW5nIHZhbHVlIGFuZCBlbmRpbmcgdmFsdWUgKGFzIHN0cmluZ3MpIGFuZCBwYXJzZXMgdGhlbSBpbnRvIGEgQ1NTUHJvcFR3ZWVuIChwb3NzaWJseSB3aXRoIGNoaWxkIENTU1Byb3BUd2VlbnMpIHRoYXQgYWNjb21tb2RhdGVzIG11bHRpcGxlIG51bWJlcnMsIGNvbG9ycywgY29tbWEtZGVsaW1pdGVkIHZhbHVlcywgZXRjLiBGb3IgZXhhbXBsZTpcblx0XHRcdCAqIHNwLnBhcnNlQ29tcGxleChlbGVtZW50LCBcImJveFNoYWRvd1wiLCBcIjVweCAxMHB4IDIwcHggcmdiKDI1NSwxMDIsNTEpXCIsIFwiMHB4IDBweCAwcHggcmVkXCIsIHRydWUsIFwiMHB4IDBweCAwcHggcmdiKDAsMCwwLDApXCIsIHB0KTtcblx0XHRcdCAqIEl0IHdpbGwgd2FsayB0aHJvdWdoIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgKHdoaWNoIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBmb3JtYXQgd2l0aCB0aGUgc2FtZSBudW1iZXIgYW5kIHR5cGUgb2YgdmFsdWVzKSBhbmQgZmlndXJlIG91dCB3aGljaCBwYXJ0cyBhcmUgbnVtYmVycywgd2hhdCBzdHJpbmdzIHNlcGFyYXRlIHRoZSBudW1lcmljL3R3ZWVuYWJsZSB2YWx1ZXMsIGFuZCB0aGVuIGNyZWF0ZSB0aGUgQ1NTUHJvcFR3ZWVucyBhY2NvcmRpbmdseS4gSWYgYSBwbHVnaW4gaXMgZGVmaW5lZCwgbm8gY2hpbGQgQ1NTUHJvcFR3ZWVucyB3aWxsIGJlIGNyZWF0ZWQuIEluc3RlYWQsIHRoZSBlbmRpbmcgdmFsdWVzIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBcImRhdGFcIiBwcm9wZXJ0eSBvZiB0aGUgcmV0dXJuZWQgQ1NTUHJvcFR3ZWVuIGxpa2U6IHtzOi01LCB4bjE6LTEwLCB4bjI6LTIwLCB4bjM6MjU1LCB4bjQ6MCwgeG41OjB9IHNvIHRoYXQgaXQgY2FuIGJlIGZlZCB0byBhbnkgb3RoZXIgcGx1Z2luIGFuZCBpdCdsbCBiZSBwbGFpbiBudW1lcmljIHR3ZWVucyBidXQgdGhlIHJlY29tcG9zaXRpb24gb2YgdGhlIGNvbXBsZXggdmFsdWUgd2lsbCBiZSBoYW5kbGVkIGluc2lkZSBDU1NQbHVnaW4ncyBzZXRSYXRpbygpLlxuXHRcdFx0ICogSWYgYSBzZXRSYXRpbyBpcyBkZWZpbmVkLCB0aGUgdHlwZSBvZiB0aGUgQ1NTUHJvcFR3ZWVuIHdpbGwgYmUgc2V0IHRvIDIgYW5kIHJlY29tcG9zaXRpb24gb2YgdGhlIHZhbHVlcyB3aWxsIGJlIHRoZSByZXNwb25zaWJpbGl0eSBvZiB0aGF0IG1ldGhvZC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgVGFyZ2V0IHdob3NlIHByb3BlcnR5IHdpbGwgYmUgdHdlZW5lZFxuXHRcdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IHRoYXQgd2lsbCBiZSB0d2VlbmVkIChpdHMgbmFtZSwgbGlrZSBcImxlZnRcIiBvciBcImJhY2tncm91bmRDb2xvclwiIG9yIFwiYm94U2hhZG93XCIpXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gYiBCZWdpbm5pbmcgdmFsdWVcblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBlIEVuZGluZyB2YWx1ZVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFufSBjbHJzIElmIHRydWUsIHRoZSB2YWx1ZSBjb3VsZCBjb250YWluIGEgY29sb3IgdmFsdWUgbGlrZSBcInJnYigyNTUsMCwwKVwiIG9yIFwiI0YwMFwiIG9yIFwicmVkXCIuIFRoZSBkZWZhdWx0IGlzIGZhbHNlLCBzbyBubyBjb2xvcnMgd2lsbCBiZSByZWNvZ25pemVkIChhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbilcblx0XHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXJ8T2JqZWN0KX0gZGZsdCBUaGUgZGVmYXVsdCBiZWdpbm5pbmcgdmFsdWUgdGhhdCBzaG91bGQgYmUgdXNlZCBpZiBubyB2YWxpZCBiZWdpbm5pbmcgdmFsdWUgaXMgZGVmaW5lZCBvciBpZiB0aGUgbnVtYmVyIG9mIHZhbHVlcyBpbnNpZGUgdGhlIGNvbXBsZXggYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIGRvbid0IG1hdGNoXG5cdFx0XHQgKiBAcGFyYW0gez9DU1NQcm9wVHdlZW59IHB0IENTU1Byb3BUd2VlbiBpbnN0YW5jZSB0aGF0IGlzIHRoZSBjdXJyZW50IGhlYWQgb2YgdGhlIGxpbmtlZCBsaXN0ICh3ZSdsbCBwcmVwZW5kIHRvIHRoaXMpLlxuXHRcdFx0ICogQHBhcmFtIHtudW1iZXI9fSBwciBQcmlvcml0eSBpbiB0aGUgbGlua2VkIGxpc3Qgb3JkZXIuIEhpZ2hlciBwcmlvcml0eSBwcm9wZXJ0aWVzIHdpbGwgYmUgdXBkYXRlZCBiZWZvcmUgbG93ZXIgcHJpb3JpdHkgb25lcy4gVGhlIGRlZmF1bHQgcHJpb3JpdHkgaXMgMC5cblx0XHRcdCAqIEBwYXJhbSB7VHdlZW5QbHVnaW49fSBwbHVnaW4gSWYgYSBwbHVnaW4gc2hvdWxkIGhhbmRsZSB0aGUgdHdlZW5pbmcgb2YgZXh0cmEgcHJvcGVydGllcywgcGFzcyB0aGUgcGx1Z2luIGluc3RhbmNlIGhlcmUuIElmIG9uZSBpcyBkZWZpbmVkLCB0aGVuIE5PIHN1YnR3ZWVucyB3aWxsIGJlIGNyZWF0ZWQgZm9yIGFueSBleHRyYSBwcm9wZXJ0aWVzICh0aGUgcHJvcGVydGllcyB3aWxsIGJlIGNyZWF0ZWQgLSBqdXN0IG5vdCBhZGRpdGlvbmFsIENTU1Byb3BUd2VlbiBpbnN0YW5jZXMgdG8gdHdlZW4gdGhlbSkgYmVjYXVzZSB0aGUgcGx1Z2luIGlzIGV4cGVjdGVkIHRvIGRvIHNvLiBIb3dldmVyLCB0aGUgZW5kIHZhbHVlcyBXSUxMIGJlIHBvcHVsYXRlZCBpbiB0aGUgXCJkYXRhXCIgcHJvcGVydHksIGxpa2Uge3M6MTAwLCB4bjE6NTAsIHhuMjozMDB9XG5cdFx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9uKG51bWJlcik9fSBzZXRSYXRpbyBJZiB2YWx1ZXMgc2hvdWxkIGJlIHNldCBpbiBhIGN1c3RvbSBmdW5jdGlvbiBpbnN0ZWFkIG9mIGJlaW5nIHBpZWNlZCB0b2dldGhlciBpbiBhIHR5cGU6MSAoY29tcGxleC12YWx1ZSkgQ1NTUHJvcFR3ZWVuLCBkZWZpbmUgdGhhdCBjdXN0b20gZnVuY3Rpb24gaGVyZS5cblx0XHRcdCAqIEByZXR1cm4ge0NTU1Byb3BUd2Vlbn0gVGhlIGZpcnN0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Qgd2hpY2ggaW5jbHVkZXMgdGhlIG5ldyBvbmUocykgYWRkZWQgYnkgdGhlIHBhcnNlQ29tcGxleCgpIGNhbGwuXG5cdFx0XHQgKi9cblx0XHRcdF9wYXJzZUNvbXBsZXggPSBDU1NQbHVnaW4ucGFyc2VDb21wbGV4ID0gZnVuY3Rpb24odCwgcCwgYiwgZSwgY2xycywgZGZsdCwgcHQsIHByLCBwbHVnaW4sIHNldFJhdGlvKSB7XG5cdFx0XHRcdC8vREVCVUc6IF9sb2coXCJwYXJzZUNvbXBsZXg6IFwiK3ArXCIsIGI6IFwiK2IrXCIsIGU6IFwiK2UpO1xuXHRcdFx0XHRiID0gYiB8fCBkZmx0IHx8IFwiXCI7XG5cdFx0XHRcdGlmICh0eXBlb2YoZSkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdGUgPSBlKF9pbmRleCwgX3RhcmdldCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHQsIHAsIDAsIDAsIHB0LCAoc2V0UmF0aW8gPyAyIDogMSksIG51bGwsIGZhbHNlLCBwciwgYiwgZSk7XG5cdFx0XHRcdGUgKz0gXCJcIjsgLy9lbnN1cmVzIGl0J3MgYSBzdHJpbmdcblx0XHRcdFx0aWYgKGNscnMgJiYgX2NvbG9yRXhwLnRlc3QoZSArIGIpKSB7IC8vaWYgY29sb3JzIGFyZSBmb3VuZCwgbm9ybWFsaXplIHRoZSBmb3JtYXR0aW5nIHRvIHJnYmEoKSBvciBoc2xhKCkuXG5cdFx0XHRcdFx0ZSA9IFtiLCBlXTtcblx0XHRcdFx0XHRDU1NQbHVnaW4uY29sb3JTdHJpbmdGaWx0ZXIoZSk7XG5cdFx0XHRcdFx0YiA9IGVbMF07XG5cdFx0XHRcdFx0ZSA9IGVbMV07XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGJhID0gYi5zcGxpdChcIiwgXCIpLmpvaW4oXCIsXCIpLnNwbGl0KFwiIFwiKSwgLy9iZWdpbm5pbmcgYXJyYXlcblx0XHRcdFx0XHRlYSA9IGUuc3BsaXQoXCIsIFwiKS5qb2luKFwiLFwiKS5zcGxpdChcIiBcIiksIC8vZW5kaW5nIGFycmF5XG5cdFx0XHRcdFx0bCA9IGJhLmxlbmd0aCxcblx0XHRcdFx0XHRhdXRvUm91bmQgPSAoX2F1dG9Sb3VuZCAhPT0gZmFsc2UpLFxuXHRcdFx0XHRcdGksIHhpLCBuaSwgYnYsIGV2LCBibnVtcywgZW51bXMsIGJuLCBoYXNBbHBoYSwgdGVtcCwgY3YsIHN0ciwgdXNlSFNMO1xuXHRcdFx0XHRpZiAoZS5pbmRleE9mKFwiLFwiKSAhPT0gLTEgfHwgYi5pbmRleE9mKFwiLFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRiYSA9IGJhLmpvaW4oXCIgXCIpLnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCIsIFwiKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0ZWEgPSBlYS5qb2luKFwiIFwiKS5yZXBsYWNlKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAsIFwiLCBcIikuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdGwgPSBiYS5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGwgIT09IGVhLmxlbmd0aCkge1xuXHRcdFx0XHRcdC8vREVCVUc6IF9sb2coXCJtaXNtYXRjaGVkIGZvcm1hdHRpbmcgZGV0ZWN0ZWQgb24gXCIgKyBwICsgXCIgKFwiICsgYiArIFwiIHZzIFwiICsgZSArIFwiKVwiKTtcblx0XHRcdFx0XHRiYSA9IChkZmx0IHx8IFwiXCIpLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRsID0gYmEubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0cHQuc2V0UmF0aW8gPSBzZXRSYXRpbztcblx0XHRcdFx0X2NvbG9yRXhwLmxhc3RJbmRleCA9IDA7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRidiA9IGJhW2ldO1xuXHRcdFx0XHRcdGV2ID0gZWFbaV07XG5cdFx0XHRcdFx0Ym4gPSBwYXJzZUZsb2F0KGJ2KTtcblx0XHRcdFx0XHQvL2lmIHRoZSB2YWx1ZSBiZWdpbnMgd2l0aCBhIG51bWJlciAobW9zdCBjb21tb24pLiBJdCdzIGZpbmUgaWYgaXQgaGFzIGEgc3VmZml4IGxpa2UgcHhcblx0XHRcdFx0XHRpZiAoYm4gfHwgYm4gPT09IDApIHtcblx0XHRcdFx0XHRcdHB0LmFwcGVuZFh0cmEoXCJcIiwgYm4sIF9wYXJzZUNoYW5nZShldiwgYm4pLCBldi5yZXBsYWNlKF9yZWxOdW1FeHAsIFwiXCIpLCAoYXV0b1JvdW5kICYmIGV2LmluZGV4T2YoXCJweFwiKSAhPT0gLTEpLCB0cnVlKTtcblxuXHRcdFx0XHRcdC8vaWYgdGhlIHZhbHVlIGlzIGEgY29sb3Jcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNscnMgJiYgX2NvbG9yRXhwLnRlc3QoYnYpKSB7XG5cdFx0XHRcdFx0XHRzdHIgPSBldi5pbmRleE9mKFwiKVwiKSArIDE7XG5cdFx0XHRcdFx0XHRzdHIgPSBcIilcIiArIChzdHIgPyBldi5zdWJzdHIoc3RyKSA6IFwiXCIpOyAvL2lmIHRoZXJlJ3MgYSBjb21tYSBvciApIGF0IHRoZSBlbmQsIHJldGFpbiBpdC5cblx0XHRcdFx0XHRcdHVzZUhTTCA9IChldi5pbmRleE9mKFwiaHNsXCIpICE9PSAtMSAmJiBfc3VwcG9ydHNPcGFjaXR5KTtcblx0XHRcdFx0XHRcdGJ2ID0gX3BhcnNlQ29sb3IoYnYsIHVzZUhTTCk7XG5cdFx0XHRcdFx0XHRldiA9IF9wYXJzZUNvbG9yKGV2LCB1c2VIU0wpO1xuXHRcdFx0XHRcdFx0aGFzQWxwaGEgPSAoYnYubGVuZ3RoICsgZXYubGVuZ3RoID4gNik7XG5cdFx0XHRcdFx0XHRpZiAoaGFzQWxwaGEgJiYgIV9zdXBwb3J0c09wYWNpdHkgJiYgZXZbM10gPT09IDApIHsgLy9vbGRlciB2ZXJzaW9ucyBvZiBJRSBkb24ndCBzdXBwb3J0IHJnYmEoKSwgc28gaWYgdGhlIGRlc3RpbmF0aW9uIGFscGhhIGlzIDAsIGp1c3QgdXNlIFwidHJhbnNwYXJlbnRcIiBmb3IgdGhlIGVuZCBjb2xvclxuXHRcdFx0XHRcdFx0XHRwdFtcInhzXCIgKyBwdC5sXSArPSBwdC5sID8gXCIgdHJhbnNwYXJlbnRcIiA6IFwidHJhbnNwYXJlbnRcIjtcblx0XHRcdFx0XHRcdFx0cHQuZSA9IHB0LmUuc3BsaXQoZWFbaV0pLmpvaW4oXCJ0cmFuc3BhcmVudFwiKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmICghX3N1cHBvcnRzT3BhY2l0eSkgeyAvL29sZCB2ZXJzaW9ucyBvZiBJRSBkb24ndCBzdXBwb3J0IHJnYmEoKS5cblx0XHRcdFx0XHRcdFx0XHRoYXNBbHBoYSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICh1c2VIU0wpIHtcblx0XHRcdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKChoYXNBbHBoYSA/IFwiaHNsYShcIiA6IFwiaHNsKFwiKSwgYnZbMF0sIF9wYXJzZUNoYW5nZShldlswXSwgYnZbMF0pLCBcIixcIiwgZmFsc2UsIHRydWUpXG5cdFx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kWHRyYShcIlwiLCBidlsxXSwgX3BhcnNlQ2hhbmdlKGV2WzFdLCBidlsxXSksIFwiJSxcIiwgZmFsc2UpXG5cdFx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kWHRyYShcIlwiLCBidlsyXSwgX3BhcnNlQ2hhbmdlKGV2WzJdLCBidlsyXSksIChoYXNBbHBoYSA/IFwiJSxcIiA6IFwiJVwiICsgc3RyKSwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHB0LmFwcGVuZFh0cmEoKGhhc0FscGhhID8gXCJyZ2JhKFwiIDogXCJyZ2IoXCIpLCBidlswXSwgZXZbMF0gLSBidlswXSwgXCIsXCIsIHRydWUsIHRydWUpXG5cdFx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kWHRyYShcIlwiLCBidlsxXSwgZXZbMV0gLSBidlsxXSwgXCIsXCIsIHRydWUpXG5cdFx0XHRcdFx0XHRcdFx0XHQuYXBwZW5kWHRyYShcIlwiLCBidlsyXSwgZXZbMl0gLSBidlsyXSwgKGhhc0FscGhhID8gXCIsXCIgOiBzdHIpLCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmIChoYXNBbHBoYSkge1xuXHRcdFx0XHRcdFx0XHRcdGJ2ID0gKGJ2Lmxlbmd0aCA8IDQpID8gMSA6IGJ2WzNdO1xuXHRcdFx0XHRcdFx0XHRcdHB0LmFwcGVuZFh0cmEoXCJcIiwgYnYsICgoZXYubGVuZ3RoIDwgNCkgPyAxIDogZXZbM10pIC0gYnYsIHN0ciwgZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRfY29sb3JFeHAubGFzdEluZGV4ID0gMDsgLy9vdGhlcndpc2UgdGhlIHRlc3QoKSBvbiB0aGUgUmVnRXhwIGNvdWxkIG1vdmUgdGhlIGxhc3RJbmRleCBhbmQgdGFpbnQgZnV0dXJlIHJlc3VsdHMuXG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ym51bXMgPSBidi5tYXRjaChfbnVtRXhwKTsgLy9nZXRzIGVhY2ggZ3JvdXAgb2YgbnVtYmVycyBpbiB0aGUgYmVnaW5uaW5nIHZhbHVlIHN0cmluZyBhbmQgZHJvcHMgdGhlbSBpbnRvIGFuIGFycmF5XG5cblx0XHRcdFx0XHRcdC8vaWYgbm8gbnVtYmVyIGlzIGZvdW5kLCB0cmVhdCBpdCBhcyBhIG5vbi10d2VlbmluZyB2YWx1ZSBhbmQganVzdCBhcHBlbmQgdGhlIHN0cmluZyB0byB0aGUgY3VycmVudCB4cy5cblx0XHRcdFx0XHRcdGlmICghYm51bXMpIHtcblx0XHRcdFx0XHRcdFx0cHRbXCJ4c1wiICsgcHQubF0gKz0gKHB0LmwgfHwgcHRbXCJ4c1wiICsgcHQubF0pID8gXCIgXCIgKyBldiA6IGV2O1xuXG5cdFx0XHRcdFx0XHQvL2xvb3AgdGhyb3VnaCBhbGwgdGhlIG51bWJlcnMgdGhhdCBhcmUgZm91bmQgYW5kIGNvbnN0cnVjdCB0aGUgZXh0cmEgdmFsdWVzIG9uIHRoZSBwdC5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVudW1zID0gZXYubWF0Y2goX3JlbE51bUV4cCk7IC8vZ2V0IGVhY2ggZ3JvdXAgb2YgbnVtYmVycyBpbiB0aGUgZW5kIHZhbHVlIHN0cmluZyBhbmQgZHJvcCB0aGVtIGludG8gYW4gYXJyYXkuIFdlIGFsbG93IHJlbGF0aXZlIHZhbHVlcyB0b28sIGxpa2UgKz01MCBvciAtPS41XG5cdFx0XHRcdFx0XHRcdGlmICghZW51bXMgfHwgZW51bXMubGVuZ3RoICE9PSBibnVtcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwibWlzbWF0Y2hlZCBmb3JtYXR0aW5nIGRldGVjdGVkIG9uIFwiICsgcCArIFwiIChcIiArIGIgKyBcIiB2cyBcIiArIGUgKyBcIilcIik7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHB0O1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdG5pID0gMDtcblx0XHRcdFx0XHRcdFx0Zm9yICh4aSA9IDA7IHhpIDwgYm51bXMubGVuZ3RoOyB4aSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y3YgPSBibnVtc1t4aV07XG5cdFx0XHRcdFx0XHRcdFx0dGVtcCA9IGJ2LmluZGV4T2YoY3YsIG5pKTtcblx0XHRcdFx0XHRcdFx0XHRwdC5hcHBlbmRYdHJhKGJ2LnN1YnN0cihuaSwgdGVtcCAtIG5pKSwgTnVtYmVyKGN2KSwgX3BhcnNlQ2hhbmdlKGVudW1zW3hpXSwgY3YpLCBcIlwiLCAoYXV0b1JvdW5kICYmIGJ2LnN1YnN0cih0ZW1wICsgY3YubGVuZ3RoLCAyKSA9PT0gXCJweFwiKSwgKHhpID09PSAwKSk7XG5cdFx0XHRcdFx0XHRcdFx0bmkgPSB0ZW1wICsgY3YubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHB0W1wieHNcIiArIHB0LmxdICs9IGJ2LnN1YnN0cihuaSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdC8vaWYgdGhlcmUgYXJlIHJlbGF0aXZlIHZhbHVlcyAoXCIrPVwiIG9yIFwiLT1cIiBwcmVmaXgpLCB3ZSBuZWVkIHRvIGFkanVzdCB0aGUgZW5kaW5nIHZhbHVlIHRvIGVsaW1pbmF0ZSB0aGUgcHJlZml4ZXMgYW5kIGNvbWJpbmUgdGhlIHZhbHVlcyBwcm9wZXJseS5cblx0XHRcdFx0aWYgKGUuaW5kZXhPZihcIj1cIikgIT09IC0xKSBpZiAocHQuZGF0YSkge1xuXHRcdFx0XHRcdHN0ciA9IHB0LnhzMCArIHB0LmRhdGEucztcblx0XHRcdFx0XHRmb3IgKGkgPSAxOyBpIDwgcHQubDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRzdHIgKz0gcHRbXCJ4c1wiICsgaV0gKyBwdC5kYXRhW1wieG5cIiArIGldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdC5lID0gc3RyICsgcHRbXCJ4c1wiICsgaV07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFwdC5sKSB7XG5cdFx0XHRcdFx0cHQudHlwZSA9IC0xO1xuXHRcdFx0XHRcdHB0LnhzMCA9IHB0LmU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHB0LnhmaXJzdCB8fCBwdDtcblx0XHRcdH0sXG5cdFx0XHRpID0gOTtcblxuXG5cdFx0cCA9IENTU1Byb3BUd2Vlbi5wcm90b3R5cGU7XG5cdFx0cC5sID0gcC5wciA9IDA7IC8vbGVuZ3RoIChudW1iZXIgb2YgZXh0cmEgcHJvcGVydGllcyBsaWtlIHhuMSwgeG4yLCB4bjMsIGV0Yy5cblx0XHR3aGlsZSAoLS1pID4gMCkge1xuXHRcdFx0cFtcInhuXCIgKyBpXSA9IDA7XG5cdFx0XHRwW1wieHNcIiArIGldID0gXCJcIjtcblx0XHR9XG5cdFx0cC54czAgPSBcIlwiO1xuXHRcdHAuX25leHQgPSBwLl9wcmV2ID0gcC54Zmlyc3QgPSBwLmRhdGEgPSBwLnBsdWdpbiA9IHAuc2V0UmF0aW8gPSBwLnJ4cCA9IG51bGw7XG5cblxuXHRcdC8qKlxuXHRcdCAqIEFwcGVuZHMgYW5kIGV4dHJhIHR3ZWVuaW5nIHZhbHVlIHRvIGEgQ1NTUHJvcFR3ZWVuIGFuZCBhdXRvbWF0aWNhbGx5IG1hbmFnZXMgYW55IHByZWZpeCBhbmQgc3VmZml4IHN0cmluZ3MuIFRoZSBmaXJzdCBleHRyYSB2YWx1ZSBpcyBzdG9yZWQgaW4gdGhlIHMgYW5kIGMgb2YgdGhlIG1haW4gQ1NTUHJvcFR3ZWVuIGluc3RhbmNlLCBidXQgdGhlcmVhZnRlciBhbnkgZXh0cmFzIGFyZSBzdG9yZWQgaW4gdGhlIHhuMSwgeG4yLCB4bjMsIGV0Yy4gVGhlIHByZWZpeGVzIGFuZCBzdWZmaXhlcyBhcmUgc3RvcmVkIGluIHRoZSB4czAsIHhzMSwgeHMyLCBldGMuIHByb3BlcnRpZXMuIEZvciBleGFtcGxlLCBpZiBJIHdhbGsgdGhyb3VnaCBhIGNsaXAgdmFsdWUgbGlrZSBcInJlY3QoMTBweCwgNXB4LCAwcHgsIDIwcHgpXCIsIHRoZSB2YWx1ZXMgd291bGQgYmUgc3RvcmVkIGxpa2UgdGhpczpcblx0XHQgKiB4czA6XCJyZWN0KFwiLCBzOjEwLCB4czE6XCJweCwgXCIsIHhuMTo1LCB4czI6XCJweCwgXCIsIHhuMjowLCB4czM6XCJweCwgXCIsIHhuMzoyMCwgeG40OlwicHgpXCJcblx0XHQgKiBBbmQgdGhleSdkIGFsbCBnZXQgam9pbmVkIHRvZ2V0aGVyIHdoZW4gdGhlIENTU1BsdWdpbiByZW5kZXJzIChpbiB0aGUgc2V0UmF0aW8oKSBtZXRob2QpLlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nPX0gcGZ4IFByZWZpeCAoaWYgYW55KVxuXHRcdCAqIEBwYXJhbSB7IW51bWJlcn0gcyBTdGFydGluZyB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7IW51bWJlcn0gYyBDaGFuZ2UgaW4gbnVtZXJpYyB2YWx1ZSBvdmVyIHRoZSBjb3Vyc2Ugb2YgdGhlIGVudGlyZSB0d2Vlbi4gRm9yIGV4YW1wbGUsIGlmIHRoZSBzdGFydCBpcyA1IGFuZCB0aGUgZW5kIGlzIDEwMCwgdGhlIGNoYW5nZSB3b3VsZCBiZSA5NS5cblx0XHQgKiBAcGFyYW0ge3N0cmluZz19IHNmeCBTdWZmaXggKGlmIGFueSlcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSByIFJvdW5kIChpZiB0cnVlKS5cblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW49fSBwYWQgSWYgdHJ1ZSwgdGhpcyBleHRyYSB2YWx1ZSBzaG91bGQgYmUgc2VwYXJhdGVkIGJ5IHRoZSBwcmV2aW91cyBvbmUgYnkgYSBzcGFjZS4gSWYgdGhlcmUgaXMgbm8gcHJldmlvdXMgZXh0cmEgYW5kIHBhZCBpcyB0cnVlLCBpdCB3aWxsIGF1dG9tYXRpY2FsbHkgZHJvcCB0aGUgc3BhY2UuXG5cdFx0ICogQHJldHVybiB7Q1NTUHJvcFR3ZWVufSByZXR1cm5zIGl0c2VsZiBzbyB0aGF0IG11bHRpcGxlIG1ldGhvZHMgY2FuIGJlIGNoYWluZWQgdG9nZXRoZXIuXG5cdFx0ICovXG5cdFx0cC5hcHBlbmRYdHJhID0gZnVuY3Rpb24ocGZ4LCBzLCBjLCBzZngsIHIsIHBhZCkge1xuXHRcdFx0dmFyIHB0ID0gdGhpcyxcblx0XHRcdFx0bCA9IHB0Lmw7XG5cdFx0XHRwdFtcInhzXCIgKyBsXSArPSAocGFkICYmIChsIHx8IHB0W1wieHNcIiArIGxdKSkgPyBcIiBcIiArIHBmeCA6IHBmeCB8fCBcIlwiO1xuXHRcdFx0aWYgKCFjKSBpZiAobCAhPT0gMCAmJiAhcHQucGx1Z2luKSB7IC8vdHlwaWNhbGx5IHdlJ2xsIGNvbWJpbmUgbm9uLWNoYW5naW5nIHZhbHVlcyByaWdodCBpbnRvIHRoZSB4cyB0byBvcHRpbWl6ZSBwZXJmb3JtYW5jZSwgYnV0IHdlIGRvbid0IGNvbWJpbmUgdGhlbSB3aGVuIHRoZXJlJ3MgYSBwbHVnaW4gdGhhdCB3aWxsIGJlIHR3ZWVuaW5nIHRoZSB2YWx1ZXMgYmVjYXVzZSBpdCBtYXkgZGVwZW5kIG9uIHRoZSB2YWx1ZXMgYmVpbmcgc3BsaXQgYXBhcnQsIGxpa2UgZm9yIGEgYmV6aWVyLCBpZiBhIHZhbHVlIGRvZXNuJ3QgY2hhbmdlIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBzZWNvbmQgaXRlcmF0aW9uIGJ1dCB0aGVuIGl0IGRvZXMgb24gdGhlIDNyZCwgd2UnbGwgcnVuIGludG8gdHJvdWJsZSBiZWNhdXNlIHRoZXJlJ3Mgbm8geG4gc2xvdCBmb3IgdGhhdCB2YWx1ZSFcblx0XHRcdFx0cHRbXCJ4c1wiICsgbF0gKz0gcyArIChzZnggfHwgXCJcIik7XG5cdFx0XHRcdHJldHVybiBwdDtcblx0XHRcdH1cblx0XHRcdHB0LmwrKztcblx0XHRcdHB0LnR5cGUgPSBwdC5zZXRSYXRpbyA/IDIgOiAxO1xuXHRcdFx0cHRbXCJ4c1wiICsgcHQubF0gPSBzZnggfHwgXCJcIjtcblx0XHRcdGlmIChsID4gMCkge1xuXHRcdFx0XHRwdC5kYXRhW1wieG5cIiArIGxdID0gcyArIGM7XG5cdFx0XHRcdHB0LnJ4cFtcInhuXCIgKyBsXSA9IHI7IC8vcm91bmQgZXh0cmEgcHJvcGVydHkgKHdlIG5lZWQgdG8gdGFwIGludG8gdGhpcyBpbiB0aGUgX3BhcnNlVG9Qcm94eSgpIG1ldGhvZClcblx0XHRcdFx0cHRbXCJ4blwiICsgbF0gPSBzO1xuXHRcdFx0XHRpZiAoIXB0LnBsdWdpbikge1xuXHRcdFx0XHRcdHB0LnhmaXJzdCA9IG5ldyBDU1NQcm9wVHdlZW4ocHQsIFwieG5cIiArIGwsIHMsIGMsIHB0LnhmaXJzdCB8fCBwdCwgMCwgcHQubiwgciwgcHQucHIpO1xuXHRcdFx0XHRcdHB0LnhmaXJzdC54czAgPSAwOyAvL2p1c3QgdG8gZW5zdXJlIHRoYXQgdGhlIHByb3BlcnR5IHN0YXlzIG51bWVyaWMgd2hpY2ggaGVscHMgbW9kZXJuIGJyb3dzZXJzIHNwZWVkIHVwIHByb2Nlc3NpbmcuIFJlbWVtYmVyLCBpbiB0aGUgc2V0UmF0aW8oKSBtZXRob2QsIHdlIGRvIHB0LnRbcHQucF0gPSB2YWwgKyBwdC54czAgc28gaWYgcHQueHMwIGlzIFwiXCIgKHRoZSBkZWZhdWx0KSwgaXQnbGwgY2FzdCB0aGUgZW5kIHZhbHVlIGFzIGEgc3RyaW5nLiBXaGVuIGEgcHJvcGVydHkgaXMgYSBudW1iZXIgc29tZXRpbWVzIGFuZCBhIHN0cmluZyBzb21ldGltZXMsIGl0IHByZXZlbnRzIHRoZSBjb21waWxlciBmcm9tIGxvY2tpbmcgaW4gdGhlIGRhdGEgdHlwZSwgc2xvd2luZyB0aGluZ3MgZG93biBzbGlnaHRseS5cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHR9XG5cdFx0XHRwdC5kYXRhID0ge3M6cyArIGN9O1xuXHRcdFx0cHQucnhwID0ge307XG5cdFx0XHRwdC5zID0gcztcblx0XHRcdHB0LmMgPSBjO1xuXHRcdFx0cHQuciA9IHI7XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEBjb25zdHJ1Y3RvciBBIFNwZWNpYWxQcm9wIGlzIGJhc2ljYWxseSBhIGNzcyBwcm9wZXJ0eSB0aGF0IG5lZWRzIHRvIGJlIHRyZWF0ZWQgaW4gYSBub24tc3RhbmRhcmQgd2F5LCBsaWtlIGlmIGl0IG1heSBjb250YWluIGEgY29tcGxleCB2YWx1ZSBsaWtlIGJveFNoYWRvdzpcIjVweCAxMHB4IDE1cHggcmdiKDI1NSwgMTAyLCA1MSlcIiBvciBpZiBpdCBpcyBhc3NvY2lhdGVkIHdpdGggYW5vdGhlciBwbHVnaW4gbGlrZSBUaHJvd1Byb3BzUGx1Z2luIG9yIEJlemllclBsdWdpbi4gRXZlcnkgU3BlY2lhbFByb3AgaXMgYXNzb2NpYXRlZCB3aXRoIGEgcGFydGljdWxhciBwcm9wZXJ0eSBuYW1lIGxpa2UgXCJib3hTaGFkb3dcIiBvciBcInRocm93UHJvcHNcIiBvciBcImJlemllclwiIGFuZCBpdCB3aWxsIGludGVyY2VwdCB0aG9zZSB2YWx1ZXMgaW4gdGhlIHZhcnMgb2JqZWN0IHRoYXQncyBwYXNzZWQgdG8gdGhlIENTU1BsdWdpbiBhbmQgaGFuZGxlIHRoZW0gYWNjb3JkaW5nbHkuXG5cdFx0ICogQHBhcmFtIHshc3RyaW5nfSBwIFByb3BlcnR5IG5hbWUgKGxpa2UgXCJib3hTaGFkb3dcIiBvciBcInRocm93UHJvcHNcIilcblx0XHQgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYW55IG9mIHRoZSBmb2xsb3dpbmcgY29uZmlndXJhdGlvbiBvcHRpb25zOlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gZGVmYXVsdFZhbHVlOiB0aGUgZGVmYXVsdCB2YWx1ZVxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gcGFyc2VyOiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IG5hbWUgaXMgZm91bmQgaW4gdGhlIHZhcnMuIFRoaXMgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIENTU1Byb3BUd2VlbiBpbnN0YW5jZSBhbmQgaXQgc2hvdWxkIGVuc3VyZSB0aGF0IGl0IGlzIHByb3Blcmx5IGluc2VydGVkIGludG8gdGhlIGxpbmtlZCBsaXN0LiBJdCB3aWxsIHJlY2VpdmUgNCBwYXJhbXRlcnM6IDEpIFRoZSB0YXJnZXQsIDIpIFRoZSB2YWx1ZSBkZWZpbmVkIGluIHRoZSB2YXJzLCAzKSBUaGUgQ1NTUGx1Z2luIGluc3RhbmNlICh3aG9zZSBfZmlyc3RQVCBzaG91bGQgYmUgdXNlZCBmb3IgdGhlIGxpbmtlZCBsaXN0KSwgYW5kIDQpIEEgY29tcHV0ZWQgc3R5bGUgb2JqZWN0IGlmIG9uZSB3YXMgY2FsY3VsYXRlZCAodGhpcyBpcyBhIHNwZWVkIG9wdGltaXphdGlvbiB0aGF0IGFsbG93cyByZXRyaWV2YWwgb2Ygc3RhcnRpbmcgdmFsdWVzIHF1aWNrZXIpXG5cdFx0ICogICAgICAgICAgICAgICAgICAgICAgLSBmb3JtYXR0ZXI6IGEgZnVuY3Rpb24gdGhhdCBmb3JtYXRzIGFueSB2YWx1ZSByZWNlaXZlZCBmb3IgdGhpcyBzcGVjaWFsIHByb3BlcnR5IChmb3IgZXhhbXBsZSwgYm94U2hhZG93IGNvdWxkIHRha2UgXCI1cHggNXB4IHJlZFwiIGFuZCBmb3JtYXQgaXQgdG8gXCI1cHggNXB4IDBweCAwcHggcmVkXCIgc28gdGhhdCBib3RoIHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgaGF2ZSBhIGNvbW1vbiBvcmRlciBhbmQgcXVhbnRpdHkgb2YgdmFsdWVzLilcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIHByZWZpeDogaWYgdHJ1ZSwgd2UnbGwgZGV0ZXJtaW5lIHdoZXRoZXIgb3Igbm90IHRoaXMgcHJvcGVydHkgcmVxdWlyZXMgYSB2ZW5kb3IgcHJlZml4IChsaWtlIFdlYmtpdCBvciBNb3ogb3IgbXMgb3IgTylcblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIGNvbG9yOiBzZXQgdGhpcyB0byB0cnVlIGlmIHRoZSB2YWx1ZSBmb3IgdGhpcyBTcGVjaWFsUHJvcCBtYXkgY29udGFpbiBjb2xvci1yZWxhdGVkIHZhbHVlcyBsaWtlIHJnYigpLCByZ2JhKCksIGV0Yy5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIHByaW9yaXR5OiBwcmlvcml0eSBpbiB0aGUgbGlua2VkIGxpc3Qgb3JkZXIuIEhpZ2hlciBwcmlvcml0eSBTcGVjaWFsUHJvcHMgd2lsbCBiZSB1cGRhdGVkIGJlZm9yZSBsb3dlciBwcmlvcml0eSBvbmVzLiBUaGUgZGVmYXVsdCBwcmlvcml0eSBpcyAwLlxuXHRcdCAqICAgICAgICAgICAgICAgICAgICAgIC0gbXVsdGk6IGlmIHRydWUsIHRoZSBmb3JtYXR0ZXIgc2hvdWxkIGFjY29tbW9kYXRlIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YgdmFsdWVzLCBsaWtlIGJveFNoYWRvdyBjb3VsZCBoYXZlIG11bHRpcGxlIGJveFNoYWRvd3MgbGlzdGVkIG91dC5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIGNvbGxhcHNpYmxlOiBpZiB0cnVlLCB0aGUgZm9ybWF0dGVyIHNob3VsZCB0cmVhdCB0aGUgdmFsdWUgbGlrZSBpdCdzIGEgdG9wL3JpZ2h0L2JvdHRvbS9sZWZ0IHZhbHVlIHRoYXQgY291bGQgYmUgY29sbGFwc2VkLCBsaWtlIFwiNXB4XCIgd291bGQgYXBwbHkgdG8gYWxsLCBcIjVweCwgMTBweFwiIHdvdWxkIHVzZSA1cHggZm9yIHRvcC9ib3R0b20gYW5kIDEwcHggZm9yIHJpZ2h0L2xlZnQsIGV0Yy5cblx0XHQgKiAgICAgICAgICAgICAgICAgICAgICAtIGtleXdvcmQ6IGEgc3BlY2lhbCBrZXl3b3JkIHRoYXQgY2FuIFtvcHRpb25hbGx5XSBiZSBmb3VuZCBpbnNpZGUgdGhlIHZhbHVlIChsaWtlIFwiaW5zZXRcIiBmb3IgYm94U2hhZG93KS4gVGhpcyBhbGxvd3MgdXMgdG8gdmFsaWRhdGUgYmVnaW5uaW5nL2VuZGluZyB2YWx1ZXMgdG8gbWFrZSBzdXJlIHRoZXkgbWF0Y2ggKGlmIHRoZSBrZXl3b3JkIGlzIGZvdW5kIGluIG9uZSwgaXQnbGwgYmUgYWRkZWQgdG8gdGhlIG90aGVyIGZvciBjb25zaXN0ZW5jeSBieSBkZWZhdWx0KS5cblx0XHQgKi9cblx0XHR2YXIgU3BlY2lhbFByb3AgPSBmdW5jdGlvbihwLCBvcHRpb25zKSB7XG5cdFx0XHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdFx0XHR0aGlzLnAgPSBvcHRpb25zLnByZWZpeCA/IF9jaGVja1Byb3BQcmVmaXgocCkgfHwgcCA6IHA7XG5cdFx0XHRcdF9zcGVjaWFsUHJvcHNbcF0gPSBfc3BlY2lhbFByb3BzW3RoaXMucF0gPSB0aGlzO1xuXHRcdFx0XHR0aGlzLmZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0dGVyIHx8IF9nZXRGb3JtYXR0ZXIob3B0aW9ucy5kZWZhdWx0VmFsdWUsIG9wdGlvbnMuY29sb3IsIG9wdGlvbnMuY29sbGFwc2libGUsIG9wdGlvbnMubXVsdGkpO1xuXHRcdFx0XHRpZiAob3B0aW9ucy5wYXJzZXIpIHtcblx0XHRcdFx0XHR0aGlzLnBhcnNlID0gb3B0aW9ucy5wYXJzZXI7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5jbHJzID0gb3B0aW9ucy5jb2xvcjtcblx0XHRcdFx0dGhpcy5tdWx0aSA9IG9wdGlvbnMubXVsdGk7XG5cdFx0XHRcdHRoaXMua2V5d29yZCA9IG9wdGlvbnMua2V5d29yZDtcblx0XHRcdFx0dGhpcy5kZmx0ID0gb3B0aW9ucy5kZWZhdWx0VmFsdWU7XG5cdFx0XHRcdHRoaXMucHIgPSBvcHRpb25zLnByaW9yaXR5IHx8IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvL3Nob3J0Y3V0IGZvciBjcmVhdGluZyBhIG5ldyBTcGVjaWFsUHJvcCB0aGF0IGNhbiBhY2NlcHQgbXVsdGlwbGUgcHJvcGVydGllcyBhcyBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IChoZWxwcyBtaW5pZmljYXRpb24pLiBkZmx0IGNhbiBiZSBhbiBhcnJheSBmb3IgbXVsdGlwbGUgdmFsdWVzICh3ZSBkb24ndCBkbyBhIGNvbW1hLWRlbGltaXRlZCBsaXN0IGJlY2F1c2UgdGhlIGRlZmF1bHQgdmFsdWUgbWF5IGNvbnRhaW4gY29tbWFzLCBsaWtlIHJlY3QoMHB4LDBweCwwcHgsMHB4KSkuIFdlIGF0dGFjaCB0aGlzIG1ldGhvZCB0byB0aGUgU3BlY2lhbFByb3AgY2xhc3Mvb2JqZWN0IGluc3RlYWQgb2YgdXNpbmcgYSBwcml2YXRlIF9jcmVhdGVTcGVjaWFsUHJvcCgpIG1ldGhvZCBzbyB0aGF0IHdlIGNhbiB0YXAgaW50byBpdCBleHRlcm5hbGx5IGlmIG5lY2Vzc2FyeSwgbGlrZSBmcm9tIGFub3RoZXIgcGx1Z2luLlxuXHRcdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wID0gX2ludGVybmFscy5fcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AgPSBmdW5jdGlvbihwLCBvcHRpb25zLCBkZWZhdWx0cykge1xuXHRcdFx0XHRpZiAodHlwZW9mKG9wdGlvbnMpICE9PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdFx0b3B0aW9ucyA9IHtwYXJzZXI6ZGVmYXVsdHN9OyAvL3RvIG1ha2UgYmFja3dhcmRzIGNvbXBhdGlibGUgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBCZXppZXJQbHVnaW4gYW5kIFRocm93UHJvcHNQbHVnaW5cblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgYSA9IHAuc3BsaXQoXCIsXCIpLFxuXHRcdFx0XHRcdGQgPSBvcHRpb25zLmRlZmF1bHRWYWx1ZSxcblx0XHRcdFx0XHRpLCB0ZW1wO1xuXHRcdFx0XHRkZWZhdWx0cyA9IGRlZmF1bHRzIHx8IFtkXTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRvcHRpb25zLnByZWZpeCA9IChpID09PSAwICYmIG9wdGlvbnMucHJlZml4KTtcblx0XHRcdFx0XHRvcHRpb25zLmRlZmF1bHRWYWx1ZSA9IGRlZmF1bHRzW2ldIHx8IGQ7XG5cdFx0XHRcdFx0dGVtcCA9IG5ldyBTcGVjaWFsUHJvcChhW2ldLCBvcHRpb25zKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly9jcmVhdGVzIGEgcGxhY2Vob2xkZXIgc3BlY2lhbCBwcm9wIGZvciBhIHBsdWdpbiBzbyB0aGF0IHRoZSBwcm9wZXJ0eSBnZXRzIGNhdWdodCB0aGUgZmlyc3QgdGltZSBhIHR3ZWVuIG9mIGl0IGlzIGF0dGVtcHRlZCwgYW5kIGF0IHRoYXQgdGltZSBpdCBtYWtlcyB0aGUgcGx1Z2luIHJlZ2lzdGVyIGl0c2VsZiwgdGh1cyB0YWtpbmcgb3ZlciBmb3IgYWxsIGZ1dHVyZSB0d2VlbnMgb2YgdGhhdCBwcm9wZXJ0eS4gVGhpcyBhbGxvd3MgdXMgdG8gbm90IG1hbmRhdGUgdGhhdCB0aGluZ3MgbG9hZCBpbiBhIHBhcnRpY3VsYXIgb3JkZXIgYW5kIGl0IGFsc28gYWxsb3dzIHVzIHRvIGxvZygpIGFuIGVycm9yIHRoYXQgaW5mb3JtcyB0aGUgdXNlciB3aGVuIHRoZXkgYXR0ZW1wdCB0byB0d2VlbiBhbiBleHRlcm5hbCBwbHVnaW4tcmVsYXRlZCBwcm9wZXJ0eSB3aXRob3V0IGxvYWRpbmcgaXRzIC5qcyBmaWxlLlxuXHRcdFx0X3JlZ2lzdGVyUGx1Z2luUHJvcCA9IF9pbnRlcm5hbHMuX3JlZ2lzdGVyUGx1Z2luUHJvcCA9IGZ1bmN0aW9uKHApIHtcblx0XHRcdFx0aWYgKCFfc3BlY2lhbFByb3BzW3BdKSB7XG5cdFx0XHRcdFx0dmFyIHBsdWdpbk5hbWUgPSBwLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcC5zdWJzdHIoMSkgKyBcIlBsdWdpblwiO1xuXHRcdFx0XHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChwLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdFx0XHRcdHZhciBwbHVnaW5DbGFzcyA9IF9nbG9iYWxzLmNvbS5ncmVlbnNvY2sucGx1Z2luc1twbHVnaW5OYW1lXTtcblx0XHRcdFx0XHRcdGlmICghcGx1Z2luQ2xhc3MpIHtcblx0XHRcdFx0XHRcdFx0X2xvZyhcIkVycm9yOiBcIiArIHBsdWdpbk5hbWUgKyBcIiBqcyBmaWxlIG5vdCBsb2FkZWQuXCIpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRwbHVnaW5DbGFzcy5fY3NzUmVnaXN0ZXIoKTtcblx0XHRcdFx0XHRcdHJldHVybiBfc3BlY2lhbFByb3BzW3BdLnBhcnNlKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpO1xuXHRcdFx0XHRcdH19KTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXG5cdFx0cCA9IFNwZWNpYWxQcm9wLnByb3RvdHlwZTtcblxuXHRcdC8qKlxuXHRcdCAqIEFsaWFzIGZvciBfcGFyc2VDb21wbGV4KCkgdGhhdCBhdXRvbWF0aWNhbGx5IHBsdWdzIGluIGNlcnRhaW4gdmFsdWVzIGZvciB0aGlzIFNwZWNpYWxQcm9wLCBsaWtlIGl0cyBwcm9wZXJ0eSBuYW1lLCB3aGV0aGVyIG9yIG5vdCBjb2xvcnMgc2hvdWxkIGJlIHNlbnNlZCwgdGhlIGRlZmF1bHQgdmFsdWUsIGFuZCBwcmlvcml0eS4gSXQgYWxzbyBsb29rcyBmb3IgYW55IGtleXdvcmQgdGhhdCB0aGUgU3BlY2lhbFByb3AgZGVmaW5lcyAobGlrZSBcImluc2V0XCIgZm9yIGJveFNoYWRvdykgYW5kIGVuc3VyZXMgdGhhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmRpbmcgdmFsdWVzIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIHZhbHVlcyBmb3IgU3BlY2lhbFByb3BzIHdoZXJlIG11bHRpIGlzIHRydWUgKGxpa2UgYm94U2hhZG93IGFuZCB0ZXh0U2hhZG93IGNhbiBoYXZlIGEgY29tbWEtZGVsaW1pdGVkIGxpc3QpXG5cdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IHRhcmdldCBlbGVtZW50XG5cdFx0ICogQHBhcmFtIHsoc3RyaW5nfG51bWJlcnxvYmplY3QpfSBiIGJlZ2lubmluZyB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXJ8b2JqZWN0KX0gZSBlbmRpbmcgKGRlc3RpbmF0aW9uKSB2YWx1ZVxuXHRcdCAqIEBwYXJhbSB7Q1NTUHJvcFR3ZWVuPX0gcHQgbmV4dCBDU1NQcm9wVHdlZW4gaW4gdGhlIGxpbmtlZCBsaXN0XG5cdFx0ICogQHBhcmFtIHtUd2VlblBsdWdpbj19IHBsdWdpbiBJZiBhbm90aGVyIHBsdWdpbiB3aWxsIGJlIHR3ZWVuaW5nIHRoZSBjb21wbGV4IHZhbHVlLCB0aGF0IFR3ZWVuUGx1Z2luIGluc3RhbmNlIGdvZXMgaGVyZS5cblx0XHQgKiBAcGFyYW0ge2Z1bmN0aW9uPX0gc2V0UmF0aW8gSWYgYSBjdXN0b20gc2V0UmF0aW8oKSBtZXRob2Qgc2hvdWxkIGJlIHVzZWQgdG8gaGFuZGxlIHRoaXMgY29tcGxleCB2YWx1ZSwgdGhhdCBnb2VzIGhlcmUuXG5cdFx0ICogQHJldHVybiB7Q1NTUHJvcFR3ZWVuPX0gRmlyc3QgQ1NTUHJvcFR3ZWVuIGluIHRoZSBsaW5rZWQgbGlzdFxuXHRcdCAqL1xuXHRcdHAucGFyc2VDb21wbGV4ID0gZnVuY3Rpb24odCwgYiwgZSwgcHQsIHBsdWdpbiwgc2V0UmF0aW8pIHtcblx0XHRcdHZhciBrd2QgPSB0aGlzLmtleXdvcmQsXG5cdFx0XHRcdGksIGJhLCBlYSwgbCwgYmksIGVpO1xuXHRcdFx0Ly9pZiB0aGlzIFNwZWNpYWxQcm9wJ3MgdmFsdWUgY2FuIGNvbnRhaW4gYSBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiB2YWx1ZXMgKGxpa2UgYm94U2hhZG93IG9yIHRleHRTaGFkb3cpLCB3ZSBtdXN0IHBhcnNlIHRoZW0gaW4gYSBzcGVjaWFsIHdheSwgYW5kIGxvb2sgZm9yIGEga2V5d29yZCAobGlrZSBcImluc2V0XCIgZm9yIGJveFNoYWRvdykgYW5kIGVuc3VyZSB0aGF0IHRoZSBiZWdpbm5pbmcgYW5kIGVuZGluZyBCT1RIIGhhdmUgaXQgaWYgdGhlIGVuZCBkZWZpbmVzIGl0IGFzIHN1Y2guIFdlIGFsc28gbXVzdCBlbnN1cmUgdGhhdCB0aGVyZSBhcmUgYW4gZXF1YWwgbnVtYmVyIG9mIHZhbHVlcyBzcGVjaWZpZWQgKHdlIGNhbid0IHR3ZWVuIDEgYm94U2hhZG93IHRvIDMgZm9yIGV4YW1wbGUpXG5cdFx0XHRpZiAodGhpcy5tdWx0aSkgaWYgKF9jb21tYXNPdXRzaWRlUGFyZW5FeHAudGVzdChlKSB8fCBfY29tbWFzT3V0c2lkZVBhcmVuRXhwLnRlc3QoYikpIHtcblx0XHRcdFx0YmEgPSBiLnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCJ8XCIpLnNwbGl0KFwifFwiKTtcblx0XHRcdFx0ZWEgPSBlLnJlcGxhY2UoX2NvbW1hc091dHNpZGVQYXJlbkV4cCwgXCJ8XCIpLnNwbGl0KFwifFwiKTtcblx0XHRcdH0gZWxzZSBpZiAoa3dkKSB7XG5cdFx0XHRcdGJhID0gW2JdO1xuXHRcdFx0XHRlYSA9IFtlXTtcblx0XHRcdH1cblx0XHRcdGlmIChlYSkge1xuXHRcdFx0XHRsID0gKGVhLmxlbmd0aCA+IGJhLmxlbmd0aCkgPyBlYS5sZW5ndGggOiBiYS5sZW5ndGg7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRiID0gYmFbaV0gPSBiYVtpXSB8fCB0aGlzLmRmbHQ7XG5cdFx0XHRcdFx0ZSA9IGVhW2ldID0gZWFbaV0gfHwgdGhpcy5kZmx0O1xuXHRcdFx0XHRcdGlmIChrd2QpIHtcblx0XHRcdFx0XHRcdGJpID0gYi5pbmRleE9mKGt3ZCk7XG5cdFx0XHRcdFx0XHRlaSA9IGUuaW5kZXhPZihrd2QpO1xuXHRcdFx0XHRcdFx0aWYgKGJpICE9PSBlaSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoZWkgPT09IC0xKSB7IC8vaWYgdGhlIGtleXdvcmQgaXNuJ3QgaW4gdGhlIGVuZCB2YWx1ZSwgcmVtb3ZlIGl0IGZyb20gdGhlIGJlZ2lubmluZyBvbmUuXG5cdFx0XHRcdFx0XHRcdFx0YmFbaV0gPSBiYVtpXS5zcGxpdChrd2QpLmpvaW4oXCJcIik7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoYmkgPT09IC0xKSB7IC8vaWYgdGhlIGtleXdvcmQgaXNuJ3QgaW4gdGhlIGJlZ2lubmluZywgYWRkIGl0LlxuXHRcdFx0XHRcdFx0XHRcdGJhW2ldICs9IFwiIFwiICsga3dkO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGIgPSBiYS5qb2luKFwiLCBcIik7XG5cdFx0XHRcdGUgPSBlYS5qb2luKFwiLCBcIik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gX3BhcnNlQ29tcGxleCh0LCB0aGlzLnAsIGIsIGUsIHRoaXMuY2xycywgdGhpcy5kZmx0LCBwdCwgdGhpcy5wciwgcGx1Z2luLCBzZXRSYXRpbyk7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIEFjY2VwdHMgYSB0YXJnZXQgYW5kIGVuZCB2YWx1ZSBhbmQgc3BpdHMgYmFjayBhIENTU1Byb3BUd2VlbiB0aGF0IGhhcyBiZWVuIGluc2VydGVkIGludG8gdGhlIENTU1BsdWdpbidzIGxpbmtlZCBsaXN0IGFuZCBjb25mb3JtcyB3aXRoIGFsbCB0aGUgY29udmVudGlvbnMgd2UgdXNlIGludGVybmFsbHksIGxpa2UgdHlwZTotMSwgMCwgMSwgb3IgMiwgc2V0dGluZyB1cCBhbnkgZXh0cmEgcHJvcGVydHkgdHdlZW5zLCBwcmlvcml0eSwgZXRjLiBGb3IgZXhhbXBsZSwgaWYgd2UgaGF2ZSBhIGJveFNoYWRvdyBTcGVjaWFsUHJvcCBhbmQgY2FsbDpcblx0XHQgKiB0aGlzLl9maXJzdFBUID0gc3AucGFyc2UoZWxlbWVudCwgXCI1cHggMTBweCAyMHB4IHJnYigyNTUwLDEwMiw1MSlcIiwgXCJib3hTaGFkb3dcIiwgdGhpcyk7XG5cdFx0ICogSXQgc2hvdWxkIGZpZ3VyZSBvdXQgdGhlIHN0YXJ0aW5nIHZhbHVlIG9mIHRoZSBlbGVtZW50J3MgYm94U2hhZG93LCBjb21wYXJlIGl0IHRvIHRoZSBwcm92aWRlZCBlbmQgdmFsdWUgYW5kIGNyZWF0ZSBhbGwgdGhlIG5lY2Vzc2FyeSBDU1NQcm9wVHdlZW5zIG9mIHRoZSBhcHByb3ByaWF0ZSB0eXBlcyB0byB0d2VlbiB0aGUgYm94U2hhZG93LiBUaGUgQ1NTUHJvcFR3ZWVuIHRoYXQgZ2V0cyBzcGl0IGJhY2sgc2hvdWxkIGFscmVhZHkgYmUgaW5zZXJ0ZWQgaW50byB0aGUgbGlua2VkIGxpc3QgKHRoZSA0dGggcGFyYW1ldGVyIGlzIHRoZSBjdXJyZW50IGhlYWQsIHNvIHByZXBlbmQgdG8gdGhhdCkuXG5cdFx0ICogQHBhcmFtIHshT2JqZWN0fSB0IFRhcmdldCBvYmplY3Qgd2hvc2UgcHJvcGVydHkgaXMgYmVpbmcgdHdlZW5lZFxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0fSBlIEVuZCB2YWx1ZSBhcyBwcm92aWRlZCBpbiB0aGUgdmFycyBvYmplY3QgKHR5cGljYWxseSBhIHN0cmluZywgYnV0IG5vdCBhbHdheXMgLSBsaWtlIGEgdGhyb3dQcm9wcyB3b3VsZCBiZSBhbiBvYmplY3QpLlxuXHRcdCAqIEBwYXJhbSB7IXN0cmluZ30gcCBQcm9wZXJ0eSBuYW1lXG5cdFx0ICogQHBhcmFtIHshQ1NTUGx1Z2lufSBjc3NwIFRoZSBDU1NQbHVnaW4gaW5zdGFuY2UgdGhhdCBzaG91bGQgYmUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdHdlZW4uXG5cdFx0ICogQHBhcmFtIHs/Q1NTUHJvcFR3ZWVufSBwdCBUaGUgQ1NTUHJvcFR3ZWVuIHRoYXQgaXMgdGhlIGN1cnJlbnQgaGVhZCBvZiB0aGUgbGlua2VkIGxpc3QgKHdlJ2xsIHByZXBlbmQgdG8gaXQpXG5cdFx0ICogQHBhcmFtIHtUd2VlblBsdWdpbj19IHBsdWdpbiBJZiBhIHBsdWdpbiB3aWxsIGJlIHVzZWQgdG8gdHdlZW4gdGhlIHBhcnNlZCB2YWx1ZSwgdGhpcyBpcyB0aGUgcGx1Z2luIGluc3RhbmNlLlxuXHRcdCAqIEBwYXJhbSB7T2JqZWN0PX0gdmFycyBPcmlnaW5hbCB2YXJzIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBkYXRhIGZvciBwYXJzaW5nLlxuXHRcdCAqIEByZXR1cm4ge0NTU1Byb3BUd2Vlbn0gVGhlIGZpcnN0IENTU1Byb3BUd2VlbiBpbiB0aGUgbGlua2VkIGxpc3Qgd2hpY2ggaW5jbHVkZXMgdGhlIG5ldyBvbmUocykgYWRkZWQgYnkgdGhlIHBhcnNlKCkgY2FsbC5cblx0XHQgKi9cblx0XHRwLnBhcnNlID0gZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbiwgdmFycykge1xuXHRcdFx0cmV0dXJuIHRoaXMucGFyc2VDb21wbGV4KHQuc3R5bGUsIHRoaXMuZm9ybWF0KF9nZXRTdHlsZSh0LCB0aGlzLnAsIF9jcywgZmFsc2UsIHRoaXMuZGZsdCkpLCB0aGlzLmZvcm1hdChlKSwgcHQsIHBsdWdpbik7XG5cdFx0fTtcblxuXHRcdC8qKlxuXHRcdCAqIFJlZ2lzdGVycyBhIHNwZWNpYWwgcHJvcGVydHkgdGhhdCBzaG91bGQgYmUgaW50ZXJjZXB0ZWQgZnJvbSBhbnkgXCJjc3NcIiBvYmplY3RzIGRlZmluZWQgaW4gdHdlZW5zLiBUaGlzIGFsbG93cyB5b3UgdG8gaGFuZGxlIHRoZW0gaG93ZXZlciB5b3Ugd2FudCB3aXRob3V0IENTU1BsdWdpbiBkb2luZyBpdCBmb3IgeW91LiBUaGUgMm5kIHBhcmFtZXRlciBzaG91bGQgYmUgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgMyBwYXJhbWV0ZXJzOlxuXHRcdCAqICAxKSBUYXJnZXQgb2JqZWN0IHdob3NlIHByb3BlcnR5IHNob3VsZCBiZSB0d2VlbmVkICh0eXBpY2FsbHkgYSBET00gZWxlbWVudClcblx0XHQgKiAgMikgVGhlIGVuZC9kZXN0aW5hdGlvbiB2YWx1ZSAoY291bGQgYmUgYSBzdHJpbmcsIG51bWJlciwgb2JqZWN0LCBvciB3aGF0ZXZlciB5b3Ugd2FudClcblx0XHQgKiAgMykgVGhlIHR3ZWVuIGluc3RhbmNlICh5b3UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB0aGlzLCBidXQgaXQgY2FuIGJlIHVzZWZ1bCBmb3IgbG9va2luZyB1cCBpbmZvcm1hdGlvbiBsaWtlIHRoZSBkdXJhdGlvbilcblx0XHQgKlxuXHRcdCAqIFRoZW4sIHlvdXIgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgY2FsbGVkIGVhY2ggdGltZSB0aGUgdHdlZW4gZ2V0cyByZW5kZXJlZCwgcGFzc2luZyBhIG51bWVyaWMgXCJyYXRpb1wiIHBhcmFtZXRlciB0byB5b3VyIGZ1bmN0aW9uIHRoYXQgaW5kaWNhdGVzIHRoZSBjaGFuZ2UgZmFjdG9yICh1c3VhbGx5IGJldHdlZW4gMCBhbmQgMSkuIEZvciBleGFtcGxlOlxuXHRcdCAqXG5cdFx0ICogQ1NTUGx1Z2luLnJlZ2lzdGVyU3BlY2lhbFByb3AoXCJteUN1c3RvbVByb3BcIiwgZnVuY3Rpb24odGFyZ2V0LCB2YWx1ZSwgdHdlZW4pIHtcblx0XHQgKiAgICAgIHZhciBzdGFydCA9IHRhcmdldC5zdHlsZS53aWR0aDtcblx0XHQgKiAgICAgIHJldHVybiBmdW5jdGlvbihyYXRpbykge1xuXHRcdCAqICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUud2lkdGggPSAoc3RhcnQgKyB2YWx1ZSAqIHJhdGlvKSArIFwicHhcIjtcblx0XHQgKiAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzZXQgd2lkdGggdG8gXCIgKyB0YXJnZXQuc3R5bGUud2lkdGgpO1xuXHRcdCAqICAgICAgICAgIH1cblx0XHQgKiB9LCAwKTtcblx0XHQgKlxuXHRcdCAqIFRoZW4sIHdoZW4gSSBkbyB0aGlzIHR3ZWVuLCBpdCB3aWxsIHRyaWdnZXIgbXkgc3BlY2lhbCBwcm9wZXJ0eTpcblx0XHQgKlxuXHRcdCAqIFR3ZWVuTGl0ZS50byhlbGVtZW50LCAxLCB7Y3NzOntteUN1c3RvbVByb3A6MTAwfX0pO1xuXHRcdCAqXG5cdFx0ICogSW4gdGhlIGV4YW1wbGUsIG9mIGNvdXJzZSwgd2UncmUganVzdCBjaGFuZ2luZyB0aGUgd2lkdGgsIGJ1dCB5b3UgY2FuIGRvIGFueXRoaW5nIHlvdSB3YW50LlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHshc3RyaW5nfSBuYW1lIFByb3BlcnR5IG5hbWUgKG9yIGNvbW1hLWRlbGltaXRlZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzKSB0aGF0IHNob3VsZCBiZSBpbnRlcmNlcHRlZCBhbmQgaGFuZGxlZCBieSB5b3VyIGZ1bmN0aW9uLiBGb3IgZXhhbXBsZSwgaWYgSSBkZWZpbmUgXCJteUN1c3RvbVByb3BcIiwgdGhlbiBpdCB3b3VsZCBoYW5kbGUgdGhhdCBwb3J0aW9uIG9mIHRoZSBmb2xsb3dpbmcgdHdlZW46IFR3ZWVuTGl0ZS50byhlbGVtZW50LCAxLCB7Y3NzOntteUN1c3RvbVByb3A6MTAwfX0pXG5cdFx0ICogQHBhcmFtIHshZnVuY3Rpb24oT2JqZWN0LCBPYmplY3QsIE9iamVjdCwgc3RyaW5nKTpmdW5jdGlvbihudW1iZXIpfSBvbkluaXRUd2VlbiBUaGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIGEgdHdlZW4gb2YgdGhpcyBzcGVjaWFsIHByb3BlcnR5IGlzIHBlcmZvcm1lZC4gVGhlIGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSA0IHBhcmFtZXRlcnM6IDEpIFRhcmdldCBvYmplY3QgdGhhdCBzaG91bGQgYmUgdHdlZW5lZCwgMikgVmFsdWUgdGhhdCB3YXMgcGFzc2VkIHRvIHRoZSB0d2VlbiwgMykgVGhlIHR3ZWVuIGluc3RhbmNlIGl0c2VsZiAocmFyZWx5IHVzZWQpLCBhbmQgNCkgVGhlIHByb3BlcnR5IG5hbWUgdGhhdCdzIGJlaW5nIHR3ZWVuZWQuIFlvdXIgZnVuY3Rpb24gc2hvdWxkIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCBvbiBldmVyeSB1cGRhdGUgb2YgdGhlIHR3ZWVuLiBUaGF0IGZ1bmN0aW9uIHdpbGwgcmVjZWl2ZSBhIHNpbmdsZSBwYXJhbWV0ZXIgdGhhdCBpcyBhIFwiY2hhbmdlIGZhY3RvclwiIHZhbHVlICh0eXBpY2FsbHkgYmV0d2VlbiAwIGFuZCAxKSBpbmRpY2F0aW5nIHRoZSBhbW91bnQgb2YgY2hhbmdlIGFzIGEgcmF0aW8uIFlvdSBjYW4gdXNlIHRoaXMgdG8gZGV0ZXJtaW5lIGhvdyB0byBzZXQgdGhlIHZhbHVlcyBhcHByb3ByaWF0ZWx5IGluIHlvdXIgZnVuY3Rpb24uXG5cdFx0ICogQHBhcmFtIHtudW1iZXI9fSBwcmlvcml0eSBQcmlvcml0eSB0aGF0IGhlbHBzIHRoZSBlbmdpbmUgZGV0ZXJtaW5lIHRoZSBvcmRlciBpbiB3aGljaCB0byBzZXQgdGhlIHByb3BlcnRpZXMgKGRlZmF1bHQ6IDApLiBIaWdoZXIgcHJpb3JpdHkgcHJvcGVydGllcyB3aWxsIGJlIHVwZGF0ZWQgYmVmb3JlIGxvd2VyIHByaW9yaXR5IG9uZXMuXG5cdFx0ICovXG5cdFx0Q1NTUGx1Z2luLnJlZ2lzdGVyU3BlY2lhbFByb3AgPSBmdW5jdGlvbihuYW1lLCBvbkluaXRUd2VlbiwgcHJpb3JpdHkpIHtcblx0XHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChuYW1lLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdFx0dmFyIHJ2ID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgMiwgcCwgZmFsc2UsIHByaW9yaXR5KTtcblx0XHRcdFx0cnYucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHRydi5zZXRSYXRpbyA9IG9uSW5pdFR3ZWVuKHQsIGUsIGNzc3AuX3R3ZWVuLCBwKTtcblx0XHRcdFx0cmV0dXJuIHJ2O1xuXHRcdFx0fSwgcHJpb3JpdHk6cHJpb3JpdHl9KTtcblx0XHR9O1xuXG5cblxuXG5cblxuXHRcdC8vdHJhbnNmb3JtLXJlbGF0ZWQgbWV0aG9kcyBhbmQgcHJvcGVydGllc1xuXHRcdENTU1BsdWdpbi51c2VTVkdUcmFuc2Zvcm1BdHRyID0gX2lzU2FmYXJpIHx8IF9pc0ZpcmVmb3g7IC8vU2FmYXJpIGFuZCBGaXJlZm94IGJvdGggaGF2ZSBzb21lIHJlbmRlcmluZyBidWdzIHdoZW4gYXBwbHlpbmcgQ1NTIHRyYW5zZm9ybXMgdG8gU1ZHIGVsZW1lbnRzLCBzbyBkZWZhdWx0IHRvIHVzaW5nIHRoZSBcInRyYW5zZm9ybVwiIGF0dHJpYnV0ZSBpbnN0ZWFkICh1c2VycyBjYW4gb3ZlcnJpZGUgdGhpcykuXG5cdFx0dmFyIF90cmFuc2Zvcm1Qcm9wcyA9IChcInNjYWxlWCxzY2FsZVksc2NhbGVaLHgseSx6LHNrZXdYLHNrZXdZLHJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblkscGVyc3BlY3RpdmUseFBlcmNlbnQseVBlcmNlbnRcIikuc3BsaXQoXCIsXCIpLFxuXHRcdFx0X3RyYW5zZm9ybVByb3AgPSBfY2hlY2tQcm9wUHJlZml4KFwidHJhbnNmb3JtXCIpLCAvL3RoZSBKYXZhc2NyaXB0IChjYW1lbENhc2UpIHRyYW5zZm9ybSBwcm9wZXJ0eSwgbGlrZSBtc1RyYW5zZm9ybSwgV2Via2l0VHJhbnNmb3JtLCBNb3pUcmFuc2Zvcm0sIG9yIE9UcmFuc2Zvcm0uXG5cdFx0XHRfdHJhbnNmb3JtUHJvcENTUyA9IF9wcmVmaXhDU1MgKyBcInRyYW5zZm9ybVwiLFxuXHRcdFx0X3RyYW5zZm9ybU9yaWdpblByb3AgPSBfY2hlY2tQcm9wUHJlZml4KFwidHJhbnNmb3JtT3JpZ2luXCIpLFxuXHRcdFx0X3N1cHBvcnRzM0QgPSAoX2NoZWNrUHJvcFByZWZpeChcInBlcnNwZWN0aXZlXCIpICE9PSBudWxsKSxcblx0XHRcdFRyYW5zZm9ybSA9IF9pbnRlcm5hbHMuVHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRoaXMucGVyc3BlY3RpdmUgPSBwYXJzZUZsb2F0KENTU1BsdWdpbi5kZWZhdWx0VHJhbnNmb3JtUGVyc3BlY3RpdmUpIHx8IDA7XG5cdFx0XHRcdHRoaXMuZm9yY2UzRCA9IChDU1NQbHVnaW4uZGVmYXVsdEZvcmNlM0QgPT09IGZhbHNlIHx8ICFfc3VwcG9ydHMzRCkgPyBmYWxzZSA6IENTU1BsdWdpbi5kZWZhdWx0Rm9yY2UzRCB8fCBcImF1dG9cIjtcblx0XHRcdH0sXG5cdFx0XHRfU1ZHRWxlbWVudCA9IHdpbmRvdy5TVkdFbGVtZW50LFxuXHRcdFx0X3VzZVNWR1RyYW5zZm9ybUF0dHIsXG5cdFx0XHQvL1NvbWUgYnJvd3NlcnMgKGxpa2UgRmlyZWZveCBhbmQgSUUpIGRvbid0IGhvbm9yIHRyYW5zZm9ybS1vcmlnaW4gcHJvcGVybHkgaW4gU1ZHIGVsZW1lbnRzLCBzbyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGFkanVzdCB0aGUgbWF0cml4IGFjY29yZGluZ2x5LiBXZSBmZWF0dXJlIGRldGVjdCBoZXJlIHJhdGhlciB0aGFuIGFsd2F5cyBkb2luZyB0aGUgY29udmVyc2lvbiBmb3IgY2VydGFpbiBicm93c2VycyBiZWNhdXNlIHRoZXkgbWF5IGZpeCB0aGUgcHJvYmxlbSBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG5cblx0XHRcdF9jcmVhdGVTVkcgPSBmdW5jdGlvbih0eXBlLCBjb250YWluZXIsIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0dmFyIGVsZW1lbnQgPSBfZG9jLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIHR5cGUpLFxuXHRcdFx0XHRcdHJlZyA9IC8oW2Etel0pKFtBLVpdKS9nLFxuXHRcdFx0XHRcdHA7XG5cdFx0XHRcdGZvciAocCBpbiBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCBwLnJlcGxhY2UocmVnLCBcIiQxLSQyXCIpLnRvTG93ZXJDYXNlKCksIGF0dHJpYnV0ZXNbcF0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQ7XG5cdFx0XHR9LFxuXHRcdFx0X2RvY0VsZW1lbnQgPSBfZG9jLmRvY3VtZW50RWxlbWVudCxcblx0XHRcdF9mb3JjZVNWR1RyYW5zZm9ybUF0dHIgPSAoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vSUUgYW5kIEFuZHJvaWQgc3RvY2sgZG9uJ3Qgc3VwcG9ydCBDU1MgdHJhbnNmb3JtcyBvbiBTVkcgZWxlbWVudHMsIHNvIHdlIG11c3Qgd3JpdGUgdGhlbSB0byB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUuIFdlIHBvcHVsYXRlIHRoaXMgdmFyaWFibGUgaW4gdGhlIF9wYXJzZVRyYW5zZm9ybSgpIG1ldGhvZCwgYW5kIG9ubHkgaWYvd2hlbiB3ZSBjb21lIGFjcm9zcyBhbiBTVkcgZWxlbWVudFxuXHRcdFx0XHR2YXIgZm9yY2UgPSBfaWVWZXJzIHx8ICgvQW5kcm9pZC9pLnRlc3QoX2FnZW50KSAmJiAhd2luZG93LmNocm9tZSksXG5cdFx0XHRcdFx0c3ZnLCByZWN0LCB3aWR0aDtcblx0XHRcdFx0aWYgKF9kb2MuY3JlYXRlRWxlbWVudE5TICYmICFmb3JjZSkgeyAvL0lFOCBhbmQgZWFybGllciBkb2Vzbid0IHN1cHBvcnQgU1ZHIGFueXdheVxuXHRcdFx0XHRcdHN2ZyA9IF9jcmVhdGVTVkcoXCJzdmdcIiwgX2RvY0VsZW1lbnQpO1xuXHRcdFx0XHRcdHJlY3QgPSBfY3JlYXRlU1ZHKFwicmVjdFwiLCBzdmcsIHt3aWR0aDoxMDAsIGhlaWdodDo1MCwgeDoxMDB9KTtcblx0XHRcdFx0XHR3aWR0aCA9IHJlY3QuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG5cdFx0XHRcdFx0cmVjdC5zdHlsZVtfdHJhbnNmb3JtT3JpZ2luUHJvcF0gPSBcIjUwJSA1MCVcIjtcblx0XHRcdFx0XHRyZWN0LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IFwic2NhbGVYKDAuNSlcIjtcblx0XHRcdFx0XHRmb3JjZSA9ICh3aWR0aCA9PT0gcmVjdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAmJiAhKF9pc0ZpcmVmb3ggJiYgX3N1cHBvcnRzM0QpKTsgLy9ub3RlOiBGaXJlZm94IGZhaWxzIHRoZSB0ZXN0IGV2ZW4gdGhvdWdoIGl0IGRvZXMgc3VwcG9ydCBDU1MgdHJhbnNmb3JtcyBpbiAzRC4gU2luY2Ugd2UgY2FuJ3QgcHVzaCAzRCBzdHVmZiBpbnRvIHRoZSB0cmFuc2Zvcm0gYXR0cmlidXRlLCB3ZSBmb3JjZSBGaXJlZm94IHRvIHBhc3MgdGhlIHRlc3QgaGVyZSAoYXMgbG9uZyBhcyBpdCBkb2VzIHRydWx5IHN1cHBvcnQgM0QpLlxuXHRcdFx0XHRcdF9kb2NFbGVtZW50LnJlbW92ZUNoaWxkKHN2Zyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZvcmNlO1xuXHRcdFx0fSkoKSxcblx0XHRcdF9wYXJzZVNWR09yaWdpbiA9IGZ1bmN0aW9uKGUsIGxvY2FsLCBkZWNvcmF0ZWUsIGFic29sdXRlLCBzbW9vdGhPcmlnaW4sIHNraXBSZWNvcmQpIHtcblx0XHRcdFx0dmFyIHRtID0gZS5fZ3NUcmFuc2Zvcm0sXG5cdFx0XHRcdFx0bSA9IF9nZXRNYXRyaXgoZSwgdHJ1ZSksXG5cdFx0XHRcdFx0diwgeCwgeSwgeE9yaWdpbiwgeU9yaWdpbiwgYSwgYiwgYywgZCwgdHgsIHR5LCBkZXRlcm1pbmFudCwgeE9yaWdpbk9sZCwgeU9yaWdpbk9sZDtcblx0XHRcdFx0aWYgKHRtKSB7XG5cdFx0XHRcdFx0eE9yaWdpbk9sZCA9IHRtLnhPcmlnaW47IC8vcmVjb3JkIHRoZSBvcmlnaW5hbCB2YWx1ZXMgYmVmb3JlIHdlIGFsdGVyIHRoZW0uXG5cdFx0XHRcdFx0eU9yaWdpbk9sZCA9IHRtLnlPcmlnaW47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFhYnNvbHV0ZSB8fCAodiA9IGFic29sdXRlLnNwbGl0KFwiIFwiKSkubGVuZ3RoIDwgMikge1xuXHRcdFx0XHRcdGIgPSBlLmdldEJCb3goKTtcblx0XHRcdFx0XHRsb2NhbCA9IF9wYXJzZVBvc2l0aW9uKGxvY2FsKS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0diA9IFsobG9jYWxbMF0uaW5kZXhPZihcIiVcIikgIT09IC0xID8gcGFyc2VGbG9hdChsb2NhbFswXSkgLyAxMDAgKiBiLndpZHRoIDogcGFyc2VGbG9hdChsb2NhbFswXSkpICsgYi54LFxuXHRcdFx0XHRcdFx0IChsb2NhbFsxXS5pbmRleE9mKFwiJVwiKSAhPT0gLTEgPyBwYXJzZUZsb2F0KGxvY2FsWzFdKSAvIDEwMCAqIGIuaGVpZ2h0IDogcGFyc2VGbG9hdChsb2NhbFsxXSkpICsgYi55XTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWNvcmF0ZWUueE9yaWdpbiA9IHhPcmlnaW4gPSBwYXJzZUZsb2F0KHZbMF0pO1xuXHRcdFx0XHRkZWNvcmF0ZWUueU9yaWdpbiA9IHlPcmlnaW4gPSBwYXJzZUZsb2F0KHZbMV0pO1xuXHRcdFx0XHRpZiAoYWJzb2x1dGUgJiYgbSAhPT0gX2lkZW50aXR5MkRNYXRyaXgpIHsgLy9pZiBzdmdPcmlnaW4gaXMgYmVpbmcgc2V0LCB3ZSBtdXN0IGludmVydCB0aGUgbWF0cml4IGFuZCBkZXRlcm1pbmUgd2hlcmUgdGhlIGFic29sdXRlIHBvaW50IGlzLCBmYWN0b3JpbmcgaW4gdGhlIGN1cnJlbnQgdHJhbnNmb3Jtcy4gT3RoZXJ3aXNlLCB0aGUgc3ZnT3JpZ2luIHdvdWxkIGJlIGJhc2VkIG9uIHRoZSBlbGVtZW50J3Mgbm9uLXRyYW5zZm9ybWVkIHBvc2l0aW9uIG9uIHRoZSBjYW52YXMuXG5cdFx0XHRcdFx0YSA9IG1bMF07XG5cdFx0XHRcdFx0YiA9IG1bMV07XG5cdFx0XHRcdFx0YyA9IG1bMl07XG5cdFx0XHRcdFx0ZCA9IG1bM107XG5cdFx0XHRcdFx0dHggPSBtWzRdO1xuXHRcdFx0XHRcdHR5ID0gbVs1XTtcblx0XHRcdFx0XHRkZXRlcm1pbmFudCA9IChhICogZCAtIGIgKiBjKTtcblx0XHRcdFx0XHR4ID0geE9yaWdpbiAqIChkIC8gZGV0ZXJtaW5hbnQpICsgeU9yaWdpbiAqICgtYyAvIGRldGVybWluYW50KSArICgoYyAqIHR5IC0gZCAqIHR4KSAvIGRldGVybWluYW50KTtcblx0XHRcdFx0XHR5ID0geE9yaWdpbiAqICgtYiAvIGRldGVybWluYW50KSArIHlPcmlnaW4gKiAoYSAvIGRldGVybWluYW50KSAtICgoYSAqIHR5IC0gYiAqIHR4KSAvIGRldGVybWluYW50KTtcblx0XHRcdFx0XHR4T3JpZ2luID0gZGVjb3JhdGVlLnhPcmlnaW4gPSB2WzBdID0geDtcblx0XHRcdFx0XHR5T3JpZ2luID0gZGVjb3JhdGVlLnlPcmlnaW4gPSB2WzFdID0geTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodG0pIHsgLy9hdm9pZCBqdW1wIHdoZW4gdHJhbnNmb3JtT3JpZ2luIGlzIGNoYW5nZWQgLSBhZGp1c3QgdGhlIHgveSB2YWx1ZXMgYWNjb3JkaW5nbHlcblx0XHRcdFx0XHRpZiAoc2tpcFJlY29yZCkge1xuXHRcdFx0XHRcdFx0ZGVjb3JhdGVlLnhPZmZzZXQgPSB0bS54T2Zmc2V0O1xuXHRcdFx0XHRcdFx0ZGVjb3JhdGVlLnlPZmZzZXQgPSB0bS55T2Zmc2V0O1xuXHRcdFx0XHRcdFx0dG0gPSBkZWNvcmF0ZWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzbW9vdGhPcmlnaW4gfHwgKHNtb290aE9yaWdpbiAhPT0gZmFsc2UgJiYgQ1NTUGx1Z2luLmRlZmF1bHRTbW9vdGhPcmlnaW4gIT09IGZhbHNlKSkge1xuXHRcdFx0XHRcdFx0eCA9IHhPcmlnaW4gLSB4T3JpZ2luT2xkO1xuXHRcdFx0XHRcdFx0eSA9IHlPcmlnaW4gLSB5T3JpZ2luT2xkO1xuXHRcdFx0XHRcdFx0Ly9vcmlnaW5hbGx5LCB3ZSBzaW1wbHkgYWRqdXN0ZWQgdGhlIHggYW5kIHkgdmFsdWVzLCBidXQgdGhhdCB3b3VsZCBjYXVzZSBwcm9ibGVtcyBpZiwgZm9yIGV4YW1wbGUsIHlvdSBjcmVhdGVkIGEgcm90YXRpb25hbCB0d2VlbiBwYXJ0LXdheSB0aHJvdWdoIGFuIHgveSB0d2Vlbi4gTWFuYWdpbmcgdGhlIG9mZnNldCBpbiBhIHNlcGFyYXRlIHZhcmlhYmxlIGdpdmVzIHVzIHVsdGltYXRlIGZsZXhpYmlsaXR5LlxuXHRcdFx0XHRcdFx0Ly90bS54IC09IHggLSAoeCAqIG1bMF0gKyB5ICogbVsyXSk7XG5cdFx0XHRcdFx0XHQvL3RtLnkgLT0geSAtICh4ICogbVsxXSArIHkgKiBtWzNdKTtcblx0XHRcdFx0XHRcdHRtLnhPZmZzZXQgKz0gKHggKiBtWzBdICsgeSAqIG1bMl0pIC0geDtcblx0XHRcdFx0XHRcdHRtLnlPZmZzZXQgKz0gKHggKiBtWzFdICsgeSAqIG1bM10pIC0geTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dG0ueE9mZnNldCA9IHRtLnlPZmZzZXQgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXNraXBSZWNvcmQpIHtcblx0XHRcdFx0XHRlLnNldEF0dHJpYnV0ZShcImRhdGEtc3ZnLW9yaWdpblwiLCB2LmpvaW4oXCIgXCIpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF9jYW5HZXRCQm94ID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHJldHVybiBlLmdldEJCb3goKTsgLy9GaXJlZm94IHRocm93cyBlcnJvcnMgaWYgeW91IHRyeSBjYWxsaW5nIGdldEJCb3goKSBvbiBhbiBTVkcgZWxlbWVudCB0aGF0J3Mgbm90IHJlbmRlcmVkIChsaWtlIGluIGEgPHN5bWJvbD4gb3IgPGRlZnM+KS4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjEyMTE4XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHR9LFxuXHRcdFx0X2lzU1ZHID0gZnVuY3Rpb24oZSkgeyAvL3JlcG9ydHMgaWYgdGhlIGVsZW1lbnQgaXMgYW4gU1ZHIG9uIHdoaWNoIGdldEJCb3goKSBhY3R1YWxseSB3b3Jrc1xuXHRcdFx0XHRyZXR1cm4gISEoX1NWR0VsZW1lbnQgJiYgZS5nZXRCQm94ICYmIGUuZ2V0Q1RNICYmIF9jYW5HZXRCQm94KGUpICYmICghZS5wYXJlbnROb2RlIHx8IChlLnBhcmVudE5vZGUuZ2V0QkJveCAmJiBlLnBhcmVudE5vZGUuZ2V0Q1RNKSkpO1xuXHRcdFx0fSxcblx0XHRcdF9pZGVudGl0eTJETWF0cml4ID0gWzEsMCwwLDEsMCwwXSxcblx0XHRcdF9nZXRNYXRyaXggPSBmdW5jdGlvbihlLCBmb3JjZTJEKSB7XG5cdFx0XHRcdHZhciB0bSA9IGUuX2dzVHJhbnNmb3JtIHx8IG5ldyBUcmFuc2Zvcm0oKSxcblx0XHRcdFx0XHRybmQgPSAxMDAwMDAsXG5cdFx0XHRcdFx0c3R5bGUgPSBlLnN0eWxlLFxuXHRcdFx0XHRcdGlzRGVmYXVsdCwgcywgbSwgbiwgZGVjLCBub25lO1xuXHRcdFx0XHRpZiAoX3RyYW5zZm9ybVByb3ApIHtcblx0XHRcdFx0XHRzID0gX2dldFN0eWxlKGUsIF90cmFuc2Zvcm1Qcm9wQ1NTLCBudWxsLCB0cnVlKTtcblx0XHRcdFx0fSBlbHNlIGlmIChlLmN1cnJlbnRTdHlsZSkge1xuXHRcdFx0XHRcdC8vZm9yIG9sZGVyIHZlcnNpb25zIG9mIElFLCB3ZSBuZWVkIHRvIGludGVycHJldCB0aGUgZmlsdGVyIHBvcnRpb24gdGhhdCBpcyBpbiB0aGUgZm9ybWF0OiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuTWF0cml4KE0xMT02LjEyMzIzMzk5NTczNjc2NmUtMTcsIE0xMj0tMSwgTTIxPTEsIE0yMj02LjEyMzIzMzk5NTczNjc2NmUtMTcsIHNpemluZ01ldGhvZD0nYXV0byBleHBhbmQnKSBOb3RpY2UgdGhhdCB3ZSBuZWVkIHRvIHN3YXAgYiBhbmQgYyBjb21wYXJlZCB0byBhIG5vcm1hbCBtYXRyaXguXG5cdFx0XHRcdFx0cyA9IGUuY3VycmVudFN0eWxlLmZpbHRlci5tYXRjaChfaWVHZXRNYXRyaXhFeHApO1xuXHRcdFx0XHRcdHMgPSAocyAmJiBzLmxlbmd0aCA9PT0gNCkgPyBbc1swXS5zdWJzdHIoNCksIE51bWJlcihzWzJdLnN1YnN0cig0KSksIE51bWJlcihzWzFdLnN1YnN0cig0KSksIHNbM10uc3Vic3RyKDQpLCAodG0ueCB8fCAwKSwgKHRtLnkgfHwgMCldLmpvaW4oXCIsXCIpIDogXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpc0RlZmF1bHQgPSAoIXMgfHwgcyA9PT0gXCJub25lXCIgfHwgcyA9PT0gXCJtYXRyaXgoMSwgMCwgMCwgMSwgMCwgMClcIik7XG5cdFx0XHRcdGlmIChpc0RlZmF1bHQgJiYgX3RyYW5zZm9ybVByb3AgJiYgKChub25lID0gKF9nZXRDb21wdXRlZFN0eWxlKGUpLmRpc3BsYXkgPT09IFwibm9uZVwiKSkgfHwgIWUucGFyZW50Tm9kZSkpIHtcblx0XHRcdFx0XHRpZiAobm9uZSkgeyAvL2Jyb3dzZXJzIGRvbid0IHJlcG9ydCB0cmFuc2Zvcm1zIGFjY3VyYXRlbHkgdW5sZXNzIHRoZSBlbGVtZW50IGlzIGluIHRoZSBET00gYW5kIGhhcyBhIGRpc3BsYXkgdmFsdWUgdGhhdCdzIG5vdCBcIm5vbmVcIi5cblx0XHRcdFx0XHRcdG4gPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCFlLnBhcmVudE5vZGUpIHtcblx0XHRcdFx0XHRcdGRlYyA9IDE7IC8vZmxhZ1xuXHRcdFx0XHRcdFx0X2RvY0VsZW1lbnQuYXBwZW5kQ2hpbGQoZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHMgPSBfZ2V0U3R5bGUoZSwgX3RyYW5zZm9ybVByb3BDU1MsIG51bGwsIHRydWUpO1xuXHRcdFx0XHRcdGlzRGVmYXVsdCA9ICghcyB8fCBzID09PSBcIm5vbmVcIiB8fCBzID09PSBcIm1hdHJpeCgxLCAwLCAwLCAxLCAwLCAwKVwiKTtcblx0XHRcdFx0XHRpZiAobikge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IG47XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChub25lKSB7XG5cdFx0XHRcdFx0XHRfcmVtb3ZlUHJvcChzdHlsZSwgXCJkaXNwbGF5XCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZGVjKSB7XG5cdFx0XHRcdFx0XHRfZG9jRWxlbWVudC5yZW1vdmVDaGlsZChlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHRtLnN2ZyB8fCAoZS5nZXRCQm94ICYmIF9pc1NWRyhlKSkpIHtcblx0XHRcdFx0XHRpZiAoaXNEZWZhdWx0ICYmIChzdHlsZVtfdHJhbnNmb3JtUHJvcF0gKyBcIlwiKS5pbmRleE9mKFwibWF0cml4XCIpICE9PSAtMSkgeyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgQ2hyb21lIDQwKSBkb24ndCBjb3JyZWN0bHkgcmVwb3J0IHRyYW5zZm9ybXMgdGhhdCBhcmUgYXBwbGllZCBpbmxpbmUgb24gYW4gU1ZHIGVsZW1lbnQgKHRoZXkgZG9uJ3QgZ2V0IGluY2x1ZGVkIGluIHRoZSBjb21wdXRlZCBzdHlsZSksIHNvIHdlIGRvdWJsZS1jaGVjayBoZXJlIGFuZCBhY2NlcHQgbWF0cml4IHZhbHVlc1xuXHRcdFx0XHRcdFx0cyA9IHN0eWxlW190cmFuc2Zvcm1Qcm9wXTtcblx0XHRcdFx0XHRcdGlzRGVmYXVsdCA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG0gPSBlLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblx0XHRcdFx0XHRpZiAoaXNEZWZhdWx0ICYmIG0pIHtcblx0XHRcdFx0XHRcdGlmIChtLmluZGV4T2YoXCJtYXRyaXhcIikgIT09IC0xKSB7IC8vanVzdCBpbiBjYXNlIHRoZXJlJ3MgYSBcInRyYW5zZm9ybVwiIHZhbHVlIHNwZWNpZmllZCBhcyBhbiBhdHRyaWJ1dGUgaW5zdGVhZCBvZiBDU1Mgc3R5bGUuIEFjY2VwdCBlaXRoZXIgYSBtYXRyaXgoKSBvciBzaW1wbGUgdHJhbnNsYXRlKCkgdmFsdWUgdGhvdWdoLlxuXHRcdFx0XHRcdFx0XHRzID0gbTtcblx0XHRcdFx0XHRcdFx0aXNEZWZhdWx0ID0gMDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAobS5pbmRleE9mKFwidHJhbnNsYXRlXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdFx0XHRzID0gXCJtYXRyaXgoMSwwLDAsMSxcIiArIG0ubWF0Y2goLyg/OlxcLXxcXGIpW1xcZFxcLVxcLmVdK1xcYi9naSkuam9pbihcIixcIikgKyBcIilcIjtcblx0XHRcdFx0XHRcdFx0aXNEZWZhdWx0ID0gMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGlzRGVmYXVsdCkge1xuXHRcdFx0XHRcdHJldHVybiBfaWRlbnRpdHkyRE1hdHJpeDtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL3NwbGl0IHRoZSBtYXRyaXggdmFsdWVzIG91dCBpbnRvIGFuIGFycmF5IChtIGZvciBtYXRyaXgpXG5cdFx0XHRcdG0gPSAocyB8fCBcIlwiKS5tYXRjaChfbnVtRXhwKSB8fCBbXTtcblx0XHRcdFx0aSA9IG0ubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRuID0gTnVtYmVyKG1baV0pO1xuXHRcdFx0XHRcdG1baV0gPSAoZGVjID0gbiAtIChuIHw9IDApKSA/ICgoZGVjICogcm5kICsgKGRlYyA8IDAgPyAtMC41IDogMC41KSkgfCAwKSAvIHJuZCArIG4gOiBuOyAvL2NvbnZlcnQgc3RyaW5ncyB0byBOdW1iZXJzIGFuZCByb3VuZCB0byA1IGRlY2ltYWwgcGxhY2VzIHRvIGF2b2lkIGlzc3VlcyB3aXRoIHRpbnkgbnVtYmVycy4gUm91Z2hseSAyMHggZmFzdGVyIHRoYW4gTnVtYmVyLnRvRml4ZWQoKS4gV2UgYWxzbyBtdXN0IG1ha2Ugc3VyZSB0byByb3VuZCBiZWZvcmUgZGl2aWRpbmcgc28gdGhhdCB2YWx1ZXMgbGlrZSAwLjk5OTk5OTk5OTkgYmVjb21lIDEgdG8gYXZvaWQgZ2xpdGNoZXMgaW4gYnJvd3NlciByZW5kZXJpbmcgYW5kIGludGVycHJldGF0aW9uIG9mIGZsaXBwZWQvcm90YXRlZCAzRCBtYXRyaWNlcy4gQW5kIGRvbid0IGp1c3QgbXVsdGlwbHkgdGhlIG51bWJlciBieSBybmQsIGZsb29yIGl0LCBhbmQgdGhlbiBkaXZpZGUgYnkgcm5kIGJlY2F1c2UgdGhlIGJpdHdpc2Ugb3BlcmF0aW9ucyBtYXggb3V0IGF0IGEgMzItYml0IHNpZ25lZCBpbnRlZ2VyLCB0aHVzIGl0IGNvdWxkIGdldCBjbGlwcGVkIGF0IGEgcmVsYXRpdmVseSBsb3cgdmFsdWUgKGxpa2UgMjIsMDAwLjAwMDAwIGZvciBleGFtcGxlKS5cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKGZvcmNlMkQgJiYgbS5sZW5ndGggPiA2KSA/IFttWzBdLCBtWzFdLCBtWzRdLCBtWzVdLCBtWzEyXSwgbVsxM11dIDogbTtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogUGFyc2VzIHRoZSB0cmFuc2Zvcm0gdmFsdWVzIGZvciBhbiBlbGVtZW50LCByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggeCwgeSwgeiwgc2NhbGVYLCBzY2FsZVksIHNjYWxlWiwgcm90YXRpb24sIHJvdGF0aW9uWCwgcm90YXRpb25ZLCBza2V3WCwgYW5kIHNrZXdZIHByb3BlcnRpZXMuIE5vdGU6IGJ5IGRlZmF1bHQgKGZvciBwZXJmb3JtYW5jZSByZWFzb25zKSwgYWxsIHNrZXdpbmcgaXMgY29tYmluZWQgaW50byBza2V3WCBhbmQgcm90YXRpb24gYnV0IHNrZXdZIHN0aWxsIGhhcyBhIHBsYWNlIGluIHRoZSB0cmFuc2Zvcm0gb2JqZWN0IHNvIHRoYXQgd2UgY2FuIHJlY29yZCBob3cgbXVjaCBvZiB0aGUgc2tldyBpcyBhdHRyaWJ1dGVkIHRvIHNrZXdYIHZzIHNrZXdZLiBSZW1lbWJlciwgYSBza2V3WSBvZiAxMCBsb29rcyB0aGUgc2FtZSBhcyBhIHJvdGF0aW9uIG9mIDEwIGFuZCBza2V3WCBvZiAtMTAuXG5cdFx0XHQgKiBAcGFyYW0geyFPYmplY3R9IHQgdGFyZ2V0IGVsZW1lbnRcblx0XHRcdCAqIEBwYXJhbSB7T2JqZWN0PX0gY3MgY29tcHV0ZWQgc3R5bGUgb2JqZWN0IChvcHRpb25hbClcblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlYyBpZiB0cnVlLCB0aGUgdHJhbnNmb3JtIHZhbHVlcyB3aWxsIGJlIHJlY29yZGVkIHRvIHRoZSB0YXJnZXQgZWxlbWVudCdzIF9nc1RyYW5zZm9ybSBvYmplY3QsIGxpa2UgdGFyZ2V0Ll9nc1RyYW5zZm9ybSA9IHt4OjAsIHk6MCwgejowLCBzY2FsZVg6MS4uLn1cblx0XHRcdCAqIEBwYXJhbSB7Ym9vbGVhbj19IHBhcnNlIGlmIHRydWUsIHdlJ2xsIGlnbm9yZSBhbnkgX2dzVHJhbnNmb3JtIHZhbHVlcyB0aGF0IGFscmVhZHkgZXhpc3Qgb24gdGhlIGVsZW1lbnQsIGFuZCBmb3JjZSBhIHJlcGFyc2luZyBvZiB0aGUgY3NzIChjYWxjdWxhdGVkIHN0eWxlKVxuXHRcdFx0ICogQHJldHVybiB7b2JqZWN0fSBvYmplY3QgY29udGFpbmluZyBhbGwgb2YgdGhlIHRyYW5zZm9ybSBwcm9wZXJ0aWVzL3ZhbHVlcyBsaWtlIHt4OjAsIHk6MCwgejowLCBzY2FsZVg6MS4uLn1cblx0XHRcdCAqL1xuXHRcdFx0X2dldFRyYW5zZm9ybSA9IF9pbnRlcm5hbHMuZ2V0VHJhbnNmb3JtID0gZnVuY3Rpb24odCwgY3MsIHJlYywgcGFyc2UpIHtcblx0XHRcdFx0aWYgKHQuX2dzVHJhbnNmb3JtICYmIHJlYyAmJiAhcGFyc2UpIHtcblx0XHRcdFx0XHRyZXR1cm4gdC5fZ3NUcmFuc2Zvcm07IC8vaWYgdGhlIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBfZ3NUcmFuc2Zvcm0sIHVzZSB0aGF0LiBOb3RlOiBzb21lIGJyb3dzZXJzIGRvbid0IGFjY3VyYXRlbHkgcmV0dXJuIHRoZSBjYWxjdWxhdGVkIHN0eWxlIGZvciB0aGUgdHJhbnNmb3JtIChwYXJ0aWN1bGFybHkgZm9yIFNWRyksIHNvIGl0J3MgYWxtb3N0IGFsd2F5cyBzYWZlc3QgdG8ganVzdCB1c2UgdGhlIHZhbHVlcyB3ZSd2ZSBhbHJlYWR5IGFwcGxpZWQgcmF0aGVyIHRoYW4gcmUtcGFyc2luZyB0aGluZ3MuXG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIHRtID0gcmVjID8gdC5fZ3NUcmFuc2Zvcm0gfHwgbmV3IFRyYW5zZm9ybSgpIDogbmV3IFRyYW5zZm9ybSgpLFxuXHRcdFx0XHRcdGludlggPSAodG0uc2NhbGVYIDwgMCksIC8vaW4gb3JkZXIgdG8gaW50ZXJwcmV0IHRoaW5ncyBwcm9wZXJseSwgd2UgbmVlZCB0byBrbm93IGlmIHRoZSB1c2VyIGFwcGxpZWQgYSBuZWdhdGl2ZSBzY2FsZVggcHJldmlvdXNseSBzbyB0aGF0IHdlIGNhbiBhZGp1c3QgdGhlIHJvdGF0aW9uIGFuZCBza2V3WCBhY2NvcmRpbmdseS4gT3RoZXJ3aXNlLCBpZiB3ZSBhbHdheXMgaW50ZXJwcmV0IGEgZmxpcHBlZCBtYXRyaXggYXMgYWZmZWN0aW5nIHNjYWxlWSBhbmQgdGhlIHVzZXIgb25seSB3YW50cyB0byB0d2VlbiB0aGUgc2NhbGVYIG9uIG11bHRpcGxlIHNlcXVlbnRpYWwgdHdlZW5zLCBpdCB3b3VsZCBrZWVwIHRoZSBuZWdhdGl2ZSBzY2FsZVkgd2l0aG91dCB0aGF0IGJlaW5nIHRoZSB1c2VyJ3MgaW50ZW50LlxuXHRcdFx0XHRcdG1pbiA9IDAuMDAwMDIsXG5cdFx0XHRcdFx0cm5kID0gMTAwMDAwLFxuXHRcdFx0XHRcdHpPcmlnaW4gPSBfc3VwcG9ydHMzRCA/IHBhcnNlRmxvYXQoX2dldFN0eWxlKHQsIF90cmFuc2Zvcm1PcmlnaW5Qcm9wLCBjcywgZmFsc2UsIFwiMCAwIDBcIikuc3BsaXQoXCIgXCIpWzJdKSB8fCB0bS56T3JpZ2luICB8fCAwIDogMCxcblx0XHRcdFx0XHRkZWZhdWx0VHJhbnNmb3JtUGVyc3BlY3RpdmUgPSBwYXJzZUZsb2F0KENTU1BsdWdpbi5kZWZhdWx0VHJhbnNmb3JtUGVyc3BlY3RpdmUpIHx8IDAsXG5cdFx0XHRcdFx0bSwgaSwgc2NhbGVYLCBzY2FsZVksIHJvdGF0aW9uLCBza2V3WDtcblxuXHRcdFx0XHR0bS5zdmcgPSAhISh0LmdldEJCb3ggJiYgX2lzU1ZHKHQpKTtcblx0XHRcdFx0aWYgKHRtLnN2Zykge1xuXHRcdFx0XHRcdF9wYXJzZVNWR09yaWdpbih0LCBfZ2V0U3R5bGUodCwgX3RyYW5zZm9ybU9yaWdpblByb3AsIGNzLCBmYWxzZSwgXCI1MCUgNTAlXCIpICsgXCJcIiwgdG0sIHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1zdmctb3JpZ2luXCIpKTtcblx0XHRcdFx0XHRfdXNlU1ZHVHJhbnNmb3JtQXR0ciA9IENTU1BsdWdpbi51c2VTVkdUcmFuc2Zvcm1BdHRyIHx8IF9mb3JjZVNWR1RyYW5zZm9ybUF0dHI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bSA9IF9nZXRNYXRyaXgodCk7XG5cdFx0XHRcdGlmIChtICE9PSBfaWRlbnRpdHkyRE1hdHJpeCkge1xuXG5cdFx0XHRcdFx0aWYgKG0ubGVuZ3RoID09PSAxNikge1xuXHRcdFx0XHRcdFx0Ly93ZSdsbCBvbmx5IGxvb2sgYXQgdGhlc2UgcG9zaXRpb24tcmVsYXRlZCA2IHZhcmlhYmxlcyBmaXJzdCBiZWNhdXNlIGlmIHgveS96IGFsbCBtYXRjaCwgaXQncyByZWxhdGl2ZWx5IHNhZmUgdG8gYXNzdW1lIHdlIGRvbid0IG5lZWQgdG8gcmUtcGFyc2UgZXZlcnl0aGluZyB3aGljaCByaXNrcyBsb3NpbmcgaW1wb3J0YW50IHJvdGF0aW9uYWwgaW5mb3JtYXRpb24gKGxpa2Ugcm90YXRpb25YOjE4MCBwbHVzIHJvdGF0aW9uWToxODAgd291bGQgbG9vayB0aGUgc2FtZSBhcyByb3RhdGlvbjoxODAgLSB0aGVyZSdzIG5vIHdheSB0byBrbm93IGZvciBzdXJlIHdoaWNoIGRpcmVjdGlvbiB3YXMgdGFrZW4gYmFzZWQgc29sZWx5IG9uIHRoZSBtYXRyaXgzZCgpIHZhbHVlcylcblx0XHRcdFx0XHRcdHZhciBhMTEgPSBtWzBdLCBhMjEgPSBtWzFdLCBhMzEgPSBtWzJdLCBhNDEgPSBtWzNdLFxuXHRcdFx0XHRcdFx0XHRhMTIgPSBtWzRdLCBhMjIgPSBtWzVdLCBhMzIgPSBtWzZdLCBhNDIgPSBtWzddLFxuXHRcdFx0XHRcdFx0XHRhMTMgPSBtWzhdLCBhMjMgPSBtWzldLCBhMzMgPSBtWzEwXSxcblx0XHRcdFx0XHRcdFx0YTE0ID0gbVsxMl0sIGEyNCA9IG1bMTNdLCBhMzQgPSBtWzE0XSxcblx0XHRcdFx0XHRcdFx0YTQzID0gbVsxMV0sXG5cdFx0XHRcdFx0XHRcdGFuZ2xlID0gTWF0aC5hdGFuMihhMzIsIGEzMyksXG5cdFx0XHRcdFx0XHRcdHQxLCB0MiwgdDMsIHQ0LCBjb3MsIHNpbjtcblxuXHRcdFx0XHRcdFx0Ly93ZSBtYW51YWxseSBjb21wZW5zYXRlIGZvciBub24temVybyB6IGNvbXBvbmVudCBvZiB0cmFuc2Zvcm1PcmlnaW4gdG8gd29yayBhcm91bmQgYnVncyBpbiBTYWZhcmlcblx0XHRcdFx0XHRcdGlmICh0bS56T3JpZ2luKSB7XG5cdFx0XHRcdFx0XHRcdGEzNCA9IC10bS56T3JpZ2luO1xuXHRcdFx0XHRcdFx0XHRhMTQgPSBhMTMqYTM0LW1bMTJdO1xuXHRcdFx0XHRcdFx0XHRhMjQgPSBhMjMqYTM0LW1bMTNdO1xuXHRcdFx0XHRcdFx0XHRhMzQgPSBhMzMqYTM0K3RtLnpPcmlnaW4tbVsxNF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0bS5yb3RhdGlvblggPSBhbmdsZSAqIF9SQUQyREVHO1xuXHRcdFx0XHRcdFx0Ly9yb3RhdGlvblhcblx0XHRcdFx0XHRcdGlmIChhbmdsZSkge1xuXHRcdFx0XHRcdFx0XHRjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHR0MSA9IGExMipjb3MrYTEzKnNpbjtcblx0XHRcdFx0XHRcdFx0dDIgPSBhMjIqY29zK2EyMypzaW47XG5cdFx0XHRcdFx0XHRcdHQzID0gYTMyKmNvcythMzMqc2luO1xuXHRcdFx0XHRcdFx0XHRhMTMgPSBhMTIqLXNpbithMTMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMjMgPSBhMjIqLXNpbithMjMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMzMgPSBhMzIqLXNpbithMzMqY29zO1xuXHRcdFx0XHRcdFx0XHRhNDMgPSBhNDIqLXNpbithNDMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMTIgPSB0MTtcblx0XHRcdFx0XHRcdFx0YTIyID0gdDI7XG5cdFx0XHRcdFx0XHRcdGEzMiA9IHQzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly9yb3RhdGlvbllcblx0XHRcdFx0XHRcdGFuZ2xlID0gTWF0aC5hdGFuMigtYTMxLCBhMzMpO1xuXHRcdFx0XHRcdFx0dG0ucm90YXRpb25ZID0gYW5nbGUgKiBfUkFEMkRFRztcblx0XHRcdFx0XHRcdGlmIChhbmdsZSkge1xuXHRcdFx0XHRcdFx0XHRjb3MgPSBNYXRoLmNvcygtYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbigtYW5nbGUpO1xuXHRcdFx0XHRcdFx0XHR0MSA9IGExMSpjb3MtYTEzKnNpbjtcblx0XHRcdFx0XHRcdFx0dDIgPSBhMjEqY29zLWEyMypzaW47XG5cdFx0XHRcdFx0XHRcdHQzID0gYTMxKmNvcy1hMzMqc2luO1xuXHRcdFx0XHRcdFx0XHRhMjMgPSBhMjEqc2luK2EyMypjb3M7XG5cdFx0XHRcdFx0XHRcdGEzMyA9IGEzMSpzaW4rYTMzKmNvcztcblx0XHRcdFx0XHRcdFx0YTQzID0gYTQxKnNpbithNDMqY29zO1xuXHRcdFx0XHRcdFx0XHRhMTEgPSB0MTtcblx0XHRcdFx0XHRcdFx0YTIxID0gdDI7XG5cdFx0XHRcdFx0XHRcdGEzMSA9IHQzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly9yb3RhdGlvblpcblx0XHRcdFx0XHRcdGFuZ2xlID0gTWF0aC5hdGFuMihhMjEsIGExMSk7XG5cdFx0XHRcdFx0XHR0bS5yb3RhdGlvbiA9IGFuZ2xlICogX1JBRDJERUc7XG5cdFx0XHRcdFx0XHRpZiAoYW5nbGUpIHtcblx0XHRcdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0c2luID0gTWF0aC5zaW4oLWFuZ2xlKTtcblx0XHRcdFx0XHRcdFx0YTExID0gYTExKmNvcythMTIqc2luO1xuXHRcdFx0XHRcdFx0XHR0MiA9IGEyMSpjb3MrYTIyKnNpbjtcblx0XHRcdFx0XHRcdFx0YTIyID0gYTIxKi1zaW4rYTIyKmNvcztcblx0XHRcdFx0XHRcdFx0YTMyID0gYTMxKi1zaW4rYTMyKmNvcztcblx0XHRcdFx0XHRcdFx0YTIxID0gdDI7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICh0bS5yb3RhdGlvblggJiYgTWF0aC5hYnModG0ucm90YXRpb25YKSArIE1hdGguYWJzKHRtLnJvdGF0aW9uKSA+IDM1OS45KSB7IC8vd2hlbiByb3RhdGlvblkgaXMgc2V0LCBpdCB3aWxsIG9mdGVuIGJlIHBhcnNlZCBhcyAxODAgZGVncmVlcyBkaWZmZXJlbnQgdGhhbiBpdCBzaG91bGQgYmUsIGFuZCByb3RhdGlvblggYW5kIHJvdGF0aW9uIGJvdGggYmVpbmcgMTgwIChpdCBsb29rcyB0aGUgc2FtZSksIHNvIHdlIGFkanVzdCBmb3IgdGhhdCBoZXJlLlxuXHRcdFx0XHRcdFx0XHR0bS5yb3RhdGlvblggPSB0bS5yb3RhdGlvbiA9IDA7XG5cdFx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uWSA9IDE4MCAtIHRtLnJvdGF0aW9uWTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dG0uc2NhbGVYID0gKChNYXRoLnNxcnQoYTExICogYTExICsgYTIxICogYTIxKSAqIHJuZCArIDAuNSkgfCAwKSAvIHJuZDtcblx0XHRcdFx0XHRcdHRtLnNjYWxlWSA9ICgoTWF0aC5zcXJ0KGEyMiAqIGEyMiArIGEyMyAqIGEyMykgKiBybmQgKyAwLjUpIHwgMCkgLyBybmQ7XG5cdFx0XHRcdFx0XHR0bS5zY2FsZVogPSAoKE1hdGguc3FydChhMzIgKiBhMzIgKyBhMzMgKiBhMzMpICogcm5kICsgMC41KSB8IDApIC8gcm5kO1xuXHRcdFx0XHRcdFx0aWYgKHRtLnJvdGF0aW9uWCB8fCB0bS5yb3RhdGlvblkpIHtcblx0XHRcdFx0XHRcdFx0dG0uc2tld1ggPSAwO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dG0uc2tld1ggPSAoYTEyIHx8IGEyMikgPyBNYXRoLmF0YW4yKGExMiwgYTIyKSAqIF9SQUQyREVHICsgdG0ucm90YXRpb24gOiB0bS5za2V3WCB8fCAwO1xuXHRcdFx0XHRcdFx0XHRpZiAoTWF0aC5hYnModG0uc2tld1gpID4gOTAgJiYgTWF0aC5hYnModG0uc2tld1gpIDwgMjcwKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGludlgpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRtLnNjYWxlWCAqPSAtMTtcblx0XHRcdFx0XHRcdFx0XHRcdHRtLnNrZXdYICs9ICh0bS5yb3RhdGlvbiA8PSAwKSA/IDE4MCA6IC0xODA7XG5cdFx0XHRcdFx0XHRcdFx0XHR0bS5yb3RhdGlvbiArPSAodG0ucm90YXRpb24gPD0gMCkgPyAxODAgOiAtMTgwO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0bS5zY2FsZVkgKj0gLTE7XG5cdFx0XHRcdFx0XHRcdFx0XHR0bS5za2V3WCArPSAodG0uc2tld1ggPD0gMCkgPyAxODAgOiAtMTgwO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dG0ucGVyc3BlY3RpdmUgPSBhNDMgPyAxIC8gKChhNDMgPCAwKSA/IC1hNDMgOiBhNDMpIDogMDtcblx0XHRcdFx0XHRcdHRtLnggPSBhMTQ7XG5cdFx0XHRcdFx0XHR0bS55ID0gYTI0O1xuXHRcdFx0XHRcdFx0dG0ueiA9IGEzNDtcblx0XHRcdFx0XHRcdGlmICh0bS5zdmcpIHtcblx0XHRcdFx0XHRcdFx0dG0ueCAtPSB0bS54T3JpZ2luIC0gKHRtLnhPcmlnaW4gKiBhMTEgLSB0bS55T3JpZ2luICogYTEyKTtcblx0XHRcdFx0XHRcdFx0dG0ueSAtPSB0bS55T3JpZ2luIC0gKHRtLnlPcmlnaW4gKiBhMjEgLSB0bS54T3JpZ2luICogYTIyKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoKCFfc3VwcG9ydHMzRCB8fCBwYXJzZSB8fCAhbS5sZW5ndGggfHwgdG0ueCAhPT0gbVs0XSB8fCB0bS55ICE9PSBtWzVdIHx8ICghdG0ucm90YXRpb25YICYmICF0bS5yb3RhdGlvblkpKSkgeyAvL3NvbWV0aW1lcyBhIDYtZWxlbWVudCBtYXRyaXggaXMgcmV0dXJuZWQgZXZlbiB3aGVuIHdlIHBlcmZvcm1lZCAzRCB0cmFuc2Zvcm1zLCBsaWtlIGlmIHJvdGF0aW9uWCBhbmQgcm90YXRpb25ZIGFyZSAxODAuIEluIGNhc2VzIGxpa2UgdGhpcywgd2Ugc3RpbGwgbmVlZCB0byBob25vciB0aGUgM0QgdHJhbnNmb3Jtcy4gSWYgd2UganVzdCByZWx5IG9uIHRoZSAyRCBpbmZvLCBpdCBjb3VsZCBhZmZlY3QgaG93IHRoZSBkYXRhIGlzIGludGVycHJldGVkLCBsaWtlIHNjYWxlWSBtaWdodCBnZXQgc2V0IHRvIC0xIG9yIHJvdGF0aW9uIGNvdWxkIGdldCBvZmZzZXQgYnkgMTgwIGRlZ3JlZXMuIEZvciBleGFtcGxlLCBkbyBhIFR3ZWVuTGl0ZS50byhlbGVtZW50LCAxLCB7Y3NzOntyb3RhdGlvblg6MTgwLCByb3RhdGlvblk6MTgwfX0pIGFuZCB0aGVuIGxhdGVyLCBUd2VlbkxpdGUudG8oZWxlbWVudCwgMSwge2Nzczp7cm90YXRpb25YOjB9fSkgYW5kIHdpdGhvdXQgdGhpcyBjb25kaXRpb25hbCBsb2dpYyBpbiBwbGFjZSwgaXQnZCBqdW1wIHRvIGEgc3RhdGUgb2YgYmVpbmcgdW5yb3RhdGVkIHdoZW4gdGhlIDJuZCB0d2VlbiBzdGFydHMuIFRoZW4gYWdhaW4sIHdlIG5lZWQgdG8gaG9ub3IgdGhlIGZhY3QgdGhhdCB0aGUgdXNlciBDT1VMRCBhbHRlciB0aGUgdHJhbnNmb3JtcyBvdXRzaWRlIG9mIENTU1BsdWdpbiwgbGlrZSBieSBtYW51YWxseSBhcHBseWluZyBuZXcgY3NzLCBzbyB3ZSB0cnkgdG8gc2Vuc2UgdGhhdCBieSBsb29raW5nIGF0IHggYW5kIHkgYmVjYXVzZSBpZiB0aG9zZSBjaGFuZ2VkLCB3ZSBrbm93IHRoZSBjaGFuZ2VzIHdlcmUgbWFkZSBvdXRzaWRlIENTU1BsdWdpbiBhbmQgd2UgZm9yY2UgYSByZWludGVycHJldGF0aW9uIG9mIHRoZSBtYXRyaXggdmFsdWVzLiBBbHNvLCBpbiBXZWJraXQgYnJvd3NlcnMsIGlmIHRoZSBlbGVtZW50J3MgXCJkaXNwbGF5XCIgaXMgXCJub25lXCIsIGl0cyBjYWxjdWxhdGVkIHN0eWxlIHZhbHVlIHdpbGwgYWx3YXlzIHJldHVybiBlbXB0eSwgc28gaWYgd2UndmUgYWxyZWFkeSByZWNvcmRlZCB0aGUgdmFsdWVzIGluIHRoZSBfZ3NUcmFuc2Zvcm0gb2JqZWN0LCB3ZSdsbCBqdXN0IHJlbHkgb24gdGhvc2UuXG5cdFx0XHRcdFx0XHR2YXIgayA9IChtLmxlbmd0aCA+PSA2KSxcblx0XHRcdFx0XHRcdFx0YSA9IGsgPyBtWzBdIDogMSxcblx0XHRcdFx0XHRcdFx0YiA9IG1bMV0gfHwgMCxcblx0XHRcdFx0XHRcdFx0YyA9IG1bMl0gfHwgMCxcblx0XHRcdFx0XHRcdFx0ZCA9IGsgPyBtWzNdIDogMTtcblx0XHRcdFx0XHRcdHRtLnggPSBtWzRdIHx8IDA7XG5cdFx0XHRcdFx0XHR0bS55ID0gbVs1XSB8fCAwO1xuXHRcdFx0XHRcdFx0c2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuXHRcdFx0XHRcdFx0c2NhbGVZID0gTWF0aC5zcXJ0KGQgKiBkICsgYyAqIGMpO1xuXHRcdFx0XHRcdFx0cm90YXRpb24gPSAoYSB8fCBiKSA/IE1hdGguYXRhbjIoYiwgYSkgKiBfUkFEMkRFRyA6IHRtLnJvdGF0aW9uIHx8IDA7IC8vbm90ZTogaWYgc2NhbGVYIGlzIDAsIHdlIGNhbm5vdCBhY2N1cmF0ZWx5IG1lYXN1cmUgcm90YXRpb24uIFNhbWUgZm9yIHNrZXdYIHdpdGggYSBzY2FsZVkgb2YgMC4gVGhlcmVmb3JlLCB3ZSBkZWZhdWx0IHRvIHRoZSBwcmV2aW91c2x5IHJlY29yZGVkIHZhbHVlIChvciB6ZXJvIGlmIHRoYXQgZG9lc24ndCBleGlzdCkuXG5cdFx0XHRcdFx0XHRza2V3WCA9IChjIHx8IGQpID8gTWF0aC5hdGFuMihjLCBkKSAqIF9SQUQyREVHICsgcm90YXRpb24gOiB0bS5za2V3WCB8fCAwO1xuXHRcdFx0XHRcdFx0aWYgKE1hdGguYWJzKHNrZXdYKSA+IDkwICYmIE1hdGguYWJzKHNrZXdYKSA8IDI3MCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoaW52WCkge1xuXHRcdFx0XHRcdFx0XHRcdHNjYWxlWCAqPSAtMTtcblx0XHRcdFx0XHRcdFx0XHRza2V3WCArPSAocm90YXRpb24gPD0gMCkgPyAxODAgOiAtMTgwO1xuXHRcdFx0XHRcdFx0XHRcdHJvdGF0aW9uICs9IChyb3RhdGlvbiA8PSAwKSA/IDE4MCA6IC0xODA7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0c2NhbGVZICo9IC0xO1xuXHRcdFx0XHRcdFx0XHRcdHNrZXdYICs9IChza2V3WCA8PSAwKSA/IDE4MCA6IC0xODA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRtLnNjYWxlWCA9IHNjYWxlWDtcblx0XHRcdFx0XHRcdHRtLnNjYWxlWSA9IHNjYWxlWTtcblx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uID0gcm90YXRpb247XG5cdFx0XHRcdFx0XHR0bS5za2V3WCA9IHNrZXdYO1xuXHRcdFx0XHRcdFx0aWYgKF9zdXBwb3J0czNEKSB7XG5cdFx0XHRcdFx0XHRcdHRtLnJvdGF0aW9uWCA9IHRtLnJvdGF0aW9uWSA9IHRtLnogPSAwO1xuXHRcdFx0XHRcdFx0XHR0bS5wZXJzcGVjdGl2ZSA9IGRlZmF1bHRUcmFuc2Zvcm1QZXJzcGVjdGl2ZTtcblx0XHRcdFx0XHRcdFx0dG0uc2NhbGVaID0gMTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh0bS5zdmcpIHtcblx0XHRcdFx0XHRcdFx0dG0ueCAtPSB0bS54T3JpZ2luIC0gKHRtLnhPcmlnaW4gKiBhICsgdG0ueU9yaWdpbiAqIGMpO1xuXHRcdFx0XHRcdFx0XHR0bS55IC09IHRtLnlPcmlnaW4gLSAodG0ueE9yaWdpbiAqIGIgKyB0bS55T3JpZ2luICogZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRtLnpPcmlnaW4gPSB6T3JpZ2luO1xuXHRcdFx0XHRcdC8vc29tZSBicm93c2VycyBoYXZlIGEgaGFyZCB0aW1lIHdpdGggdmVyeSBzbWFsbCB2YWx1ZXMgbGlrZSAyLjQ0OTI5MzU5ODI5NDcwNjRlLTE2IChub3RpY2UgdGhlIFwiZS1cIiB0b3dhcmRzIHRoZSBlbmQpIGFuZCB3b3VsZCByZW5kZXIgdGhlIG9iamVjdCBzbGlnaHRseSBvZmYuIFNvIHdlIHJvdW5kIHRvIDAgaW4gdGhlc2UgY2FzZXMuIFRoZSBjb25kaXRpb25hbCBsb2dpYyBoZXJlIGlzIGZhc3RlciB0aGFuIGNhbGxpbmcgTWF0aC5hYnMoKS4gQWxzbywgYnJvd3NlcnMgdGVuZCB0byByZW5kZXIgYSBTTElHSFRMWSByb3RhdGVkIG9iamVjdCBpbiBhIGZ1enp5IHdheSwgc28gd2UgbmVlZCB0byBzbmFwIHRvIGV4YWN0bHkgMCB3aGVuIGFwcHJvcHJpYXRlLlxuXHRcdFx0XHRcdGZvciAoaSBpbiB0bSkge1xuXHRcdFx0XHRcdFx0aWYgKHRtW2ldIDwgbWluKSBpZiAodG1baV0gPiAtbWluKSB7XG5cdFx0XHRcdFx0XHRcdHRtW2ldID0gMDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9ERUJVRzogX2xvZyhcInBhcnNlZCByb3RhdGlvbiBvZiBcIiArIHQuZ2V0QXR0cmlidXRlKFwiaWRcIikrXCI6IFwiKyh0bS5yb3RhdGlvblgpK1wiLCBcIisodG0ucm90YXRpb25ZKStcIiwgXCIrKHRtLnJvdGF0aW9uKStcIiwgc2NhbGU6IFwiK3RtLnNjYWxlWCtcIiwgXCIrdG0uc2NhbGVZK1wiLCBcIit0bS5zY2FsZVorXCIsIHBvc2l0aW9uOiBcIit0bS54K1wiLCBcIit0bS55K1wiLCBcIit0bS56K1wiLCBwZXJzcGVjdGl2ZTogXCIrdG0ucGVyc3BlY3RpdmUrIFwiLCBvcmlnaW46IFwiKyB0bS54T3JpZ2luKyBcIixcIisgdG0ueU9yaWdpbik7XG5cdFx0XHRcdGlmIChyZWMpIHtcblx0XHRcdFx0XHR0Ll9nc1RyYW5zZm9ybSA9IHRtOyAvL3JlY29yZCB0byB0aGUgb2JqZWN0J3MgX2dzVHJhbnNmb3JtIHdoaWNoIHdlIHVzZSBzbyB0aGF0IHR3ZWVucyBjYW4gY29udHJvbCBpbmRpdmlkdWFsIHByb3BlcnRpZXMgaW5kZXBlbmRlbnRseSAod2UgbmVlZCBhbGwgdGhlIHByb3BlcnRpZXMgdG8gYWNjdXJhdGVseSByZWNvbXBvc2UgdGhlIG1hdHJpeCBpbiB0aGUgc2V0UmF0aW8oKSBtZXRob2QpXG5cdFx0XHRcdFx0aWYgKHRtLnN2ZykgeyAvL2lmIHdlJ3JlIHN1cHBvc2VkIHRvIGFwcGx5IHRyYW5zZm9ybXMgdG8gdGhlIFNWRyBlbGVtZW50J3MgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIG1ha2Ugc3VyZSB0aGVyZSBhcmVuJ3QgYW55IENTUyB0cmFuc2Zvcm1zIGFwcGxpZWQgb3IgdGhleSdsbCBvdmVycmlkZSB0aGUgYXR0cmlidXRlIG9uZXMuIEFsc28gY2xlYXIgdGhlIHRyYW5zZm9ybSBhdHRyaWJ1dGUgaWYgd2UncmUgdXNpbmcgQ1NTLCBqdXN0IHRvIGJlIGNsZWFuLlxuXHRcdFx0XHRcdFx0aWYgKF91c2VTVkdUcmFuc2Zvcm1BdHRyICYmIHQuc3R5bGVbX3RyYW5zZm9ybVByb3BdKSB7XG5cdFx0XHRcdFx0XHRcdFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbCgwLjAwMSwgZnVuY3Rpb24oKXsgLy9pZiB3ZSBhcHBseSB0aGlzIHJpZ2h0IGF3YXkgKGJlZm9yZSBhbnl0aGluZyBoYXMgcmVuZGVyZWQpLCB3ZSByaXNrIHRoZXJlIGJlaW5nIG5vIHRyYW5zZm9ybXMgZm9yIGEgYnJpZWYgbW9tZW50IGFuZCBpdCBhbHNvIGludGVyZmVyZXMgd2l0aCBhZGp1c3RpbmcgdGhlIHRyYW5zZm9ybU9yaWdpbiBpbiBhIHR3ZWVuIHdpdGggaW1tZWRpYXRlUmVuZGVyOnRydWUgKGl0J2QgdHJ5IHJlYWRpbmcgdGhlIG1hdHJpeCBhbmQgaXQgd291bGRuJ3QgaGF2ZSB0aGUgYXBwcm9wcmlhdGUgZGF0YSBpbiBwbGFjZSBiZWNhdXNlIHdlIGp1c3QgcmVtb3ZlZCBpdCkuXG5cdFx0XHRcdFx0XHRcdFx0X3JlbW92ZVByb3AodC5zdHlsZSwgX3RyYW5zZm9ybVByb3ApO1xuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIV91c2VTVkdUcmFuc2Zvcm1BdHRyICYmIHQuZ2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIpKSB7XG5cdFx0XHRcdFx0XHRcdFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbCgwLjAwMSwgZnVuY3Rpb24oKXtcblx0XHRcdFx0XHRcdFx0XHR0LnJlbW92ZUF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKTtcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0bTtcblx0XHRcdH0sXG5cblx0XHRcdC8vZm9yIHNldHRpbmcgMkQgdHJhbnNmb3JtcyBpbiBJRTYsIElFNywgYW5kIElFOCAobXVzdCB1c2UgYSBcImZpbHRlclwiIHRvIGVtdWxhdGUgdGhlIGJlaGF2aW9yIG9mIG1vZGVybiBkYXkgYnJvd3NlciB0cmFuc2Zvcm1zKVxuXHRcdFx0X3NldElFVHJhbnNmb3JtUmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHZhciB0ID0gdGhpcy5kYXRhLCAvL3JlZmVycyB0byB0aGUgZWxlbWVudCdzIF9nc1RyYW5zZm9ybSBvYmplY3Rcblx0XHRcdFx0XHRhbmcgPSAtdC5yb3RhdGlvbiAqIF9ERUcyUkFELFxuXHRcdFx0XHRcdHNrZXcgPSBhbmcgKyB0LnNrZXdYICogX0RFRzJSQUQsXG5cdFx0XHRcdFx0cm5kID0gMTAwMDAwLFxuXHRcdFx0XHRcdGEgPSAoKE1hdGguY29zKGFuZykgKiB0LnNjYWxlWCAqIHJuZCkgfCAwKSAvIHJuZCxcblx0XHRcdFx0XHRiID0gKChNYXRoLnNpbihhbmcpICogdC5zY2FsZVggKiBybmQpIHwgMCkgLyBybmQsXG5cdFx0XHRcdFx0YyA9ICgoTWF0aC5zaW4oc2tldykgKiAtdC5zY2FsZVkgKiBybmQpIHwgMCkgLyBybmQsXG5cdFx0XHRcdFx0ZCA9ICgoTWF0aC5jb3Moc2tldykgKiB0LnNjYWxlWSAqIHJuZCkgfCAwKSAvIHJuZCxcblx0XHRcdFx0XHRzdHlsZSA9IHRoaXMudC5zdHlsZSxcblx0XHRcdFx0XHRjcyA9IHRoaXMudC5jdXJyZW50U3R5bGUsXG5cdFx0XHRcdFx0ZmlsdGVycywgdmFsO1xuXHRcdFx0XHRpZiAoIWNzKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhbCA9IGI7IC8vanVzdCBmb3Igc3dhcHBpbmcgdGhlIHZhcmlhYmxlcyBhbiBpbnZlcnRpbmcgdGhlbSAocmV1c2VkIFwidmFsXCIgdG8gYXZvaWQgY3JlYXRpbmcgYW5vdGhlciB2YXJpYWJsZSBpbiBtZW1vcnkpLiBJRSdzIGZpbHRlciBtYXRyaXggdXNlcyBhIG5vbi1zdGFuZGFyZCBtYXRyaXggY29uZmlndXJhdGlvbiAoYW5nbGUgZ29lcyB0aGUgb3Bwb3NpdGUgd2F5LCBhbmQgYiBhbmQgYyBhcmUgcmV2ZXJzZWQgYW5kIGludmVydGVkKVxuXHRcdFx0XHRiID0gLWM7XG5cdFx0XHRcdGMgPSAtdmFsO1xuXHRcdFx0XHRmaWx0ZXJzID0gY3MuZmlsdGVyO1xuXHRcdFx0XHRzdHlsZS5maWx0ZXIgPSBcIlwiOyAvL3JlbW92ZSBmaWx0ZXJzIHNvIHRoYXQgd2UgY2FuIGFjY3VyYXRlbHkgbWVhc3VyZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHRcblx0XHRcdFx0dmFyIHcgPSB0aGlzLnQub2Zmc2V0V2lkdGgsXG5cdFx0XHRcdFx0aCA9IHRoaXMudC5vZmZzZXRIZWlnaHQsXG5cdFx0XHRcdFx0Y2xpcCA9IChjcy5wb3NpdGlvbiAhPT0gXCJhYnNvbHV0ZVwiKSxcblx0XHRcdFx0XHRtID0gXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuTWF0cml4KE0xMT1cIiArIGEgKyBcIiwgTTEyPVwiICsgYiArIFwiLCBNMjE9XCIgKyBjICsgXCIsIE0yMj1cIiArIGQsXG5cdFx0XHRcdFx0b3ggPSB0LnggKyAodyAqIHQueFBlcmNlbnQgLyAxMDApLFxuXHRcdFx0XHRcdG95ID0gdC55ICsgKGggKiB0LnlQZXJjZW50IC8gMTAwKSxcblx0XHRcdFx0XHRkeCwgZHk7XG5cblx0XHRcdFx0Ly9pZiB0cmFuc2Zvcm1PcmlnaW4gaXMgYmVpbmcgdXNlZCwgYWRqdXN0IHRoZSBvZmZzZXQgeCBhbmQgeVxuXHRcdFx0XHRpZiAodC5veCAhPSBudWxsKSB7XG5cdFx0XHRcdFx0ZHggPSAoKHQub3hwKSA/IHcgKiB0Lm94ICogMC4wMSA6IHQub3gpIC0gdyAvIDI7XG5cdFx0XHRcdFx0ZHkgPSAoKHQub3lwKSA/IGggKiB0Lm95ICogMC4wMSA6IHQub3kpIC0gaCAvIDI7XG5cdFx0XHRcdFx0b3ggKz0gZHggLSAoZHggKiBhICsgZHkgKiBiKTtcblx0XHRcdFx0XHRveSArPSBkeSAtIChkeCAqIGMgKyBkeSAqIGQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCFjbGlwKSB7XG5cdFx0XHRcdFx0bSArPSBcIiwgc2l6aW5nTWV0aG9kPSdhdXRvIGV4cGFuZCcpXCI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZHggPSAodyAvIDIpO1xuXHRcdFx0XHRcdGR5ID0gKGggLyAyKTtcblx0XHRcdFx0XHQvL3RyYW5zbGF0ZSB0byBlbnN1cmUgdGhhdCB0cmFuc2Zvcm1hdGlvbnMgb2NjdXIgYXJvdW5kIHRoZSBjb3JyZWN0IG9yaWdpbiAoZGVmYXVsdCBpcyBjZW50ZXIpLlxuXHRcdFx0XHRcdG0gKz0gXCIsIER4PVwiICsgKGR4IC0gKGR4ICogYSArIGR5ICogYikgKyBveCkgKyBcIiwgRHk9XCIgKyAoZHkgLSAoZHggKiBjICsgZHkgKiBkKSArIG95KSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChmaWx0ZXJzLmluZGV4T2YoXCJEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5NYXRyaXgoXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdHN0eWxlLmZpbHRlciA9IGZpbHRlcnMucmVwbGFjZShfaWVTZXRNYXRyaXhFeHAsIG0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlLmZpbHRlciA9IG0gKyBcIiBcIiArIGZpbHRlcnM7IC8vd2UgbXVzdCBhbHdheXMgcHV0IHRoZSB0cmFuc2Zvcm0vbWF0cml4IEZJUlNUIChiZWZvcmUgYWxwaGEob3BhY2l0eT14eCkpIHRvIGF2b2lkIGFuIElFIGJ1ZyB0aGF0IHNsaWNlcyBwYXJ0IG9mIHRoZSBvYmplY3Qgd2hlbiByb3RhdGlvbiBpcyBhcHBsaWVkIHdpdGggYWxwaGEuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL2F0IHRoZSBlbmQgb3IgYmVnaW5uaW5nIG9mIHRoZSB0d2VlbiwgaWYgdGhlIG1hdHJpeCBpcyBub3JtYWwgKDEsIDAsIDAsIDEpIGFuZCBvcGFjaXR5IGlzIDEwMCAob3IgZG9lc24ndCBleGlzdCksIHJlbW92ZSB0aGUgZmlsdGVyIHRvIGltcHJvdmUgYnJvd3NlciBwZXJmb3JtYW5jZS5cblx0XHRcdFx0aWYgKHYgPT09IDAgfHwgdiA9PT0gMSkgaWYgKGEgPT09IDEpIGlmIChiID09PSAwKSBpZiAoYyA9PT0gMCkgaWYgKGQgPT09IDEpIGlmICghY2xpcCB8fCBtLmluZGV4T2YoXCJEeD0wLCBEeT0wXCIpICE9PSAtMSkgaWYgKCFfb3BhY2l0eUV4cC50ZXN0KGZpbHRlcnMpIHx8IHBhcnNlRmxvYXQoUmVnRXhwLiQxKSA9PT0gMTAwKSBpZiAoZmlsdGVycy5pbmRleE9mKFwiZ3JhZGllbnQoXCIgJiYgZmlsdGVycy5pbmRleE9mKFwiQWxwaGFcIikpID09PSAtMSkge1xuXHRcdFx0XHRcdHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShcImZpbHRlclwiKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vd2UgbXVzdCBzZXQgdGhlIG1hcmdpbnMgQUZURVIgYXBwbHlpbmcgdGhlIGZpbHRlciBpbiBvcmRlciB0byBhdm9pZCBzb21lIGJ1Z3MgaW4gSUU4IHRoYXQgY291bGQgKGluIHJhcmUgc2NlbmFyaW9zKSBjYXVzZSB0aGVtIHRvIGJlIGlnbm9yZWQgaW50ZXJtaXR0ZW50bHkgKHZpYnJhdGlvbikuXG5cdFx0XHRcdGlmICghY2xpcCkge1xuXHRcdFx0XHRcdHZhciBtdWx0ID0gKF9pZVZlcnMgPCA4KSA/IDEgOiAtMSwgLy9pbiBJbnRlcm5ldCBFeHBsb3JlciA3IGFuZCBiZWZvcmUsIHRoZSBib3ggbW9kZWwgaXMgYnJva2VuLCBjYXVzaW5nIHRoZSBicm93c2VyIHRvIHRyZWF0IHRoZSB3aWR0aC9oZWlnaHQgb2YgdGhlIGFjdHVhbCByb3RhdGVkIGZpbHRlcmVkIGltYWdlIGFzIHRoZSB3aWR0aC9oZWlnaHQgb2YgdGhlIGJveCBpdHNlbGYsIGJ1dCBNaWNyb3NvZnQgY29ycmVjdGVkIHRoYXQgaW4gSUU4LiBXZSBtdXN0IHVzZSBhIG5lZ2F0aXZlIG9mZnNldCBpbiBJRTggb24gdGhlIHJpZ2h0L2JvdHRvbVxuXHRcdFx0XHRcdFx0bWFyZywgcHJvcCwgZGlmO1xuXHRcdFx0XHRcdGR4ID0gdC5pZU9mZnNldFggfHwgMDtcblx0XHRcdFx0XHRkeSA9IHQuaWVPZmZzZXRZIHx8IDA7XG5cdFx0XHRcdFx0dC5pZU9mZnNldFggPSBNYXRoLnJvdW5kKCh3IC0gKChhIDwgMCA/IC1hIDogYSkgKiB3ICsgKGIgPCAwID8gLWIgOiBiKSAqIGgpKSAvIDIgKyBveCk7XG5cdFx0XHRcdFx0dC5pZU9mZnNldFkgPSBNYXRoLnJvdW5kKChoIC0gKChkIDwgMCA/IC1kIDogZCkgKiBoICsgKGMgPCAwID8gLWMgOiBjKSAqIHcpKSAvIDIgKyBveSk7XG5cdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IDQ7IGkrKykge1xuXHRcdFx0XHRcdFx0cHJvcCA9IF9tYXJnaW5zW2ldO1xuXHRcdFx0XHRcdFx0bWFyZyA9IGNzW3Byb3BdO1xuXHRcdFx0XHRcdFx0Ly93ZSBuZWVkIHRvIGdldCB0aGUgY3VycmVudCBtYXJnaW4gaW4gY2FzZSBpdCBpcyBiZWluZyB0d2VlbmVkIHNlcGFyYXRlbHkgKHdlIHdhbnQgdG8gcmVzcGVjdCB0aGF0IHR3ZWVuJ3MgY2hhbmdlcylcblx0XHRcdFx0XHRcdHZhbCA9IChtYXJnLmluZGV4T2YoXCJweFwiKSAhPT0gLTEpID8gcGFyc2VGbG9hdChtYXJnKSA6IF9jb252ZXJ0VG9QaXhlbHModGhpcy50LCBwcm9wLCBwYXJzZUZsb2F0KG1hcmcpLCBtYXJnLnJlcGxhY2UoX3N1ZmZpeEV4cCwgXCJcIikpIHx8IDA7XG5cdFx0XHRcdFx0XHRpZiAodmFsICE9PSB0W3Byb3BdKSB7XG5cdFx0XHRcdFx0XHRcdGRpZiA9IChpIDwgMikgPyAtdC5pZU9mZnNldFggOiAtdC5pZU9mZnNldFk7IC8vaWYgYW5vdGhlciB0d2VlbiBpcyBjb250cm9sbGluZyBhIG1hcmdpbiwgd2UgY2Fubm90IG9ubHkgYXBwbHkgdGhlIGRpZmZlcmVuY2UgaW4gdGhlIGllT2Zmc2V0cywgc28gd2UgZXNzZW50aWFsbHkgemVyby1vdXQgdGhlIGR4IGFuZCBkeSBoZXJlIGluIHRoYXQgY2FzZS4gV2UgcmVjb3JkIHRoZSBtYXJnaW4ocykgbGF0ZXIgc28gdGhhdCB3ZSBjYW4ga2VlcCBjb21wYXJpbmcgdGhlbSwgbWFraW5nIHRoaXMgY29kZSB2ZXJ5IGZsZXhpYmxlLlxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZGlmID0gKGkgPCAyKSA/IGR4IC0gdC5pZU9mZnNldFggOiBkeSAtIHQuaWVPZmZzZXRZO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c3R5bGVbcHJvcF0gPSAodFtwcm9wXSA9IE1hdGgucm91bmQoIHZhbCAtIGRpZiAqICgoaSA9PT0gMCB8fCBpID09PSAyKSA/IDEgOiBtdWx0KSApKSArIFwicHhcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8qIHRyYW5zbGF0ZXMgYSBzdXBlciBzbWFsbCBkZWNpbWFsIHRvIGEgc3RyaW5nIFdJVEhPVVQgc2NpZW50aWZpYyBub3RhdGlvblxuXHRcdFx0X3NhZmVEZWNpbWFsID0gZnVuY3Rpb24obikge1xuXHRcdFx0XHR2YXIgcyA9IChuIDwgMCA/IC1uIDogbikgKyBcIlwiLFxuXHRcdFx0XHRcdGEgPSBzLnNwbGl0KFwiZS1cIik7XG5cdFx0XHRcdHJldHVybiAobiA8IDAgPyBcIi0wLlwiIDogXCIwLlwiKSArIG5ldyBBcnJheShwYXJzZUludChhWzFdLCAxMCkgfHwgMCkuam9pbihcIjBcIikgKyBhWzBdLnNwbGl0KFwiLlwiKS5qb2luKFwiXCIpO1xuXHRcdFx0fSxcblx0XHRcdCovXG5cblx0XHRcdF9zZXRUcmFuc2Zvcm1SYXRpbyA9IF9pbnRlcm5hbHMuc2V0M0RUcmFuc2Zvcm1SYXRpbyA9IF9pbnRlcm5hbHMuc2V0VHJhbnNmb3JtUmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHZhciB0ID0gdGhpcy5kYXRhLCAvL3JlZmVycyB0byB0aGUgZWxlbWVudCdzIF9nc1RyYW5zZm9ybSBvYmplY3Rcblx0XHRcdFx0XHRzdHlsZSA9IHRoaXMudC5zdHlsZSxcblx0XHRcdFx0XHRhbmdsZSA9IHQucm90YXRpb24sXG5cdFx0XHRcdFx0cm90YXRpb25YID0gdC5yb3RhdGlvblgsXG5cdFx0XHRcdFx0cm90YXRpb25ZID0gdC5yb3RhdGlvblksXG5cdFx0XHRcdFx0c3ggPSB0LnNjYWxlWCxcblx0XHRcdFx0XHRzeSA9IHQuc2NhbGVZLFxuXHRcdFx0XHRcdHN6ID0gdC5zY2FsZVosXG5cdFx0XHRcdFx0eCA9IHQueCxcblx0XHRcdFx0XHR5ID0gdC55LFxuXHRcdFx0XHRcdHogPSB0LnosXG5cdFx0XHRcdFx0aXNTVkcgPSB0LnN2Zyxcblx0XHRcdFx0XHRwZXJzcGVjdGl2ZSA9IHQucGVyc3BlY3RpdmUsXG5cdFx0XHRcdFx0Zm9yY2UzRCA9IHQuZm9yY2UzRCxcblx0XHRcdFx0XHRhMTEsIGExMiwgYTEzLCBhMjEsIGEyMiwgYTIzLCBhMzEsIGEzMiwgYTMzLCBhNDEsIGE0MiwgYTQzLFxuXHRcdFx0XHRcdHpPcmlnaW4sIG1pbiwgY29zLCBzaW4sIHQxLCB0MiwgdHJhbnNmb3JtLCBjb21tYSwgemVybywgc2tldywgcm5kO1xuXHRcdFx0XHQvL2NoZWNrIHRvIHNlZSBpZiB3ZSBzaG91bGQgcmVuZGVyIGFzIDJEIChhbmQgU1ZHcyBtdXN0IHVzZSAyRCB3aGVuIF91c2VTVkdUcmFuc2Zvcm1BdHRyIGlzIHRydWUpXG5cdFx0XHRcdGlmICgoKCgodiA9PT0gMSB8fCB2ID09PSAwKSAmJiBmb3JjZTNEID09PSBcImF1dG9cIiAmJiAodGhpcy50d2Vlbi5fdG90YWxUaW1lID09PSB0aGlzLnR3ZWVuLl90b3RhbER1cmF0aW9uIHx8ICF0aGlzLnR3ZWVuLl90b3RhbFRpbWUpKSB8fCAhZm9yY2UzRCkgJiYgIXogJiYgIXBlcnNwZWN0aXZlICYmICFyb3RhdGlvblkgJiYgIXJvdGF0aW9uWCAmJiBzeiA9PT0gMSkgfHwgKF91c2VTVkdUcmFuc2Zvcm1BdHRyICYmIGlzU1ZHKSB8fCAhX3N1cHBvcnRzM0QpIHsgLy9vbiB0aGUgZmluYWwgcmVuZGVyICh3aGljaCBjb3VsZCBiZSAwIGZvciBhIGZyb20gdHdlZW4pLCBpZiB0aGVyZSBhcmUgbm8gM0QgYXNwZWN0cywgcmVuZGVyIGluIDJEIHRvIGZyZWUgdXAgbWVtb3J5IGFuZCBpbXByb3ZlIHBlcmZvcm1hbmNlIGVzcGVjaWFsbHkgb24gbW9iaWxlIGRldmljZXMuIENoZWNrIHRoZSB0d2VlbidzIHRvdGFsVGltZS90b3RhbER1cmF0aW9uIHRvbyBpbiBvcmRlciB0byBtYWtlIHN1cmUgaXQgZG9lc24ndCBoYXBwZW4gYmV0d2VlbiByZXBlYXRzIGlmIGl0J3MgYSByZXBlYXRpbmcgdHdlZW4uXG5cblx0XHRcdFx0XHQvLzJEXG5cdFx0XHRcdFx0aWYgKGFuZ2xlIHx8IHQuc2tld1ggfHwgaXNTVkcpIHtcblx0XHRcdFx0XHRcdGFuZ2xlICo9IF9ERUcyUkFEO1xuXHRcdFx0XHRcdFx0c2tldyA9IHQuc2tld1ggKiBfREVHMlJBRDtcblx0XHRcdFx0XHRcdHJuZCA9IDEwMDAwMDtcblx0XHRcdFx0XHRcdGExMSA9IE1hdGguY29zKGFuZ2xlKSAqIHN4O1xuXHRcdFx0XHRcdFx0YTIxID0gTWF0aC5zaW4oYW5nbGUpICogc3g7XG5cdFx0XHRcdFx0XHRhMTIgPSBNYXRoLnNpbihhbmdsZSAtIHNrZXcpICogLXN5O1xuXHRcdFx0XHRcdFx0YTIyID0gTWF0aC5jb3MoYW5nbGUgLSBza2V3KSAqIHN5O1xuXHRcdFx0XHRcdFx0aWYgKHNrZXcgJiYgdC5za2V3VHlwZSA9PT0gXCJzaW1wbGVcIikgeyAvL2J5IGRlZmF1bHQsIHdlIGNvbXBlbnNhdGUgc2tld2luZyBvbiB0aGUgb3RoZXIgYXhpcyB0byBtYWtlIGl0IGxvb2sgbW9yZSBuYXR1cmFsLCBidXQgeW91IGNhbiBzZXQgdGhlIHNrZXdUeXBlIHRvIFwic2ltcGxlXCIgdG8gdXNlIHRoZSB1bmNvbXBlbnNhdGVkIHNrZXdpbmcgdGhhdCBDU1MgZG9lc1xuXHRcdFx0XHRcdFx0XHR0MSA9IE1hdGgudGFuKHNrZXcgLSB0LnNrZXdZICogX0RFRzJSQUQpO1xuXHRcdFx0XHRcdFx0XHR0MSA9IE1hdGguc3FydCgxICsgdDEgKiB0MSk7XG5cdFx0XHRcdFx0XHRcdGExMiAqPSB0MTtcblx0XHRcdFx0XHRcdFx0YTIyICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRpZiAodC5za2V3WSkge1xuXHRcdFx0XHRcdFx0XHRcdHQxID0gTWF0aC50YW4odC5za2V3WSAqIF9ERUcyUkFEKTtcblx0XHRcdFx0XHRcdFx0XHR0MSA9IE1hdGguc3FydCgxICsgdDEgKiB0MSk7XG5cdFx0XHRcdFx0XHRcdFx0YTExICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRcdGEyMSAqPSB0MTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGlzU1ZHKSB7XG5cdFx0XHRcdFx0XHRcdHggKz0gdC54T3JpZ2luIC0gKHQueE9yaWdpbiAqIGExMSArIHQueU9yaWdpbiAqIGExMikgKyB0LnhPZmZzZXQ7XG5cdFx0XHRcdFx0XHRcdHkgKz0gdC55T3JpZ2luIC0gKHQueE9yaWdpbiAqIGEyMSArIHQueU9yaWdpbiAqIGEyMikgKyB0LnlPZmZzZXQ7XG5cdFx0XHRcdFx0XHRcdGlmIChfdXNlU1ZHVHJhbnNmb3JtQXR0ciAmJiAodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSkgeyAvL1RoZSBTVkcgc3BlYyBkb2Vzbid0IHN1cHBvcnQgcGVyY2VudGFnZS1iYXNlZCB0cmFuc2xhdGlvbiBpbiB0aGUgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUsIHNvIHdlIG1lcmdlIGl0IGludG8gdGhlIG1hdHJpeCB0byBzaW11bGF0ZSBpdC5cblx0XHRcdFx0XHRcdFx0XHRtaW4gPSB0aGlzLnQuZ2V0QkJveCgpO1xuXHRcdFx0XHRcdFx0XHRcdHggKz0gdC54UGVyY2VudCAqIDAuMDEgKiBtaW4ud2lkdGg7XG5cdFx0XHRcdFx0XHRcdFx0eSArPSB0LnlQZXJjZW50ICogMC4wMSAqIG1pbi5oZWlnaHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0bWluID0gMC4wMDAwMDE7XG5cdFx0XHRcdFx0XHRcdGlmICh4IDwgbWluKSBpZiAoeCA+IC1taW4pIHtcblx0XHRcdFx0XHRcdFx0XHR4ID0gMDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoeSA8IG1pbikgaWYgKHkgPiAtbWluKSB7XG5cdFx0XHRcdFx0XHRcdFx0eSA9IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRyYW5zZm9ybSA9ICgoKGExMSAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGEyMSAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGExMiAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArICgoKGEyMiAqIHJuZCkgfCAwKSAvIHJuZCkgKyBcIixcIiArIHggKyBcIixcIiArIHkgKyBcIilcIjtcblx0XHRcdFx0XHRcdGlmIChpc1NWRyAmJiBfdXNlU1ZHVHJhbnNmb3JtQXR0cikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnQuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIFwibWF0cml4KFwiICsgdHJhbnNmb3JtKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vc29tZSBicm93c2VycyBoYXZlIGEgaGFyZCB0aW1lIHdpdGggdmVyeSBzbWFsbCB2YWx1ZXMgbGlrZSAyLjQ0OTI5MzU5ODI5NDcwNjRlLTE2IChub3RpY2UgdGhlIFwiZS1cIiB0b3dhcmRzIHRoZSBlbmQpIGFuZCB3b3VsZCByZW5kZXIgdGhlIG9iamVjdCBzbGlnaHRseSBvZmYuIFNvIHdlIHJvdW5kIHRvIDUgZGVjaW1hbCBwbGFjZXMuXG5cdFx0XHRcdFx0XHRcdHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9ICgodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSA/IFwidHJhbnNsYXRlKFwiICsgdC54UGVyY2VudCArIFwiJSxcIiArIHQueVBlcmNlbnQgKyBcIiUpIG1hdHJpeChcIiA6IFwibWF0cml4KFwiKSArIHRyYW5zZm9ybTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c3R5bGVbX3RyYW5zZm9ybVByb3BdID0gKCh0LnhQZXJjZW50IHx8IHQueVBlcmNlbnQpID8gXCJ0cmFuc2xhdGUoXCIgKyB0LnhQZXJjZW50ICsgXCIlLFwiICsgdC55UGVyY2VudCArIFwiJSkgbWF0cml4KFwiIDogXCJtYXRyaXgoXCIpICsgc3ggKyBcIiwwLDAsXCIgKyBzeSArIFwiLFwiICsgeCArIFwiLFwiICsgeSArIFwiKVwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX2lzRmlyZWZveCkgeyAvL0ZpcmVmb3ggaGFzIGEgYnVnIChhdCBsZWFzdCBpbiB2MjUpIHRoYXQgY2F1c2VzIGl0IHRvIHJlbmRlciB0aGUgdHJhbnNwYXJlbnQgcGFydCBvZiAzMi1iaXQgUE5HIGltYWdlcyBhcyBibGFjayB3aGVuIGRpc3BsYXllZCBpbnNpZGUgYW4gaWZyYW1lIGFuZCB0aGUgM0Qgc2NhbGUgaXMgdmVyeSBzbWFsbCBhbmQgZG9lc24ndCBjaGFuZ2Ugc3VmZmljaWVudGx5IGVub3VnaCBiZXR3ZWVuIHJlbmRlcnMgKGxpa2UgaWYgeW91IHVzZSBhIFBvd2VyNC5lYXNlSW5PdXQgdG8gc2NhbGUgZnJvbSAwIHRvIDEgd2hlcmUgdGhlIGJlZ2lubmluZyB2YWx1ZXMgb25seSBjaGFuZ2UgYSB0aW55IGFtb3VudCB0byBiZWdpbiB0aGUgdHdlZW4gYmVmb3JlIGFjY2VsZXJhdGluZykuIEluIHRoaXMgY2FzZSwgd2UgZm9yY2UgdGhlIHNjYWxlIHRvIGJlIDAuMDAwMDIgaW5zdGVhZCB3aGljaCBpcyB2aXN1YWxseSB0aGUgc2FtZSBidXQgd29ya3MgYXJvdW5kIHRoZSBGaXJlZm94IGlzc3VlLlxuXHRcdFx0XHRcdG1pbiA9IDAuMDAwMTtcblx0XHRcdFx0XHRpZiAoc3ggPCBtaW4gJiYgc3ggPiAtbWluKSB7XG5cdFx0XHRcdFx0XHRzeCA9IHN6ID0gMC4wMDAwMjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHN5IDwgbWluICYmIHN5ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0c3kgPSBzeiA9IDAuMDAwMDI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChwZXJzcGVjdGl2ZSAmJiAhdC56ICYmICF0LnJvdGF0aW9uWCAmJiAhdC5yb3RhdGlvblkpIHsgLy9GaXJlZm94IGhhcyBhIGJ1ZyB0aGF0IGNhdXNlcyBlbGVtZW50cyB0byBoYXZlIGFuIG9kZCBzdXBlci10aGluLCBicm9rZW4vZG90dGVkIGJsYWNrIGJvcmRlciBvbiBlbGVtZW50cyB0aGF0IGhhdmUgYSBwZXJzcGVjdGl2ZSBzZXQgYnV0IGFyZW4ndCB1dGlsaXppbmcgM0Qgc3BhY2UgKG5vIHJvdGF0aW9uWCwgcm90YXRpb25ZLCBvciB6KS5cblx0XHRcdFx0XHRcdHBlcnNwZWN0aXZlID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGFuZ2xlIHx8IHQuc2tld1gpIHtcblx0XHRcdFx0XHRhbmdsZSAqPSBfREVHMlJBRDtcblx0XHRcdFx0XHRjb3MgPSBhMTEgPSBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0XHRcdFx0c2luID0gYTIxID0gTWF0aC5zaW4oYW5nbGUpO1xuXHRcdFx0XHRcdGlmICh0LnNrZXdYKSB7XG5cdFx0XHRcdFx0XHRhbmdsZSAtPSB0LnNrZXdYICogX0RFRzJSQUQ7XG5cdFx0XHRcdFx0XHRjb3MgPSBNYXRoLmNvcyhhbmdsZSk7XG5cdFx0XHRcdFx0XHRzaW4gPSBNYXRoLnNpbihhbmdsZSk7XG5cdFx0XHRcdFx0XHRpZiAodC5za2V3VHlwZSA9PT0gXCJzaW1wbGVcIikgeyAvL2J5IGRlZmF1bHQsIHdlIGNvbXBlbnNhdGUgc2tld2luZyBvbiB0aGUgb3RoZXIgYXhpcyB0byBtYWtlIGl0IGxvb2sgbW9yZSBuYXR1cmFsLCBidXQgeW91IGNhbiBzZXQgdGhlIHNrZXdUeXBlIHRvIFwic2ltcGxlXCIgdG8gdXNlIHRoZSB1bmNvbXBlbnNhdGVkIHNrZXdpbmcgdGhhdCBDU1MgZG9lc1xuXHRcdFx0XHRcdFx0XHR0MSA9IE1hdGgudGFuKCh0LnNrZXdYIC0gdC5za2V3WSkgKiBfREVHMlJBRCk7XG5cdFx0XHRcdFx0XHRcdHQxID0gTWF0aC5zcXJ0KDEgKyB0MSAqIHQxKTtcblx0XHRcdFx0XHRcdFx0Y29zICo9IHQxO1xuXHRcdFx0XHRcdFx0XHRzaW4gKj0gdDE7XG5cdFx0XHRcdFx0XHRcdGlmICh0LnNrZXdZKSB7XG5cdFx0XHRcdFx0XHRcdFx0dDEgPSBNYXRoLnRhbih0LnNrZXdZICogX0RFRzJSQUQpO1xuXHRcdFx0XHRcdFx0XHRcdHQxID0gTWF0aC5zcXJ0KDEgKyB0MSAqIHQxKTtcblx0XHRcdFx0XHRcdFx0XHRhMTEgKj0gdDE7XG5cdFx0XHRcdFx0XHRcdFx0YTIxICo9IHQxO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGExMiA9IC1zaW47XG5cdFx0XHRcdFx0YTIyID0gY29zO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIXJvdGF0aW9uWSAmJiAhcm90YXRpb25YICYmIHN6ID09PSAxICYmICFwZXJzcGVjdGl2ZSAmJiAhaXNTVkcpIHsgLy9pZiB3ZSdyZSBvbmx5IHRyYW5zbGF0aW5nIGFuZC9vciAyRCBzY2FsaW5nLCB0aGlzIGlzIGZhc3Rlci4uLlxuXHRcdFx0XHRcdHN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9ICgodC54UGVyY2VudCB8fCB0LnlQZXJjZW50KSA/IFwidHJhbnNsYXRlKFwiICsgdC54UGVyY2VudCArIFwiJSxcIiArIHQueVBlcmNlbnQgKyBcIiUpIHRyYW5zbGF0ZTNkKFwiIDogXCJ0cmFuc2xhdGUzZChcIikgKyB4ICsgXCJweCxcIiArIHkgKyBcInB4LFwiICsgeiArXCJweClcIiArICgoc3ggIT09IDEgfHwgc3kgIT09IDEpID8gXCIgc2NhbGUoXCIgKyBzeCArIFwiLFwiICsgc3kgKyBcIilcIiA6IFwiXCIpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRhMTEgPSBhMjIgPSAxO1xuXHRcdFx0XHRcdGExMiA9IGEyMSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly8gS0VZICBJTkRFWCAgIEFGRkVDVFNcblx0XHRcdFx0Ly8gYTExICAwICAgICAgIHJvdGF0aW9uLCByb3RhdGlvblksIHNjYWxlWFxuXHRcdFx0XHQvLyBhMjEgIDEgICAgICAgcm90YXRpb24sIHJvdGF0aW9uWSwgc2NhbGVYXG5cdFx0XHRcdC8vIGEzMSAgMiAgICAgICByb3RhdGlvblksIHNjYWxlWFxuXHRcdFx0XHQvLyBhNDEgIDMgICAgICAgcm90YXRpb25ZLCBzY2FsZVhcblx0XHRcdFx0Ly8gYTEyICA0ICAgICAgIHJvdGF0aW9uLCBza2V3WCwgcm90YXRpb25YLCBzY2FsZVlcblx0XHRcdFx0Ly8gYTIyICA1ICAgICAgIHJvdGF0aW9uLCBza2V3WCwgcm90YXRpb25YLCBzY2FsZVlcblx0XHRcdFx0Ly8gYTMyICA2ICAgICAgIHJvdGF0aW9uWCwgc2NhbGVZXG5cdFx0XHRcdC8vIGE0MiAgNyAgICAgICByb3RhdGlvblgsIHNjYWxlWVxuXHRcdFx0XHQvLyBhMTMgIDggICAgICAgcm90YXRpb25ZLCByb3RhdGlvblgsIHNjYWxlWlxuXHRcdFx0XHQvLyBhMjMgIDkgICAgICAgcm90YXRpb25ZLCByb3RhdGlvblgsIHNjYWxlWlxuXHRcdFx0XHQvLyBhMzMgIDEwICAgICAgcm90YXRpb25ZLCByb3RhdGlvblgsIHNjYWxlWlxuXHRcdFx0XHQvLyBhNDMgIDExICAgICAgcm90YXRpb25ZLCByb3RhdGlvblgsIHBlcnNwZWN0aXZlLCBzY2FsZVpcblx0XHRcdFx0Ly8gYTE0ICAxMiAgICAgIHgsIHpPcmlnaW4sIHN2Z09yaWdpblxuXHRcdFx0XHQvLyBhMjQgIDEzICAgICAgeSwgek9yaWdpbiwgc3ZnT3JpZ2luXG5cdFx0XHRcdC8vIGEzNCAgMTQgICAgICB6LCB6T3JpZ2luXG5cdFx0XHRcdC8vIGE0NCAgMTVcblx0XHRcdFx0Ly8gcm90YXRpb246IE1hdGguYXRhbjIoYTIxLCBhMTEpXG5cdFx0XHRcdC8vIHJvdGF0aW9uWTogTWF0aC5hdGFuMihhMTMsIGEzMykgKG9yIE1hdGguYXRhbjIoYTEzLCBhMTEpKVxuXHRcdFx0XHQvLyByb3RhdGlvblg6IE1hdGguYXRhbjIoYTMyLCBhMzMpXG5cdFx0XHRcdGEzMyA9IDE7XG5cdFx0XHRcdGExMyA9IGEyMyA9IGEzMSA9IGEzMiA9IGE0MSA9IGE0MiA9IDA7XG5cdFx0XHRcdGE0MyA9IChwZXJzcGVjdGl2ZSkgPyAtMSAvIHBlcnNwZWN0aXZlIDogMDtcblx0XHRcdFx0ek9yaWdpbiA9IHQuek9yaWdpbjtcblx0XHRcdFx0bWluID0gMC4wMDAwMDE7IC8vdGhyZXNob2xkIGJlbG93IHdoaWNoIGJyb3dzZXJzIHVzZSBzY2llbnRpZmljIG5vdGF0aW9uIHdoaWNoIHdvbid0IHdvcmsuXG5cdFx0XHRcdGNvbW1hID0gXCIsXCI7XG5cdFx0XHRcdHplcm8gPSBcIjBcIjtcblx0XHRcdFx0YW5nbGUgPSByb3RhdGlvblkgKiBfREVHMlJBRDtcblx0XHRcdFx0aWYgKGFuZ2xlKSB7XG5cdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRcdHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdFx0XHRhMzEgPSAtc2luO1xuXHRcdFx0XHRcdGE0MSA9IGE0Myotc2luO1xuXHRcdFx0XHRcdGExMyA9IGExMSpzaW47XG5cdFx0XHRcdFx0YTIzID0gYTIxKnNpbjtcblx0XHRcdFx0XHRhMzMgPSBjb3M7XG5cdFx0XHRcdFx0YTQzICo9IGNvcztcblx0XHRcdFx0XHRhMTEgKj0gY29zO1xuXHRcdFx0XHRcdGEyMSAqPSBjb3M7XG5cdFx0XHRcdH1cblx0XHRcdFx0YW5nbGUgPSByb3RhdGlvblggKiBfREVHMlJBRDtcblx0XHRcdFx0aWYgKGFuZ2xlKSB7XG5cdFx0XHRcdFx0Y29zID0gTWF0aC5jb3MoYW5nbGUpO1xuXHRcdFx0XHRcdHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdFx0XHR0MSA9IGExMipjb3MrYTEzKnNpbjtcblx0XHRcdFx0XHR0MiA9IGEyMipjb3MrYTIzKnNpbjtcblx0XHRcdFx0XHRhMzIgPSBhMzMqc2luO1xuXHRcdFx0XHRcdGE0MiA9IGE0MypzaW47XG5cdFx0XHRcdFx0YTEzID0gYTEyKi1zaW4rYTEzKmNvcztcblx0XHRcdFx0XHRhMjMgPSBhMjIqLXNpbithMjMqY29zO1xuXHRcdFx0XHRcdGEzMyA9IGEzMypjb3M7XG5cdFx0XHRcdFx0YTQzID0gYTQzKmNvcztcblx0XHRcdFx0XHRhMTIgPSB0MTtcblx0XHRcdFx0XHRhMjIgPSB0Mjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoc3ogIT09IDEpIHtcblx0XHRcdFx0XHRhMTMqPXN6O1xuXHRcdFx0XHRcdGEyMyo9c3o7XG5cdFx0XHRcdFx0YTMzKj1zejtcblx0XHRcdFx0XHRhNDMqPXN6O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzeSAhPT0gMSkge1xuXHRcdFx0XHRcdGExMio9c3k7XG5cdFx0XHRcdFx0YTIyKj1zeTtcblx0XHRcdFx0XHRhMzIqPXN5O1xuXHRcdFx0XHRcdGE0Mio9c3k7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHN4ICE9PSAxKSB7XG5cdFx0XHRcdFx0YTExKj1zeDtcblx0XHRcdFx0XHRhMjEqPXN4O1xuXHRcdFx0XHRcdGEzMSo9c3g7XG5cdFx0XHRcdFx0YTQxKj1zeDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh6T3JpZ2luIHx8IGlzU1ZHKSB7XG5cdFx0XHRcdFx0aWYgKHpPcmlnaW4pIHtcblx0XHRcdFx0XHRcdHggKz0gYTEzKi16T3JpZ2luO1xuXHRcdFx0XHRcdFx0eSArPSBhMjMqLXpPcmlnaW47XG5cdFx0XHRcdFx0XHR6ICs9IGEzMyotek9yaWdpbit6T3JpZ2luO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoaXNTVkcpIHsgLy9kdWUgdG8gYnVncyBpbiBzb21lIGJyb3dzZXJzLCB3ZSBuZWVkIHRvIG1hbmFnZSB0aGUgdHJhbnNmb3JtLW9yaWdpbiBvZiBTVkcgbWFudWFsbHlcblx0XHRcdFx0XHRcdHggKz0gdC54T3JpZ2luIC0gKHQueE9yaWdpbiAqIGExMSArIHQueU9yaWdpbiAqIGExMikgKyB0LnhPZmZzZXQ7XG5cdFx0XHRcdFx0XHR5ICs9IHQueU9yaWdpbiAtICh0LnhPcmlnaW4gKiBhMjEgKyB0LnlPcmlnaW4gKiBhMjIpICsgdC55T2Zmc2V0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoeCA8IG1pbiAmJiB4ID4gLW1pbikge1xuXHRcdFx0XHRcdFx0eCA9IHplcm87XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh5IDwgbWluICYmIHkgPiAtbWluKSB7XG5cdFx0XHRcdFx0XHR5ID0gemVybztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHogPCBtaW4gJiYgeiA+IC1taW4pIHtcblx0XHRcdFx0XHRcdHogPSAwOyAvL2Rvbid0IHVzZSBzdHJpbmcgYmVjYXVzZSB3ZSBjYWxjdWxhdGUgcGVyc3BlY3RpdmUgbGF0ZXIgYW5kIG5lZWQgdGhlIG51bWJlci5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL29wdGltaXplZCB3YXkgb2YgY29uY2F0ZW5hdGluZyBhbGwgdGhlIHZhbHVlcyBpbnRvIGEgc3RyaW5nLiBJZiB3ZSBkbyBpdCBhbGwgaW4gb25lIHNob3QsIGl0J3Mgc2xvd2VyIGJlY2F1c2Ugb2YgdGhlIHdheSBicm93c2VycyBoYXZlIHRvIGNyZWF0ZSB0ZW1wIHN0cmluZ3MgYW5kIHRoZSB3YXkgaXQgYWZmZWN0cyBtZW1vcnkuIElmIHdlIGRvIGl0IHBpZWNlLWJ5LXBpZWNlIHdpdGggKz0sIGl0J3MgYSBiaXQgc2xvd2VyIHRvby4gV2UgZm91bmQgdGhhdCBkb2luZyBpdCBpbiB0aGVzZSBzaXplZCBjaHVua3Mgd29ya3MgYmVzdCBvdmVyYWxsOlxuXHRcdFx0XHR0cmFuc2Zvcm0gPSAoKHQueFBlcmNlbnQgfHwgdC55UGVyY2VudCkgPyBcInRyYW5zbGF0ZShcIiArIHQueFBlcmNlbnQgKyBcIiUsXCIgKyB0LnlQZXJjZW50ICsgXCIlKSBtYXRyaXgzZChcIiA6IFwibWF0cml4M2QoXCIpO1xuXHRcdFx0XHR0cmFuc2Zvcm0gKz0gKChhMTEgPCBtaW4gJiYgYTExID4gLW1pbikgPyB6ZXJvIDogYTExKSArIGNvbW1hICsgKChhMjEgPCBtaW4gJiYgYTIxID4gLW1pbikgPyB6ZXJvIDogYTIxKSArIGNvbW1hICsgKChhMzEgPCBtaW4gJiYgYTMxID4gLW1pbikgPyB6ZXJvIDogYTMxKTtcblx0XHRcdFx0dHJhbnNmb3JtICs9IGNvbW1hICsgKChhNDEgPCBtaW4gJiYgYTQxID4gLW1pbikgPyB6ZXJvIDogYTQxKSArIGNvbW1hICsgKChhMTIgPCBtaW4gJiYgYTEyID4gLW1pbikgPyB6ZXJvIDogYTEyKSArIGNvbW1hICsgKChhMjIgPCBtaW4gJiYgYTIyID4gLW1pbikgPyB6ZXJvIDogYTIyKTtcblx0XHRcdFx0aWYgKHJvdGF0aW9uWCB8fCByb3RhdGlvblkgfHwgc3ogIT09IDEpIHsgLy9wZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gKG9mdGVuIHRoZXJlJ3Mgbm8gcm90YXRpb25YIG9yIHJvdGF0aW9uWSwgc28gd2UgY2FuIHNraXAgdGhlc2UgY2FsY3VsYXRpb25zKVxuXHRcdFx0XHRcdHRyYW5zZm9ybSArPSBjb21tYSArICgoYTMyIDwgbWluICYmIGEzMiA+IC1taW4pID8gemVybyA6IGEzMikgKyBjb21tYSArICgoYTQyIDwgbWluICYmIGE0MiA+IC1taW4pID8gemVybyA6IGE0MikgKyBjb21tYSArICgoYTEzIDwgbWluICYmIGExMyA+IC1taW4pID8gemVybyA6IGExMyk7XG5cdFx0XHRcdFx0dHJhbnNmb3JtICs9IGNvbW1hICsgKChhMjMgPCBtaW4gJiYgYTIzID4gLW1pbikgPyB6ZXJvIDogYTIzKSArIGNvbW1hICsgKChhMzMgPCBtaW4gJiYgYTMzID4gLW1pbikgPyB6ZXJvIDogYTMzKSArIGNvbW1hICsgKChhNDMgPCBtaW4gJiYgYTQzID4gLW1pbikgPyB6ZXJvIDogYTQzKSArIGNvbW1hO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRyYW5zZm9ybSArPSBcIiwwLDAsMCwwLDEsMCxcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHR0cmFuc2Zvcm0gKz0geCArIGNvbW1hICsgeSArIGNvbW1hICsgeiArIGNvbW1hICsgKHBlcnNwZWN0aXZlID8gKDEgKyAoLXogLyBwZXJzcGVjdGl2ZSkpIDogMSkgKyBcIilcIjtcblxuXHRcdFx0XHRzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm07XG5cdFx0XHR9O1xuXG5cdFx0cCA9IFRyYW5zZm9ybS5wcm90b3R5cGU7XG5cdFx0cC54ID0gcC55ID0gcC56ID0gcC5za2V3WCA9IHAuc2tld1kgPSBwLnJvdGF0aW9uID0gcC5yb3RhdGlvblggPSBwLnJvdGF0aW9uWSA9IHAuek9yaWdpbiA9IHAueFBlcmNlbnQgPSBwLnlQZXJjZW50ID0gcC54T2Zmc2V0ID0gcC55T2Zmc2V0ID0gMDtcblx0XHRwLnNjYWxlWCA9IHAuc2NhbGVZID0gcC5zY2FsZVogPSAxO1xuXG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwidHJhbnNmb3JtLHNjYWxlLHNjYWxlWCxzY2FsZVksc2NhbGVaLHgseSx6LHJvdGF0aW9uLHJvdGF0aW9uWCxyb3RhdGlvblkscm90YXRpb25aLHNrZXdYLHNrZXdZLHNob3J0Um90YXRpb24sc2hvcnRSb3RhdGlvblgsc2hvcnRSb3RhdGlvblksc2hvcnRSb3RhdGlvblosdHJhbnNmb3JtT3JpZ2luLHN2Z09yaWdpbix0cmFuc2Zvcm1QZXJzcGVjdGl2ZSxkaXJlY3Rpb25hbFJvdGF0aW9uLHBhcnNlVHJhbnNmb3JtLGZvcmNlM0Qsc2tld1R5cGUseFBlcmNlbnQseVBlcmNlbnQsc21vb3RoT3JpZ2luXCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcGFyc2luZ1Byb3AsIGNzc3AsIHB0LCBwbHVnaW4sIHZhcnMpIHtcblx0XHRcdGlmIChjc3NwLl9sYXN0UGFyc2VkVHJhbnNmb3JtID09PSB2YXJzKSB7IHJldHVybiBwdDsgfSAvL29ubHkgbmVlZCB0byBwYXJzZSB0aGUgdHJhbnNmb3JtIG9uY2UsIGFuZCBvbmx5IGlmIHRoZSBicm93c2VyIHN1cHBvcnRzIGl0LlxuXHRcdFx0Y3NzcC5fbGFzdFBhcnNlZFRyYW5zZm9ybSA9IHZhcnM7XG5cdFx0XHR2YXIgc3dhcEZ1bmM7XG5cdFx0XHRpZiAodHlwZW9mKHZhcnNbcGFyc2luZ1Byb3BdKSA9PT0gXCJmdW5jdGlvblwiKSB7IC8vd2hhdGV2ZXIgcHJvcGVydHkgdHJpZ2dlcnMgdGhlIGluaXRpYWwgcGFyc2luZyBtaWdodCBiZSBhIGZ1bmN0aW9uLWJhc2VkIHZhbHVlIGluIHdoaWNoIGNhc2UgaXQgYWxyZWFkeSBnb3QgY2FsbGVkIGluIHBhcnNlKCksIHRodXMgd2UgZG9uJ3Qgd2FudCB0byBjYWxsIGl0IGFnYWluIGluIGhlcmUuIFRoZSBtb3N0IGVmZmljaWVudCB3YXkgdG8gYXZvaWQgdGhpcyBpcyB0byB0ZW1wb3JhcmlseSBzd2FwIHRoZSB2YWx1ZSBkaXJlY3RseSBpbnRvIHRoZSB2YXJzIG9iamVjdCwgYW5kIHRoZW4gYWZ0ZXIgd2UgZG8gYWxsIG91ciBwYXJzaW5nIGluIHRoaXMgZnVuY3Rpb24sIHdlJ2xsIHN3YXAgaXQgYmFjayBhZ2Fpbi5cblx0XHRcdFx0c3dhcEZ1bmMgPSB2YXJzW3BhcnNpbmdQcm9wXTtcblx0XHRcdFx0dmFyc1twYXJzaW5nUHJvcF0gPSBlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIG9yaWdpbmFsR1NUcmFuc2Zvcm0gPSB0Ll9nc1RyYW5zZm9ybSxcblx0XHRcdFx0c3R5bGUgPSB0LnN0eWxlLFxuXHRcdFx0XHRtaW4gPSAwLjAwMDAwMSxcblx0XHRcdFx0aSA9IF90cmFuc2Zvcm1Qcm9wcy5sZW5ndGgsXG5cdFx0XHRcdHYgPSB2YXJzLFxuXHRcdFx0XHRlbmRSb3RhdGlvbnMgPSB7fSxcblx0XHRcdFx0dHJhbnNmb3JtT3JpZ2luU3RyaW5nID0gXCJ0cmFuc2Zvcm1PcmlnaW5cIixcblx0XHRcdFx0bTEgPSBfZ2V0VHJhbnNmb3JtKHQsIF9jcywgdHJ1ZSwgdi5wYXJzZVRyYW5zZm9ybSksXG5cdFx0XHRcdG9yaWcgPSB2LnRyYW5zZm9ybSAmJiAoKHR5cGVvZih2LnRyYW5zZm9ybSkgPT09IFwiZnVuY3Rpb25cIikgPyB2LnRyYW5zZm9ybShfaW5kZXgsIF90YXJnZXQpIDogdi50cmFuc2Zvcm0pLFxuXHRcdFx0XHRtMiwgY29weSwgaGFzM0QsIGhhc0NoYW5nZSwgZHIsIHgsIHksIG1hdHJpeCwgcDtcblx0XHRcdGNzc3AuX3RyYW5zZm9ybSA9IG0xO1xuXHRcdFx0aWYgKG9yaWcgJiYgdHlwZW9mKG9yaWcpID09PSBcInN0cmluZ1wiICYmIF90cmFuc2Zvcm1Qcm9wKSB7IC8vZm9yIHZhbHVlcyBsaWtlIHRyYW5zZm9ybTpcInJvdGF0ZSg2MGRlZykgc2NhbGUoMC41LCAwLjgpXCJcblx0XHRcdFx0Y29weSA9IF90ZW1wRGl2LnN0eWxlOyAvL2Rvbid0IHVzZSB0aGUgb3JpZ2luYWwgdGFyZ2V0IGJlY2F1c2UgaXQgbWlnaHQgYmUgU1ZHIGluIHdoaWNoIGNhc2Ugc29tZSBicm93c2VycyBkb24ndCByZXBvcnQgY29tcHV0ZWQgc3R5bGUgY29ycmVjdGx5LlxuXHRcdFx0XHRjb3B5W190cmFuc2Zvcm1Qcm9wXSA9IG9yaWc7XG5cdFx0XHRcdGNvcHkuZGlzcGxheSA9IFwiYmxvY2tcIjsgLy9pZiBkaXNwbGF5IGlzIFwibm9uZVwiLCB0aGUgYnJvd3NlciBvZnRlbiByZWZ1c2VzIHRvIHJlcG9ydCB0aGUgdHJhbnNmb3JtIHByb3BlcnRpZXMgY29ycmVjdGx5LlxuXHRcdFx0XHRjb3B5LnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdFx0XHRfZG9jLmJvZHkuYXBwZW5kQ2hpbGQoX3RlbXBEaXYpO1xuXHRcdFx0XHRtMiA9IF9nZXRUcmFuc2Zvcm0oX3RlbXBEaXYsIG51bGwsIGZhbHNlKTtcblx0XHRcdFx0aWYgKG0xLnN2ZykgeyAvL2lmIGl0J3MgYW4gU1ZHIGVsZW1lbnQsIHgveSBwYXJ0IG9mIHRoZSBtYXRyaXggd2lsbCBiZSBhZmZlY3RlZCBieSB3aGF0ZXZlciB3ZSB1c2UgYXMgdGhlIG9yaWdpbiBhbmQgdGhlIG9mZnNldHMsIHNvIGNvbXBlbnNhdGUgaGVyZS4uLlxuXHRcdFx0XHRcdHggPSBtMS54T3JpZ2luO1xuXHRcdFx0XHRcdHkgPSBtMS55T3JpZ2luO1xuXHRcdFx0XHRcdG0yLnggLT0gbTEueE9mZnNldDtcblx0XHRcdFx0XHRtMi55IC09IG0xLnlPZmZzZXQ7XG5cdFx0XHRcdFx0aWYgKHYudHJhbnNmb3JtT3JpZ2luIHx8IHYuc3ZnT3JpZ2luKSB7IC8vaWYgdGhpcyB0d2VlbiBpcyBhbHRlcmluZyB0aGUgb3JpZ2luLCB3ZSBtdXN0IGZhY3RvciB0aGF0IGluIGhlcmUuIFRoZSBhY3R1YWwgd29yayBvZiByZWNvcmRpbmcgdGhlIHRyYW5zZm9ybU9yaWdpbiB2YWx1ZXMgYW5kIHNldHRpbmcgdXAgdGhlIFByb3BUd2VlbiBpcyBkb25lIGxhdGVyIChzdGlsbCBpbnNpZGUgdGhpcyBmdW5jdGlvbikgc28gd2UgY2Fubm90IGxlYXZlIHRoZSBjaGFuZ2VzIGludGFjdCBoZXJlIC0gd2Ugb25seSB3YW50IHRvIHVwZGF0ZSB0aGUgeC95IGFjY29yZGluZ2x5LlxuXHRcdFx0XHRcdFx0b3JpZyA9IHt9O1xuXHRcdFx0XHRcdFx0X3BhcnNlU1ZHT3JpZ2luKHQsIF9wYXJzZVBvc2l0aW9uKHYudHJhbnNmb3JtT3JpZ2luKSwgb3JpZywgdi5zdmdPcmlnaW4sIHYuc21vb3RoT3JpZ2luLCB0cnVlKTtcblx0XHRcdFx0XHRcdHggPSBvcmlnLnhPcmlnaW47XG5cdFx0XHRcdFx0XHR5ID0gb3JpZy55T3JpZ2luO1xuXHRcdFx0XHRcdFx0bTIueCAtPSBvcmlnLnhPZmZzZXQgLSBtMS54T2Zmc2V0O1xuXHRcdFx0XHRcdFx0bTIueSAtPSBvcmlnLnlPZmZzZXQgLSBtMS55T2Zmc2V0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoeCB8fCB5KSB7XG5cdFx0XHRcdFx0XHRtYXRyaXggPSBfZ2V0TWF0cml4KF90ZW1wRGl2LCB0cnVlKTtcblx0XHRcdFx0XHRcdG0yLnggLT0geCAtICh4ICogbWF0cml4WzBdICsgeSAqIG1hdHJpeFsyXSk7XG5cdFx0XHRcdFx0XHRtMi55IC09IHkgLSAoeCAqIG1hdHJpeFsxXSArIHkgKiBtYXRyaXhbM10pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRfZG9jLmJvZHkucmVtb3ZlQ2hpbGQoX3RlbXBEaXYpO1xuXHRcdFx0XHRpZiAoIW0yLnBlcnNwZWN0aXZlKSB7XG5cdFx0XHRcdFx0bTIucGVyc3BlY3RpdmUgPSBtMS5wZXJzcGVjdGl2ZTsgLy90d2VlbmluZyB0byBubyBwZXJzcGVjdGl2ZSBnaXZlcyB2ZXJ5IHVuaW50dWl0aXZlIHJlc3VsdHMgLSBqdXN0IGtlZXAgdGhlIHNhbWUgcGVyc3BlY3RpdmUgaW4gdGhhdCBjYXNlLlxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2LnhQZXJjZW50ICE9IG51bGwpIHtcblx0XHRcdFx0XHRtMi54UGVyY2VudCA9IF9wYXJzZVZhbCh2LnhQZXJjZW50LCBtMS54UGVyY2VudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHYueVBlcmNlbnQgIT0gbnVsbCkge1xuXHRcdFx0XHRcdG0yLnlQZXJjZW50ID0gX3BhcnNlVmFsKHYueVBlcmNlbnQsIG0xLnlQZXJjZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YodikgPT09IFwib2JqZWN0XCIpIHsgLy9mb3IgdmFsdWVzIGxpa2Ugc2NhbGVYLCBzY2FsZVksIHJvdGF0aW9uLCB4LCB5LCBza2V3WCwgYW5kIHNrZXdZIG9yIHRyYW5zZm9ybTp7Li4ufSAob2JqZWN0KVxuXHRcdFx0XHRtMiA9IHtzY2FsZVg6X3BhcnNlVmFsKCh2LnNjYWxlWCAhPSBudWxsKSA/IHYuc2NhbGVYIDogdi5zY2FsZSwgbTEuc2NhbGVYKSxcblx0XHRcdFx0XHRzY2FsZVk6X3BhcnNlVmFsKCh2LnNjYWxlWSAhPSBudWxsKSA/IHYuc2NhbGVZIDogdi5zY2FsZSwgbTEuc2NhbGVZKSxcblx0XHRcdFx0XHRzY2FsZVo6X3BhcnNlVmFsKHYuc2NhbGVaLCBtMS5zY2FsZVopLFxuXHRcdFx0XHRcdHg6X3BhcnNlVmFsKHYueCwgbTEueCksXG5cdFx0XHRcdFx0eTpfcGFyc2VWYWwodi55LCBtMS55KSxcblx0XHRcdFx0XHR6Ol9wYXJzZVZhbCh2LnosIG0xLnopLFxuXHRcdFx0XHRcdHhQZXJjZW50Ol9wYXJzZVZhbCh2LnhQZXJjZW50LCBtMS54UGVyY2VudCksXG5cdFx0XHRcdFx0eVBlcmNlbnQ6X3BhcnNlVmFsKHYueVBlcmNlbnQsIG0xLnlQZXJjZW50KSxcblx0XHRcdFx0XHRwZXJzcGVjdGl2ZTpfcGFyc2VWYWwodi50cmFuc2Zvcm1QZXJzcGVjdGl2ZSwgbTEucGVyc3BlY3RpdmUpfTtcblx0XHRcdFx0ZHIgPSB2LmRpcmVjdGlvbmFsUm90YXRpb247XG5cdFx0XHRcdGlmIChkciAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZihkcikgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRcdGZvciAoY29weSBpbiBkcikge1xuXHRcdFx0XHRcdFx0XHR2W2NvcHldID0gZHJbY29weV07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHYucm90YXRpb24gPSBkcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHR5cGVvZih2LngpID09PSBcInN0cmluZ1wiICYmIHYueC5pbmRleE9mKFwiJVwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRtMi54ID0gMDtcblx0XHRcdFx0XHRtMi54UGVyY2VudCA9IF9wYXJzZVZhbCh2LngsIG0xLnhQZXJjZW50KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHlwZW9mKHYueSkgPT09IFwic3RyaW5nXCIgJiYgdi55LmluZGV4T2YoXCIlXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdG0yLnkgPSAwO1xuXHRcdFx0XHRcdG0yLnlQZXJjZW50ID0gX3BhcnNlVmFsKHYueSwgbTEueVBlcmNlbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bTIucm90YXRpb24gPSBfcGFyc2VBbmdsZSgoXCJyb3RhdGlvblwiIGluIHYpID8gdi5yb3RhdGlvbiA6IChcInNob3J0Um90YXRpb25cIiBpbiB2KSA/IHYuc2hvcnRSb3RhdGlvbiArIFwiX3Nob3J0XCIgOiAoXCJyb3RhdGlvblpcIiBpbiB2KSA/IHYucm90YXRpb25aIDogbTEucm90YXRpb24gLSBtMS5za2V3WSwgbTEucm90YXRpb24gLSBtMS5za2V3WSwgXCJyb3RhdGlvblwiLCBlbmRSb3RhdGlvbnMpOyAvL3NlZSBub3RlcyBiZWxvdyBhYm91dCBza2V3WSBmb3Igd2h5IHdlIHN1YnRyYWN0IGl0IGZyb20gcm90YXRpb24gaGVyZVxuXHRcdFx0XHRpZiAoX3N1cHBvcnRzM0QpIHtcblx0XHRcdFx0XHRtMi5yb3RhdGlvblggPSBfcGFyc2VBbmdsZSgoXCJyb3RhdGlvblhcIiBpbiB2KSA/IHYucm90YXRpb25YIDogKFwic2hvcnRSb3RhdGlvblhcIiBpbiB2KSA/IHYuc2hvcnRSb3RhdGlvblggKyBcIl9zaG9ydFwiIDogbTEucm90YXRpb25YIHx8IDAsIG0xLnJvdGF0aW9uWCwgXCJyb3RhdGlvblhcIiwgZW5kUm90YXRpb25zKTtcblx0XHRcdFx0XHRtMi5yb3RhdGlvblkgPSBfcGFyc2VBbmdsZSgoXCJyb3RhdGlvbllcIiBpbiB2KSA/IHYucm90YXRpb25ZIDogKFwic2hvcnRSb3RhdGlvbllcIiBpbiB2KSA/IHYuc2hvcnRSb3RhdGlvblkgKyBcIl9zaG9ydFwiIDogbTEucm90YXRpb25ZIHx8IDAsIG0xLnJvdGF0aW9uWSwgXCJyb3RhdGlvbllcIiwgZW5kUm90YXRpb25zKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRtMi5za2V3WCA9IF9wYXJzZUFuZ2xlKHYuc2tld1gsIG0xLnNrZXdYIC0gbTEuc2tld1kpOyAvL3NlZSBub3RlcyBiZWxvdyBhYm91dCBza2V3WSBhbmQgd2h5IHdlIHN1YnRyYWN0IGl0IGZyb20gc2tld1ggaGVyZVxuXG5cdFx0XHRcdC8vbm90ZTogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHdlIGNvbWJpbmUgYWxsIHNrZXdpbmcgaW50byB0aGUgc2tld1ggYW5kIHJvdGF0aW9uIHZhbHVlcywgaWdub3Jpbmcgc2tld1kgYnV0IHdlIG11c3Qgc3RpbGwgcmVjb3JkIGl0IHNvIHRoYXQgd2UgY2FuIGRpc2Nlcm4gaG93IG11Y2ggb2YgdGhlIG92ZXJhbGwgc2tldyBpcyBhdHRyaWJ1dGVkIHRvIHNrZXdYIHZzLiBza2V3WS4gT3RoZXJ3aXNlLCBpZiB0aGUgc2tld1kgd291bGQgYWx3YXlzIGFjdCByZWxhdGl2ZSAodHdlZW4gc2tld1kgdG8gMTBkZWcsIGZvciBleGFtcGxlLCBtdWx0aXBsZSB0aW1lcyBhbmQgaWYgd2UgYWx3YXlzIGNvbWJpbmUgdGhpbmdzIGludG8gc2tld1gsIHdlIGNhbid0IHJlbWVtYmVyIHRoYXQgc2tld1kgd2FzIDEwIGZyb20gbGFzdCB0aW1lKS4gUmVtZW1iZXIsIGEgc2tld1kgb2YgMTAgZGVncmVlcyBsb29rcyB0aGUgc2FtZSBhcyBhIHJvdGF0aW9uIG9mIDEwIGRlZ3JlZXMgcGx1cyBhIHNrZXdYIG9mIC0xMCBkZWdyZWVzLlxuXHRcdFx0XHRpZiAoKG0yLnNrZXdZID0gX3BhcnNlQW5nbGUodi5za2V3WSwgbTEuc2tld1kpKSkge1xuXHRcdFx0XHRcdG0yLnNrZXdYICs9IG0yLnNrZXdZO1xuXHRcdFx0XHRcdG0yLnJvdGF0aW9uICs9IG0yLnNrZXdZO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoX3N1cHBvcnRzM0QgJiYgdi5mb3JjZTNEICE9IG51bGwpIHtcblx0XHRcdFx0bTEuZm9yY2UzRCA9IHYuZm9yY2UzRDtcblx0XHRcdFx0aGFzQ2hhbmdlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0bTEuc2tld1R5cGUgPSB2LnNrZXdUeXBlIHx8IG0xLnNrZXdUeXBlIHx8IENTU1BsdWdpbi5kZWZhdWx0U2tld1R5cGU7XG5cblx0XHRcdGhhczNEID0gKG0xLmZvcmNlM0QgfHwgbTEueiB8fCBtMS5yb3RhdGlvblggfHwgbTEucm90YXRpb25ZIHx8IG0yLnogfHwgbTIucm90YXRpb25YIHx8IG0yLnJvdGF0aW9uWSB8fCBtMi5wZXJzcGVjdGl2ZSk7XG5cdFx0XHRpZiAoIWhhczNEICYmIHYuc2NhbGUgIT0gbnVsbCkge1xuXHRcdFx0XHRtMi5zY2FsZVogPSAxOyAvL25vIG5lZWQgdG8gdHdlZW4gc2NhbGVaLlxuXHRcdFx0fVxuXG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0cCA9IF90cmFuc2Zvcm1Qcm9wc1tpXTtcblx0XHRcdFx0b3JpZyA9IG0yW3BdIC0gbTFbcF07XG5cdFx0XHRcdGlmIChvcmlnID4gbWluIHx8IG9yaWcgPCAtbWluIHx8IHZbcF0gIT0gbnVsbCB8fCBfZm9yY2VQVFtwXSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0aGFzQ2hhbmdlID0gdHJ1ZTtcblx0XHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4obTEsIHAsIG0xW3BdLCBvcmlnLCBwdCk7XG5cdFx0XHRcdFx0aWYgKHAgaW4gZW5kUm90YXRpb25zKSB7XG5cdFx0XHRcdFx0XHRwdC5lID0gZW5kUm90YXRpb25zW3BdOyAvL2RpcmVjdGlvbmFsIHJvdGF0aW9ucyB0eXBpY2FsbHkgaGF2ZSBjb21wZW5zYXRlZCB2YWx1ZXMgZHVyaW5nIHRoZSB0d2VlbiwgYnV0IHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZXkgZW5kIGF0IGV4YWN0bHkgd2hhdCB0aGUgdXNlciByZXF1ZXN0ZWRcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cHQueHMwID0gMDsgLy9lbnN1cmVzIHRoZSB2YWx1ZSBzdGF5cyBudW1lcmljIGluIHNldFJhdGlvKClcblx0XHRcdFx0XHRwdC5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdFx0Y3NzcC5fb3ZlcndyaXRlUHJvcHMucHVzaChwdC5uKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRvcmlnID0gdi50cmFuc2Zvcm1PcmlnaW47XG5cdFx0XHRpZiAobTEuc3ZnICYmIChvcmlnIHx8IHYuc3ZnT3JpZ2luKSkge1xuXHRcdFx0XHR4ID0gbTEueE9mZnNldDsgLy93aGVuIHdlIGNoYW5nZSB0aGUgb3JpZ2luLCBpbiBvcmRlciB0byBwcmV2ZW50IHRoaW5ncyBmcm9tIGp1bXBpbmcgd2UgYWRqdXN0IHRoZSB4L3kgc28gd2UgbXVzdCByZWNvcmQgdGhvc2UgaGVyZSBzbyB0aGF0IHdlIGNhbiBjcmVhdGUgUHJvcFR3ZWVucyBmb3IgdGhlbSBhbmQgZmxpcCB0aGVtIGF0IHRoZSBzYW1lIHRpbWUgYXMgdGhlIG9yaWdpblxuXHRcdFx0XHR5ID0gbTEueU9mZnNldDtcblx0XHRcdFx0X3BhcnNlU1ZHT3JpZ2luKHQsIF9wYXJzZVBvc2l0aW9uKG9yaWcpLCBtMiwgdi5zdmdPcmlnaW4sIHYuc21vb3RoT3JpZ2luKTtcblx0XHRcdFx0cHQgPSBfYWRkTm9uVHdlZW5pbmdOdW1lcmljUFQobTEsIFwieE9yaWdpblwiLCAob3JpZ2luYWxHU1RyYW5zZm9ybSA/IG0xIDogbTIpLnhPcmlnaW4sIG0yLnhPcmlnaW4sIHB0LCB0cmFuc2Zvcm1PcmlnaW5TdHJpbmcpOyAvL25vdGU6IGlmIHRoZXJlIHdhc24ndCBhIHRyYW5zZm9ybU9yaWdpbiBkZWZpbmVkIHlldCwganVzdCBzdGFydCB3aXRoIHRoZSBkZXN0aW5hdGlvbiBvbmU7IGl0J3Mgd2FzdGVmdWwgb3RoZXJ3aXNlLCBhbmQgaXQgY2F1c2VzIHByb2JsZW1zIHdpdGggZnJvbVRvKCkgdHdlZW5zLiBGb3IgZXhhbXBsZSwgVHdlZW5MaXRlLnRvKFwiI3doZWVsXCIsIDMsIHtyb3RhdGlvbjoxODAsIHRyYW5zZm9ybU9yaWdpbjpcIjUwJSA1MCVcIiwgZGVsYXk6MX0pOyBUd2VlbkxpdGUuZnJvbVRvKFwiI3doZWVsXCIsIDMsIHtzY2FsZTowLjUsIHRyYW5zZm9ybU9yaWdpbjpcIjUwJSA1MCVcIn0sIHtzY2FsZToxLCBkZWxheToyfSk7IHdvdWxkIGNhdXNlIGEganVtcCB3aGVuIHRoZSBmcm9tIHZhbHVlcyByZXZlcnQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgMm5kIHR3ZWVuLlxuXHRcdFx0XHRwdCA9IF9hZGROb25Ud2VlbmluZ051bWVyaWNQVChtMSwgXCJ5T3JpZ2luXCIsIChvcmlnaW5hbEdTVHJhbnNmb3JtID8gbTEgOiBtMikueU9yaWdpbiwgbTIueU9yaWdpbiwgcHQsIHRyYW5zZm9ybU9yaWdpblN0cmluZyk7XG5cdFx0XHRcdGlmICh4ICE9PSBtMS54T2Zmc2V0IHx8IHkgIT09IG0xLnlPZmZzZXQpIHtcblx0XHRcdFx0XHRwdCA9IF9hZGROb25Ud2VlbmluZ051bWVyaWNQVChtMSwgXCJ4T2Zmc2V0XCIsIChvcmlnaW5hbEdTVHJhbnNmb3JtID8geCA6IG0xLnhPZmZzZXQpLCBtMS54T2Zmc2V0LCBwdCwgdHJhbnNmb3JtT3JpZ2luU3RyaW5nKTtcblx0XHRcdFx0XHRwdCA9IF9hZGROb25Ud2VlbmluZ051bWVyaWNQVChtMSwgXCJ5T2Zmc2V0XCIsIChvcmlnaW5hbEdTVHJhbnNmb3JtID8geSA6IG0xLnlPZmZzZXQpLCBtMS55T2Zmc2V0LCBwdCwgdHJhbnNmb3JtT3JpZ2luU3RyaW5nKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRvcmlnID0gX3VzZVNWR1RyYW5zZm9ybUF0dHIgPyBudWxsIDogXCIwcHggMHB4XCI7IC8vY2VydGFpbiBicm93c2VycyAobGlrZSBmaXJlZm94KSBjb21wbGV0ZWx5IGJvdGNoIHRyYW5zZm9ybS1vcmlnaW4sIHNvIHdlIG11c3QgcmVtb3ZlIGl0IHRvIHByZXZlbnQgaXQgZnJvbSBjb250YW1pbmF0aW5nIHRyYW5zZm9ybXMuIFdlIG1hbmFnZSBpdCBvdXJzZWx2ZXMgd2l0aCB4T3JpZ2luIGFuZCB5T3JpZ2luXG5cdFx0XHR9XG5cdFx0XHRpZiAob3JpZyB8fCAoX3N1cHBvcnRzM0QgJiYgaGFzM0QgJiYgbTEuek9yaWdpbikpIHsgLy9pZiBhbnl0aGluZyAzRCBpcyBoYXBwZW5pbmcgYW5kIHRoZXJlJ3MgYSB0cmFuc2Zvcm1PcmlnaW4gd2l0aCBhIHogY29tcG9uZW50IHRoYXQncyBub24temVybywgd2UgbXVzdCBlbnN1cmUgdGhhdCB0aGUgdHJhbnNmb3JtT3JpZ2luJ3Mgei1jb21wb25lbnQgaXMgc2V0IHRvIDAgc28gdGhhdCB3ZSBjYW4gbWFudWFsbHkgZG8gdGhvc2UgY2FsY3VsYXRpb25zIHRvIGdldCBhcm91bmQgU2FmYXJpIGJ1Z3MuIEV2ZW4gaWYgdGhlIHVzZXIgZGlkbid0IHNwZWNpZmljYWxseSBkZWZpbmUgYSBcInRyYW5zZm9ybU9yaWdpblwiIGluIHRoaXMgcGFydGljdWxhciB0d2VlbiAobWF5YmUgdGhleSBkaWQgaXQgdmlhIGNzcyBkaXJlY3RseSkuXG5cdFx0XHRcdGlmIChfdHJhbnNmb3JtUHJvcCkge1xuXHRcdFx0XHRcdGhhc0NoYW5nZSA9IHRydWU7XG5cdFx0XHRcdFx0cCA9IF90cmFuc2Zvcm1PcmlnaW5Qcm9wO1xuXHRcdFx0XHRcdG9yaWcgPSAob3JpZyB8fCBfZ2V0U3R5bGUodCwgcCwgX2NzLCBmYWxzZSwgXCI1MCUgNTAlXCIpKSArIFwiXCI7IC8vY2FzdCBhcyBzdHJpbmcgdG8gYXZvaWQgZXJyb3JzXG5cdFx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBwLCAwLCAwLCBwdCwgLTEsIHRyYW5zZm9ybU9yaWdpblN0cmluZyk7XG5cdFx0XHRcdFx0cHQuYiA9IHN0eWxlW3BdO1xuXHRcdFx0XHRcdHB0LnBsdWdpbiA9IHBsdWdpbjtcblx0XHRcdFx0XHRpZiAoX3N1cHBvcnRzM0QpIHtcblx0XHRcdFx0XHRcdGNvcHkgPSBtMS56T3JpZ2luO1xuXHRcdFx0XHRcdFx0b3JpZyA9IG9yaWcuc3BsaXQoXCIgXCIpO1xuXHRcdFx0XHRcdFx0bTEuek9yaWdpbiA9ICgob3JpZy5sZW5ndGggPiAyICYmICEoY29weSAhPT0gMCAmJiBvcmlnWzJdID09PSBcIjBweFwiKSkgPyBwYXJzZUZsb2F0KG9yaWdbMl0pIDogY29weSkgfHwgMDsgLy9TYWZhcmkgZG9lc24ndCBoYW5kbGUgdGhlIHogcGFydCBvZiB0cmFuc2Zvcm1PcmlnaW4gY29ycmVjdGx5LCBzbyB3ZSdsbCBtYW51YWxseSBoYW5kbGUgaXQgaW4gdGhlIF9zZXQzRFRyYW5zZm9ybVJhdGlvKCkgbWV0aG9kLlxuXHRcdFx0XHRcdFx0cHQueHMwID0gcHQuZSA9IG9yaWdbMF0gKyBcIiBcIiArIChvcmlnWzFdIHx8IFwiNTAlXCIpICsgXCIgMHB4XCI7IC8vd2UgbXVzdCBkZWZpbmUgYSB6IHZhbHVlIG9mIDBweCBzcGVjaWZpY2FsbHkgb3RoZXJ3aXNlIGlPUyA1IFNhZmFyaSB3aWxsIHN0aWNrIHdpdGggdGhlIG9sZCBvbmUgKGlmIG9uZSB3YXMgZGVmaW5lZCkhXG5cdFx0XHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4obTEsIFwiek9yaWdpblwiLCAwLCAwLCBwdCwgLTEsIHB0Lm4pOyAvL3dlIG11c3QgY3JlYXRlIGEgQ1NTUHJvcFR3ZWVuIGZvciB0aGUgX2dzVHJhbnNmb3JtLnpPcmlnaW4gc28gdGhhdCBpdCBnZXRzIHJlc2V0IHByb3Blcmx5IGF0IHRoZSBiZWdpbm5pbmcgaWYgdGhlIHR3ZWVuIHJ1bnMgYmFja3dhcmQgKGFzIG9wcG9zZWQgdG8ganVzdCBzZXR0aW5nIG0xLnpPcmlnaW4gaGVyZSlcblx0XHRcdFx0XHRcdHB0LmIgPSBjb3B5O1xuXHRcdFx0XHRcdFx0cHQueHMwID0gcHQuZSA9IG0xLnpPcmlnaW47XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB0LnhzMCA9IHB0LmUgPSBvcmlnO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vZm9yIG9sZGVyIHZlcnNpb25zIG9mIElFICg2LTgpLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IGNhbGN1bGF0ZSB0aGluZ3MgaW5zaWRlIHRoZSBzZXRSYXRpbygpIGZ1bmN0aW9uLiBXZSByZWNvcmQgb3JpZ2luIHggYW5kIHkgKG94IGFuZCBveSkgYW5kIHdoZXRoZXIgb3Igbm90IHRoZSB2YWx1ZXMgYXJlIHBlcmNlbnRhZ2VzIChveHAgYW5kIG95cCkuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0X3BhcnNlUG9zaXRpb24ob3JpZyArIFwiXCIsIG0xKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGhhc0NoYW5nZSkge1xuXHRcdFx0XHRjc3NwLl90cmFuc2Zvcm1UeXBlID0gKCEobTEuc3ZnICYmIF91c2VTVkdUcmFuc2Zvcm1BdHRyKSAmJiAoaGFzM0QgfHwgdGhpcy5fdHJhbnNmb3JtVHlwZSA9PT0gMykpID8gMyA6IDI7IC8vcXVpY2tlciB0aGFuIGNhbGxpbmcgY3NzcC5fZW5hYmxlVHJhbnNmb3JtcygpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHN3YXBGdW5jKSB7XG5cdFx0XHRcdHZhcnNbcGFyc2luZ1Byb3BdID0gc3dhcEZ1bmM7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fSwgcHJlZml4OnRydWV9KTtcblxuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJveFNoYWRvd1wiLCB7ZGVmYXVsdFZhbHVlOlwiMHB4IDBweCAwcHggMHB4ICM5OTlcIiwgcHJlZml4OnRydWUsIGNvbG9yOnRydWUsIG11bHRpOnRydWUsIGtleXdvcmQ6XCJpbnNldFwifSk7XG5cblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJib3JkZXJSYWRpdXNcIiwge2RlZmF1bHRWYWx1ZTpcIjBweFwiLCBwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0ZSA9IHRoaXMuZm9ybWF0KGUpO1xuXHRcdFx0dmFyIHByb3BzID0gW1wiYm9yZGVyVG9wTGVmdFJhZGl1c1wiLFwiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIixcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsXCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzXCJdLFxuXHRcdFx0XHRzdHlsZSA9IHQuc3R5bGUsXG5cdFx0XHRcdGVhMSwgaSwgZXMyLCBiczIsIGJzLCBlcywgYm4sIGVuLCB3LCBoLCBlc2Z4LCBic2Z4LCByZWwsIGhuLCB2biwgZW07XG5cdFx0XHR3ID0gcGFyc2VGbG9hdCh0Lm9mZnNldFdpZHRoKTtcblx0XHRcdGggPSBwYXJzZUZsb2F0KHQub2Zmc2V0SGVpZ2h0KTtcblx0XHRcdGVhMSA9IGUuc3BsaXQoXCIgXCIpO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IC8vaWYgd2UncmUgZGVhbGluZyB3aXRoIHBlcmNlbnRhZ2VzLCB3ZSBtdXN0IGNvbnZlcnQgdGhpbmdzIHNlcGFyYXRlbHkgZm9yIHRoZSBob3Jpem9udGFsIGFuZCB2ZXJ0aWNhbCBheGlzIVxuXHRcdFx0XHRpZiAodGhpcy5wLmluZGV4T2YoXCJib3JkZXJcIikpIHsgLy9vbGRlciBicm93c2VycyB1c2VkIGEgcHJlZml4XG5cdFx0XHRcdFx0cHJvcHNbaV0gPSBfY2hlY2tQcm9wUHJlZml4KHByb3BzW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicyA9IGJzMiA9IF9nZXRTdHlsZSh0LCBwcm9wc1tpXSwgX2NzLCBmYWxzZSwgXCIwcHhcIik7XG5cdFx0XHRcdGlmIChicy5pbmRleE9mKFwiIFwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRiczIgPSBicy5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0YnMgPSBiczJbMF07XG5cdFx0XHRcdFx0YnMyID0gYnMyWzFdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVzID0gZXMyID0gZWExW2ldO1xuXHRcdFx0XHRibiA9IHBhcnNlRmxvYXQoYnMpO1xuXHRcdFx0XHRic2Z4ID0gYnMuc3Vic3RyKChibiArIFwiXCIpLmxlbmd0aCk7XG5cdFx0XHRcdHJlbCA9IChlcy5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0aWYgKHJlbCkge1xuXHRcdFx0XHRcdGVuID0gcGFyc2VJbnQoZXMuY2hhckF0KDApK1wiMVwiLCAxMCk7XG5cdFx0XHRcdFx0ZXMgPSBlcy5zdWJzdHIoMik7XG5cdFx0XHRcdFx0ZW4gKj0gcGFyc2VGbG9hdChlcyk7XG5cdFx0XHRcdFx0ZXNmeCA9IGVzLnN1YnN0cigoZW4gKyBcIlwiKS5sZW5ndGggLSAoZW4gPCAwID8gMSA6IDApKSB8fCBcIlwiO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVuID0gcGFyc2VGbG9hdChlcyk7XG5cdFx0XHRcdFx0ZXNmeCA9IGVzLnN1YnN0cigoZW4gKyBcIlwiKS5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlc2Z4ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0ZXNmeCA9IF9zdWZmaXhNYXBbcF0gfHwgYnNmeDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZXNmeCAhPT0gYnNmeCkge1xuXHRcdFx0XHRcdGhuID0gX2NvbnZlcnRUb1BpeGVscyh0LCBcImJvcmRlckxlZnRcIiwgYm4sIGJzZngpOyAvL2hvcml6b250YWwgbnVtYmVyICh3ZSB1c2UgYSBib2d1cyBcImJvcmRlckxlZnRcIiBwcm9wZXJ0eSBqdXN0IGJlY2F1c2UgdGhlIF9jb252ZXJ0VG9QaXhlbHMoKSBtZXRob2Qgc2VhcmNoZXMgZm9yIHRoZSBrZXl3b3JkcyBcIkxlZnRcIiwgXCJSaWdodFwiLCBcIlRvcFwiLCBhbmQgXCJCb3R0b21cIiB0byBkZXRlcm1pbmUgb2YgaXQncyBhIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydHksIGFuZCB3ZSBuZWVkIFwiYm9yZGVyXCIgaW4gdGhlIG5hbWUgc28gdGhhdCBpdCBrbm93cyBpdCBzaG91bGQgbWVhc3VyZSByZWxhdGl2ZSB0byB0aGUgZWxlbWVudCBpdHNlbGYsIG5vdCBpdHMgcGFyZW50LlxuXHRcdFx0XHRcdHZuID0gX2NvbnZlcnRUb1BpeGVscyh0LCBcImJvcmRlclRvcFwiLCBibiwgYnNmeCk7IC8vdmVydGljYWwgbnVtYmVyXG5cdFx0XHRcdFx0aWYgKGVzZnggPT09IFwiJVwiKSB7XG5cdFx0XHRcdFx0XHRicyA9IChobiAvIHcgKiAxMDApICsgXCIlXCI7XG5cdFx0XHRcdFx0XHRiczIgPSAodm4gLyBoICogMTAwKSArIFwiJVwiO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZXNmeCA9PT0gXCJlbVwiKSB7XG5cdFx0XHRcdFx0XHRlbSA9IF9jb252ZXJ0VG9QaXhlbHModCwgXCJib3JkZXJMZWZ0XCIsIDEsIFwiZW1cIik7XG5cdFx0XHRcdFx0XHRicyA9IChobiAvIGVtKSArIFwiZW1cIjtcblx0XHRcdFx0XHRcdGJzMiA9ICh2biAvIGVtKSArIFwiZW1cIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0YnMgPSBobiArIFwicHhcIjtcblx0XHRcdFx0XHRcdGJzMiA9IHZuICsgXCJweFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAocmVsKSB7XG5cdFx0XHRcdFx0XHRlcyA9IChwYXJzZUZsb2F0KGJzKSArIGVuKSArIGVzZng7XG5cdFx0XHRcdFx0XHRlczIgPSAocGFyc2VGbG9hdChiczIpICsgZW4pICsgZXNmeDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBfcGFyc2VDb21wbGV4KHN0eWxlLCBwcm9wc1tpXSwgYnMgKyBcIiBcIiArIGJzMiwgZXMgKyBcIiBcIiArIGVzMiwgZmFsc2UsIFwiMHB4XCIsIHB0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwdDtcblx0XHR9LCBwcmVmaXg6dHJ1ZSwgZm9ybWF0dGVyOl9nZXRGb3JtYXR0ZXIoXCIwcHggMHB4IDBweCAwcHhcIiwgZmFsc2UsIHRydWUpfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyxib3JkZXJCb3R0b21SaWdodFJhZGl1cyxib3JkZXJUb3BMZWZ0UmFkaXVzLGJvcmRlclRvcFJpZ2h0UmFkaXVzXCIsIHtkZWZhdWx0VmFsdWU6XCIwcHhcIiwgcGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHJldHVybiBfcGFyc2VDb21wbGV4KHQuc3R5bGUsIHAsIHRoaXMuZm9ybWF0KF9nZXRTdHlsZSh0LCBwLCBfY3MsIGZhbHNlLCBcIjBweCAwcHhcIikpLCB0aGlzLmZvcm1hdChlKSwgZmFsc2UsIFwiMHB4XCIsIHB0KTtcblx0XHR9LCBwcmVmaXg6dHJ1ZSwgZm9ybWF0dGVyOl9nZXRGb3JtYXR0ZXIoXCIwcHggMHB4XCIsIGZhbHNlLCB0cnVlKX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJhY2tncm91bmRQb3NpdGlvblwiLCB7ZGVmYXVsdFZhbHVlOlwiMCAwXCIsIHBhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luKSB7XG5cdFx0XHR2YXIgYnAgPSBcImJhY2tncm91bmQtcG9zaXRpb25cIixcblx0XHRcdFx0Y3MgPSAoX2NzIHx8IF9nZXRDb21wdXRlZFN0eWxlKHQsIG51bGwpKSxcblx0XHRcdFx0YnMgPSB0aGlzLmZvcm1hdCggKChjcykgPyBfaWVWZXJzID8gY3MuZ2V0UHJvcGVydHlWYWx1ZShicCArIFwiLXhcIikgKyBcIiBcIiArIGNzLmdldFByb3BlcnR5VmFsdWUoYnAgKyBcIi15XCIpIDogY3MuZ2V0UHJvcGVydHlWYWx1ZShicCkgOiB0LmN1cnJlbnRTdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb25YICsgXCIgXCIgKyB0LmN1cnJlbnRTdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb25ZKSB8fCBcIjAgMFwiKSwgLy9JbnRlcm5ldCBFeHBsb3JlciBkb2Vzbid0IHJlcG9ydCBiYWNrZ3JvdW5kLXBvc2l0aW9uIGNvcnJlY3RseSAtIHdlIG11c3QgcXVlcnkgYmFja2dyb3VuZC1wb3NpdGlvbi14IGFuZCBiYWNrZ3JvdW5kLXBvc2l0aW9uLXkgYW5kIGNvbWJpbmUgdGhlbSAoZXZlbiBpbiBJRTEwKS4gQmVmb3JlIElFOSwgd2UgbXVzdCBkbyB0aGUgc2FtZSB3aXRoIHRoZSBjdXJyZW50U3R5bGUgb2JqZWN0IGFuZCB1c2UgY2FtZWxDYXNlXG5cdFx0XHRcdGVzID0gdGhpcy5mb3JtYXQoZSksXG5cdFx0XHRcdGJhLCBlYSwgaSwgcGN0LCBvdmVybGFwLCBzcmM7XG5cdFx0XHRpZiAoKGJzLmluZGV4T2YoXCIlXCIpICE9PSAtMSkgIT09IChlcy5pbmRleE9mKFwiJVwiKSAhPT0gLTEpICYmIGVzLnNwbGl0KFwiLFwiKS5sZW5ndGggPCAyKSB7XG5cdFx0XHRcdHNyYyA9IF9nZXRTdHlsZSh0LCBcImJhY2tncm91bmRJbWFnZVwiKS5yZXBsYWNlKF91cmxFeHAsIFwiXCIpO1xuXHRcdFx0XHRpZiAoc3JjICYmIHNyYyAhPT0gXCJub25lXCIpIHtcblx0XHRcdFx0XHRiYSA9IGJzLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRlYSA9IGVzLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRfdGVtcEltZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgc3JjKTsgLy9zZXQgdGhlIHRlbXAgSU1HJ3Mgc3JjIHRvIHRoZSBiYWNrZ3JvdW5kLWltYWdlIHNvIHRoYXQgd2UgY2FuIG1lYXN1cmUgaXRzIHdpZHRoL2hlaWdodFxuXHRcdFx0XHRcdGkgPSAyO1xuXHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0YnMgPSBiYVtpXTtcblx0XHRcdFx0XHRcdHBjdCA9IChicy5pbmRleE9mKFwiJVwiKSAhPT0gLTEpO1xuXHRcdFx0XHRcdFx0aWYgKHBjdCAhPT0gKGVhW2ldLmluZGV4T2YoXCIlXCIpICE9PSAtMSkpIHtcblx0XHRcdFx0XHRcdFx0b3ZlcmxhcCA9IChpID09PSAwKSA/IHQub2Zmc2V0V2lkdGggLSBfdGVtcEltZy53aWR0aCA6IHQub2Zmc2V0SGVpZ2h0IC0gX3RlbXBJbWcuaGVpZ2h0O1xuXHRcdFx0XHRcdFx0XHRiYVtpXSA9IHBjdCA/IChwYXJzZUZsb2F0KGJzKSAvIDEwMCAqIG92ZXJsYXApICsgXCJweFwiIDogKHBhcnNlRmxvYXQoYnMpIC8gb3ZlcmxhcCAqIDEwMCkgKyBcIiVcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnMgPSBiYS5qb2luKFwiIFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMucGFyc2VDb21wbGV4KHQuc3R5bGUsIGJzLCBlcywgcHQsIHBsdWdpbik7XG5cdFx0fSwgZm9ybWF0dGVyOl9wYXJzZVBvc2l0aW9ufSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYmFja2dyb3VuZFNpemVcIiwge2RlZmF1bHRWYWx1ZTpcIjAgMFwiLCBmb3JtYXR0ZXI6ZnVuY3Rpb24odikge1xuXHRcdFx0diArPSBcIlwiOyAvL2Vuc3VyZSBpdCdzIGEgc3RyaW5nXG5cdFx0XHRyZXR1cm4gX3BhcnNlUG9zaXRpb24odi5pbmRleE9mKFwiIFwiKSA9PT0gLTEgPyB2ICsgXCIgXCIgKyB2IDogdik7IC8vaWYgc2V0IHRvIHNvbWV0aGluZyBsaWtlIFwiMTAwJSAxMDAlXCIsIFNhZmFyaSB0eXBpY2FsbHkgcmVwb3J0cyB0aGUgY29tcHV0ZWQgc3R5bGUgYXMganVzdCBcIjEwMCVcIiAobm8gMm5kIHZhbHVlKSwgYnV0IHdlIHNob3VsZCBlbnN1cmUgdGhhdCB0aGVyZSBhcmUgdHdvIHZhbHVlcywgc28gY29weSB0aGUgZmlyc3Qgb25lLiBPdGhlcndpc2UsIGl0J2QgYmUgaW50ZXJwcmV0ZWQgYXMgXCIxMDAlIDBcIiAod3JvbmcpLlxuXHRcdH19KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJwZXJzcGVjdGl2ZVwiLCB7ZGVmYXVsdFZhbHVlOlwiMHB4XCIsIHByZWZpeDp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwicGVyc3BlY3RpdmVPcmlnaW5cIiwge2RlZmF1bHRWYWx1ZTpcIjUwJSA1MCVcIiwgcHJlZml4OnRydWV9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJ0cmFuc2Zvcm1TdHlsZVwiLCB7cHJlZml4OnRydWV9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJiYWNrZmFjZVZpc2liaWxpdHlcIiwge3ByZWZpeDp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwidXNlclNlbGVjdFwiLCB7cHJlZml4OnRydWV9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJtYXJnaW5cIiwge3BhcnNlcjpfZ2V0RWRnZVBhcnNlcihcIm1hcmdpblRvcCxtYXJnaW5SaWdodCxtYXJnaW5Cb3R0b20sbWFyZ2luTGVmdFwiKX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInBhZGRpbmdcIiwge3BhcnNlcjpfZ2V0RWRnZVBhcnNlcihcInBhZGRpbmdUb3AscGFkZGluZ1JpZ2h0LHBhZGRpbmdCb3R0b20scGFkZGluZ0xlZnRcIil9KTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJjbGlwXCIsIHtkZWZhdWx0VmFsdWU6XCJyZWN0KDBweCwwcHgsMHB4LDBweClcIiwgcGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pe1xuXHRcdFx0dmFyIGIsIGNzLCBkZWxpbTtcblx0XHRcdGlmIChfaWVWZXJzIDwgOSkgeyAvL0lFOCBhbmQgZWFybGllciBkb24ndCByZXBvcnQgYSBcImNsaXBcIiB2YWx1ZSBpbiB0aGUgY3VycmVudFN0eWxlIC0gaW5zdGVhZCwgdGhlIHZhbHVlcyBhcmUgc3BsaXQgYXBhcnQgaW50byBjbGlwVG9wLCBjbGlwUmlnaHQsIGNsaXBCb3R0b20sIGFuZCBjbGlwTGVmdC4gQWxzbywgaW4gSUU3IGFuZCBlYXJsaWVyLCB0aGUgdmFsdWVzIGluc2lkZSByZWN0KCkgYXJlIHNwYWNlLWRlbGltaXRlZCwgbm90IGNvbW1hLWRlbGltaXRlZC5cblx0XHRcdFx0Y3MgPSB0LmN1cnJlbnRTdHlsZTtcblx0XHRcdFx0ZGVsaW0gPSBfaWVWZXJzIDwgOCA/IFwiIFwiIDogXCIsXCI7XG5cdFx0XHRcdGIgPSBcInJlY3QoXCIgKyBjcy5jbGlwVG9wICsgZGVsaW0gKyBjcy5jbGlwUmlnaHQgKyBkZWxpbSArIGNzLmNsaXBCb3R0b20gKyBkZWxpbSArIGNzLmNsaXBMZWZ0ICsgXCIpXCI7XG5cdFx0XHRcdGUgPSB0aGlzLmZvcm1hdChlKS5zcGxpdChcIixcIikuam9pbihkZWxpbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRiID0gdGhpcy5mb3JtYXQoX2dldFN0eWxlKHQsIHRoaXMucCwgX2NzLCBmYWxzZSwgdGhpcy5kZmx0KSk7XG5cdFx0XHRcdGUgPSB0aGlzLmZvcm1hdChlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnBhcnNlQ29tcGxleCh0LnN0eWxlLCBiLCBlLCBwdCwgcGx1Z2luKTtcblx0XHR9fSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwidGV4dFNoYWRvd1wiLCB7ZGVmYXVsdFZhbHVlOlwiMHB4IDBweCAwcHggIzk5OVwiLCBjb2xvcjp0cnVlLCBtdWx0aTp0cnVlfSk7XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiYXV0b1JvdW5kLHN0cmljdFVuaXRzXCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQpIHtyZXR1cm4gcHQ7fX0pOyAvL2p1c3Qgc28gdGhhdCB3ZSBjYW4gaWdub3JlIHRoZXNlIHByb3BlcnRpZXMgKG5vdCB0d2VlbiB0aGVtKVxuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJvcmRlclwiLCB7ZGVmYXVsdFZhbHVlOlwiMHB4IHNvbGlkICMwMDBcIiwgcGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0LCBwbHVnaW4pIHtcblx0XHRcdHZhciBidyA9IF9nZXRTdHlsZSh0LCBcImJvcmRlclRvcFdpZHRoXCIsIF9jcywgZmFsc2UsIFwiMHB4XCIpLFxuXHRcdFx0XHRlbmQgPSB0aGlzLmZvcm1hdChlKS5zcGxpdChcIiBcIiksXG5cdFx0XHRcdGVzZnggPSBlbmRbMF0ucmVwbGFjZShfc3VmZml4RXhwLCBcIlwiKTtcblx0XHRcdGlmIChlc2Z4ICE9PSBcInB4XCIpIHsgLy9pZiB3ZSdyZSBhbmltYXRpbmcgdG8gYSBub24tcHggdmFsdWUsIHdlIG5lZWQgdG8gY29udmVydCB0aGUgYmVnaW5uaW5nIHdpZHRoIHRvIHRoYXQgdW5pdC5cblx0XHRcdFx0YncgPSAocGFyc2VGbG9hdChidykgLyBfY29udmVydFRvUGl4ZWxzKHQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgMSwgZXNmeCkpICsgZXNmeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnBhcnNlQ29tcGxleCh0LnN0eWxlLCB0aGlzLmZvcm1hdChidyArIFwiIFwiICsgX2dldFN0eWxlKHQsIFwiYm9yZGVyVG9wU3R5bGVcIiwgX2NzLCBmYWxzZSwgXCJzb2xpZFwiKSArIFwiIFwiICsgX2dldFN0eWxlKHQsIFwiYm9yZGVyVG9wQ29sb3JcIiwgX2NzLCBmYWxzZSwgXCIjMDAwXCIpKSwgZW5kLmpvaW4oXCIgXCIpLCBwdCwgcGx1Z2luKTtcblx0XHRcdH0sIGNvbG9yOnRydWUsIGZvcm1hdHRlcjpmdW5jdGlvbih2KSB7XG5cdFx0XHRcdHZhciBhID0gdi5zcGxpdChcIiBcIik7XG5cdFx0XHRcdHJldHVybiBhWzBdICsgXCIgXCIgKyAoYVsxXSB8fCBcInNvbGlkXCIpICsgXCIgXCIgKyAodi5tYXRjaChfY29sb3JFeHApIHx8IFtcIiMwMDBcIl0pWzBdO1xuXHRcdFx0fX0pO1xuXHRcdF9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcImJvcmRlcldpZHRoXCIsIHtwYXJzZXI6X2dldEVkZ2VQYXJzZXIoXCJib3JkZXJUb3BXaWR0aCxib3JkZXJSaWdodFdpZHRoLGJvcmRlckJvdHRvbVdpZHRoLGJvcmRlckxlZnRXaWR0aFwiKX0pOyAvL0ZpcmVmb3ggZG9lc24ndCBwaWNrIHVwIG9uIGJvcmRlcldpZHRoIHNldCBpbiBzdHlsZSBzaGVldHMgKG9ubHkgaW5saW5lKS5cblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJmbG9hdCxjc3NGbG9hdCxzdHlsZUZsb2F0XCIsIHtwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0dmFyIHMgPSB0LnN0eWxlLFxuXHRcdFx0XHRwcm9wID0gKFwiY3NzRmxvYXRcIiBpbiBzKSA/IFwiY3NzRmxvYXRcIiA6IFwic3R5bGVGbG9hdFwiO1xuXHRcdFx0cmV0dXJuIG5ldyBDU1NQcm9wVHdlZW4ocywgcHJvcCwgMCwgMCwgcHQsIC0xLCBwLCBmYWxzZSwgMCwgc1twcm9wXSwgZSk7XG5cdFx0fX0pO1xuXG5cdFx0Ly9vcGFjaXR5LXJlbGF0ZWRcblx0XHR2YXIgX3NldElFT3BhY2l0eVJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0XHR2YXIgdCA9IHRoaXMudCwgLy9yZWZlcnMgdG8gdGhlIGVsZW1lbnQncyBzdHlsZSBwcm9wZXJ0eVxuXHRcdFx0XHRcdGZpbHRlcnMgPSB0LmZpbHRlciB8fCBfZ2V0U3R5bGUodGhpcy5kYXRhLCBcImZpbHRlclwiKSB8fCBcIlwiLFxuXHRcdFx0XHRcdHZhbCA9ICh0aGlzLnMgKyB0aGlzLmMgKiB2KSB8IDAsXG5cdFx0XHRcdFx0c2tpcDtcblx0XHRcdFx0aWYgKHZhbCA9PT0gMTAwKSB7IC8vZm9yIG9sZGVyIHZlcnNpb25zIG9mIElFIHRoYXQgbmVlZCB0byB1c2UgYSBmaWx0ZXIgdG8gYXBwbHkgb3BhY2l0eSwgd2Ugc2hvdWxkIHJlbW92ZSB0aGUgZmlsdGVyIGlmIG9wYWNpdHkgaGl0cyAxIGluIG9yZGVyIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UsIGJ1dCBtYWtlIHN1cmUgdGhlcmUgaXNuJ3QgYSB0cmFuc2Zvcm0gKG1hdHJpeCkgb3IgZ3JhZGllbnQgaW4gdGhlIGZpbHRlcnMuXG5cdFx0XHRcdFx0aWYgKGZpbHRlcnMuaW5kZXhPZihcImF0cml4KFwiKSA9PT0gLTEgJiYgZmlsdGVycy5pbmRleE9mKFwicmFkaWVudChcIikgPT09IC0xICYmIGZpbHRlcnMuaW5kZXhPZihcIm9hZGVyKFwiKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdHQucmVtb3ZlQXR0cmlidXRlKFwiZmlsdGVyXCIpO1xuXHRcdFx0XHRcdFx0c2tpcCA9ICghX2dldFN0eWxlKHRoaXMuZGF0YSwgXCJmaWx0ZXJcIikpOyAvL2lmIGEgY2xhc3MgaXMgYXBwbGllZCB0aGF0IGhhcyBhbiBhbHBoYSBmaWx0ZXIsIGl0IHdpbGwgdGFrZSBlZmZlY3QgKHdlIGRvbid0IHdhbnQgdGhhdCksIHNvIHJlLWFwcGx5IG91ciBhbHBoYSBmaWx0ZXIgaW4gdGhhdCBjYXNlLiBXZSBtdXN0IGZpcnN0IHJlbW92ZSBpdCBhbmQgdGhlbiBjaGVjay5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dC5maWx0ZXIgPSBmaWx0ZXJzLnJlcGxhY2UoX2FscGhhRmlsdGVyRXhwLCBcIlwiKTtcblx0XHRcdFx0XHRcdHNraXAgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIXNraXApIHtcblx0XHRcdFx0XHRpZiAodGhpcy54bjEpIHtcblx0XHRcdFx0XHRcdHQuZmlsdGVyID0gZmlsdGVycyA9IGZpbHRlcnMgfHwgKFwiYWxwaGEob3BhY2l0eT1cIiArIHZhbCArIFwiKVwiKTsgLy93b3JrcyBhcm91bmQgYnVnIGluIElFNy84IHRoYXQgcHJldmVudHMgY2hhbmdlcyB0byBcInZpc2liaWxpdHlcIiBmcm9tIGJlaW5nIGFwcGxpZWQgcHJvcGVybHkgaWYgdGhlIGZpbHRlciBpcyBjaGFuZ2VkIHRvIGEgZGlmZmVyZW50IGFscGhhIG9uIHRoZSBzYW1lIGZyYW1lLlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZmlsdGVycy5pbmRleE9mKFwicGFjaXR5XCIpID09PSAtMSkgeyAvL29ubHkgdXNlZCBpZiBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgc3RhbmRhcmQgb3BhY2l0eSBzdHlsZSBwcm9wZXJ0eSAoSUUgNyBhbmQgOCkuIFdlIG9taXQgdGhlIFwiT1wiIHRvIGF2b2lkIGNhc2Utc2Vuc2l0aXZpdHkgaXNzdWVzXG5cdFx0XHRcdFx0XHRpZiAodmFsICE9PSAwIHx8ICF0aGlzLnhuMSkgeyAvL2J1Z3MgaW4gSUU3Lzggd29uJ3QgcmVuZGVyIHRoZSBmaWx0ZXIgcHJvcGVybHkgaWYgb3BhY2l0eSBpcyBBRERFRCBvbiB0aGUgc2FtZSBmcmFtZS9yZW5kZXIgYXMgXCJ2aXNpYmlsaXR5XCIgY2hhbmdlcyAodGhpcy54bjEgaXMgMSBpZiB0aGlzIHR3ZWVuIGlzIGFuIFwiYXV0b0FscGhhXCIgdHdlZW4pXG5cdFx0XHRcdFx0XHRcdHQuZmlsdGVyID0gZmlsdGVycyArIFwiIGFscGhhKG9wYWNpdHk9XCIgKyB2YWwgKyBcIilcIjsgLy93ZSByb3VuZCB0aGUgdmFsdWUgYmVjYXVzZSBvdGhlcndpc2UsIGJ1Z3MgaW4gSUU3LzggY2FuIHByZXZlbnQgXCJ2aXNpYmlsaXR5XCIgY2hhbmdlcyBmcm9tIGJlaW5nIGFwcGxpZWQgcHJvcGVybHkuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHQuZmlsdGVyID0gZmlsdGVycy5yZXBsYWNlKF9vcGFjaXR5RXhwLCBcIm9wYWNpdHk9XCIgKyB2YWwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJvcGFjaXR5LGFscGhhLGF1dG9BbHBoYVwiLCB7ZGVmYXVsdFZhbHVlOlwiMVwiLCBwYXJzZXI6ZnVuY3Rpb24odCwgZSwgcCwgY3NzcCwgcHQsIHBsdWdpbikge1xuXHRcdFx0dmFyIGIgPSBwYXJzZUZsb2F0KF9nZXRTdHlsZSh0LCBcIm9wYWNpdHlcIiwgX2NzLCBmYWxzZSwgXCIxXCIpKSxcblx0XHRcdFx0c3R5bGUgPSB0LnN0eWxlLFxuXHRcdFx0XHRpc0F1dG9BbHBoYSA9IChwID09PSBcImF1dG9BbHBoYVwiKTtcblx0XHRcdGlmICh0eXBlb2YoZSkgPT09IFwic3RyaW5nXCIgJiYgZS5jaGFyQXQoMSkgPT09IFwiPVwiKSB7XG5cdFx0XHRcdGUgPSAoKGUuY2hhckF0KDApID09PSBcIi1cIikgPyAtMSA6IDEpICogcGFyc2VGbG9hdChlLnN1YnN0cigyKSkgKyBiO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGlzQXV0b0FscGhhICYmIGIgPT09IDEgJiYgX2dldFN0eWxlKHQsIFwidmlzaWJpbGl0eVwiLCBfY3MpID09PSBcImhpZGRlblwiICYmIGUgIT09IDApIHsgLy9pZiB2aXNpYmlsaXR5IGlzIGluaXRpYWxseSBzZXQgdG8gXCJoaWRkZW5cIiwgd2Ugc2hvdWxkIGludGVycHJldCB0aGF0IGFzIGludGVudCB0byBtYWtlIG9wYWNpdHkgMCAoYSBjb252ZW5pZW5jZSlcblx0XHRcdFx0YiA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoX3N1cHBvcnRzT3BhY2l0eSkge1xuXHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4oc3R5bGUsIFwib3BhY2l0eVwiLCBiLCBlIC0gYiwgcHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHN0eWxlLCBcIm9wYWNpdHlcIiwgYiAqIDEwMCwgKGUgLSBiKSAqIDEwMCwgcHQpO1xuXHRcdFx0XHRwdC54bjEgPSBpc0F1dG9BbHBoYSA/IDEgOiAwOyAvL3dlIG5lZWQgdG8gcmVjb3JkIHdoZXRoZXIgb3Igbm90IHRoaXMgaXMgYW4gYXV0b0FscGhhIHNvIHRoYXQgaW4gdGhlIHNldFJhdGlvKCksIHdlIGtub3cgdG8gZHVwbGljYXRlIHRoZSBzZXR0aW5nIG9mIHRoZSBhbHBoYSBpbiBvcmRlciB0byB3b3JrIGFyb3VuZCBhIGJ1ZyBpbiBJRTcgYW5kIElFOCB0aGF0IHByZXZlbnRzIGNoYW5nZXMgdG8gXCJ2aXNpYmlsaXR5XCIgZnJvbSB0YWtpbmcgZWZmZWN0IGlmIHRoZSBmaWx0ZXIgaXMgY2hhbmdlZCB0byBhIGRpZmZlcmVudCBhbHBoYShvcGFjaXR5KSBhdCB0aGUgc2FtZSB0aW1lLiBTZXR0aW5nIGl0IHRvIHRoZSBTQU1FIHZhbHVlIGZpcnN0LCB0aGVuIHRoZSBuZXcgdmFsdWUgd29ya3MgYXJvdW5kIHRoZSBJRTcvOCBidWcuXG5cdFx0XHRcdHN0eWxlLnpvb20gPSAxOyAvL2hlbHBzIGNvcnJlY3QgYW4gSUUgaXNzdWUuXG5cdFx0XHRcdHB0LnR5cGUgPSAyO1xuXHRcdFx0XHRwdC5iID0gXCJhbHBoYShvcGFjaXR5PVwiICsgcHQucyArIFwiKVwiO1xuXHRcdFx0XHRwdC5lID0gXCJhbHBoYShvcGFjaXR5PVwiICsgKHB0LnMgKyBwdC5jKSArIFwiKVwiO1xuXHRcdFx0XHRwdC5kYXRhID0gdDtcblx0XHRcdFx0cHQucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHRwdC5zZXRSYXRpbyA9IF9zZXRJRU9wYWNpdHlSYXRpbztcblx0XHRcdH1cblx0XHRcdGlmIChpc0F1dG9BbHBoYSkgeyAvL3dlIGhhdmUgdG8gY3JlYXRlIHRoZSBcInZpc2liaWxpdHlcIiBQcm9wVHdlZW4gYWZ0ZXIgdGhlIG9wYWNpdHkgb25lIGluIHRoZSBsaW5rZWQgbGlzdCBzbyB0aGF0IHRoZXkgcnVuIGluIHRoZSBvcmRlciB0aGF0IHdvcmtzIHByb3Blcmx5IGluIElFOCBhbmQgZWFybGllclxuXHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4oc3R5bGUsIFwidmlzaWJpbGl0eVwiLCAwLCAwLCBwdCwgLTEsIG51bGwsIGZhbHNlLCAwLCAoKGIgIT09IDApID8gXCJpbmhlcml0XCIgOiBcImhpZGRlblwiKSwgKChlID09PSAwKSA/IFwiaGlkZGVuXCIgOiBcImluaGVyaXRcIikpO1xuXHRcdFx0XHRwdC54czAgPSBcImluaGVyaXRcIjtcblx0XHRcdFx0Y3NzcC5fb3ZlcndyaXRlUHJvcHMucHVzaChwdC5uKTtcblx0XHRcdFx0Y3NzcC5fb3ZlcndyaXRlUHJvcHMucHVzaChwKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwdDtcblx0XHR9fSk7XG5cblxuXHRcdHZhciBfcmVtb3ZlUHJvcCA9IGZ1bmN0aW9uKHMsIHApIHtcblx0XHRcdFx0aWYgKHApIHtcblx0XHRcdFx0XHRpZiAocy5yZW1vdmVQcm9wZXJ0eSkge1xuXHRcdFx0XHRcdFx0aWYgKHAuc3Vic3RyKDAsMikgPT09IFwibXNcIiB8fCBwLnN1YnN0cigwLDYpID09PSBcIndlYmtpdFwiKSB7IC8vTWljcm9zb2Z0IGFuZCBzb21lIFdlYmtpdCBicm93c2VycyBkb24ndCBjb25mb3JtIHRvIHRoZSBzdGFuZGFyZCBvZiBjYXBpdGFsaXppbmcgdGhlIGZpcnN0IHByZWZpeCBjaGFyYWN0ZXIsIHNvIHdlIGFkanVzdCBzbyB0aGF0IHdoZW4gd2UgcHJlZml4IHRoZSBjYXBzIHdpdGggYSBkYXNoLCBpdCdzIGNvcnJlY3QgKG90aGVyd2lzZSBpdCdkIGJlIFwibXMtdHJhbnNmb3JtXCIgaW5zdGVhZCBvZiBcIi1tcy10cmFuc2Zvcm1cIiBmb3IgSUU5LCBmb3IgZXhhbXBsZSlcblx0XHRcdFx0XHRcdFx0cCA9IFwiLVwiICsgcDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHMucmVtb3ZlUHJvcGVydHkocC5yZXBsYWNlKF9jYXBzRXhwLCBcIi0kMVwiKS50b0xvd2VyQ2FzZSgpKTtcblx0XHRcdFx0XHR9IGVsc2UgeyAvL25vdGU6IG9sZCB2ZXJzaW9ucyBvZiBJRSB1c2UgXCJyZW1vdmVBdHRyaWJ1dGUoKVwiIGluc3RlYWQgb2YgXCJyZW1vdmVQcm9wZXJ0eSgpXCJcblx0XHRcdFx0XHRcdHMucmVtb3ZlQXR0cmlidXRlKHApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdF9zZXRDbGFzc05hbWVSYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdFx0dGhpcy50Ll9nc0NsYXNzUFQgPSB0aGlzO1xuXHRcdFx0XHRpZiAodiA9PT0gMSB8fCB2ID09PSAwKSB7XG5cdFx0XHRcdFx0dGhpcy50LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsICh2ID09PSAwKSA/IHRoaXMuYiA6IHRoaXMuZSk7XG5cdFx0XHRcdFx0dmFyIG1wdCA9IHRoaXMuZGF0YSwgLy9maXJzdCBNaW5pUHJvcFR3ZWVuXG5cdFx0XHRcdFx0XHRzID0gdGhpcy50LnN0eWxlO1xuXHRcdFx0XHRcdHdoaWxlIChtcHQpIHtcblx0XHRcdFx0XHRcdGlmICghbXB0LnYpIHtcblx0XHRcdFx0XHRcdFx0X3JlbW92ZVByb3AocywgbXB0LnApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c1ttcHQucF0gPSBtcHQudjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1wdCA9IG1wdC5fbmV4dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHYgPT09IDEgJiYgdGhpcy50Ll9nc0NsYXNzUFQgPT09IHRoaXMpIHtcblx0XHRcdFx0XHRcdHRoaXMudC5fZ3NDbGFzc1BUID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy50LmdldEF0dHJpYnV0ZShcImNsYXNzXCIpICE9PSB0aGlzLmUpIHtcblx0XHRcdFx0XHR0aGlzLnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5lKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRfcmVnaXN0ZXJDb21wbGV4U3BlY2lhbFByb3AoXCJjbGFzc05hbWVcIiwge3BhcnNlcjpmdW5jdGlvbih0LCBlLCBwLCBjc3NwLCBwdCwgcGx1Z2luLCB2YXJzKSB7XG5cdFx0XHR2YXIgYiA9IHQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiwgLy9kb24ndCB1c2UgdC5jbGFzc05hbWUgYmVjYXVzZSBpdCBkb2Vzbid0IHdvcmsgY29uc2lzdGVudGx5IG9uIFNWRyBlbGVtZW50czsgZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgYW5kIHNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHZhbHVlXCIpIGlzIG1vcmUgcmVsaWFibGUuXG5cdFx0XHRcdGNzc1RleHQgPSB0LnN0eWxlLmNzc1RleHQsXG5cdFx0XHRcdGRpZkRhdGEsIGJzLCBjbnB0LCBjbnB0TG9va3VwLCBtcHQ7XG5cdFx0XHRwdCA9IGNzc3AuX2NsYXNzTmFtZVBUID0gbmV3IENTU1Byb3BUd2Vlbih0LCBwLCAwLCAwLCBwdCwgMik7XG5cdFx0XHRwdC5zZXRSYXRpbyA9IF9zZXRDbGFzc05hbWVSYXRpbztcblx0XHRcdHB0LnByID0gLTExO1xuXHRcdFx0X2hhc1ByaW9yaXR5ID0gdHJ1ZTtcblx0XHRcdHB0LmIgPSBiO1xuXHRcdFx0YnMgPSBfZ2V0QWxsU3R5bGVzKHQsIF9jcyk7XG5cdFx0XHQvL2lmIHRoZXJlJ3MgYSBjbGFzc05hbWUgdHdlZW4gYWxyZWFkeSBvcGVyYXRpbmcgb24gdGhlIHRhcmdldCwgZm9yY2UgaXQgdG8gaXRzIGVuZCBzbyB0aGF0IHRoZSBuZWNlc3NhcnkgaW5saW5lIHN0eWxlcyBhcmUgcmVtb3ZlZCBhbmQgdGhlIGNsYXNzIG5hbWUgaXMgYXBwbGllZCBiZWZvcmUgd2UgZGV0ZXJtaW5lIHRoZSBlbmQgc3RhdGUgKHdlIGRvbid0IHdhbnQgaW5saW5lIHN0eWxlcyBpbnRlcmZlcmluZyB0aGF0IHdlcmUgdGhlcmUganVzdCBmb3IgY2xhc3Mtc3BlY2lmaWMgdmFsdWVzKVxuXHRcdFx0Y25wdCA9IHQuX2dzQ2xhc3NQVDtcblx0XHRcdGlmIChjbnB0KSB7XG5cdFx0XHRcdGNucHRMb29rdXAgPSB7fTtcblx0XHRcdFx0bXB0ID0gY25wdC5kYXRhOyAvL2ZpcnN0IE1pbmlQcm9wVHdlZW4gd2hpY2ggc3RvcmVzIHRoZSBpbmxpbmUgc3R5bGVzIC0gd2UgbmVlZCB0byBmb3JjZSB0aGVzZSBzbyB0aGF0IHRoZSBpbmxpbmUgc3R5bGVzIGRvbid0IGNvbnRhbWluYXRlIHRoaW5ncy4gT3RoZXJ3aXNlLCB0aGVyZSdzIGEgc21hbGwgY2hhbmNlIHRoYXQgYSB0d2VlbiBjb3VsZCBzdGFydCBhbmQgdGhlIGlubGluZSB2YWx1ZXMgbWF0Y2ggdGhlIGRlc3RpbmF0aW9uIHZhbHVlcyBhbmQgdGhleSBuZXZlciBnZXQgY2xlYW5lZC5cblx0XHRcdFx0d2hpbGUgKG1wdCkge1xuXHRcdFx0XHRcdGNucHRMb29rdXBbbXB0LnBdID0gMTtcblx0XHRcdFx0XHRtcHQgPSBtcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y25wdC5zZXRSYXRpbygxKTtcblx0XHRcdH1cblx0XHRcdHQuX2dzQ2xhc3NQVCA9IHB0O1xuXHRcdFx0cHQuZSA9IChlLmNoYXJBdCgxKSAhPT0gXCI9XCIpID8gZSA6IGIucmVwbGFjZShuZXcgUmVnRXhwKFwiKD86XFxcXHN8XilcIiArIGUuc3Vic3RyKDIpICsgXCIoPyFbXFxcXHctXSlcIiksIFwiXCIpICsgKChlLmNoYXJBdCgwKSA9PT0gXCIrXCIpID8gXCIgXCIgKyBlLnN1YnN0cigyKSA6IFwiXCIpO1xuXHRcdFx0dC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBwdC5lKTtcblx0XHRcdGRpZkRhdGEgPSBfY3NzRGlmKHQsIGJzLCBfZ2V0QWxsU3R5bGVzKHQpLCB2YXJzLCBjbnB0TG9va3VwKTtcblx0XHRcdHQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgYik7XG5cdFx0XHRwdC5kYXRhID0gZGlmRGF0YS5maXJzdE1QVDtcblx0XHRcdHQuc3R5bGUuY3NzVGV4dCA9IGNzc1RleHQ7IC8vd2UgcmVjb3JkZWQgY3NzVGV4dCBiZWZvcmUgd2Ugc3dhcHBlZCBjbGFzc2VzIGFuZCByYW4gX2dldEFsbFN0eWxlcygpIGJlY2F1c2UgaW4gY2FzZXMgd2hlbiBhIGNsYXNzTmFtZSB0d2VlbiBpcyBvdmVyd3JpdHRlbiwgd2UgcmVtb3ZlIGFsbCB0aGUgcmVsYXRlZCB0d2VlbmluZyBwcm9wZXJ0aWVzIGZyb20gdGhhdCBjbGFzcyBjaGFuZ2UgKG90aGVyd2lzZSBjbGFzcy1zcGVjaWZpYyBzdHVmZiBjYW4ndCBvdmVycmlkZSBwcm9wZXJ0aWVzIHdlJ3ZlIGRpcmVjdGx5IHNldCBvbiB0aGUgdGFyZ2V0J3Mgc3R5bGUgb2JqZWN0IGR1ZSB0byBzcGVjaWZpY2l0eSkuXG5cdFx0XHRwdCA9IHB0LnhmaXJzdCA9IGNzc3AucGFyc2UodCwgZGlmRGF0YS5kaWZzLCBwdCwgcGx1Z2luKTsgLy93ZSByZWNvcmQgdGhlIENTU1Byb3BUd2VlbiBhcyB0aGUgeGZpcnN0IHNvIHRoYXQgd2UgY2FuIGhhbmRsZSBvdmVyd3JpdGluZyBwcm9wZXJ0bHkgKGlmIFwiY2xhc3NOYW1lXCIgZ2V0cyBvdmVyd3JpdHRlbiwgd2UgbXVzdCBraWxsIGFsbCB0aGUgcHJvcGVydGllcyBhc3NvY2lhdGVkIHdpdGggdGhlIGNsYXNzTmFtZSBwYXJ0IG9mIHRoZSB0d2Vlbiwgc28gd2UgY2FuIGxvb3AgdGhyb3VnaCBmcm9tIHhmaXJzdCB0byB0aGUgcHQgaXRzZWxmKVxuXHRcdFx0cmV0dXJuIHB0O1xuXHRcdH19KTtcblxuXG5cdFx0dmFyIF9zZXRDbGVhclByb3BzUmF0aW8gPSBmdW5jdGlvbih2KSB7XG5cdFx0XHRpZiAodiA9PT0gMSB8fCB2ID09PSAwKSBpZiAodGhpcy5kYXRhLl90b3RhbFRpbWUgPT09IHRoaXMuZGF0YS5fdG90YWxEdXJhdGlvbiAmJiB0aGlzLmRhdGEuZGF0YSAhPT0gXCJpc0Zyb21TdGFydFwiKSB7IC8vdGhpcy5kYXRhIHJlZmVycyB0byB0aGUgdHdlZW4uIE9ubHkgY2xlYXIgYXQgdGhlIEVORCBvZiB0aGUgdHdlZW4gKHJlbWVtYmVyLCBmcm9tKCkgdHdlZW5zIG1ha2UgdGhlIHJhdGlvIGdvIGZyb20gMSB0byAwLCBzbyB3ZSBjYW4ndCBqdXN0IGNoZWNrIHRoYXQgYW5kIGlmIHRoZSB0d2VlbiBpcyB0aGUgemVyby1kdXJhdGlvbiBvbmUgdGhhdCdzIGNyZWF0ZWQgaW50ZXJuYWxseSB0byByZW5kZXIgdGhlIHN0YXJ0aW5nIHZhbHVlcyBpbiBhIGZyb20oKSB0d2VlbiwgaWdub3JlIHRoYXQgYmVjYXVzZSBvdGhlcndpc2UsIGZvciBleGFtcGxlLCBmcm9tKC4uLntoZWlnaHQ6MTAwLCBjbGVhclByb3BzOlwiaGVpZ2h0XCIsIGRlbGF5OjF9KSB3b3VsZCB3aXBlIHRoZSBoZWlnaHQgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdHdlZW4gYW5kIGFmdGVyIDEgc2Vjb25kLCBpdCdkIGtpY2sgYmFjayBpbikuXG5cdFx0XHRcdHZhciBzID0gdGhpcy50LnN0eWxlLFxuXHRcdFx0XHRcdHRyYW5zZm9ybVBhcnNlID0gX3NwZWNpYWxQcm9wcy50cmFuc2Zvcm0ucGFyc2UsXG5cdFx0XHRcdFx0YSwgcCwgaSwgY2xlYXJUcmFuc2Zvcm0sIHRyYW5zZm9ybTtcblx0XHRcdFx0aWYgKHRoaXMuZSA9PT0gXCJhbGxcIikge1xuXHRcdFx0XHRcdHMuY3NzVGV4dCA9IFwiXCI7XG5cdFx0XHRcdFx0Y2xlYXJUcmFuc2Zvcm0gPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGEgPSB0aGlzLmUuc3BsaXQoXCIgXCIpLmpvaW4oXCJcIikuc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdHAgPSBhW2ldO1xuXHRcdFx0XHRcdFx0aWYgKF9zcGVjaWFsUHJvcHNbcF0pIHtcblx0XHRcdFx0XHRcdFx0aWYgKF9zcGVjaWFsUHJvcHNbcF0ucGFyc2UgPT09IHRyYW5zZm9ybVBhcnNlKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2xlYXJUcmFuc2Zvcm0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHAgPSAocCA9PT0gXCJ0cmFuc2Zvcm1PcmlnaW5cIikgPyBfdHJhbnNmb3JtT3JpZ2luUHJvcCA6IF9zcGVjaWFsUHJvcHNbcF0ucDsgLy9lbnN1cmVzIHRoYXQgc3BlY2lhbCBwcm9wZXJ0aWVzIHVzZSB0aGUgcHJvcGVyIGJyb3dzZXItc3BlY2lmaWMgcHJvcGVydHkgbmFtZSwgbGlrZSBcInNjYWxlWFwiIG1pZ2h0IGJlIFwiLXdlYmtpdC10cmFuc2Zvcm1cIiBvciBcImJveFNoYWRvd1wiIG1pZ2h0IGJlIFwiLW1vei1ib3gtc2hhZG93XCJcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0X3JlbW92ZVByb3AocywgcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjbGVhclRyYW5zZm9ybSkge1xuXHRcdFx0XHRcdF9yZW1vdmVQcm9wKHMsIF90cmFuc2Zvcm1Qcm9wKTtcblx0XHRcdFx0XHR0cmFuc2Zvcm0gPSB0aGlzLnQuX2dzVHJhbnNmb3JtO1xuXHRcdFx0XHRcdGlmICh0cmFuc2Zvcm0pIHtcblx0XHRcdFx0XHRcdGlmICh0cmFuc2Zvcm0uc3ZnKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMudC5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLXN2Zy1vcmlnaW5cIik7XG5cdFx0XHRcdFx0XHRcdHRoaXMudC5yZW1vdmVBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRkZWxldGUgdGhpcy50Ll9nc1RyYW5zZm9ybTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH07XG5cdFx0X3JlZ2lzdGVyQ29tcGxleFNwZWNpYWxQcm9wKFwiY2xlYXJQcm9wc1wiLCB7cGFyc2VyOmZ1bmN0aW9uKHQsIGUsIHAsIGNzc3AsIHB0KSB7XG5cdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4odCwgcCwgMCwgMCwgcHQsIDIpO1xuXHRcdFx0cHQuc2V0UmF0aW8gPSBfc2V0Q2xlYXJQcm9wc1JhdGlvO1xuXHRcdFx0cHQuZSA9IGU7XG5cdFx0XHRwdC5wciA9IC0xMDtcblx0XHRcdHB0LmRhdGEgPSBjc3NwLl90d2Vlbjtcblx0XHRcdF9oYXNQcmlvcml0eSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fX0pO1xuXG5cdFx0cCA9IFwiYmV6aWVyLHRocm93UHJvcHMscGh5c2ljc1Byb3BzLHBoeXNpY3MyRFwiLnNwbGl0KFwiLFwiKTtcblx0XHRpID0gcC5sZW5ndGg7XG5cdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0X3JlZ2lzdGVyUGx1Z2luUHJvcChwW2ldKTtcblx0XHR9XG5cblxuXG5cblxuXG5cblxuXHRcdHAgPSBDU1NQbHVnaW4ucHJvdG90eXBlO1xuXHRcdHAuX2ZpcnN0UFQgPSBwLl9sYXN0UGFyc2VkVHJhbnNmb3JtID0gcC5fdHJhbnNmb3JtID0gbnVsbDtcblxuXHRcdC8vZ2V0cyBjYWxsZWQgd2hlbiB0aGUgdHdlZW4gcmVuZGVycyBmb3IgdGhlIGZpcnN0IHRpbWUuIFRoaXMga2lja3MgZXZlcnl0aGluZyBvZmYsIHJlY29yZGluZyBzdGFydC9lbmQgdmFsdWVzLCBldGMuXG5cdFx0cC5fb25Jbml0VHdlZW4gPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMsIHR3ZWVuLCBpbmRleCkge1xuXHRcdFx0aWYgKCF0YXJnZXQubm9kZVR5cGUpIHsgLy9jc3MgaXMgb25seSBmb3IgZG9tIGVsZW1lbnRzXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRoaXMuX3RhcmdldCA9IF90YXJnZXQgPSB0YXJnZXQ7XG5cdFx0XHR0aGlzLl90d2VlbiA9IHR3ZWVuO1xuXHRcdFx0dGhpcy5fdmFycyA9IHZhcnM7XG5cdFx0XHRfaW5kZXggPSBpbmRleDtcblx0XHRcdF9hdXRvUm91bmQgPSB2YXJzLmF1dG9Sb3VuZDtcblx0XHRcdF9oYXNQcmlvcml0eSA9IGZhbHNlO1xuXHRcdFx0X3N1ZmZpeE1hcCA9IHZhcnMuc3VmZml4TWFwIHx8IENTU1BsdWdpbi5zdWZmaXhNYXA7XG5cdFx0XHRfY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQsIFwiXCIpO1xuXHRcdFx0X292ZXJ3cml0ZVByb3BzID0gdGhpcy5fb3ZlcndyaXRlUHJvcHM7XG5cdFx0XHR2YXIgc3R5bGUgPSB0YXJnZXQuc3R5bGUsXG5cdFx0XHRcdHYsIHB0LCBwdDIsIGZpcnN0LCBsYXN0LCBuZXh0LCB6SW5kZXgsIHRwdCwgdGhyZWVEO1xuXHRcdFx0aWYgKF9yZXFTYWZhcmlGaXgpIGlmIChzdHlsZS56SW5kZXggPT09IFwiXCIpIHtcblx0XHRcdFx0diA9IF9nZXRTdHlsZSh0YXJnZXQsIFwiekluZGV4XCIsIF9jcyk7XG5cdFx0XHRcdGlmICh2ID09PSBcImF1dG9cIiB8fCB2ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0Ly9jb3JyZWN0cyBhIGJ1ZyBpbiBbbm9uLUFuZHJvaWRdIFNhZmFyaSB0aGF0IHByZXZlbnRzIGl0IGZyb20gcmVwYWludGluZyBlbGVtZW50cyBpbiB0aGVpciBuZXcgcG9zaXRpb25zIGlmIHRoZXkgZG9uJ3QgaGF2ZSBhIHpJbmRleCBzZXQuIFdlIGFsc28gY2FuJ3QganVzdCBhcHBseSB0aGlzIGluc2lkZSBfcGFyc2VUcmFuc2Zvcm0oKSBiZWNhdXNlIGFueXRoaW5nIHRoYXQncyBtb3ZlZCBpbiBhbnkgd2F5IChsaWtlIHVzaW5nIFwibGVmdFwiIG9yIFwidG9wXCIgaW5zdGVhZCBvZiB0cmFuc2Zvcm1zIGxpa2UgXCJ4XCIgYW5kIFwieVwiKSBjYW4gYmUgYWZmZWN0ZWQsIHNvIGl0IGlzIGJlc3QgdG8gZW5zdXJlIHRoYXQgYW55dGhpbmcgdGhhdCdzIHR3ZWVuaW5nIGhhcyBhIHotaW5kZXguIFNldHRpbmcgXCJXZWJraXRQZXJzcGVjdGl2ZVwiIHRvIGEgbm9uLXplcm8gdmFsdWUgd29ya2VkIHRvbyBleGNlcHQgdGhhdCBvbiBpT1MgU2FmYXJpIHRoaW5ncyB3b3VsZCBmbGlja2VyIHJhbmRvbWx5LiBQbHVzIHpJbmRleCBpcyBsZXNzIG1lbW9yeS1pbnRlbnNpdmUuXG5cdFx0XHRcdFx0dGhpcy5fYWRkTGF6eVNldChzdHlsZSwgXCJ6SW5kZXhcIiwgMCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZih2YXJzKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRmaXJzdCA9IHN0eWxlLmNzc1RleHQ7XG5cdFx0XHRcdHYgPSBfZ2V0QWxsU3R5bGVzKHRhcmdldCwgX2NzKTtcblx0XHRcdFx0c3R5bGUuY3NzVGV4dCA9IGZpcnN0ICsgXCI7XCIgKyB2YXJzO1xuXHRcdFx0XHR2ID0gX2Nzc0RpZih0YXJnZXQsIHYsIF9nZXRBbGxTdHlsZXModGFyZ2V0KSkuZGlmcztcblx0XHRcdFx0aWYgKCFfc3VwcG9ydHNPcGFjaXR5ICYmIF9vcGFjaXR5VmFsRXhwLnRlc3QodmFycykpIHtcblx0XHRcdFx0XHR2Lm9wYWNpdHkgPSBwYXJzZUZsb2F0KCBSZWdFeHAuJDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXJzID0gdjtcblx0XHRcdFx0c3R5bGUuY3NzVGV4dCA9IGZpcnN0O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodmFycy5jbGFzc05hbWUpIHsgLy9jbGFzc05hbWUgdHdlZW5zIHdpbGwgY29tYmluZSBhbnkgZGlmZmVyZW5jZXMgdGhleSBmaW5kIGluIHRoZSBjc3Mgd2l0aCB0aGUgdmFycyB0aGF0IGFyZSBwYXNzZWQgaW4sIHNvIHtjbGFzc05hbWU6XCJteUNsYXNzXCIsIHNjYWxlOjAuNSwgbGVmdDoyMH0gd291bGQgd29yay5cblx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IHB0ID0gX3NwZWNpYWxQcm9wcy5jbGFzc05hbWUucGFyc2UodGFyZ2V0LCB2YXJzLmNsYXNzTmFtZSwgXCJjbGFzc05hbWVcIiwgdGhpcywgbnVsbCwgbnVsbCwgdmFycyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQgPSB0aGlzLnBhcnNlKHRhcmdldCwgdmFycywgbnVsbCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLl90cmFuc2Zvcm1UeXBlKSB7XG5cdFx0XHRcdHRocmVlRCA9ICh0aGlzLl90cmFuc2Zvcm1UeXBlID09PSAzKTtcblx0XHRcdFx0aWYgKCFfdHJhbnNmb3JtUHJvcCkge1xuXHRcdFx0XHRcdHN0eWxlLnpvb20gPSAxOyAvL2hlbHBzIGNvcnJlY3QgYW4gSUUgaXNzdWUuXG5cdFx0XHRcdH0gZWxzZSBpZiAoX2lzU2FmYXJpKSB7XG5cdFx0XHRcdFx0X3JlcVNhZmFyaUZpeCA9IHRydWU7XG5cdFx0XHRcdFx0Ly9pZiB6SW5kZXggaXNuJ3Qgc2V0LCBpT1MgU2FmYXJpIGRvZXNuJ3QgcmVwYWludCB0aGluZ3MgY29ycmVjdGx5IHNvbWV0aW1lcyAoc2VlbWluZ2x5IGF0IHJhbmRvbSkuXG5cdFx0XHRcdFx0aWYgKHN0eWxlLnpJbmRleCA9PT0gXCJcIikge1xuXHRcdFx0XHRcdFx0ekluZGV4ID0gX2dldFN0eWxlKHRhcmdldCwgXCJ6SW5kZXhcIiwgX2NzKTtcblx0XHRcdFx0XHRcdGlmICh6SW5kZXggPT09IFwiYXV0b1wiIHx8IHpJbmRleCA9PT0gXCJcIikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9hZGRMYXp5U2V0KHN0eWxlLCBcInpJbmRleFwiLCAwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly9TZXR0aW5nIFdlYmtpdEJhY2tmYWNlVmlzaWJpbGl0eSBjb3JyZWN0cyAzIGJ1Z3M6XG5cdFx0XHRcdFx0Ly8gMSkgW25vbi1BbmRyb2lkXSBTYWZhcmkgc2tpcHMgcmVuZGVyaW5nIGNoYW5nZXMgdG8gXCJ0b3BcIiBhbmQgXCJsZWZ0XCIgdGhhdCBhcmUgbWFkZSBvbiB0aGUgc2FtZSBmcmFtZS9yZW5kZXIgYXMgYSB0cmFuc2Zvcm0gdXBkYXRlLlxuXHRcdFx0XHRcdC8vIDIpIGlPUyBTYWZhcmkgc29tZXRpbWVzIG5lZ2xlY3RzIHRvIHJlcGFpbnQgZWxlbWVudHMgaW4gdGhlaXIgbmV3IHBvc2l0aW9ucy4gU2V0dGluZyBcIldlYmtpdFBlcnNwZWN0aXZlXCIgdG8gYSBub24temVybyB2YWx1ZSB3b3JrZWQgdG9vIGV4Y2VwdCB0aGF0IG9uIGlPUyBTYWZhcmkgdGhpbmdzIHdvdWxkIGZsaWNrZXIgcmFuZG9tbHkuXG5cdFx0XHRcdFx0Ly8gMykgU2FmYXJpIHNvbWV0aW1lcyBkaXNwbGF5ZWQgb2RkIGFydGlmYWN0cyB3aGVuIHR3ZWVuaW5nIHRoZSB0cmFuc2Zvcm0gKG9yIFdlYmtpdFRyYW5zZm9ybSkgcHJvcGVydHksIGxpa2UgZ2hvc3RzIG9mIHRoZSBlZGdlcyBvZiB0aGUgZWxlbWVudCByZW1haW5lZC4gRGVmaW5pdGVseSBhIGJyb3dzZXIgYnVnLlxuXHRcdFx0XHRcdC8vTm90ZTogd2UgYWxsb3cgdGhlIHVzZXIgdG8gb3ZlcnJpZGUgdGhlIGF1dG8tc2V0dGluZyBieSBkZWZpbmluZyBXZWJraXRCYWNrZmFjZVZpc2liaWxpdHkgaW4gdGhlIHZhcnMgb2YgdGhlIHR3ZWVuLlxuXHRcdFx0XHRcdGlmIChfaXNTYWZhcmlMVDYpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2FkZExhenlTZXQoc3R5bGUsIFwiV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5XCIsIHRoaXMuX3ZhcnMuV2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5IHx8ICh0aHJlZUQgPyBcInZpc2libGVcIiA6IFwiaGlkZGVuXCIpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQyID0gcHQ7XG5cdFx0XHRcdHdoaWxlIChwdDIgJiYgcHQyLl9uZXh0KSB7XG5cdFx0XHRcdFx0cHQyID0gcHQyLl9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4odGFyZ2V0LCBcInRyYW5zZm9ybVwiLCAwLCAwLCBudWxsLCAyKTtcblx0XHRcdFx0dGhpcy5fbGlua0NTU1AodHB0LCBudWxsLCBwdDIpO1xuXHRcdFx0XHR0cHQuc2V0UmF0aW8gPSBfdHJhbnNmb3JtUHJvcCA/IF9zZXRUcmFuc2Zvcm1SYXRpbyA6IF9zZXRJRVRyYW5zZm9ybVJhdGlvO1xuXHRcdFx0XHR0cHQuZGF0YSA9IHRoaXMuX3RyYW5zZm9ybSB8fCBfZ2V0VHJhbnNmb3JtKHRhcmdldCwgX2NzLCB0cnVlKTtcblx0XHRcdFx0dHB0LnR3ZWVuID0gdHdlZW47XG5cdFx0XHRcdHRwdC5wciA9IC0xOyAvL2Vuc3VyZXMgdGhhdCB0aGUgdHJhbnNmb3JtcyBnZXQgYXBwbGllZCBhZnRlciB0aGUgY29tcG9uZW50cyBhcmUgdXBkYXRlZC5cblx0XHRcdFx0X292ZXJ3cml0ZVByb3BzLnBvcCgpOyAvL3dlIGRvbid0IHdhbnQgdG8gZm9yY2UgdGhlIG92ZXJ3cml0ZSBvZiBhbGwgXCJ0cmFuc2Zvcm1cIiB0d2VlbnMgb2YgdGhlIHRhcmdldCAtIHdlIG9ubHkgY2FyZSBhYm91dCBpbmRpdmlkdWFsIHRyYW5zZm9ybSBwcm9wZXJ0aWVzIGxpa2Ugc2NhbGVYLCByb3RhdGlvbiwgZXRjLiBUaGUgQ1NTUHJvcFR3ZWVuIGNvbnN0cnVjdG9yIGF1dG9tYXRpY2FsbHkgYWRkcyB0aGUgcHJvcGVydHkgdG8gX292ZXJ3cml0ZVByb3BzIHdoaWNoIGlzIHdoeSB3ZSBuZWVkIHRvIHBvcCgpIGhlcmUuXG5cdFx0XHR9XG5cblx0XHRcdGlmIChfaGFzUHJpb3JpdHkpIHtcblx0XHRcdFx0Ly9yZW9yZGVycyB0aGUgbGlua2VkIGxpc3QgaW4gb3JkZXIgb2YgcHIgKHByaW9yaXR5KVxuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRuZXh0ID0gcHQuX25leHQ7XG5cdFx0XHRcdFx0cHQyID0gZmlyc3Q7XG5cdFx0XHRcdFx0d2hpbGUgKHB0MiAmJiBwdDIucHIgPiBwdC5wcikge1xuXHRcdFx0XHRcdFx0cHQyID0gcHQyLl9uZXh0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoKHB0Ll9wcmV2ID0gcHQyID8gcHQyLl9wcmV2IDogbGFzdCkpIHtcblx0XHRcdFx0XHRcdHB0Ll9wcmV2Ll9uZXh0ID0gcHQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZpcnN0ID0gcHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICgocHQuX25leHQgPSBwdDIpKSB7XG5cdFx0XHRcdFx0XHRwdDIuX3ByZXYgPSBwdDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bGFzdCA9IHB0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IG5leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fZmlyc3RQVCA9IGZpcnN0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fTtcblxuXG5cdFx0cC5wYXJzZSA9IGZ1bmN0aW9uKHRhcmdldCwgdmFycywgcHQsIHBsdWdpbikge1xuXHRcdFx0dmFyIHN0eWxlID0gdGFyZ2V0LnN0eWxlLFxuXHRcdFx0XHRwLCBzcCwgYm4sIGVuLCBicywgZXMsIGJzZngsIGVzZngsIGlzU3RyLCByZWw7XG5cdFx0XHRmb3IgKHAgaW4gdmFycykge1xuXHRcdFx0XHRlcyA9IHZhcnNbcF07IC8vZW5kaW5nIHZhbHVlIHN0cmluZ1xuXHRcdFx0XHRpZiAodHlwZW9mKGVzKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0ZXMgPSBlcyhfaW5kZXgsIF90YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNwID0gX3NwZWNpYWxQcm9wc1twXTsgLy9TcGVjaWFsUHJvcCBsb29rdXAuXG5cdFx0XHRcdGlmIChzcCkge1xuXHRcdFx0XHRcdHB0ID0gc3AucGFyc2UodGFyZ2V0LCBlcywgcCwgdGhpcywgcHQsIHBsdWdpbiwgdmFycyk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRicyA9IF9nZXRTdHlsZSh0YXJnZXQsIHAsIF9jcykgKyBcIlwiO1xuXHRcdFx0XHRcdGlzU3RyID0gKHR5cGVvZihlcykgPT09IFwic3RyaW5nXCIpO1xuXHRcdFx0XHRcdGlmIChwID09PSBcImNvbG9yXCIgfHwgcCA9PT0gXCJmaWxsXCIgfHwgcCA9PT0gXCJzdHJva2VcIiB8fCBwLmluZGV4T2YoXCJDb2xvclwiKSAhPT0gLTEgfHwgKGlzU3RyICYmIF9yZ2Joc2xFeHAudGVzdChlcykpKSB7IC8vT3BlcmEgdXNlcyBiYWNrZ3JvdW5kOiB0byBkZWZpbmUgY29sb3Igc29tZXRpbWVzIGluIGFkZGl0aW9uIHRvIGJhY2tncm91bmRDb2xvcjpcblx0XHRcdFx0XHRcdGlmICghaXNTdHIpIHtcblx0XHRcdFx0XHRcdFx0ZXMgPSBfcGFyc2VDb2xvcihlcyk7XG5cdFx0XHRcdFx0XHRcdGVzID0gKChlcy5sZW5ndGggPiAzKSA/IFwicmdiYShcIiA6IFwicmdiKFwiKSArIGVzLmpvaW4oXCIsXCIpICsgXCIpXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRwdCA9IF9wYXJzZUNvbXBsZXgoc3R5bGUsIHAsIGJzLCBlcywgdHJ1ZSwgXCJ0cmFuc3BhcmVudFwiLCBwdCwgMCwgcGx1Z2luKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoaXNTdHIgJiYgX2NvbXBsZXhFeHAudGVzdChlcykpIHtcblx0XHRcdFx0XHRcdHB0ID0gX3BhcnNlQ29tcGxleChzdHlsZSwgcCwgYnMsIGVzLCB0cnVlLCBudWxsLCBwdCwgMCwgcGx1Z2luKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRibiA9IHBhcnNlRmxvYXQoYnMpO1xuXHRcdFx0XHRcdFx0YnNmeCA9IChibiB8fCBibiA9PT0gMCkgPyBicy5zdWJzdHIoKGJuICsgXCJcIikubGVuZ3RoKSA6IFwiXCI7IC8vcmVtZW1iZXIsIGJzIGNvdWxkIGJlIG5vbi1udW1lcmljIGxpa2UgXCJub3JtYWxcIiBmb3IgZm9udFdlaWdodCwgc28gd2Ugc2hvdWxkIGRlZmF1bHQgdG8gYSBibGFuayBzdWZmaXggaW4gdGhhdCBjYXNlLlxuXG5cdFx0XHRcdFx0XHRpZiAoYnMgPT09IFwiXCIgfHwgYnMgPT09IFwiYXV0b1wiKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChwID09PSBcIndpZHRoXCIgfHwgcCA9PT0gXCJoZWlnaHRcIikge1xuXHRcdFx0XHRcdFx0XHRcdGJuID0gX2dldERpbWVuc2lvbih0YXJnZXQsIHAsIF9jcyk7XG5cdFx0XHRcdFx0XHRcdFx0YnNmeCA9IFwicHhcIjtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChwID09PSBcImxlZnRcIiB8fCBwID09PSBcInRvcFwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ym4gPSBfY2FsY3VsYXRlT2Zmc2V0KHRhcmdldCwgcCwgX2NzKTtcblx0XHRcdFx0XHRcdFx0XHRic2Z4ID0gXCJweFwiO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGJuID0gKHAgIT09IFwib3BhY2l0eVwiKSA/IDAgOiAxO1xuXHRcdFx0XHRcdFx0XHRcdGJzZnggPSBcIlwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJlbCA9IChpc1N0ciAmJiBlcy5jaGFyQXQoMSkgPT09IFwiPVwiKTtcblx0XHRcdFx0XHRcdGlmIChyZWwpIHtcblx0XHRcdFx0XHRcdFx0ZW4gPSBwYXJzZUludChlcy5jaGFyQXQoMCkgKyBcIjFcIiwgMTApO1xuXHRcdFx0XHRcdFx0XHRlcyA9IGVzLnN1YnN0cigyKTtcblx0XHRcdFx0XHRcdFx0ZW4gKj0gcGFyc2VGbG9hdChlcyk7XG5cdFx0XHRcdFx0XHRcdGVzZnggPSBlcy5yZXBsYWNlKF9zdWZmaXhFeHAsIFwiXCIpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZW4gPSBwYXJzZUZsb2F0KGVzKTtcblx0XHRcdFx0XHRcdFx0ZXNmeCA9IGlzU3RyID8gZXMucmVwbGFjZShfc3VmZml4RXhwLCBcIlwiKSA6IFwiXCI7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmIChlc2Z4ID09PSBcIlwiKSB7XG5cdFx0XHRcdFx0XHRcdGVzZnggPSAocCBpbiBfc3VmZml4TWFwKSA/IF9zdWZmaXhNYXBbcF0gOiBic2Z4OyAvL3BvcHVsYXRlIHRoZSBlbmQgc3VmZml4LCBwcmlvcml0aXppbmcgdGhlIG1hcCwgdGhlbiBpZiBub25lIGlzIGZvdW5kLCB1c2UgdGhlIGJlZ2lubmluZyBzdWZmaXguXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGVzID0gKGVuIHx8IGVuID09PSAwKSA/IChyZWwgPyBlbiArIGJuIDogZW4pICsgZXNmeCA6IHZhcnNbcF07IC8vZW5zdXJlcyB0aGF0IGFueSArPSBvciAtPSBwcmVmaXhlcyBhcmUgdGFrZW4gY2FyZSBvZi4gUmVjb3JkIHRoZSBlbmQgdmFsdWUgYmVmb3JlIG5vcm1hbGl6aW5nIHRoZSBzdWZmaXggYmVjYXVzZSB3ZSBhbHdheXMgd2FudCB0byBlbmQgdGhlIHR3ZWVuIG9uIGV4YWN0bHkgd2hhdCB0aGV5IGludGVuZGVkIGV2ZW4gaWYgaXQgZG9lc24ndCBtYXRjaCB0aGUgYmVnaW5uaW5nIHZhbHVlJ3Mgc3VmZml4LlxuXG5cdFx0XHRcdFx0XHQvL2lmIHRoZSBiZWdpbm5pbmcvZW5kaW5nIHN1ZmZpeGVzIGRvbid0IG1hdGNoLCBub3JtYWxpemUgdGhlbS4uLlxuXHRcdFx0XHRcdFx0aWYgKGJzZnggIT09IGVzZngpIGlmIChlc2Z4ICE9PSBcIlwiKSBpZiAoZW4gfHwgZW4gPT09IDApIGlmIChibikgeyAvL25vdGU6IGlmIHRoZSBiZWdpbm5pbmcgdmFsdWUgKGJuKSBpcyAwLCB3ZSBkb24ndCBuZWVkIHRvIGNvbnZlcnQgdW5pdHMhXG5cdFx0XHRcdFx0XHRcdGJuID0gX2NvbnZlcnRUb1BpeGVscyh0YXJnZXQsIHAsIGJuLCBic2Z4KTtcblx0XHRcdFx0XHRcdFx0aWYgKGVzZnggPT09IFwiJVwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ym4gLz0gX2NvbnZlcnRUb1BpeGVscyh0YXJnZXQsIHAsIDEwMCwgXCIlXCIpIC8gMTAwO1xuXHRcdFx0XHRcdFx0XHRcdGlmICh2YXJzLnN0cmljdFVuaXRzICE9PSB0cnVlKSB7IC8vc29tZSBicm93c2VycyByZXBvcnQgb25seSBcInB4XCIgdmFsdWVzIGluc3RlYWQgb2YgYWxsb3dpbmcgXCIlXCIgd2l0aCBnZXRDb21wdXRlZFN0eWxlKCksIHNvIHdlIGFzc3VtZSB0aGF0IGlmIHdlJ3JlIHR3ZWVuaW5nIHRvIGEgJSwgd2Ugc2hvdWxkIHN0YXJ0IHRoZXJlIHRvbyB1bmxlc3Mgc3RyaWN0VW5pdHM6dHJ1ZSBpcyBkZWZpbmVkLiBUaGlzIGFwcHJvYWNoIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHJlc3BvbnNpdmUgZGVzaWducyB0aGF0IHVzZSBmcm9tKCkgdHdlZW5zLlxuXHRcdFx0XHRcdFx0XHRcdFx0YnMgPSBibiArIFwiJVwiO1xuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGVzZnggPT09IFwiZW1cIiB8fCBlc2Z4ID09PSBcInJlbVwiIHx8IGVzZnggPT09IFwidndcIiB8fCBlc2Z4ID09PSBcInZoXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRibiAvPSBfY29udmVydFRvUGl4ZWxzKHRhcmdldCwgcCwgMSwgZXNmeCk7XG5cblx0XHRcdFx0XHRcdFx0Ly9vdGhlcndpc2UgY29udmVydCB0byBwaXhlbHMuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoZXNmeCAhPT0gXCJweFwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZW4gPSBfY29udmVydFRvUGl4ZWxzKHRhcmdldCwgcCwgZW4sIGVzZngpO1xuXHRcdFx0XHRcdFx0XHRcdGVzZnggPSBcInB4XCI7IC8vd2UgZG9uJ3QgdXNlIGJzZnggYWZ0ZXIgdGhpcywgc28gd2UgZG9uJ3QgbmVlZCB0byBzZXQgaXQgdG8gcHggdG9vLlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChyZWwpIGlmIChlbiB8fCBlbiA9PT0gMCkge1xuXHRcdFx0XHRcdFx0XHRcdGVzID0gKGVuICsgYm4pICsgZXNmeDsgLy90aGUgY2hhbmdlcyB3ZSBtYWRlIGFmZmVjdCByZWxhdGl2ZSBjYWxjdWxhdGlvbnMsIHNvIGFkanVzdCB0aGUgZW5kIHZhbHVlIGhlcmUuXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHJlbCkge1xuXHRcdFx0XHRcdFx0XHRlbiArPSBibjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKChibiB8fCBibiA9PT0gMCkgJiYgKGVuIHx8IGVuID09PSAwKSkgeyAvL2Zhc3RlciB0aGFuIGlzTmFOKCkuIEFsc28sIHByZXZpb3VzbHkgd2UgcmVxdWlyZWQgZW4gIT09IGJuIGJ1dCB0aGF0IGRvZXNuJ3QgcmVhbGx5IGdhaW4gbXVjaCBwZXJmb3JtYW5jZSBhbmQgaXQgcHJldmVudHMgX3BhcnNlVG9Qcm94eSgpIGZyb20gd29ya2luZyBwcm9wZXJseSBpZiBiZWdpbm5pbmcgYW5kIGVuZGluZyB2YWx1ZXMgbWF0Y2ggYnV0IG5lZWQgdG8gZ2V0IHR3ZWVuZWQgYnkgYW4gZXh0ZXJuYWwgcGx1Z2luIGFueXdheS4gRm9yIGV4YW1wbGUsIGEgYmV6aWVyIHR3ZWVuIHdoZXJlIHRoZSB0YXJnZXQgc3RhcnRzIGF0IGxlZnQ6MCBhbmQgaGFzIHRoZXNlIHBvaW50czogW3tsZWZ0OjUwfSx7bGVmdDowfV0gd291bGRuJ3Qgd29yayBwcm9wZXJseSBiZWNhdXNlIHdoZW4gcGFyc2luZyB0aGUgbGFzdCBwb2ludCwgaXQnZCBtYXRjaCB0aGUgZmlyc3QgKGN1cnJlbnQpIG9uZSBhbmQgYSBub24tdHdlZW5pbmcgQ1NTUHJvcFR3ZWVuIHdvdWxkIGJlIHJlY29yZGVkIHdoZW4gd2UgYWN0dWFsbHkgbmVlZCBhIG5vcm1hbCB0d2VlbiAodHlwZTowKSBzbyB0aGF0IHRoaW5ncyBnZXQgdXBkYXRlZCBkdXJpbmcgdGhlIHR3ZWVuIHByb3Blcmx5LlxuXHRcdFx0XHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4oc3R5bGUsIHAsIGJuLCBlbiAtIGJuLCBwdCwgMCwgcCwgKF9hdXRvUm91bmQgIT09IGZhbHNlICYmIChlc2Z4ID09PSBcInB4XCIgfHwgcCA9PT0gXCJ6SW5kZXhcIikpLCAwLCBicywgZXMpO1xuXHRcdFx0XHRcdFx0XHRwdC54czAgPSBlc2Z4O1xuXHRcdFx0XHRcdFx0XHQvL0RFQlVHOiBfbG9nKFwidHdlZW4gXCIrcCtcIiBmcm9tIFwiK3B0LmIrXCIgKFwiK2JuK2VzZngrXCIpIHRvIFwiK3B0LmUrXCIgd2l0aCBzdWZmaXg6IFwiK3B0LnhzMCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHN0eWxlW3BdID09PSB1bmRlZmluZWQgfHwgIWVzICYmIChlcyArIFwiXCIgPT09IFwiTmFOXCIgfHwgZXMgPT0gbnVsbCkpIHtcblx0XHRcdFx0XHRcdFx0X2xvZyhcImludmFsaWQgXCIgKyBwICsgXCIgdHdlZW4gdmFsdWU6IFwiICsgdmFyc1twXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRwdCA9IG5ldyBDU1NQcm9wVHdlZW4oc3R5bGUsIHAsIGVuIHx8IGJuIHx8IDAsIDAsIHB0LCAtMSwgcCwgZmFsc2UsIDAsIGJzLCBlcyk7XG5cdFx0XHRcdFx0XHRcdHB0LnhzMCA9IChlcyA9PT0gXCJub25lXCIgJiYgKHAgPT09IFwiZGlzcGxheVwiIHx8IHAuaW5kZXhPZihcIlN0eWxlXCIpICE9PSAtMSkpID8gYnMgOiBlczsgLy9pbnRlcm1lZGlhdGUgdmFsdWUgc2hvdWxkIHR5cGljYWxseSBiZSBzZXQgaW1tZWRpYXRlbHkgKGVuZCB2YWx1ZSkgZXhjZXB0IGZvciBcImRpc3BsYXlcIiBvciB0aGluZ3MgbGlrZSBib3JkZXJUb3BTdHlsZSwgYm9yZGVyQm90dG9tU3R5bGUsIGV0Yy4gd2hpY2ggc2hvdWxkIHVzZSB0aGUgYmVnaW5uaW5nIHZhbHVlIGR1cmluZyB0aGUgdHdlZW4uXG5cdFx0XHRcdFx0XHRcdC8vREVCVUc6IF9sb2coXCJub24tdHdlZW5pbmcgdmFsdWUgXCIrcCtcIjogXCIrcHQueHMwKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHBsdWdpbikgaWYgKHB0ICYmICFwdC5wbHVnaW4pIHtcblx0XHRcdFx0XHRwdC5wbHVnaW4gPSBwbHVnaW47XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBwdDtcblx0XHR9O1xuXG5cblx0XHQvL2dldHMgY2FsbGVkIGV2ZXJ5IHRpbWUgdGhlIHR3ZWVuIHVwZGF0ZXMsIHBhc3NpbmcgdGhlIG5ldyByYXRpbyAodHlwaWNhbGx5IGEgdmFsdWUgYmV0d2VlbiAwIGFuZCAxLCBidXQgbm90IGFsd2F5cyAoZm9yIGV4YW1wbGUsIGlmIGFuIEVsYXN0aWMuZWFzZU91dCBpcyB1c2VkLCB0aGUgdmFsdWUgY2FuIGp1bXAgYWJvdmUgMSBtaWQtdHdlZW4pLiBJdCB3aWxsIGFsd2F5cyBzdGFydCBhbmQgMCBhbmQgZW5kIGF0IDEuXG5cdFx0cC5zZXRSYXRpbyA9IGZ1bmN0aW9uKHYpIHtcblx0XHRcdHZhciBwdCA9IHRoaXMuX2ZpcnN0UFQsXG5cdFx0XHRcdG1pbiA9IDAuMDAwMDAxLFxuXHRcdFx0XHR2YWwsIHN0ciwgaTtcblx0XHRcdC8vYXQgdGhlIGVuZCBvZiB0aGUgdHdlZW4sIHdlIHNldCB0aGUgdmFsdWVzIHRvIGV4YWN0bHkgd2hhdCB3ZSByZWNlaXZlZCBpbiBvcmRlciB0byBtYWtlIHN1cmUgbm9uLXR3ZWVuaW5nIHZhbHVlcyAobGlrZSBcInBvc2l0aW9uXCIgb3IgXCJmbG9hdFwiIG9yIHdoYXRldmVyKSBhcmUgc2V0IGFuZCBzbyB0aGF0IGlmIHRoZSBiZWdpbm5pbmcvZW5kaW5nIHN1ZmZpeGVzICh1bml0cykgZGlkbid0IG1hdGNoIGFuZCB3ZSBub3JtYWxpemVkIHRvIHB4LCB0aGUgdmFsdWUgdGhhdCB0aGUgdXNlciBwYXNzZWQgaW4gaXMgdXNlZCBoZXJlLiBXZSBjaGVjayB0byBzZWUgaWYgdGhlIHR3ZWVuIGlzIGF0IGl0cyBiZWdpbm5pbmcgaW4gY2FzZSBpdCdzIGEgZnJvbSgpIHR3ZWVuIGluIHdoaWNoIGNhc2UgdGhlIHJhdGlvIHdpbGwgYWN0dWFsbHkgZ28gZnJvbSAxIHRvIDAgb3ZlciB0aGUgY291cnNlIG9mIHRoZSB0d2VlbiAoYmFja3dhcmRzKS5cblx0XHRcdGlmICh2ID09PSAxICYmICh0aGlzLl90d2Vlbi5fdGltZSA9PT0gdGhpcy5fdHdlZW4uX2R1cmF0aW9uIHx8IHRoaXMuX3R3ZWVuLl90aW1lID09PSAwKSkge1xuXHRcdFx0XHR3aGlsZSAocHQpIHtcblx0XHRcdFx0XHRpZiAocHQudHlwZSAhPT0gMikge1xuXHRcdFx0XHRcdFx0aWYgKHB0LnIgJiYgcHQudHlwZSAhPT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0dmFsID0gTWF0aC5yb3VuZChwdC5zICsgcHQuYyk7XG5cdFx0XHRcdFx0XHRcdGlmICghcHQudHlwZSkge1xuXHRcdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSB2YWwgKyBwdC54czA7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocHQudHlwZSA9PT0gMSkgeyAvL2NvbXBsZXggdmFsdWUgKG9uZSB0aGF0IHR5cGljYWxseSBoYXMgbXVsdGlwbGUgbnVtYmVycyBpbnNpZGUgYSBzdHJpbmcsIGxpa2UgXCJyZWN0KDVweCwxMHB4LDIwcHgsMjVweClcIlxuXHRcdFx0XHRcdFx0XHRcdGkgPSBwdC5sO1xuXHRcdFx0XHRcdFx0XHRcdHN0ciA9IHB0LnhzMCArIHZhbCArIHB0LnhzMTtcblx0XHRcdFx0XHRcdFx0XHRmb3IgKGkgPSAxOyBpIDwgcHQubDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdHIgKz0gcHRbXCJ4blwiK2ldICsgcHRbXCJ4c1wiKyhpKzEpXTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHN0cjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LmU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHB0LnNldFJhdGlvKHYpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAodiB8fCAhKHRoaXMuX3R3ZWVuLl90aW1lID09PSB0aGlzLl90d2Vlbi5fZHVyYXRpb24gfHwgdGhpcy5fdHdlZW4uX3RpbWUgPT09IDApIHx8IHRoaXMuX3R3ZWVuLl9yYXdQcmV2VGltZSA9PT0gLTAuMDAwMDAxKSB7XG5cdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdHZhbCA9IHB0LmMgKiB2ICsgcHQucztcblx0XHRcdFx0XHRpZiAocHQucikge1xuXHRcdFx0XHRcdFx0dmFsID0gTWF0aC5yb3VuZCh2YWwpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodmFsIDwgbWluKSBpZiAodmFsID4gLW1pbikge1xuXHRcdFx0XHRcdFx0dmFsID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCFwdC50eXBlKSB7XG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gdmFsICsgcHQueHMwO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocHQudHlwZSA9PT0gMSkgeyAvL2NvbXBsZXggdmFsdWUgKG9uZSB0aGF0IHR5cGljYWxseSBoYXMgbXVsdGlwbGUgbnVtYmVycyBpbnNpZGUgYSBzdHJpbmcsIGxpa2UgXCJyZWN0KDVweCwxMHB4LDIwcHgsMjVweClcIlxuXHRcdFx0XHRcdFx0aSA9IHB0Lmw7XG5cdFx0XHRcdFx0XHRpZiAoaSA9PT0gMikge1xuXHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQueHMwICsgdmFsICsgcHQueHMxICsgcHQueG4xICsgcHQueHMyO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChpID09PSAzKSB7XG5cdFx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC54czAgKyB2YWwgKyBwdC54czEgKyBwdC54bjEgKyBwdC54czIgKyBwdC54bjIgKyBwdC54czM7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGkgPT09IDQpIHtcblx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHB0LnhzMCArIHZhbCArIHB0LnhzMSArIHB0LnhuMSArIHB0LnhzMiArIHB0LnhuMiArIHB0LnhzMyArIHB0LnhuMyArIHB0LnhzNDtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoaSA9PT0gNSkge1xuXHRcdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQueHMwICsgdmFsICsgcHQueHMxICsgcHQueG4xICsgcHQueHMyICsgcHQueG4yICsgcHQueHMzICsgcHQueG4zICsgcHQueHM0ICsgcHQueG40ICsgcHQueHM1O1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0c3RyID0gcHQueHMwICsgdmFsICsgcHQueHMxO1xuXHRcdFx0XHRcdFx0XHRmb3IgKGkgPSAxOyBpIDwgcHQubDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RyICs9IHB0W1wieG5cIitpXSArIHB0W1wieHNcIisoaSsxKV07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cHQudFtwdC5wXSA9IHN0cjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAocHQudHlwZSA9PT0gLTEpIHsgLy9ub24tdHdlZW5pbmcgdmFsdWVcblx0XHRcdFx0XHRcdHB0LnRbcHQucF0gPSBwdC54czA7XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKHB0LnNldFJhdGlvKSB7IC8vY3VzdG9tIHNldFJhdGlvKCkgZm9yIHRoaW5ncyBsaWtlIFNwZWNpYWxQcm9wcywgZXh0ZXJuYWwgcGx1Z2lucywgZXRjLlxuXHRcdFx0XHRcdFx0cHQuc2V0UmF0aW8odik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly9pZiB0aGUgdHdlZW4gaXMgcmV2ZXJzZWQgYWxsIHRoZSB3YXkgYmFjayB0byB0aGUgYmVnaW5uaW5nLCB3ZSBuZWVkIHRvIHJlc3RvcmUgdGhlIG9yaWdpbmFsIHZhbHVlcyB3aGljaCBtYXkgaGF2ZSBkaWZmZXJlbnQgdW5pdHMgKGxpa2UgJSBpbnN0ZWFkIG9mIHB4IG9yIGVtIG9yIHdoYXRldmVyKS5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRcdGlmIChwdC50eXBlICE9PSAyKSB7XG5cdFx0XHRcdFx0XHRwdC50W3B0LnBdID0gcHQuYjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cHQuc2V0UmF0aW8odik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHB0ID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBGb3JjZXMgcmVuZGVyaW5nIG9mIHRoZSB0YXJnZXQncyB0cmFuc2Zvcm1zIChyb3RhdGlvbiwgc2NhbGUsIGV0Yy4pIHdoZW5ldmVyIHRoZSBDU1NQbHVnaW4ncyBzZXRSYXRpbygpIGlzIGNhbGxlZC5cblx0XHQgKiBCYXNpY2FsbHksIHRoaXMgdGVsbHMgdGhlIENTU1BsdWdpbiB0byBjcmVhdGUgYSBDU1NQcm9wVHdlZW4gKHR5cGUgMikgYWZ0ZXIgaW5zdGFudGlhdGlvbiB0aGF0IHJ1bnMgbGFzdCBpbiB0aGUgbGlua2VkXG5cdFx0ICogbGlzdCBhbmQgY2FsbHMgdGhlIGFwcHJvcHJpYXRlICgzRCBvciAyRCkgcmVuZGVyaW5nIGZ1bmN0aW9uLiBXZSBzZXBhcmF0ZSB0aGlzIGludG8gaXRzIG93biBtZXRob2Qgc28gdGhhdCB3ZSBjYW4gY2FsbFxuXHRcdCAqIGl0IGZyb20gb3RoZXIgcGx1Z2lucyBsaWtlIEJlemllclBsdWdpbiBpZiwgZm9yIGV4YW1wbGUsIGl0IG5lZWRzIHRvIGFwcGx5IGFuIGF1dG9Sb3RhdGlvbiBhbmQgdGhpcyBDU1NQbHVnaW5cblx0XHQgKiBkb2Vzbid0IGhhdmUgYW55IHRyYW5zZm9ybS1yZWxhdGVkIHByb3BlcnRpZXMgb2YgaXRzIG93bi4gWW91IGNhbiBjYWxsIHRoaXMgbWV0aG9kIGFzIG1hbnkgdGltZXMgYXMgeW91XG5cdFx0ICogd2FudCBhbmQgaXQgd29uJ3QgY3JlYXRlIGR1cGxpY2F0ZSBDU1NQcm9wVHdlZW5zLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSB0aHJlZUQgaWYgdHJ1ZSwgaXQgc2hvdWxkIGFwcGx5IDNEIHR3ZWVucyAob3RoZXJ3aXNlLCBqdXN0IDJEIG9uZXMgYXJlIGZpbmUgYW5kIHR5cGljYWxseSBmYXN0ZXIpXG5cdFx0ICovXG5cdFx0cC5fZW5hYmxlVHJhbnNmb3JtcyA9IGZ1bmN0aW9uKHRocmVlRCkge1xuXHRcdFx0dGhpcy5fdHJhbnNmb3JtID0gdGhpcy5fdHJhbnNmb3JtIHx8IF9nZXRUcmFuc2Zvcm0odGhpcy5fdGFyZ2V0LCBfY3MsIHRydWUpOyAvL2Vuc3VyZXMgdGhhdCB0aGUgZWxlbWVudCBoYXMgYSBfZ3NUcmFuc2Zvcm0gcHJvcGVydHkgd2l0aCB0aGUgYXBwcm9wcmlhdGUgdmFsdWVzLlxuXHRcdFx0dGhpcy5fdHJhbnNmb3JtVHlwZSA9ICghKHRoaXMuX3RyYW5zZm9ybS5zdmcgJiYgX3VzZVNWR1RyYW5zZm9ybUF0dHIpICYmICh0aHJlZUQgfHwgdGhpcy5fdHJhbnNmb3JtVHlwZSA9PT0gMykpID8gMyA6IDI7XG5cdFx0fTtcblxuXHRcdHZhciBsYXp5U2V0ID0gZnVuY3Rpb24odikge1xuXHRcdFx0dGhpcy50W3RoaXMucF0gPSB0aGlzLmU7XG5cdFx0XHR0aGlzLmRhdGEuX2xpbmtDU1NQKHRoaXMsIHRoaXMuX25leHQsIG51bGwsIHRydWUpOyAvL3dlIHB1cnBvc2VmdWxseSBrZWVwIHRoaXMuX25leHQgZXZlbiB0aG91Z2ggaXQnZCBtYWtlIHNlbnNlIHRvIG51bGwgaXQsIGJ1dCB0aGlzIGlzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLCBhcyB0aGlzIGhhcHBlbnMgZHVyaW5nIHRoZSB3aGlsZSAocHQpIHt9IGxvb3AgaW4gc2V0UmF0aW8oKSBhdCB0aGUgYm90dG9tIG9mIHdoaWNoIGl0IHNldHMgcHQgPSBwdC5fbmV4dCwgc28gaWYgd2UgbnVsbCBpdCwgdGhlIGxpbmtlZCBsaXN0IHdpbGwgYmUgYnJva2VuIGluIHRoYXQgbG9vcC5cblx0XHR9O1xuXHRcdC8qKiBAcHJpdmF0ZSBHaXZlcyB1cyBhIHdheSB0byBzZXQgYSB2YWx1ZSBvbiB0aGUgZmlyc3QgcmVuZGVyIChhbmQgb25seSB0aGUgZmlyc3QgcmVuZGVyKS4gKiovXG5cdFx0cC5fYWRkTGF6eVNldCA9IGZ1bmN0aW9uKHQsIHAsIHYpIHtcblx0XHRcdHZhciBwdCA9IHRoaXMuX2ZpcnN0UFQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHQsIHAsIDAsIDAsIHRoaXMuX2ZpcnN0UFQsIDIpO1xuXHRcdFx0cHQuZSA9IHY7XG5cdFx0XHRwdC5zZXRSYXRpbyA9IGxhenlTZXQ7XG5cdFx0XHRwdC5kYXRhID0gdGhpcztcblx0XHR9O1xuXG5cdFx0LyoqIEBwcml2YXRlICoqL1xuXHRcdHAuX2xpbmtDU1NQID0gZnVuY3Rpb24ocHQsIG5leHQsIHByZXYsIHJlbW92ZSkge1xuXHRcdFx0aWYgKHB0KSB7XG5cdFx0XHRcdGlmIChuZXh0KSB7XG5cdFx0XHRcdFx0bmV4dC5fcHJldiA9IHB0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwdC5fbmV4dCkge1xuXHRcdFx0XHRcdHB0Ll9uZXh0Ll9wcmV2ID0gcHQuX3ByZXY7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHB0Ll9wcmV2KSB7XG5cdFx0XHRcdFx0cHQuX3ByZXYuX25leHQgPSBwdC5fbmV4dDtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLl9maXJzdFBUID09PSBwdCkge1xuXHRcdFx0XHRcdHRoaXMuX2ZpcnN0UFQgPSBwdC5fbmV4dDtcblx0XHRcdFx0XHRyZW1vdmUgPSB0cnVlOyAvL2p1c3QgdG8gcHJldmVudCByZXNldHRpbmcgdGhpcy5fZmlyc3RQVCA1IGxpbmVzIGRvd24gaW4gY2FzZSBwdC5fbmV4dCBpcyBudWxsLiAob3B0aW1pemVkIGZvciBzcGVlZClcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocHJldikge1xuXHRcdFx0XHRcdHByZXYuX25leHQgPSBwdDtcblx0XHRcdFx0fSBlbHNlIGlmICghcmVtb3ZlICYmIHRoaXMuX2ZpcnN0UFQgPT09IG51bGwpIHtcblx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQuX25leHQgPSBuZXh0O1xuXHRcdFx0XHRwdC5fcHJldiA9IHByZXY7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcHQ7XG5cdFx0fTtcblxuXHRcdHAuX21vZCA9IGZ1bmN0aW9uKGxvb2t1cCkge1xuXHRcdFx0dmFyIHB0ID0gdGhpcy5fZmlyc3RQVDtcblx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRpZiAodHlwZW9mKGxvb2t1cFtwdC5wXSkgPT09IFwiZnVuY3Rpb25cIiAmJiBsb29rdXBbcHQucF0gPT09IE1hdGgucm91bmQpIHsgLy9vbmx5IGdldHMgY2FsbGVkIGJ5IFJvdW5kUHJvcHNQbHVnaW4gKE1vZGlmeVBsdWdpbiBtYW5hZ2VzIGFsbCB0aGUgcmVuZGVyaW5nIGludGVybmFsbHkgZm9yIENTU1BsdWdpbiBwcm9wZXJ0aWVzIHRoYXQgbmVlZCBtb2RpZmljYXRpb24pLiBSZW1lbWJlciwgd2UgaGFuZGxlIHJvdW5kaW5nIGEgYml0IGRpZmZlcmVudGx5IGluIHRoaXMgcGx1Z2luIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCBsZXZlcmFnaW5nIFwiclwiIGFzIGFuIGluZGljYXRvciB0aGF0IHRoZSB2YWx1ZSBzaG91bGQgYmUgcm91bmRlZCBpbnRlcm5hbGx5Li5cblx0XHRcdFx0XHRwdC5yID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvL3dlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgaWYgYWxwaGEgb3IgYXV0b0FscGhhIGlzIGtpbGxlZCwgb3BhY2l0eSBpcyB0b28uIEFuZCBhdXRvQWxwaGEgYWZmZWN0cyB0aGUgXCJ2aXNpYmlsaXR5XCIgcHJvcGVydHkuXG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKGxvb2t1cCkge1xuXHRcdFx0dmFyIGNvcHkgPSBsb29rdXAsXG5cdFx0XHRcdHB0LCBwLCB4Zmlyc3Q7XG5cdFx0XHRpZiAobG9va3VwLmF1dG9BbHBoYSB8fCBsb29rdXAuYWxwaGEpIHtcblx0XHRcdFx0Y29weSA9IHt9O1xuXHRcdFx0XHRmb3IgKHAgaW4gbG9va3VwKSB7IC8vY29weSB0aGUgbG9va3VwIHNvIHRoYXQgd2UncmUgbm90IGNoYW5naW5nIHRoZSBvcmlnaW5hbCB3aGljaCBtYXkgYmUgcGFzc2VkIGVsc2V3aGVyZS5cblx0XHRcdFx0XHRjb3B5W3BdID0gbG9va3VwW3BdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvcHkub3BhY2l0eSA9IDE7XG5cdFx0XHRcdGlmIChjb3B5LmF1dG9BbHBoYSkge1xuXHRcdFx0XHRcdGNvcHkudmlzaWJpbGl0eSA9IDE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmIChsb29rdXAuY2xhc3NOYW1lICYmIChwdCA9IHRoaXMuX2NsYXNzTmFtZVBUKSkgeyAvL2ZvciBjbGFzc05hbWUgdHdlZW5zLCB3ZSBuZWVkIHRvIGtpbGwgYW55IGFzc29jaWF0ZWQgQ1NTUHJvcFR3ZWVucyB0b287IGEgbGlua2VkIGxpc3Qgc3RhcnRzIGF0IHRoZSBjbGFzc05hbWUncyBcInhmaXJzdFwiLlxuXHRcdFx0XHR4Zmlyc3QgPSBwdC54Zmlyc3Q7XG5cdFx0XHRcdGlmICh4Zmlyc3QgJiYgeGZpcnN0Ll9wcmV2KSB7XG5cdFx0XHRcdFx0dGhpcy5fbGlua0NTU1AoeGZpcnN0Ll9wcmV2LCBwdC5fbmV4dCwgeGZpcnN0Ll9wcmV2Ll9wcmV2KTsgLy9icmVhayBvZmYgdGhlIHByZXZcblx0XHRcdFx0fSBlbHNlIGlmICh4Zmlyc3QgPT09IHRoaXMuX2ZpcnN0UFQpIHtcblx0XHRcdFx0XHR0aGlzLl9maXJzdFBUID0gcHQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHB0Ll9uZXh0KSB7XG5cdFx0XHRcdFx0dGhpcy5fbGlua0NTU1AocHQuX25leHQsIHB0Ll9uZXh0Ll9uZXh0LCB4Zmlyc3QuX3ByZXYpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX2NsYXNzTmFtZVBUID0gbnVsbDtcblx0XHRcdH1cblx0XHRcdHB0ID0gdGhpcy5fZmlyc3RQVDtcblx0XHRcdHdoaWxlIChwdCkge1xuXHRcdFx0XHRpZiAocHQucGx1Z2luICYmIHB0LnBsdWdpbiAhPT0gcCAmJiBwdC5wbHVnaW4uX2tpbGwpIHsgLy9mb3IgcGx1Z2lucyB0aGF0IGFyZSByZWdpc3RlcmVkIHdpdGggQ1NTUGx1Z2luLCB3ZSBzaG91bGQgbm90aWZ5IHRoZW0gb2YgdGhlIGtpbGwuXG5cdFx0XHRcdFx0cHQucGx1Z2luLl9raWxsKGxvb2t1cCk7XG5cdFx0XHRcdFx0cCA9IHB0LnBsdWdpbjtcblx0XHRcdFx0fVxuXHRcdFx0XHRwdCA9IHB0Ll9uZXh0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFR3ZWVuUGx1Z2luLnByb3RvdHlwZS5fa2lsbC5jYWxsKHRoaXMsIGNvcHkpO1xuXHRcdH07XG5cblxuXG5cdFx0Ly91c2VkIGJ5IGNhc2NhZGVUbygpIGZvciBnYXRoZXJpbmcgYWxsIHRoZSBzdHlsZSBwcm9wZXJ0aWVzIG9mIGVhY2ggY2hpbGQgZWxlbWVudCBpbnRvIGFuIGFycmF5IGZvciBjb21wYXJpc29uLlxuXHRcdHZhciBfZ2V0Q2hpbGRTdHlsZXMgPSBmdW5jdGlvbihlLCBwcm9wcywgdGFyZ2V0cykge1xuXHRcdFx0XHR2YXIgY2hpbGRyZW4sIGksIGNoaWxkLCB0eXBlO1xuXHRcdFx0XHRpZiAoZS5zbGljZSkge1xuXHRcdFx0XHRcdGkgPSBlLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdF9nZXRDaGlsZFN0eWxlcyhlW2ldLCBwcm9wcywgdGFyZ2V0cyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRjaGlsZHJlbiA9IGUuY2hpbGROb2Rlcztcblx0XHRcdFx0aSA9IGNoaWxkcmVuLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0Y2hpbGQgPSBjaGlsZHJlbltpXTtcblx0XHRcdFx0XHR0eXBlID0gY2hpbGQudHlwZTtcblx0XHRcdFx0XHRpZiAoY2hpbGQuc3R5bGUpIHtcblx0XHRcdFx0XHRcdHByb3BzLnB1c2goX2dldEFsbFN0eWxlcyhjaGlsZCkpO1xuXHRcdFx0XHRcdFx0aWYgKHRhcmdldHMpIHtcblx0XHRcdFx0XHRcdFx0dGFyZ2V0cy5wdXNoKGNoaWxkKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCh0eXBlID09PSAxIHx8IHR5cGUgPT09IDkgfHwgdHlwZSA9PT0gMTEpICYmIGNoaWxkLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRfZ2V0Q2hpbGRTdHlsZXMoY2hpbGQsIHByb3BzLCB0YXJnZXRzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvKipcblx0XHQgKiBUeXBpY2FsbHkgb25seSB1c2VmdWwgZm9yIGNsYXNzTmFtZSB0d2VlbnMgdGhhdCBtYXkgYWZmZWN0IGNoaWxkIGVsZW1lbnRzLCB0aGlzIG1ldGhvZCBjcmVhdGVzIGEgVHdlZW5MaXRlXG5cdFx0ICogYW5kIHRoZW4gY29tcGFyZXMgdGhlIHN0eWxlIHByb3BlcnRpZXMgb2YgYWxsIHRoZSB0YXJnZXQncyBjaGlsZCBlbGVtZW50cyBhdCB0aGUgdHdlZW4ncyBzdGFydCBhbmQgZW5kLCBhbmRcblx0XHQgKiBpZiBhbnkgYXJlIGRpZmZlcmVudCwgaXQgYWxzbyBjcmVhdGVzIHR3ZWVucyBmb3IgdGhvc2UgYW5kIHJldHVybnMgYW4gYXJyYXkgY29udGFpbmluZyBBTEwgb2YgdGhlIHJlc3VsdGluZ1xuXHRcdCAqIHR3ZWVucyAoc28gdGhhdCB5b3UgY2FuIGVhc2lseSBhZGQoKSB0aGVtIHRvIGEgVGltZWxpbmVMaXRlLCBmb3IgZXhhbXBsZSkuIFRoZSByZWFzb24gdGhpcyBmdW5jdGlvbmFsaXR5IGlzXG5cdFx0ICogd3JhcHBlZCBpbnRvIGEgc2VwYXJhdGUgc3RhdGljIG1ldGhvZCBvZiBDU1NQbHVnaW4gaW5zdGVhZCBvZiBiZWluZyBpbnRlZ3JhdGVkIGludG8gYWxsIHJlZ3VsYXIgY2xhc3NOYW1lIHR3ZWVuc1xuXHRcdCAqIGlzIGJlY2F1c2UgaXQgY3JlYXRlcyBlbnRpcmVseSBuZXcgdHdlZW5zIHRoYXQgbWF5IGhhdmUgY29tcGxldGVseSBkaWZmZXJlbnQgdGFyZ2V0cyB0aGFuIHRoZSBvcmlnaW5hbCB0d2Vlbixcblx0XHQgKiBzbyBpZiB0aGV5IHdlcmUgYWxsIGx1bXBlZCBpbnRvIHRoZSBvcmlnaW5hbCB0d2VlbiBpbnN0YW5jZSwgaXQgd291bGQgYmUgaW5jb25zaXN0ZW50IHdpdGggdGhlIHJlc3Qgb2YgdGhlIEFQSVxuXHRcdCAqIGFuZCBpdCB3b3VsZCBjcmVhdGUgb3RoZXIgcHJvYmxlbXMuIEZvciBleGFtcGxlOlxuXHRcdCAqICAtIElmIEkgY3JlYXRlIGEgdHdlZW4gb2YgZWxlbWVudEEsIHRoYXQgdHdlZW4gaW5zdGFuY2UgbWF5IHN1ZGRlbmx5IGNoYW5nZSBpdHMgdGFyZ2V0IHRvIGluY2x1ZGUgNTAgb3RoZXIgZWxlbWVudHMgKHVuaW50dWl0aXZlIGlmIEkgc3BlY2lmaWNhbGx5IGRlZmluZWQgdGhlIHRhcmdldCBJIHdhbnRlZClcblx0XHQgKiAgLSBXZSBjYW4ndCBqdXN0IGNyZWF0ZSBuZXcgaW5kZXBlbmRlbnQgdHdlZW5zIGJlY2F1c2Ugb3RoZXJ3aXNlLCB3aGF0IGhhcHBlbnMgaWYgdGhlIG9yaWdpbmFsL3BhcmVudCB0d2VlbiBpcyByZXZlcnNlZCBvciBwYXVzZSBvciBkcm9wcGVkIGludG8gYSBUaW1lbGluZUxpdGUgZm9yIHRpZ2h0IGNvbnRyb2w/IFlvdSdkIGV4cGVjdCB0aGF0IHR3ZWVuJ3MgYmVoYXZpb3IgdG8gYWZmZWN0IGFsbCB0aGUgb3RoZXJzLlxuXHRcdCAqICAtIEFuYWx5emluZyBldmVyeSBzdHlsZSBwcm9wZXJ0eSBvZiBldmVyeSBjaGlsZCBiZWZvcmUgYW5kIGFmdGVyIHRoZSB0d2VlbiBpcyBhbiBleHBlbnNpdmUgb3BlcmF0aW9uIHdoZW4gdGhlcmUgYXJlIG1hbnkgY2hpbGRyZW4sIHNvIHRoaXMgYmVoYXZpb3Igc2hvdWxkbid0IGJlIGltcG9zZWQgb24gYWxsIGNsYXNzTmFtZSB0d2VlbnMgYnkgZGVmYXVsdCwgZXNwZWNpYWxseSBzaW5jZSBpdCdzIHByb2JhYmx5IHJhcmUgdGhhdCB0aGlzIGV4dHJhIGZ1bmN0aW9uYWxpdHkgaXMgbmVlZGVkLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBvYmplY3QgdG8gYmUgdHdlZW5lZFxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBEdXJhdGlvbiBpbiBzZWNvbmRzIChvciBmcmFtZXMgZm9yIGZyYW1lcy1iYXNlZCB0d2VlbnMpXG5cdFx0ICogQHBhcmFtIHtPYmplY3R9IE9iamVjdCBjb250YWluaW5nIHRoZSBlbmQgdmFsdWVzLCBsaWtlIHtjbGFzc05hbWU6XCJuZXdDbGFzc1wiLCBlYXNlOkxpbmVhci5lYXNlTm9uZX1cblx0XHQgKiBAcmV0dXJuIHtBcnJheX0gQW4gYXJyYXkgb2YgVHdlZW5MaXRlIGluc3RhbmNlc1xuXHRcdCAqL1xuXHRcdENTU1BsdWdpbi5jYXNjYWRlVG8gPSBmdW5jdGlvbih0YXJnZXQsIGR1cmF0aW9uLCB2YXJzKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSBUd2VlbkxpdGUudG8odGFyZ2V0LCBkdXJhdGlvbiwgdmFycyksXG5cdFx0XHRcdHJlc3VsdHMgPSBbdHdlZW5dLFxuXHRcdFx0XHRiID0gW10sXG5cdFx0XHRcdGUgPSBbXSxcblx0XHRcdFx0dGFyZ2V0cyA9IFtdLFxuXHRcdFx0XHRfcmVzZXJ2ZWRQcm9wcyA9IFR3ZWVuTGl0ZS5faW50ZXJuYWxzLnJlc2VydmVkUHJvcHMsXG5cdFx0XHRcdGksIGRpZnMsIHAsIGZyb207XG5cdFx0XHR0YXJnZXQgPSB0d2Vlbi5fdGFyZ2V0cyB8fCB0d2Vlbi50YXJnZXQ7XG5cdFx0XHRfZ2V0Q2hpbGRTdHlsZXModGFyZ2V0LCBiLCB0YXJnZXRzKTtcblx0XHRcdHR3ZWVuLnJlbmRlcihkdXJhdGlvbiwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRfZ2V0Q2hpbGRTdHlsZXModGFyZ2V0LCBlKTtcblx0XHRcdHR3ZWVuLnJlbmRlcigwLCB0cnVlLCB0cnVlKTtcblx0XHRcdHR3ZWVuLl9lbmFibGVkKHRydWUpO1xuXHRcdFx0aSA9IHRhcmdldHMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdGRpZnMgPSBfY3NzRGlmKHRhcmdldHNbaV0sIGJbaV0sIGVbaV0pO1xuXHRcdFx0XHRpZiAoZGlmcy5maXJzdE1QVCkge1xuXHRcdFx0XHRcdGRpZnMgPSBkaWZzLmRpZnM7XG5cdFx0XHRcdFx0Zm9yIChwIGluIHZhcnMpIHtcblx0XHRcdFx0XHRcdGlmIChfcmVzZXJ2ZWRQcm9wc1twXSkge1xuXHRcdFx0XHRcdFx0XHRkaWZzW3BdID0gdmFyc1twXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZnJvbSA9IHt9O1xuXHRcdFx0XHRcdGZvciAocCBpbiBkaWZzKSB7XG5cdFx0XHRcdFx0XHRmcm9tW3BdID0gYltpXVtwXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmVzdWx0cy5wdXNoKFR3ZWVuTGl0ZS5mcm9tVG8odGFyZ2V0c1tpXSwgZHVyYXRpb24sIGZyb20sIGRpZnMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHRcdFR3ZWVuUGx1Z2luLmFjdGl2YXRlKFtDU1NQbHVnaW5dKTtcblx0XHRyZXR1cm4gQ1NTUGx1Z2luO1xuXG5cdH0sIHRydWUpO1xuXHRcbn0pOyBpZiAoX2dzU2NvcGUuX2dzRGVmaW5lKSB7IF9nc1Njb3BlLl9nc1F1ZXVlLnBvcCgpKCk7IH1cblxuLy9leHBvcnQgdG8gQU1EL1JlcXVpcmVKUyBhbmQgQ29tbW9uSlMvTm9kZSAocHJlY3Vyc29yIHRvIGZ1bGwgbW9kdWxhciBidWlsZCBzeXN0ZW0gY29taW5nIGF0IGEgbGF0ZXIgZGF0ZSlcbihmdW5jdGlvbihuYW1lKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXHR2YXIgZ2V0R2xvYmFsID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIChfZ3NTY29wZS5HcmVlblNvY2tHbG9iYWxzIHx8IF9nc1Njb3BlKVtuYW1lXTtcblx0fTtcblx0aWYgKHR5cGVvZihkZWZpbmUpID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgeyAvL0FNRFxuXHRcdGRlZmluZShbXCJUd2VlbkxpdGVcIl0sIGdldEdsb2JhbCk7XG5cdH0gZWxzZSBpZiAodHlwZW9mKG1vZHVsZSkgIT09IFwidW5kZWZpbmVkXCIgJiYgbW9kdWxlLmV4cG9ydHMpIHsgLy9ub2RlXG5cdFx0cmVxdWlyZShcIi4uL1R3ZWVuTGl0ZS5qc1wiKTtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdldEdsb2JhbCgpO1xuXHR9XG59KFwiQ1NTUGx1Z2luXCIpKTtcbiIsIi8qIVxuICogVkVSU0lPTjogMC4xMC4wXG4gKiBEQVRFOiAyMDE2LTA3LTEyXG4gKiBVUERBVEVTIEFORCBET0NTIEFUOiBodHRwOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIEBsaWNlbnNlIENvcHlyaWdodCAoYykgMjAwOC0yMDE2LCBHcmVlblNvY2suIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaHJvd1Byb3BzUGx1Z2luIGlzIGEgQ2x1YiBHcmVlblNvY2sgbWVtYmVyc2hpcCBiZW5lZml0OyBZb3UgbXVzdCBoYXZlIGEgdmFsaWQgbWVtYmVyc2hpcCB0byB1c2VcbiAqIHRoaXMgY29kZSB3aXRob3V0IHZpb2xhdGluZyB0aGUgdGVybXMgb2YgdXNlLiBWaXNpdCBodHRwOi8vZ3JlZW5zb2NrLmNvbS9jbHViLyB0byBzaWduIHVwIG9yIGdldCBtb3JlIGRldGFpbHMuXG4gKiBUaGlzIHdvcmsgaXMgc3ViamVjdCB0byB0aGUgc29mdHdhcmUgYWdyZWVtZW50IHRoYXQgd2FzIGlzc3VlZCB3aXRoIHlvdXIgbWVtYmVyc2hpcC5cbiAqIFxuICogQGF1dGhvcjogSmFjayBEb3lsZSwgamFja0BncmVlbnNvY2suY29tXG4gKi9cbnZhciBfZ3NTY29wZSA9ICh0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cyAmJiB0eXBlb2YoZ2xvYmFsKSAhPT0gXCJ1bmRlZmluZWRcIikgPyBnbG9iYWwgOiB0aGlzIHx8IHdpbmRvdzsgLy9oZWxwcyBlbnN1cmUgY29tcGF0aWJpbGl0eSB3aXRoIEFNRC9SZXF1aXJlSlMgYW5kIENvbW1vbkpTL05vZGVcbihfZ3NTY29wZS5fZ3NRdWV1ZSB8fCAoX2dzU2NvcGUuX2dzUXVldWUgPSBbXSkpLnB1c2goIGZ1bmN0aW9uKCkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdF9nc1Njb3BlLl9nc0RlZmluZShcInBsdWdpbnMuVGhyb3dQcm9wc1BsdWdpblwiLCBbXCJwbHVnaW5zLlR3ZWVuUGx1Z2luXCIsIFwiVHdlZW5MaXRlXCIsIFwiZWFzaW5nLkVhc2VcIiwgXCJ1dGlscy5WZWxvY2l0eVRyYWNrZXJcIl0sIGZ1bmN0aW9uKFR3ZWVuUGx1Z2luLCBUd2VlbkxpdGUsIEVhc2UsIFZlbG9jaXR5VHJhY2tlcikge1xuXHRcdFxuXHRcdHZhciBUaHJvd1Byb3BzUGx1Z2luID0gZnVuY3Rpb24ocHJvcHMsIHByaW9yaXR5KSB7XG5cdFx0XHRcdFR3ZWVuUGx1Z2luLmNhbGwodGhpcywgXCJ0aHJvd1Byb3BzXCIpO1xuXHRcdFx0XHR0aGlzLl9vdmVyd3JpdGVQcm9wcy5sZW5ndGggPSAwO1xuXHRcdFx0fSxcblx0XHRcdF9tYXggPSA5OTk5OTk5OTk5OTk5OTksXG5cdFx0XHRfbWluID0gMC4wMDAwMDAwMDAxLFxuXHRcdFx0X2dsb2JhbHMgPSBfZ3NTY29wZS5fZ3NEZWZpbmUuZ2xvYmFscyxcblx0XHRcdF9yZWNvcmRFbmRNb2RlID0gZmFsc2UsLy9pbiBhIHR5cGljYWwgdGhyb3dQcm9wcyBjc3MgdHdlZW4gdGhhdCBoYXMgYW4gXCJlbmRcIiBkZWZpbmVkIGFzIGEgZnVuY3Rpb24sIGl0IGdyYWJzIHRoYXQgdmFsdWUgaW5pdGlhbGx5IHdoZW4gdGhlIHR3ZWVuIGlzIHJlbmRlcmVkLCB0aGVuIGFnYWluIHdoZW4gd2UgY2FsY3VsYXRlIHRoZSBuZWNlc3NhcnkgZHVyYXRpb24sIGFuZCB0aGVuIGEgM3JkIHRpbWUgYWZ0ZXIgd2UgaW52YWxpZGF0ZSgpIHRoZSB0d2Vlbiwgc28gd2UgdG9nZ2xlIF9yZWNvcmRFbmRNb2RlIHRvIHRydWUgd2hlbiB3ZSdyZSBhYm91dCB0byBiZWdpbiBzdWNoIGEgdHdlZW4gd2hpY2ggdGVsbHMgdGhlIGVuZ2luZSB0byBncmFiIHRoZSBlbmQgdmFsdWUocykgb25jZSBhbmQgcmVjb3JkIHRoZW0gYXMgXCJtYXhcIiBhbmQgXCJtaW5cIiBvbiB0aGUgdGhyb3dQcm9wcyBvYmplY3QsIHRodXMgd2UgY2FuIHNraXAgdGhvc2UgZXh0cmEgY2FsbHMuIFRoZW4gd2Ugc2V0IGl0IGJhY2sgdG8gZmFsc2Ugd2hlbiB3ZSdyZSBkb25lIHdpdGggb3VyIGZhbmN5IGluaXRpYWxpemF0aW9uIHJvdXRpbmUuXG5cdFx0XHRfdHJhbnNmb3JtcyA9IHt4OjEseToxLHo6MixzY2FsZToxLHNjYWxlWDoxLHNjYWxlWToxLHJvdGF0aW9uOjEscm90YXRpb25aOjEscm90YXRpb25YOjIscm90YXRpb25ZOjIsc2tld1g6MSxza2V3WToxLHhQZXJjZW50OjEseVBlcmNlbnQ6MX0sXG5cdFx0XHRfZ2V0Q2xvc2VzdCA9IGZ1bmN0aW9uKG4sIHZhbHVlcywgbWF4LCBtaW4pIHtcblx0XHRcdFx0dmFyIGkgPSB2YWx1ZXMubGVuZ3RoLFxuXHRcdFx0XHRcdGNsb3Nlc3QgPSAwLFxuXHRcdFx0XHRcdGFic0RpZiA9IF9tYXgsXG5cdFx0XHRcdFx0dmFsLCBkaWY7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdHZhbCA9IHZhbHVlc1tpXTtcblx0XHRcdFx0XHRkaWYgPSB2YWwgLSBuO1xuXHRcdFx0XHRcdGlmIChkaWYgPCAwKSB7XG5cdFx0XHRcdFx0XHRkaWYgPSAtZGlmO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoZGlmIDwgYWJzRGlmICYmIHZhbCA+PSBtaW4gJiYgdmFsIDw9IG1heCkge1xuXHRcdFx0XHRcdFx0Y2xvc2VzdCA9IGk7XG5cdFx0XHRcdFx0XHRhYnNEaWYgPSBkaWY7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXNbY2xvc2VzdF07XG5cdFx0XHR9LFxuXHRcdFx0X3BhcnNlRW5kID0gZnVuY3Rpb24oY3VyUHJvcCwgZW5kLCBtYXgsIG1pbikge1xuXHRcdFx0XHRpZiAoY3VyUHJvcC5lbmQgPT09IFwiYXV0b1wiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGN1clByb3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWF4ID0gaXNOYU4obWF4KSA/IF9tYXggOiBtYXg7XG5cdFx0XHRcdG1pbiA9IGlzTmFOKG1pbikgPyAtX21heCA6IG1pbjtcblx0XHRcdFx0dmFyIGFkanVzdGVkRW5kID0gKHR5cGVvZihjdXJQcm9wLmVuZCkgPT09IFwiZnVuY3Rpb25cIikgPyBjdXJQcm9wLmVuZChlbmQpIDogKGN1clByb3AuZW5kIGluc3RhbmNlb2YgQXJyYXkpID8gX2dldENsb3Nlc3QoZW5kLCBjdXJQcm9wLmVuZCwgbWF4LCBtaW4pIDogTnVtYmVyKGN1clByb3AuZW5kKTtcblx0XHRcdFx0aWYgKGFkanVzdGVkRW5kID4gbWF4KSB7XG5cdFx0XHRcdFx0YWRqdXN0ZWRFbmQgPSBtYXg7XG5cdFx0XHRcdH0gZWxzZSBpZiAoYWRqdXN0ZWRFbmQgPCBtaW4pIHtcblx0XHRcdFx0XHRhZGp1c3RlZEVuZCA9IG1pbjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4ge21heDphZGp1c3RlZEVuZCwgbWluOmFkanVzdGVkRW5kLCB1bml0RmFjdG9yOmN1clByb3AudW5pdEZhY3Rvcn07XG5cdFx0XHR9LFxuXHRcdFx0X2V4dGVuZCA9IGZ1bmN0aW9uKGRlY29yYXRlZSwgZXh0cmFzLCBleGNsdWRlKSB7XG5cdFx0XHRcdGZvciAodmFyIHAgaW4gZXh0cmFzKSB7XG5cdFx0XHRcdFx0aWYgKGRlY29yYXRlZVtwXSA9PT0gdW5kZWZpbmVkICYmIHAgIT09IGV4Y2x1ZGUpIHtcblx0XHRcdFx0XHRcdGRlY29yYXRlZVtwXSA9IGV4dHJhc1twXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGRlY29yYXRlZTtcblx0XHRcdH0sXG5cdFx0XHRfY2FsY3VsYXRlQ2hhbmdlID0gVGhyb3dQcm9wc1BsdWdpbi5jYWxjdWxhdGVDaGFuZ2UgPSBmdW5jdGlvbih2ZWxvY2l0eSwgZWFzZSwgZHVyYXRpb24sIGNoZWNrcG9pbnQpIHtcblx0XHRcdFx0aWYgKGNoZWNrcG9pbnQgPT0gbnVsbCkge1xuXHRcdFx0XHRcdGNoZWNrcG9pbnQgPSAwLjA1O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBlID0gKGVhc2UgaW5zdGFuY2VvZiBFYXNlKSA/IGVhc2UgOiAoIWVhc2UpID8gVHdlZW5MaXRlLmRlZmF1bHRFYXNlIDogbmV3IEVhc2UoZWFzZSk7XG5cdFx0XHRcdHJldHVybiAoZHVyYXRpb24gKiBjaGVja3BvaW50ICogdmVsb2NpdHkpIC8gZS5nZXRSYXRpbyhjaGVja3BvaW50KTtcblx0XHRcdH0sXG5cdFx0XHRfY2FsY3VsYXRlRHVyYXRpb24gPSBUaHJvd1Byb3BzUGx1Z2luLmNhbGN1bGF0ZUR1cmF0aW9uID0gZnVuY3Rpb24oc3RhcnQsIGVuZCwgdmVsb2NpdHksIGVhc2UsIGNoZWNrcG9pbnQpIHtcblx0XHRcdFx0Y2hlY2twb2ludCA9IGNoZWNrcG9pbnQgfHwgMC4wNTtcblx0XHRcdFx0dmFyIGUgPSAoZWFzZSBpbnN0YW5jZW9mIEVhc2UpID8gZWFzZSA6ICghZWFzZSkgPyBUd2VlbkxpdGUuZGVmYXVsdEVhc2UgOiBuZXcgRWFzZShlYXNlKTtcblx0XHRcdFx0cmV0dXJuIE1hdGguYWJzKCAoZW5kIC0gc3RhcnQpICogZS5nZXRSYXRpbyhjaGVja3BvaW50KSAvIHZlbG9jaXR5IC8gY2hlY2twb2ludCApO1xuXHRcdFx0fSxcblx0XHRcdF9jYWxjdWxhdGVUd2VlbkR1cmF0aW9uID0gVGhyb3dQcm9wc1BsdWdpbi5jYWxjdWxhdGVUd2VlbkR1cmF0aW9uID0gZnVuY3Rpb24odGFyZ2V0LCB2YXJzLCBtYXhEdXJhdGlvbiwgbWluRHVyYXRpb24sIG92ZXJzaG9vdFRvbGVyYW5jZSwgcmVjb3JkRW5kKSB7XG5cdFx0XHRcdGlmICh0eXBlb2YodGFyZ2V0KSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdHRhcmdldCA9IFR3ZWVuTGl0ZS5zZWxlY3Rvcih0YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghdGFyZ2V0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG1heER1cmF0aW9uID09IG51bGwpIHtcblx0XHRcdFx0XHRtYXhEdXJhdGlvbiA9IDEwO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChtaW5EdXJhdGlvbiA9PSBudWxsKSB7XG5cdFx0XHRcdFx0bWluRHVyYXRpb24gPSAwLjI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG92ZXJzaG9vdFRvbGVyYW5jZSA9PSBudWxsKSB7XG5cdFx0XHRcdFx0b3ZlcnNob290VG9sZXJhbmNlID0gMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGFyZ2V0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdHRhcmdldCA9IHRhcmdldFswXSB8fCB0YXJnZXQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGR1cmF0aW9uID0gMCxcblx0XHRcdFx0XHRjbGlwcGVkRHVyYXRpb24gPSA5OTk5OTk5OTk5LFxuXHRcdFx0XHRcdHRocm93UHJvcHNWYXJzID0gdmFycy50aHJvd1Byb3BzIHx8IHZhcnMsXG5cdFx0XHRcdFx0ZWFzZSA9ICh2YXJzLmVhc2UgaW5zdGFuY2VvZiBFYXNlKSA/IHZhcnMuZWFzZSA6ICghdmFycy5lYXNlKSA/IFR3ZWVuTGl0ZS5kZWZhdWx0RWFzZSA6IG5ldyBFYXNlKHZhcnMuZWFzZSksXG5cdFx0XHRcdFx0Y2hlY2twb2ludCA9IGlzTmFOKHRocm93UHJvcHNWYXJzLmNoZWNrcG9pbnQpID8gMC4wNSA6IE51bWJlcih0aHJvd1Byb3BzVmFycy5jaGVja3BvaW50KSxcblx0XHRcdFx0XHRyZXNpc3RhbmNlID0gaXNOYU4odGhyb3dQcm9wc1ZhcnMucmVzaXN0YW5jZSkgPyBUaHJvd1Byb3BzUGx1Z2luLmRlZmF1bHRSZXNpc3RhbmNlIDogTnVtYmVyKHRocm93UHJvcHNWYXJzLnJlc2lzdGFuY2UpLFxuXHRcdFx0XHRcdHAsIGN1clByb3AsIGN1ckR1cmF0aW9uLCBjdXJWZWxvY2l0eSwgY3VyUmVzaXN0YW5jZSwgY3VyVmFsLCBlbmQsIGN1ckNsaXBwZWREdXJhdGlvbiwgdHJhY2tlciwgdW5pdEZhY3RvcjtcblxuXHRcdFx0XHRmb3IgKHAgaW4gdGhyb3dQcm9wc1ZhcnMpIHtcblxuXHRcdFx0XHRcdGlmIChwICE9PSBcInJlc2lzdGFuY2VcIiAmJiBwICE9PSBcImNoZWNrcG9pbnRcIiAmJiBwICE9PSBcInByZXZlbnRPdmVyc2hvb3RcIikge1xuXHRcdFx0XHRcdFx0Y3VyUHJvcCA9IHRocm93UHJvcHNWYXJzW3BdO1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZihjdXJQcm9wKSAhPT0gXCJvYmplY3RcIikge1xuXHRcdFx0XHRcdFx0XHR0cmFja2VyID0gdHJhY2tlciB8fCBWZWxvY2l0eVRyYWNrZXIuZ2V0QnlUYXJnZXQodGFyZ2V0KTtcblx0XHRcdFx0XHRcdFx0aWYgKHRyYWNrZXIgJiYgdHJhY2tlci5pc1RyYWNraW5nUHJvcChwKSkge1xuXHRcdFx0XHRcdFx0XHRcdGN1clByb3AgPSAodHlwZW9mKGN1clByb3ApID09PSBcIm51bWJlclwiKSA/IHt2ZWxvY2l0eTpjdXJQcm9wfSA6IHt2ZWxvY2l0eTp0cmFja2VyLmdldFZlbG9jaXR5KHApfTsgLy9pZiB3ZSdyZSB0cmFja2luZyB0aGlzIHByb3BlcnR5LCB3ZSBzaG91bGQgdXNlIHRoZSB0cmFja2luZyB2ZWxvY2l0eSBhbmQgdGhlbiB1c2UgdGhlIG51bWVyaWMgdmFsdWUgdGhhdCB3YXMgcGFzc2VkIGluIGFzIHRoZSBtaW4gYW5kIG1heCBzbyB0aGF0IGl0IHR3ZWVucyBleGFjdGx5IHRoZXJlLlxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGN1clZlbG9jaXR5ID0gTnVtYmVyKGN1clByb3ApIHx8IDA7XG5cdFx0XHRcdFx0XHRcdFx0Y3VyRHVyYXRpb24gPSAoY3VyVmVsb2NpdHkgKiByZXNpc3RhbmNlID4gMCkgPyBjdXJWZWxvY2l0eSAvIHJlc2lzdGFuY2UgOiBjdXJWZWxvY2l0eSAvIC1yZXNpc3RhbmNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mKGN1clByb3ApID09PSBcIm9iamVjdFwiKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChjdXJQcm9wLnZlbG9jaXR5ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mKGN1clByb3AudmVsb2NpdHkpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y3VyVmVsb2NpdHkgPSBOdW1iZXIoY3VyUHJvcC52ZWxvY2l0eSkgfHwgMDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0cmFja2VyID0gdHJhY2tlciB8fCBWZWxvY2l0eVRyYWNrZXIuZ2V0QnlUYXJnZXQodGFyZ2V0KTtcblx0XHRcdFx0XHRcdFx0XHRjdXJWZWxvY2l0eSA9ICAodHJhY2tlciAmJiB0cmFja2VyLmlzVHJhY2tpbmdQcm9wKHApKSA/IHRyYWNrZXIuZ2V0VmVsb2NpdHkocCkgOiAwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGN1clJlc2lzdGFuY2UgPSBpc05hTihjdXJQcm9wLnJlc2lzdGFuY2UpID8gcmVzaXN0YW5jZSA6IE51bWJlcihjdXJQcm9wLnJlc2lzdGFuY2UpO1xuXHRcdFx0XHRcdFx0XHRjdXJEdXJhdGlvbiA9IChjdXJWZWxvY2l0eSAqIGN1clJlc2lzdGFuY2UgPiAwKSA/IGN1clZlbG9jaXR5IC8gY3VyUmVzaXN0YW5jZSA6IGN1clZlbG9jaXR5IC8gLWN1clJlc2lzdGFuY2U7XG5cdFx0XHRcdFx0XHRcdGN1clZhbCA9ICh0eXBlb2YodGFyZ2V0W3BdKSA9PT0gXCJmdW5jdGlvblwiKSA/IHRhcmdldFsgKChwLmluZGV4T2YoXCJzZXRcIikgfHwgdHlwZW9mKHRhcmdldFtcImdldFwiICsgcC5zdWJzdHIoMyldKSAhPT0gXCJmdW5jdGlvblwiKSA/IHAgOiBcImdldFwiICsgcC5zdWJzdHIoMykpIF0oKSA6IHRhcmdldFtwXSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRlbmQgPSBjdXJWYWwgKyBfY2FsY3VsYXRlQ2hhbmdlKGN1clZlbG9jaXR5LCBlYXNlLCBjdXJEdXJhdGlvbiwgY2hlY2twb2ludCk7XG5cdFx0XHRcdFx0XHRcdGlmIChjdXJQcm9wLmVuZCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y3VyUHJvcCA9IF9wYXJzZUVuZChjdXJQcm9wLCBlbmQsIGN1clByb3AubWF4LCBjdXJQcm9wLm1pbik7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHJlY29yZEVuZCB8fCBfcmVjb3JkRW5kTW9kZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhyb3dQcm9wc1ZhcnNbcF0gPSBfZXh0ZW5kKGN1clByb3AsIHRocm93UHJvcHNWYXJzW3BdLCBcImVuZFwiKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKGN1clByb3AubWF4ICE9PSB1bmRlZmluZWQgJiYgZW5kID4gTnVtYmVyKGN1clByb3AubWF4KSArIF9taW4pIHtcblx0XHRcdFx0XHRcdFx0XHR1bml0RmFjdG9yID0gY3VyUHJvcC51bml0RmFjdG9yIHx8IFRocm93UHJvcHNQbHVnaW4uZGVmYXVsdFVuaXRGYWN0b3JzW3BdIHx8IDE7IC8vc29tZSB2YWx1ZXMgYXJlIG1lYXN1cmVkIGluIHNwZWNpYWwgdW5pdHMgbGlrZSByYWRpYW5zIGluIHdoaWNoIGNhc2Ugb3VyIHRocmVzaG9sZHMgbmVlZCB0byBiZSBhZGp1c3RlZCBhY2NvcmRpbmdseS5cblx0XHRcdFx0XHRcdFx0XHQvL2lmIHRoZSB2YWx1ZSBpcyBhbHJlYWR5IGV4Y2VlZGluZyB0aGUgbWF4IG9yIHRoZSB2ZWxvY2l0eSBpcyB0b28gbG93LCB0aGUgZHVyYXRpb24gY2FuIGVuZCB1cCBiZWluZyB1bmNvbWZvcnRhYmx5IGxvbmcgYnV0IGluIG1vc3Qgc2l0dWF0aW9ucywgdXNlcnMgd2FudCB0aGUgc25hcHBpbmcgdG8gb2NjdXIgcmVsYXRpdmVseSBxdWlja2x5ICgwLjc1IHNlY29uZHMpLCBzbyB3ZSBpbXBsZW1lbnQgYSBjYXAgaGVyZSB0byBtYWtlIHRoaW5ncyBtb3JlIGludHVpdGl2ZS4gSWYgdGhlIG1heCBhbmQgbWluIG1hdGNoLCBpdCBtZWFucyB3ZSdyZSBhbmltYXRpbmcgdG8gYSBwYXJ0aWN1bGFyIHZhbHVlIGFuZCB3ZSBkb24ndCB3YW50IHRvIHNob3J0ZW4gdGhlIHRpbWUgdW5sZXNzIHRoZSB2ZWxvY2l0eSBpcyByZWFsbHkgc2xvdy4gRXhhbXBsZTogYSByb3RhdGlvbiB3aGVyZSB0aGUgc3RhcnQgYW5kIG5hdHVyYWwgZW5kIHZhbHVlIGFyZSBsZXNzIHRoYW4gdGhlIHNuYXBwaW5nIHNwb3QsIGJ1dCB0aGUgbmF0dXJhbCBlbmQgaXMgcHJldHR5IGNsb3NlIHRvIHRoZSBzbmFwLlxuXHRcdFx0XHRcdFx0XHRcdGN1ckNsaXBwZWREdXJhdGlvbiA9ICgoY3VyVmFsID4gY3VyUHJvcC5tYXggJiYgY3VyUHJvcC5taW4gIT09IGN1clByb3AubWF4KSB8fCAoY3VyVmVsb2NpdHkgKiB1bml0RmFjdG9yID4gLTE1ICYmIGN1clZlbG9jaXR5ICogdW5pdEZhY3RvciA8IDQ1KSkgPyAobWluRHVyYXRpb24gKyAobWF4RHVyYXRpb24gLSBtaW5EdXJhdGlvbikgKiAwLjEpIDogX2NhbGN1bGF0ZUR1cmF0aW9uKGN1clZhbCwgY3VyUHJvcC5tYXgsIGN1clZlbG9jaXR5LCBlYXNlLCBjaGVja3BvaW50KTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY3VyQ2xpcHBlZER1cmF0aW9uICsgb3ZlcnNob290VG9sZXJhbmNlIDwgY2xpcHBlZER1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjbGlwcGVkRHVyYXRpb24gPSBjdXJDbGlwcGVkRHVyYXRpb24gKyBvdmVyc2hvb3RUb2xlcmFuY2U7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoY3VyUHJvcC5taW4gIT09IHVuZGVmaW5lZCAmJiBlbmQgPCBOdW1iZXIoY3VyUHJvcC5taW4pIC0gX21pbikge1xuXHRcdFx0XHRcdFx0XHRcdHVuaXRGYWN0b3IgPSBjdXJQcm9wLnVuaXRGYWN0b3IgfHwgVGhyb3dQcm9wc1BsdWdpbi5kZWZhdWx0VW5pdEZhY3RvcnNbcF0gfHwgMTsgLy9zb21lIHZhbHVlcyBhcmUgbWVhc3VyZWQgaW4gc3BlY2lhbCB1bml0cyBsaWtlIHJhZGlhbnMgaW4gd2hpY2ggY2FzZSBvdXIgdGhyZXNob2xkcyBuZWVkIHRvIGJlIGFkanVzdGVkIGFjY29yZGluZ2x5LlxuXHRcdFx0XHRcdFx0XHRcdC8vaWYgdGhlIHZhbHVlIGlzIGFscmVhZHkgZXhjZWVkaW5nIHRoZSBtaW4gb3IgaWYgdGhlIHZlbG9jaXR5IGlzIHRvbyBsb3csIHRoZSBkdXJhdGlvbiBjYW4gZW5kIHVwIGJlaW5nIHVuY29tZm9ydGFibHkgbG9uZyBidXQgaW4gbW9zdCBzaXR1YXRpb25zLCB1c2VycyB3YW50IHRoZSBzbmFwcGluZyB0byBvY2N1ciByZWxhdGl2ZWx5IHF1aWNrbHkgKDAuNzUgc2Vjb25kcyksIHNvIHdlIGltcGxlbWVudCBhIGNhcCBoZXJlIHRvIG1ha2UgdGhpbmdzIG1vcmUgaW50dWl0aXZlLlxuXHRcdFx0XHRcdFx0XHRcdGN1ckNsaXBwZWREdXJhdGlvbiA9ICgoY3VyVmFsIDwgY3VyUHJvcC5taW4gJiYgY3VyUHJvcC5taW4gIT09IGN1clByb3AubWF4KSB8fCAoY3VyVmVsb2NpdHkgKiB1bml0RmFjdG9yID4gLTQ1ICYmIGN1clZlbG9jaXR5ICogdW5pdEZhY3RvciA8IDE1KSkgPyAobWluRHVyYXRpb24gKyAobWF4RHVyYXRpb24gLSBtaW5EdXJhdGlvbikgKiAwLjEpIDogX2NhbGN1bGF0ZUR1cmF0aW9uKGN1clZhbCwgY3VyUHJvcC5taW4sIGN1clZlbG9jaXR5LCBlYXNlLCBjaGVja3BvaW50KTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoY3VyQ2xpcHBlZER1cmF0aW9uICsgb3ZlcnNob290VG9sZXJhbmNlIDwgY2xpcHBlZER1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjbGlwcGVkRHVyYXRpb24gPSBjdXJDbGlwcGVkRHVyYXRpb24gKyBvdmVyc2hvb3RUb2xlcmFuY2U7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKGN1ckNsaXBwZWREdXJhdGlvbiA+IGR1cmF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZHVyYXRpb24gPSBjdXJDbGlwcGVkRHVyYXRpb247XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKGN1ckR1cmF0aW9uID4gZHVyYXRpb24pIHtcblx0XHRcdFx0XHRcdFx0ZHVyYXRpb24gPSBjdXJEdXJhdGlvbjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPiBjbGlwcGVkRHVyYXRpb24pIHtcblx0XHRcdFx0XHRkdXJhdGlvbiA9IGNsaXBwZWREdXJhdGlvbjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZHVyYXRpb24gPiBtYXhEdXJhdGlvbikge1xuXHRcdFx0XHRcdHJldHVybiBtYXhEdXJhdGlvbjtcblx0XHRcdFx0fSBlbHNlIGlmIChkdXJhdGlvbiA8IG1pbkR1cmF0aW9uKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1pbkR1cmF0aW9uO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBkdXJhdGlvbjtcblx0XHRcdH0sXG5cdFx0XHRwID0gVGhyb3dQcm9wc1BsdWdpbi5wcm90b3R5cGUgPSBuZXcgVHdlZW5QbHVnaW4oXCJ0aHJvd1Byb3BzXCIpLFxuXHRcdFx0X2Nzc1Byb3h5LCBfY3NzVmFycywgX2xhc3QsIF9sYXN0VmFsdWU7IC8vdGhlc2Ugc2VydmUgYXMgYSBjYWNoZSBvZiBzb3J0cywgcmVjb3JkaW5nIHRoZSBsYXN0IGNzcy1yZWxhdGVkIHByb3h5IGFuZCB0aGUgdGhyb3dQcm9wcyB2YXJzIHRoYXQgZ2V0IGNhbGN1bGF0ZWQgaW4gdGhlIF9jc3NSZWdpc3RlcigpIG1ldGhvZC4gVGhpcyBhbGxvd3MgdXMgdG8gZ3JhYiB0aGVtIGluIHRoZSBUaHJvd1Byb3BzUGx1Z2luLnRvKCkgZnVuY3Rpb24gYW5kIGNhbGN1bGF0ZSB0aGUgZHVyYXRpb24uIE9mIGNvdXJzZSB3ZSBjb3VsZCBoYXZlIHN0cnVjdHVyZWQgdGhpbmdzIGluIGEgbW9yZSBcImNsZWFuXCIgZmFzaGlvbiwgYnV0IHBlcmZvcm1hbmNlIGlzIG9mIHBhcmFtb3VudCBpbXBvcnRhbmNlLlxuXHRcdFx0XG5cblxuXHRcdHAuY29uc3RydWN0b3IgPSBUaHJvd1Byb3BzUGx1Z2luO1xuXHRcdFRocm93UHJvcHNQbHVnaW4udmVyc2lvbiA9IFwiMC4xMC4wXCI7XG5cdFx0VGhyb3dQcm9wc1BsdWdpbi5BUEkgPSAyO1xuXHRcdFRocm93UHJvcHNQbHVnaW4uX2F1dG9DU1MgPSB0cnVlOyAvL2luZGljYXRlcyB0aGF0IHRoaXMgcGx1Z2luIGNhbiBiZSBpbnNlcnRlZCBpbnRvIHRoZSBcImNzc1wiIG9iamVjdCB1c2luZyB0aGUgYXV0b0NTUyBmZWF0dXJlIG9mIFR3ZWVuTGl0ZVxuXHRcdFRocm93UHJvcHNQbHVnaW4uZGVmYXVsdFJlc2lzdGFuY2UgPSAxMDA7XG5cdFx0VGhyb3dQcm9wc1BsdWdpbi5kZWZhdWx0VW5pdEZhY3RvcnMgPSB7dGltZToxMDAwLCB0b3RhbFRpbWU6MTAwMH07IC8vc2V0dGluZyB0aGUgdW5pdEZhY3RvciB0byBhIGhpZ2hlciB2YWx1ZSAoZGVmYXVsdCBpcyAxKSByZWR1Y2VzIHRoZSBjaGFuY2Ugb2YgdGhlIGF1dG8tYWNjZWxlcmF0aW5nIGJlaGF2aW9yIGtpY2tpbmcgaW4gd2hlbiBkZXRlcm1pbmluZyBkdXJhdGlvbnMgd2hlbiB0aGUgaW5pdGlhbCB2ZWxvY2l0eSBpcyBhZGVxdWF0ZWx5IGxvdyAtIGltYWdpbmUgZHJhZ2dpbmcgc29tZXRoaW5nIHBhc3QgYSBib3VuZGFyeSBhbmQgdGhlbiBsZXR0aW5nIGdvIC0gc25hcHBpbmcgYmFjayByZWxhdGl2ZWx5IHF1aWNrbHkgc2hvdWxkIGJlIHByaW9yaXRpemVkIG92ZXIgbWF0Y2hpbmcgdGhlIGluaXRpYWwgdmVsb2NpdHkgKGF0IGxlYXN0IHRoYXQncyB0aGUgYmVoYXZpb3IgbW9zdCBwZW9wbGUgY29uc2lkZXIgaW50dWl0aXZlKS4gQnV0IGluIHNvbWUgc2l0dWF0aW9ucyB3aGVuIHRoZSB1bml0cyBhcmUgdmVyeSBsb3cgKGxpa2UgXCJ0aW1lXCIgb2YgYSB0aW1lbGluZSBvciByb3RhdGlvbiB3aGVuIHVzaW5nIHJhZGlhbnMpLCBpdCBjYW4ga2ljayBpbiB0b28gZnJlcXVlbnRseSBzbyB0aGlzIGFsbG93cyB0d2Vha2luZy5cblxuXHRcdFRocm93UHJvcHNQbHVnaW4udHJhY2sgPSBmdW5jdGlvbih0YXJnZXQsIHByb3BzLCB0eXBlcykge1xuXHRcdFx0cmV0dXJuIFZlbG9jaXR5VHJhY2tlci50cmFjayh0YXJnZXQsIHByb3BzLCB0eXBlcyk7XG5cdFx0fTtcblxuXHRcdFRocm93UHJvcHNQbHVnaW4udW50cmFjayA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcHMpIHtcblx0XHRcdFZlbG9jaXR5VHJhY2tlci51bnRyYWNrKHRhcmdldCwgcHJvcHMpO1xuXHRcdH07XG5cblx0XHRUaHJvd1Byb3BzUGx1Z2luLmlzVHJhY2tpbmcgPSBmdW5jdGlvbih0YXJnZXQsIHByb3ApIHtcblx0XHRcdHJldHVybiBWZWxvY2l0eVRyYWNrZXIuaXNUcmFja2luZyh0YXJnZXQsIHByb3ApO1xuXHRcdH07XG5cblx0XHRUaHJvd1Byb3BzUGx1Z2luLmdldFZlbG9jaXR5ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wKSB7XG5cdFx0XHR2YXIgdnQgPSBWZWxvY2l0eVRyYWNrZXIuZ2V0QnlUYXJnZXQodGFyZ2V0KTtcblx0XHRcdHJldHVybiB2dCA/IHZ0LmdldFZlbG9jaXR5KHByb3ApIDogTmFOO1xuXHRcdH07XG5cblx0XHRUaHJvd1Byb3BzUGx1Z2luLl9jc3NSZWdpc3RlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIENTU1BsdWdpbiA9IF9nbG9iYWxzLmNvbS5ncmVlbnNvY2sucGx1Z2lucy5DU1NQbHVnaW47XG5cdFx0XHRpZiAoIUNTU1BsdWdpbikge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHR2YXIgX2ludGVybmFscyA9IENTU1BsdWdpbi5faW50ZXJuYWxzLFxuXHRcdFx0XHRfcGFyc2VUb1Byb3h5ID0gX2ludGVybmFscy5fcGFyc2VUb1Byb3h5LFxuXHRcdFx0XHRfc2V0UGx1Z2luUmF0aW8gPSBfaW50ZXJuYWxzLl9zZXRQbHVnaW5SYXRpbyxcblx0XHRcdFx0Q1NTUHJvcFR3ZWVuID0gX2ludGVybmFscy5DU1NQcm9wVHdlZW47XG5cdFx0XHRfaW50ZXJuYWxzLl9yZWdpc3RlckNvbXBsZXhTcGVjaWFsUHJvcChcInRocm93UHJvcHNcIiwge3BhcnNlcjpmdW5jdGlvbih0LCBlLCBwcm9wLCBjc3NwLCBwdCwgcGx1Z2luKSB7XG5cdFx0XHRcdHBsdWdpbiA9IG5ldyBUaHJvd1Byb3BzUGx1Z2luKCk7XG5cdFx0XHRcdHZhciB2ZWxvY2l0aWVzID0ge30sXG5cdFx0XHRcdFx0bWluID0ge30sXG5cdFx0XHRcdFx0bWF4ID0ge30sXG5cdFx0XHRcdFx0ZW5kID0ge30sXG5cdFx0XHRcdFx0cmVzID0ge30sXG5cdFx0XHRcdFx0cHJldmVudE92ZXJzaG9vdCA9IHt9LFxuXHRcdFx0XHRcdGhhc1Jlc2lzdGFuY2UsIHZhbCwgcCwgZGF0YSwgdHJhY2tlcjtcblx0XHRcdFx0X2Nzc1ZhcnMgPSB7fTtcblx0XHRcdFx0Zm9yIChwIGluIGUpIHtcblx0XHRcdFx0XHRpZiAocCAhPT0gXCJyZXNpc3RhbmNlXCIgJiYgcCAhPT0gXCJwcmV2ZW50T3ZlcnNob290XCIpIHtcblx0XHRcdFx0XHRcdHZhbCA9IGVbcF07XG5cdFx0XHRcdFx0XHRpZiAodHlwZW9mKHZhbCkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHZhbC52ZWxvY2l0eSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZih2YWwudmVsb2NpdHkpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmVsb2NpdGllc1twXSA9IE51bWJlcih2YWwudmVsb2NpdHkpIHx8IDA7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dHJhY2tlciA9IHRyYWNrZXIgfHwgVmVsb2NpdHlUcmFja2VyLmdldEJ5VGFyZ2V0KHQpO1xuXHRcdFx0XHRcdFx0XHRcdHZlbG9jaXRpZXNbcF0gPSAodHJhY2tlciAmJiB0cmFja2VyLmlzVHJhY2tpbmdQcm9wKHApKSA/IHRyYWNrZXIuZ2V0VmVsb2NpdHkocCkgOiAwOyAvL3JvdGF0aW9uYWwgdmFsdWVzIGFyZSBhY3R1YWxseSBjb252ZXJ0ZWQgdG8gcmFkaWFucyBpbiBDU1NQbHVnaW4sIGJ1dCBvdXIgdHJhY2tpbmcgdmVsb2NpdHkgaXMgaW4gcmFkaWFucyBhbHJlYWR5LCBzbyBtYWtlIGl0IGludG8gZGVncmVlcyB0byBhdm9pZCBhIGZ1bmt5IGNvbnZlcnNpb25cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAodmFsLmVuZCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZW5kW3BdID0gdmFsLmVuZDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAodmFsLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWluW3BdID0gdmFsLm1pbjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAodmFsLm1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWF4W3BdID0gdmFsLm1heDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAodmFsLnByZXZlbnRPdmVyc2hvb3QpIHtcblx0XHRcdFx0XHRcdFx0XHRwcmV2ZW50T3ZlcnNob290W3BdID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAodmFsLnJlc2lzdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRcdGhhc1Jlc2lzdGFuY2UgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdHJlc1twXSA9IHZhbC5yZXNpc3RhbmNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZih2YWwpID09PSBcIm51bWJlclwiKSB7XG5cdFx0XHRcdFx0XHRcdHZlbG9jaXRpZXNbcF0gPSB2YWw7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHR0cmFja2VyID0gdHJhY2tlciB8fCBWZWxvY2l0eVRyYWNrZXIuZ2V0QnlUYXJnZXQodCk7XG5cdFx0XHRcdFx0XHRcdGlmICh0cmFja2VyICYmIHRyYWNrZXIuaXNUcmFja2luZ1Byb3AocCkpIHtcblx0XHRcdFx0XHRcdFx0XHR2ZWxvY2l0aWVzW3BdID0gdHJhY2tlci5nZXRWZWxvY2l0eShwKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR2ZWxvY2l0aWVzW3BdID0gdmFsIHx8IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChfdHJhbnNmb3Jtc1twXSkge1xuXHRcdFx0XHRcdFx0XHRjc3NwLl9lbmFibGVUcmFuc2Zvcm1zKChfdHJhbnNmb3Jtc1twXSA9PT0gMikpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhID0gX3BhcnNlVG9Qcm94eSh0LCB2ZWxvY2l0aWVzLCBjc3NwLCBwdCwgcGx1Z2luKTtcblx0XHRcdFx0X2Nzc1Byb3h5ID0gZGF0YS5wcm94eTtcblx0XHRcdFx0dmVsb2NpdGllcyA9IGRhdGEuZW5kO1xuXHRcdFx0XHRmb3IgKHAgaW4gX2Nzc1Byb3h5KSB7XG5cdFx0XHRcdFx0X2Nzc1ZhcnNbcF0gPSB7dmVsb2NpdHk6dmVsb2NpdGllc1twXSwgbWluOm1pbltwXSwgbWF4Om1heFtwXSwgZW5kOmVuZFtwXSwgcmVzaXN0YW5jZTpyZXNbcF0sIHByZXZlbnRPdmVyc2hvb3Q6cHJldmVudE92ZXJzaG9vdFtwXX07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGUucmVzaXN0YW5jZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0X2Nzc1ZhcnMucmVzaXN0YW5jZSA9IGUucmVzaXN0YW5jZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZS5wcmV2ZW50T3ZlcnNob290KSB7XG5cdFx0XHRcdFx0X2Nzc1ZhcnMucHJldmVudE92ZXJzaG9vdCA9IHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0cHQgPSBuZXcgQ1NTUHJvcFR3ZWVuKHQsIFwidGhyb3dQcm9wc1wiLCAwLCAwLCBkYXRhLnB0LCAyKTtcblx0XHRcdFx0Y3NzcC5fb3ZlcndyaXRlUHJvcHMucG9wKCk7IC8vZG9uJ3Qgb3ZlcndyaXRlIGFsbCBvdGhlciB0aHJvd1Byb3BzIHR3ZWVucy4gSW4gdGhlIENTU1Byb3BUd2VlbiBjb25zdHJ1Y3Rvciwgd2UgYWRkIHRoZSBwcm9wZXJ0eSB0byB0aGUgX292ZXJ3cml0ZVByb3BzLCBzbyByZW1vdmUgaXQgaGVyZS5cblx0XHRcdFx0cHQucGx1Z2luID0gcGx1Z2luO1xuXHRcdFx0XHRwdC5zZXRSYXRpbyA9IF9zZXRQbHVnaW5SYXRpbztcblx0XHRcdFx0cHQuZGF0YSA9IGRhdGE7XG5cdFx0XHRcdHBsdWdpbi5fb25Jbml0VHdlZW4oX2Nzc1Byb3h5LCBfY3NzVmFycywgY3NzcC5fdHdlZW4pO1xuXHRcdFx0XHRyZXR1cm4gcHQ7XG5cdFx0XHR9fSk7XG5cdFx0fTtcblxuXHRcdFxuXHRcdFRocm93UHJvcHNQbHVnaW4udG8gPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMsIG1heER1cmF0aW9uLCBtaW5EdXJhdGlvbiwgb3ZlcnNob290VG9sZXJhbmNlKSB7XG5cdFx0XHRpZiAoIXZhcnMudGhyb3dQcm9wcykge1xuXHRcdFx0XHR2YXJzID0ge3Rocm93UHJvcHM6dmFyc307XG5cdFx0XHR9XG5cdFx0XHRpZiAob3ZlcnNob290VG9sZXJhbmNlID09PSAwKSB7XG5cdFx0XHRcdHZhcnMudGhyb3dQcm9wcy5wcmV2ZW50T3ZlcnNob290ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdF9yZWNvcmRFbmRNb2RlID0gdHJ1ZTsgLy9pZiB3ZSBlbmNvdW50ZXIgYSBmdW5jdGlvbi1iYXNlZCBcImVuZFwiIHZhbHVlLCBUaHJvd1Byb3BzUGx1Z2luIHdpbGwgcmVjb3JkIGl0IGFzIFwibWF4XCIgYW5kIFwibWluXCIgcHJvcGVydGllcywgcmVwbGFjaW5nIFwiZW5kXCIgKHRoaXMgaXMgYW4gb3B0aW1pemF0aW9uIHNvIHRoYXQgdGhlIGZ1bmN0aW9uIG9ubHkgZ2V0cyBjYWxsZWQgb25jZSlcblx0XHRcdHZhciB0d2VlbiA9IG5ldyBUd2VlbkxpdGUodGFyZ2V0LCBtaW5EdXJhdGlvbiB8fCAxLCB2YXJzKTtcblx0XHRcdHR3ZWVuLnJlbmRlcigwLCB0cnVlLCB0cnVlKTsgLy93ZSBmb3JjZSBhIHJlbmRlciBzbyB0aGF0IHRoZSBDU1NQbHVnaW4gaW5zdGFudGlhdGVzIGFuZCBwb3B1bGF0ZXMgdGhlIF9jc3NQcm94eSBhbmQgX2Nzc1ZhcnMgd2hpY2ggd2UgbmVlZCBpbiBvcmRlciB0byBjYWxjdWxhdGUgdGhlIHR3ZWVuIGR1cmF0aW9uLiBSZW1lbWJlciwgd2UgY2FuJ3QgdXNlIHRoZSByZWd1bGFyIHRhcmdldCBmb3IgY2FsY3VsYXRpbmcgdGhlIGR1cmF0aW9uIGJlY2F1c2UgdGhlIGN1cnJlbnQgdmFsdWVzIHdvdWxkbid0IGJlIGFibGUgdG8gYmUgZ3JhYmJlZCBsaWtlIHRhcmdldFtcInByb3BlcnR5TmFtZVwiXSwgYXMgY3NzIHByb3BlcnRpZXMgY2FuIGJlIGNvbXBsZXggbGlrZSBib3hTaGFkb3c6XCIxMHB4IDEwcHggMjBweCAzMHB4IHJlZFwiIG9yIGJhY2tncm91bmRQb3NpdGlvbjpcIjI1cHggNTBweFwiLiBUaGUgcHJveHkgaXMgdGhlIHJlc3VsdCBvZiBicmVha2luZyBhbGwgdGhhdCBjb21wbGV4IGRhdGEgZG93biBhbmQgZmluZGluZyBqdXN0IHRoZSBudW1lcmljIHZhbHVlcyBhbmQgYXNzaWduaW5nIHRoZW0gdG8gYSBnZW5lcmljIHByb3h5IG9iamVjdCB3aXRoIHVuaXF1ZSBuYW1lcy4gVEhBVCBpcyB3aGF0IHRoZSBfY2FsY3VsYXRlVHdlZW5EdXJhdGlvbigpIGNhbiBsb29rIGF0LiBXZSBhbHNvIG5lZWRlZCB0byBkbyB0aGUgc2FtZSBicmVhayBkb3duIG9mIGFueSBtaW4gb3IgbWF4IG9yIHZlbG9jaXR5IGRhdGFcblx0XHRcdGlmICh0d2Vlbi52YXJzLmNzcykge1xuXHRcdFx0XHR0d2Vlbi5kdXJhdGlvbihfY2FsY3VsYXRlVHdlZW5EdXJhdGlvbihfY3NzUHJveHksIHt0aHJvd1Byb3BzOl9jc3NWYXJzLCBlYXNlOnZhcnMuZWFzZX0sIG1heER1cmF0aW9uLCBtaW5EdXJhdGlvbiwgb3ZlcnNob290VG9sZXJhbmNlKSk7XG5cdFx0XHRcdGlmICh0d2Vlbi5fZGVsYXkgJiYgIXR3ZWVuLnZhcnMuaW1tZWRpYXRlUmVuZGVyKSB7XG5cdFx0XHRcdFx0dHdlZW4uaW52YWxpZGF0ZSgpOyAvL2lmIHRoZXJlJ3MgYSBkZWxheSwgdGhlIHN0YXJ0aW5nIHZhbHVlcyBjb3VsZCBiZSBvZmYsIHNvIGludmFsaWRhdGUoKSB0byBmb3JjZSByZWluc3RhbnRpYXRpb24gd2hlbiB0aGUgdHdlZW4gYWN0dWFsbHkgc3RhcnRzLlxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF9sYXN0Ll9vbkluaXRUd2VlbihfY3NzUHJveHksIF9sYXN0VmFsdWUsIHR3ZWVuKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRfcmVjb3JkRW5kTW9kZSA9IGZhbHNlO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5raWxsKCk7XG5cdFx0XHRcdHR3ZWVuID0gbmV3IFR3ZWVuTGl0ZSh0YXJnZXQsIF9jYWxjdWxhdGVUd2VlbkR1cmF0aW9uKHRhcmdldCwgdmFycywgbWF4RHVyYXRpb24sIG1pbkR1cmF0aW9uLCBvdmVyc2hvb3RUb2xlcmFuY2UpLCB2YXJzKTtcblx0XHRcdFx0X3JlY29yZEVuZE1vZGUgPSBmYWxzZTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0XG5cdFx0cC5fb25Jbml0VHdlZW4gPSBmdW5jdGlvbih0YXJnZXQsIHZhbHVlLCB0d2VlbiwgaW5kZXgpIHtcblx0XHRcdHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuXHRcdFx0dGhpcy5fcHJvcHMgPSBbXTtcblx0XHRcdF9sYXN0ID0gdGhpcztcblx0XHRcdF9sYXN0VmFsdWUgPSB2YWx1ZTtcblx0XHRcdHZhciBlYXNlID0gdHdlZW4uX2Vhc2UsXG5cdFx0XHRcdGNoZWNrcG9pbnQgPSBpc05hTih2YWx1ZS5jaGVja3BvaW50KSA/IDAuMDUgOiBOdW1iZXIodmFsdWUuY2hlY2twb2ludCksXG5cdFx0XHRcdGR1cmF0aW9uID0gdHdlZW4uX2R1cmF0aW9uLFxuXHRcdFx0XHRwcmV2ZW50T3ZlcnNob290ID0gdmFsdWUucHJldmVudE92ZXJzaG9vdCxcblx0XHRcdFx0Y250ID0gMCxcblx0XHRcdFx0cCwgY3VyUHJvcCwgY3VyVmFsLCBpc0Z1bmMsIHZlbG9jaXR5LCBjaGFuZ2UxLCBlbmQsIGNoYW5nZTIsIHRyYWNrZXI7XG5cdFx0XHRmb3IgKHAgaW4gdmFsdWUpIHtcblx0XHRcdFx0aWYgKHAgIT09IFwicmVzaXN0YW5jZVwiICYmIHAgIT09IFwiY2hlY2twb2ludFwiICYmIHAgIT09IFwicHJldmVudE92ZXJzaG9vdFwiKSB7XG5cdFx0XHRcdFx0Y3VyUHJvcCA9IHZhbHVlW3BdO1xuXHRcdFx0XHRcdGlmICh0eXBlb2YoY3VyUHJvcCkgPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0Y3VyUHJvcCA9IGN1clByb3AoaW5kZXgsIHRhcmdldCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICh0eXBlb2YoY3VyUHJvcCkgPT09IFwibnVtYmVyXCIpIHtcblx0XHRcdFx0XHRcdHZlbG9jaXR5ID0gTnVtYmVyKGN1clByb3ApIHx8IDA7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0eXBlb2YoY3VyUHJvcCkgPT09IFwib2JqZWN0XCIgJiYgIWlzTmFOKGN1clByb3AudmVsb2NpdHkpKSB7XG5cdFx0XHRcdFx0XHR2ZWxvY2l0eSA9IE51bWJlcihjdXJQcm9wLnZlbG9jaXR5KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJhY2tlciA9IHRyYWNrZXIgfHwgVmVsb2NpdHlUcmFja2VyLmdldEJ5VGFyZ2V0KHRhcmdldCk7XG5cdFx0XHRcdFx0XHRpZiAodHJhY2tlciAmJiB0cmFja2VyLmlzVHJhY2tpbmdQcm9wKHApKSB7XG5cdFx0XHRcdFx0XHRcdHZlbG9jaXR5ID0gdHJhY2tlci5nZXRWZWxvY2l0eShwKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRocm93KFwiRVJST1I6IE5vIHZlbG9jaXR5IHdhcyBkZWZpbmVkIGluIHRoZSB0aHJvd1Byb3BzIHR3ZWVuIG9mIFwiICsgdGFyZ2V0ICsgXCIgcHJvcGVydHk6IFwiICsgcCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNoYW5nZTEgPSBfY2FsY3VsYXRlQ2hhbmdlKHZlbG9jaXR5LCBlYXNlLCBkdXJhdGlvbiwgY2hlY2twb2ludCk7XG5cdFx0XHRcdFx0Y2hhbmdlMiA9IDA7XG5cdFx0XHRcdFx0aXNGdW5jID0gKHR5cGVvZih0YXJnZXRbcF0pID09PSBcImZ1bmN0aW9uXCIpO1xuXHRcdFx0XHRcdGN1clZhbCA9IChpc0Z1bmMpID8gdGFyZ2V0WyAoKHAuaW5kZXhPZihcInNldFwiKSB8fCB0eXBlb2YodGFyZ2V0W1wiZ2V0XCIgKyBwLnN1YnN0cigzKV0pICE9PSBcImZ1bmN0aW9uXCIpID8gcCA6IFwiZ2V0XCIgKyBwLnN1YnN0cigzKSkgXSgpIDogdGFyZ2V0W3BdO1xuXHRcdFx0XHRcdGlmICh0eXBlb2YoY3VyUHJvcCkgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRcdGVuZCA9IGN1clZhbCArIGNoYW5nZTE7XG5cdFx0XHRcdFx0XHRpZiAoY3VyUHJvcC5lbmQgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0XHRjdXJQcm9wID0gX3BhcnNlRW5kKGN1clByb3AsIGVuZCwgY3VyUHJvcC5tYXgsIGN1clByb3AubWluKTtcblx0XHRcdFx0XHRcdFx0aWYgKF9yZWNvcmRFbmRNb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFsdWVbcF0gPSBfZXh0ZW5kKGN1clByb3AsIHZhbHVlW3BdLCBcImVuZFwiKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGN1clByb3AubWF4ICE9PSB1bmRlZmluZWQgJiYgTnVtYmVyKGN1clByb3AubWF4KSA8IGVuZCkge1xuXHRcdFx0XHRcdFx0XHRpZiAocHJldmVudE92ZXJzaG9vdCB8fCBjdXJQcm9wLnByZXZlbnRPdmVyc2hvb3QpIHtcblx0XHRcdFx0XHRcdFx0XHRjaGFuZ2UxID0gY3VyUHJvcC5tYXggLSBjdXJWYWw7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2hhbmdlMiA9IChjdXJQcm9wLm1heCAtIGN1clZhbCkgLSBjaGFuZ2UxO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGN1clByb3AubWluICE9PSB1bmRlZmluZWQgJiYgTnVtYmVyKGN1clByb3AubWluKSA+IGVuZCkge1xuXHRcdFx0XHRcdFx0XHRpZiAocHJldmVudE92ZXJzaG9vdCB8fCBjdXJQcm9wLnByZXZlbnRPdmVyc2hvb3QpIHtcblx0XHRcdFx0XHRcdFx0XHRjaGFuZ2UxID0gY3VyUHJvcC5taW4gLSBjdXJWYWw7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2hhbmdlMiA9IChjdXJQcm9wLm1pbiAtIGN1clZhbCkgLSBjaGFuZ2UxO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuX292ZXJ3cml0ZVByb3BzW2NudF0gPSBwO1xuXHRcdFx0XHRcdHRoaXMuX3Byb3BzW2NudCsrXSA9IHtwOnAsIHM6Y3VyVmFsLCBjMTpjaGFuZ2UxLCBjMjpjaGFuZ2UyLCBmOmlzRnVuYywgcjpmYWxzZX07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH07XG5cdFx0XG5cdFx0cC5fa2lsbCA9IGZ1bmN0aW9uKGxvb2t1cCkge1xuXHRcdFx0dmFyIGkgPSB0aGlzLl9wcm9wcy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0aWYgKGxvb2t1cFt0aGlzLl9wcm9wc1tpXS5wXSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0dGhpcy5fcHJvcHMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gVHdlZW5QbHVnaW4ucHJvdG90eXBlLl9raWxsLmNhbGwodGhpcywgbG9va3VwKTtcblx0XHR9O1xuXHRcdFxuXHRcdHAuX21vZCA9IGZ1bmN0aW9uKGxvb2t1cCkge1xuXHRcdFx0dmFyIHAgPSB0aGlzLl9wcm9wcyxcblx0XHRcdFx0aSA9IHAubGVuZ3RoLFxuXHRcdFx0XHR2YWw7XG5cdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0dmFsID0gbG9va3VwW3BbaV0ucF0gfHwgbG9va3VwLnRocm93UHJvcHM7XG5cdFx0XHRcdGlmICh0eXBlb2YodmFsKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0cFtpXS5tID0gdmFsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRcblx0XHRwLnNldFJhdGlvID0gZnVuY3Rpb24odikge1xuXHRcdFx0dmFyIGkgPSB0aGlzLl9wcm9wcy5sZW5ndGgsIFxuXHRcdFx0XHRjcCwgdmFsO1xuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdGNwID0gdGhpcy5fcHJvcHNbaV07XG5cdFx0XHRcdHZhbCA9IGNwLnMgKyBjcC5jMSAqIHYgKyBjcC5jMiAqIHYgKiB2O1xuXHRcdFx0XHRpZiAoY3AubSkge1xuXHRcdFx0XHRcdHZhbCA9IGNwLm0odmFsLCB0aGlzLnRhcmdldCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodiA9PT0gMSkge1xuXHRcdFx0XHRcdHZhbCA9ICgodmFsICogMTAwMDAgKyAodmFsIDwgMCA/IC0wLjUgOiAwLjUpKSB8IDApIC8gMTAwMDA7IC8vaWYgd2UgZG9uJ3Qgcm91bmQgdGhpbmdzIGF0IHRoZSB2ZXJ5IGVuZCwgYmluYXJ5IG1hdGggaXNzdWVzIGNhbiBjcmVlcCBpbiBhbmQgY2F1c2Ugc25hcHBpbmcgbm90IHRvIGJlIGV4YWN0IChsaWtlIGxhbmRpbmcgb24gMjAuMDAwMDAwMDAwMDAxIGluc3RlYWQgb2YgMjApLlxuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjcC5mKSB7XG5cdFx0XHRcdFx0dGhpcy50YXJnZXRbY3AucF0odmFsKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLnRhcmdldFtjcC5wXSA9IHZhbDtcblx0XHRcdFx0fVxuXHRcdFx0fVx0XG5cdFx0fTtcblx0XHRcblx0XHRUd2VlblBsdWdpbi5hY3RpdmF0ZShbVGhyb3dQcm9wc1BsdWdpbl0pO1xuXHRcdFxuXHRcdHJldHVybiBUaHJvd1Byb3BzUGx1Z2luO1xuXHRcdFxuXHR9LCB0cnVlKTtcblxuXG5cbi8qXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBWZWxvY2l0eVRyYWNrZXJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXHRfZ3NTY29wZS5fZ3NEZWZpbmUoXCJ1dGlscy5WZWxvY2l0eVRyYWNrZXJcIiwgW1wiVHdlZW5MaXRlXCJdLCBmdW5jdGlvbihUd2VlbkxpdGUpIHtcblxuXHRcdHZhciBfZmlyc3QsXHRfaW5pdHRlZCwgX3RpbWUxLCBfdGltZTIsXG5cdFx0XHRfY2Fwc0V4cCA9IC8oW0EtWl0pL2csXG5cdFx0XHRfZW1wdHkgPSB7fSxcblx0XHRcdF90cmFuc2Zvcm1zID0ge3g6MSx5OjEsejoyLHNjYWxlOjEsc2NhbGVYOjEsc2NhbGVZOjEscm90YXRpb246MSxyb3RhdGlvblo6MSxyb3RhdGlvblg6Mixyb3RhdGlvblk6Mixza2V3WDoxLHNrZXdZOjEseFBlcmNlbnQ6MSx5UGVyY2VudDoxfSxcblx0XHRcdF9nZXRDb21wdXRlZFN0eWxlID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgPyBkb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlIDogZnVuY3Rpb24oKSB7fSxcblx0XHRcdF9nZXRTdHlsZSA9IGZ1bmN0aW9uKHQsIHAsIGNzKSB7XG5cdFx0XHRcdHZhciBydiA9ICh0Ll9nc1RyYW5zZm9ybSB8fCBfZW1wdHkpW3BdO1xuXHRcdFx0XHRpZiAocnYgfHwgcnYgPT09IDApIHtcblx0XHRcdFx0XHRyZXR1cm4gcnY7XG5cdFx0XHRcdH0gZWxzZSBpZiAodC5zdHlsZVtwXSkge1xuXHRcdFx0XHRcdHJ2ID0gdC5zdHlsZVtwXTtcblx0XHRcdFx0fSBlbHNlIGlmICgoY3MgPSBjcyB8fCBfZ2V0Q29tcHV0ZWRTdHlsZSh0LCBudWxsKSkpIHtcblx0XHRcdFx0XHRydiA9IGNzW3BdIHx8IGNzLmdldFByb3BlcnR5VmFsdWUocCkgfHwgY3MuZ2V0UHJvcGVydHlWYWx1ZShwLnJlcGxhY2UoX2NhcHNFeHAsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHQuY3VycmVudFN0eWxlKSB7XG5cdFx0XHRcdFx0cnYgPSB0LmN1cnJlbnRTdHlsZVtwXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcGFyc2VGbG9hdChydikgfHwgMDtcblx0XHRcdH0sXG5cdFx0XHRfdGlja2VyID0gVHdlZW5MaXRlLnRpY2tlcixcblx0XHRcdFZlbG9jaXR5UHJvcCA9IGZ1bmN0aW9uKHAsIGlzRnVuYywgbmV4dCkge1xuXHRcdFx0XHR0aGlzLnAgPSBwO1xuXHRcdFx0XHR0aGlzLmYgPSBpc0Z1bmM7XG5cdFx0XHRcdHRoaXMudjEgPSB0aGlzLnYyID0gMDtcblx0XHRcdFx0dGhpcy50MSA9IHRoaXMudDIgPSBfdGlja2VyLnRpbWU7XG5cdFx0XHRcdHRoaXMuY3NzID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMudHlwZSA9IFwiXCI7XG5cdFx0XHRcdHRoaXMuX3ByZXYgPSBudWxsO1xuXHRcdFx0XHRpZiAobmV4dCkge1xuXHRcdFx0XHRcdHRoaXMuX25leHQgPSBuZXh0O1xuXHRcdFx0XHRcdG5leHQuX3ByZXYgPSB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X3VwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgdnQgPSBfZmlyc3QsXG5cdFx0XHRcdFx0dCA9IF90aWNrZXIudGltZSxcblx0XHRcdFx0XHR2YWwsIHZwO1xuXHRcdFx0XHQvL2lmIHRoZSBmcmFtZSByYXRlIGlzIHRvbyBoaWdoLCB3ZSB3b24ndCBiZSBhYmxlIHRvIHRyYWNrIHRoZSB2ZWxvY2l0eSBhcyB3ZWxsLCBzbyBvbmx5IHVwZGF0ZSB0aGUgdmFsdWVzIGFib3V0IDMzIHRpbWVzIHBlciBzZWNvbmRcblx0XHRcdFx0aWYgKHQgLSBfdGltZTEgPj0gMC4wMykge1xuXHRcdFx0XHRcdF90aW1lMiA9IF90aW1lMTtcblx0XHRcdFx0XHRfdGltZTEgPSB0O1xuXHRcdFx0XHRcdHdoaWxlICh2dCkge1xuXHRcdFx0XHRcdFx0dnAgPSB2dC5fZmlyc3RWUDtcblx0XHRcdFx0XHRcdHdoaWxlICh2cCkge1xuXHRcdFx0XHRcdFx0XHR2YWwgPSB2cC5jc3MgPyBfZ2V0U3R5bGUodnQudGFyZ2V0LCB2cC5wKSA6IHZwLmYgPyB2dC50YXJnZXRbdnAucF0oKSA6IHZ0LnRhcmdldFt2cC5wXTtcblx0XHRcdFx0XHRcdFx0aWYgKHZhbCAhPT0gdnAudjEgfHwgdCAtIHZwLnQxID4gMC4xNSkgeyAvL3VzZSBhIHRocmVzaG9sZCBvZiAwLjE1IHNlY29uZHMgZm9yIHplcm9pbmctb3V0IHZlbG9jaXR5LiBJZiB3ZSBvbmx5IHVzZSAwLjAzIGFuZCB0aGluZ3MgdXBkYXRlIHNsaWdodGx5IHNsb3dlciwgbGlrZSBzb21lIEFuZHJvaWQgZGV2aWNlcyBkaXNwYXRjaCBcInRvdWNobW92ZVwiIGV2ZW50cyBzbHVnZ2lzaGx5IHNvIDIgb3IgMyB0aWNrcyBvZiB0aGUgVHdlZW5MaXRlLnRpY2tlciBtYXkgZWxhcHNlIGluYmV0d2VlbiwgdGh1cyBpdCBtYXkgYXBwZWFyIGxpa2UgdGhlIG9iamVjdCBpcyBub3QgbW92aW5nIGJ1dCBpdCBhY3R1YWxseSBpcyBidXQgaXQncyBub3QgdXBkYXRpbmcgYXMgZnJlcXVlbnRseS4gQSB0aHJlc2hvbGQgb2YgMC4xNSBzZWNvbmRzIHNlZW1zIHRvIGJlIGEgZ29vZCBiYWxhbmNlLiBXZSB3YW50IHRvIHVwZGF0ZSB0aGluZ3MgZnJlcXVlbnRseSAoMC4wMyBzZWNvbmRzKSB3aGVuIHRoZXkncmUgbW92aW5nIHNvIHRoYXQgd2UgY2FuIHJlc3BvbmQgdG8gZmFzdCBtb3Rpb25zIGFjY3VyYXRlbHksIGJ1dCB3ZSB3YW50IHRvIGJlIG1vcmUgcmVzaXN0YW50IHRvIGdvIGJhY2sgdG8gYSB6ZXJvIHZlbG9jaXR5LlxuXHRcdFx0XHRcdFx0XHRcdHZwLnYyID0gdnAudjE7XG5cdFx0XHRcdFx0XHRcdFx0dnAudjEgPSB2YWw7XG5cdFx0XHRcdFx0XHRcdFx0dnAudDIgPSB2cC50MTtcblx0XHRcdFx0XHRcdFx0XHR2cC50MSA9IHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dnAgPSB2cC5fbmV4dDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHZ0ID0gdnQuX25leHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0VmVsb2NpdHlUcmFja2VyID0gZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0XHRcdHRoaXMuX2xvb2t1cCA9IHt9O1xuXHRcdFx0XHR0aGlzLnRhcmdldCA9IHRhcmdldDtcblx0XHRcdFx0dGhpcy5lbGVtID0gKHRhcmdldC5zdHlsZSAmJiB0YXJnZXQubm9kZVR5cGUpID8gdHJ1ZSA6IGZhbHNlO1xuXHRcdFx0XHRpZiAoIV9pbml0dGVkKSB7XG5cdFx0XHRcdFx0X3RpY2tlci5hZGRFdmVudExpc3RlbmVyKFwidGlja1wiLCBfdXBkYXRlLCBudWxsLCBmYWxzZSwgLTEwMCk7XG5cdFx0XHRcdFx0X3RpbWUxID0gX3RpbWUyID0gX3RpY2tlci50aW1lO1xuXHRcdFx0XHRcdF9pbml0dGVkID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoX2ZpcnN0KSB7XG5cdFx0XHRcdFx0dGhpcy5fbmV4dCA9IF9maXJzdDtcblx0XHRcdFx0XHRfZmlyc3QuX3ByZXYgPSB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9maXJzdCA9IHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Z2V0QnlUYXJnZXQgPSBWZWxvY2l0eVRyYWNrZXIuZ2V0QnlUYXJnZXQgPSBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRcdFx0dmFyIHZ0ID0gX2ZpcnN0O1xuXHRcdFx0XHR3aGlsZSAodnQpIHtcblx0XHRcdFx0XHRpZiAodnQudGFyZ2V0ID09PSB0YXJnZXQpIHtcblx0XHRcdFx0XHRcdHJldHVybiB2dDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dnQgPSB2dC5fbmV4dDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdHAgPSBWZWxvY2l0eVRyYWNrZXIucHJvdG90eXBlO1xuXG5cdFx0cC5hZGRQcm9wID0gZnVuY3Rpb24ocHJvcCwgdHlwZSkge1xuXHRcdFx0aWYgKCF0aGlzLl9sb29rdXBbcHJvcF0pIHtcblx0XHRcdFx0dmFyIHQgPSB0aGlzLnRhcmdldCxcblx0XHRcdFx0XHRpc0Z1bmMgPSAodHlwZW9mKHRbcHJvcF0pID09PSBcImZ1bmN0aW9uXCIpLFxuXHRcdFx0XHRcdGFsdCA9IGlzRnVuYyA/IHRoaXMuX2FsdFByb3AocHJvcCkgOiBwcm9wLFxuXHRcdFx0XHRcdHZwID0gdGhpcy5fZmlyc3RWUDtcblx0XHRcdFx0dGhpcy5fZmlyc3RWUCA9IHRoaXMuX2xvb2t1cFtwcm9wXSA9IHRoaXMuX2xvb2t1cFthbHRdID0gdnAgPSBuZXcgVmVsb2NpdHlQcm9wKChhbHQgIT09IHByb3AgJiYgcHJvcC5pbmRleE9mKFwic2V0XCIpID09PSAwKSA/IGFsdCA6IHByb3AsIGlzRnVuYywgdnApO1xuXHRcdFx0XHR2cC5jc3MgPSAodGhpcy5lbGVtICYmICh0aGlzLnRhcmdldC5zdHlsZVt2cC5wXSAhPT0gdW5kZWZpbmVkIHx8IF90cmFuc2Zvcm1zW3ZwLnBdKSk7XG5cdFx0XHRcdGlmICh2cC5jc3MgJiYgX3RyYW5zZm9ybXNbdnAucF0gJiYgIXQuX2dzVHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0VHdlZW5MaXRlLnNldCh0LCB7eDpcIis9MFwiLCBvdmVyd3JpdGU6ZmFsc2V9KTsgLy9qdXN0IGZvcmNlcyBDU1NQbHVnaW4gdG8gY3JlYXRlIGEgX2dzVHJhbnNmb3JtIGZvciB0aGUgZWxlbWVudCBpZiBpdCBkb2Vzbid0IGV4aXN0XG5cdFx0XHRcdH1cblx0XHRcdFx0dnAudHlwZSA9IHR5cGUgfHwgKHZwLmNzcyAmJiBwcm9wLmluZGV4T2YoXCJyb3RhdGlvblwiKSA9PT0gMCkgPyBcImRlZ1wiIDogXCJcIjtcblx0XHRcdFx0dnAudjEgPSB2cC52MiA9IHZwLmNzcyA/IF9nZXRTdHlsZSh0LCB2cC5wKSA6IGlzRnVuYyA/IHRbdnAucF0oKSA6IHRbdnAucF07XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHAucmVtb3ZlUHJvcCA9IGZ1bmN0aW9uKHByb3ApIHtcblx0XHRcdHZhciB2cCA9IHRoaXMuX2xvb2t1cFtwcm9wXTtcblx0XHRcdGlmICh2cCkge1xuXHRcdFx0XHRpZiAodnAuX3ByZXYpIHtcblx0XHRcdFx0XHR2cC5fcHJldi5fbmV4dCA9IHZwLl9uZXh0O1xuXHRcdFx0XHR9IGVsc2UgaWYgKHZwID09PSB0aGlzLl9maXJzdFZQKSB7XG5cdFx0XHRcdFx0dGhpcy5fZmlyc3RWUCA9IHZwLl9uZXh0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2cC5fbmV4dCkge1xuXHRcdFx0XHRcdHZwLl9uZXh0Ll9wcmV2ID0gdnAuX3ByZXY7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5fbG9va3VwW3Byb3BdID0gMDtcblx0XHRcdFx0aWYgKHZwLmYpIHtcblx0XHRcdFx0XHR0aGlzLl9sb29rdXBbdGhpcy5fYWx0UHJvcChwcm9wKV0gPSAwOyAvL2lmIGl0J3MgYSBnZXR0ZXIvc2V0dGVyLCB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBtYXRjaGluZyBjb3VudGVycGFydCAoaWYgb25lIGV4aXN0cylcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRwLmlzVHJhY2tpbmdQcm9wID0gZnVuY3Rpb24ocHJvcCkge1xuXHRcdFx0cmV0dXJuICh0aGlzLl9sb29rdXBbcHJvcF0gaW5zdGFuY2VvZiBWZWxvY2l0eVByb3ApO1xuXHRcdH07XG5cblx0XHRwLmdldFZlbG9jaXR5ID0gZnVuY3Rpb24ocHJvcCkge1xuXHRcdFx0dmFyIHZwID0gdGhpcy5fbG9va3VwW3Byb3BdLFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLnRhcmdldCxcblx0XHRcdFx0dmFsLCBkaWYsIHJvdGF0aW9uQ2FwO1xuXHRcdFx0aWYgKCF2cCkge1xuXHRcdFx0XHR0aHJvdyBcIlRoZSB2ZWxvY2l0eSBvZiBcIiArIHByb3AgKyBcIiBpcyBub3QgYmVpbmcgdHJhY2tlZC5cIjtcblx0XHRcdH1cblx0XHRcdHZhbCA9IHZwLmNzcyA/IF9nZXRTdHlsZSh0YXJnZXQsIHZwLnApIDogdnAuZiA/IHRhcmdldFt2cC5wXSgpIDogdGFyZ2V0W3ZwLnBdO1xuXHRcdFx0ZGlmID0gKHZhbCAtIHZwLnYyKTtcblx0XHRcdGlmICh2cC50eXBlID09PSBcInJhZFwiIHx8IHZwLnR5cGUgPT09IFwiZGVnXCIpIHsgLy9yb3RhdGlvbmFsIHZhbHVlcyBuZWVkIHNwZWNpYWwgaW50ZXJwcmV0YXRpb24gc28gdGhhdCBpZiwgZm9yIGV4YW1wbGUsIHRoZXkgZ28gZnJvbSAxNzkgdG8gLTE3OCBkZWdyZWVzIGl0IGlzIGludGVycHJldGVkIGFzIGEgY2hhbmdlIG9mIDMgaW5zdGVhZCBvZiAtMzU3LlxuXHRcdFx0XHRyb3RhdGlvbkNhcCA9ICh2cC50eXBlID09PSBcInJhZFwiKSA/IE1hdGguUEkgKiAyIDogMzYwO1xuXHRcdFx0XHRkaWYgPSBkaWYgJSByb3RhdGlvbkNhcDtcblx0XHRcdFx0aWYgKGRpZiAhPT0gZGlmICUgKHJvdGF0aW9uQ2FwIC8gMikpIHtcblx0XHRcdFx0XHRkaWYgPSAoZGlmIDwgMCkgPyBkaWYgKyByb3RhdGlvbkNhcCA6IGRpZiAtIHJvdGF0aW9uQ2FwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZGlmIC8gKF90aWNrZXIudGltZSAtIHZwLnQyKTtcblx0XHR9O1xuXG5cdFx0cC5fYWx0UHJvcCA9IGZ1bmN0aW9uKHApIHsgLy9mb3IgZ2V0dGVycy9zZXR0ZXJzIGxpa2UgZ2V0Q3VzdG9tUHJvcCgpIGFuZCBzZXRDdXN0b21Qcm9wKCkgLSB3ZSBzaG91bGQgYWNjb21tb2RhdGUgYm90aFxuXHRcdFx0dmFyIHByZSA9IHAuc3Vic3RyKDAsIDMpLFxuXHRcdFx0XHRhbHQgPSAoKHByZSA9PT0gXCJnZXRcIikgPyBcInNldFwiIDogKHByZSA9PT0gXCJzZXRcIikgPyBcImdldFwiIDogcHJlKSArIHAuc3Vic3RyKDMpO1xuXHRcdFx0cmV0dXJuICh0eXBlb2YodGhpcy50YXJnZXRbYWx0XSkgPT09IFwiZnVuY3Rpb25cIikgPyBhbHQgOiBwO1xuXHRcdH07XG5cblx0XHRWZWxvY2l0eVRyYWNrZXIuZ2V0QnlUYXJnZXQgPSBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHRcdHZhciB2dCA9IF9maXJzdDtcblx0XHRcdGlmICh0eXBlb2YodGFyZ2V0KSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHR0YXJnZXQgPSBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0KTtcblx0XHRcdH1cblx0XHRcdGlmICh0YXJnZXQubGVuZ3RoICYmIHRhcmdldCAhPT0gd2luZG93ICYmIHRhcmdldFswXSAmJiB0YXJnZXRbMF0uc3R5bGUgJiYgIXRhcmdldC5ub2RlVHlwZSkge1xuXHRcdFx0XHR0YXJnZXQgPSB0YXJnZXRbMF07XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAodnQpIHtcblx0XHRcdFx0aWYgKHZ0LnRhcmdldCA9PT0gdGFyZ2V0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZ0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZ0ID0gdnQuX25leHQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdFZlbG9jaXR5VHJhY2tlci50cmFjayA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcHMsIHR5cGVzKSB7XG5cdFx0XHR2YXIgdnQgPSBnZXRCeVRhcmdldCh0YXJnZXQpLFxuXHRcdFx0XHRhID0gcHJvcHMuc3BsaXQoXCIsXCIpLFxuXHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHR0eXBlcyA9ICh0eXBlcyB8fCBcIlwiKS5zcGxpdChcIixcIik7XG5cdFx0XHRpZiAoIXZ0KSB7XG5cdFx0XHRcdHZ0ID0gbmV3IFZlbG9jaXR5VHJhY2tlcih0YXJnZXQpO1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdHZ0LmFkZFByb3AoYVtpXSwgdHlwZXNbaV0gfHwgdHlwZXNbMF0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZ0O1xuXHRcdH07XG5cblx0XHRWZWxvY2l0eVRyYWNrZXIudW50cmFjayA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcHMpIHtcblx0XHRcdHZhciB2dCA9IGdldEJ5VGFyZ2V0KHRhcmdldCksXG5cdFx0XHRcdGEgPSAocHJvcHMgfHwgXCJcIikuc3BsaXQoXCIsXCIpLFxuXHRcdFx0XHRpID0gYS5sZW5ndGg7XG5cdFx0XHRpZiAoIXZ0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHR2dC5yZW1vdmVQcm9wKGFbaV0pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCF2dC5fZmlyc3RWUCB8fCAhcHJvcHMpIHtcblx0XHRcdFx0aWYgKHZ0Ll9wcmV2KSB7XG5cdFx0XHRcdFx0dnQuX3ByZXYuX25leHQgPSB2dC5fbmV4dDtcblx0XHRcdFx0fSBlbHNlIGlmICh2dCA9PT0gX2ZpcnN0KSB7XG5cdFx0XHRcdFx0X2ZpcnN0ID0gdnQuX25leHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHZ0Ll9uZXh0KSB7XG5cdFx0XHRcdFx0dnQuX25leHQuX3ByZXYgPSB2dC5fcHJldjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRWZWxvY2l0eVRyYWNrZXIuaXNUcmFja2luZyA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcCkge1xuXHRcdFx0dmFyIHZ0ID0gZ2V0QnlUYXJnZXQodGFyZ2V0KTtcblx0XHRcdHJldHVybiAoIXZ0KSA/IGZhbHNlIDogKCFwcm9wICYmIHZ0Ll9maXJzdFZQKSA/IHRydWUgOiB2dC5pc1RyYWNraW5nUHJvcChwcm9wKTtcblx0XHR9O1xuXG5cdFx0cmV0dXJuIFZlbG9jaXR5VHJhY2tlcjtcblxuXHR9LCB0cnVlKTtcblxuXG59KTsgaWYgKF9nc1Njb3BlLl9nc0RlZmluZSkgeyBfZ3NTY29wZS5fZ3NRdWV1ZS5wb3AoKSgpOyB9XG5cbi8vZXhwb3J0IHRvIEFNRC9SZXF1aXJlSlMgYW5kIENvbW1vbkpTL05vZGUgKHByZWN1cnNvciB0byBmdWxsIG1vZHVsYXIgYnVpbGQgc3lzdGVtIGNvbWluZyBhdCBhIGxhdGVyIGRhdGUpXG4oZnVuY3Rpb24obmFtZSkge1xuXHRcInVzZSBzdHJpY3RcIjtcblx0dmFyIGdldEdsb2JhbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiAoX2dzU2NvcGUuR3JlZW5Tb2NrR2xvYmFscyB8fCBfZ3NTY29wZSlbbmFtZV07XG5cdH07XG5cdGlmICh0eXBlb2YoZGVmaW5lKSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHsgLy9BTURcblx0XHRkZWZpbmUoW1wiVHdlZW5MaXRlXCJdLCBnZXRHbG9iYWwpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZihtb2R1bGUpICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzKSB7IC8vbm9kZVxuXHRcdHJlcXVpcmUoXCIuLi9Ud2VlbkxpdGUuanNcIik7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnZXRHbG9iYWwoKTtcblx0fVxufShcIlRocm93UHJvcHNQbHVnaW5cIikpOyIsIi8qIVxuICogVkVSU0lPTjogMC4xNC45XG4gKiBEQVRFOiAyMDE3LTAxLTAyXG4gKiBVUERBVEVTIEFORCBET0NTIEFUOiBodHRwOi8vZ3JlZW5zb2NrLmNvbVxuICpcbiAqIFJlcXVpcmVzIFR3ZWVuTGl0ZSBhbmQgQ1NTUGx1Z2luIHZlcnNpb24gMS4xNy4wIG9yIGxhdGVyIChUd2Vlbk1heCBjb250YWlucyBib3RoIFR3ZWVuTGl0ZSBhbmQgQ1NTUGx1Z2luKS4gVGhyb3dQcm9wc1BsdWdpbiBpcyByZXF1aXJlZCBmb3IgbW9tZW50dW0tYmFzZWQgY29udGludWF0aW9uIG9mIG1vdmVtZW50IGFmdGVyIHRoZSBtb3VzZS90b3VjaCBpcyByZWxlYXNlZCAoVGhyb3dQcm9wc1BsdWdpbiBpcyBhIG1lbWJlcnNoaXAgYmVuZWZpdCBvZiBDbHViIEdyZWVuU29jayAtIGh0dHA6Ly9ncmVlbnNvY2suY29tL2NsdWIvKS5cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxNywgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyB3b3JrIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGF0IGh0dHA6Ly9ncmVlbnNvY2suY29tL3N0YW5kYXJkLWxpY2Vuc2Ugb3IgZm9yXG4gKiBDbHViIEdyZWVuU29jayBtZW1iZXJzLCB0aGUgc29mdHdhcmUgYWdyZWVtZW50IHRoYXQgd2FzIGlzc3VlZCB3aXRoIHlvdXIgbWVtYmVyc2hpcC5cbiAqXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqL1xudmFyIF9nc1Njb3BlID0gKHR5cGVvZihtb2R1bGUpICE9PSBcInVuZGVmaW5lZFwiICYmIG1vZHVsZS5leHBvcnRzICYmIHR5cGVvZihnbG9iYWwpICE9PSBcInVuZGVmaW5lZFwiKSA/IGdsb2JhbCA6IHRoaXMgfHwgd2luZG93OyAvL2hlbHBzIGVuc3VyZSBjb21wYXRpYmlsaXR5IHdpdGggQU1EL1JlcXVpcmVKUyBhbmQgQ29tbW9uSlMvTm9kZVxuKF9nc1Njb3BlLl9nc1F1ZXVlIHx8IChfZ3NTY29wZS5fZ3NRdWV1ZSA9IFtdKSkucHVzaCggZnVuY3Rpb24oKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0X2dzU2NvcGUuX2dzRGVmaW5lKFwidXRpbHMuRHJhZ2dhYmxlXCIsIFtcImV2ZW50cy5FdmVudERpc3BhdGNoZXJcIixcIlR3ZWVuTGl0ZVwiLFwicGx1Z2lucy5DU1NQbHVnaW5cIl0sIGZ1bmN0aW9uKEV2ZW50RGlzcGF0Y2hlciwgVHdlZW5MaXRlLCBDU1NQbHVnaW4pIHtcblxuXHRcdHZhciBfdGVtcFZhcnNYWSA9IHtjc3M6e319LCAvL3NwZWVkIG9wdGltaXphdGlvbiAtIHdlIHJldXNlIHRoZSBzYW1lIHZhcnMgb2JqZWN0IGZvciB4L3kgVHdlZW5MaXRlLnNldCgpIGNhbGxzIHRvIG1pbmltaXplIGdhcmJhZ2UgY29sbGVjdGlvbiB0YXNrcyBhbmQgaW1wcm92ZSBwZXJmb3JtYW5jZS5cblx0XHRcdF90ZW1wVmFyc1ggPSB7Y3NzOnt9fSxcblx0XHRcdF90ZW1wVmFyc1kgPSB7Y3NzOnt9fSxcblx0XHRcdF90ZW1wVmFyc1JvdGF0aW9uID0ge2Nzczp7fX0sXG5cdFx0XHRfZ2xvYmFscyA9IF9nc1Njb3BlLl9nc0RlZmluZS5nbG9iYWxzLFxuXHRcdFx0X3RlbXBFdmVudCA9IHt9LCAvL2ZvciBwb3B1bGF0aW5nIHdpdGggcGFnZVgvcGFnZVkgaW4gb2xkIHZlcnNpb25zIG9mIElFXG5cdFx0XHRfZG9jID0gZG9jdW1lbnQsXG5cdFx0XHRfZG9jRWxlbWVudCA9IF9kb2MuZG9jdW1lbnRFbGVtZW50IHx8IHt9LFxuXHRcdFx0X2NyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbih0eXBlKSB7XG5cdFx0XHRcdHJldHVybiBfZG9jLmNyZWF0ZUVsZW1lbnROUyA/IF9kb2MuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLCB0eXBlKSA6IF9kb2MuY3JlYXRlRWxlbWVudCh0eXBlKTtcblx0XHRcdH0sXG5cdFx0XHRfdGVtcERpdiA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdFx0X2VtcHR5QXJyYXkgPSBbXSxcblx0XHRcdF9lbXB0eUZ1bmMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9LFxuXHRcdFx0X1JBRDJERUcgPSAxODAgLyBNYXRoLlBJLFxuXHRcdFx0X21heCA9IDk5OTk5OTk5OTk5OTk5OSxcblx0XHRcdF9nZXRUaW1lID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7cmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO30sXG5cdFx0XHRfaXNPbGRJRSA9ICEhKCFfZG9jLmFkZEV2ZW50TGlzdGVuZXIgJiYgX2RvYy5hbGwpLFxuXHRcdFx0X3BsYWNlaG9sZGVyRGl2ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdFx0X3JlbmRlclF1ZXVlID0gW10sXG5cdFx0XHRfbG9va3VwID0ge30sIC8vd2hlbiBhIERyYWdnYWJsZSBpcyBjcmVhdGVkLCB0aGUgdGFyZ2V0IGdldHMgYSB1bmlxdWUgX2dzRHJhZ0lEIHByb3BlcnR5IHRoYXQgYWxsb3dzIGdldHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBEcmFnZ2FibGUgaW5zdGFuY2UgZm9yIHF1aWNrIGxvb2t1cHMgaW4gRHJhZ2dhYmxlLmdldCgpLiBUaGlzIGF2b2lkcyBjaXJjdWxhciByZWZlcmVuY2VzIHRoYXQgY291bGQgY2F1c2UgZ2MgcHJvYmxlbXMuXG5cdFx0XHRfbG9va3VwQ291bnQgPSAwLFxuXHRcdFx0X2NsaWNrYWJsZVRhZ0V4cCA9IC9eKD86YXxpbnB1dHx0ZXh0YXJlYXxidXR0b258c2VsZWN0KSQvaSxcblx0XHRcdF9kcmFnQ291bnQgPSAwLCAvL3RvdGFsIG51bWJlciBvZiBlbGVtZW50cyBjdXJyZW50bHkgYmVpbmcgZHJhZ2dlZFxuXHRcdFx0X3ByZWZpeCxcblx0XHRcdF9pc011bHRpVG91Y2hpbmcsXG5cdFx0XHRfaXNBbmRyb2lkID0gKG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwiYW5kcm9pZFwiKSAhPT0gLTEpLCAvL0FuZHJvaWQgaGFuZGxlcyB0b3VjaCBldmVudHMgaW4gYW4gb2RkIHdheSBhbmQgaXQncyB2aXJ0dWFsbHkgaW1wb3NzaWJsZSB0byBcImZlYXR1cmUgdGVzdFwiIHNvIHdlIHJlc29ydCB0byBVQSBzbmlmZmluZ1xuXHRcdFx0X2xhc3REcmFnVGltZSA9IDAsXG5cdFx0XHRfdGVtcDEgPSB7fSwgLy8gYSBzaW1wbGUgb2JqZWN0IHdlIHJldXNlIGFuZCBwb3B1bGF0ZSAodXN1YWxseSB4L3kgcHJvcGVydGllcykgdG8gY29uc2VydmUgbWVtb3J5IGFuZCBpbXByb3ZlIHBlcmZvcm1hbmNlLlxuXHRcdFx0X3dpbmRvd1Byb3h5ID0ge30sIC8vbWVtb3J5L3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbiAtIHdlIHJldXNlIHRoaXMgb2JqZWN0IGR1cmluZyBhdXRvU2Nyb2xsIHRvIHN0b3JlIHdpbmRvdy1yZWxhdGVkIGJvdW5kcy9vZmZzZXRzLlxuXHRcdFx0X3NsaWNlID0gZnVuY3Rpb24oYSkgeyAvL2Rvbid0IHVzZSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0YXJnZXQsIDApIGJlY2F1c2UgdGhhdCBkb2Vzbid0IHdvcmsgaW4gSUU4IHdpdGggYSBOb2RlTGlzdCB0aGF0J3MgcmV0dXJuZWQgYnkgcXVlcnlTZWxlY3RvckFsbCgpXG5cdFx0XHRcdGlmICh0eXBlb2YoYSkgPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0XHRhID0gVHdlZW5MaXRlLnNlbGVjdG9yKGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghYSB8fCBhLm5vZGVUeXBlKSB7IC8vaWYgaXQncyBub3QgYW4gYXJyYXksIHdyYXAgaXQgaW4gb25lLlxuXHRcdFx0XHRcdHJldHVybiBbYV07XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGIgPSBbXSxcblx0XHRcdFx0XHRsID0gYS5sZW5ndGgsXG5cdFx0XHRcdFx0aTtcblx0XHRcdFx0Zm9yIChpID0gMDsgaSAhPT0gbDsgYi5wdXNoKGFbaSsrXSkpO1xuXHRcdFx0XHRyZXR1cm4gYjtcblx0XHRcdH0sXG5cdFx0XHRfY29weSA9IGZ1bmN0aW9uKG9iaikge1xuXHRcdFx0XHR2YXIgY29weSA9IHt9LCBwO1xuXHRcdFx0XHRmb3IgKHAgaW4gb2JqKSB7XG5cdFx0XHRcdFx0Y29weVtwXSA9IG9ialtwXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gY29weTtcblx0XHRcdH0sXG5cdFx0XHRUaHJvd1Byb3BzUGx1Z2luLFxuXG5cdFx0XHRfcmVuZGVyUXVldWVUaWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBpID0gX3JlbmRlclF1ZXVlLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0X3JlbmRlclF1ZXVlW2ldKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfYWRkVG9SZW5kZXJRdWV1ZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcblx0XHRcdFx0X3JlbmRlclF1ZXVlLnB1c2goZnVuYyk7XG5cdFx0XHRcdGlmIChfcmVuZGVyUXVldWUubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0VHdlZW5MaXRlLnRpY2tlci5hZGRFdmVudExpc3RlbmVyKFwidGlja1wiLCBfcmVuZGVyUXVldWVUaWNrLCB0aGlzLCBmYWxzZSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfcmVtb3ZlRnJvbVJlbmRlclF1ZXVlID0gZnVuY3Rpb24oZnVuYykge1xuXHRcdFx0XHR2YXIgaSA9IF9yZW5kZXJRdWV1ZS5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdGlmIChfcmVuZGVyUXVldWVbaV0gPT09IGZ1bmMpIHtcblx0XHRcdFx0XHRcdF9yZW5kZXJRdWV1ZS5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFR3ZWVuTGl0ZS50byhfcmVuZGVyUXVldWVUaW1lb3V0LCAwLCB7b3ZlcndyaXRlOlwiYWxsXCIsIGRlbGF5OjE1LCBvbkNvbXBsZXRlOl9yZW5kZXJRdWV1ZVRpbWVvdXR9KTsgLy9yZW1vdmUgdGhlIFwidGlja1wiIGxpc3RlbmVyIG9ubHkgYWZ0ZXIgdGhlIHJlbmRlciBxdWV1ZSBpcyBlbXB0eSBmb3IgMTUgc2Vjb25kcyAodG8gaW1wcm92ZSBwZXJmb3JtYW5jZSkuIEFkZGluZy9yZW1vdmluZyBpdCBjb25zdGFudGx5IGZvciBldmVyeSBjbGljay90b3VjaCB3b3VsZG4ndCBkZWxpdmVyIG9wdGltYWwgc3BlZWQsIGFuZCB3ZSBhbHNvIGRvbid0IHdhbnQgdGhlIHRpY2tlciB0byBrZWVwIGNhbGxpbmcgdGhlIHJlbmRlciBtZXRob2Qgd2hlbiB0aGluZ3MgYXJlIGlkbGUgZm9yIGxvbmcgcGVyaW9kcyBvZiB0aW1lICh3ZSB3YW50IHRvIGltcHJvdmUgYmF0dGVyeSBsaWZlIG9uIG1vYmlsZSBkZXZpY2VzKS5cblx0XHRcdH0sXG5cdFx0XHRfcmVuZGVyUXVldWVUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICghX3JlbmRlclF1ZXVlLmxlbmd0aCkge1xuXHRcdFx0XHRcdFR3ZWVuTGl0ZS50aWNrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRpY2tcIiwgX3JlbmRlclF1ZXVlVGljayk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdF9leHRlbmQgPSBmdW5jdGlvbihvYmosIGRlZmF1bHRzKSB7XG5cdFx0XHRcdHZhciBwO1xuXHRcdFx0XHRmb3IgKHAgaW4gZGVmYXVsdHMpIHtcblx0XHRcdFx0XHRpZiAob2JqW3BdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdG9ialtwXSA9IGRlZmF1bHRzW3BdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb2JqO1xuXHRcdFx0fSxcblx0XHRcdF9nZXREb2NTY3JvbGxUb3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICh3aW5kb3cucGFnZVlPZmZzZXQgIT0gbnVsbCkgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiAoX2RvYy5zY3JvbGxUb3AgIT0gbnVsbCkgPyBfZG9jLnNjcm9sbFRvcCA6IF9kb2NFbGVtZW50LnNjcm9sbFRvcCB8fCBfZG9jLmJvZHkuc2Nyb2xsVG9wIHx8IDA7XG5cdFx0XHR9LFxuXHRcdFx0X2dldERvY1Njcm9sbExlZnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICh3aW5kb3cucGFnZVhPZmZzZXQgIT0gbnVsbCkgPyB3aW5kb3cucGFnZVhPZmZzZXQgOiAoX2RvYy5zY3JvbGxMZWZ0ICE9IG51bGwpID8gX2RvYy5zY3JvbGxMZWZ0IDogX2RvY0VsZW1lbnQuc2Nyb2xsTGVmdCB8fCBfZG9jLmJvZHkuc2Nyb2xsTGVmdCB8fCAwO1xuXHRcdFx0fSxcblx0XHRcdF9hZGRTY3JvbGxMaXN0ZW5lciA9IGZ1bmN0aW9uKGUsIGNhbGxiYWNrKSB7XG5cdFx0XHRcdF9hZGRMaXN0ZW5lcihlLCBcInNjcm9sbFwiLCBjYWxsYmFjayk7XG5cdFx0XHRcdGlmICghX2lzUm9vdChlLnBhcmVudE5vZGUpKSB7XG5cdFx0XHRcdFx0X2FkZFNjcm9sbExpc3RlbmVyKGUucGFyZW50Tm9kZSwgY2FsbGJhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0X3JlbW92ZVNjcm9sbExpc3RlbmVyID0gZnVuY3Rpb24oZSwgY2FsbGJhY2spIHtcblx0XHRcdFx0X3JlbW92ZUxpc3RlbmVyKGUsIFwic2Nyb2xsXCIsIGNhbGxiYWNrKTtcblx0XHRcdFx0aWYgKCFfaXNSb290KGUucGFyZW50Tm9kZSkpIHtcblx0XHRcdFx0XHRfcmVtb3ZlU2Nyb2xsTGlzdGVuZXIoZS5wYXJlbnROb2RlLCBjYWxsYmFjayk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfaXNSb290ID0gZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0cmV0dXJuICEhKCFlIHx8IGUgPT09IF9kb2NFbGVtZW50IHx8IGUgPT09IF9kb2MgfHwgZSA9PT0gX2RvYy5ib2R5IHx8IGUgPT09IHdpbmRvdyB8fCAhZS5ub2RlVHlwZSB8fCAhZS5wYXJlbnROb2RlKTtcblx0XHRcdH0sXG5cdFx0XHRfZ2V0TWF4U2Nyb2xsID0gZnVuY3Rpb24oZWxlbWVudCwgYXhpcykge1xuXHRcdFx0XHR2YXIgZGltID0gKGF4aXMgPT09IFwieFwiKSA/IFwiV2lkdGhcIiA6IFwiSGVpZ2h0XCIsXG5cdFx0XHRcdFx0c2Nyb2xsID0gXCJzY3JvbGxcIiArIGRpbSxcblx0XHRcdFx0XHRjbGllbnQgPSBcImNsaWVudFwiICsgZGltLFxuXHRcdFx0XHRcdGJvZHkgPSBfZG9jLmJvZHk7XG5cdFx0XHRcdHJldHVybiBNYXRoLm1heCgwLCBfaXNSb290KGVsZW1lbnQpID8gTWF0aC5tYXgoX2RvY0VsZW1lbnRbc2Nyb2xsXSwgYm9keVtzY3JvbGxdKSAtICh3aW5kb3dbXCJpbm5lclwiICsgZGltXSB8fCBfZG9jRWxlbWVudFtjbGllbnRdIHx8IGJvZHlbY2xpZW50XSkgOiBlbGVtZW50W3Njcm9sbF0gLSBlbGVtZW50W2NsaWVudF0pO1xuXHRcdFx0fSxcblx0XHRcdF9yZWNvcmRNYXhTY3JvbGxzID0gZnVuY3Rpb24oZSkgeyAvL3JlY29yZHMgX2dzTWF4U2Nyb2xsWCBhbmQgX2dzTWF4U2Nyb2xsWSBwcm9wZXJ0aWVzIGZvciB0aGUgZWxlbWVudCBhbmQgYWxsIGFuY2VzdG9ycyB1cCB0aGUgY2hhaW4gc28gdGhhdCB3ZSBjYW4gY2FwIGl0LCBvdGhlcndpc2UgZHJhZ2dpbmcgYmV5b25kIHRoZSBlZGdlcyB3aXRoIGF1dG9TY3JvbGwgb24gY2FuIGVuZGxlc3NseSBzY3JvbGwuXG5cdFx0XHRcdHZhciBpc1Jvb3QgPSBfaXNSb290KGUpLFxuXHRcdFx0XHRcdHggPSBfZ2V0TWF4U2Nyb2xsKGUsIFwieFwiKSxcblx0XHRcdFx0XHR5ID0gX2dldE1heFNjcm9sbChlLCBcInlcIik7XG5cdFx0XHRcdGlmIChpc1Jvb3QpIHtcblx0XHRcdFx0XHRlID0gX3dpbmRvd1Byb3h5O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF9yZWNvcmRNYXhTY3JvbGxzKGUucGFyZW50Tm9kZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZS5fZ3NNYXhTY3JvbGxYID0geDtcblx0XHRcdFx0ZS5fZ3NNYXhTY3JvbGxZID0geTtcblx0XHRcdFx0ZS5fZ3NTY3JvbGxYID0gZS5zY3JvbGxMZWZ0IHx8IDA7XG5cdFx0XHRcdGUuX2dzU2Nyb2xsWSA9IGUuc2Nyb2xsVG9wIHx8IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvL2p1c3QgdXNlZCBmb3IgSUU4IGFuZCBlYXJsaWVyIHRvIG5vcm1hbGl6ZSBldmVudHMgYW5kIHBvcHVsYXRlIHBhZ2VYL3BhZ2VZXG5cdFx0XHRfcG9wdWxhdGVJRUV2ZW50ID0gZnVuY3Rpb24oZSwgcHJldmVudERlZmF1bHQpIHtcblx0XHRcdFx0ZSA9IGUgfHwgd2luZG93LmV2ZW50O1xuXHRcdFx0XHRfdGVtcEV2ZW50LnBhZ2VYID0gZS5jbGllbnRYICsgX2RvYy5ib2R5LnNjcm9sbExlZnQgKyBfZG9jRWxlbWVudC5zY3JvbGxMZWZ0O1xuXHRcdFx0XHRfdGVtcEV2ZW50LnBhZ2VZID0gZS5jbGllbnRZICsgX2RvYy5ib2R5LnNjcm9sbFRvcCArIF9kb2NFbGVtZW50LnNjcm9sbFRvcDtcblx0XHRcdFx0aWYgKHByZXZlbnREZWZhdWx0KSB7XG5cdFx0XHRcdFx0ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBfdGVtcEV2ZW50O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly9ncmFicyB0aGUgZmlyc3QgZWxlbWVudCBpdCBmaW5kcyAoYW5kIHdlIGluY2x1ZGUgdGhlIHdpbmRvdyBhcyBhbiBlbGVtZW50KSwgc28gaWYgaXQncyBzZWxlY3RvciB0ZXh0LCBpdCdsbCBmZWVkIHRoYXQgdmFsdWUgdG8gVHdlZW5MaXRlLnNlbGVjdG9yLCBpZiBpdCdzIGEgalF1ZXJ5IG9iamVjdCBvciBzb21lIG90aGVyIHNlbGVjdG9yIGVuZ2luZSdzIHJlc3VsdCwgaXQnbGwgZ3JhYiB0aGUgZmlyc3Qgb25lLCBhbmQgc2FtZSBmb3IgYW4gYXJyYXkuIElmIHRoZSB2YWx1ZSBkb2Vzbid0IGNvbnRhaW4gYSBET00gZWxlbWVudCwgaXQnbGwganVzdCByZXR1cm4gbnVsbC5cblx0XHRcdF91bndyYXBFbGVtZW50ID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0aWYgKCF2YWx1ZSkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodHlwZW9mKHZhbHVlKSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHRcdHZhbHVlID0gVHdlZW5MaXRlLnNlbGVjdG9yKHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodmFsdWUubGVuZ3RoICYmIHZhbHVlICE9PSB3aW5kb3cgJiYgdmFsdWVbMF0gJiYgdmFsdWVbMF0uc3R5bGUgJiYgIXZhbHVlLm5vZGVUeXBlKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSB2YWx1ZVswXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gKHZhbHVlID09PSB3aW5kb3cgfHwgKHZhbHVlLm5vZGVUeXBlICYmIHZhbHVlLnN0eWxlKSkgPyB2YWx1ZSA6IG51bGw7XG5cdFx0XHR9LFxuXG5cdFx0XHRfY2hlY2tQcmVmaXggPSBmdW5jdGlvbihlLCBwKSB7XG5cdFx0XHRcdHZhciBzID0gZS5zdHlsZSxcblx0XHRcdFx0XHRjYXBwZWQsIGksIGE7XG5cdFx0XHRcdGlmIChzW3BdID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhID0gW1wiT1wiLFwiTW96XCIsXCJtc1wiLFwiTXNcIixcIldlYmtpdFwiXTtcblx0XHRcdFx0XHRpID0gNTtcblx0XHRcdFx0XHRjYXBwZWQgPSBwLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcC5zdWJzdHIoMSk7XG5cdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xICYmIHNbYVtpXStjYXBwZWRdID09PSB1bmRlZmluZWQpIHsgfVxuXHRcdFx0XHRcdGlmIChpIDwgMCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdF9wcmVmaXggPSAoaSA9PT0gMykgPyBcIm1zXCIgOiBhW2ldO1xuXHRcdFx0XHRcdHAgPSBfcHJlZml4ICsgY2FwcGVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBwO1xuXHRcdFx0fSxcblxuXHRcdFx0X3NldFN0eWxlID0gZnVuY3Rpb24oZSwgcCwgdmFsdWUpIHtcblx0XHRcdFx0dmFyIHMgPSBlLnN0eWxlO1xuXHRcdFx0XHRpZiAoIXMpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHNbcF0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHAgPSBfY2hlY2tQcmVmaXgoZSwgcCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRcdFx0XHRpZiAocy5yZW1vdmVQcm9wZXJ0eSkge1xuXHRcdFx0XHRcdFx0cy5yZW1vdmVQcm9wZXJ0eShwLnJlcGxhY2UoLyhbQS1aXSkvZywgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG5cdFx0XHRcdFx0fSBlbHNlIHsgLy9ub3RlOiBvbGQgdmVyc2lvbnMgb2YgSUUgdXNlIFwicmVtb3ZlQXR0cmlidXRlKClcIiBpbnN0ZWFkIG9mIFwicmVtb3ZlUHJvcGVydHkoKVwiXG5cdFx0XHRcdFx0XHRzLnJlbW92ZUF0dHJpYnV0ZShwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoc1twXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0c1twXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRfZ2V0Q29tcHV0ZWRTdHlsZSA9IF9kb2MuZGVmYXVsdFZpZXcgPyBfZG9jLmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUgOiBfZW1wdHlGdW5jLFxuXHRcdFx0X2hvcml6RXhwID0gLyg/OkxlZnR8UmlnaHR8V2lkdGgpL2ksXG5cdFx0XHRfc3VmZml4RXhwID0gLyg/OlxcZHxcXC18XFwrfD18I3xcXC4pKi9nLFxuXHRcdFx0X2NvbnZlcnRUb1BpeGVscyA9IGZ1bmN0aW9uKHQsIHAsIHYsIHNmeCwgcmVjdXJzZSkge1xuXHRcdFx0XHRpZiAoc2Z4ID09PSBcInB4XCIgfHwgIXNmeCkgeyByZXR1cm4gdjsgfVxuXHRcdFx0XHRpZiAoc2Z4ID09PSBcImF1dG9cIiB8fCAhdikgeyByZXR1cm4gMDsgfVxuXHRcdFx0XHR2YXIgaG9yaXogPSBfaG9yaXpFeHAudGVzdChwKSxcblx0XHRcdFx0XHRub2RlID0gdCxcblx0XHRcdFx0XHRzdHlsZSA9IF90ZW1wRGl2LnN0eWxlLFxuXHRcdFx0XHRcdG5lZyA9ICh2IDwgMCksXG5cdFx0XHRcdFx0cGl4O1xuXHRcdFx0XHRpZiAobmVnKSB7XG5cdFx0XHRcdFx0diA9IC12O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChzZnggPT09IFwiJVwiICYmIHAuaW5kZXhPZihcImJvcmRlclwiKSAhPT0gLTEpIHtcblx0XHRcdFx0XHRwaXggPSAodiAvIDEwMCkgKiAoaG9yaXogPyB0LmNsaWVudFdpZHRoIDogdC5jbGllbnRIZWlnaHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjowIHNvbGlkIHJlZDtwb3NpdGlvbjpcIiArIF9nZXRTdHlsZSh0LCBcInBvc2l0aW9uXCIsIHRydWUpICsgXCI7bGluZS1oZWlnaHQ6MDtcIjtcblx0XHRcdFx0XHRpZiAoc2Z4ID09PSBcIiVcIiB8fCAhbm9kZS5hcHBlbmRDaGlsZCkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IHQucGFyZW50Tm9kZSB8fCBfZG9jLmJvZHk7XG5cdFx0XHRcdFx0XHRzdHlsZVsoaG9yaXogPyBcIndpZHRoXCIgOiBcImhlaWdodFwiKV0gPSB2ICsgc2Z4O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzdHlsZVsoaG9yaXogPyBcImJvcmRlckxlZnRXaWR0aFwiIDogXCJib3JkZXJUb3BXaWR0aFwiKV0gPSB2ICsgc2Z4O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRub2RlLmFwcGVuZENoaWxkKF90ZW1wRGl2KTtcblx0XHRcdFx0XHRwaXggPSBwYXJzZUZsb2F0KF90ZW1wRGl2Wyhob3JpeiA/IFwib2Zmc2V0V2lkdGhcIiA6IFwib2Zmc2V0SGVpZ2h0XCIpXSk7XG5cdFx0XHRcdFx0bm9kZS5yZW1vdmVDaGlsZChfdGVtcERpdik7XG5cdFx0XHRcdFx0aWYgKHBpeCA9PT0gMCAmJiAhcmVjdXJzZSkge1xuXHRcdFx0XHRcdFx0cGl4ID0gX2NvbnZlcnRUb1BpeGVscyh0LCBwLCB2LCBzZngsIHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbmVnID8gLXBpeCA6IHBpeDtcblx0XHRcdH0sXG5cdFx0XHRfY2FsY3VsYXRlT2Zmc2V0ID0gZnVuY3Rpb24odCwgcCkgeyAvL2ZvciBmaWd1cmluZyBvdXQgXCJ0b3BcIiBvciBcImxlZnRcIiBpbiBweCB3aGVuIGl0J3MgXCJhdXRvXCIuIFdlIG5lZWQgdG8gZmFjdG9yIGluIG1hcmdpbiB3aXRoIHRoZSBvZmZzZXRMZWZ0L29mZnNldFRvcFxuXHRcdFx0XHRpZiAoX2dldFN0eWxlKHQsIFwicG9zaXRpb25cIiwgdHJ1ZSkgIT09IFwiYWJzb2x1dGVcIikgeyByZXR1cm4gMDsgfVxuXHRcdFx0XHR2YXIgZGltID0gKChwID09PSBcImxlZnRcIikgPyBcIkxlZnRcIiA6IFwiVG9wXCIpLFxuXHRcdFx0XHRcdHYgPSBfZ2V0U3R5bGUodCwgXCJtYXJnaW5cIiArIGRpbSwgdHJ1ZSk7XG5cdFx0XHRcdHJldHVybiB0W1wib2Zmc2V0XCIgKyBkaW1dIC0gKF9jb252ZXJ0VG9QaXhlbHModCwgcCwgcGFyc2VGbG9hdCh2KSwgKHYgKyBcIlwiKS5yZXBsYWNlKF9zdWZmaXhFeHAsIFwiXCIpKSB8fCAwKTtcblx0XHRcdH0sXG5cblx0XHRcdF9nZXRTdHlsZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3AsIGtlZXBVbml0cykge1xuXHRcdFx0XHR2YXIgcnYgPSAoZWxlbWVudC5fZ3NUcmFuc2Zvcm0gfHwge30pW3Byb3BdLFxuXHRcdFx0XHRcdGNzO1xuXHRcdFx0XHRpZiAocnYgfHwgcnYgPT09IDApIHtcblx0XHRcdFx0XHRyZXR1cm4gcnY7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZWxlbWVudC5zdHlsZVtwcm9wXSkge1xuXHRcdFx0XHRcdHJ2ID0gZWxlbWVudC5zdHlsZVtwcm9wXTtcblx0XHRcdFx0fSBlbHNlIGlmICgoY3MgPSBfZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSkpIHtcblx0XHRcdFx0XHRydiA9IGNzLmdldFByb3BlcnR5VmFsdWUocHJvcC5yZXBsYWNlKC8oW0EtWl0pL2csIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpO1xuXHRcdFx0XHRcdHJ2ID0gKHJ2IHx8IGNzLmxlbmd0aCkgPyBydiA6IGNzW3Byb3BdOyAvL09wZXJhIGJlaGF2ZXMgVkVSWSBzdHJhbmdlbHkgLSBsZW5ndGggaXMgdXN1YWxseSAwIGFuZCBjc1twcm9wXSBpcyB0aGUgb25seSB3YXkgdG8gZ2V0IGFjY3VyYXRlIHJlc3VsdHMgRVhDRVBUIHdoZW4gY2hlY2tpbmcgZm9yIC1vLXRyYW5zZm9ybSB3aGljaCBvbmx5IHdvcmtzIHdpdGggY3MuZ2V0UHJvcGVydHlWYWx1ZSgpIVxuXHRcdFx0XHR9IGVsc2UgaWYgKGVsZW1lbnQuY3VycmVudFN0eWxlKSB7XG5cdFx0XHRcdFx0cnYgPSBlbGVtZW50LmN1cnJlbnRTdHlsZVtwcm9wXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocnYgPT09IFwiYXV0b1wiICYmIChwcm9wID09PSBcInRvcFwiIHx8IHByb3AgPT09IFwibGVmdFwiKSkge1xuXHRcdFx0XHRcdHJ2ID0gX2NhbGN1bGF0ZU9mZnNldChlbGVtZW50LCBwcm9wKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4ga2VlcFVuaXRzID8gcnYgOiBwYXJzZUZsb2F0KHJ2KSB8fCAwO1xuXHRcdFx0fSxcblxuXHRcdFx0X2Rpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbihpbnN0YW5jZSwgdHlwZSwgY2FsbGJhY2tOYW1lKSB7XG5cdFx0XHRcdHZhciB2YXJzID0gaW5zdGFuY2UudmFycyxcblx0XHRcdFx0XHRjYWxsYmFjayA9IHZhcnNbY2FsbGJhY2tOYW1lXSxcblx0XHRcdFx0XHRsaXN0ZW5lcnMgPSBpbnN0YW5jZS5fbGlzdGVuZXJzW3R5cGVdO1xuXHRcdFx0XHRpZiAodHlwZW9mKGNhbGxiYWNrKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2suYXBwbHkodmFyc1tjYWxsYmFja05hbWUgKyBcIlNjb3BlXCJdIHx8IHZhcnMuY2FsbGJhY2tTY29wZSB8fCBpbnN0YW5jZSwgdmFyc1tjYWxsYmFja05hbWUgKyBcIlBhcmFtc1wiXSB8fCBbaW5zdGFuY2UucG9pbnRlckV2ZW50XSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGxpc3RlbmVycykge1xuXHRcdFx0XHRcdGluc3RhbmNlLmRpc3BhdGNoRXZlbnQodHlwZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRfZ2V0Qm91bmRzID0gZnVuY3Rpb24ob2JqLCBjb250ZXh0KSB7IC8vYWNjZXB0cyBhbnkgb2YgdGhlIGZvbGxvd2luZzogYSBET00gZWxlbWVudCwgalF1ZXJ5IG9iamVjdCwgc2VsZWN0b3IgdGV4dCwgb3IgYW4gb2JqZWN0IGRlZmluaW5nIGJvdW5kcyBhcyB7dG9wLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0fSBvciB7bWluWCwgbWF4WCwgbWluWSwgbWF4WX0uIFJldHVybnMgYW4gb2JqZWN0IHdpdGggbGVmdCwgdG9wLCB3aWR0aCwgYW5kIGhlaWdodCBwcm9wZXJ0aWVzLlxuXHRcdFx0XHR2YXIgZSA9IF91bndyYXBFbGVtZW50KG9iaiksXG5cdFx0XHRcdFx0dG9wLCBsZWZ0LCBvZmZzZXQ7XG5cdFx0XHRcdGlmICghZSkge1xuXHRcdFx0XHRcdGlmIChvYmoubGVmdCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRvZmZzZXQgPSBfZ2V0T2Zmc2V0VHJhbnNmb3JtT3JpZ2luKGNvbnRleHQpOyAvL3RoZSBib3VuZHMgc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBvcmlnaW5cblx0XHRcdFx0XHRcdHJldHVybiB7bGVmdDogb2JqLmxlZnQgLSBvZmZzZXQueCwgdG9wOiBvYmoudG9wIC0gb2Zmc2V0LnksIHdpZHRoOiBvYmoud2lkdGgsIGhlaWdodDogb2JqLmhlaWdodH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxlZnQgPSBvYmoubWluIHx8IG9iai5taW5YIHx8IG9iai5taW5Sb3RhdGlvbiB8fCAwO1xuXHRcdFx0XHRcdHRvcCA9IG9iai5taW4gfHwgb2JqLm1pblkgfHwgMDtcblx0XHRcdFx0XHRyZXR1cm4ge2xlZnQ6bGVmdCwgdG9wOnRvcCwgd2lkdGg6KG9iai5tYXggfHwgb2JqLm1heFggfHwgb2JqLm1heFJvdGF0aW9uIHx8IDApIC0gbGVmdCwgaGVpZ2h0OihvYmoubWF4IHx8IG9iai5tYXhZIHx8IDApIC0gdG9wfTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gX2dldEVsZW1lbnRCb3VuZHMoZSwgY29udGV4dCk7XG5cdFx0XHR9LFxuXG5cdFx0XHRfc3ZnQm9yZGVyRmFjdG9yLFxuXHRcdFx0X3N2Z0JvcmRlclNjYWxlcyxcblx0XHRcdF9zdmdTY3JvbGxPZmZzZXQsXG5cdFx0XHRfaGFzQm9yZGVyQnVnLFxuXHRcdFx0X2hhc1JlcGFyZW50QnVnLC8vc29tZSBicm93c2VycywgbGlrZSBDaHJvbWUgNDksIGFsdGVyIHRoZSBvZmZzZXRUb3Avb2Zmc2V0TGVmdC9vZmZzZXRQYXJlbnQgb2YgZWxlbWVudHMgd2hlbiBhIG5vbi1pZGVudGl0eSB0cmFuc2Zvcm0gaXMgYXBwbGllZC5cblx0XHRcdF9zZXRFbnZpcm9ubWVudFZhcmlhYmxlcyA9IGZ1bmN0aW9uKCkgeyAvL3NvbWUgYnJvd3NlcnMgZmFjdG9yIHRoZSBib3JkZXIgaW50byB0aGUgU1ZHIGNvb3JkaW5hdGUgc3BhY2UsIHNvbWUgZG9uJ3QgKGxpa2UgRmlyZWZveCkuIFNvbWUgYXBwbHkgdHJhbnNmb3JtcyB0byB0aGVtLCBzb21lIGRvbid0LiBXZSBmZWF0dXJlLWRldGVjdCBoZXJlIHNvIHdlIGtub3cgaG93IHRvIGhhbmRsZSB0aGUgYm9yZGVyKHMpLiBXZSBjYW4ndCBkbyB0aGlzIGltbWVkaWF0ZWx5IC0gd2UgbXVzdCB3YWl0IGZvciB0aGUgZG9jdW1lbnQuYm9keSB0byBleGlzdC5cblx0XHRcdFx0aWYgKCFfZG9jLmNyZWF0ZUVsZW1lbnROUykge1xuXHRcdFx0XHRcdF9zdmdCb3JkZXJGYWN0b3IgPSAwO1xuXHRcdFx0XHRcdF9zdmdCb3JkZXJTY2FsZXMgPSBmYWxzZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGRpdiA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdFx0XHRcdHN2ZyA9IF9kb2MuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgXCJzdmdcIiksXG5cdFx0XHRcdFx0d3JhcHBlciA9IF9jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdFx0XHRcdHN0eWxlID0gZGl2LnN0eWxlLFxuXHRcdFx0XHRcdHBhcmVudCA9IF9kb2MuYm9keSB8fCBfZG9jRWxlbWVudCxcblx0XHRcdFx0XHRtYXRyaXgsIGUxLCBwb2ludCwgb2xkVmFsdWU7XG5cdFx0XHRcdGlmIChfZG9jLmJvZHkgJiYgX3RyYW5zZm9ybVByb3ApIHtcblx0XHRcdFx0XHRzdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRcdFx0XHRwYXJlbnQuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG5cdFx0XHRcdFx0d3JhcHBlci5hcHBlbmRDaGlsZChkaXYpO1xuXHRcdFx0XHRcdG9sZFZhbHVlID0gZGl2Lm9mZnNldFBhcmVudDtcblx0XHRcdFx0XHR3cmFwcGVyLnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IFwicm90YXRlKDFkZWcpXCI7XG5cdFx0XHRcdFx0X2hhc1JlcGFyZW50QnVnID0gKGRpdi5vZmZzZXRQYXJlbnQgPT09IG9sZFZhbHVlKTtcblx0XHRcdFx0XHR3cmFwcGVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdFx0XHRcdHN0eWxlLmhlaWdodCA9IFwiMTBweFwiO1xuXHRcdFx0XHRcdG9sZFZhbHVlID0gZGl2Lm9mZnNldFRvcDtcblx0XHRcdFx0XHR3cmFwcGVyLnN0eWxlLmJvcmRlciA9IFwiNXB4IHNvbGlkIHJlZFwiO1xuXHRcdFx0XHRcdF9oYXNCb3JkZXJCdWcgPSAob2xkVmFsdWUgIT09IGRpdi5vZmZzZXRUb3ApOyAvL3NvbWUgYnJvd3NlcnMsIGxpa2UgRmlyZWZveCAzOCwgY2F1c2UgdGhlIG9mZnNldFRvcC9MZWZ0IHRvIGJlIGFmZmVjdGVkIGJ5IGEgcGFyZW50J3MgYm9yZGVyLlxuXHRcdFx0XHRcdHBhcmVudC5yZW1vdmVDaGlsZCh3cmFwcGVyKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZSA9IHN2Zy5zdHlsZTtcblx0XHRcdFx0c3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwid2lkdGhcIiwgXCI0MDBweFwiKTtcblx0XHRcdFx0c3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsIFwiaGVpZ2h0XCIsIFwiNDAwcHhcIik7XG5cdFx0XHRcdHN2Zy5zZXRBdHRyaWJ1dGVOUyhudWxsLCBcInZpZXdCb3hcIiwgXCIwIDAgNDAwIDQwMFwiKTtcblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0XHRcdFx0c3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG5cdFx0XHRcdHN0eWxlLmJvcmRlciA9IFwiMHB4IHNvbGlkIHJlZFwiO1xuXHRcdFx0XHRzdHlsZS50cmFuc2Zvcm0gPSBcIm5vbmVcIjtcblx0XHRcdFx0Ly8gaW4gc29tZSBicm93c2VycyAobGlrZSBjZXJ0YWluIGZsYXZvcnMgb2YgQW5kcm9pZCksIHRoZSBnZXRTY3JlZW5DVE0oKSBtYXRyaXggaXMgY29udGFtaW5hdGVkIGJ5IHRoZSBzY3JvbGwgcG9zaXRpb24uIFdlIGNhbiBydW4gc29tZSBsb2dpYyBoZXJlIHRvIGRldGVjdCB0aGF0IGNvbmRpdGlvbiwgYnV0IHdlIGVuZGVkIHVwIG5vdCBuZWVkaW5nIHRoaXMgYmVjYXVzZSB3ZSBmb3VuZCBhbm90aGVyIHdvcmthcm91bmQgdXNpbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuXG5cdFx0XHRcdGRpdi5zdHlsZS5jc3NUZXh0ID0gXCJ3aWR0aDoxMDBweDtoZWlnaHQ6MTAwcHg7b3ZlcmZsb3c6c2Nyb2xsOy1tcy1vdmVyZmxvdy1zdHlsZTpub25lO1wiO1xuXHRcdFx0XHRwYXJlbnQuYXBwZW5kQ2hpbGQoZGl2KTtcblx0XHRcdFx0ZGl2LmFwcGVuZENoaWxkKHN2Zyk7XG5cdFx0XHRcdHBvaW50ID0gc3ZnLmNyZWF0ZVNWR1BvaW50KCkubWF0cml4VHJhbnNmb3JtKHN2Zy5nZXRTY3JlZW5DVE0oKSk7XG5cdFx0XHRcdGUxID0gcG9pbnQueTtcblx0XHRcdFx0ZGl2LnNjcm9sbFRvcCA9IDEwMDtcblx0XHRcdFx0cG9pbnQueCA9IHBvaW50LnkgPSAwO1xuXHRcdFx0XHRwb2ludCA9IHBvaW50Lm1hdHJpeFRyYW5zZm9ybShzdmcuZ2V0U2NyZWVuQ1RNKCkpO1xuXHRcdFx0XHRfc3ZnU2Nyb2xsT2Zmc2V0ID0gKGUxIC0gcG9pbnQueSA8IDEwMC4xKSA/IDAgOiBlMSAtIHBvaW50LnkgLSAxNTA7XG5cdFx0XHRcdGRpdi5yZW1vdmVDaGlsZChzdmcpO1xuXHRcdFx0XHRwYXJlbnQucmVtb3ZlQ2hpbGQoZGl2KTtcblx0XHRcdFx0Ly8gLS0gZW5kIF9zdmdTY3JvbGxPZmZzZXQgY2FsY3VsYXRpb24uXG5cdFx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChzdmcpO1xuXHRcdFx0XHRtYXRyaXggPSBzdmcuZ2V0U2NyZWVuQ1RNKCk7XG5cdFx0XHRcdGUxID0gbWF0cml4LmU7XG5cdFx0XHRcdHN0eWxlLmJvcmRlciA9IFwiNTBweCBzb2xpZCByZWRcIjtcblx0XHRcdFx0bWF0cml4ID0gc3ZnLmdldFNjcmVlbkNUTSgpO1xuXHRcdFx0XHRpZiAoZTEgPT09IDAgJiYgbWF0cml4LmUgPT09IDAgJiYgbWF0cml4LmYgPT09IDAgJiYgbWF0cml4LmEgPT09IDEpIHsgLy9PcGVyYSBoYXMgYSBidW5jaCBvZiBidWdzIC0gaXQgZG9lc24ndCBhZGp1c3QgdGhlIHgveSBvZiB0aGUgbWF0cml4LCBub3IgZG9lcyBpdCBzY2FsZSB3aGVuIGJveC1zaXppbmcgaXMgYm9yZGVyLWJveCBidXQgaXQgZG9lcyBzbyBlbHNld2hlcmU7IHRvIGdldCB0aGUgY29ycmVjdCBiZWhhdmlvciB3ZSBzZXQgX3N2Z0JvcmRlclNjYWxlcyB0byB0cnVlLlxuXHRcdFx0XHRcdF9zdmdCb3JkZXJGYWN0b3IgPSAxO1xuXHRcdFx0XHRcdF9zdmdCb3JkZXJTY2FsZXMgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdF9zdmdCb3JkZXJGYWN0b3IgPSAoZTEgIT09IG1hdHJpeC5lKSA/IDEgOiAwO1xuXHRcdFx0XHRcdF9zdmdCb3JkZXJTY2FsZXMgPSAobWF0cml4LmEgIT09IDEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBhcmVudC5yZW1vdmVDaGlsZChzdmcpO1xuXHRcdFx0fSxcblxuXHRcdFx0X3N1cHBvcnRzM0QgPSAoX2NoZWNrUHJlZml4KF90ZW1wRGl2LCBcInBlcnNwZWN0aXZlXCIpICE9PSBcIlwiKSxcblxuXHRcdFx0Ly8gc3RhcnQgbWF0cml4IGFuZCBwb2ludCBjb252ZXJzaW9uIG1ldGhvZHMuLi5cblx0XHRcdF90cmFuc2Zvcm1PcmlnaW5Qcm9wID0gX2NoZWNrUHJlZml4KF90ZW1wRGl2LCBcInRyYW5zZm9ybU9yaWdpblwiKS5yZXBsYWNlKC9ebXMvZywgXCJNc1wiKS5yZXBsYWNlKC8oW0EtWl0pL2csIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRfdHJhbnNmb3JtUHJvcCA9IF9jaGVja1ByZWZpeChfdGVtcERpdiwgXCJ0cmFuc2Zvcm1cIiksXG5cdFx0XHRfdHJhbnNmb3JtUHJvcENTUyA9IF90cmFuc2Zvcm1Qcm9wLnJlcGxhY2UoL15tcy9nLCBcIk1zXCIpLnJlcGxhY2UoLyhbQS1aXSkvZywgXCItJDFcIikudG9Mb3dlckNhc2UoKSxcblx0XHRcdF9wb2ludDEgPSB7fSwgLy93ZSByZXVzZSBfcG9pbnQxIGFuZCBfcG9pbnQyIG9iamVjdHMgaW5zaWRlIG1hdHJpeCBhbmQgcG9pbnQgY29udmVyc2lvbiBtZXRob2RzIHRvIGNvbnNlcnZlIG1lbW9yeSBhbmQgbWluaW1pemUgZ2FyYmFnZSBjb2xsZWN0aW9uIHRhc2tzLlxuXHRcdFx0X3BvaW50MiA9IHt9LFxuXHRcdFx0X1NWR0VsZW1lbnQgPSB3aW5kb3cuU1ZHRWxlbWVudCxcblx0XHRcdF9pc1NWRyA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0cmV0dXJuICEhKF9TVkdFbGVtZW50ICYmIHR5cGVvZihlLmdldEJCb3gpID09PSBcImZ1bmN0aW9uXCIgJiYgZS5nZXRDVE0gJiYgKCFlLnBhcmVudE5vZGUgfHwgKGUucGFyZW50Tm9kZS5nZXRCQm94ICYmIGUucGFyZW50Tm9kZS5nZXRDVE0pKSk7XG5cdFx0XHR9LFxuXHRcdFx0X2lzSUUxMG9yQmVsb3cgPSAoKCgvTVNJRSAoWzAtOV17MSx9W1xcLjAtOV17MCx9KS8pLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgKC9UcmlkZW50XFwvLipydjooWzAtOV17MSx9W1xcLjAtOV17MCx9KS8pLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCkpICYmIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApIDwgMTEpLCAvL0lkZWFsbHkgd2UnZCBhdm9pZCB1c2VyIGFnZW50IHNuaWZmaW5nLCBidXQgdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgd2F5IHRvIGZlYXR1cmUtZGV0ZWN0IGFuZCBzZW5zZSBhIGJvcmRlci1yZWxhdGVkIGJ1ZyB0aGF0IG9ubHkgYWZmZWN0cyBJRTEwIGFuZCBJRTkuXG5cdFx0XHRfdGVtcFRyYW5zZm9ybXMgPSBbXSxcblx0XHRcdF90ZW1wRWxlbWVudHMgPSBbXSxcblx0XHRcdF9nZXRTVkdPZmZzZXRzID0gZnVuY3Rpb24oZSkgeyAvL1NWRyBlbGVtZW50cyBkb24ndCBhbHdheXMgcmVwb3J0IG9mZnNldFRvcC9vZmZzZXRMZWZ0L29mZnNldFBhcmVudCBhdCBhbGwgKEknbSBsb29raW5nIGF0IHlvdSwgRmlyZWZveCAyOSBhbmQgQW5kcm9pZCksIHNvIHdlIGhhdmUgdG8gZG8gc29tZSB3b3JrIHRvIG1hbnVmYWN0dXJlIHRob3NlIHZhbHVlcy4gWW91IGNhbiBwYXNzIGFueSBTVkcgZWxlbWVudCBhbmQgaXQnbGwgc3BpdCBiYWNrIGFuIG9iamVjdCB3aXRoIG9mZnNldFRvcCwgb2Zmc2V0TGVmdCwgb2Zmc2V0UGFyZW50LCBzY2FsZVgsIGFuZCBzY2FsZVkgcHJvcGVydGllcy4gV2UgbmVlZCB0aGUgc2NhbGVYIGFuZCBzY2FsZVkgdG8gaGFuZGxlIHRoZSB3YXkgU1ZHIGNhbiByZXNpemUgaXRzZWxmIGJhc2VkIG9uIHRoZSBjb250YWluZXIuXG5cdFx0XHRcdGlmICghZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QgfHwgIWUucGFyZW50Tm9kZSB8fCAhX3RyYW5zZm9ybVByb3ApIHtcblx0XHRcdFx0XHRyZXR1cm4ge29mZnNldFRvcDowLCBvZmZzZXRMZWZ0OjAsIHNjYWxlWDoxLCBzY2FsZVk6MSwgb2Zmc2V0UGFyZW50Ol9kb2NFbGVtZW50fTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoRHJhZ2dhYmxlLmNhY2hlU1ZHRGF0YSAhPT0gZmFsc2UgJiYgZS5fZENhY2hlICYmIGUuX2RDYWNoZS5sYXN0VXBkYXRlID09PSBUd2VlbkxpdGUudGlja2VyLmZyYW1lKSB7IC8vcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uLiBBc3N1bWUgdGhhdCBpZiB0aGUgb2Zmc2V0cyBhcmUgcmVxdWVzdGVkIGFnYWluIG9uIHRoZSBzYW1lIHRpY2ssIHdlIGNhbiBqdXN0IGZlZWQgYmFjayB0aGUgdmFsdWVzIHdlIGFscmVhZHkgY2FsY3VsYXRlZCAobm8gbmVlZCB0byBrZWVwIHJlY2FsY3VsYXRpbmcgdW50aWwgYW5vdGhlciB0aWNrIGVsYXBzZXMpLlxuXHRcdFx0XHRcdHJldHVybiBlLl9kQ2FjaGU7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGN1ckVsZW1lbnQgPSBlLFxuXHRcdFx0XHRcdGNhY2hlID0gX2NhY2hlKGUpLFxuXHRcdFx0XHRcdGVSZWN0LCBwYXJlbnRSZWN0LCBvZmZzZXRQYXJlbnQsIGNzLCBtLCBpLCBwb2ludDEsIHBvaW50MiwgYm9yZGVyV2lkdGgsIGJvcmRlckhlaWdodCwgd2lkdGgsIGhlaWdodDtcblx0XHRcdFx0Y2FjaGUubGFzdFVwZGF0ZSA9IFR3ZWVuTGl0ZS50aWNrZXIuZnJhbWU7XG5cdFx0XHRcdGlmIChlLmdldEJCb3ggJiYgIWNhY2hlLmlzU1ZHUm9vdCkgeyAvL2lmIGl0J3MgYSBuZXN0ZWQvY2hpbGQgU1ZHIGVsZW1lbnQsIHdlIG11c3QgZmluZCB0aGUgcGFyZW50IFNWRyBjYW52YXMgYW5kIG1lYXN1cmUgdGhlIG9mZnNldCBmcm9tIHRoZXJlLlxuXHRcdFx0XHRcdGN1ckVsZW1lbnQgPSBlLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0ZVJlY3QgPSBlLmdldEJCb3goKTtcblx0XHRcdFx0XHR3aGlsZSAoY3VyRWxlbWVudCAmJiAoY3VyRWxlbWVudC5ub2RlTmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCkgIT09IFwic3ZnXCIpIHtcblx0XHRcdFx0XHRcdGN1ckVsZW1lbnQgPSBjdXJFbGVtZW50LnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNzID0gX2dldFNWR09mZnNldHMoY3VyRWxlbWVudCk7XG5cdFx0XHRcdFx0Y2FjaGUub2Zmc2V0VG9wID0gZVJlY3QueSAqIGNzLnNjYWxlWTtcblx0XHRcdFx0XHRjYWNoZS5vZmZzZXRMZWZ0ID0gZVJlY3QueCAqIGNzLnNjYWxlWDtcblx0XHRcdFx0XHRjYWNoZS5zY2FsZVggPSBjcy5zY2FsZVg7XG5cdFx0XHRcdFx0Y2FjaGUuc2NhbGVZID0gY3Muc2NhbGVZO1xuXHRcdFx0XHRcdGNhY2hlLm9mZnNldFBhcmVudCA9IGN1ckVsZW1lbnQgfHwgX2RvY0VsZW1lbnQ7XG5cdFx0XHRcdFx0cmV0dXJuIGNhY2hlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vb25seSByb290IFNWRyBlbGVtZW50cyBjb250aW51ZSBoZXJlLi4uXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IGNhY2hlLm9mZnNldFBhcmVudDtcblx0XHRcdFx0aWYgKG9mZnNldFBhcmVudCA9PT0gX2RvYy5ib2R5KSB7XG5cdFx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gX2RvY0VsZW1lbnQ7IC8vYXZvaWRzIHByb2JsZW1zIHdpdGggbWFyZ2lucy9wYWRkaW5nIG9uIHRoZSBib2R5XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly93YWxrIHVwIHRoZSBhbmNlc3RvcnMgYW5kIHJlY29yZCBhbnkgbm9uLWlkZW50aXR5IHRyYW5zZm9ybXMgKGFuZCByZXNldCB0aGVtIHRvIFwibm9uZVwiKSB1bnRpbCB3ZSByZWFjaCB0aGUgb2Zmc2V0UGFyZW50LiBXZSBtdXN0IGRvIHRoaXMgc28gdGhhdCB0aGUgZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgaXMgYWNjdXJhdGUgZm9yIG1lYXN1cmluZyB0aGUgb2Zmc2V0VG9wL29mZnNldExlZnQuIFdlJ2xsIHJldmVydCB0aGUgdmFsdWVzIGxhdGVyLi4uXG5cdFx0XHRcdF90ZW1wRWxlbWVudHMubGVuZ3RoID0gX3RlbXBUcmFuc2Zvcm1zLmxlbmd0aCA9IDA7XG5cdFx0XHRcdHdoaWxlIChjdXJFbGVtZW50KSB7XG5cdFx0XHRcdFx0bSA9IF9nZXRTdHlsZShjdXJFbGVtZW50LCBfdHJhbnNmb3JtUHJvcCwgdHJ1ZSk7XG5cdFx0XHRcdFx0aWYgKG0gIT09IFwibWF0cml4KDEsIDAsIDAsIDEsIDAsIDApXCIgJiYgbSAhPT0gXCJub25lXCIgJiYgbSAhPT0gXCJ0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KVwiKSB7XG5cdFx0XHRcdFx0XHRfdGVtcEVsZW1lbnRzLnB1c2goY3VyRWxlbWVudCk7XG5cdFx0XHRcdFx0XHRfdGVtcFRyYW5zZm9ybXMucHVzaChjdXJFbGVtZW50LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSk7XG5cdFx0XHRcdFx0XHRjdXJFbGVtZW50LnN0eWxlW190cmFuc2Zvcm1Qcm9wXSA9IFwibm9uZVwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoY3VyRWxlbWVudCA9PT0gb2Zmc2V0UGFyZW50KSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3VyRWxlbWVudCA9IGN1ckVsZW1lbnQucGFyZW50Tm9kZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwYXJlbnRSZWN0ID0gb2Zmc2V0UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHRtID0gZS5nZXRTY3JlZW5DVE0oKTtcblx0XHRcdFx0cG9pbnQyID0gZS5jcmVhdGVTVkdQb2ludCgpO1xuXHRcdFx0XHRwb2ludDEgPSBwb2ludDIubWF0cml4VHJhbnNmb3JtKG0pO1xuXHRcdFx0XHRwb2ludDIueCA9IHBvaW50Mi55ID0gMTA7XG5cdFx0XHRcdHBvaW50MiA9IHBvaW50Mi5tYXRyaXhUcmFuc2Zvcm0obSk7XG5cdFx0XHRcdGNhY2hlLnNjYWxlWCA9IChwb2ludDIueCAtIHBvaW50MS54KSAvIDEwO1xuXHRcdFx0XHRjYWNoZS5zY2FsZVkgPSAocG9pbnQyLnkgLSBwb2ludDEueSkgLyAxMDtcblx0XHRcdFx0aWYgKF9zdmdCb3JkZXJGYWN0b3IgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdF9zZXRFbnZpcm9ubWVudFZhcmlhYmxlcygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjYWNoZS5ib3JkZXJCb3ggJiYgIV9zdmdCb3JkZXJTY2FsZXMgJiYgZS5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKSkgeyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgU2FmYXJpKSBkb24ndCBwcm9wZXJseSBzY2FsZSB0aGUgbWF0cml4IHRvIGFjY29tbW9kYXRlIHRoZSBib3JkZXIgd2hlbiBib3gtc2l6aW5nIGlzIGJvcmRlci1ib3gsIHNvIHdlIG11c3QgY2FsY3VsYXRlIGl0IGhlcmUuLi5cblx0XHRcdFx0XHRjcyA9IF9nZXRDb21wdXRlZFN0eWxlKGUpIHx8IHt9O1xuXHRcdFx0XHRcdGJvcmRlcldpZHRoID0gKHBhcnNlRmxvYXQoY3MuYm9yZGVyTGVmdFdpZHRoKSArIHBhcnNlRmxvYXQoY3MuYm9yZGVyUmlnaHRXaWR0aCkpIHx8IDA7XG5cdFx0XHRcdFx0Ym9yZGVySGVpZ2h0ID0gKHBhcnNlRmxvYXQoY3MuYm9yZGVyVG9wV2lkdGgpICsgcGFyc2VGbG9hdChjcy5ib3JkZXJCb3R0b21XaWR0aCkpIHx8IDA7XG5cdFx0XHRcdFx0d2lkdGggPSBwYXJzZUZsb2F0KGNzLndpZHRoKSB8fCAwO1xuXHRcdFx0XHRcdGhlaWdodCA9IHBhcnNlRmxvYXQoY3MuaGVpZ2h0KSB8fCAwO1xuXHRcdFx0XHRcdGNhY2hlLnNjYWxlWCAqPSAod2lkdGggLSBib3JkZXJXaWR0aCkgLyB3aWR0aDtcblx0XHRcdFx0XHRjYWNoZS5zY2FsZVkgKj0gKGhlaWdodCAtIGJvcmRlckhlaWdodCkgLyBoZWlnaHQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKF9zdmdTY3JvbGxPZmZzZXQpIHsgLy9zb21lIGJyb3dzZXJzIChsaWtlIENocm9tZSBmb3IgQW5kcm9pZCkgaGF2ZSBidWdzIGluIHRoZSB3YXkgZ2V0U2NyZWVuQ1RNKCkgaXMgcmVwb3J0ZWQgKGl0IGRvZXNuJ3QgZmFjdG9yIGluIHNjcm9sbCBwb3NpdGlvbiksIHNvIHdlIG11c3QgcmV2ZXJ0IHRvIGEgbW9yZSBleHBlbnNpdmUgdGVjaG5pcXVlIGZvciBjYWxjdWxhdGluZyBvZmZzZXRUb3AvTGVmdC5cblx0XHRcdFx0XHRlUmVjdCA9IGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRcdFx0Y2FjaGUub2Zmc2V0TGVmdCA9IGVSZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQ7XG5cdFx0XHRcdFx0Y2FjaGUub2Zmc2V0VG9wID0gZVJlY3QudG9wIC0gcGFyZW50UmVjdC50b3A7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2FjaGUub2Zmc2V0TGVmdCA9IHBvaW50MS54IC0gcGFyZW50UmVjdC5sZWZ0O1xuXHRcdFx0XHRcdGNhY2hlLm9mZnNldFRvcCA9IHBvaW50MS55IC0gcGFyZW50UmVjdC50b3A7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y2FjaGUub2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50O1xuXHRcdFx0XHRpID0gX3RlbXBFbGVtZW50cy5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdF90ZW1wRWxlbWVudHNbaV0uc3R5bGVbX3RyYW5zZm9ybVByb3BdID0gX3RlbXBUcmFuc2Zvcm1zW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBjYWNoZTtcblx0XHRcdH0sXG5cdFx0XHRfZ2V0T2Zmc2V0VHJhbnNmb3JtT3JpZ2luID0gZnVuY3Rpb24oZSwgZGVjb3JhdGVlKSB7IC8vcmV0dXJucyB0aGUgeC95IHBvc2l0aW9uIG9mIHRoZSB0cmFuc2Zvcm1PcmlnaW4gb2YgdGhlIGVsZW1lbnQsIGluIGl0cyBvd24gbG9jYWwgY29vcmRpbmF0ZSBzeXN0ZW0gKHBpeGVscyksIG9mZnNldCBmcm9tIHRoZSB0b3AgbGVmdCBjb3JuZXIuXG5cdFx0XHRcdGRlY29yYXRlZSA9IGRlY29yYXRlZSB8fCB7fTtcblx0XHRcdFx0aWYgKCFlIHx8IGUgPT09IF9kb2NFbGVtZW50IHx8ICFlLnBhcmVudE5vZGUgfHwgZSA9PT0gd2luZG93KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHt4OjAsIHk6MH07XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGNzID0gX2dldENvbXB1dGVkU3R5bGUoZSksXG5cdFx0XHRcdFx0diA9IChfdHJhbnNmb3JtT3JpZ2luUHJvcCAmJiBjcykgPyBjcy5nZXRQcm9wZXJ0eVZhbHVlKF90cmFuc2Zvcm1PcmlnaW5Qcm9wKSA6IFwiNTAlIDUwJVwiLFxuXHRcdFx0XHRcdGEgPSB2LnNwbGl0KFwiIFwiKSxcblx0XHRcdFx0XHR4ID0gKHYuaW5kZXhPZihcImxlZnRcIikgIT09IC0xKSA/IFwiMCVcIiA6ICh2LmluZGV4T2YoXCJyaWdodFwiKSAhPT0gLTEpID8gXCIxMDAlXCIgOiBhWzBdLFxuXHRcdFx0XHRcdHkgPSAodi5pbmRleE9mKFwidG9wXCIpICE9PSAtMSkgPyBcIjAlXCIgOiAodi5pbmRleE9mKFwiYm90dG9tXCIpICE9PSAtMSkgPyBcIjEwMCVcIiA6IGFbMV07XG5cdFx0XHRcdGlmICh5ID09PSBcImNlbnRlclwiIHx8IHkgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHkgPSBcIjUwJVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh4ID09PSBcImNlbnRlclwiIHx8IGlzTmFOKHBhcnNlRmxvYXQoeCkpKSB7IC8vcmVtZW1iZXIsIHRoZSB1c2VyIGNvdWxkIGZsaXAtZmxvcCB0aGUgdmFsdWVzIGFuZCBzYXkgXCJib3R0b20gY2VudGVyXCIgb3IgXCJjZW50ZXIgYm90dG9tXCIsIGV0Yy4gXCJjZW50ZXJcIiBpcyBhbWJpZ3VvdXMgYmVjYXVzZSBpdCBjb3VsZCBiZSB1c2VkIHRvIGRlc2NyaWJlIGhvcml6b250YWwgb3IgdmVydGljYWwsIGhlbmNlIHRoZSBpc05hTigpLiBJZiB0aGVyZSdzIGFuIFwiPVwiIHNpZ24gaW4gdGhlIHZhbHVlLCBpdCdzIHJlbGF0aXZlLlxuXHRcdFx0XHRcdHggPSBcIjUwJVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChlLmdldEJCb3ggJiYgX2lzU1ZHKGUpKSB7IC8vU1ZHIGVsZW1lbnRzIG11c3QgYmUgaGFuZGxlZCBpbiBhIHNwZWNpYWwgd2F5IGJlY2F1c2UgdGhlaXIgb3JpZ2lucyBhcmUgY2FsY3VsYXRlZCBmcm9tIHRoZSB0b3AgbGVmdC5cblx0XHRcdFx0XHRpZiAoIWUuX2dzVHJhbnNmb3JtKSB7XG5cdFx0XHRcdFx0XHRUd2VlbkxpdGUuc2V0KGUsIHt4OlwiKz0wXCIsIG92ZXJ3cml0ZTpmYWxzZX0pOyAvL2ZvcmNlcyBjcmVhdGlvbiBvZiB0aGUgX2dzVHJhbnNmb3JtIHdoZXJlIHdlIHN0b3JlIGFsbCB0aGUgdHJhbnNmb3JtIGNvbXBvbmVudHMgaW5jbHVkaW5nIHhPcmlnaW4gYW5kIHlPcmlnaW4gZm9yIFNWRyBlbGVtZW50cywgYXMgb2YgR1NBUCAxLjE1LjAgd2hpY2ggYWxzbyB0YWtlcyBjYXJlIG9mIGNhbGN1bGF0aW5nIHRoZSBvcmlnaW4gZnJvbSB0aGUgdXBwZXIgbGVmdCBjb3JuZXIgb2YgdGhlIFNWRyBjYW52YXMuXG5cdFx0XHRcdFx0XHRpZiAoZS5fZ3NUcmFuc2Zvcm0ueE9yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiRHJhZ2dhYmxlIHJlcXVpcmVzIGF0IGxlYXN0IEdTQVAgMS4xNy4wXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2ID0gZS5nZXRCQm94KCk7XG5cdFx0XHRcdFx0ZGVjb3JhdGVlLnggPSAoZS5fZ3NUcmFuc2Zvcm0ueE9yaWdpbiAtIHYueCk7XG5cdFx0XHRcdFx0ZGVjb3JhdGVlLnkgPSAoZS5fZ3NUcmFuc2Zvcm0ueU9yaWdpbiAtIHYueSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKGUuZ2V0QkJveCAmJiAoeCArIHkpLmluZGV4T2YoXCIlXCIpICE9PSAtMSkgeyAvL0ZpcmVmb3ggZG9lc24ndCByZXBvcnQgb2Zmc2V0V2lkdGgvaGVpZ2h0IG9uIDxzdmc+IGVsZW1lbnRzLlxuXHRcdFx0XHRcdFx0ZSA9IGUuZ2V0QkJveCgpO1xuXHRcdFx0XHRcdFx0ZSA9IHtvZmZzZXRXaWR0aDogZS53aWR0aCwgb2Zmc2V0SGVpZ2h0OiBlLmhlaWdodH07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRlY29yYXRlZS54ID0gKCh4LmluZGV4T2YoXCIlXCIpICE9PSAtMSkgPyBlLm9mZnNldFdpZHRoICogcGFyc2VGbG9hdCh4KSAvIDEwMCA6IHBhcnNlRmxvYXQoeCkpO1xuXHRcdFx0XHRcdGRlY29yYXRlZS55ID0gKCh5LmluZGV4T2YoXCIlXCIpICE9PSAtMSkgPyBlLm9mZnNldEhlaWdodCAqIHBhcnNlRmxvYXQoeSkgLyAxMDAgOiBwYXJzZUZsb2F0KHkpKTtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBkZWNvcmF0ZWU7XG5cdFx0XHR9LFxuXHRcdFx0X2NhY2hlID0gZnVuY3Rpb24oZSkgeyAvL2NvbXB1dGVzIHNvbWUgaW1wb3J0YW50IHZhbHVlcyBhbmQgc3RvcmVzIHRoZW0gaW4gYSBfZENhY2hlIG9iamVjdCBhdHRhY2hlZCB0byB0aGUgZWxlbWVudCBpdHNlbGYgc28gdGhhdCB3ZSBjYW4gb3B0aW1pemUgcGVyZm9ybWFuY2Vcblx0XHRcdFx0aWYgKERyYWdnYWJsZS5jYWNoZVNWR0RhdGEgIT09IGZhbHNlICYmIGUuX2RDYWNoZSAmJiBlLl9kQ2FjaGUubGFzdFVwZGF0ZSA9PT0gVHdlZW5MaXRlLnRpY2tlci5mcmFtZSkgeyAvL3BlcmZvcm1hbmNlIG9wdGltaXphdGlvbi4gQXNzdW1lIHRoYXQgaWYgdGhlIG9mZnNldHMgYXJlIHJlcXVlc3RlZCBhZ2FpbiBvbiB0aGUgc2FtZSB0aWNrLCB3ZSBjYW4ganVzdCBmZWVkIGJhY2sgdGhlIHZhbHVlcyB3ZSBhbHJlYWR5IGNhbGN1bGF0ZWQgKG5vIG5lZWQgdG8ga2VlcCByZWNhbGN1bGF0aW5nIHVudGlsIGFub3RoZXIgdGljayBlbGFwc2VzKS5cblx0XHRcdFx0XHRyZXR1cm4gZS5fZENhY2hlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBjYWNoZSA9IGUuX2RDYWNoZSA9IGUuX2RDYWNoZSB8fCB7fSxcblx0XHRcdFx0XHRjcyA9IF9nZXRDb21wdXRlZFN0eWxlKGUpLFxuXHRcdFx0XHRcdGlzU1ZHID0gKGUuZ2V0QkJveCAmJiBfaXNTVkcoZSkpLFxuXHRcdFx0XHRcdGlzU1ZHUm9vdCA9ICgoZS5ub2RlTmFtZSArIFwiXCIpLnRvTG93ZXJDYXNlKCkgPT09IFwic3ZnXCIpLFxuXHRcdFx0XHRcdGN1clNWRztcblx0XHRcdFx0Y2FjaGUuaXNTVkcgPSBpc1NWRztcblx0XHRcdFx0Y2FjaGUuaXNTVkdSb290ID0gaXNTVkdSb290O1xuXHRcdFx0XHRjYWNoZS5ib3JkZXJCb3ggPSAoY3MuYm94U2l6aW5nID09PSBcImJvcmRlci1ib3hcIik7XG5cdFx0XHRcdGNhY2hlLmNvbXB1dGVkU3R5bGUgPSBjcztcblx0XHRcdFx0aWYgKGlzU1ZHUm9vdCkgeyAvL3NvbWUgYnJvd3NlcnMgZG9uJ3QgcmVwb3J0IHBhcmVudE5vZGUgb24gU1ZHIGVsZW1lbnRzLlxuXHRcdFx0XHRcdGN1clNWRyA9IGUucGFyZW50Tm9kZSB8fCBfZG9jRWxlbWVudDtcblx0XHRcdFx0XHRjdXJTVkcuaW5zZXJ0QmVmb3JlKF90ZW1wRGl2LCBlKTtcblx0XHRcdFx0XHRjYWNoZS5vZmZzZXRQYXJlbnQgPSBfdGVtcERpdi5vZmZzZXRQYXJlbnQgfHwgX2RvY0VsZW1lbnQ7IC8vaW4gc29tZSBjYXNlcywgRmlyZWZveCBzdGlsbCByZXBvcnRzIG9mZnNldFBhcmVudCBhcyBudWxsLlxuXHRcdFx0XHRcdGN1clNWRy5yZW1vdmVDaGlsZChfdGVtcERpdik7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaXNTVkcpIHtcblx0XHRcdFx0XHRjdXJTVkcgPSBlLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0d2hpbGUgKGN1clNWRyAmJiAoY3VyU1ZHLm5vZGVOYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKSAhPT0gXCJzdmdcIikgeyAvL29mZnNldFBhcmVudCBpcyBhbHdheXMgdGhlIFNWRyBjYW52YXMgZm9yIFNWRyBlbGVtZW50cy5cblx0XHRcdFx0XHRcdGN1clNWRyA9IGN1clNWRy5wYXJlbnROb2RlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjYWNoZS5vZmZzZXRQYXJlbnQgPSBjdXJTVkc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y2FjaGUub2Zmc2V0UGFyZW50ID0gZS5vZmZzZXRQYXJlbnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGNhY2hlO1xuXHRcdFx0fSxcblx0XHRcdF9nZXRPZmZzZXQyRE1hdHJpeCA9IGZ1bmN0aW9uKGUsIG9mZnNldE9yaWdpbiwgcGFyZW50T2Zmc2V0T3JpZ2luLCB6ZXJvT3JpZ2luKSB7XG5cdFx0XHRcdGlmIChlID09PSB3aW5kb3cgfHwgIWUgfHwgIWUuc3R5bGUgfHwgIWUucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRcdHJldHVybiBbMSwwLDAsMSwwLDBdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBjYWNoZSA9IGUuX2RDYWNoZSB8fCBfY2FjaGUoZSksXG5cdFx0XHRcdFx0cGFyZW50ID0gZS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdHBhcmVudENhY2hlID0gcGFyZW50Ll9kQ2FjaGUgfHwgX2NhY2hlKHBhcmVudCksXG5cdFx0XHRcdFx0Y3MgPSBjYWNoZS5jb21wdXRlZFN0eWxlLFxuXHRcdFx0XHRcdHBhcmVudE9mZnNldFBhcmVudCA9IGNhY2hlLmlzU1ZHID8gcGFyZW50Q2FjaGUub2Zmc2V0UGFyZW50IDogcGFyZW50Lm9mZnNldFBhcmVudCxcblx0XHRcdFx0XHRtLCBpc1Jvb3QsIG9mZnNldHMsIHJlY3QsIHQsIHN4LCBzeSwgb2Zmc2V0WCwgb2Zmc2V0WSwgcGFyZW50UmVjdCwgYm9yZGVyVG9wLCBib3JkZXJMZWZ0LCBib3JkZXJUcmFuc2xhdGVYLCBib3JkZXJUcmFuc2xhdGVZO1xuXHRcdFx0XHRtID0gKGNhY2hlLmlzU1ZHICYmIChlLnN0eWxlW190cmFuc2Zvcm1Qcm9wXSArIFwiXCIpLmluZGV4T2YoXCJtYXRyaXhcIikgIT09IC0xKSA/IGUuc3R5bGVbX3RyYW5zZm9ybVByb3BdIDogY3MgPyBjcy5nZXRQcm9wZXJ0eVZhbHVlKF90cmFuc2Zvcm1Qcm9wQ1NTKSA6IGUuY3VycmVudFN0eWxlID8gZS5jdXJyZW50U3R5bGVbX3RyYW5zZm9ybVByb3BdIDogXCIxLDAsMCwxLDAsMFwiOyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgQ2hyb21lIDQwKSBkb24ndCBjb3JyZWN0bHkgcmVwb3J0IHRyYW5zZm9ybXMgdGhhdCBhcmUgYXBwbGllZCBpbmxpbmUgb24gYW4gU1ZHIGVsZW1lbnQgKHRoZXkgZG9uJ3QgZ2V0IGluY2x1ZGVkIGluIHRoZSBjb21wdXRlZCBzdHlsZSksIHNvIHdlIGRvdWJsZS1jaGVjayBoZXJlIGFuZCBhY2NlcHQgbWF0cml4IHZhbHVlc1xuXHRcdFx0XHRpZiAoZS5nZXRCQm94ICYmIChlLmdldEF0dHJpYnV0ZShcInRyYW5zZm9ybVwiKSArIFwiXCIpLmluZGV4T2YoXCJtYXRyaXhcIikgIT09IC0xKSB7IC8vU1ZHIGNhbiBzdG9yZSB0cmFuc2Zvcm0gZGF0YSBpbiBpdHMgXCJ0cmFuc2Zvcm1cIiBhdHRyaWJ1dGUgaW5zdGVhZCBvZiB0aGUgQ1NTLCBzbyBsb29rIGZvciB0aGF0IGhlcmUgKG9ubHkgYWNjZXB0IG1hdHJpeCgpKS5cblx0XHRcdFx0XHRtID0gZS5nZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIik7XG5cdFx0XHRcdH1cblx0XHRcdFx0bSA9IChtICsgXCJcIikubWF0Y2goLyg/OlxcLXxcXC58XFxiKShcXGR8XFwufGVcXC0pKy9nKSB8fCBbMSwwLDAsMSwwLDBdO1xuXHRcdFx0XHRpZiAobS5sZW5ndGggPiA2KSB7XG5cdFx0XHRcdFx0bSA9IFttWzBdLCBtWzFdLCBtWzRdLCBtWzVdLCBtWzEyXSwgbVsxM11dO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh6ZXJvT3JpZ2luKSB7XG5cdFx0XHRcdFx0bVs0XSA9IG1bNV0gPSAwO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGNhY2hlLmlzU1ZHICYmICh0ID0gZS5fZ3NUcmFuc2Zvcm0pICYmICh0LnhPcmlnaW4gfHwgdC55T3JpZ2luKSkge1xuXHRcdFx0XHRcdC8vU1ZHcyBoYW5kbGUgb3JpZ2luIHZlcnkgZGlmZmVyZW50bHkuIEZhY3RvciBpbiBHU0FQJ3MgaGFuZGxpbmcgb2Ygb3JpZ2luIHZhbHVlcyBoZXJlOlxuXHRcdFx0XHRcdG1bMF0gPSBwYXJzZUZsb2F0KG1bMF0pO1xuXHRcdFx0XHRcdG1bMV0gPSBwYXJzZUZsb2F0KG1bMV0pO1xuXHRcdFx0XHRcdG1bMl0gPSBwYXJzZUZsb2F0KG1bMl0pO1xuXHRcdFx0XHRcdG1bM10gPSBwYXJzZUZsb2F0KG1bM10pO1xuXHRcdFx0XHRcdG1bNF0gPSBwYXJzZUZsb2F0KG1bNF0pIC0gKHQueE9yaWdpbiAtICh0LnhPcmlnaW4gKiBtWzBdICsgdC55T3JpZ2luICogbVsyXSkpO1xuXHRcdFx0XHRcdG1bNV0gPSBwYXJzZUZsb2F0KG1bNV0pIC0gKHQueU9yaWdpbiAtICh0LnhPcmlnaW4gKiBtWzFdICsgdC55T3JpZ2luICogbVszXSkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvZmZzZXRPcmlnaW4pIHtcblx0XHRcdFx0XHRpZiAoX3N2Z0JvcmRlckZhY3RvciA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRfc2V0RW52aXJvbm1lbnRWYXJpYWJsZXMoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0b2Zmc2V0cyA9IChjYWNoZS5pc1NWRyB8fCBjYWNoZS5pc1NWR1Jvb3QpID8gX2dldFNWR09mZnNldHMoZSkgOiBlO1xuXHRcdFx0XHRcdGlmIChjYWNoZS5pc1NWRykgeyAvL2Rvbid0IGp1c3QgcmVseSBvbiBcImluc3RhbmNlb2YgX1NWR0VsZW1lbnRcIiBiZWNhdXNlIGlmIHRoZSBTVkcgaXMgZW1iZWRkZWQgdmlhIGFuIG9iamVjdCB0YWcsIGl0IHdvbid0IHdvcmsgKFNWR0VsZW1lbnQgaXMgbWFwcGVkIHRvIGEgZGlmZmVyZW50IG9iamVjdCkpXG5cdFx0XHRcdFx0XHRyZWN0ID0gZS5nZXRCQm94KCk7XG5cdFx0XHRcdFx0XHRwYXJlbnRSZWN0ID0gKHBhcmVudENhY2hlLmlzU1ZHUm9vdCkgPyB7eDowLCB5OjB9IDogcGFyZW50LmdldEJCb3goKTtcblx0XHRcdFx0XHRcdG9mZnNldHMgPSB7b2Zmc2V0TGVmdDpyZWN0LnggLSBwYXJlbnRSZWN0LngsIG9mZnNldFRvcDpyZWN0LnkgLSBwYXJlbnRSZWN0LnksIG9mZnNldFBhcmVudDpjYWNoZS5vZmZzZXRQYXJlbnR9O1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoY2FjaGUuaXNTVkdSb290KSB7XG5cdFx0XHRcdFx0XHRib3JkZXJUb3AgPSBwYXJzZUludChjcy5ib3JkZXJUb3BXaWR0aCwgMTApIHx8IDA7XG5cdFx0XHRcdFx0XHRib3JkZXJMZWZ0ID0gcGFyc2VJbnQoY3MuYm9yZGVyTGVmdFdpZHRoLCAxMCkgfHwgMDtcblx0XHRcdFx0XHRcdGJvcmRlclRyYW5zbGF0ZVggPSAoKG1bMF0gLSBfc3ZnQm9yZGVyRmFjdG9yKSAqIGJvcmRlckxlZnQgKyBtWzJdICogYm9yZGVyVG9wKTtcblx0XHRcdFx0XHRcdGJvcmRlclRyYW5zbGF0ZVkgPSAobVsxXSAqIGJvcmRlckxlZnQgKyAobVszXSAtIF9zdmdCb3JkZXJGYWN0b3IpICogYm9yZGVyVG9wKTtcblxuXHRcdFx0XHRcdFx0c3ggPSBvZmZzZXRPcmlnaW4ueDtcblx0XHRcdFx0XHRcdHN5ID0gb2Zmc2V0T3JpZ2luLnk7XG5cdFx0XHRcdFx0XHRvZmZzZXRYID0gKHN4IC0gKHN4ICogbVswXSArIHN5ICogbVsyXSkpOyAvL2FjY29tbW9kYXRlIHRoZSBTVkcgcm9vdCdzIHRyYW5zZm9ybXMgd2hlbiB0aGUgb3JpZ2luIGlzbid0IGluIHRoZSB0b3AgbGVmdC5cblx0XHRcdFx0XHRcdG9mZnNldFkgPSAoc3kgLSAoc3ggKiBtWzFdICsgc3kgKiBtWzNdKSk7XG5cblx0XHRcdFx0XHRcdG1bNF0gPSBwYXJzZUZsb2F0KG1bNF0pICsgb2Zmc2V0WDtcblx0XHRcdFx0XHRcdG1bNV0gPSBwYXJzZUZsb2F0KG1bNV0pICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRcdG9mZnNldE9yaWdpbi54IC09IG9mZnNldFg7XG5cdFx0XHRcdFx0XHRvZmZzZXRPcmlnaW4ueSAtPSBvZmZzZXRZO1xuXHRcdFx0XHRcdFx0c3ggPSBvZmZzZXRzLnNjYWxlWDtcblx0XHRcdFx0XHRcdHN5ID0gb2Zmc2V0cy5zY2FsZVk7XG5cdFx0XHRcdFx0XHRvZmZzZXRPcmlnaW4ueCAqPSBzeDtcblx0XHRcdFx0XHRcdG9mZnNldE9yaWdpbi55ICo9IHN5O1xuXHRcdFx0XHRcdFx0bVswXSAqPSBzeDtcblx0XHRcdFx0XHRcdG1bMV0gKj0gc3k7XG5cdFx0XHRcdFx0XHRtWzJdICo9IHN4O1xuXHRcdFx0XHRcdFx0bVszXSAqPSBzeTtcblxuXHRcdFx0XHRcdFx0aWYgKCFfaXNJRTEwb3JCZWxvdykge1xuXHRcdFx0XHRcdFx0XHRvZmZzZXRPcmlnaW4ueCArPSBib3JkZXJUcmFuc2xhdGVYO1xuXHRcdFx0XHRcdFx0XHRvZmZzZXRPcmlnaW4ueSArPSBib3JkZXJUcmFuc2xhdGVZO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIV9oYXNCb3JkZXJCdWcgJiYgZS5vZmZzZXRQYXJlbnQpIHtcblx0XHRcdFx0XHRcdG9mZnNldE9yaWdpbi54ICs9IHBhcnNlSW50KF9nZXRTdHlsZShlLm9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiksIDEwKSB8fCAwO1xuXHRcdFx0XHRcdFx0b2Zmc2V0T3JpZ2luLnkgKz0gcGFyc2VJbnQoX2dldFN0eWxlKGUub2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIpLCAxMCkgfHwgMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aXNSb290ID0gKHBhcmVudCA9PT0gX2RvY0VsZW1lbnQgfHwgcGFyZW50ID09PSBfZG9jLmJvZHkpO1xuXHRcdFx0XHRcdG1bNF0gPSBOdW1iZXIobVs0XSkgKyBvZmZzZXRPcmlnaW4ueCArIChvZmZzZXRzLm9mZnNldExlZnQgfHwgMCkgLSBwYXJlbnRPZmZzZXRPcmlnaW4ueCAtIChpc1Jvb3QgPyAwIDogcGFyZW50LnNjcm9sbExlZnQgfHwgMCk7XG5cdFx0XHRcdFx0bVs1XSA9IE51bWJlcihtWzVdKSArIG9mZnNldE9yaWdpbi55ICsgKG9mZnNldHMub2Zmc2V0VG9wIHx8IDApIC0gcGFyZW50T2Zmc2V0T3JpZ2luLnkgLSAoaXNSb290ID8gMCA6IHBhcmVudC5zY3JvbGxUb3AgfHwgMCk7XG5cdFx0XHRcdFx0aWYgKHBhcmVudCAmJiBfZ2V0U3R5bGUoZSwgXCJwb3NpdGlvblwiLCBjcykgPT09IFwiZml4ZWRcIikgeyAvL2ZpeGVkIHBvc2l0aW9uIGVsZW1lbnRzIHNob3VsZCBmYWN0b3IgaW4gdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRcdFx0XHRtWzRdICs9IF9nZXREb2NTY3JvbGxMZWZ0KCk7XG5cdFx0XHRcdFx0XHRtWzVdICs9IF9nZXREb2NTY3JvbGxUb3AoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHBhcmVudCAmJiBwYXJlbnQgIT09IF9kb2NFbGVtZW50ICYmIHBhcmVudE9mZnNldFBhcmVudCA9PT0gb2Zmc2V0cy5vZmZzZXRQYXJlbnQgJiYgIXBhcmVudENhY2hlLmlzU1ZHICYmICghX2hhc1JlcGFyZW50QnVnIHx8IF9nZXRPZmZzZXQyRE1hdHJpeChwYXJlbnQpLmpvaW4oXCJcIikgPT09IFwiMTAwMTAwXCIpKSB7XG5cdFx0XHRcdFx0XHRvZmZzZXRzID0gKHBhcmVudENhY2hlLmlzU1ZHUm9vdCkgPyBfZ2V0U1ZHT2Zmc2V0cyhwYXJlbnQpIDogcGFyZW50O1xuXHRcdFx0XHRcdFx0bVs0XSAtPSBvZmZzZXRzLm9mZnNldExlZnQgfHwgMDtcblx0XHRcdFx0XHRcdG1bNV0gLT0gb2Zmc2V0cy5vZmZzZXRUb3AgfHwgMDtcblx0XHRcdFx0XHRcdGlmICghX2hhc0JvcmRlckJ1ZyAmJiBwYXJlbnRDYWNoZS5vZmZzZXRQYXJlbnQgJiYgIWNhY2hlLmlzU1ZHICYmICFjYWNoZS5pc1NWR1Jvb3QpIHtcblx0XHRcdFx0XHRcdFx0bVs0XSAtPSBwYXJzZUludChfZ2V0U3R5bGUocGFyZW50Q2FjaGUub2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiKSwgMTApIHx8IDA7XG5cdFx0XHRcdFx0XHRcdG1bNV0gLT0gcGFyc2VJbnQoX2dldFN0eWxlKHBhcmVudENhY2hlLm9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiKSwgMTApIHx8IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBtO1xuXHRcdFx0fSxcblx0XHRcdF9nZXRDb25jYXRlbmF0ZWRNYXRyaXggPSBmdW5jdGlvbihlLCBpbnZlcnQpIHtcblx0XHRcdFx0aWYgKCFlIHx8IGUgPT09IHdpbmRvdyB8fCAhZS5wYXJlbnROb2RlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFsxLDAsMCwxLDAsMF07XG5cdFx0XHRcdH1cblx0XHRcdFx0Ly9ub3RlOiB3ZSBrZWVwIHJldXNpbmcgX3BvaW50MSBhbmQgX3BvaW50MiBpbiBvcmRlciB0byBtaW5pbWl6ZSBtZW1vcnkgdXNhZ2UgYW5kIGdhcmJhZ2UgY29sbGVjdGlvbiBjaG9yZXMuXG5cdFx0XHRcdHZhciBvcmlnaW5PZmZzZXQgPSBfZ2V0T2Zmc2V0VHJhbnNmb3JtT3JpZ2luKGUsIF9wb2ludDEpLFxuXHRcdFx0XHRcdHBhcmVudE9yaWdpbk9mZnNldCA9IF9nZXRPZmZzZXRUcmFuc2Zvcm1PcmlnaW4oZS5wYXJlbnROb2RlLCBfcG9pbnQyKSxcblx0XHRcdFx0XHRtID0gX2dldE9mZnNldDJETWF0cml4KGUsIG9yaWdpbk9mZnNldCwgcGFyZW50T3JpZ2luT2Zmc2V0KSxcblx0XHRcdFx0XHRhLCBiLCBjLCBkLCB0eCwgdHksIG0yLCBkZXRlcm1pbmFudDtcblx0XHRcdFx0d2hpbGUgKChlID0gZS5wYXJlbnROb2RlKSAmJiBlLnBhcmVudE5vZGUgJiYgZSAhPT0gX2RvY0VsZW1lbnQpIHtcblx0XHRcdFx0XHRvcmlnaW5PZmZzZXQgPSBwYXJlbnRPcmlnaW5PZmZzZXQ7XG5cdFx0XHRcdFx0cGFyZW50T3JpZ2luT2Zmc2V0ID0gX2dldE9mZnNldFRyYW5zZm9ybU9yaWdpbihlLnBhcmVudE5vZGUsIChvcmlnaW5PZmZzZXQgPT09IF9wb2ludDEpID8gX3BvaW50MiA6IF9wb2ludDEpO1xuXHRcdFx0XHRcdG0yID0gX2dldE9mZnNldDJETWF0cml4KGUsIG9yaWdpbk9mZnNldCwgcGFyZW50T3JpZ2luT2Zmc2V0KTtcblx0XHRcdFx0XHRhID0gbVswXTtcblx0XHRcdFx0XHRiID0gbVsxXTtcblx0XHRcdFx0XHRjID0gbVsyXTtcblx0XHRcdFx0XHRkID0gbVszXTtcblx0XHRcdFx0XHR0eCA9IG1bNF07XG5cdFx0XHRcdFx0dHkgPSBtWzVdO1xuXHRcdFx0XHRcdG1bMF0gPSBhICogbTJbMF0gKyBiICogbTJbMl07XG5cdFx0XHRcdFx0bVsxXSA9IGEgKiBtMlsxXSArIGIgKiBtMlszXTtcblx0XHRcdFx0XHRtWzJdID0gYyAqIG0yWzBdICsgZCAqIG0yWzJdO1xuXHRcdFx0XHRcdG1bM10gPSBjICogbTJbMV0gKyBkICogbTJbM107XG5cdFx0XHRcdFx0bVs0XSA9IHR4ICogbTJbMF0gKyB0eSAqIG0yWzJdICsgbTJbNF07XG5cdFx0XHRcdFx0bVs1XSA9IHR4ICogbTJbMV0gKyB0eSAqIG0yWzNdICsgbTJbNV07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGludmVydCkge1xuXHRcdFx0XHRcdGEgPSBtWzBdO1xuXHRcdFx0XHRcdGIgPSBtWzFdO1xuXHRcdFx0XHRcdGMgPSBtWzJdO1xuXHRcdFx0XHRcdGQgPSBtWzNdO1xuXHRcdFx0XHRcdHR4ID0gbVs0XTtcblx0XHRcdFx0XHR0eSA9IG1bNV07XG5cdFx0XHRcdFx0ZGV0ZXJtaW5hbnQgPSAoYSAqIGQgLSBiICogYyk7XG5cdFx0XHRcdFx0bVswXSA9IGQgLyBkZXRlcm1pbmFudDtcblx0XHRcdFx0XHRtWzFdID0gLWIgLyBkZXRlcm1pbmFudDtcblx0XHRcdFx0XHRtWzJdID0gLWMgLyBkZXRlcm1pbmFudDtcblx0XHRcdFx0XHRtWzNdID0gYSAvIGRldGVybWluYW50O1xuXHRcdFx0XHRcdG1bNF0gPSAoYyAqIHR5IC0gZCAqIHR4KSAvIGRldGVybWluYW50O1xuXHRcdFx0XHRcdG1bNV0gPSAtKGEgKiB0eSAtIGIgKiB0eCkgLyBkZXRlcm1pbmFudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbTtcblx0XHRcdH0sXG5cdFx0XHRfbG9jYWxUb0dsb2JhbCA9IGZ1bmN0aW9uKGUsIHAsIGZyb21Ub3BMZWZ0LCBkZWNvcmF0ZWUsIHplcm9PcmlnaW4pIHtcblx0XHRcdFx0ZSA9IF91bndyYXBFbGVtZW50KGUpO1xuXHRcdFx0XHR2YXIgbSA9IF9nZXRDb25jYXRlbmF0ZWRNYXRyaXgoZSwgZmFsc2UsIHplcm9PcmlnaW4pLFxuXHRcdFx0XHRcdHggPSBwLngsXG5cdFx0XHRcdFx0eSA9IHAueTtcblx0XHRcdFx0aWYgKGZyb21Ub3BMZWZ0KSB7XG5cdFx0XHRcdFx0X2dldE9mZnNldFRyYW5zZm9ybU9yaWdpbihlLCBwKTtcblx0XHRcdFx0XHR4IC09IHAueDtcblx0XHRcdFx0XHR5IC09IHAueTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWNvcmF0ZWUgPSAoZGVjb3JhdGVlID09PSB0cnVlKSA/IHAgOiBkZWNvcmF0ZWUgfHwge307XG5cdFx0XHRcdGRlY29yYXRlZS54ID0geCAqIG1bMF0gKyB5ICogbVsyXSArIG1bNF07XG5cdFx0XHRcdGRlY29yYXRlZS55ID0geCAqIG1bMV0gKyB5ICogbVszXSArIG1bNV07XG5cdFx0XHRcdHJldHVybiBkZWNvcmF0ZWU7XG5cdFx0XHR9LFxuXHRcdFx0X2xvY2FsaXplUG9pbnQgPSBmdW5jdGlvbihwLCBsb2NhbFRvR2xvYmFsLCBnbG9iYWxUb0xvY2FsKSB7XG5cdFx0XHRcdHZhciB4ID0gcC54ICogbG9jYWxUb0dsb2JhbFswXSArIHAueSAqIGxvY2FsVG9HbG9iYWxbMl0gKyBsb2NhbFRvR2xvYmFsWzRdLFxuXHRcdFx0XHRcdHkgPSBwLnggKiBsb2NhbFRvR2xvYmFsWzFdICsgcC55ICogbG9jYWxUb0dsb2JhbFszXSArIGxvY2FsVG9HbG9iYWxbNV07XG5cdFx0XHRcdHAueCA9IHggKiBnbG9iYWxUb0xvY2FsWzBdICsgeSAqIGdsb2JhbFRvTG9jYWxbMl0gKyBnbG9iYWxUb0xvY2FsWzRdO1xuXHRcdFx0XHRwLnkgPSB4ICogZ2xvYmFsVG9Mb2NhbFsxXSArIHkgKiBnbG9iYWxUb0xvY2FsWzNdICsgZ2xvYmFsVG9Mb2NhbFs1XTtcblx0XHRcdFx0cmV0dXJuIHA7XG5cdFx0XHR9LFxuXG5cdFx0XHRfZ2V0RWxlbWVudEJvdW5kcyA9IGZ1bmN0aW9uKGUsIGNvbnRleHQsIGZyb21Ub3BMZWZ0KSB7XG5cdFx0XHRcdGlmICghKGUgPSBfdW53cmFwRWxlbWVudChlKSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250ZXh0ID0gX3Vud3JhcEVsZW1lbnQoY29udGV4dCk7XG5cdFx0XHRcdHZhciBpc1NWRyA9IChlLmdldEJCb3ggJiYgX2lzU1ZHKGUpKSxcblx0XHRcdFx0XHRvcmlnaW4sIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbUxvY2FsVG9HbG9iYWwsIG1HbG9iYWxUb0xvY2FsLCBwMSwgcDIsIHAzLCBwNCwgYmJveCwgd2lkdGgsIGhlaWdodCwgY2FjaGUsIGJvcmRlckxlZnQsIGJvcmRlclRvcCwgdmlld0JveCwgdmlld0JveFgsIHZpZXdCb3hZLCBjb21wdXRlZERpbWVuc2lvbnMsIGNzO1xuXHRcdFx0XHRpZiAoZSA9PT0gd2luZG93KSB7XG5cdFx0XHRcdFx0dG9wID0gX2dldERvY1Njcm9sbFRvcCgpO1xuXHRcdFx0XHRcdGxlZnQgPSBfZ2V0RG9jU2Nyb2xsTGVmdCgpO1xuXHRcdFx0XHRcdHJpZ2h0ID0gbGVmdCArIChfZG9jRWxlbWVudC5jbGllbnRXaWR0aCB8fCBlLmlubmVyV2lkdGggfHwgX2RvYy5ib2R5LmNsaWVudFdpZHRoIHx8IDApO1xuXHRcdFx0XHRcdGJvdHRvbSA9IHRvcCArICgoKGUuaW5uZXJIZWlnaHQgfHwgMCkgLSAyMCA8IF9kb2NFbGVtZW50LmNsaWVudEhlaWdodCkgPyBfZG9jRWxlbWVudC5jbGllbnRIZWlnaHQgOiBlLmlubmVySGVpZ2h0IHx8IF9kb2MuYm9keS5jbGllbnRIZWlnaHQgfHwgMCk7IC8vc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSBpZ25vcmUgYWJzb2x1dGVseSBwb3NpdGlvbmVkIGVsZW1lbnRzLCBhbmQgY29sbGFwc2UgdGhlIGhlaWdodCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBzbyBpdCBjb3VsZCBiZSA4cHgsIGZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSBqdXN0IGFuIGFic29sdXRlbHkgcG9zaXRpb25lZCBkaXYuIEluIHRoYXQgY2FzZSwgd2UgdXNlIHRoZSBpbm5lckhlaWdodCB0byByZXNvbHZlIHRoaXMuXG5cdFx0XHRcdH0gZWxzZSBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkIHx8IGNvbnRleHQgPT09IHdpbmRvdykge1xuXHRcdFx0XHRcdHJldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG9yaWdpbiA9IF9nZXRPZmZzZXRUcmFuc2Zvcm1PcmlnaW4oZSk7XG5cdFx0XHRcdFx0bGVmdCA9IC1vcmlnaW4ueDtcblx0XHRcdFx0XHR0b3AgPSAtb3JpZ2luLnk7XG5cdFx0XHRcdFx0aWYgKGlzU1ZHKSB7XG5cdFx0XHRcdFx0XHRiYm94ID0gZS5nZXRCQm94KCk7XG5cdFx0XHRcdFx0XHR3aWR0aCA9IGJib3gud2lkdGg7XG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBiYm94LmhlaWdodDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKChlLm5vZGVOYW1lICsgXCJcIikudG9Mb3dlckNhc2UoKSAhPT0gXCJzdmdcIiAmJiBlLm9mZnNldFdpZHRoKSB7IC8vQ2hyb21lIGRyb3BwZWQgc3VwcG9ydCBmb3IgXCJvZmZzZXRXaWR0aFwiIG9uIFNWRyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0d2lkdGggPSBlLm9mZnNldFdpZHRoO1xuXHRcdFx0XHRcdFx0aGVpZ2h0ID0gZS5vZmZzZXRIZWlnaHQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNvbXB1dGVkRGltZW5zaW9ucyA9IF9nZXRDb21wdXRlZFN0eWxlKGUpO1xuXHRcdFx0XHRcdFx0d2lkdGggPSBwYXJzZUZsb2F0KGNvbXB1dGVkRGltZW5zaW9ucy53aWR0aCk7XG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBwYXJzZUZsb2F0KGNvbXB1dGVkRGltZW5zaW9ucy5oZWlnaHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyaWdodCA9IGxlZnQgKyB3aWR0aDtcblx0XHRcdFx0XHRib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG5cdFx0XHRcdFx0aWYgKGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzdmdcIiAmJiAhX2lzT2xkSUUpIHsgLy9yb290IFNWRyBlbGVtZW50cyBhcmUgYSBzcGVjaWFsIGJlYXN0IGJlY2F1c2UgdGhleSBoYXZlIDIgdHlwZXMgb2Ygc2NhbGluZyAtIHRyYW5zZm9ybXMgb24gdGhlbXNlbHZlcyBhcyB3ZWxsIGFzIHRoZSBzdHJldGNoaW5nIG9mIHRoZSBTVkcgY2FudmFzIGl0c2VsZiBiYXNlZCBvbiB0aGUgb3V0ZXIgc2l6ZSBhbmQgdGhlIHZpZXdCb3guIElmLCBmb3IgZXhhbXBsZSwgdGhlIFNWRydzIHZpZXdib3ggaXMgXCIwIDAgMTAwIDEwMFwiIGJ1dCB0aGUgQ1NTIGlzIHNldCB0byB3aWR0aDoyMDBweDsgaGVpZ2h0OjIwMHB4LCB0aGF0J2QgbWFrZSBpdCBhcHBlYXIgYXQgMnggc2NhbGUgZXZlbiB0aG91Z2ggdGhlIGVsZW1lbnQgaXRzZWxmIGhhcyBubyBDU1MgdHJhbnNmb3JtcyBidXQgdGhlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcmUgYmFzZWQgb24gdGhhdCBjc3MsIG5vdCB0aGUgdmlld0JveCBzbyB3ZSBuZWVkIHRvIGFkanVzdCB0aGVtIGFjY29yZGluZ2x5LlxuXHRcdFx0XHRcdFx0Y2FjaGUgPSBfZ2V0U1ZHT2Zmc2V0cyhlKTtcblx0XHRcdFx0XHRcdGNzID0gY2FjaGUuY29tcHV0ZWRTdHlsZSB8fCB7fTtcblx0XHRcdFx0XHRcdHZpZXdCb3ggPSAoZS5nZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpIHx8IFwiMCAwXCIpLnNwbGl0KFwiIFwiKTtcblx0XHRcdFx0XHRcdHZpZXdCb3hYID0gcGFyc2VGbG9hdCh2aWV3Qm94WzBdKTtcblx0XHRcdFx0XHRcdHZpZXdCb3hZID0gcGFyc2VGbG9hdCh2aWV3Qm94WzFdKTtcblx0XHRcdFx0XHRcdGJvcmRlckxlZnQgPSBwYXJzZUZsb2F0KGNzLmJvcmRlckxlZnRXaWR0aCkgfHwgMDtcblx0XHRcdFx0XHRcdGJvcmRlclRvcCA9IHBhcnNlRmxvYXQoY3MuYm9yZGVyVG9wV2lkdGgpIHx8IDA7XG5cdFx0XHRcdFx0XHRyaWdodCAtPSB3aWR0aCAtICgod2lkdGggLSBib3JkZXJMZWZ0KSAvIGNhY2hlLnNjYWxlWCkgLSB2aWV3Qm94WDtcblx0XHRcdFx0XHRcdGJvdHRvbSAtPSBoZWlnaHQgLSAoKGhlaWdodCAtIGJvcmRlclRvcCkgLyBjYWNoZS5zY2FsZVkpIC0gdmlld0JveFk7XG5cdFx0XHRcdFx0XHRsZWZ0IC09IGJvcmRlckxlZnQgLyBjYWNoZS5zY2FsZVggLSB2aWV3Qm94WDtcblx0XHRcdFx0XHRcdHRvcCAtPSBib3JkZXJUb3AgLyBjYWNoZS5zY2FsZVkgLSB2aWV3Qm94WTtcblx0XHRcdFx0XHRcdGlmIChjb21wdXRlZERpbWVuc2lvbnMpIHsgLy93aGVuIHdlIGhhZCB0byB1c2UgY29tcHV0ZWQgc3R5bGVzLCBmYWN0b3IgaW4gdGhlIGJvcmRlciBub3cuXG5cdFx0XHRcdFx0XHRcdHJpZ2h0ICs9IChwYXJzZUZsb2F0KGNzLmJvcmRlclJpZ2h0V2lkdGgpICsgYm9yZGVyTGVmdCkgLyBjYWNoZS5zY2FsZVg7XG5cdFx0XHRcdFx0XHRcdGJvdHRvbSArPSAoYm9yZGVyVG9wICsgcGFyc2VGbG9hdChjcy5ib3JkZXJCb3R0b21XaWR0aCkpIC8gY2FjaGUuc2NhbGVZO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZSA9PT0gY29udGV4dCkge1xuXHRcdFx0XHRcdHJldHVybiB7bGVmdDpsZWZ0LCB0b3A6dG9wLCB3aWR0aDogcmlnaHQgLSBsZWZ0LCBoZWlnaHQ6IGJvdHRvbSAtIHRvcH07XG5cdFx0XHRcdH1cblx0XHRcdFx0bUxvY2FsVG9HbG9iYWwgPSBfZ2V0Q29uY2F0ZW5hdGVkTWF0cml4KGUpO1xuXHRcdFx0XHRtR2xvYmFsVG9Mb2NhbCA9IF9nZXRDb25jYXRlbmF0ZWRNYXRyaXgoY29udGV4dCwgdHJ1ZSk7XG5cdFx0XHRcdHAxID0gX2xvY2FsaXplUG9pbnQoe3g6bGVmdCwgeTp0b3B9LCBtTG9jYWxUb0dsb2JhbCwgbUdsb2JhbFRvTG9jYWwpO1xuXHRcdFx0XHRwMiA9IF9sb2NhbGl6ZVBvaW50KHt4OnJpZ2h0LCB5OnRvcH0sIG1Mb2NhbFRvR2xvYmFsLCBtR2xvYmFsVG9Mb2NhbCk7XG5cdFx0XHRcdHAzID0gX2xvY2FsaXplUG9pbnQoe3g6cmlnaHQsIHk6Ym90dG9tfSwgbUxvY2FsVG9HbG9iYWwsIG1HbG9iYWxUb0xvY2FsKTtcblx0XHRcdFx0cDQgPSBfbG9jYWxpemVQb2ludCh7eDpsZWZ0LCB5OmJvdHRvbX0sIG1Mb2NhbFRvR2xvYmFsLCBtR2xvYmFsVG9Mb2NhbCk7XG5cdFx0XHRcdGxlZnQgPSBNYXRoLm1pbihwMS54LCBwMi54LCBwMy54LCBwNC54KTtcblx0XHRcdFx0dG9wID0gTWF0aC5taW4ocDEueSwgcDIueSwgcDMueSwgcDQueSk7XG5cdFx0XHRcdF90ZW1wMS54ID0gX3RlbXAxLnkgPSAwO1xuXHRcdFx0XHRpZiAoZnJvbVRvcExlZnQpIHtcblx0XHRcdFx0XHRfZ2V0T2Zmc2V0VHJhbnNmb3JtT3JpZ2luKGNvbnRleHQsIF90ZW1wMSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHtsZWZ0OmxlZnQgKyBfdGVtcDEueCwgdG9wOnRvcCArIF90ZW1wMS55LCB3aWR0aDpNYXRoLm1heChwMS54LCBwMi54LCBwMy54LCBwNC54KSAtIGxlZnQsIGhlaWdodDpNYXRoLm1heChwMS55LCBwMi55LCBwMy55LCBwNC55KSAtIHRvcH07XG5cdFx0XHR9LFxuXHRcdFx0Ly8gZW5kIG1hdHJpeCBhbmQgcG9pbnQgY29udmVyc2lvbiBtZXRob2RzXG5cblxuXG5cdFx0XHRfaXNBcnJheUxpa2UgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdHJldHVybiAoZSAmJiBlLmxlbmd0aCAmJiBlWzBdICYmICgoZVswXS5ub2RlVHlwZSAmJiBlWzBdLnN0eWxlICYmICFlLm5vZGVUeXBlKSB8fCAoZVswXS5sZW5ndGggJiYgZVswXVswXSkpKSA/IHRydWUgOiBmYWxzZTsgLy9jb3VsZCBiZSBhbiBhcnJheSBvZiBqUXVlcnkgb2JqZWN0cyB0b28sIHNvIGFjY29tbW9kYXRlIHRoYXQuXG5cdFx0XHR9LFxuXG5cdFx0XHRfZmxhdHRlbkFycmF5ID0gZnVuY3Rpb24oYSkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gW10sXG5cdFx0XHRcdFx0bCA9IGEubGVuZ3RoLFxuXHRcdFx0XHRcdGksIGUsIGo7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcblx0XHRcdFx0XHRlID0gYVtpXTtcblx0XHRcdFx0XHRpZiAoX2lzQXJyYXlMaWtlKGUpKSB7XG5cdFx0XHRcdFx0XHRqID0gZS5sZW5ndGg7XG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgZS5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQucHVzaChlW2pdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2UgaWYgKGUgJiYgZS5sZW5ndGggIT09IDApIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fSxcblxuXHRcdFx0X2lzVG91Y2hEZXZpY2UgPSAoKFwib250b3VjaHN0YXJ0XCIgaW4gX2RvY0VsZW1lbnQpICYmIChcIm9yaWVudGF0aW9uXCIgaW4gd2luZG93KSksXG5cdFx0XHRfdG91Y2hFdmVudExvb2t1cCA9IChmdW5jdGlvbih0eXBlcykgeyAvL3dlIGNyZWF0ZSBhbiBvYmplY3QgdGhhdCBtYWtlcyBpdCBlYXN5IHRvIHRyYW5zbGF0ZSB0b3VjaCBldmVudCB0eXBlcyBpbnRvIHRoZWlyIFwicG9pbnRlclwiIGNvdW50ZXJwYXJ0cyBpZiB3ZSdyZSBpbiBhIGJyb3dzZXIgdGhhdCB1c2VzIHRob3NlIGluc3RlYWQuIExpa2UgSUUxMCB1c2VzIFwiTVNQb2ludGVyRG93blwiIGluc3RlYWQgb2YgXCJ0b3VjaHN0YXJ0XCIsIGZvciBleGFtcGxlLlxuXHRcdFx0XHR2YXIgc3RhbmRhcmQgPSB0eXBlcy5zcGxpdChcIixcIiksXG5cdFx0XHRcdFx0Y29udmVydGVkID0gKChfdGVtcERpdi5vbnBvaW50ZXJkb3duICE9PSB1bmRlZmluZWQpID8gXCJwb2ludGVyZG93bixwb2ludGVybW92ZSxwb2ludGVydXAscG9pbnRlcmNhbmNlbFwiIDogKF90ZW1wRGl2Lm9ubXNwb2ludGVyZG93biAhPT0gdW5kZWZpbmVkKSA/IFwiTVNQb2ludGVyRG93bixNU1BvaW50ZXJNb3ZlLE1TUG9pbnRlclVwLE1TUG9pbnRlckNhbmNlbFwiIDogdHlwZXMpLnNwbGl0KFwiLFwiKSxcblx0XHRcdFx0XHRvYmogPSB7fSxcblx0XHRcdFx0XHRpID0gODtcblx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0b2JqW3N0YW5kYXJkW2ldXSA9IGNvbnZlcnRlZFtpXTtcblx0XHRcdFx0XHRvYmpbY29udmVydGVkW2ldXSA9IHN0YW5kYXJkW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBvYmo7XG5cdFx0XHR9KFwidG91Y2hzdGFydCx0b3VjaG1vdmUsdG91Y2hlbmQsdG91Y2hjYW5jZWxcIikpLFxuXG5cdFx0XHRfYWRkTGlzdGVuZXIgPSBmdW5jdGlvbihlbGVtZW50LCB0eXBlLCBmdW5jLCBjYXB0dXJlKSB7XG5cdFx0XHRcdGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcblx0XHRcdFx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoX3RvdWNoRXZlbnRMb29rdXBbdHlwZV0gfHwgdHlwZSwgZnVuYywgY2FwdHVyZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZWxlbWVudC5hdHRhY2hFdmVudCkge1xuXHRcdFx0XHRcdGVsZW1lbnQuYXR0YWNoRXZlbnQoXCJvblwiICsgdHlwZSwgZnVuYyk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdF9yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZ1bmMpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcikge1xuXHRcdFx0XHRcdGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihfdG91Y2hFdmVudExvb2t1cFt0eXBlXSB8fCB0eXBlLCBmdW5jKTtcblx0XHRcdFx0fSBlbHNlIGlmIChlbGVtZW50LmRldGFjaEV2ZW50KSB7XG5cdFx0XHRcdFx0ZWxlbWVudC5kZXRhY2hFdmVudChcIm9uXCIgKyB0eXBlLCBmdW5jKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0X2hhc1RvdWNoSUQgPSBmdW5jdGlvbihsaXN0LCBJRCkge1xuXHRcdFx0XHR2YXIgaSA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRpZiAobGlzdFtpXS5pZGVudGlmaWVyID09PSBJRCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cblx0XHRcdF9vbk11bHRpVG91Y2hEb2N1bWVudEVuZCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0X2lzTXVsdGlUb3VjaGluZyA9IChlLnRvdWNoZXMgJiYgX2RyYWdDb3VudCA8IGUudG91Y2hlcy5sZW5ndGgpO1xuXHRcdFx0XHRfcmVtb3ZlTGlzdGVuZXIoZS50YXJnZXQsIFwidG91Y2hlbmRcIiwgX29uTXVsdGlUb3VjaERvY3VtZW50RW5kKTtcblx0XHRcdH0sXG5cblx0XHRcdF9vbk11bHRpVG91Y2hEb2N1bWVudCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0X2lzTXVsdGlUb3VjaGluZyA9IChlLnRvdWNoZXMgJiYgX2RyYWdDb3VudCA8IGUudG91Y2hlcy5sZW5ndGgpO1xuXHRcdFx0XHRfYWRkTGlzdGVuZXIoZS50YXJnZXQsIFwidG91Y2hlbmRcIiwgX29uTXVsdGlUb3VjaERvY3VtZW50RW5kKTtcblx0XHRcdH0sXG5cblx0XHRcdF9wYXJzZVRocm93UHJvcHMgPSBmdW5jdGlvbihkcmFnZ2FibGUsIHNuYXAsIG1heCwgbWluLCBmYWN0b3IsIGZvcmNlWmVyb1ZlbG9jaXR5KSB7XG5cdFx0XHRcdHZhciB2YXJzID0ge30sXG5cdFx0XHRcdFx0YSwgaSwgbDtcblx0XHRcdFx0aWYgKHNuYXApIHtcblx0XHRcdFx0XHRpZiAoZmFjdG9yICE9PSAxICYmIHNuYXAgaW5zdGFuY2VvZiBBcnJheSkgeyAvL3NvbWUgZGF0YSBtdXN0IGJlIGFsdGVyZWQgdG8gbWFrZSBzZW5zZSwgbGlrZSBpZiB0aGUgdXNlciBwYXNzZXMgaW4gYW4gYXJyYXkgb2Ygcm90YXRpb25hbCB2YWx1ZXMgaW4gZGVncmVlcywgd2UgbXVzdCBjb252ZXJ0IGl0IHRvIHJhZGlhbnMuIE9yIGZvciBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AsIHdlIGludmVydCB0aGUgdmFsdWVzLlxuXHRcdFx0XHRcdFx0dmFycy5lbmQgPSBhID0gW107XG5cdFx0XHRcdFx0XHRsID0gc25hcC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG5cdFx0XHRcdFx0XHRcdGFbaV0gPSBzbmFwW2ldICogZmFjdG9yO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF4ICs9IDEuMTsgLy9hbGxvdyAxLjEgcGl4ZWxzIG9mIHdpZ2dsZSByb29tIHdoZW4gc25hcHBpbmcgaW4gb3JkZXIgdG8gd29yayBhcm91bmQgc29tZSBicm93c2VyIGluY29uc2lzdGVuY2llcyBpbiB0aGUgd2F5IGJvdW5kcyBhcmUgcmVwb3J0ZWQgd2hpY2ggY2FuIG1ha2UgdGhlbSByb3VnaGx5IGEgcGl4ZWwgb2ZmLiBGb3IgZXhhbXBsZSwgaWYgXCJzbmFwOlstJCgnI21lbnUnKS53aWR0aCgpLCAwXVwiIHdhcyBkZWZpbmVkIGFuZCAjbWVudSBoYWQgYSB3cmFwcGVyIHRoYXQgd2FzIHVzZWQgYXMgdGhlIGJvdW5kcywgc29tZSBicm93c2VycyB3b3VsZCBiZSBvbmUgcGl4ZWwgb2ZmLCBtYWtpbmcgdGhlIG1pbmltdW0gLTc1MiBmb3IgZXhhbXBsZSB3aGVuIHNuYXAgd2FzIFstNzUzLDBdLCB0aHVzIGluc3RlYWQgb2Ygc25hcHBpbmcgdG8gLTc1MywgaXQgd291bGQgc25hcCB0byAwIHNpbmNlIC03NTMgd2FzIGJlbG93IHRoZSBtaW5pbXVtLlxuXHRcdFx0XHRcdFx0bWluIC09IDEuMTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHR5cGVvZihzbmFwKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR2YXJzLmVuZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBzbmFwLmNhbGwoZHJhZ2dhYmxlLCB2YWx1ZSkgKiBmYWN0b3I7IC8vd2UgbmVlZCB0byBlbnN1cmUgdGhhdCB3ZSBjYW4gc2NvcGUgdGhlIGZ1bmN0aW9uIGNhbGwgdG8gdGhlIERyYWdnYWJsZSBpbnN0YW5jZSBpdHNlbGYgc28gdGhhdCB1c2VycyBjYW4gYWNjZXNzIGltcG9ydGFudCB2YWx1ZXMgbGlrZSBtYXhYLCBtaW5YLCBtYXhZLCBtaW5ZLCB4LCBhbmQgeSBmcm9tIHdpdGhpbiB0aGF0IGZ1bmN0aW9uLlxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFycy5lbmQgPSBzbmFwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobWF4IHx8IG1heCA9PT0gMCkge1xuXHRcdFx0XHRcdHZhcnMubWF4ID0gbWF4O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChtaW4gfHwgbWluID09PSAwKSB7XG5cdFx0XHRcdFx0dmFycy5taW4gPSBtaW47XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKGZvcmNlWmVyb1ZlbG9jaXR5KSB7XG5cdFx0XHRcdFx0dmFycy52ZWxvY2l0eSA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhcnM7XG5cdFx0XHR9LFxuXG5cdFx0XHRfaXNDbGlja2FibGUgPSBmdW5jdGlvbihlKSB7IC8vc29tZXRpbWVzIGl0J3MgY29udmVuaWVudCB0byBtYXJrIGFuIGVsZW1lbnQgYXMgY2xpY2thYmxlIGJ5IGFkZGluZyBhIGRhdGEtY2xpY2thYmxlPVwidHJ1ZVwiIGF0dHJpYnV0ZSAoaW4gd2hpY2ggY2FzZSB3ZSB3b24ndCBwcmV2ZW50RGVmYXVsdCgpIHRoZSBtb3VzZS90b3VjaCBldmVudCkuIFRoaXMgbWV0aG9kIGNoZWNrcyBpZiB0aGUgZWxlbWVudCBpcyBhbiA8YT4sIDxpbnB1dD4sIG9yIDxidXR0b24+IG9yIGhhcyBhbiBvbmNsaWNrIG9yIGhhcyB0aGUgZGF0YS1jbGlja2FibGUgb3IgY29udGVudEVkaXRhYmxlIGF0dHJpYnV0ZSBzZXQgdG8gdHJ1ZSAob3IgYW55IG9mIGl0cyBwYXJlbnQgZWxlbWVudHMpLlxuXHRcdFx0XHR2YXIgZGF0YTtcblx0XHRcdFx0cmV0dXJuICghZSB8fCAhZS5nZXRBdHRyaWJ1dGUgfHwgZS5ub2RlTmFtZSA9PT0gXCJCT0RZXCIpID8gZmFsc2UgOiAoKGRhdGEgPSBlLmdldEF0dHJpYnV0ZShcImRhdGEtY2xpY2thYmxlXCIpKSA9PT0gXCJ0cnVlXCIgfHwgKGRhdGEgIT09IFwiZmFsc2VcIiAmJiAoZS5vbmNsaWNrIHx8IF9jbGlja2FibGVUYWdFeHAudGVzdChlLm5vZGVOYW1lICsgXCJcIikgfHwgZS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50RWRpdGFibGVcIikgPT09IFwidHJ1ZVwiKSkpID8gdHJ1ZSA6IF9pc0NsaWNrYWJsZShlLnBhcmVudE5vZGUpO1xuXHRcdFx0fSxcblxuXHRcdFx0X3NldFNlbGVjdGFibGUgPSBmdW5jdGlvbihlbGVtZW50cywgc2VsZWN0YWJsZSkge1xuXHRcdFx0XHR2YXIgaSA9IGVsZW1lbnRzLmxlbmd0aCxcblx0XHRcdFx0XHRlO1xuXHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRlID0gZWxlbWVudHNbaV07XG5cdFx0XHRcdFx0ZS5vbmRyYWdzdGFydCA9IGUub25zZWxlY3RzdGFydCA9IHNlbGVjdGFibGUgPyBudWxsIDogX2VtcHR5RnVuYztcblx0XHRcdFx0XHRfc2V0U3R5bGUoZSwgXCJ1c2VyU2VsZWN0XCIsIChzZWxlY3RhYmxlID8gXCJ0ZXh0XCIgOiBcIm5vbmVcIikpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRfYWRkUGFkZGluZ0JSLFxuXHRcdFx0X2FkZFBhZGRpbmdMZWZ0ID0gKGZ1bmN0aW9uKCkgeyAvL3RoaXMgZnVuY3Rpb24gaXMgaW4gY2hhcmdlIG9mIGFuYWx5emluZyBicm93c2VyIGJlaGF2aW9yIHJlbGF0ZWQgdG8gcGFkZGluZy4gSXQgc2V0cyB0aGUgX2FkZFBhZGRpbmdCUiB0byB0cnVlIGlmIHRoZSBicm93c2VyIGRvZXNuJ3Qgbm9ybWFsbHkgZmFjdG9yIGluIHRoZSBib3R0b20gb3IgcmlnaHQgcGFkZGluZyBvbiB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIHNjcm9sbGluZyBhcmVhLCBhbmQgaXQgc2V0cyBfYWRkUGFkZGluZ0xlZnQgdG8gdHJ1ZSBpZiBpdCdzIGEgYnJvd3NlciB0aGF0IHJlcXVpcmVzIHRoZSBleHRyYSBvZmZzZXQgKG9mZnNldExlZnQpIHRvIGJlIGFkZGVkIHRvIHRoZSBwYWRkaW5nUmlnaHQgKGxpa2UgT3BlcmEpLlxuXHRcdFx0XHR2YXIgZGl2ID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdFx0XHRcdGNoaWxkID0gX2RvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuXHRcdFx0XHRcdGNoaWxkU3R5bGUgPSBjaGlsZC5zdHlsZSxcblx0XHRcdFx0XHRwYXJlbnQgPSBfZG9jLmJvZHkgfHwgX3RlbXBEaXYsXG5cdFx0XHRcdFx0dmFsO1xuXHRcdFx0XHRjaGlsZFN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0XHRjaGlsZFN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdFx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9IGNoaWxkLmlubmVySFRNTCA9IFwid2lkdGg6OTBweDsgaGVpZ2h0OjQwcHg7IHBhZGRpbmc6MTBweDsgb3ZlcmZsb3c6YXV0bzsgdmlzaWJpbGl0eTogaGlkZGVuXCI7XG5cdFx0XHRcdGRpdi5hcHBlbmRDaGlsZChjaGlsZCk7XG5cdFx0XHRcdHBhcmVudC5hcHBlbmRDaGlsZChkaXYpO1xuXHRcdFx0XHRfYWRkUGFkZGluZ0JSID0gKGNoaWxkLm9mZnNldEhlaWdodCArIDE4ID4gZGl2LnNjcm9sbEhlaWdodCk7IC8vZGl2LnNjcm9sbEhlaWdodCBzaG91bGQgYmUgY2hpbGQub2Zmc2V0SGVpZ2h0ICsgMjAgYmVjYXVzZSBvZiB0aGUgMTBweCBvZiBwYWRkaW5nIG9uIGVhY2ggc2lkZSwgYnV0IHNvbWUgYnJvd3NlcnMgaWdub3JlIG9uZSBzaWRlLiBXZSBhbGxvdyBhIDJweCBtYXJnaW4gb2YgZXJyb3IuXG5cdFx0XHRcdGNoaWxkU3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0XHRcdFx0aWYgKCFfdHJhbnNmb3JtUHJvcCkge1xuXHRcdFx0XHRcdGNoaWxkU3R5bGUucGFkZGluZ1JpZ2h0ID0gXCI1MDBweFwiO1xuXHRcdFx0XHRcdHZhbCA9IGRpdi5zY3JvbGxMZWZ0ID0gZGl2LnNjcm9sbFdpZHRoIC0gZGl2LmNsaWVudFdpZHRoO1xuXHRcdFx0XHRcdGNoaWxkU3R5bGUubGVmdCA9IFwiLTkwcHhcIjtcblx0XHRcdFx0XHR2YWwgPSAodmFsICE9PSBkaXYuc2Nyb2xsTGVmdCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cGFyZW50LnJlbW92ZUNoaWxkKGRpdik7XG5cdFx0XHRcdHJldHVybiB2YWw7XG5cdFx0XHR9KCkpLFxuXG5cblxuXG5cdFx0XHQvL1RoZSBTY3JvbGxQcm94eSBjbGFzcyB3cmFwcyBhbiBlbGVtZW50J3MgY29udGVudHMgaW50byBhbm90aGVyIGRpdiAod2UgY2FsbCBpdCBcImNvbnRlbnRcIikgdGhhdCB3ZSBlaXRoZXIgYWRkIHBhZGRpbmcgd2hlbiBuZWNlc3Nhcnkgb3IgYXBwbHkgYSB0cmFuc2xhdGUzZCgpIHRyYW5zZm9ybSBpbiBvcmRlciB0byBvdmVyc2Nyb2xsIChzY3JvbGwgcGFzdCB0aGUgYm91bmRhcmllcykuIFRoaXMgYWxsb3dzIHVzIHRvIHNpbXBseSBzZXQgdGhlIHNjcm9sbFRvcC9zY3JvbGxMZWZ0IChvciB0b3AvbGVmdCBmb3IgZWFzaWVyIHJldmVyc2UtYXhpcyBvcmllbnRhdGlvbiwgd2hpY2ggaXMgd2hhdCB3ZSBkbyBpbiBEcmFnZ2FibGUpIGFuZCBpdCdsbCBkbyBhbGwgdGhlIHdvcmsgZm9yIHVzLiBGb3IgZXhhbXBsZSwgaWYgd2UgdHJpZWQgc2V0dGluZyBzY3JvbGxUb3AgdG8gLTEwMCBvbiBhIG5vcm1hbCBET00gZWxlbWVudCwgaXQgd291bGRuJ3Qgd29yayAtIGl0J2QgbG9vayB0aGUgc2FtZSBhcyBzZXR0aW5nIGl0IHRvIDAsIGJ1dCBpZiB3ZSBzZXQgc2Nyb2xsVG9wIG9mIGEgU2Nyb2xsUHJveHkgdG8gLTEwMCwgaXQnbGwgZ2l2ZSB0aGUgY29ycmVjdCBhcHBlYXJhbmNlIGJ5IGVpdGhlciBzZXR0aW5nIHBhZGRpbmdUb3Agb2YgdGhlIHdyYXBwZXIgdG8gMTAwIG9yIGFwcGx5aW5nIGEgMTAwLXBpeGVsIHRyYW5zbGF0ZVkuXG5cdFx0XHRTY3JvbGxQcm94eSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHZhcnMpIHtcblx0XHRcdFx0ZWxlbWVudCA9IF91bndyYXBFbGVtZW50KGVsZW1lbnQpO1xuXHRcdFx0XHR2YXJzID0gdmFycyB8fCB7fTtcblx0XHRcdFx0dmFyIGNvbnRlbnQgPSBfZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksXG5cdFx0XHRcdFx0c3R5bGUgPSBjb250ZW50LnN0eWxlLFxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtZW50LmZpcnN0Q2hpbGQsXG5cdFx0XHRcdFx0b2Zmc2V0VG9wID0gMCxcblx0XHRcdFx0XHRvZmZzZXRMZWZ0ID0gMCxcblx0XHRcdFx0XHRwcmV2VG9wID0gZWxlbWVudC5zY3JvbGxUb3AsXG5cdFx0XHRcdFx0cHJldkxlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQsXG5cdFx0XHRcdFx0c2Nyb2xsV2lkdGggPSBlbGVtZW50LnNjcm9sbFdpZHRoLFxuXHRcdFx0XHRcdHNjcm9sbEhlaWdodCA9IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0LFxuXHRcdFx0XHRcdGV4dHJhUGFkUmlnaHQgPSAwLFxuXHRcdFx0XHRcdG1heExlZnQgPSAwLFxuXHRcdFx0XHRcdG1heFRvcCA9IDAsXG5cdFx0XHRcdFx0ZWxlbWVudFdpZHRoLCBlbGVtZW50SGVpZ2h0LCBjb250ZW50SGVpZ2h0LCBuZXh0Tm9kZSwgdHJhbnNmb3JtU3RhcnQsIHRyYW5zZm9ybUVuZDtcblxuXHRcdFx0XHRpZiAoX3N1cHBvcnRzM0QgJiYgdmFycy5mb3JjZTNEICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdHRyYW5zZm9ybVN0YXJ0ID0gXCJ0cmFuc2xhdGUzZChcIjtcblx0XHRcdFx0XHR0cmFuc2Zvcm1FbmQgPSBcInB4LDBweClcIjtcblx0XHRcdFx0fSBlbHNlIGlmIChfdHJhbnNmb3JtUHJvcCkge1xuXHRcdFx0XHRcdHRyYW5zZm9ybVN0YXJ0ID0gXCJ0cmFuc2xhdGUoXCI7XG5cdFx0XHRcdFx0dHJhbnNmb3JtRW5kID0gXCJweClcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuc2Nyb2xsVG9wID0gZnVuY3Rpb24odmFsdWUsIGZvcmNlKSB7XG5cdFx0XHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLXRoaXMudG9wKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMudG9wKC12YWx1ZSwgZm9yY2UpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMuc2Nyb2xsTGVmdCA9IGZ1bmN0aW9uKHZhbHVlLCBmb3JjZSkge1xuXHRcdFx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC10aGlzLmxlZnQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5sZWZ0KC12YWx1ZSwgZm9yY2UpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMubGVmdCA9IGZ1bmN0aW9uKHZhbHVlLCBmb3JjZSkge1xuXHRcdFx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC0oZWxlbWVudC5zY3JvbGxMZWZ0ICsgb2Zmc2V0TGVmdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBkaWYgPSBlbGVtZW50LnNjcm9sbExlZnQgLSBwcmV2TGVmdCxcblx0XHRcdFx0XHRcdG9sZE9mZnNldCA9IG9mZnNldExlZnQ7XG5cdFx0XHRcdFx0aWYgKChkaWYgPiAyIHx8IGRpZiA8IC0yKSAmJiAhZm9yY2UpIHsgLy9pZiB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGUgc2Nyb2xsYmFyIChvciBzb21ldGhpbmcgZWxzZSBzY3JvbGxzIGl0LCBsaWtlIHRoZSBtb3VzZSB3aGVlbCksIHdlIHNob3VsZCBraWxsIGFueSB0d2VlbnMgb2YgdGhlIFNjcm9sbFByb3h5LlxuXHRcdFx0XHRcdFx0cHJldkxlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG5cdFx0XHRcdFx0XHRUd2VlbkxpdGUua2lsbFR3ZWVuc09mKHRoaXMsIHRydWUsIHtsZWZ0OjEsIHNjcm9sbExlZnQ6MX0pO1xuXHRcdFx0XHRcdFx0dGhpcy5sZWZ0KC1wcmV2TGVmdCk7XG5cdFx0XHRcdFx0XHRpZiAodmFycy5vbktpbGwpIHtcblx0XHRcdFx0XHRcdFx0dmFycy5vbktpbGwoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFsdWUgPSAtdmFsdWU7IC8vaW52ZXJ0IGJlY2F1c2Ugc2Nyb2xsaW5nIHdvcmtzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb25cblx0XHRcdFx0XHRpZiAodmFsdWUgPCAwKSB7XG5cdFx0XHRcdFx0XHRvZmZzZXRMZWZ0ID0gKHZhbHVlIC0gMC41KSB8IDA7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IDA7XG5cdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA+IG1heExlZnQpIHtcblx0XHRcdFx0XHRcdG9mZnNldExlZnQgPSAodmFsdWUgLSBtYXhMZWZ0KSB8IDA7XG5cdFx0XHRcdFx0XHR2YWx1ZSA9IG1heExlZnQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG9mZnNldExlZnQgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAob2Zmc2V0TGVmdCB8fCBvbGRPZmZzZXQpIHtcblx0XHRcdFx0XHRcdGlmICh0cmFuc2Zvcm1TdGFydCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIXRoaXMuX3N1c3BlbmRUcmFuc2Zvcm1zKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3R5bGVbX3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtU3RhcnQgKyAtb2Zmc2V0TGVmdCArIFwicHgsXCIgKyAtb2Zmc2V0VG9wICsgdHJhbnNmb3JtRW5kO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRzdHlsZS5sZWZ0ID0gLW9mZnNldExlZnQgKyBcInB4XCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoX2FkZFBhZGRpbmdMZWZ0ICYmIG9mZnNldExlZnQgKyBleHRyYVBhZFJpZ2h0ID49IDApIHtcblx0XHRcdFx0XHRcdFx0c3R5bGUucGFkZGluZ1JpZ2h0ID0gb2Zmc2V0TGVmdCArIGV4dHJhUGFkUmlnaHQgKyBcInB4XCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsZW1lbnQuc2Nyb2xsTGVmdCA9IHZhbHVlIHwgMDtcblx0XHRcdFx0XHRwcmV2TGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDsgLy9kb24ndCBtZXJnZSB0aGlzIHdpdGggdGhlIGxpbmUgYWJvdmUgYmVjYXVzZSBzb21lIGJyb3dzZXJzIGFkanN1dCB0aGUgc2Nyb2xsTGVmdCBhZnRlciBpdCdzIHNldCwgc28gaW4gb3JkZXIgdG8gYmUgMTAwJSBhY2N1cmF0ZSBpbiB0cmFja2luZyBpdCwgd2UgbmVlZCB0byBhc2sgdGhlIGJyb3dzZXIgdG8gcmVwb3J0IGl0LlxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMudG9wID0gZnVuY3Rpb24odmFsdWUsIGZvcmNlKSB7XG5cdFx0XHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gLShlbGVtZW50LnNjcm9sbFRvcCArIG9mZnNldFRvcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciBkaWYgPSBlbGVtZW50LnNjcm9sbFRvcCAtIHByZXZUb3AsXG5cdFx0XHRcdFx0XHRvbGRPZmZzZXQgPSBvZmZzZXRUb3A7XG5cdFx0XHRcdFx0aWYgKChkaWYgPiAyIHx8IGRpZiA8IC0yKSAmJiAhZm9yY2UpIHsgLy9pZiB0aGUgdXNlciBpbnRlcmFjdHMgd2l0aCB0aGUgc2Nyb2xsYmFyIChvciBzb21ldGhpbmcgZWxzZSBzY3JvbGxzIGl0LCBsaWtlIHRoZSBtb3VzZSB3aGVlbCksIHdlIHNob3VsZCBraWxsIGFueSB0d2VlbnMgb2YgdGhlIFNjcm9sbFByb3h5LlxuXHRcdFx0XHRcdFx0cHJldlRvcCA9IGVsZW1lbnQuc2Nyb2xsVG9wO1xuXHRcdFx0XHRcdFx0VHdlZW5MaXRlLmtpbGxUd2VlbnNPZih0aGlzLCB0cnVlLCB7dG9wOjEsIHNjcm9sbFRvcDoxfSk7XG5cdFx0XHRcdFx0XHR0aGlzLnRvcCgtcHJldlRvcCk7XG5cdFx0XHRcdFx0XHRpZiAodmFycy5vbktpbGwpIHtcblx0XHRcdFx0XHRcdFx0dmFycy5vbktpbGwoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFsdWUgPSAtdmFsdWU7IC8vaW52ZXJ0IGJlY2F1c2Ugc2Nyb2xsaW5nIHdvcmtzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb25cblx0XHRcdFx0XHRpZiAodmFsdWUgPCAwKSB7XG5cdFx0XHRcdFx0XHRvZmZzZXRUb3AgPSAodmFsdWUgLSAwLjUpIHwgMDtcblx0XHRcdFx0XHRcdHZhbHVlID0gMDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhbHVlID4gbWF4VG9wKSB7XG5cdFx0XHRcdFx0XHRvZmZzZXRUb3AgPSAodmFsdWUgLSBtYXhUb3ApIHwgMDtcblx0XHRcdFx0XHRcdHZhbHVlID0gbWF4VG9wO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvZmZzZXRUb3AgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAob2Zmc2V0VG9wIHx8IG9sZE9mZnNldCkge1xuXHRcdFx0XHRcdFx0aWYgKHRyYW5zZm9ybVN0YXJ0KSB7XG5cdFx0XHRcdFx0XHRcdGlmICghdGhpcy5fc3VzcGVuZFRyYW5zZm9ybXMpIHtcblx0XHRcdFx0XHRcdFx0XHRzdHlsZVtfdHJhbnNmb3JtUHJvcF0gPSB0cmFuc2Zvcm1TdGFydCArIC1vZmZzZXRMZWZ0ICsgXCJweCxcIiArIC1vZmZzZXRUb3AgKyB0cmFuc2Zvcm1FbmQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHN0eWxlLnRvcCA9IC1vZmZzZXRUb3AgKyBcInB4XCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsZW1lbnQuc2Nyb2xsVG9wID0gdmFsdWUgfCAwO1xuXHRcdFx0XHRcdHByZXZUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLm1heFNjcm9sbFRvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBtYXhUb3A7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5tYXhTY3JvbGxMZWZ0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1heExlZnQ7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5kaXNhYmxlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGNvbnRlbnQuZmlyc3RDaGlsZDtcblx0XHRcdFx0XHR3aGlsZSAobm9kZSkge1xuXHRcdFx0XHRcdFx0bmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuXHRcdFx0XHRcdFx0ZWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTtcblx0XHRcdFx0XHRcdG5vZGUgPSBuZXh0Tm9kZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQgPT09IGNvbnRlbnQucGFyZW50Tm9kZSkgeyAvL2luIGNhc2UgZGlzYWJsZSgpIGlzIGNhbGxlZCB3aGVuIGl0J3MgYWxyZWFkeSBkaXNhYmxlZC5cblx0XHRcdFx0XHRcdGVsZW1lbnQucmVtb3ZlQ2hpbGQoY29udGVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMuZW5hYmxlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGVsZW1lbnQuZmlyc3RDaGlsZDtcblx0XHRcdFx0XHRpZiAobm9kZSA9PT0gY29udGVudCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAobm9kZSkge1xuXHRcdFx0XHRcdFx0bmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuXHRcdFx0XHRcdFx0Y29udGVudC5hcHBlbmRDaGlsZChub2RlKTtcblx0XHRcdFx0XHRcdG5vZGUgPSBuZXh0Tm9kZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcblx0XHRcdFx0XHR0aGlzLmNhbGlicmF0ZSgpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMuY2FsaWJyYXRlID0gZnVuY3Rpb24oZm9yY2UpIHtcblx0XHRcdFx0XHR2YXIgd2lkdGhNYXRjaGVzID0gKGVsZW1lbnQuY2xpZW50V2lkdGggPT09IGVsZW1lbnRXaWR0aCksXG5cdFx0XHRcdFx0XHR4LCB5O1xuXHRcdFx0XHRcdHByZXZUb3AgPSBlbGVtZW50LnNjcm9sbFRvcDtcblx0XHRcdFx0XHRwcmV2TGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcblx0XHRcdFx0XHRpZiAod2lkdGhNYXRjaGVzICYmIGVsZW1lbnQuY2xpZW50SGVpZ2h0ID09PSBlbGVtZW50SGVpZ2h0ICYmIGNvbnRlbnQub2Zmc2V0SGVpZ2h0ID09PSBjb250ZW50SGVpZ2h0ICYmIHNjcm9sbFdpZHRoID09PSBlbGVtZW50LnNjcm9sbFdpZHRoICYmIHNjcm9sbEhlaWdodCA9PT0gZWxlbWVudC5zY3JvbGxIZWlnaHQgJiYgIWZvcmNlKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47IC8vbm8gbmVlZCB0byByZWNhbGN1bGF0ZSB0aGluZ3MgaWYgdGhlIHdpZHRoIGFuZCBoZWlnaHQgaGF2ZW4ndCBjaGFuZ2VkLlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAob2Zmc2V0VG9wIHx8IG9mZnNldExlZnQpIHtcblx0XHRcdFx0XHRcdHggPSB0aGlzLmxlZnQoKTtcblx0XHRcdFx0XHRcdHkgPSB0aGlzLnRvcCgpO1xuXHRcdFx0XHRcdFx0dGhpcy5sZWZ0KC1lbGVtZW50LnNjcm9sbExlZnQpO1xuXHRcdFx0XHRcdFx0dGhpcy50b3AoLWVsZW1lbnQuc2Nyb2xsVG9wKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Ly9maXJzdCwgd2UgbmVlZCB0byByZW1vdmUgYW55IHdpZHRoIGNvbnN0cmFpbnRzIHRvIHNlZSBob3cgdGhlIGNvbnRlbnQgbmF0dXJhbGx5IGZsb3dzIHNvIHRoYXQgd2UgY2FuIHNlZSBpZiBpdCdzIHdpZGVyIHRoYW4gdGhlIGNvbnRhaW5pbmcgZWxlbWVudC4gSWYgc28sIHdlJ3ZlIGdvdCB0byByZWNvcmQgdGhlIGFtb3VudCBvZiBvdmVyYWdlIHNvIHRoYXQgd2UgY2FuIGFwcGx5IHRoYXQgYXMgcGFkZGluZyBpbiBvcmRlciBmb3IgYnJvd3NlcnMgdG8gY29ycmVjdGx5IGhhbmRsZSB0aGluZ3MuIFRoZW4gd2Ugc3dpdGNoIGJhY2sgdG8gYSB3aWR0aCBvZiAxMDAlICh3aXRob3V0IHRoYXQsIHNvbWUgYnJvd3NlcnMgZG9uJ3QgZmxvdyB0aGUgY29udGVudCBjb3JyZWN0bHkpXG5cdFx0XHRcdFx0aWYgKCF3aWR0aE1hdGNoZXMgfHwgZm9yY2UpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdFx0XHRcdFx0XHRzdHlsZS53aWR0aCA9IFwiYXV0b1wiO1xuXHRcdFx0XHRcdFx0c3R5bGUucGFkZGluZ1JpZ2h0ID0gXCIwcHhcIjtcblx0XHRcdFx0XHRcdGV4dHJhUGFkUmlnaHQgPSBNYXRoLm1heCgwLCBlbGVtZW50LnNjcm9sbFdpZHRoIC0gZWxlbWVudC5jbGllbnRXaWR0aCk7XG5cdFx0XHRcdFx0XHQvL2lmIHRoZSBjb250ZW50IGlzIHdpZGVyIHRoYW4gdGhlIGNvbnRhaW5lciwgd2UgbmVlZCB0byBhZGQgdGhlIHBhZGRpbmdMZWZ0IGFuZCBwYWRkaW5nUmlnaHQgaW4gb3JkZXIgZm9yIHRoaW5ncyB0byBiZWhhdmUgY29ycmVjdGx5LlxuXHRcdFx0XHRcdFx0aWYgKGV4dHJhUGFkUmlnaHQpIHtcblx0XHRcdFx0XHRcdFx0ZXh0cmFQYWRSaWdodCArPSBfZ2V0U3R5bGUoZWxlbWVudCwgXCJwYWRkaW5nTGVmdFwiKSArIChfYWRkUGFkZGluZ0JSID8gX2dldFN0eWxlKGVsZW1lbnQsIFwicGFkZGluZ1JpZ2h0XCIpIDogMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0XHRcdHN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdFx0XHRcdHN0eWxlLm92ZXJmbG93ID0gXCJ2aXNpYmxlXCI7XG5cdFx0XHRcdFx0c3R5bGUudmVydGljYWxBbGlnbiA9IFwidG9wXCI7XG5cdFx0XHRcdFx0c3R5bGUud2lkdGggPSBcIjEwMCVcIjtcblx0XHRcdFx0XHRzdHlsZS5wYWRkaW5nUmlnaHQgPSBleHRyYVBhZFJpZ2h0ICsgXCJweFwiO1xuXHRcdFx0XHRcdC8vc29tZSBicm93c2VycyBuZWdsZWN0IHRvIGZhY3RvciBpbiB0aGUgYm90dG9tIHBhZGRpbmcgd2hlbiBjYWxjdWxhdGluZyB0aGUgc2Nyb2xsSGVpZ2h0LCBzbyB3ZSBuZWVkIHRvIGFkZCB0aGF0IHBhZGRpbmcgdG8gdGhlIGNvbnRlbnQgd2hlbiB0aGF0IGhhcHBlbnMuIEFsbG93IGEgMnB4IG1hcmdpbiBmb3IgZXJyb3Jcblx0XHRcdFx0XHRpZiAoX2FkZFBhZGRpbmdCUikge1xuXHRcdFx0XHRcdFx0c3R5bGUucGFkZGluZ0JvdHRvbSA9IF9nZXRTdHlsZShlbGVtZW50LCBcInBhZGRpbmdCb3R0b21cIiwgdHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChfaXNPbGRJRSkge1xuXHRcdFx0XHRcdFx0c3R5bGUuem9vbSA9IFwiMVwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbGVtZW50V2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xuXHRcdFx0XHRcdGVsZW1lbnRIZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcblx0XHRcdFx0XHRzY3JvbGxXaWR0aCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGg7XG5cdFx0XHRcdFx0c2Nyb2xsSGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cdFx0XHRcdFx0bWF4TGVmdCA9IGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50V2lkdGg7XG5cdFx0XHRcdFx0bWF4VG9wID0gZWxlbWVudC5zY3JvbGxIZWlnaHQgLSBlbGVtZW50SGVpZ2h0O1xuXHRcdFx0XHRcdGNvbnRlbnRIZWlnaHQgPSBjb250ZW50Lm9mZnNldEhlaWdodDtcblx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXHRcdFx0XHRcdGlmICh4IHx8IHkpIHtcblx0XHRcdFx0XHRcdHRoaXMubGVmdCh4KTtcblx0XHRcdFx0XHRcdHRoaXMudG9wKHkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuXHRcdFx0XHR0aGlzLl9zdXNwZW5kVHJhbnNmb3JtcyA9IGZhbHNlO1xuXHRcdFx0XHR0aGlzLmVuYWJsZSgpO1xuXHRcdFx0fSxcblxuXG5cblxuXG5cdFx0XHREcmFnZ2FibGUgPSBmdW5jdGlvbih0YXJnZXQsIHZhcnMpIHtcblx0XHRcdFx0RXZlbnREaXNwYXRjaGVyLmNhbGwodGhpcywgdGFyZ2V0KTtcblx0XHRcdFx0dGFyZ2V0ID0gX3Vud3JhcEVsZW1lbnQodGFyZ2V0KTsgLy9pbiBjYXNlIHRoZSB0YXJnZXQgaXMgYSBzZWxlY3RvciBvYmplY3Qgb3Igc2VsZWN0b3IgdGV4dFxuXHRcdFx0XHRpZiAoIVRocm93UHJvcHNQbHVnaW4pIHtcblx0XHRcdFx0XHRUaHJvd1Byb3BzUGx1Z2luID0gX2dsb2JhbHMuY29tLmdyZWVuc29jay5wbHVnaW5zLlRocm93UHJvcHNQbHVnaW47XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy52YXJzID0gdmFycyA9IF9jb3B5KHZhcnMgfHwge30pO1xuXHRcdFx0XHR0aGlzLnRhcmdldCA9IHRhcmdldDtcblx0XHRcdFx0dGhpcy54ID0gdGhpcy55ID0gdGhpcy5yb3RhdGlvbiA9IDA7XG5cdFx0XHRcdHRoaXMuZHJhZ1Jlc2lzdGFuY2UgPSBwYXJzZUZsb2F0KHZhcnMuZHJhZ1Jlc2lzdGFuY2UpIHx8IDA7XG5cdFx0XHRcdHRoaXMuZWRnZVJlc2lzdGFuY2UgPSBpc05hTih2YXJzLmVkZ2VSZXNpc3RhbmNlKSA/IDEgOiBwYXJzZUZsb2F0KHZhcnMuZWRnZVJlc2lzdGFuY2UpIHx8IDA7XG5cdFx0XHRcdHRoaXMubG9ja0F4aXMgPSB2YXJzLmxvY2tBeGlzO1xuXHRcdFx0XHR0aGlzLmF1dG9TY3JvbGwgPSB2YXJzLmF1dG9TY3JvbGwgfHwgMDtcblx0XHRcdFx0dGhpcy5sb2NrZWRBeGlzID0gbnVsbDtcblx0XHRcdFx0dGhpcy5hbGxvd0V2ZW50RGVmYXVsdCA9ICEhdmFycy5hbGxvd0V2ZW50RGVmYXVsdDtcblx0XHRcdFx0dmFyIHR5cGUgPSAodmFycy50eXBlIHx8IChfaXNPbGRJRSA/IFwidG9wLGxlZnRcIiA6IFwieCx5XCIpKS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdHh5TW9kZSA9ICh0eXBlLmluZGV4T2YoXCJ4XCIpICE9PSAtMSB8fCB0eXBlLmluZGV4T2YoXCJ5XCIpICE9PSAtMSksXG5cdFx0XHRcdFx0cm90YXRpb25Nb2RlID0gKHR5cGUuaW5kZXhPZihcInJvdGF0aW9uXCIpICE9PSAtMSksXG5cdFx0XHRcdFx0eFByb3AgPSByb3RhdGlvbk1vZGUgPyBcInJvdGF0aW9uXCIgOiB4eU1vZGUgPyBcInhcIiA6IFwibGVmdFwiLFxuXHRcdFx0XHRcdHlQcm9wID0geHlNb2RlID8gXCJ5XCIgOiBcInRvcFwiLFxuXHRcdFx0XHRcdGFsbG93WCA9ICh0eXBlLmluZGV4T2YoXCJ4XCIpICE9PSAtMSB8fCB0eXBlLmluZGV4T2YoXCJsZWZ0XCIpICE9PSAtMSB8fCB0eXBlID09PSBcInNjcm9sbFwiKSxcblx0XHRcdFx0XHRhbGxvd1kgPSAodHlwZS5pbmRleE9mKFwieVwiKSAhPT0gLTEgfHwgdHlwZS5pbmRleE9mKFwidG9wXCIpICE9PSAtMSB8fCB0eXBlID09PSBcInNjcm9sbFwiKSxcblx0XHRcdFx0XHRtaW5pbXVtTW92ZW1lbnQgPSB2YXJzLm1pbmltdW1Nb3ZlbWVudCB8fCAyLFxuXHRcdFx0XHRcdHNlbGYgPSB0aGlzLFxuXHRcdFx0XHRcdHRyaWdnZXJzID0gX3NsaWNlKHZhcnMudHJpZ2dlciB8fCB2YXJzLmhhbmRsZSB8fCB0YXJnZXQpLFxuXHRcdFx0XHRcdGtpbGxQcm9wcyA9IHt9LFxuXHRcdFx0XHRcdGRyYWdFbmRUaW1lID0gMCxcblx0XHRcdFx0XHRjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSBmYWxzZSxcblx0XHRcdFx0XHRpc0NsaWNrYWJsZSA9IHZhcnMuY2xpY2thYmxlVGVzdCB8fCBfaXNDbGlja2FibGUsXG5cdFx0XHRcdFx0Y2xpY2tUaW1lID0gMCxcblx0XHRcdFx0XHRlbmFibGVkLCBzY3JvbGxQcm94eSwgc3RhcnRQb2ludGVyWCwgc3RhcnRQb2ludGVyWSwgc3RhcnRFbGVtZW50WCwgc3RhcnRFbGVtZW50WSwgaGFzQm91bmRzLCBoYXNEcmFnQ2FsbGJhY2ssIG1heFgsIG1pblgsIG1heFksIG1pblksIHRlbXBWYXJzLCBjc3NWYXJzLCB0b3VjaCwgdG91Y2hJRCwgcm90YXRpb25PcmlnaW4sIGRpcnR5LCBvbGQsIHNuYXBYLCBzbmFwWSwgaXNDbGlja2luZywgdG91Y2hFdmVudFRhcmdldCwgbWF0cml4LCBpbnRlcnJ1cHRlZCwgc3RhcnRTY3JvbGxUb3AsIHN0YXJ0U2Nyb2xsTGVmdCwgYXBwbHlPYmosIGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcsIHRvdWNoRHJhZ0F4aXMsIGlzRGlzcGF0Y2hpbmcsIGNsaWNrRGlzcGF0Y2gsIHRydXN0ZWRDbGlja0Rpc3BhdGNoLFxuXHRcdFx0XHRcdC8vdGhpcyBtZXRob2QgZ2V0cyBjYWxsZWQgb24gZXZlcnkgdGljayBvZiBUd2VlbkxpdGUudGlja2VyIHdoaWNoIGFsbG93cyB1cyB0byBzeW5jaHJvbml6ZSB0aGUgcmVuZGVycyB0byB0aGUgY29yZSBlbmdpbmUgKHdoaWNoIGlzIHR5cGljYWxseSBzeW5jaHJvbml6ZWQgd2l0aCB0aGUgZGlzcGxheSByZWZyZXNoIHZpYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUpLiBUaGlzIGlzIGFuIG9wdGltaXphdGlvbiAtIGl0J3MgYmV0dGVyIHRoYW4gYXBwbHlpbmcgdGhlIHZhbHVlcyBpbnNpZGUgdGhlIFwibW91c2Vtb3ZlXCIgb3IgXCJ0b3VjaG1vdmVcIiBldmVudCBoYW5kbGVyIHdoaWNoIG1heSBnZXQgY2FsbGVkIG1hbnkgdGltZXMgaW5iZXR3ZWVuIHJlZnJlc2hlcy5cblx0XHRcdFx0XHRyZW5kZXIgPSBmdW5jdGlvbihzdXBwcmVzc0V2ZW50cykge1xuXHRcdFx0XHRcdFx0aWYgKHNlbGYuYXV0b1Njcm9sbCAmJiBzZWxmLmlzRHJhZ2dpbmcgJiYgKGNoZWNrQXV0b1Njcm9sbEJvdW5kcyB8fCBkaXJ0eSkpIHtcblx0XHRcdFx0XHRcdFx0dmFyIGUgPSB0YXJnZXQsXG5cdFx0XHRcdFx0XHRcdFx0YXV0b1Njcm9sbEZhY3RvciA9IHNlbGYuYXV0b1Njcm9sbCAqIDE1LCAvL211bHRpcGx5aW5nIGJ5IDE1IGp1c3QgZ2l2ZXMgdXMgYSBiZXR0ZXIgXCJmZWVsXCIgc3BlZWQtd2lzZS5cblx0XHRcdFx0XHRcdFx0XHRwYXJlbnQsIGlzUm9vdCwgcmVjdCwgcG9pbnRlclgsIHBvaW50ZXJZLCBjaGFuZ2VYLCBjaGFuZ2VZLCBnYXA7XG5cdFx0XHRcdFx0XHRcdGNoZWNrQXV0b1Njcm9sbEJvdW5kcyA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRfd2luZG93UHJveHkuc2Nyb2xsVG9wID0gKCh3aW5kb3cucGFnZVlPZmZzZXQgIT0gbnVsbCkgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiAoX2RvY0VsZW1lbnQuc2Nyb2xsVG9wICE9IG51bGwpID8gX2RvY0VsZW1lbnQuc2Nyb2xsVG9wIDogX2RvYy5ib2R5LnNjcm9sbFRvcCk7XG5cdFx0XHRcdFx0XHRcdF93aW5kb3dQcm94eS5zY3JvbGxMZWZ0ID0gKCh3aW5kb3cucGFnZVhPZmZzZXQgIT0gbnVsbCkgPyB3aW5kb3cucGFnZVhPZmZzZXQgOiAoX2RvY0VsZW1lbnQuc2Nyb2xsTGVmdCAhPSBudWxsKSA/IF9kb2NFbGVtZW50LnNjcm9sbExlZnQgOiBfZG9jLmJvZHkuc2Nyb2xsTGVmdCk7XG5cdFx0XHRcdFx0XHRcdHBvaW50ZXJYID0gc2VsZi5wb2ludGVyWCAtIF93aW5kb3dQcm94eS5zY3JvbGxMZWZ0O1xuXHRcdFx0XHRcdFx0XHRwb2ludGVyWSA9IHNlbGYucG9pbnRlclkgLSBfd2luZG93UHJveHkuc2Nyb2xsVG9wO1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoZSAmJiAhaXNSb290KSB7IC8vd2FsayB1cCB0aGUgY2hhaW4gYW5kIHNlbnNlIHdoZXJldmVyIHRoZSBwb2ludGVyIGlzIHdpdGhpbiA0MHB4IG9mIGFuIGVkZ2UgdGhhdCdzIHNjcm9sbGFibGUuXG5cdFx0XHRcdFx0XHRcdFx0aXNSb290ID0gX2lzUm9vdChlLnBhcmVudE5vZGUpO1xuXHRcdFx0XHRcdFx0XHRcdHBhcmVudCA9IGlzUm9vdCA/IF93aW5kb3dQcm94eSA6IGUucGFyZW50Tm9kZTtcblx0XHRcdFx0XHRcdFx0XHRyZWN0ID0gaXNSb290ID8ge2JvdHRvbTpNYXRoLm1heChfZG9jRWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKSwgcmlnaHQ6IE1hdGgubWF4KF9kb2NFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKSwgbGVmdDowLCB0b3A6MH0gOiBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0XHRcdFx0XHRcdFx0Y2hhbmdlWCA9IGNoYW5nZVkgPSAwO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChhbGxvd1kpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGdhcCA9IHBhcmVudC5fZ3NNYXhTY3JvbGxZIC0gcGFyZW50LnNjcm9sbFRvcDtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChnYXAgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNoYW5nZVkgPSBnYXA7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHBvaW50ZXJZID4gcmVjdC5ib3R0b20gLSA0MCAmJiBnYXApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hhbmdlWSA9IE1hdGgubWluKGdhcCwgKGF1dG9TY3JvbGxGYWN0b3IgKiAoMSAtIE1hdGgubWF4KDAsIChyZWN0LmJvdHRvbSAtIHBvaW50ZXJZKSkgLyA0MCkpIHwgMCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHBvaW50ZXJZIDwgcmVjdC50b3AgKyA0MCAmJiBwYXJlbnQuc2Nyb2xsVG9wKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNoZWNrQXV0b1Njcm9sbEJvdW5kcyA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNoYW5nZVkgPSAtTWF0aC5taW4ocGFyZW50LnNjcm9sbFRvcCwgKGF1dG9TY3JvbGxGYWN0b3IgKiAoMSAtIE1hdGgubWF4KDAsIChwb2ludGVyWSAtIHJlY3QudG9wKSkgLyA0MCkpIHwgMCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoY2hhbmdlWSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJlbnQuc2Nyb2xsVG9wICs9IGNoYW5nZVk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmIChhbGxvd1gpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGdhcCA9IHBhcmVudC5fZ3NNYXhTY3JvbGxYIC0gcGFyZW50LnNjcm9sbExlZnQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZ2FwIDwgMCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjaGFuZ2VYID0gZ2FwO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmIChwb2ludGVyWCA+IHJlY3QucmlnaHQgLSA0MCAmJiBnYXApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Y2hhbmdlWCA9IE1hdGgubWluKGdhcCwgKGF1dG9TY3JvbGxGYWN0b3IgKiAoMSAtIE1hdGgubWF4KDAsIChyZWN0LnJpZ2h0IC0gcG9pbnRlclgpKSAvIDQwKSkgfCAwKTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocG9pbnRlclggPCByZWN0LmxlZnQgKyA0MCAmJiBwYXJlbnQuc2Nyb2xsTGVmdCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjaGFuZ2VYID0gLU1hdGgubWluKHBhcmVudC5zY3JvbGxMZWZ0LCAoYXV0b1Njcm9sbEZhY3RvciAqICgxIC0gTWF0aC5tYXgoMCwgKHBvaW50ZXJYIC0gcmVjdC5sZWZ0KSkgLyA0MCkpIHwgMCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoY2hhbmdlWCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJlbnQuc2Nyb2xsTGVmdCArPSBjaGFuZ2VYO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdGlmIChpc1Jvb3QgJiYgKGNoYW5nZVggfHwgY2hhbmdlWSkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zY3JvbGxUbyhwYXJlbnQuc2Nyb2xsTGVmdCwgcGFyZW50LnNjcm9sbFRvcCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZXRQb2ludGVyUG9zaXRpb24oc2VsZi5wb2ludGVyWCArIGNoYW5nZVgsIHNlbGYucG9pbnRlclkgKyBjaGFuZ2VZKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0ZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGRpcnR5KSB7XG5cdFx0XHRcdFx0XHRcdHZhciB4ID0gc2VsZi54LFxuXHRcdFx0XHRcdFx0XHRcdHkgPSBzZWxmLnksXG5cdFx0XHRcdFx0XHRcdFx0bWluID0gMC4wMDAwMDE7XG5cdFx0XHRcdFx0XHRcdGlmICh4IDwgbWluICYmIHggPiAtbWluKSB7IC8vYnJvd3NlcnMgZG9uJ3QgaGFuZGxlIHN1cGVyIHNtYWxsIGRlY2ltYWxzIHdlbGwuXG5cdFx0XHRcdFx0XHRcdFx0eCA9IDA7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHkgPCBtaW4gJiYgeSA+IC1taW4pIHtcblx0XHRcdFx0XHRcdFx0XHR5ID0gMDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0YXBwbHlPYmouZGF0YS5yb3RhdGlvbiA9IHNlbGYucm90YXRpb24gPSB4O1xuXHRcdFx0XHRcdFx0XHRcdGFwcGx5T2JqLnNldFJhdGlvKDEpOyAvL25vdGU6IGluc3RlYWQgb2YgZG9pbmcgVHdlZW5MaXRlLnNldCgpLCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB3ZSBza2lwIHJpZ2h0IHRvIHRoZSBtZXRob2QgdGhhdCByZW5kZXJzIHRoZSB0cmFuc2Zvcm1zIGluc2lkZSBDU1NQbHVnaW4uIEZvciBvbGQgdmVyc2lvbnMgb2YgSUUsIHRob3VnaCwgd2UgZG8gYSBub3JtYWwgVHdlZW5MaXRlLnNldCgpIHRvIGxldmVyYWdlIGl0cyBhYmlsaXR5IHRvIHJlLXJlcm91dGUgdG8gYW4gSUUtc3BlY2lmaWMgMkQgcmVuZGVyZXIuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHNjcm9sbFByb3h5KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoYWxsb3dZKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFByb3h5LnRvcCh5KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChhbGxvd1gpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsUHJveHkubGVmdCh4KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHh5TW9kZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGFsbG93WSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBseU9iai5kYXRhLnkgPSB5O1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGFsbG93WCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRhcHBseU9iai5kYXRhLnggPSB4O1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0YXBwbHlPYmouc2V0UmF0aW8oMSk7IC8vbm90ZTogaW5zdGVhZCBvZiBkb2luZyBUd2VlbkxpdGUuc2V0KCksIGFzIGEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIHdlIHNraXAgcmlnaHQgdG8gdGhlIG1ldGhvZCB0aGF0IHJlbmRlcnMgdGhlIHRyYW5zZm9ybXMgaW5zaWRlIENTU1BsdWdpbi4gRm9yIG9sZCB2ZXJzaW9ucyBvZiBJRSwgdGhvdWdoLCB3ZSBkbyBhIG5vcm1hbCBUd2VlbkxpdGUuc2V0KCkgdG8gbGV2ZXJhZ2UgaXRzIGFiaWxpdHkgdG8gcmUtcmVyb3V0ZSB0byBhbiBJRS1zcGVjaWZpYyAyRCByZW5kZXJlci5cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGFsbG93WSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0YXJnZXQuc3R5bGUudG9wID0geSArIFwicHhcIjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChhbGxvd1gpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGFyZ2V0LnN0eWxlLmxlZnQgPSB4ICsgXCJweFwiO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoaGFzRHJhZ0NhbGxiYWNrICYmICFzdXBwcmVzc0V2ZW50cyAmJiAhaXNEaXNwYXRjaGluZykge1xuXHRcdFx0XHRcdFx0XHRcdGlzRGlzcGF0Y2hpbmcgPSB0cnVlOyAvL2luIGNhc2Ugb25EcmFnIGhhcyBhbiB1cGRhdGUoKSBjYWxsIChhdm9pZCBlbmRsZXNzIGxvb3ApXG5cdFx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJkcmFnXCIsIFwib25EcmFnXCIpO1xuXHRcdFx0XHRcdFx0XHRcdGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0ZGlydHkgPSBmYWxzZTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly9jb3BpZXMgdGhlIHgveSBmcm9tIHRoZSBlbGVtZW50ICh3aGV0aGVyIHRoYXQgYmUgdHJhbnNmb3JtcywgdG9wL2xlZnQsIG9yIFNjcm9sbFByb3h5J3MgdG9wL2xlZnQpIHRvIHRoZSBEcmFnZ2FibGUncyB4IGFuZCB5IChhbmQgcm90YXRpb24gaWYgbmVjZXNzYXJ5KSBwcm9wZXJ0aWVzIHNvIHRoYXQgdGhleSByZWZsZWN0IHJlYWxpdHkgYW5kIGl0IGFsc28gKG9wdGlvbmFsbHkpIGFwcGxpZXMgYW55IHNuYXBwaW5nIG5lY2Vzc2FyeS4gVGhpcyBpcyB1c2VkIGJ5IHRoZSBUaHJvd1Byb3BzUGx1Z2luIHR3ZWVuIGluIGFuIG9uVXBkYXRlIHRvIGVuc3VyZSB0aGluZ3MgYXJlIHN5bmNlZCBhbmQgc25hcHBlZC5cblx0XHRcdFx0XHRzeW5jWFkgPSBmdW5jdGlvbihza2lwT25VcGRhdGUsIHNraXBTbmFwKSB7XG5cdFx0XHRcdFx0XHR2YXIgeCA9IHNlbGYueCxcblx0XHRcdFx0XHRcdFx0eSA9IHNlbGYueSxcblx0XHRcdFx0XHRcdFx0c25hcHBlZFZhbHVlO1xuXHRcdFx0XHRcdFx0aWYgKCF0YXJnZXQuX2dzVHJhbnNmb3JtICYmICh4eU1vZGUgfHwgcm90YXRpb25Nb2RlKSkgeyAvL2p1c3QgaW4gY2FzZSB0aGUgX2dzVHJhbnNmb3JtIGdvdCB3aXBlZCwgbGlrZSBpZiB0aGUgdXNlciBjYWxsZWQgY2xlYXJQcm9wcyBvbiB0aGUgdHJhbnNmb3JtIG9yIHNvbWV0aGluZyAodmVyeSByYXJlKSwgZG9pbmcgYW4geCB0d2VlbiBmb3JjZXMgYSByZS1wYXJzaW5nIG9mIHRoZSB0cmFuc2Zvcm1zIGFuZCBwb3B1bGF0aW9uIG9mIHRoZSBfZ3NUcmFuc2Zvcm0uXG5cdFx0XHRcdFx0XHRcdFR3ZWVuTGl0ZS5zZXQodGFyZ2V0LCB7eDpcIis9MFwiLCBvdmVyd3JpdGU6ZmFsc2V9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh4eU1vZGUpIHtcblx0XHRcdFx0XHRcdFx0c2VsZi55ID0gdGFyZ2V0Ll9nc1RyYW5zZm9ybS55O1xuXHRcdFx0XHRcdFx0XHRzZWxmLnggPSB0YXJnZXQuX2dzVHJhbnNmb3JtLng7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHJvdGF0aW9uTW9kZSkge1xuXHRcdFx0XHRcdFx0XHRzZWxmLnggPSBzZWxmLnJvdGF0aW9uID0gdGFyZ2V0Ll9nc1RyYW5zZm9ybS5yb3RhdGlvbjtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoc2Nyb2xsUHJveHkpIHtcblx0XHRcdFx0XHRcdFx0c2VsZi55ID0gc2Nyb2xsUHJveHkudG9wKCk7XG5cdFx0XHRcdFx0XHRcdHNlbGYueCA9IHNjcm9sbFByb3h5LmxlZnQoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYueSA9IHBhcnNlSW50KHRhcmdldC5zdHlsZS50b3AsIDEwKSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRzZWxmLnggPSBwYXJzZUludCh0YXJnZXQuc3R5bGUubGVmdCwgMTApIHx8IDA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoKHNuYXBYIHx8IHNuYXBZKSAmJiAhc2tpcFNuYXAgJiYgKHNlbGYuaXNEcmFnZ2luZyB8fCBzZWxmLmlzVGhyb3dpbmcpKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChzbmFwWCkge1xuXHRcdFx0XHRcdFx0XHRcdHNuYXBwZWRWYWx1ZSA9IHNuYXBYKHNlbGYueCk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHNuYXBwZWRWYWx1ZSAhPT0gc2VsZi54KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZWxmLnggPSBzbmFwcGVkVmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAocm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNlbGYucm90YXRpb24gPSBzbmFwcGVkVmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRkaXJ0eSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChzbmFwWSkge1xuXHRcdFx0XHRcdFx0XHRcdHNuYXBwZWRWYWx1ZSA9IHNuYXBZKHNlbGYueSk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHNuYXBwZWRWYWx1ZSAhPT0gc2VsZi55KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZWxmLnkgPSBzbmFwcGVkVmFsdWU7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGRpcnR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGRpcnR5KSB7XG5cdFx0XHRcdFx0XHRcdHJlbmRlcih0cnVlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghc2tpcE9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwidGhyb3d1cGRhdGVcIiwgXCJvblRocm93VXBkYXRlXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRjYWxjdWxhdGVCb3VuZHMgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHZhciBib3VuZHMsIHRhcmdldEJvdW5kcywgc25hcCwgc25hcElzUmF3O1xuXHRcdFx0XHRcdFx0aGFzQm91bmRzID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRpZiAoc2Nyb2xsUHJveHkpIHtcblx0XHRcdFx0XHRcdFx0c2Nyb2xsUHJveHkuY2FsaWJyYXRlKCk7XG5cdFx0XHRcdFx0XHRcdHNlbGYubWluWCA9IG1pblggPSAtc2Nyb2xsUHJveHkubWF4U2Nyb2xsTGVmdCgpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLm1pblkgPSBtaW5ZID0gLXNjcm9sbFByb3h5Lm1heFNjcm9sbFRvcCgpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLm1heFggPSBtYXhYID0gc2VsZi5tYXhZID0gbWF4WSA9IDA7XG5cdFx0XHRcdFx0XHRcdGhhc0JvdW5kcyA9IHRydWU7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCEhdmFycy5ib3VuZHMpIHtcblx0XHRcdFx0XHRcdFx0Ym91bmRzID0gX2dldEJvdW5kcyh2YXJzLmJvdW5kcywgdGFyZ2V0LnBhcmVudE5vZGUpOyAvL2NvdWxkIGJlIGEgc2VsZWN0b3IvalF1ZXJ5IG9iamVjdCBvciBhIERPTSBlbGVtZW50IG9yIGEgZ2VuZXJpYyBvYmplY3QgbGlrZSB7dG9wOjAsIGxlZnQ6MTAwLCB3aWR0aDoxMDAwLCBoZWlnaHQ6ODAwfSBvciB7bWluWDoxMDAsIG1heFg6MTEwMCwgbWluWTowLCBtYXhZOjgwMH1cblx0XHRcdFx0XHRcdFx0aWYgKHJvdGF0aW9uTW9kZSkge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYubWluWCA9IG1pblggPSBib3VuZHMubGVmdDtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLm1heFggPSBtYXhYID0gYm91bmRzLmxlZnQgKyBib3VuZHMud2lkdGg7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5taW5ZID0gbWluWSA9IHNlbGYubWF4WSA9IG1heFkgPSAwO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHZhcnMuYm91bmRzLm1heFggIT09IHVuZGVmaW5lZCB8fCB2YXJzLmJvdW5kcy5tYXhZICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRib3VuZHMgPSB2YXJzLmJvdW5kcztcblx0XHRcdFx0XHRcdFx0XHRzZWxmLm1pblggPSBtaW5YID0gYm91bmRzLm1pblg7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5taW5ZID0gbWluWSA9IGJvdW5kcy5taW5ZO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYubWF4WCA9IG1heFggPSBib3VuZHMubWF4WDtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLm1heFkgPSBtYXhZID0gYm91bmRzLm1heFk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGFyZ2V0Qm91bmRzID0gX2dldEJvdW5kcyh0YXJnZXQsIHRhcmdldC5wYXJlbnROb2RlKTtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLm1pblggPSBtaW5YID0gX2dldFN0eWxlKHRhcmdldCwgeFByb3ApICsgYm91bmRzLmxlZnQgLSB0YXJnZXRCb3VuZHMubGVmdDtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLm1pblkgPSBtaW5ZID0gX2dldFN0eWxlKHRhcmdldCwgeVByb3ApICsgYm91bmRzLnRvcCAtIHRhcmdldEJvdW5kcy50b3A7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5tYXhYID0gbWF4WCA9IG1pblggKyAoYm91bmRzLndpZHRoIC0gdGFyZ2V0Qm91bmRzLndpZHRoKTtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLm1heFkgPSBtYXhZID0gbWluWSArIChib3VuZHMuaGVpZ2h0IC0gdGFyZ2V0Qm91bmRzLmhlaWdodCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKG1pblggPiBtYXhYKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5taW5YID0gbWF4WDtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLm1heFggPSBtYXhYID0gbWluWDtcblx0XHRcdFx0XHRcdFx0XHRtaW5YID0gc2VsZi5taW5YO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChtaW5ZID4gbWF4WSkge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYubWluWSA9IG1heFk7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5tYXhZID0gbWF4WSA9IG1pblk7XG5cdFx0XHRcdFx0XHRcdFx0bWluWSA9IHNlbGYubWluWTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5taW5Sb3RhdGlvbiA9IG1pblg7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5tYXhSb3RhdGlvbiA9IG1heFg7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aGFzQm91bmRzID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICh2YXJzLmxpdmVTbmFwKSB7XG5cdFx0XHRcdFx0XHRcdHNuYXAgPSAodmFycy5saXZlU25hcCA9PT0gdHJ1ZSkgPyAodmFycy5zbmFwIHx8IHt9KSA6IHZhcnMubGl2ZVNuYXA7XG5cdFx0XHRcdFx0XHRcdHNuYXBJc1JhdyA9IChzbmFwIGluc3RhbmNlb2YgQXJyYXkgfHwgdHlwZW9mKHNuYXApID09PSBcImZ1bmN0aW9uXCIpO1xuXHRcdFx0XHRcdFx0XHRpZiAocm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0c25hcFggPSBidWlsZFNuYXBGdW5jKChzbmFwSXNSYXcgPyBzbmFwIDogc25hcC5yb3RhdGlvbiksIG1pblgsIG1heFgsIDEpO1xuXHRcdFx0XHRcdFx0XHRcdHNuYXBZID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoYWxsb3dYKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzbmFwWCA9IGJ1aWxkU25hcEZ1bmMoKHNuYXBJc1JhdyA/IHNuYXAgOiBzbmFwLnggfHwgc25hcC5sZWZ0IHx8IHNuYXAuc2Nyb2xsTGVmdCksIG1pblgsIG1heFgsIHNjcm9sbFByb3h5ID8gLTEgOiAxKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGFsbG93WSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0c25hcFkgPSBidWlsZFNuYXBGdW5jKChzbmFwSXNSYXcgPyBzbmFwIDogc25hcC55IHx8IHNuYXAudG9wIHx8IHNuYXAuc2Nyb2xsVG9wKSwgbWluWSwgbWF4WSwgc2Nyb2xsUHJveHkgPyAtMSA6IDEpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdG9uVGhyb3dDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c2VsZi5pc1Rocm93aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRfZGlzcGF0Y2hFdmVudChzZWxmLCBcInRocm93Y29tcGxldGVcIiwgXCJvblRocm93Q29tcGxldGVcIik7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRvblRocm93T3ZlcndyaXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmlzVGhyb3dpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0YW5pbWF0ZSA9IGZ1bmN0aW9uKHRocm93UHJvcHMsIGZvcmNlWmVyb1ZlbG9jaXR5KSB7XG5cdFx0XHRcdFx0XHR2YXIgc25hcCwgc25hcElzUmF3LCB0d2Vlbiwgb3ZlcnNob290VG9sZXJhbmNlO1xuXHRcdFx0XHRcdFx0aWYgKHRocm93UHJvcHMgJiYgVGhyb3dQcm9wc1BsdWdpbikge1xuXHRcdFx0XHRcdFx0XHRpZiAodGhyb3dQcm9wcyA9PT0gdHJ1ZSkge1xuXHRcdFx0XHRcdFx0XHRcdHNuYXAgPSB2YXJzLnNuYXAgfHwge307XG5cdFx0XHRcdFx0XHRcdFx0c25hcElzUmF3ID0gKHNuYXAgaW5zdGFuY2VvZiBBcnJheSB8fCB0eXBlb2Yoc25hcCkgPT09IFwiZnVuY3Rpb25cIik7XG5cdFx0XHRcdFx0XHRcdFx0dGhyb3dQcm9wcyA9IHtyZXNpc3RhbmNlOih2YXJzLnRocm93UmVzaXN0YW5jZSB8fCB2YXJzLnJlc2lzdGFuY2UgfHwgMTAwMCkgLyAocm90YXRpb25Nb2RlID8gMTAgOiAxKX07XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHJvdGF0aW9uTW9kZSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhyb3dQcm9wcy5yb3RhdGlvbiA9IF9wYXJzZVRocm93UHJvcHMoc2VsZiwgc25hcElzUmF3ID8gc25hcCA6IHNuYXAucm90YXRpb24sIG1heFgsIG1pblgsIDEsIGZvcmNlWmVyb1ZlbG9jaXR5KTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGFsbG93WCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvd1Byb3BzW3hQcm9wXSA9IF9wYXJzZVRocm93UHJvcHMoc2VsZiwgc25hcElzUmF3ID8gc25hcCA6IHNuYXAueCB8fCBzbmFwLmxlZnQgfHwgc25hcC5zY3JvbGxMZWZ0LCBtYXhYLCBtaW5YLCBzY3JvbGxQcm94eSA/IC0xIDogMSwgZm9yY2VaZXJvVmVsb2NpdHkgfHwgKHNlbGYubG9ja2VkQXhpcyA9PT0gXCJ4XCIpKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChhbGxvd1kpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3dQcm9wc1t5UHJvcF0gPSBfcGFyc2VUaHJvd1Byb3BzKHNlbGYsIHNuYXBJc1JhdyA/IHNuYXAgOiBzbmFwLnkgfHwgc25hcC50b3AgfHwgc25hcC5zY3JvbGxUb3AsIG1heFksIG1pblksIHNjcm9sbFByb3h5ID8gLTEgOiAxLCBmb3JjZVplcm9WZWxvY2l0eSB8fCAoc2VsZi5sb2NrZWRBeGlzID09PSBcInlcIikpO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRzZWxmLmlzVGhyb3dpbmcgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRvdmVyc2hvb3RUb2xlcmFuY2UgPSAoIWlzTmFOKHZhcnMub3ZlcnNob290VG9sZXJhbmNlKSkgPyB2YXJzLm92ZXJzaG9vdFRvbGVyYW5jZSA6ICh2YXJzLmVkZ2VSZXNpc3RhbmNlID09PSAxKSA/IDAgOiAoMSAtIHNlbGYuZWRnZVJlc2lzdGFuY2UpICsgMC4yO1xuXHRcdFx0XHRcdFx0XHRzZWxmLnR3ZWVuID0gdHdlZW4gPSBUaHJvd1Byb3BzUGx1Z2luLnRvKHNjcm9sbFByb3h5IHx8IHRhcmdldCwge3Rocm93UHJvcHM6dGhyb3dQcm9wcywgZWFzZToodmFycy5lYXNlIHx8IF9nbG9iYWxzLlBvd2VyMy5lYXNlT3V0KSwgb25Db21wbGV0ZTpvblRocm93Q29tcGxldGUsIG9uT3ZlcndyaXRlOm9uVGhyb3dPdmVyd3JpdGUsIG9uVXBkYXRlOih2YXJzLmZhc3RNb2RlID8gX2Rpc3BhdGNoRXZlbnQgOiBzeW5jWFkpLCBvblVwZGF0ZVBhcmFtczoodmFycy5mYXN0TW9kZSA/IFtzZWxmLCBcIm9udGhyb3d1cGRhdGVcIiwgXCJvblRocm93VXBkYXRlXCJdIDogX2VtcHR5QXJyYXkpfSwgKGlzTmFOKHZhcnMubWF4RHVyYXRpb24pID8gMiA6IHZhcnMubWF4RHVyYXRpb24pLCAoIWlzTmFOKHZhcnMubWluRHVyYXRpb24pID8gdmFycy5taW5EdXJhdGlvbiA6IChvdmVyc2hvb3RUb2xlcmFuY2UgPT09IDApID8gMCA6IDAuNSksIG92ZXJzaG9vdFRvbGVyYW5jZSk7XG5cdFx0XHRcdFx0XHRcdGlmICghdmFycy5mYXN0TW9kZSkge1xuXHRcdFx0XHRcdFx0XHRcdC8vdG8gcG9wdWxhdGUgdGhlIGVuZCB2YWx1ZXMsIHdlIGp1c3Qgc2NydWIgdGhlIHR3ZWVuIHRvIHRoZSBlbmQsIHJlY29yZCB0aGUgdmFsdWVzLCBhbmQgdGhlbiBqdW1wIGJhY2sgdG8gdGhlIGJlZ2lubmluZy5cblx0XHRcdFx0XHRcdFx0XHRpZiAoc2Nyb2xsUHJveHkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNjcm9sbFByb3h5Ll9zdXNwZW5kVHJhbnNmb3JtcyA9IHRydWU7IC8vTWljcm9zb2Z0IGJyb3dzZXJzIGhhdmUgYSBidWcgdGhhdCBjYXVzZXMgdGhlbSB0byBicmllZmx5IHJlbmRlciB0aGUgcG9zaXRpb24gaW5jb3JyZWN0bHkgKGl0IGZsYXNoZXMgdG8gdGhlIGVuZCBzdGF0ZSB3aGVuIHdlIHNlZWsoKSB0aGUgdHdlZW4gZXZlbiB0aG91Z2ggd2UganVtcCByaWdodCBiYWNrIHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uLCBhbmQgdGhpcyBvbmx5IHNlZW1zIHRvIGhhcHBlbiB3aGVuIHdlJ3JlIGFmZmVjdGluZyBib3RoIHRvcCBhbmQgbGVmdCksIHNvIHdlIHNldCBhIF9zdXNwZW5kVHJhbnNmb3JtcyBmbGFnIHRvIHByZXZlbnQgaXQgZnJvbSBhY3R1YWxseSBhcHBseWluZyB0aGUgdmFsdWVzIGluIHRoZSBTY3JvbGxQcm94eS5cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0dHdlZW4ucmVuZGVyKHR3ZWVuLmR1cmF0aW9uKCksIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHRcdHN5bmNYWSh0cnVlLCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLmVuZFggPSBzZWxmLng7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5lbmRZID0gc2VsZi55O1xuXHRcdFx0XHRcdFx0XHRcdGlmIChyb3RhdGlvbk1vZGUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNlbGYuZW5kUm90YXRpb24gPSBzZWxmLng7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHR3ZWVuLnBsYXkoMCk7XG5cdFx0XHRcdFx0XHRcdFx0c3luY1hZKHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHRcdGlmIChzY3JvbGxQcm94eSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0c2Nyb2xsUHJveHkuX3N1c3BlbmRUcmFuc2Zvcm1zID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGhhc0JvdW5kcykge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmFwcGx5Qm91bmRzKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdHVwZGF0ZU1hdHJpeCA9IGZ1bmN0aW9uKHNoaWZ0U3RhcnQpIHtcblx0XHRcdFx0XHRcdHZhciBzdGFydCA9IG1hdHJpeCB8fCBbMSwwLDAsMSwwLDBdLFxuXHRcdFx0XHRcdFx0XHRhLCBiLCBjLCBkLCB0eCwgdHksIGRldGVybWluYW50LCBwb2ludGVyWCwgcG9pbnRlclk7XG5cdFx0XHRcdFx0XHRtYXRyaXggPSBfZ2V0Q29uY2F0ZW5hdGVkTWF0cml4KHRhcmdldC5wYXJlbnROb2RlLCB0cnVlKTtcblx0XHRcdFx0XHRcdGlmIChzaGlmdFN0YXJ0ICYmIHNlbGYuaXNQcmVzc2VkICYmIHN0YXJ0LmpvaW4oXCIsXCIpICE9PSBtYXRyaXguam9pbihcIixcIikpIHsgLy9pZiB0aGUgbWF0cml4IGNoYW5nZXMgV0hJTEUgdGhlIGVsZW1lbnQgaXMgcHJlc3NlZCwgd2UgbXVzdCBhZGp1c3QgdGhlIHN0YXJ0UG9pbnRlclggYW5kIHN0YXJ0UG9pbnRlclkgYWNjb3JkaW5nbHksIHNvIHdlIGludmVydCB0aGUgb3JpZ2luYWwgbWF0cml4IGFuZCBmaWd1cmUgb3V0IHdoZXJlIHRoZSBwb2ludGVyWCBhbmQgcG9pbnRlclkgd2VyZSBpbiB0aGUgZ2xvYmFsIHNwYWNlLCB0aGVuIGFwcGx5IHRoZSBuZXcgbWF0cml4IHRvIGdldCB0aGUgdXBkYXRlZCBjb29yZGluYXRlcy5cblx0XHRcdFx0XHRcdFx0YSA9IHN0YXJ0WzBdO1xuXHRcdFx0XHRcdFx0XHRiID0gc3RhcnRbMV07XG5cdFx0XHRcdFx0XHRcdGMgPSBzdGFydFsyXTtcblx0XHRcdFx0XHRcdFx0ZCA9IHN0YXJ0WzNdO1xuXHRcdFx0XHRcdFx0XHR0eCA9IHN0YXJ0WzRdO1xuXHRcdFx0XHRcdFx0XHR0eSA9IHN0YXJ0WzVdO1xuXHRcdFx0XHRcdFx0XHRkZXRlcm1pbmFudCA9IChhICogZCAtIGIgKiBjKTtcblx0XHRcdFx0XHRcdFx0cG9pbnRlclggPSBzdGFydFBvaW50ZXJYICogKGQgLyBkZXRlcm1pbmFudCkgKyBzdGFydFBvaW50ZXJZICogKC1jIC8gZGV0ZXJtaW5hbnQpICsgKChjICogdHkgLSBkICogdHgpIC8gZGV0ZXJtaW5hbnQpO1xuXHRcdFx0XHRcdFx0XHRwb2ludGVyWSA9IHN0YXJ0UG9pbnRlclggKiAoLWIgLyBkZXRlcm1pbmFudCkgKyBzdGFydFBvaW50ZXJZICogKGEgLyBkZXRlcm1pbmFudCkgKyAoLShhICogdHkgLSBiICogdHgpIC8gZGV0ZXJtaW5hbnQpO1xuXHRcdFx0XHRcdFx0XHRzdGFydFBvaW50ZXJZID0gcG9pbnRlclggKiBtYXRyaXhbMV0gKyBwb2ludGVyWSAqIG1hdHJpeFszXSArIG1hdHJpeFs1XTtcblx0XHRcdFx0XHRcdFx0c3RhcnRQb2ludGVyWCA9IHBvaW50ZXJYICogbWF0cml4WzBdICsgcG9pbnRlclkgKiBtYXRyaXhbMl0gKyBtYXRyaXhbNF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIW1hdHJpeFsxXSAmJiAhbWF0cml4WzJdICYmIG1hdHJpeFswXSA9PSAxICYmIG1hdHJpeFszXSA9PSAxICYmIG1hdHJpeFs0XSA9PSAwICYmIG1hdHJpeFs1XSA9PSAwKSB7IC8vaWYgdGhlcmUgYXJlIG5vIHRyYW5zZm9ybXMsIHdlIGNhbiBvcHRpbWl6ZSBwZXJmb3JtYW5jZSBieSBub3QgZmFjdG9yaW5nIGluIHRoZSBtYXRyaXhcblx0XHRcdFx0XHRcdFx0bWF0cml4ID0gbnVsbDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRyZWNvcmRTdGFydFBvc2l0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0dmFyIGVkZ2VUb2xlcmFuY2UgPSAxIC0gc2VsZi5lZGdlUmVzaXN0YW5jZTtcblx0XHRcdFx0XHRcdHVwZGF0ZU1hdHJpeChmYWxzZSk7XG5cdFx0XHRcdFx0XHRpZiAobWF0cml4KSB7XG5cdFx0XHRcdFx0XHRcdHN0YXJ0UG9pbnRlclggPSBzZWxmLnBvaW50ZXJYICogbWF0cml4WzBdICsgc2VsZi5wb2ludGVyWSAqIG1hdHJpeFsyXSArIG1hdHJpeFs0XTsgLy90cmFuc2xhdGUgdG8gbG9jYWwgY29vcmRpbmF0ZSBzeXN0ZW1cblx0XHRcdFx0XHRcdFx0c3RhcnRQb2ludGVyWSA9IHNlbGYucG9pbnRlclggKiBtYXRyaXhbMV0gKyBzZWxmLnBvaW50ZXJZICogbWF0cml4WzNdICsgbWF0cml4WzVdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGRpcnR5KSB7XG5cdFx0XHRcdFx0XHRcdHNldFBvaW50ZXJQb3NpdGlvbihzZWxmLnBvaW50ZXJYLCBzZWxmLnBvaW50ZXJZKTtcblx0XHRcdFx0XHRcdFx0cmVuZGVyKHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHNjcm9sbFByb3h5KSB7XG5cdFx0XHRcdFx0XHRcdGNhbGN1bGF0ZUJvdW5kcygpO1xuXHRcdFx0XHRcdFx0XHRzdGFydEVsZW1lbnRZID0gc2Nyb2xsUHJveHkudG9wKCk7XG5cdFx0XHRcdFx0XHRcdHN0YXJ0RWxlbWVudFggPSBzY3JvbGxQcm94eS5sZWZ0KCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvL2lmIHRoZSBlbGVtZW50IGlzIGluIHRoZSBwcm9jZXNzIG9mIHR3ZWVuaW5nLCBkb24ndCBmb3JjZSBzbmFwcGluZyB0byBvY2N1ciBiZWNhdXNlIGl0IGNvdWxkIG1ha2UgaXQganVtcC4gSW1hZ2luZSB0aGUgdXNlciB0aHJvd2luZywgdGhlbiBiZWZvcmUgaXQncyBkb25lLCBjbGlja2luZyBvbiB0aGUgZWxlbWVudCBpbiBpdHMgaW5iZXR3ZWVuIHN0YXRlLlxuXHRcdFx0XHRcdFx0XHRpZiAoaXNUd2VlbmluZygpKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3luY1hZKHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0XHRcdGNhbGN1bGF0ZUJvdW5kcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuYXBwbHlCb3VuZHMoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0cm90YXRpb25PcmlnaW4gPSBfbG9jYWxUb0dsb2JhbCh0YXJnZXQsIHt4OjAsIHk6MH0pO1xuXHRcdFx0XHRcdFx0XHRcdHN5bmNYWSh0cnVlLCB0cnVlKTtcblx0XHRcdFx0XHRcdFx0XHRzdGFydEVsZW1lbnRYID0gc2VsZi54OyAvL3N0YXJ0aW5nIHJvdGF0aW9uICh4IGFsd2F5cyByZWZlcnMgdG8gcm90YXRpb24gaW4gdHlwZTpcInJvdGF0aW9uXCIsIG1lYXN1cmVkIGluIGRlZ3JlZXMpXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnRFbGVtZW50WSA9IHNlbGYueSA9IE1hdGguYXRhbjIocm90YXRpb25PcmlnaW4ueSAtIHNlbGYucG9pbnRlclksIHNlbGYucG9pbnRlclggLSByb3RhdGlvbk9yaWdpbi54KSAqIF9SQUQyREVHO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0U2Nyb2xsVG9wID0gdGFyZ2V0LnBhcmVudE5vZGUgPyB0YXJnZXQucGFyZW50Tm9kZS5zY3JvbGxUb3AgfHwgMCA6IDA7XG5cdFx0XHRcdFx0XHRcdFx0c3RhcnRTY3JvbGxMZWZ0ID0gdGFyZ2V0LnBhcmVudE5vZGUgPyB0YXJnZXQucGFyZW50Tm9kZS5zY3JvbGxMZWZ0IHx8IDAgOiAwO1xuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0RWxlbWVudFkgPSBfZ2V0U3R5bGUodGFyZ2V0LCB5UHJvcCk7IC8vcmVjb3JkIHRoZSBzdGFydGluZyB0b3AgYW5kIGxlZnQgdmFsdWVzIHNvIHRoYXQgd2UgY2FuIGp1c3QgYWRkIHRoZSBtb3VzZSdzIG1vdmVtZW50IHRvIHRoZW0gbGF0ZXIuXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnRFbGVtZW50WCA9IF9nZXRTdHlsZSh0YXJnZXQsIHhQcm9wKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKGhhc0JvdW5kcyAmJiBlZGdlVG9sZXJhbmNlKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChzdGFydEVsZW1lbnRYID4gbWF4WCkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0RWxlbWVudFggPSBtYXhYICsgKHN0YXJ0RWxlbWVudFggLSBtYXhYKSAvIGVkZ2VUb2xlcmFuY2U7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoc3RhcnRFbGVtZW50WCA8IG1pblgpIHtcblx0XHRcdFx0XHRcdFx0XHRzdGFydEVsZW1lbnRYID0gbWluWCAtIChtaW5YIC0gc3RhcnRFbGVtZW50WCkgLyBlZGdlVG9sZXJhbmNlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghcm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKHN0YXJ0RWxlbWVudFkgPiBtYXhZKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydEVsZW1lbnRZID0gbWF4WSArIChzdGFydEVsZW1lbnRZIC0gbWF4WSkgLyBlZGdlVG9sZXJhbmNlO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoc3RhcnRFbGVtZW50WSA8IG1pblkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXJ0RWxlbWVudFkgPSBtaW5ZIC0gKG1pblkgLSBzdGFydEVsZW1lbnRZKSAvIGVkZ2VUb2xlcmFuY2U7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdGlzVHdlZW5pbmcgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiAoc2VsZi50d2VlbiAmJiBzZWxmLnR3ZWVuLmlzQWN0aXZlKCkpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRyZW1vdmVQbGFjZWhvbGRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKF9wbGFjZWhvbGRlckRpdi5wYXJlbnROb2RlICYmICFpc1R3ZWVuaW5nKCkgJiYgIXNlbGYuaXNEcmFnZ2luZykgeyAvL19wbGFjZWhvbGRlckRpdiBqdXN0IHByb3BzIG9wZW4gYXV0by1zY3JvbGxpbmcgY29udGFpbmVycyBzbyB0aGV5IGRvbid0IGNvbGxhcHNlIGFzIHRoZSB1c2VyIGRyYWdzIGxlZnQvdXAuIFdlIHJlbW92ZSBpdCBhZnRlciBkcmFnZ2luZyAoYW5kIHRocm93aW5nLCBpZiBuZWNlc3NhcnkpIGZpbmlzaGVzLlxuXHRcdFx0XHRcdFx0XHRfcGxhY2Vob2xkZXJEaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChfcGxhY2Vob2xkZXJEaXYpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRidWlsZFNuYXBGdW5jID0gZnVuY3Rpb24oc25hcCwgbWluLCBtYXgsIGZhY3Rvcikge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZihzbmFwKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbihuKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVkZ2VUb2xlcmFuY2UgPSAhc2VsZi5pc1ByZXNzZWQgPyAxIDogMSAtIHNlbGYuZWRnZVJlc2lzdGFuY2U7IC8vaWYgd2UncmUgdHdlZW5pbmcsIGRpc2FibGUgdGhlIGVkZ2VUb2xlcmFuY2UgYmVjYXVzZSBpdCdzIGFscmVhZHkgZmFjdG9yZWQgaW50byB0aGUgdHdlZW5pbmcgdmFsdWVzICh3ZSBkb24ndCB3YW50IHRvIGFwcGx5IGl0IG11bHRpcGxlIHRpbWVzKVxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBzbmFwLmNhbGwoc2VsZiwgKG4gPiBtYXggPyBtYXggKyAobiAtIG1heCkgKiBlZGdlVG9sZXJhbmNlIDogKG4gPCBtaW4pID8gbWluICsgKG4gLSBtaW4pICogZWRnZVRvbGVyYW5jZSA6IG4pKSAqIGZhY3Rvcjtcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChzbmFwIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKG4pIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgaSA9IHNuYXAubGVuZ3RoLFxuXHRcdFx0XHRcdFx0XHRcdFx0Y2xvc2VzdCA9IDAsXG5cdFx0XHRcdFx0XHRcdFx0XHRhYnNEaWYgPSBfbWF4LFxuXHRcdFx0XHRcdFx0XHRcdFx0dmFsLCBkaWY7XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YWwgPSBzbmFwW2ldO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGlmID0gdmFsIC0gbjtcblx0XHRcdFx0XHRcdFx0XHRcdGlmIChkaWYgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGRpZiA9IC1kaWY7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoZGlmIDwgYWJzRGlmICYmIHZhbCA+PSBtaW4gJiYgdmFsIDw9IG1heCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRjbG9zZXN0ID0gaTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YWJzRGlmID0gZGlmO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gc25hcFtjbG9zZXN0XTtcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBpc05hTihzbmFwKSA/IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG47IH0gOiBmdW5jdGlvbigpIHsgcmV0dXJuIHNuYXAgKiBmYWN0b3I7IH07XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vY2FsbGVkIHdoZW4gdGhlIG1vdXNlIGlzIHByZXNzZWQgKG9yIHRvdWNoIHN0YXJ0cylcblx0XHRcdFx0XHRvblByZXNzID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdFx0dmFyIGk7XG5cdFx0XHRcdFx0XHRpZiAoIWVuYWJsZWQgfHwgc2VsZi5pc1ByZXNzZWQgfHwgIWUgfHwgKChlLnR5cGUgPT09IFwibW91c2Vkb3duXCIgfHwgZS50eXBlID09PSBcInBvaW50ZXJkb3duXCIpICYmIF9nZXRUaW1lKCkgLSBjbGlja1RpbWUgPCAzMCAmJiBfdG91Y2hFdmVudExvb2t1cFtzZWxmLnBvaW50ZXJFdmVudC50eXBlXSkpIHsgLy93aGVuIHdlIERPTidUIHByZXZlbnREZWZhdWx0KCkgaW4gb3JkZXIgdG8gYWNjb21tb2RhdGUgdG91Y2gtc2Nyb2xsaW5nIGFuZCB0aGUgdXNlciBqdXN0IHRhcHMsIG1hbnkgYnJvd3NlcnMgYWxzbyBmaXJlIGEgbW91c2Vkb3duL21vdXNldXAgc2VxdWVuY2UgQUZURVIgdGhlIHRvdWNoc3RhcnQvdG91Y2hlbmQgc2VxdWVuY2UsIHRodXMgaXQnZCByZXN1bHQgaW4gdHdvIHF1aWNrIFwiY2xpY2tcIiBldmVudHMgYmVpbmcgZGlzcGF0Y2hlZC4gVGhpcyBsaW5lIHNlbnNlcyB0aGF0IGNvbmRpdGlvbiBhbmQgaGFsdHMgaXQgb24gdGhlIHN1YnNlcXVlbnQgbW91c2Vkb3duLlxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIlJFVFVSTiBvblByZXNzXCIsIHNlbGYuaXNQcmVzc2VkLCBlLnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcIm9uUHJlc3NcIiwgZS50eXBlKTtcblx0XHRcdFx0XHRcdGludGVycnVwdGVkID0gaXNUd2VlbmluZygpO1xuXHRcdFx0XHRcdFx0c2VsZi5wb2ludGVyRXZlbnQgPSBlO1xuXHRcdFx0XHRcdFx0aWYgKF90b3VjaEV2ZW50TG9va3VwW2UudHlwZV0pIHsgLy9ub3RlOiBvbiBpT1MsIEJPVEggdG91Y2htb3ZlIGFuZCBtb3VzZW1vdmUgYXJlIGRpc3BhdGNoZWQsIGJ1dCB0aGUgbW91c2Vtb3ZlIGhhcyBwYWdlWSBhbmQgcGFnZVggb2YgMCB3aGljaCB3b3VsZCBtZXNzIHVwIHRoZSBjYWxjdWxhdGlvbnMgYW5kIG5lZWRsZXNzbHkgaHVydCBwZXJmb3JtYW5jZS5cblx0XHRcdFx0XHRcdFx0dG91Y2hFdmVudFRhcmdldCA9IChlLnR5cGUuaW5kZXhPZihcInRvdWNoXCIpICE9PSAtMSkgPyAoZS5jdXJyZW50VGFyZ2V0IHx8IGUudGFyZ2V0KSA6IF9kb2M7IC8vcG9pbnRlci1iYXNlZCB0b3VjaGVzIChmb3IgTWljcm9zb2Z0IGJyb3dzZXJzKSBkb24ndCByZW1haW4gbG9ja2VkIHRvIHRoZSBvcmlnaW5hbCB0YXJnZXQgbGlrZSBvdGhlciBicm93c2Vycywgc28gd2UgbXVzdCB1c2UgdGhlIGRvY3VtZW50IGluc3RlYWQuIFRoZSBldmVudCB0eXBlIHdvdWxkIGJlIFwiTVNQb2ludGVyRG93blwiIG9yIFwicG9pbnRlcmRvd25cIi5cblx0XHRcdFx0XHRcdFx0X2FkZExpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2hlbmRcIiwgb25SZWxlYXNlKTtcblx0XHRcdFx0XHRcdFx0X2FkZExpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2htb3ZlXCIsIG9uTW92ZSk7XG5cdFx0XHRcdFx0XHRcdF9hZGRMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNoY2FuY2VsXCIsIG9uUmVsZWFzZSk7XG5cdFx0XHRcdFx0XHRcdF9hZGRMaXN0ZW5lcihfZG9jLCBcInRvdWNoc3RhcnRcIiwgX29uTXVsdGlUb3VjaERvY3VtZW50KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRvdWNoRXZlbnRUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHRcdFx0XHRfYWRkTGlzdGVuZXIoX2RvYywgXCJtb3VzZW1vdmVcIiwgb25Nb3ZlKTsgLy9hdHRhY2ggdGhlc2UgdG8gdGhlIGRvY3VtZW50IGluc3RlYWQgb2YgdGhlIGJveCBpdHNlbGYgc28gdGhhdCBpZiB0aGUgdXNlcidzIG1vdXNlIG1vdmVzIHRvbyBxdWlja2x5IChhbmQgb2ZmIG9mIHRoZSBib3gpLCB0aGluZ3Mgc3RpbGwgd29yay5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHRvdWNoRHJhZ0F4aXMgPSBudWxsO1xuXHRcdFx0XHRcdFx0X2FkZExpc3RlbmVyKF9kb2MsIFwibW91c2V1cFwiLCBvblJlbGVhc2UpO1xuXHRcdFx0XHRcdFx0aWYgKGUgJiYgZS50YXJnZXQpIHtcblx0XHRcdFx0XHRcdFx0X2FkZExpc3RlbmVyKGUudGFyZ2V0LCBcIm1vdXNldXBcIiwgb25SZWxlYXNlKTsgLy93ZSBhbHNvIGhhdmUgdG8gbGlzdGVuIGRpcmVjdGx5IG9uIHRoZSBlbGVtZW50IGJlY2F1c2Ugc29tZSBicm93c2VycyBkb24ndCBidWJibGUgdXAgdGhlIGV2ZW50IHRvIHRoZSBfZG9jIG9uIGVsZW1lbnRzIHdpdGggY29udGVudEVkaXRhYmxlPVwidHJ1ZVwiXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpc0NsaWNraW5nID0gKGlzQ2xpY2thYmxlLmNhbGwoc2VsZiwgZS50YXJnZXQpICYmICF2YXJzLmRyYWdDbGlja2FibGVzKTtcblx0XHRcdFx0XHRcdGlmIChpc0NsaWNraW5nKSB7XG5cdFx0XHRcdFx0XHRcdF9hZGRMaXN0ZW5lcihlLnRhcmdldCwgXCJjaGFuZ2VcIiwgb25SZWxlYXNlKTsgLy9pbiBzb21lIGJyb3dzZXJzLCB3aGVuIHlvdSBtb3VzZWRvd24gb24gYSA8c2VsZWN0PiBlbGVtZW50LCBubyBtb3VzZXVwIGdldHMgZGlzcGF0Y2hlZCEgU28gd2UgbGlzdGVuIGZvciBhIFwiY2hhbmdlXCIgZXZlbnQgaW5zdGVhZC5cblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJwcmVzc1wiLCBcIm9uUHJlc3NcIik7XG5cdFx0XHRcdFx0XHRcdF9zZXRTZWxlY3RhYmxlKHRyaWdnZXJzLCB0cnVlKTsgLy9hY2NvbW1vZGF0ZXMgdGhpbmdzIGxpa2UgaW5wdXRzIGFuZCBlbGVtZW50cyB3aXRoIGNvbnRlbnRFZGl0YWJsZT1cInRydWVcIiAob3RoZXJ3aXNlIHVzZXIgY291bGRuJ3QgZHJhZyB0byBzZWxlY3QgdGV4dClcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0YWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyA9ICghdG91Y2hFdmVudFRhcmdldCB8fCBhbGxvd1ggPT09IGFsbG93WSB8fCBzZWxmLnZhcnMuYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyA9PT0gZmFsc2UpID8gZmFsc2UgOiBhbGxvd1ggPyBcInlcIiA6IFwieFwiO1xuXHRcdFx0XHRcdFx0aWYgKF9pc09sZElFKSB7XG5cdFx0XHRcdFx0XHRcdGUgPSBfcG9wdWxhdGVJRUV2ZW50KGUsIHRydWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICghYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyAmJiAhc2VsZi5hbGxvd0V2ZW50RGVmYXVsdCkge1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGlmIChlLnByZXZlbnRNYW5pcHVsYXRpb24pIHtcblx0XHRcdFx0XHRcdFx0XHRlLnByZXZlbnRNYW5pcHVsYXRpb24oKTsgIC8vZm9yIHNvbWUgTWljcm9zb2Z0IGJyb3dzZXJzXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChlLmNoYW5nZWRUb3VjaGVzKSB7IC8vdG91Y2ggZXZlbnRzIHN0b3JlIHRoZSBkYXRhIHNsaWdodGx5IGRpZmZlcmVudGx5XG5cdFx0XHRcdFx0XHRcdGUgPSB0b3VjaCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XG5cdFx0XHRcdFx0XHRcdHRvdWNoSUQgPSBlLmlkZW50aWZpZXI7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGUucG9pbnRlcklkKSB7XG5cdFx0XHRcdFx0XHRcdHRvdWNoSUQgPSBlLnBvaW50ZXJJZDsgLy9mb3Igc29tZSBNaWNyb3NvZnQgYnJvd3NlcnNcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRvdWNoID0gdG91Y2hJRCA9IG51bGw7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRfZHJhZ0NvdW50Kys7XG5cdFx0XHRcdFx0XHRfYWRkVG9SZW5kZXJRdWV1ZShyZW5kZXIpOyAvL2NhdXNlcyB0aGUgRHJhZ2dhYmxlIHRvIHJlbmRlciBvbiBlYWNoIFwidGlja1wiIG9mIFR3ZWVuTGl0ZS50aWNrZXIgKHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiAtIHVwZGF0aW5nIHZhbHVlcyBpbiBhIG1vdXNlbW92ZSBjYW4gY2F1c2UgdGhlbSB0byBoYXBwZW4gdG9vIGZyZXF1ZW50bHksIGxpa2UgbXVsdGlwbGUgdGltZXMgYmV0d2VlbiBmcmFtZSByZWRyYXdzIHdoaWNoIGlzIHdhc3RlZnVsLCBhbmQgaXQgYWxzbyBwcmV2ZW50cyB2YWx1ZXMgZnJvbSB1cGRhdGluZyBwcm9wZXJseSBpbiBJRTgpXG5cdFx0XHRcdFx0XHRzdGFydFBvaW50ZXJZID0gc2VsZi5wb2ludGVyWSA9IGUucGFnZVk7IC8vcmVjb3JkIHRoZSBzdGFydGluZyB4IGFuZCB5IHNvIHRoYXQgd2UgY2FuIGNhbGN1bGF0ZSB0aGUgbW92ZW1lbnQgZnJvbSB0aGUgb3JpZ2luYWwgaW4gX29uTW91c2VNb3ZlXG5cdFx0XHRcdFx0XHRzdGFydFBvaW50ZXJYID0gc2VsZi5wb2ludGVyWCA9IGUucGFnZVg7XG5cdFx0XHRcdFx0XHRpZiAoYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyB8fCBzZWxmLmF1dG9TY3JvbGwpIHtcblx0XHRcdFx0XHRcdFx0X3JlY29yZE1heFNjcm9sbHModGFyZ2V0LnBhcmVudE5vZGUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHRhcmdldC5wYXJlbnROb2RlICYmIChzY3JvbGxQcm94eSB8fCAoc2VsZi5hdXRvU2Nyb2xsICYmICFyb3RhdGlvbk1vZGUgJiYgdGFyZ2V0LnBhcmVudE5vZGUuX2dzTWF4U2Nyb2xsWCAmJiAhX3BsYWNlaG9sZGVyRGl2LnBhcmVudE5vZGUpKSAmJiAhdGFyZ2V0LmdldEJCb3gpIHsgLy9hZGQgYSBwbGFjZWhvbGRlciBkaXYgdG8gcHJldmVudCB0aGUgcGFyZW50IGNvbnRhaW5lciBmcm9tIGNvbGxhcHNpbmcgd2hlbiB0aGUgdXNlciBkcmFncyB0aGUgZWxlbWVudCBsZWZ0LlxuXHRcdFx0XHRcdFx0XHRfcGxhY2Vob2xkZXJEaXYuc3R5bGUud2lkdGggPSAodGFyZ2V0LnBhcmVudE5vZGUuc2Nyb2xsV2lkdGgpICsgXCJweFwiO1xuXHRcdFx0XHRcdFx0XHR0YXJnZXQucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChfcGxhY2Vob2xkZXJEaXYpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmVjb3JkU3RhcnRQb3NpdGlvbnMoKTtcblx0XHRcdFx0XHRcdGlmIChzZWxmLnR3ZWVuKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYudHdlZW4ua2lsbCgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c2VsZi5pc1Rocm93aW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRUd2VlbkxpdGUua2lsbFR3ZWVuc09mKHNjcm9sbFByb3h5IHx8IHRhcmdldCwgdHJ1ZSwga2lsbFByb3BzKTsgLy9pbiBjYXNlIHRoZSB1c2VyIHRyaWVzIHRvIGRyYWcgaXQgYmVmb3JlIHRoZSBsYXN0IHR3ZWVuIGlzIGRvbmUuXG5cdFx0XHRcdFx0XHRpZiAoc2Nyb2xsUHJveHkpIHtcblx0XHRcdFx0XHRcdFx0VHdlZW5MaXRlLmtpbGxUd2VlbnNPZih0YXJnZXQsIHRydWUsIHtzY3JvbGxUbzoxfSk7IC8vanVzdCBpbiBjYXNlIHRoZSBvcmlnaW5hbCB0YXJnZXQncyBzY3JvbGwgcG9zaXRpb24gaXMgYmVpbmcgdHdlZW5lZCBzb21ld2hlcmUgZWxzZS5cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNlbGYudHdlZW4gPSBzZWxmLmxvY2tlZEF4aXMgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKHZhcnMuekluZGV4Qm9vc3QgfHwgKCFyb3RhdGlvbk1vZGUgJiYgIXNjcm9sbFByb3h5ICYmIHZhcnMuekluZGV4Qm9vc3QgIT09IGZhbHNlKSkge1xuXHRcdFx0XHRcdFx0XHR0YXJnZXQuc3R5bGUuekluZGV4ID0gRHJhZ2dhYmxlLnpJbmRleCsrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c2VsZi5pc1ByZXNzZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aGFzRHJhZ0NhbGxiYWNrID0gISEodmFycy5vbkRyYWcgfHwgc2VsZi5fbGlzdGVuZXJzLmRyYWcpO1xuXHRcdFx0XHRcdFx0aWYgKCFyb3RhdGlvbk1vZGUpIHtcblx0XHRcdFx0XHRcdFx0aSA9IHRyaWdnZXJzLmxlbmd0aDtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdFx0X3NldFN0eWxlKHRyaWdnZXJzW2ldLCBcImN1cnNvclwiLCB2YXJzLmN1cnNvciB8fCBcIm1vdmVcIik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwicHJlc3NcIiwgXCJvblByZXNzXCIpO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvL2NhbGxlZCBldmVyeSB0aW1lIHRoZSBtb3VzZS90b3VjaCBtb3Zlc1xuXHRcdFx0XHRcdG9uTW92ZSA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdHZhciBvcmlnaW5hbEV2ZW50ID0gZSxcblx0XHRcdFx0XHRcdFx0dG91Y2hlcywgcG9pbnRlclgsIHBvaW50ZXJZLCBpLCBkeCwgZHk7XG5cdFx0XHRcdFx0XHRpZiAoIWVuYWJsZWQgfHwgX2lzTXVsdGlUb3VjaGluZyB8fCAhc2VsZi5pc1ByZXNzZWQgfHwgIWUpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c2VsZi5wb2ludGVyRXZlbnQgPSBlO1xuXHRcdFx0XHRcdFx0dG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXM7XG5cdFx0XHRcdFx0XHRpZiAodG91Y2hlcykgeyAvL3RvdWNoIGV2ZW50cyBzdG9yZSB0aGUgZGF0YSBzbGlnaHRseSBkaWZmZXJlbnRseVxuXHRcdFx0XHRcdFx0XHRlID0gdG91Y2hlc1swXTtcblx0XHRcdFx0XHRcdFx0aWYgKGUgIT09IHRvdWNoICYmIGUuaWRlbnRpZmllciAhPT0gdG91Y2hJRCkgeyAvL1VzdWFsbHkgY2hhbmdlZFRvdWNoZXNbMF0gd2lsbCBiZSB3aGF0IHdlJ3JlIGxvb2tpbmcgZm9yLCBidXQgaW4gY2FzZSBpdCdzIG5vdCwgbG9vayB0aHJvdWdoIHRoZSByZXN0IG9mIHRoZSBhcnJheS4uLihhbmQgQW5kcm9pZCBicm93c2VycyBkb24ndCByZXVzZSB0aGUgZXZlbnQgbGlrZSBpT1MpXG5cdFx0XHRcdFx0XHRcdFx0aSA9IHRvdWNoZXMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSAmJiAoZSA9IHRvdWNoZXNbaV0pLmlkZW50aWZpZXIgIT09IHRvdWNoSUQpIHt9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGkgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGUucG9pbnRlcklkICYmIHRvdWNoSUQgJiYgZS5wb2ludGVySWQgIT09IHRvdWNoSUQpIHsgLy9mb3Igc29tZSBNaWNyb3NvZnQgYnJvd3NlcnMsIHdlIG11c3QgYXR0YWNoIHRoZSBsaXN0ZW5lciB0byB0aGUgZG9jIHJhdGhlciB0aGFuIHRoZSB0cmlnZ2VyIHNvIHRoYXQgd2hlbiB0aGUgZmluZ2VyIG1vdmVzIG91dHNpZGUgdGhlIGJvdW5kcyBvZiB0aGUgdHJpZ2dlciwgdGhpbmdzIHN0aWxsIHdvcmsuIFNvIGlmIHRoZSBldmVudCB3ZSdyZSByZWNlaXZpbmcgaGFzIGEgcG9pbnRlcklkIHRoYXQgZG9lc24ndCBtYXRjaCB0aGUgdG91Y2hJRCwgaWdub3JlIGl0IChmb3IgbXVsdGktdG91Y2gpXG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChfaXNPbGRJRSkge1xuXHRcdFx0XHRcdFx0XHRlID0gX3BvcHVsYXRlSUVFdmVudChlLCB0cnVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0b3VjaEV2ZW50VGFyZ2V0ICYmIGFsbG93TmF0aXZlVG91Y2hTY3JvbGxpbmcgJiYgIXRvdWNoRHJhZ0F4aXMpIHsgLy9BbmRyb2lkIGJyb3dzZXJzIGZvcmNlIHVzIHRvIGRlY2lkZSBvbiB0aGUgZmlyc3QgXCJ0b3VjaG1vdmVcIiBldmVudCBpZiB3ZSBzaG91bGQgYWxsb3cgdGhlIGRlZmF1bHQgKHNjcm9sbGluZykgYmVoYXZpb3Igb3IgcHJldmVudERlZmF1bHQoKS4gT3RoZXJ3aXNlLCBhIFwidG91Y2hjYW5jZWxcIiB3aWxsIGJlIGZpcmVkIGFuZCB0aGVuIG5vIFwidG91Y2htb3ZlXCIgb3IgXCJ0b3VjaGVuZFwiIHdpbGwgZmlyZSBkdXJpbmcgdGhlIHNjcm9sbGluZyAobm8gZ29vZCkuXG5cdFx0XHRcdFx0XHRcdFx0cG9pbnRlclggPSBlLnBhZ2VYO1xuXHRcdFx0XHRcdFx0XHRcdHBvaW50ZXJZID0gZS5wYWdlWTtcblx0XHRcdFx0XHRcdFx0XHRpZiAobWF0cml4KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpID0gcG9pbnRlclggKiBtYXRyaXhbMF0gKyBwb2ludGVyWSAqIG1hdHJpeFsyXSArIG1hdHJpeFs0XTtcblx0XHRcdFx0XHRcdFx0XHRcdHBvaW50ZXJZID0gcG9pbnRlclggKiBtYXRyaXhbMV0gKyBwb2ludGVyWSAqIG1hdHJpeFszXSArIG1hdHJpeFs1XTtcblx0XHRcdFx0XHRcdFx0XHRcdHBvaW50ZXJYID0gaTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0ZHggPSBNYXRoLmFicyhwb2ludGVyWCAtIHN0YXJ0UG9pbnRlclgpO1xuXHRcdFx0XHRcdFx0XHRcdGR5ID0gTWF0aC5hYnMocG9pbnRlclkgLSBzdGFydFBvaW50ZXJZKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoKGR4ICE9PSBkeSAmJiAoZHggPiBtaW5pbXVtTW92ZW1lbnQgfHwgZHkgPiBtaW5pbXVtTW92ZW1lbnQpKSB8fCAoX2lzQW5kcm9pZCAmJiBhbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nID09PSB0b3VjaERyYWdBeGlzKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dG91Y2hEcmFnQXhpcyA9IChkeCA+IGR5ICYmIGFsbG93WCkgPyBcInhcIiA6IFwieVwiO1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKHNlbGYudmFycy5sb2NrQXhpc09uVG91Y2hTY3JvbGwgIT09IGZhbHNlKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHNlbGYubG9ja2VkQXhpcyA9ICh0b3VjaERyYWdBeGlzID09PSBcInhcIikgPyBcInlcIiA6IFwieFwiO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mKHNlbGYudmFycy5vbkxvY2tBeGlzKSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0c2VsZi52YXJzLm9uTG9ja0F4aXMuY2FsbChzZWxmLCBvcmlnaW5hbEV2ZW50KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKF9pc0FuZHJvaWQgJiYgYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyA9PT0gdG91Y2hEcmFnQXhpcykge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRvblJlbGVhc2Uob3JpZ2luYWxFdmVudCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFzZWxmLmFsbG93RXZlbnREZWZhdWx0ICYmICghYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyB8fCAodG91Y2hEcmFnQXhpcyAmJiBhbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nICE9PSB0b3VjaERyYWdBeGlzKSkgJiYgb3JpZ2luYWxFdmVudC5jYW5jZWxhYmxlICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAob3JpZ2luYWxFdmVudC5wcmV2ZW50TWFuaXB1bGF0aW9uKSB7IC8vZm9yIHNvbWUgTWljcm9zb2Z0IGJyb3dzZXJzXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEV2ZW50LnByZXZlbnRNYW5pcHVsYXRpb24oKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChzZWxmLmF1dG9TY3JvbGwpIHtcblx0XHRcdFx0XHRcdFx0Y2hlY2tBdXRvU2Nyb2xsQm91bmRzID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNldFBvaW50ZXJQb3NpdGlvbihlLnBhZ2VYLCBlLnBhZ2VZKTtcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0c2V0UG9pbnRlclBvc2l0aW9uID0gZnVuY3Rpb24ocG9pbnRlclgsIHBvaW50ZXJZKSB7XG5cdFx0XHRcdFx0XHR2YXIgZHJhZ1RvbGVyYW5jZSA9IDEgLSBzZWxmLmRyYWdSZXNpc3RhbmNlLFxuXHRcdFx0XHRcdFx0XHRlZGdlVG9sZXJhbmNlID0gMSAtIHNlbGYuZWRnZVJlc2lzdGFuY2UsXG5cdFx0XHRcdFx0XHRcdHhDaGFuZ2UsIHlDaGFuZ2UsIHgsIHksIGRpZiwgdGVtcDtcblxuXHRcdFx0XHRcdFx0c2VsZi5wb2ludGVyWCA9IHBvaW50ZXJYO1xuXHRcdFx0XHRcdFx0c2VsZi5wb2ludGVyWSA9IHBvaW50ZXJZO1xuXHRcdFx0XHRcdFx0aWYgKHJvdGF0aW9uTW9kZSkge1xuXHRcdFx0XHRcdFx0XHR5ID0gTWF0aC5hdGFuMihyb3RhdGlvbk9yaWdpbi55IC0gcG9pbnRlclksIHBvaW50ZXJYIC0gcm90YXRpb25PcmlnaW4ueCkgKiBfUkFEMkRFRztcblx0XHRcdFx0XHRcdFx0ZGlmID0gc2VsZi55IC0geTtcblx0XHRcdFx0XHRcdFx0c2VsZi55ID0geTtcblx0XHRcdFx0XHRcdFx0aWYgKGRpZiA+IDE4MCkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0RWxlbWVudFkgLT0gMzYwO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKGRpZiA8IC0xODApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGFydEVsZW1lbnRZICs9IDM2MDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR4ID0gc3RhcnRFbGVtZW50WCArIChzdGFydEVsZW1lbnRZIC0geSkgKiBkcmFnVG9sZXJhbmNlO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRpZiAobWF0cml4KSB7XG5cdFx0XHRcdFx0XHRcdFx0dGVtcCA9IHBvaW50ZXJYICogbWF0cml4WzBdICsgcG9pbnRlclkgKiBtYXRyaXhbMl0gKyBtYXRyaXhbNF07XG5cdFx0XHRcdFx0XHRcdFx0cG9pbnRlclkgPSBwb2ludGVyWCAqIG1hdHJpeFsxXSArIHBvaW50ZXJZICogbWF0cml4WzNdICsgbWF0cml4WzVdO1xuXHRcdFx0XHRcdFx0XHRcdHBvaW50ZXJYID0gdGVtcDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR5Q2hhbmdlID0gKHBvaW50ZXJZIC0gc3RhcnRQb2ludGVyWSk7XG5cdFx0XHRcdFx0XHRcdHhDaGFuZ2UgPSAocG9pbnRlclggLSBzdGFydFBvaW50ZXJYKTtcblx0XHRcdFx0XHRcdFx0aWYgKHlDaGFuZ2UgPCBtaW5pbXVtTW92ZW1lbnQgJiYgeUNoYW5nZSA+IC1taW5pbXVtTW92ZW1lbnQpIHtcblx0XHRcdFx0XHRcdFx0XHR5Q2hhbmdlID0gMDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoeENoYW5nZSA8IG1pbmltdW1Nb3ZlbWVudCAmJiB4Q2hhbmdlID4gLW1pbmltdW1Nb3ZlbWVudCkge1xuXHRcdFx0XHRcdFx0XHRcdHhDaGFuZ2UgPSAwO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICgoc2VsZi5sb2NrQXhpcyB8fCBzZWxmLmxvY2tlZEF4aXMpICYmICh4Q2hhbmdlIHx8IHlDaGFuZ2UpKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGVtcCA9IHNlbGYubG9ja2VkQXhpcztcblx0XHRcdFx0XHRcdFx0XHRpZiAoIXRlbXApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHNlbGYubG9ja2VkQXhpcyA9IHRlbXAgPSAoYWxsb3dYICYmIE1hdGguYWJzKHhDaGFuZ2UpID4gTWF0aC5hYnMoeUNoYW5nZSkpID8gXCJ5XCIgOiBhbGxvd1kgPyBcInhcIiA6IG51bGw7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAodGVtcCAmJiB0eXBlb2Yoc2VsZi52YXJzLm9uTG9ja0F4aXMpID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0c2VsZi52YXJzLm9uTG9ja0F4aXMuY2FsbChzZWxmLCBzZWxmLnBvaW50ZXJFdmVudCk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGlmICh0ZW1wID09PSBcInlcIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0eUNoYW5nZSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh0ZW1wID09PSBcInhcIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0eENoYW5nZSA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHggPSBzdGFydEVsZW1lbnRYICsgeENoYW5nZSAqIGRyYWdUb2xlcmFuY2U7XG5cdFx0XHRcdFx0XHRcdHkgPSBzdGFydEVsZW1lbnRZICsgeUNoYW5nZSAqIGRyYWdUb2xlcmFuY2U7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICgoc25hcFggfHwgc25hcFkpICYmIChzZWxmLnggIT09IHggfHwgKHNlbGYueSAhPT0geSAmJiAhcm90YXRpb25Nb2RlKSkpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHNuYXBYKSB7XG5cdFx0XHRcdFx0XHRcdFx0eCA9IHNuYXBYKHgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmIChzbmFwWSkge1xuXHRcdFx0XHRcdFx0XHRcdHkgPSBzbmFwWSh5KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmIChoYXNCb3VuZHMpIHtcblx0XHRcdFx0XHRcdFx0aWYgKHggPiBtYXhYKSB7XG5cdFx0XHRcdFx0XHRcdFx0eCA9IG1heFggKyAoeCAtIG1heFgpICogZWRnZVRvbGVyYW5jZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh4IDwgbWluWCkge1xuXHRcdFx0XHRcdFx0XHRcdHggPSBtaW5YICsgKHggLSBtaW5YKSAqIGVkZ2VUb2xlcmFuY2U7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKCFyb3RhdGlvbk1vZGUpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoeSA+IG1heFkpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHkgPSBtYXhZICsgKHkgLSBtYXhZKSAqIGVkZ2VUb2xlcmFuY2U7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh5IDwgbWluWSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0eSA9IG1pblkgKyAoeSAtIG1pblkpICogZWRnZVRvbGVyYW5jZTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghcm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdHggPSBNYXRoLnJvdW5kKHgpOyAvL2hlbHBzIHdvcmsgYXJvdW5kIGFuIGlzc3VlIHdpdGggc29tZSBXaW4gVG91Y2ggZGV2aWNlc1xuXHRcdFx0XHRcdFx0XHR5ID0gTWF0aC5yb3VuZCh5KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChzZWxmLnggIT09IHggfHwgKHNlbGYueSAhPT0geSAmJiAhcm90YXRpb25Nb2RlKSkge1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcInNldHRpbmcgc2VsZiBcIiwgeCwgeSk7XG5cdFx0XHRcdFx0XHRcdGlmIChyb3RhdGlvbk1vZGUpIHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLmVuZFJvdGF0aW9uID0gc2VsZi54ID0gc2VsZi5lbmRYID0geDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoYWxsb3dZKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZWxmLnkgPSBzZWxmLmVuZFkgPSB5O1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRpZiAoYWxsb3dYKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzZWxmLnggPSBzZWxmLmVuZFggPSB4O1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRkaXJ0eSA9IHRydWU7IC8vYSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdlIG5lZWQgdG8gcmVuZGVyIHRoZSB0YXJnZXQgbmV4dCB0aW1lIHRoZSBUd2VlbkxpdGUudGlja2VyIGRpc3BhdGNoZXMgYSBcInRpY2tcIiBldmVudCAodHlwaWNhbGx5IG9uIGEgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKSAtIHRoaXMgaXMgYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gKHdlIHNob3VsZG4ndCByZW5kZXIgb24gZXZlcnkgbW92ZSBiZWNhdXNlIHNvbWV0aW1lcyBtYW55IG1vdmUgZXZlbnRzIGNhbiBnZXQgZGlzcGF0Y2hlZCBiZXR3ZWVuIHNjcmVlbiByZWZyZXNoZXMsIGFuZCB0aGF0J2QgYmUgd2FzdGVmdWwgdG8gcmVuZGVyIGV2ZXJ5IHRpbWUpXG5cdFx0XHRcdFx0XHRcdGlmICghc2VsZi5pc0RyYWdnaW5nICYmIHNlbGYuaXNQcmVzc2VkKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5pc0RyYWdnaW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRfZGlzcGF0Y2hFdmVudChzZWxmLCBcImRyYWdzdGFydFwiLCBcIm9uRHJhZ1N0YXJ0XCIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vY2FsbGVkIHdoZW4gdGhlIG1vdXNlL3RvdWNoIGlzIHJlbGVhc2VkXG5cdFx0XHRcdFx0b25SZWxlYXNlID0gZnVuY3Rpb24oZSwgZm9yY2UpIHtcblx0XHRcdFx0XHRcdGlmICghZW5hYmxlZCB8fCAhc2VsZi5pc1ByZXNzZWQgfHwgKGUgJiYgdG91Y2hJRCAhPSBudWxsICYmICFmb3JjZSAmJiAoKGUucG9pbnRlcklkICYmIGUucG9pbnRlcklkICE9PSB0b3VjaElEKSB8fCAoZS5jaGFuZ2VkVG91Y2hlcyAmJiAhX2hhc1RvdWNoSUQoZS5jaGFuZ2VkVG91Y2hlcywgdG91Y2hJRCkpKSkpIHsgIC8vZm9yIHNvbWUgTWljcm9zb2Z0IGJyb3dzZXJzLCB3ZSBtdXN0IGF0dGFjaCB0aGUgbGlzdGVuZXIgdG8gdGhlIGRvYyByYXRoZXIgdGhhbiB0aGUgdHJpZ2dlciBzbyB0aGF0IHdoZW4gdGhlIGZpbmdlciBtb3ZlcyBvdXRzaWRlIHRoZSBib3VuZHMgb2YgdGhlIHRyaWdnZXIsIHRoaW5ncyBzdGlsbCB3b3JrLiBTbyBpZiB0aGUgZXZlbnQgd2UncmUgcmVjZWl2aW5nIGhhcyBhIHBvaW50ZXJJZCB0aGF0IGRvZXNuJ3QgbWF0Y2ggdGhlIHRvdWNoSUQsIGlnbm9yZSBpdCAoZm9yIG11bHRpLXRvdWNoKVxuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzZWxmLmlzUHJlc3NlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dmFyIG9yaWdpbmFsRXZlbnQgPSBlLFxuXHRcdFx0XHRcdFx0XHR3YXNEcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZyxcblx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXJEZWxheWVkQ2FsbCA9IFR3ZWVuTGl0ZS5kZWxheWVkQ2FsbCgwLjAwMSwgcmVtb3ZlUGxhY2Vob2xkZXIpLFxuXHRcdFx0XHRcdFx0XHR0b3VjaGVzLCBpLCBzeW50aGV0aWNFdmVudCwgZXZlbnRUYXJnZXQsIHN5bnRoZXRpY0NsaWNrO1xuXHRcdFx0XHRcdFx0aWYgKHRvdWNoRXZlbnRUYXJnZXQpIHtcblx0XHRcdFx0XHRcdFx0X3JlbW92ZUxpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2hlbmRcIiwgb25SZWxlYXNlKTtcblx0XHRcdFx0XHRcdFx0X3JlbW92ZUxpc3RlbmVyKHRvdWNoRXZlbnRUYXJnZXQsIFwidG91Y2htb3ZlXCIsIG9uTW92ZSk7XG5cdFx0XHRcdFx0XHRcdF9yZW1vdmVMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNoY2FuY2VsXCIsIG9uUmVsZWFzZSk7XG5cdFx0XHRcdFx0XHRcdF9yZW1vdmVMaXN0ZW5lcihfZG9jLCBcInRvdWNoc3RhcnRcIiwgX29uTXVsdGlUb3VjaERvY3VtZW50KTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdF9yZW1vdmVMaXN0ZW5lcihfZG9jLCBcIm1vdXNlbW92ZVwiLCBvbk1vdmUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0X3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwibW91c2V1cFwiLCBvblJlbGVhc2UpO1xuXHRcdFx0XHRcdFx0aWYgKGUgJiYgZS50YXJnZXQpIHtcblx0XHRcdFx0XHRcdFx0X3JlbW92ZUxpc3RlbmVyKGUudGFyZ2V0LCBcIm1vdXNldXBcIiwgb25SZWxlYXNlKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGRpcnR5ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRpZiAoaXNDbGlja2luZykge1xuXHRcdFx0XHRcdFx0XHRpZiAoZSkge1xuXHRcdFx0XHRcdFx0XHRcdF9yZW1vdmVMaXN0ZW5lcihlLnRhcmdldCwgXCJjaGFuZ2VcIiwgb25SZWxlYXNlKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRfc2V0U2VsZWN0YWJsZSh0cmlnZ2VycywgZmFsc2UpO1xuXHRcdFx0XHRcdFx0XHRfZGlzcGF0Y2hFdmVudChzZWxmLCBcInJlbGVhc2VcIiwgXCJvblJlbGVhc2VcIik7XG5cdFx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiY2xpY2tcIiwgXCJvbkNsaWNrXCIpO1xuXHRcdFx0XHRcdFx0XHRpc0NsaWNraW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdF9yZW1vdmVGcm9tUmVuZGVyUXVldWUocmVuZGVyKTtcblx0XHRcdFx0XHRcdGlmICghcm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdGkgPSB0cmlnZ2Vycy5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRcdFx0XHRcdF9zZXRTdHlsZSh0cmlnZ2Vyc1tpXSwgXCJjdXJzb3JcIiwgdmFycy5jdXJzb3IgfHwgXCJtb3ZlXCIpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAod2FzRHJhZ2dpbmcpIHtcblx0XHRcdFx0XHRcdFx0ZHJhZ0VuZFRpbWUgPSBfbGFzdERyYWdUaW1lID0gX2dldFRpbWUoKTtcblx0XHRcdFx0XHRcdFx0c2VsZi5pc0RyYWdnaW5nID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRfZHJhZ0NvdW50LS07XG5cdFx0XHRcdFx0XHRpZiAoZSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoX2lzT2xkSUUpIHtcblx0XHRcdFx0XHRcdFx0XHRlID0gX3BvcHVsYXRlSUVFdmVudChlLCBmYWxzZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0dG91Y2hlcyA9IGUuY2hhbmdlZFRvdWNoZXM7XG5cdFx0XHRcdFx0XHRcdGlmICh0b3VjaGVzKSB7IC8vdG91Y2ggZXZlbnRzIHN0b3JlIHRoZSBkYXRhIHNsaWdodGx5IGRpZmZlcmVudGx5XG5cdFx0XHRcdFx0XHRcdFx0ZSA9IHRvdWNoZXNbMF07XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGUgIT09IHRvdWNoICYmIGUuaWRlbnRpZmllciAhPT0gdG91Y2hJRCkgeyAvL1VzdWFsbHkgY2hhbmdlZFRvdWNoZXNbMF0gd2lsbCBiZSB3aGF0IHdlJ3JlIGxvb2tpbmcgZm9yLCBidXQgaW4gY2FzZSBpdCdzIG5vdCwgbG9vayB0aHJvdWdoIHRoZSByZXN0IG9mIHRoZSBhcnJheS4uLihhbmQgQW5kcm9pZCBicm93c2VycyBkb24ndCByZXVzZSB0aGUgZXZlbnQgbGlrZSBpT1MpXG5cdFx0XHRcdFx0XHRcdFx0XHRpID0gdG91Y2hlcy5sZW5ndGg7XG5cdFx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEgJiYgKGUgPSB0b3VjaGVzW2ldKS5pZGVudGlmaWVyICE9PSB0b3VjaElEKSB7fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKGkgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0c2VsZi5wb2ludGVyRXZlbnQgPSBvcmlnaW5hbEV2ZW50O1xuXHRcdFx0XHRcdFx0XHRzZWxmLnBvaW50ZXJYID0gZS5wYWdlWDtcblx0XHRcdFx0XHRcdFx0c2VsZi5wb2ludGVyWSA9IGUucGFnZVk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAob3JpZ2luYWxFdmVudCAmJiAhd2FzRHJhZ2dpbmcpIHtcblx0XHRcdFx0XHRcdFx0aWYgKGludGVycnVwdGVkICYmICh2YXJzLnNuYXAgfHwgdmFycy5ib3VuZHMpKSB7IC8vb3RoZXJ3aXNlLCBpZiB0aGUgdXNlciBjbGlja3Mgb24gdGhlIG9iamVjdCB3aGlsZSBpdCdzIGFuaW1hdGluZyB0byBhIHNuYXBwZWQgcG9zaXRpb24sIGFuZCB0aGVuIHJlbGVhc2VzIHdpdGhvdXQgbW92aW5nIDMgcGl4ZWxzLCBpdCB3aWxsIGp1c3Qgc3RheSB0aGVyZSAoaXQgc2hvdWxkIGFuaW1hdGUvc25hcClcblx0XHRcdFx0XHRcdFx0XHRhbmltYXRlKHZhcnMudGhyb3dQcm9wcyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJyZWxlYXNlXCIsIFwib25SZWxlYXNlXCIpO1xuXHRcdFx0XHRcdFx0XHRpZiAoIV9pc0FuZHJvaWQgfHwgb3JpZ2luYWxFdmVudC50eXBlICE9PSBcInRvdWNobW92ZVwiKSB7IC8vdG8gYWNjb21tb2RhdGUgbmF0aXZlIHNjcm9sbGluZyBvbiBBbmRyb2lkIGRldmljZXMsIHdlIGhhdmUgdG8gaW1tZWRpYXRlbHkgY2FsbCBvblJlbGVhc2UoKSBvbiB0aGUgZmlyc3QgdG91Y2htb3ZlIGV2ZW50LCBidXQgdGhhdCBzaG91bGRuJ3QgdHJpZ2dlciBhIFwiY2xpY2tcIi5cblx0XHRcdFx0XHRcdFx0XHRfZGlzcGF0Y2hFdmVudChzZWxmLCBcImNsaWNrXCIsIFwib25DbGlja1wiKTtcblx0XHRcdFx0XHRcdFx0XHRldmVudFRhcmdldCA9IG9yaWdpbmFsRXZlbnQudGFyZ2V0IHx8IG9yaWdpbmFsRXZlbnQuc3JjRWxlbWVudCB8fCB0YXJnZXQ7IC8vb2xkIElFIHVzZXMgc3JjRWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdGNsaWNrVGltZSA9IF9nZXRUaW1lKCk7XG5cdFx0XHRcdFx0XHRcdFx0c3ludGhldGljQ2xpY2sgPSBmdW5jdGlvbigpIHsgLy8gc29tZSBicm93c2VycyAobGlrZSBGaXJlZm94KSB3b24ndCB0cnVzdCBzY3JpcHQtZ2VuZXJhdGVkIGNsaWNrcywgc28gaWYgdGhlIHVzZXIgdHJpZXMgdG8gY2xpY2sgb24gYSB2aWRlbyB0byBwbGF5IGl0LCBmb3IgZXhhbXBsZSwgaXQgc2ltcGx5IHdvbid0IHdvcmsuIFNpbmNlIGEgcmVndWxhciBcImNsaWNrXCIgZXZlbnQgd2lsbCBtb3N0IGxpa2VseSBiZSBnZW5lcmF0ZWQgYW55d2F5IChvbmUgdGhhdCBoYXMgaXRzIGlzVHJ1c3RlZCBmbGFnIHNldCB0byB0cnVlKSwgd2UgbXVzdCBzbGlnaHRseSBkZWxheSBvdXIgc2NyaXB0LWdlbmVyYXRlZCBjbGljayBzbyB0aGF0IHRoZSBcInJlYWxcIi90cnVzdGVkIG9uZSBpcyBwcmlvcml0aXplZC4gUmVtZW1iZXIsIHdoZW4gdGhlcmUgYXJlIGR1cGxpY2F0ZSBldmVudHMgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgd2Ugc3VwcHJlc3MgYWxsIGJ1dCB0aGUgZmlyc3Qgb25lLiBTb21lIGJyb3dzZXJzIGRvbid0IGV2ZW4gdHJpZ2dlciB0aGUgXCJyZWFsXCIgb25lIGF0IGFsbCwgc28gb3VyIHN5bnRoZXRpYyBvbmUgaXMgYSBzYWZldHkgdmFsdmUgdGhhdCBlbnN1cmVzIHRoYXQgbm8gbWF0dGVyIHdoYXQsIGEgY2xpY2sgZXZlbnQgZG9lcyBnZXQgZGlzcGF0Y2hlZC5cblx0XHRcdFx0XHRcdFx0XHRcdGlmIChjbGlja1RpbWUgIT09IGNsaWNrRGlzcGF0Y2ggJiYgc2VsZi5lbmFibGVkKCkgJiYgIXNlbGYuaXNQcmVzc2VkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmIChldmVudFRhcmdldC5jbGljaykgeyAvL3NvbWUgYnJvd3NlcnMgKGxpa2UgbW9iaWxlIFNhZmFyaSkgZG9uJ3QgcHJvcGVybHkgdHJpZ2dlciB0aGUgY2xpY2sgZXZlbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRldmVudFRhcmdldC5jbGljaygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKF9kb2MuY3JlYXRlRXZlbnQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzeW50aGV0aWNFdmVudCA9IF9kb2MuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRzeW50aGV0aWNFdmVudC5pbml0TW91c2VFdmVudChcImNsaWNrXCIsIHRydWUsIHRydWUsIHdpbmRvdywgMSwgc2VsZi5wb2ludGVyRXZlbnQuc2NyZWVuWCwgc2VsZi5wb2ludGVyRXZlbnQuc2NyZWVuWSwgc2VsZi5wb2ludGVyWCwgc2VsZi5wb2ludGVyWSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDAsIG51bGwpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoc3ludGhldGljRXZlbnQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIV9pc0FuZHJvaWQpIHsgLy9pT1MgU2FmYXJpIHJlcXVpcmVzIHRoZSBzeW50aGV0aWMgY2xpY2sgdG8gaGFwcGVuIGltbWVkaWF0ZWx5IG9yIGVsc2UgaXQgc2ltcGx5IHdvbid0IHdvcmssIGJ1dCBBbmRyb2lkIGRvZXNuJ3QgcGxheSBuaWNlLlxuXHRcdFx0XHRcdFx0XHRcdFx0VHdlZW5MaXRlLmRlbGF5ZWRDYWxsKDAuMDAwMDEsIHN5bnRoZXRpY0NsaWNrKTsgLy9pbiBhZGRpdGlvbiB0byB0aGUgaU9TIGJ1ZyB3b3JrYXJvdW5kLCB0aGVyZSdzIGEgRmlyZWZveCBpc3N1ZSB3aXRoIGNsaWNraW5nIG9uIHRoaW5ncyBsaWtlIGEgdmlkZW8gdG8gcGxheSwgc28gd2UgbXVzdCBmYWtlIGEgY2xpY2sgZXZlbnQgaW4gYSBzbGlnaHRseSBkZWxheWVkIGZhc2hpb24uIFByZXZpb3VzbHksIHdlIGxpc3RlbmVkIGZvciB0aGUgXCJjbGlja1wiIGV2ZW50IHdpdGggXCJjYXB0dXJlXCIgZmFsc2Ugd2hpY2ggc29sdmVkIHRoZSB2aWRlby1jbGljay10by1wbGF5IGlzc3VlLCBidXQgaXQgd291bGQgYWxsb3cgdGhlIFwiY2xpY2tcIiBldmVudCB0byBiZSBkaXNwYXRjaGVkIHR3aWNlIGxpa2UgaWYgeW91IHdlcmUgdXNpbmcgYSBqUXVlcnkuY2xpY2soKSBiZWNhdXNlIHRoYXQgd2FzIGhhbmRsZWQgaW4gdGhlIGNhcHR1cmUgcGhhc2UsIHRodXMgd2UgaGFkIHRvIHN3aXRjaCB0byB0aGUgY2FwdHVyZSBwaGFzZSB0byBhdm9pZCB0aGUgZG91YmxlLWRpc3BhdGNoaW5nLCBidXQgZG8gdGhlIGRlbGF5ZWQgc3ludGhldGljIGNsaWNrLlxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YW5pbWF0ZSh2YXJzLnRocm93UHJvcHMpOyAvL3dpbGwgc2tpcCBpZiB0aHJvd1Byb3BzIGlzbid0IGRlZmluZWQgb3IgVGhyb3dQcm9wc1BsdWdpbiBpc24ndCBsb2FkZWQuXG5cdFx0XHRcdFx0XHRcdGlmICghX2lzT2xkSUUgJiYgIXNlbGYuYWxsb3dFdmVudERlZmF1bHQgJiYgb3JpZ2luYWxFdmVudCAmJiAodmFycy5kcmFnQ2xpY2thYmxlcyB8fCAhaXNDbGlja2FibGUuY2FsbChzZWxmLCBvcmlnaW5hbEV2ZW50LnRhcmdldCkpICYmIHdhc0RyYWdnaW5nICYmICghYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZyB8fCAodG91Y2hEcmFnQXhpcyAmJiBhbGxvd05hdGl2ZVRvdWNoU2Nyb2xsaW5nID09PSB0b3VjaERyYWdBeGlzKSkgJiYgb3JpZ2luYWxFdmVudC5jYW5jZWxhYmxlICE9PSBmYWxzZSkge1xuXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAob3JpZ2luYWxFdmVudC5wcmV2ZW50TWFuaXB1bGF0aW9uKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEV2ZW50LnByZXZlbnRNYW5pcHVsYXRpb24oKTsgIC8vZm9yIHNvbWUgTWljcm9zb2Z0IGJyb3dzZXJzXG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwicmVsZWFzZVwiLCBcIm9uUmVsZWFzZVwiKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChpc1R3ZWVuaW5nKCkpIHtcblx0XHRcdFx0XHRcdFx0cGxhY2Vob2xkZXJEZWxheWVkQ2FsbC5kdXJhdGlvbiggc2VsZi50d2Vlbi5kdXJhdGlvbigpICk7IC8vc3luYyB0aGUgdGltaW5nIHNvIHRoYXQgdGhlIHBsYWNlaG9sZGVyIERJViBnZXRzXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAod2FzRHJhZ2dpbmcpIHtcblx0XHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJkcmFnZW5kXCIsIFwib25EcmFnRW5kXCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdHVwZGF0ZVNjcm9sbCA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRcdGlmIChlICYmIHNlbGYuaXNEcmFnZ2luZyAmJiAhc2Nyb2xsUHJveHkpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCB8fCB0YXJnZXQucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdFx0XHRkZWx0YVggPSBwYXJlbnQuc2Nyb2xsTGVmdCAtIHBhcmVudC5fZ3NTY3JvbGxYLFxuXHRcdFx0XHRcdFx0XHRcdGRlbHRhWSA9IHBhcmVudC5zY3JvbGxUb3AgLSBwYXJlbnQuX2dzU2Nyb2xsWTtcblx0XHRcdFx0XHRcdFx0aWYgKGRlbHRhWCB8fCBkZWx0YVkpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAobWF0cml4KSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydFBvaW50ZXJYIC09IGRlbHRhWCAqIG1hdHJpeFswXSArIGRlbHRhWSAqIG1hdHJpeFsyXTtcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXJ0UG9pbnRlclkgLT0gZGVsdGFZICogbWF0cml4WzNdICsgZGVsdGFYICogbWF0cml4WzFdO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGFydFBvaW50ZXJYIC09IGRlbHRhWDtcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXJ0UG9pbnRlclkgLT0gZGVsdGFZO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRwYXJlbnQuX2dzU2Nyb2xsWCArPSBkZWx0YVg7XG5cdFx0XHRcdFx0XHRcdFx0cGFyZW50Ll9nc1Njcm9sbFkgKz0gZGVsdGFZO1xuXHRcdFx0XHRcdFx0XHRcdHNldFBvaW50ZXJQb3NpdGlvbihzZWxmLnBvaW50ZXJYLCBzZWxmLnBvaW50ZXJZKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRvbkNsaWNrID0gZnVuY3Rpb24oZSkgeyAvL3RoaXMgd2FzIGEgaHVnZSBwYWluIGluIHRoZSBuZWNrIHRvIGFsaWduIGFsbCB0aGUgdmFyaW91cyBicm93c2VycyBhbmQgdGhlaXIgYmVoYXZpb3JzLiBDaHJvbWUsIEZpcmVmb3gsIFNhZmFyaSwgT3BlcmEsIEFuZHJvaWQsIGFuZCBNaWNyb3NvZnQgRWRnZSBhbGwgaGFuZGxlIGV2ZW50cyBkaWZmZXJlbnRseSEgU29tZSB3aWxsIG9ubHkgdHJpZ2dlciBuYXRpdmUgYmVoYXZpb3IgKGxpa2UgY2hlY2tib3ggdG9nZ2xpbmcpIGZyb20gdHJ1c3RlZCBldmVudHMuIE90aGVycyBkb24ndCBldmVuIHN1cHBvcnQgaXNUcnVzdGVkLCBidXQgcmVxdWlyZSAyIGV2ZW50cyB0byBmbG93IHRocm91Z2ggYmVmb3JlIHRyaWdnZXJpbmcgbmF0aXZlIGJlaGF2aW9yLiBFZGdlIHRyZWF0cyBldmVyeXRoaW5nIGFzIHRydXN0ZWQgYnV0IGFsc28gbWFuZGF0ZXMgdGhhdCAyIGZsb3cgdGhyb3VnaCB0byB0cmlnZ2VyIHRoZSBjb3JyZWN0IG5hdGl2ZSBiZWhhdmlvci5cblx0XHRcdFx0XHRcdHZhciB0aW1lID0gX2dldFRpbWUoKSxcblx0XHRcdFx0XHRcdFx0cmVjZW50bHlDbGlja2VkID0gKHRpbWUgLSBjbGlja1RpbWUgPCA0MCksXG5cdFx0XHRcdFx0XHRcdHJlY2VudGx5RHJhZ2dlZCA9ICh0aW1lIC0gZHJhZ0VuZFRpbWUgPCA0MCksXG5cdFx0XHRcdFx0XHRcdGFscmVhZHlEaXNwYXRjaGVkID0gKHJlY2VudGx5Q2xpY2tlZCAmJiBjbGlja0Rpc3BhdGNoID09PSBjbGlja1RpbWUpLFxuXHRcdFx0XHRcdFx0XHRpc01vZGVybiA9ICEhZS5wcmV2ZW50RGVmYXVsdCxcblx0XHRcdFx0XHRcdFx0YWxyZWFkeURpc3BhdGNoZWRUcnVzdGVkID0gKHJlY2VudGx5Q2xpY2tlZCAmJiB0cnVzdGVkQ2xpY2tEaXNwYXRjaCA9PT0gY2xpY2tUaW1lKSxcblx0XHRcdFx0XHRcdFx0dHJ1c3RlZCA9IGUuaXNUcnVzdGVkIHx8IChlLmlzVHJ1c3RlZCA9PSBudWxsICYmIHJlY2VudGx5Q2xpY2tlZCAmJiBhbHJlYWR5RGlzcGF0Y2hlZCk7IC8vbm90ZTogU2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCBpc1RydXN0ZWQsIGFuZCBpdCB3b24ndCBwcm9wZXJseSBleGVjdXRlIG5hdGl2ZSBiZWhhdmlvciAobGlrZSB0b2dnbGluZyBjaGVja2JveGVzKSBvbiB0aGUgZmlyc3Qgc3ludGhldGljIFwiY2xpY2tcIiBldmVudCAtIHdlIG11c3Qgd2FpdCBmb3IgdGhlIDJuZCBhbmQgdHJlYXQgaXQgYXMgdHJ1c3RlZCAoYnV0IHN0b3AgcHJvcGFnYXRpb24gYXQgdGhhdCBwb2ludCkuIENvbmZ1c2luZywgSSBrbm93LiBEb24ndCB5b3UgbG92ZSBjcm9zcy1icm93c2VyIGNvbXBhdGliaWxpdHkgY2hhbGxlbmdlcz9cblx0XHRcdFx0XHRcdGlmIChpc01vZGVybiAmJiAoYWxyZWFkeURpc3BhdGNoZWQgfHwgKHJlY2VudGx5RHJhZ2dlZCAmJiBzZWxmLnZhcnMuc3VwcHJlc3NDbGlja09uRHJhZyAhPT0gZmFsc2UpICkpIHtcblx0XHRcdFx0XHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChyZWNlbnRseUNsaWNrZWQgJiYgKCFhbHJlYWR5RGlzcGF0Y2hlZCB8fCAodHJ1c3RlZCAhPT0gYWxyZWFkeURpc3BhdGNoZWRUcnVzdGVkKSkpIHsgLy9sZXQgdGhlIGZpcnN0IGNsaWNrIHBhc3MgdGhyb3VnaCB1bmhpbmRlcmVkLiBMZXQgdGhlIG5leHQgb25lIG9ubHkgaWYgaXQncyB0cnVzdGVkLCB0aGVuIG5vIG1vcmUgKHN0b3AgcXVpY2stc3VjY2Vzc2lvbiBvbmVzKVxuXHRcdFx0XHRcdFx0XHRpZiAodHJ1c3RlZCAmJiBhbHJlYWR5RGlzcGF0Y2hlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHRydXN0ZWRDbGlja0Rpc3BhdGNoID0gY2xpY2tUaW1lO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGNsaWNrRGlzcGF0Y2ggPSBjbGlja1RpbWU7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChzZWxmLmlzUHJlc3NlZCB8fCByZWNlbnRseURyYWdnZWQgfHwgcmVjZW50bHlDbGlja2VkKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghaXNNb2Rlcm4pIHtcblx0XHRcdFx0XHRcdFx0XHRlLnJldHVyblZhbHVlID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIXRydXN0ZWQgfHwgIWUuZGV0YWlsIHx8ICFyZWNlbnRseUNsaWNrZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGUucHJldmVudE1hbmlwdWxhdGlvbikge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZS5wcmV2ZW50TWFuaXB1bGF0aW9uKCk7ICAvL2ZvciBzb21lIE1pY3Jvc29mdCBicm93c2Vyc1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0b2xkID0gRHJhZ2dhYmxlLmdldCh0aGlzLnRhcmdldCk7XG5cdFx0XHRcdGlmIChvbGQpIHtcblx0XHRcdFx0XHRvbGQua2lsbCgpOyAvLyBhdm9pZHMgZHVwbGljYXRlcyAoYW4gZWxlbWVudCBjYW4gb25seSBiZSBjb250cm9sbGVkIGJ5IG9uZSBEcmFnZ2FibGUpXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvL2dpdmUgdGhlIHVzZXIgYWNjZXNzIHRvIHN0YXJ0L3N0b3AgZHJhZ2dpbmcuLi5cblx0XHRcdFx0dGhpcy5zdGFydERyYWcgPSBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdFx0b25QcmVzcyhlKTtcblx0XHRcdFx0XHRpZiAoIXNlbGYuaXNEcmFnZ2luZykge1xuXHRcdFx0XHRcdFx0c2VsZi5pc0RyYWdnaW5nID0gdHJ1ZTtcblx0XHRcdFx0XHRcdF9kaXNwYXRjaEV2ZW50KHNlbGYsIFwiZHJhZ3N0YXJ0XCIsIFwib25EcmFnU3RhcnRcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLmRyYWcgPSBvbk1vdmU7XG5cdFx0XHRcdHRoaXMuZW5kRHJhZyA9IGZ1bmN0aW9uKGUpIHtcblx0XHRcdFx0XHRvblJlbGVhc2UoZSwgdHJ1ZSk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdHRoaXMudGltZVNpbmNlRHJhZyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzZWxmLmlzRHJhZ2dpbmcgPyAwIDogKF9nZXRUaW1lKCkgLSBkcmFnRW5kVGltZSkgLyAxMDAwO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLmhpdFRlc3QgPSBmdW5jdGlvbih0YXJnZXQsIHRocmVzaG9sZCkge1xuXHRcdFx0XHRcdHJldHVybiBEcmFnZ2FibGUuaGl0VGVzdChzZWxmLnRhcmdldCwgdGFyZ2V0LCB0aHJlc2hvbGQpO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMuZ2V0RGlyZWN0aW9uID0gZnVuY3Rpb24oZnJvbSwgZGlhZ29uYWxUaHJlc2hvbGQpIHsgLy9mcm9tIGNhbiBiZSBcInN0YXJ0XCIgKGRlZmF1bHQpLCBcInZlbG9jaXR5XCIsIG9yIGFuIGVsZW1lbnRcblx0XHRcdFx0XHR2YXIgbW9kZSA9IChmcm9tID09PSBcInZlbG9jaXR5XCIgJiYgVGhyb3dQcm9wc1BsdWdpbikgPyBmcm9tIDogKHR5cGVvZihmcm9tKSA9PT0gXCJvYmplY3RcIiAmJiAhcm90YXRpb25Nb2RlKSA/IFwiZWxlbWVudFwiIDogXCJzdGFydFwiLFxuXHRcdFx0XHRcdFx0eENoYW5nZSwgeUNoYW5nZSwgcmF0aW8sIGRpcmVjdGlvbiwgcjEsIHIyO1xuXHRcdFx0XHRcdGlmIChtb2RlID09PSBcImVsZW1lbnRcIikge1xuXHRcdFx0XHRcdFx0cjEgPSBfcGFyc2VSZWN0KHNlbGYudGFyZ2V0KTtcblx0XHRcdFx0XHRcdHIyID0gX3BhcnNlUmVjdChmcm9tKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0eENoYW5nZSA9IChtb2RlID09PSBcInN0YXJ0XCIpID8gc2VsZi54IC0gc3RhcnRFbGVtZW50WCA6IChtb2RlID09PSBcInZlbG9jaXR5XCIpID8gVGhyb3dQcm9wc1BsdWdpbi5nZXRWZWxvY2l0eSh0aGlzLnRhcmdldCwgeFByb3ApIDogKHIxLmxlZnQgKyByMS53aWR0aCAvIDIpIC0gKHIyLmxlZnQgKyByMi53aWR0aCAvIDIpO1xuXHRcdFx0XHRcdGlmIChyb3RhdGlvbk1vZGUpIHtcblx0XHRcdFx0XHRcdHJldHVybiB4Q2hhbmdlIDwgMCA/IFwiY291bnRlci1jbG9ja3dpc2VcIiA6IFwiY2xvY2t3aXNlXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGRpYWdvbmFsVGhyZXNob2xkID0gZGlhZ29uYWxUaHJlc2hvbGQgfHwgMjtcblx0XHRcdFx0XHRcdHlDaGFuZ2UgPSAobW9kZSA9PT0gXCJzdGFydFwiKSA/IHNlbGYueSAtIHN0YXJ0RWxlbWVudFkgOiAobW9kZSA9PT0gXCJ2ZWxvY2l0eVwiKSA/IFRocm93UHJvcHNQbHVnaW4uZ2V0VmVsb2NpdHkodGhpcy50YXJnZXQsIHlQcm9wKSA6IChyMS50b3AgKyByMS5oZWlnaHQgLyAyKSAtIChyMi50b3AgKyByMi5oZWlnaHQgLyAyKTtcblx0XHRcdFx0XHRcdHJhdGlvID0gTWF0aC5hYnMoeENoYW5nZSAvIHlDaGFuZ2UpO1xuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uID0gKHJhdGlvIDwgMSAvIGRpYWdvbmFsVGhyZXNob2xkKSA/IFwiXCIgOiAoeENoYW5nZSA8IDApID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCI7XG5cdFx0XHRcdFx0XHRpZiAocmF0aW8gPCBkaWFnb25hbFRocmVzaG9sZCkge1xuXHRcdFx0XHRcdFx0XHRpZiAoZGlyZWN0aW9uICE9PSBcIlwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uICs9IFwiLVwiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGRpcmVjdGlvbiArPSAoeUNoYW5nZSA8IDApID8gXCJ1cFwiIDogXCJkb3duXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBkaXJlY3Rpb247XG5cdFx0XHRcdH07XG5cblxuXHRcdFx0XHR0aGlzLmFwcGx5Qm91bmRzID0gZnVuY3Rpb24obmV3Qm91bmRzKSB7XG5cdFx0XHRcdFx0dmFyIHgsIHksIGZvcmNlWmVyb1ZlbG9jaXR5LCBlLCBwYXJlbnQsIGlzUm9vdDtcblx0XHRcdFx0XHRpZiAobmV3Qm91bmRzICYmIHZhcnMuYm91bmRzICE9PSBuZXdCb3VuZHMpIHtcblx0XHRcdFx0XHRcdHZhcnMuYm91bmRzID0gbmV3Qm91bmRzO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHNlbGYudXBkYXRlKHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzeW5jWFkodHJ1ZSk7XG5cdFx0XHRcdFx0Y2FsY3VsYXRlQm91bmRzKCk7XG5cdFx0XHRcdFx0aWYgKGhhc0JvdW5kcykge1xuXHRcdFx0XHRcdFx0eCA9IHNlbGYueDtcblx0XHRcdFx0XHRcdHkgPSBzZWxmLnk7XG5cdFx0XHRcdFx0XHRpZiAoeCA+IG1heFgpIHtcblx0XHRcdFx0XHRcdFx0eCA9IG1heFg7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKHggPCBtaW5YKSB7XG5cdFx0XHRcdFx0XHRcdHggPSBtaW5YO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKHkgPiBtYXhZKSB7XG5cdFx0XHRcdFx0XHRcdHkgPSBtYXhZO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICh5IDwgbWluWSkge1xuXHRcdFx0XHRcdFx0XHR5ID0gbWluWTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChzZWxmLnggIT09IHggfHwgc2VsZi55ICE9PSB5KSB7XG5cdFx0XHRcdFx0XHRcdGZvcmNlWmVyb1ZlbG9jaXR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0c2VsZi54ID0gc2VsZi5lbmRYID0geDtcblx0XHRcdFx0XHRcdFx0aWYgKHJvdGF0aW9uTW9kZSkge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuZW5kUm90YXRpb24gPSB4O1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYueSA9IHNlbGYuZW5kWSA9IHk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0ZGlydHkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRyZW5kZXIodHJ1ZSk7XG5cdFx0XHRcdFx0XHRcdGlmIChzZWxmLmF1dG9TY3JvbGwgJiYgIXNlbGYuaXNEcmFnZ2luZykge1xuXHRcdFx0XHRcdFx0XHRcdF9yZWNvcmRNYXhTY3JvbGxzKHRhcmdldC5wYXJlbnROb2RlKTtcblx0XHRcdFx0XHRcdFx0XHRlID0gdGFyZ2V0O1xuXHRcdFx0XHRcdFx0XHRcdF93aW5kb3dQcm94eS5zY3JvbGxUb3AgPSAoKHdpbmRvdy5wYWdlWU9mZnNldCAhPSBudWxsKSA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IChfZG9jRWxlbWVudC5zY3JvbGxUb3AgIT0gbnVsbCkgPyBfZG9jRWxlbWVudC5zY3JvbGxUb3AgOiBfZG9jLmJvZHkuc2Nyb2xsVG9wKTtcblx0XHRcdFx0XHRcdFx0XHRfd2luZG93UHJveHkuc2Nyb2xsTGVmdCA9ICgod2luZG93LnBhZ2VYT2Zmc2V0ICE9IG51bGwpID8gd2luZG93LnBhZ2VYT2Zmc2V0IDogKF9kb2NFbGVtZW50LnNjcm9sbExlZnQgIT0gbnVsbCkgPyBfZG9jRWxlbWVudC5zY3JvbGxMZWZ0IDogX2RvYy5ib2R5LnNjcm9sbExlZnQpO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlIChlICYmICFpc1Jvb3QpIHsgLy93YWxrIHVwIHRoZSBjaGFpbiBhbmQgc2Vuc2Ugd2hlcmV2ZXIgdGhlIHNjcm9sbFRvcC9zY3JvbGxMZWZ0IGV4Y2VlZHMgdGhlIG1heGltdW0uXG5cdFx0XHRcdFx0XHRcdFx0XHRpc1Jvb3QgPSBfaXNSb290KGUucGFyZW50Tm9kZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHRwYXJlbnQgPSBpc1Jvb3QgPyBfd2luZG93UHJveHkgOiBlLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoYWxsb3dZICYmIHBhcmVudC5zY3JvbGxUb3AgPiBwYXJlbnQuX2dzTWF4U2Nyb2xsWSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRwYXJlbnQuc2Nyb2xsVG9wID0gcGFyZW50Ll9nc01heFNjcm9sbFk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoYWxsb3dYICYmIHBhcmVudC5zY3JvbGxMZWZ0ID4gcGFyZW50Ll9nc01heFNjcm9sbFgpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cGFyZW50LnNjcm9sbExlZnQgPSBwYXJlbnQuX2dzTWF4U2Nyb2xsWDtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoc2VsZi5pc1Rocm93aW5nICYmIChmb3JjZVplcm9WZWxvY2l0eSB8fCBzZWxmLmVuZFggPiBtYXhYIHx8IHNlbGYuZW5kWCA8IG1pblggfHwgc2VsZi5lbmRZID4gbWF4WSB8fCBzZWxmLmVuZFkgPCBtaW5ZKSkge1xuXHRcdFx0XHRcdFx0XHRhbmltYXRlKHZhcnMudGhyb3dQcm9wcywgZm9yY2VaZXJvVmVsb2NpdHkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gc2VsZjtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKGFwcGx5Qm91bmRzLCBzdGlja3ksIGlnbm9yZUV4dGVybmFsQ2hhbmdlcykge1xuXHRcdFx0XHRcdHZhciB4ID0gc2VsZi54LFxuXHRcdFx0XHRcdFx0eSA9IHNlbGYueTtcblx0XHRcdFx0XHR1cGRhdGVNYXRyaXgoIXN0aWNreSk7XG5cdFx0XHRcdFx0aWYgKGFwcGx5Qm91bmRzKSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFwcGx5Qm91bmRzKCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGlmIChkaXJ0eSAmJiBpZ25vcmVFeHRlcm5hbENoYW5nZXMpIHtcblx0XHRcdFx0XHRcdFx0cmVuZGVyKHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0c3luY1hZKHRydWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc3RpY2t5KSB7XG5cdFx0XHRcdFx0XHRzZXRQb2ludGVyUG9zaXRpb24oc2VsZi5wb2ludGVyWCwgc2VsZi5wb2ludGVyWSk7XG5cdFx0XHRcdFx0XHRpZiAoZGlydHkpIHtcblx0XHRcdFx0XHRcdFx0cmVuZGVyKHRydWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VsZi5pc1ByZXNzZWQgJiYgIXN0aWNreSAmJiAoKGFsbG93WCAmJiBNYXRoLmFicyh4IC0gc2VsZi54KSA+IDAuMDEpIHx8IChhbGxvd1kgJiYgKE1hdGguYWJzKHkgLSBzZWxmLnkpID4gMC4wMSAmJiAhcm90YXRpb25Nb2RlKSkpKSB7XG5cdFx0XHRcdFx0XHRyZWNvcmRTdGFydFBvc2l0aW9ucygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2VsZi5hdXRvU2Nyb2xsKSB7XG5cdFx0XHRcdFx0XHRfcmVjb3JkTWF4U2Nyb2xscyh0YXJnZXQucGFyZW50Tm9kZSk7XG5cdFx0XHRcdFx0XHRjaGVja0F1dG9TY3JvbGxCb3VuZHMgPSBzZWxmLmlzRHJhZ2dpbmc7XG5cdFx0XHRcdFx0XHRyZW5kZXIodHJ1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzZWxmLmF1dG9TY3JvbGwpIHsgLy9pbiBjYXNlIHJlcGFyZW50aW5nIG9jY3VycmVkLlxuXHRcdFx0XHRcdFx0X3JlbW92ZVNjcm9sbExpc3RlbmVyKHRhcmdldCwgdXBkYXRlU2Nyb2xsKTtcblx0XHRcdFx0XHRcdF9hZGRTY3JvbGxMaXN0ZW5lcih0YXJnZXQsIHVwZGF0ZVNjcm9sbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBzZWxmO1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHRoaXMuZW5hYmxlID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0XHRcdHZhciBpZCwgaSwgdHJpZ2dlcjtcblx0XHRcdFx0XHRpZiAodHlwZSAhPT0gXCJzb2Z0XCIpIHtcblx0XHRcdFx0XHRcdGkgPSB0cmlnZ2Vycy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0dHJpZ2dlciA9IHRyaWdnZXJzW2ldO1xuXHRcdFx0XHRcdFx0XHRfYWRkTGlzdGVuZXIodHJpZ2dlciwgXCJtb3VzZWRvd25cIiwgb25QcmVzcyk7XG5cdFx0XHRcdFx0XHRcdF9hZGRMaXN0ZW5lcih0cmlnZ2VyLCBcInRvdWNoc3RhcnRcIiwgb25QcmVzcyk7XG5cdFx0XHRcdFx0XHRcdF9hZGRMaXN0ZW5lcih0cmlnZ2VyLCBcImNsaWNrXCIsIG9uQ2xpY2ssIHRydWUpOyAvL25vdGU6IHVzZWQgdG8gcGFzcyB0cnVlIGZvciBjYXB0dXJlIGJ1dCBpdCBwcmV2ZW50ZWQgY2xpY2stdG8tcGxheS12aWRlbyBmdW5jdGlvbmFsaXR5IGluIEZpcmVmb3guXG5cdFx0XHRcdFx0XHRcdGlmICghcm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0XHRcdFx0X3NldFN0eWxlKHRyaWdnZXIsIFwiY3Vyc29yXCIsIHZhcnMuY3Vyc29yIHx8IFwibW92ZVwiKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRfc2V0U3R5bGUodHJpZ2dlciwgXCJ0b3VjaENhbGxvdXRcIiwgXCJub25lXCIpO1xuXHRcdFx0XHRcdFx0XHRfc2V0U3R5bGUodHJpZ2dlciwgXCJ0b3VjaEFjdGlvblwiLCAoYWxsb3dYID09PSBhbGxvd1kpID8gXCJub25lXCIgOiBhbGxvd1ggPyBcInBhbi15XCIgOiBcInBhbi14XCIpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0X3NldFNlbGVjdGFibGUodHJpZ2dlcnMsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0X2FkZFNjcm9sbExpc3RlbmVyKHRhcmdldCwgdXBkYXRlU2Nyb2xsKTtcblx0XHRcdFx0XHRlbmFibGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRpZiAoVGhyb3dQcm9wc1BsdWdpbiAmJiB0eXBlICE9PSBcInNvZnRcIikge1xuXHRcdFx0XHRcdFx0VGhyb3dQcm9wc1BsdWdpbi50cmFjayhzY3JvbGxQcm94eSB8fCB0YXJnZXQsICh4eU1vZGUgPyBcIngseVwiIDogcm90YXRpb25Nb2RlID8gXCJyb3RhdGlvblwiIDogXCJ0b3AsbGVmdFwiKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChzY3JvbGxQcm94eSkge1xuXHRcdFx0XHRcdFx0c2Nyb2xsUHJveHkuZW5hYmxlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRhcmdldC5fZ3NEcmFnSUQgPSBpZCA9IFwiZFwiICsgKF9sb29rdXBDb3VudCsrKTtcblx0XHRcdFx0XHRfbG9va3VwW2lkXSA9IHRoaXM7XG5cdFx0XHRcdFx0aWYgKHNjcm9sbFByb3h5KSB7XG5cdFx0XHRcdFx0XHRzY3JvbGxQcm94eS5lbGVtZW50Ll9nc0RyYWdJRCA9IGlkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRUd2VlbkxpdGUuc2V0KHRhcmdldCwge3g6XCIrPTBcIiwgb3ZlcndyaXRlOmZhbHNlfSk7IC8vc2ltcGx5IGVuc3VyZXMgdGhhdCB0aGVyZSdzIGEgX2dzVHJhbnNmb3JtIG9uIHRoZSBlbGVtZW50LlxuXHRcdFx0XHRcdGFwcGx5T2JqID0ge1xuXHRcdFx0XHRcdFx0dDp0YXJnZXQsXG5cdFx0XHRcdFx0XHRkYXRhOl9pc09sZElFID8gY3NzVmFycyA6IHRhcmdldC5fZ3NUcmFuc2Zvcm0sXG5cdFx0XHRcdFx0XHR0d2Vlbjp7fSxcblx0XHRcdFx0XHRcdHNldFJhdGlvOihfaXNPbGRJRSA/IGZ1bmN0aW9uKCkgeyBUd2VlbkxpdGUuc2V0KHRhcmdldCwgdGVtcFZhcnMpOyB9IDogQ1NTUGx1Z2luLl9pbnRlcm5hbHMuc2V0VHJhbnNmb3JtUmF0aW8gfHwgQ1NTUGx1Z2luLl9pbnRlcm5hbHMuc2V0M0RUcmFuc2Zvcm1SYXRpbylcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHJlY29yZFN0YXJ0UG9zaXRpb25zKCk7XG5cdFx0XHRcdFx0c2VsZi51cGRhdGUodHJ1ZSk7XG5cdFx0XHRcdFx0cmV0dXJuIHNlbGY7XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0dGhpcy5kaXNhYmxlID0gZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0XHRcdHZhciBkcmFnZ2luZyA9IHNlbGYuaXNEcmFnZ2luZyxcblx0XHRcdFx0XHRcdGksIHRyaWdnZXI7XG5cdFx0XHRcdFx0aWYgKCFyb3RhdGlvbk1vZGUpIHtcblx0XHRcdFx0XHRcdGkgPSB0cmlnZ2Vycy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoLS1pID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0X3NldFN0eWxlKHRyaWdnZXJzW2ldLCBcImN1cnNvclwiLCBudWxsKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKHR5cGUgIT09IFwic29mdFwiKSB7XG5cdFx0XHRcdFx0XHRpID0gdHJpZ2dlcnMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKC0taSA+IC0xKSB7XG5cdFx0XHRcdFx0XHRcdHRyaWdnZXIgPSB0cmlnZ2Vyc1tpXTtcblx0XHRcdFx0XHRcdFx0X3NldFN0eWxlKHRyaWdnZXIsIFwidG91Y2hDYWxsb3V0XCIsIG51bGwpO1xuXHRcdFx0XHRcdFx0XHRfc2V0U3R5bGUodHJpZ2dlciwgXCJ0b3VjaEFjdGlvblwiLCBudWxsKTtcblx0XHRcdFx0XHRcdFx0X3JlbW92ZUxpc3RlbmVyKHRyaWdnZXIsIFwibW91c2Vkb3duXCIsIG9uUHJlc3MpO1xuXHRcdFx0XHRcdFx0XHRfcmVtb3ZlTGlzdGVuZXIodHJpZ2dlciwgXCJ0b3VjaHN0YXJ0XCIsIG9uUHJlc3MpO1xuXHRcdFx0XHRcdFx0XHRfcmVtb3ZlTGlzdGVuZXIodHJpZ2dlciwgXCJjbGlja1wiLCBvbkNsaWNrKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdF9zZXRTZWxlY3RhYmxlKHRyaWdnZXJzLCB0cnVlKTtcblx0XHRcdFx0XHRcdGlmICh0b3VjaEV2ZW50VGFyZ2V0KSB7XG5cdFx0XHRcdFx0XHRcdF9yZW1vdmVMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNoY2FuY2VsXCIsIG9uUmVsZWFzZSk7XG5cdFx0XHRcdFx0XHRcdF9yZW1vdmVMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNoZW5kXCIsIG9uUmVsZWFzZSk7XG5cdFx0XHRcdFx0XHRcdF9yZW1vdmVMaXN0ZW5lcih0b3VjaEV2ZW50VGFyZ2V0LCBcInRvdWNobW92ZVwiLCBvbk1vdmUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0X3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwibW91c2V1cFwiLCBvblJlbGVhc2UpO1xuXHRcdFx0XHRcdFx0X3JlbW92ZUxpc3RlbmVyKF9kb2MsIFwibW91c2Vtb3ZlXCIsIG9uTW92ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdF9yZW1vdmVTY3JvbGxMaXN0ZW5lcih0YXJnZXQsIHVwZGF0ZVNjcm9sbCk7XG5cdFx0XHRcdFx0ZW5hYmxlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChUaHJvd1Byb3BzUGx1Z2luICYmIHR5cGUgIT09IFwic29mdFwiKSB7XG5cdFx0XHRcdFx0XHRUaHJvd1Byb3BzUGx1Z2luLnVudHJhY2soc2Nyb2xsUHJveHkgfHwgdGFyZ2V0LCAoeHlNb2RlID8gXCJ4LHlcIiA6IHJvdGF0aW9uTW9kZSA/IFwicm90YXRpb25cIiA6IFwidG9wLGxlZnRcIikpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoc2Nyb2xsUHJveHkpIHtcblx0XHRcdFx0XHRcdHNjcm9sbFByb3h5LmRpc2FibGUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0X3JlbW92ZUZyb21SZW5kZXJRdWV1ZShyZW5kZXIpO1xuXHRcdFx0XHRcdHNlbGYuaXNEcmFnZ2luZyA9IHNlbGYuaXNQcmVzc2VkID0gaXNDbGlja2luZyA9IGZhbHNlO1xuXHRcdFx0XHRcdGlmIChkcmFnZ2luZykge1xuXHRcdFx0XHRcdFx0X2Rpc3BhdGNoRXZlbnQoc2VsZiwgXCJkcmFnZW5kXCIsIFwib25EcmFnRW5kXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gc2VsZjtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLmVuYWJsZWQgPSBmdW5jdGlvbih2YWx1ZSwgdHlwZSkge1xuXHRcdFx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHZhbHVlID8gc2VsZi5lbmFibGUodHlwZSkgOiBzZWxmLmRpc2FibGUodHlwZSkpIDogZW5hYmxlZDtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHR0aGlzLmtpbGwgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRzZWxmLmlzVGhyb3dpbmcgPSBmYWxzZTtcblx0XHRcdFx0XHRUd2VlbkxpdGUua2lsbFR3ZWVuc09mKHNjcm9sbFByb3h5IHx8IHRhcmdldCwgdHJ1ZSwga2lsbFByb3BzKTtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0XHRkZWxldGUgX2xvb2t1cFt0YXJnZXQuX2dzRHJhZ0lEXTtcblx0XHRcdFx0XHRyZXR1cm4gc2VsZjtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRpZiAodHlwZS5pbmRleE9mKFwic2Nyb2xsXCIpICE9PSAtMSkge1xuXHRcdFx0XHRcdHNjcm9sbFByb3h5ID0gdGhpcy5zY3JvbGxQcm94eSA9IG5ldyBTY3JvbGxQcm94eSh0YXJnZXQsIF9leHRlbmQoe29uS2lsbDpmdW5jdGlvbigpIHsgLy9TY3JvbGxQcm94eSdzIG9uS2lsbCgpIGdldHMgY2FsbGVkIGlmL3doZW4gdGhlIFNjcm9sbFByb3h5IHNlbnNlcyB0aGF0IHRoZSB1c2VyIGludGVyYWN0ZWQgd2l0aCB0aGUgc2Nyb2xsIHBvc2l0aW9uIG1hbnVhbGx5IChsaWtlIHVzaW5nIHRoZSBzY3JvbGxiYXIpLiBJRTkgZG9lc24ndCBmaXJlIHRoZSBcIm1vdXNldXBcIiBwcm9wZXJseSB3aGVuIHVzZXJzIGRyYWcgdGhlIHNjcm9sbGJhciBvZiBhbiBlbGVtZW50LCBzbyB0aGlzIHdvcmtzIGFyb3VuZCB0aGF0IGlzc3VlLlxuXHRcdFx0XHRcdFx0aWYgKHNlbGYuaXNQcmVzc2VkKSB7XG5cdFx0XHRcdFx0XHRcdG9uUmVsZWFzZShudWxsKTtcblx0XHRcdFx0XHRcdH19fSwgdmFycykpO1xuXHRcdFx0XHRcdC8vYSBidWcgaW4gbWFueSBBbmRyb2lkIGRldmljZXMnIHN0b2NrIGJyb3dzZXIgY2F1c2VzIHNjcm9sbFRvcCB0byBnZXQgZm9yY2VkIGJhY2sgdG8gMCBhZnRlciBpdCBpcyBhbHRlcmVkIHZpYSBKUywgc28gd2Ugc2V0IG92ZXJmbG93IHRvIFwiaGlkZGVuXCIgb24gbW9iaWxlL3RvdWNoIGRldmljZXMgKHRoZXkgaGlkZSB0aGUgc2Nyb2xsIGJhciBhbnl3YXkpLiBUaGF0IHdvcmtzIGFyb3VuZCB0aGUgYnVnLiAoVGhpcyBidWcgaXMgZGlzY3Vzc2VkIGF0IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvYW5kcm9pZC9pc3N1ZXMvZGV0YWlsP2lkPTE5NjI1KVxuXHRcdFx0XHRcdHRhcmdldC5zdHlsZS5vdmVyZmxvd1kgPSAoYWxsb3dZICYmICFfaXNUb3VjaERldmljZSkgPyBcImF1dG9cIiA6IFwiaGlkZGVuXCI7XG5cdFx0XHRcdFx0dGFyZ2V0LnN0eWxlLm92ZXJmbG93WCA9IChhbGxvd1ggJiYgIV9pc1RvdWNoRGV2aWNlKSA/IFwiYXV0b1wiIDogXCJoaWRkZW5cIjtcblx0XHRcdFx0XHR0YXJnZXQgPSBzY3JvbGxQcm94eS5jb250ZW50O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHZhcnMuZm9yY2UzRCAhPT0gZmFsc2UpIHtcblx0XHRcdFx0XHRUd2VlbkxpdGUuc2V0KHRhcmdldCwge2ZvcmNlM0Q6dHJ1ZX0pOyAvL2ltcHJvdmUgcGVyZm9ybWFuY2UgYnkgZm9yY2luZyBhIEdQVSBsYXllciB3aGVuIHBvc3NpYmxlXG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJvdGF0aW9uTW9kZSkge1xuXHRcdFx0XHRcdGtpbGxQcm9wcy5yb3RhdGlvbiA9IDE7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKGFsbG93WCkge1xuXHRcdFx0XHRcdFx0a2lsbFByb3BzW3hQcm9wXSA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChhbGxvd1kpIHtcblx0XHRcdFx0XHRcdGtpbGxQcm9wc1t5UHJvcF0gPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAocm90YXRpb25Nb2RlKSB7XG5cdFx0XHRcdFx0dGVtcFZhcnMgPSBfdGVtcFZhcnNSb3RhdGlvbjtcblx0XHRcdFx0XHRjc3NWYXJzID0gdGVtcFZhcnMuY3NzO1xuXHRcdFx0XHRcdHRlbXBWYXJzLm92ZXJ3cml0ZSA9IGZhbHNlO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHh5TW9kZSkge1xuXHRcdFx0XHRcdHRlbXBWYXJzID0gKGFsbG93WCAmJiBhbGxvd1kpID8gX3RlbXBWYXJzWFkgOiBhbGxvd1ggPyBfdGVtcFZhcnNYIDogX3RlbXBWYXJzWTtcblx0XHRcdFx0XHRjc3NWYXJzID0gdGVtcFZhcnMuY3NzO1xuXHRcdFx0XHRcdHRlbXBWYXJzLm92ZXJ3cml0ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5lbmFibGUoKTtcblx0XHRcdH0sXG5cdFx0XHRwID0gRHJhZ2dhYmxlLnByb3RvdHlwZSA9IG5ldyBFdmVudERpc3BhdGNoZXIoKTtcblxuXHRcdHAuY29uc3RydWN0b3IgPSBEcmFnZ2FibGU7XG5cdFx0cC5wb2ludGVyWCA9IHAucG9pbnRlclkgPSAwO1xuXHRcdHAuaXNEcmFnZ2luZyA9IHAuaXNQcmVzc2VkID0gZmFsc2U7XG5cdFx0RHJhZ2dhYmxlLnZlcnNpb24gPSBcIjAuMTQuOVwiO1xuXHRcdERyYWdnYWJsZS56SW5kZXggPSAxMDAwO1xuXG5cdFx0X2FkZExpc3RlbmVyKF9kb2MsIFwidG91Y2hjYW5jZWxcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHQvL3NvbWUgb2xkZXIgQW5kcm9pZCBkZXZpY2VzIGludGVybWl0dGVudGx5IHN0b3AgZGlzcGF0Y2hpbmcgXCJ0b3VjaG1vdmVcIiBldmVudHMgaWYgd2UgZG9uJ3QgbGlzdGVuIGZvciBcInRvdWNoY2FuY2VsXCIgb24gdGhlIGRvY3VtZW50LiBWZXJ5IHN0cmFuZ2UgaW5kZWVkLlxuXHRcdH0pO1xuXHRcdF9hZGRMaXN0ZW5lcihfZG9jLCBcImNvbnRleHRtZW51XCIsIGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBwO1xuXHRcdFx0Zm9yIChwIGluIF9sb29rdXApIHtcblx0XHRcdFx0aWYgKF9sb29rdXBbcF0uaXNQcmVzc2VkKSB7XG5cdFx0XHRcdFx0X2xvb2t1cFtwXS5lbmREcmFnKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdERyYWdnYWJsZS5jcmVhdGUgPSBmdW5jdGlvbih0YXJnZXRzLCB2YXJzKSB7XG5cdFx0XHRpZiAodHlwZW9mKHRhcmdldHMpID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHRhcmdldHMgPSBUd2VlbkxpdGUuc2VsZWN0b3IodGFyZ2V0cyk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgYSA9ICghdGFyZ2V0cyB8fCB0YXJnZXRzLmxlbmd0aCA9PT0gMCkgPyBbXSA6IF9pc0FycmF5TGlrZSh0YXJnZXRzKSA/IF9mbGF0dGVuQXJyYXkodGFyZ2V0cykgOiBbdGFyZ2V0c10sXG5cdFx0XHRcdGkgPSBhLmxlbmd0aDtcblx0XHRcdHdoaWxlICgtLWkgPiAtMSkge1xuXHRcdFx0XHRhW2ldID0gbmV3IERyYWdnYWJsZShhW2ldLCB2YXJzKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBhO1xuXHRcdH07XG5cblx0XHREcmFnZ2FibGUuZ2V0ID0gZnVuY3Rpb24odGFyZ2V0KSB7XG5cdFx0XHRyZXR1cm4gX2xvb2t1cFsoX3Vud3JhcEVsZW1lbnQodGFyZ2V0KSB8fCB7fSkuX2dzRHJhZ0lEXTtcblx0XHR9O1xuXG5cdFx0RHJhZ2dhYmxlLnRpbWVTaW5jZURyYWcgPSBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiAoX2dldFRpbWUoKSAtIF9sYXN0RHJhZ1RpbWUpIC8gMTAwMDtcblx0XHR9O1xuXG5cdFx0dmFyIF90ZW1wUmVjdCA9IHt9LCAvL3JldXNlIHRvIHJlZHVjZSBnYXJiYWdlIGNvbGxlY3Rpb24gdGFza3Ncblx0XHRcdF9vbGRJRVJlY3QgPSBmdW5jdGlvbihlKSB7IC8vSUU4IGRvZXNuJ3Qgc3VwcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgc28gd2UgdXNlIHRoaXMgYXMgYSBiYWNrdXAuXG5cdFx0XHRcdHZhciB0b3AgPSAwLFxuXHRcdFx0XHRcdGxlZnQgPSAwLFxuXHRcdFx0XHRcdHdpZHRoLCBoZWlnaHQ7XG5cdFx0XHRcdGUgPSBfdW53cmFwRWxlbWVudChlKTtcblx0XHRcdFx0d2lkdGggPSBlLm9mZnNldFdpZHRoO1xuXHRcdFx0XHRoZWlnaHQgPSBlLm9mZnNldEhlaWdodDtcblx0XHRcdFx0d2hpbGUoZSkge1xuXHRcdFx0XHRcdHRvcCArPSBlLm9mZnNldFRvcDtcblx0XHRcdFx0XHRsZWZ0ICs9IGUub2Zmc2V0TGVmdDtcblx0XHRcdFx0XHRlID0gZS5vZmZzZXRQYXJlbnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHt0b3A6IHRvcCwgbGVmdDogbGVmdCwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodH07XG5cdFx0XHR9LFxuXHRcdFx0X3BhcnNlUmVjdCA9IGZ1bmN0aW9uKGUsIHVuZGVmaW5lZCkgeyAvL2FjY2VwdHMgYSBET00gZWxlbWVudCwgYSBtb3VzZSBldmVudCwgb3IgYSByZWN0YW5nbGUgb2JqZWN0IGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlY3RhbmdsZSB3aXRoIGxlZnQsIHJpZ2h0LCB3aWR0aCwgaGVpZ2h0LCB0b3AsIGFuZCBib3R0b20gcHJvcGVydGllc1xuXHRcdFx0XHRpZiAoZSA9PT0gd2luZG93KSB7XG5cdFx0XHRcdFx0X3RlbXBSZWN0LmxlZnQgPSBfdGVtcFJlY3QudG9wID0gMDtcblx0XHRcdFx0XHRfdGVtcFJlY3Qud2lkdGggPSBfdGVtcFJlY3QucmlnaHQgPSBfZG9jRWxlbWVudC5jbGllbnRXaWR0aCB8fCBlLmlubmVyV2lkdGggfHwgX2RvYy5ib2R5LmNsaWVudFdpZHRoIHx8IDA7XG5cdFx0XHRcdFx0X3RlbXBSZWN0LmhlaWdodCA9IF90ZW1wUmVjdC5ib3R0b20gPSAoKGUuaW5uZXJIZWlnaHQgfHwgMCkgLSAyMCA8IF9kb2NFbGVtZW50LmNsaWVudEhlaWdodCkgPyBfZG9jRWxlbWVudC5jbGllbnRIZWlnaHQgOiBlLmlubmVySGVpZ2h0IHx8IF9kb2MuYm9keS5jbGllbnRIZWlnaHQgfHwgMDtcblx0XHRcdFx0XHRyZXR1cm4gX3RlbXBSZWN0O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciByID0gKGUucGFnZVggIT09IHVuZGVmaW5lZCkgPyB7bGVmdDplLnBhZ2VYIC0gX2dldERvY1Njcm9sbExlZnQoKSwgdG9wOmUucGFnZVkgLSBfZ2V0RG9jU2Nyb2xsVG9wKCksIHJpZ2h0OmUucGFnZVggLSBfZ2V0RG9jU2Nyb2xsTGVmdCgpICsgMSwgYm90dG9tOmUucGFnZVkgLSBfZ2V0RG9jU2Nyb2xsVG9wKCkgKyAxfSA6ICghZS5ub2RlVHlwZSAmJiBlLmxlZnQgIT09IHVuZGVmaW5lZCAmJiBlLnRvcCAhPT0gdW5kZWZpbmVkKSA/IGUgOiBfaXNPbGRJRSA/IF9vbGRJRVJlY3QoZSkgOiBfdW53cmFwRWxlbWVudChlKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRcdFx0aWYgKHIucmlnaHQgPT09IHVuZGVmaW5lZCAmJiByLndpZHRoICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyLnJpZ2h0ID0gci5sZWZ0ICsgci53aWR0aDtcblx0XHRcdFx0XHRyLmJvdHRvbSA9IHIudG9wICsgci5oZWlnaHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAoci53aWR0aCA9PT0gdW5kZWZpbmVkKSB7IC8vc29tZSBicm93c2VycyBkb24ndCBpbmNsdWRlIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllcy4gV2UgY2FuJ3QganVzdCBzZXQgdGhlbSBkaXJlY3RseSBvbiByIGJlY2F1c2Ugc29tZSBicm93c2VycyB0aHJvdyBlcnJvcnMsIHNvIGNyZWF0ZSBhIG5ldyBnZW5lcmljIG9iamVjdC5cblx0XHRcdFx0XHRyID0ge3dpZHRoOiByLnJpZ2h0IC0gci5sZWZ0LCBoZWlnaHQ6IHIuYm90dG9tIC0gci50b3AsIHJpZ2h0OiByLnJpZ2h0LCBsZWZ0OiByLmxlZnQsIGJvdHRvbTogci5ib3R0b20sIHRvcDogci50b3B9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiByO1xuXHRcdFx0fTtcblxuXHRcdERyYWdnYWJsZS5oaXRUZXN0ID0gZnVuY3Rpb24ob2JqMSwgb2JqMiwgdGhyZXNob2xkKSB7XG5cdFx0XHRpZiAob2JqMSA9PT0gb2JqMikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcjEgPSBfcGFyc2VSZWN0KG9iajEpLFxuXHRcdFx0XHRyMiA9IF9wYXJzZVJlY3Qob2JqMiksXG5cdFx0XHRcdGlzT3V0c2lkZSA9IChyMi5sZWZ0ID4gcjEucmlnaHQgfHwgcjIucmlnaHQgPCByMS5sZWZ0IHx8IHIyLnRvcCA+IHIxLmJvdHRvbSB8fCByMi5ib3R0b20gPCByMS50b3ApLFxuXHRcdFx0XHRvdmVybGFwLCBhcmVhLCBpc1JhdGlvO1xuXHRcdFx0aWYgKGlzT3V0c2lkZSB8fCAhdGhyZXNob2xkKSB7XG5cdFx0XHRcdHJldHVybiAhaXNPdXRzaWRlO1xuXHRcdFx0fVxuXHRcdFx0aXNSYXRpbyA9ICgodGhyZXNob2xkICsgXCJcIikuaW5kZXhPZihcIiVcIikgIT09IC0xKTtcblx0XHRcdHRocmVzaG9sZCA9IHBhcnNlRmxvYXQodGhyZXNob2xkKSB8fCAwO1xuXHRcdFx0b3ZlcmxhcCA9IHtsZWZ0Ok1hdGgubWF4KHIxLmxlZnQsIHIyLmxlZnQpLCB0b3A6TWF0aC5tYXgocjEudG9wLCByMi50b3ApfTtcblx0XHRcdG92ZXJsYXAud2lkdGggPSBNYXRoLm1pbihyMS5yaWdodCwgcjIucmlnaHQpIC0gb3ZlcmxhcC5sZWZ0O1xuXHRcdFx0b3ZlcmxhcC5oZWlnaHQgPSBNYXRoLm1pbihyMS5ib3R0b20sIHIyLmJvdHRvbSkgLSBvdmVybGFwLnRvcDtcblx0XHRcdGlmIChvdmVybGFwLndpZHRoIDwgMCB8fCBvdmVybGFwLmhlaWdodCA8IDApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGlzUmF0aW8pIHtcblx0XHRcdFx0dGhyZXNob2xkICo9IDAuMDE7XG5cdFx0XHRcdGFyZWEgPSBvdmVybGFwLndpZHRoICogb3ZlcmxhcC5oZWlnaHQ7XG5cdFx0XHRcdHJldHVybiAoYXJlYSA+PSByMS53aWR0aCAqIHIxLmhlaWdodCAqIHRocmVzaG9sZCB8fCBhcmVhID49IHIyLndpZHRoICogcjIuaGVpZ2h0ICogdGhyZXNob2xkKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiAob3ZlcmxhcC53aWR0aCA+IHRocmVzaG9sZCAmJiBvdmVybGFwLmhlaWdodCA+IHRocmVzaG9sZCk7XG5cdFx0fTtcblxuXHRcdF9wbGFjZWhvbGRlckRpdi5zdHlsZS5jc3NUZXh0ID0gXCJ2aXNpYmlsaXR5OmhpZGRlbjtoZWlnaHQ6MXB4O3RvcDotMXB4O3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246cmVsYXRpdmU7Y2xlYXI6Ym90aDtcIjtcblxuXHRcdHJldHVybiBEcmFnZ2FibGU7XG5cblx0fSwgdHJ1ZSk7XG5cblxufSk7IGlmIChfZ3NTY29wZS5fZ3NEZWZpbmUpIHsgX2dzU2NvcGUuX2dzUXVldWUucG9wKCkoKTsgfVxuXG4vL2V4cG9ydCB0byBBTUQvUmVxdWlyZUpTIGFuZCBDb21tb25KUy9Ob2RlIChwcmVjdXJzb3IgdG8gZnVsbCBtb2R1bGFyIGJ1aWxkIHN5c3RlbSBjb21pbmcgYXQgYSBsYXRlciBkYXRlKVxuKGZ1bmN0aW9uKG5hbWUpIHtcblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdHZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gKF9nc1Njb3BlLkdyZWVuU29ja0dsb2JhbHMgfHwgX2dzU2NvcGUpW25hbWVdO1xuXHR9O1xuXHRpZiAodHlwZW9mKGRlZmluZSkgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7IC8vQU1EXG5cdFx0ZGVmaW5lKFtcIlR3ZWVuTGl0ZVwiLCBcIkNTU1BsdWdpblwiXSwgZ2V0R2xvYmFsKTtcblx0fSBlbHNlIGlmICh0eXBlb2YobW9kdWxlKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBtb2R1bGUuZXhwb3J0cykgeyAvL25vZGVcblx0XHRyZXF1aXJlKFwiLi4vVHdlZW5MaXRlLmpzXCIpO1xuXHRcdHJlcXVpcmUoXCIuLi9wbHVnaW5zL0NTU1BsdWdpbi5qc1wiKTtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdldEdsb2JhbCgpO1xuXHR9XG59KFwiRHJhZ2dhYmxlXCIpKTsiLCIhZnVuY3Rpb24oYSl7dmFyIGI9L2lQaG9uZS9pLGM9L2lQb2QvaSxkPS9pUGFkL2ksZT0vKD89LipcXGJBbmRyb2lkXFxiKSg/PS4qXFxiTW9iaWxlXFxiKS9pLGY9L0FuZHJvaWQvaSxnPS8oPz0uKlxcYkFuZHJvaWRcXGIpKD89LipcXGJTRDQ5MzBVUlxcYikvaSxoPS8oPz0uKlxcYkFuZHJvaWRcXGIpKD89LipcXGIoPzpLRk9UfEtGVFR8S0ZKV0l8S0ZKV0F8S0ZTT1dJfEtGVEhXSXxLRlRIV0F8S0ZBUFdJfEtGQVBXQXxLRkFSV0l8S0ZBU1dJfEtGU0FXSXxLRlNBV0EpXFxiKS9pLGk9L1dpbmRvd3MgUGhvbmUvaSxqPS8oPz0uKlxcYldpbmRvd3NcXGIpKD89LipcXGJBUk1cXGIpL2ksaz0vQmxhY2tCZXJyeS9pLGw9L0JCMTAvaSxtPS9PcGVyYSBNaW5pL2ksbj0vKENyaU9TfENocm9tZSkoPz0uKlxcYk1vYmlsZVxcYikvaSxvPS8oPz0uKlxcYkZpcmVmb3hcXGIpKD89LipcXGJNb2JpbGVcXGIpL2kscD1uZXcgUmVnRXhwKFwiKD86TmV4dXMgN3xCTlRWMjUwfEtpbmRsZSBGaXJlfFNpbGt8R1QtUDEwMDApXCIsXCJpXCIpLHE9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS50ZXN0KGIpfSxyPWZ1bmN0aW9uKGEpe3ZhciByPWF8fG5hdmlnYXRvci51c2VyQWdlbnQscz1yLnNwbGl0KFwiW0ZCQU5cIik7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNbMV0mJihyPXNbMF0pLHM9ci5zcGxpdChcIlR3aXR0ZXJcIiksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNbMV0mJihyPXNbMF0pLHRoaXMuYXBwbGU9e3Bob25lOnEoYixyKSxpcG9kOnEoYyxyKSx0YWJsZXQ6IXEoYixyKSYmcShkLHIpLGRldmljZTpxKGIscil8fHEoYyxyKXx8cShkLHIpfSx0aGlzLmFtYXpvbj17cGhvbmU6cShnLHIpLHRhYmxldDohcShnLHIpJiZxKGgsciksZGV2aWNlOnEoZyxyKXx8cShoLHIpfSx0aGlzLmFuZHJvaWQ9e3Bob25lOnEoZyxyKXx8cShlLHIpLHRhYmxldDohcShnLHIpJiYhcShlLHIpJiYocShoLHIpfHxxKGYscikpLGRldmljZTpxKGcscil8fHEoaCxyKXx8cShlLHIpfHxxKGYscil9LHRoaXMud2luZG93cz17cGhvbmU6cShpLHIpLHRhYmxldDpxKGosciksZGV2aWNlOnEoaSxyKXx8cShqLHIpfSx0aGlzLm90aGVyPXtibGFja2JlcnJ5OnEoayxyKSxibGFja2JlcnJ5MTA6cShsLHIpLG9wZXJhOnEobSxyKSxmaXJlZm94OnEobyxyKSxjaHJvbWU6cShuLHIpLGRldmljZTpxKGsscil8fHEobCxyKXx8cShtLHIpfHxxKG8scil8fHEobixyKX0sdGhpcy5zZXZlbl9pbmNoPXEocCxyKSx0aGlzLmFueT10aGlzLmFwcGxlLmRldmljZXx8dGhpcy5hbmRyb2lkLmRldmljZXx8dGhpcy53aW5kb3dzLmRldmljZXx8dGhpcy5vdGhlci5kZXZpY2V8fHRoaXMuc2V2ZW5faW5jaCx0aGlzLnBob25lPXRoaXMuYXBwbGUucGhvbmV8fHRoaXMuYW5kcm9pZC5waG9uZXx8dGhpcy53aW5kb3dzLnBob25lLHRoaXMudGFibGV0PXRoaXMuYXBwbGUudGFibGV0fHx0aGlzLmFuZHJvaWQudGFibGV0fHx0aGlzLndpbmRvd3MudGFibGV0LFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3cpcmV0dXJuIHRoaXN9LHM9ZnVuY3Rpb24oKXt2YXIgYT1uZXcgcjtyZXR1cm4gYS5DbGFzcz1yLGF9O1widW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzJiZcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93P21vZHVsZS5leHBvcnRzPXI6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/bW9kdWxlLmV4cG9ydHM9cygpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJpc01vYmlsZVwiLFtdLGEuaXNNb2JpbGU9cygpKTphLmlzTW9iaWxlPXMoKX0odGhpcyk7XG4iLCIvKiEgalF1ZXJ5IHYzLjEuMSAtYWpheCwtYWpheC9qc29ucCwtYWpheC9sb2FkLC1hamF4L3BhcnNlWE1MLC1hamF4L3NjcmlwdCwtYWpheC92YXIvbG9jYXRpb24sLWFqYXgvdmFyL25vbmNlLC1hamF4L3Zhci9ycXVlcnksLWFqYXgveGhyLC1tYW5pcHVsYXRpb24vX2V2YWxVcmwsLWV2ZW50L2FqYXgsLWVmZmVjdHMsLWVmZmVjdHMvYW5pbWF0ZWRTZWxlY3RvciwtZWZmZWN0cy9Ud2VlbiwtZGVwcmVjYXRlZCB8IChjKSBqUXVlcnkgRm91bmRhdGlvbiB8IGpxdWVyeS5vcmcvbGljZW5zZSAqL1xuIWZ1bmN0aW9uKGEsYil7XCJ1c2Ugc3RyaWN0XCI7XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWEuZG9jdW1lbnQ/YihhLCEwKTpmdW5jdGlvbihhKXtpZighYS5kb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIpO3JldHVybiBiKGEpfTpiKGEpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKGEsYil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGM9W10sZD1hLmRvY3VtZW50LGU9T2JqZWN0LmdldFByb3RvdHlwZU9mLGY9Yy5zbGljZSxnPWMuY29uY2F0LGg9Yy5wdXNoLGk9Yy5pbmRleE9mLGo9e30saz1qLnRvU3RyaW5nLGw9ai5oYXNPd25Qcm9wZXJ0eSxtPWwudG9TdHJpbmcsbj1tLmNhbGwoT2JqZWN0KSxvPXt9O2Z1bmN0aW9uIHAoYSxiKXtiPWJ8fGQ7dmFyIGM9Yi5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2MudGV4dD1hLGIuaGVhZC5hcHBlbmRDaGlsZChjKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpfXZhciBxPVwiMy4xLjEgLWFqYXgsLWFqYXgvanNvbnAsLWFqYXgvbG9hZCwtYWpheC9wYXJzZVhNTCwtYWpheC9zY3JpcHQsLWFqYXgvdmFyL2xvY2F0aW9uLC1hamF4L3Zhci9ub25jZSwtYWpheC92YXIvcnF1ZXJ5LC1hamF4L3hociwtbWFuaXB1bGF0aW9uL19ldmFsVXJsLC1ldmVudC9hamF4LC1lZmZlY3RzLC1lZmZlY3RzL2FuaW1hdGVkU2VsZWN0b3IsLWVmZmVjdHMvVHdlZW4sLWRlcHJlY2F0ZWRcIixyPWZ1bmN0aW9uKGEsYil7cmV0dXJuIG5ldyByLmZuLmluaXQoYSxiKX0scz0vXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csdD0vXi1tcy0vLHU9Ly0oW2Etel0pL2csdj1mdW5jdGlvbihhLGIpe3JldHVybiBiLnRvVXBwZXJDYXNlKCl9O3IuZm49ci5wcm90b3R5cGU9e2pxdWVyeTpxLGNvbnN0cnVjdG9yOnIsbGVuZ3RoOjAsdG9BcnJheTpmdW5jdGlvbigpe3JldHVybiBmLmNhbGwodGhpcyl9LGdldDpmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YT9mLmNhbGwodGhpcyk6YTwwP3RoaXNbYSt0aGlzLmxlbmd0aF06dGhpc1thXX0scHVzaFN0YWNrOmZ1bmN0aW9uKGEpe3ZhciBiPXIubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGEpO3JldHVybiBiLnByZXZPYmplY3Q9dGhpcyxifSxlYWNoOmZ1bmN0aW9uKGEpe3JldHVybiByLmVhY2godGhpcyxhKX0sbWFwOmZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnB1c2hTdGFjayhyLm1hcCh0aGlzLGZ1bmN0aW9uKGIsYyl7cmV0dXJuIGEuY2FsbChiLGMsYil9KSl9LHNsaWNlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGYuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0sZmlyc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lcSgwKX0sbGFzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKC0xKX0sZXE6ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5sZW5ndGgsYz0rYSsoYTwwP2I6MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGM+PTAmJmM8Yj9bdGhpc1tjXV06W10pfSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wcmV2T2JqZWN0fHx0aGlzLmNvbnN0cnVjdG9yKCl9LHB1c2g6aCxzb3J0OmMuc29ydCxzcGxpY2U6Yy5zcGxpY2V9LHIuZXh0ZW5kPXIuZm4uZXh0ZW5kPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZSxmLGc9YXJndW1lbnRzWzBdfHx7fSxoPTEsaT1hcmd1bWVudHMubGVuZ3RoLGo9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgZyYmKGo9ZyxnPWFyZ3VtZW50c1toXXx8e30saCsrKSxcIm9iamVjdFwiPT10eXBlb2YgZ3x8ci5pc0Z1bmN0aW9uKGcpfHwoZz17fSksaD09PWkmJihnPXRoaXMsaC0tKTtoPGk7aCsrKWlmKG51bGwhPShhPWFyZ3VtZW50c1toXSkpZm9yKGIgaW4gYSljPWdbYl0sZD1hW2JdLGchPT1kJiYoaiYmZCYmKHIuaXNQbGFpbk9iamVjdChkKXx8KGU9ci5pc0FycmF5KGQpKSk/KGU/KGU9ITEsZj1jJiZyLmlzQXJyYXkoYyk/YzpbXSk6Zj1jJiZyLmlzUGxhaW5PYmplY3QoYyk/Yzp7fSxnW2JdPXIuZXh0ZW5kKGosZixkKSk6dm9pZCAwIT09ZCYmKGdbYl09ZCkpO3JldHVybiBnfSxyLmV4dGVuZCh7ZXhwYW5kbzpcImpRdWVyeVwiKyhxK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xcRC9nLFwiXCIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKGEpfSxub29wOmZ1bmN0aW9uKCl7fSxpc0Z1bmN0aW9uOmZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09PXIudHlwZShhKX0saXNBcnJheTpBcnJheS5pc0FycmF5LGlzV2luZG93OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsIT1hJiZhPT09YS53aW5kb3d9LGlzTnVtZXJpYzpmdW5jdGlvbihhKXt2YXIgYj1yLnR5cGUoYSk7cmV0dXJuKFwibnVtYmVyXCI9PT1ifHxcInN0cmluZ1wiPT09YikmJiFpc05hTihhLXBhcnNlRmxvYXQoYSkpfSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiLGM7cmV0dXJuISghYXx8XCJbb2JqZWN0IE9iamVjdF1cIiE9PWsuY2FsbChhKSkmJighKGI9ZShhKSl8fChjPWwuY2FsbChiLFwiY29uc3RydWN0b3JcIikmJmIuY29uc3RydWN0b3IsXCJmdW5jdGlvblwiPT10eXBlb2YgYyYmbS5jYWxsKGMpPT09bikpfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGEpe3ZhciBiO2ZvcihiIGluIGEpcmV0dXJuITE7cmV0dXJuITB9LHR5cGU6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/YStcIlwiOlwib2JqZWN0XCI9PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBhP2pbay5jYWxsKGEpXXx8XCJvYmplY3RcIjp0eXBlb2YgYX0sZ2xvYmFsRXZhbDpmdW5jdGlvbihhKXtwKGEpfSxjYW1lbENhc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZSh0LFwibXMtXCIpLnJlcGxhY2UodSx2KX0sbm9kZU5hbWU6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yi50b0xvd2VyQ2FzZSgpfSxlYWNoOmZ1bmN0aW9uKGEsYil7dmFyIGMsZD0wO2lmKHcoYSkpe2ZvcihjPWEubGVuZ3RoO2Q8YztkKyspaWYoYi5jYWxsKGFbZF0sZCxhW2RdKT09PSExKWJyZWFrfWVsc2UgZm9yKGQgaW4gYSlpZihiLmNhbGwoYVtkXSxkLGFbZF0pPT09ITEpYnJlYWs7cmV0dXJuIGF9LHRyaW06ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjooYStcIlwiKS5yZXBsYWNlKHMsXCJcIil9LG1ha2VBcnJheTpmdW5jdGlvbihhLGIpe3ZhciBjPWJ8fFtdO3JldHVybiBudWxsIT1hJiYodyhPYmplY3QoYSkpP3IubWVyZ2UoYyxcInN0cmluZ1wiPT10eXBlb2YgYT9bYV06YSk6aC5jYWxsKGMsYSkpLGN9LGluQXJyYXk6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBudWxsPT1iPy0xOmkuY2FsbChiLGEsYyl9LG1lcmdlOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPStiLmxlbmd0aCxkPTAsZT1hLmxlbmd0aDtkPGM7ZCsrKWFbZSsrXT1iW2RdO3JldHVybiBhLmxlbmd0aD1lLGF9LGdyZXA6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZCxlPVtdLGY9MCxnPWEubGVuZ3RoLGg9IWM7ZjxnO2YrKylkPSFiKGFbZl0sZiksZCE9PWgmJmUucHVzaChhW2ZdKTtyZXR1cm4gZX0sbWFwOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9MCxoPVtdO2lmKHcoYSkpZm9yKGQ9YS5sZW5ndGg7ZjxkO2YrKyllPWIoYVtmXSxmLGMpLG51bGwhPWUmJmgucHVzaChlKTtlbHNlIGZvcihmIGluIGEpZT1iKGFbZl0sZixjKSxudWxsIT1lJiZoLnB1c2goZSk7cmV0dXJuIGcuYXBwbHkoW10saCl9LGd1aWQ6MSxwcm94eTpmdW5jdGlvbihhLGIpe3ZhciBjLGQsZTtpZihcInN0cmluZ1wiPT10eXBlb2YgYiYmKGM9YVtiXSxiPWEsYT1jKSxyLmlzRnVuY3Rpb24oYSkpcmV0dXJuIGQ9Zi5jYWxsKGFyZ3VtZW50cywyKSxlPWZ1bmN0aW9uKCl7cmV0dXJuIGEuYXBwbHkoYnx8dGhpcyxkLmNvbmNhdChmLmNhbGwoYXJndW1lbnRzKSkpfSxlLmd1aWQ9YS5ndWlkPWEuZ3VpZHx8ci5ndWlkKyssZX0sbm93OkRhdGUubm93LHN1cHBvcnQ6b30pLFwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmKHIuZm5bU3ltYm9sLml0ZXJhdG9yXT1jW1N5bWJvbC5pdGVyYXRvcl0pLHIuZWFjaChcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7altcIltvYmplY3QgXCIrYitcIl1cIl09Yi50b0xvd2VyQ2FzZSgpfSk7ZnVuY3Rpb24gdyhhKXt2YXIgYj0hIWEmJlwibGVuZ3RoXCJpbiBhJiZhLmxlbmd0aCxjPXIudHlwZShhKTtyZXR1cm5cImZ1bmN0aW9uXCIhPT1jJiYhci5pc1dpbmRvdyhhKSYmKFwiYXJyYXlcIj09PWN8fDA9PT1ifHxcIm51bWJlclwiPT10eXBlb2YgYiYmYj4wJiZiLTEgaW4gYSl9dmFyIHg9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaSxqLGssbCxtLG4sbyxwLHEscixzLHQsdT1cInNpenpsZVwiKzEqbmV3IERhdGUsdj1hLmRvY3VtZW50LHc9MCx4PTAseT1oYSgpLHo9aGEoKSxBPWhhKCksQj1mdW5jdGlvbihhLGIpe3JldHVybiBhPT09YiYmKGw9ITApLDB9LEM9e30uaGFzT3duUHJvcGVydHksRD1bXSxFPUQucG9wLEY9RC5wdXNoLEc9RC5wdXNoLEg9RC5zbGljZSxJPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTAsZD1hLmxlbmd0aDtjPGQ7YysrKWlmKGFbY109PT1iKXJldHVybiBjO3JldHVybi0xfSxKPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixLPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixMPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixNPVwiXFxcXFtcIitLK1wiKihcIitMK1wiKSg/OlwiK0srXCIqKFsqXiR8IX5dPz0pXCIrSytcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK0wrXCIpKXwpXCIrSytcIipcXFxcXVwiLE49XCI6KFwiK0wrXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiK00rXCIpKil8LiopXFxcXCl8KVwiLE89bmV3IFJlZ0V4cChLK1wiK1wiLFwiZ1wiKSxQPW5ldyBSZWdFeHAoXCJeXCIrSytcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIrSytcIiskXCIsXCJnXCIpLFE9bmV3IFJlZ0V4cChcIl5cIitLK1wiKixcIitLK1wiKlwiKSxSPW5ldyBSZWdFeHAoXCJeXCIrSytcIiooWz4rfl18XCIrSytcIilcIitLK1wiKlwiKSxTPW5ldyBSZWdFeHAoXCI9XCIrSytcIiooW15cXFxcXSdcXFwiXSo/KVwiK0srXCIqXFxcXF1cIixcImdcIiksVD1uZXcgUmVnRXhwKE4pLFU9bmV3IFJlZ0V4cChcIl5cIitMK1wiJFwiKSxWPXtJRDpuZXcgUmVnRXhwKFwiXiMoXCIrTCtcIilcIiksQ0xBU1M6bmV3IFJlZ0V4cChcIl5cXFxcLihcIitMK1wiKVwiKSxUQUc6bmV3IFJlZ0V4cChcIl4oXCIrTCtcInxbKl0pXCIpLEFUVFI6bmV3IFJlZ0V4cChcIl5cIitNKSxQU0VVRE86bmV3IFJlZ0V4cChcIl5cIitOKSxDSElMRDpuZXcgUmVnRXhwKFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIitLK1wiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIrSytcIiooPzooWystXXwpXCIrSytcIiooXFxcXGQrKXwpKVwiK0srXCIqXFxcXCl8KVwiLFwiaVwiKSxib29sOm5ldyBSZWdFeHAoXCJeKD86XCIrSitcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK0srXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK0srXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK0srXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LFc9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxYPS9eaFxcZCQvaSxZPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sWj0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLywkPS9bK35dLyxfPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIitLK1wiP3woXCIrSytcIil8LilcIixcImlnXCIpLGFhPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1cIjB4XCIrYi02NTUzNjtyZXR1cm4gZCE9PWR8fGM/YjpkPDA/U3RyaW5nLmZyb21DaGFyQ29kZShkKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKGQ+PjEwfDU1Mjk2LDEwMjMmZHw1NjMyMCl9LGJhPS8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLGNhPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGI/XCJcXDBcIj09PWE/XCJcXHVmZmZkXCI6YS5zbGljZSgwLC0xKStcIlxcXFxcIithLmNoYXJDb2RlQXQoYS5sZW5ndGgtMSkudG9TdHJpbmcoMTYpK1wiIFwiOlwiXFxcXFwiK2F9LGRhPWZ1bmN0aW9uKCl7bSgpfSxlYT10YShmdW5jdGlvbihhKXtyZXR1cm4gYS5kaXNhYmxlZD09PSEwJiYoXCJmb3JtXCJpbiBhfHxcImxhYmVsXCJpbiBhKX0se2RpcjpcInBhcmVudE5vZGVcIixuZXh0OlwibGVnZW5kXCJ9KTt0cnl7Ry5hcHBseShEPUguY2FsbCh2LmNoaWxkTm9kZXMpLHYuY2hpbGROb2RlcyksRFt2LmNoaWxkTm9kZXMubGVuZ3RoXS5ub2RlVHlwZX1jYXRjaChmYSl7Rz17YXBwbHk6RC5sZW5ndGg/ZnVuY3Rpb24oYSxiKXtGLmFwcGx5KGEsSC5jYWxsKGIpKX06ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLmxlbmd0aCxkPTA7d2hpbGUoYVtjKytdPWJbZCsrXSk7YS5sZW5ndGg9Yy0xfX19ZnVuY3Rpb24gZ2EoYSxiLGQsZSl7dmFyIGYsaCxqLGssbCxvLHIscz1iJiZiLm93bmVyRG9jdW1lbnQsdz1iP2Iubm9kZVR5cGU6OTtpZihkPWR8fFtdLFwic3RyaW5nXCIhPXR5cGVvZiBhfHwhYXx8MSE9PXcmJjkhPT13JiYxMSE9PXcpcmV0dXJuIGQ7aWYoIWUmJigoYj9iLm93bmVyRG9jdW1lbnR8fGI6dikhPT1uJiZtKGIpLGI9Ynx8bixwKSl7aWYoMTEhPT13JiYobD1aLmV4ZWMoYSkpKWlmKGY9bFsxXSl7aWYoOT09PXcpe2lmKCEoaj1iLmdldEVsZW1lbnRCeUlkKGYpKSlyZXR1cm4gZDtpZihqLmlkPT09ZilyZXR1cm4gZC5wdXNoKGopLGR9ZWxzZSBpZihzJiYoaj1zLmdldEVsZW1lbnRCeUlkKGYpKSYmdChiLGopJiZqLmlkPT09ZilyZXR1cm4gZC5wdXNoKGopLGR9ZWxzZXtpZihsWzJdKXJldHVybiBHLmFwcGx5KGQsYi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKSksZDtpZigoZj1sWzNdKSYmYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lJiZiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpcmV0dXJuIEcuYXBwbHkoZCxiLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoZikpLGR9aWYoYy5xc2EmJiFBW2ErXCIgXCJdJiYoIXF8fCFxLnRlc3QoYSkpKXtpZigxIT09dylzPWIscj1hO2Vsc2UgaWYoXCJvYmplY3RcIiE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKSl7KGs9Yi5nZXRBdHRyaWJ1dGUoXCJpZFwiKSk/az1rLnJlcGxhY2UoYmEsY2EpOmIuc2V0QXR0cmlidXRlKFwiaWRcIixrPXUpLG89ZyhhKSxoPW8ubGVuZ3RoO3doaWxlKGgtLSlvW2hdPVwiI1wiK2srXCIgXCIrc2Eob1toXSk7cj1vLmpvaW4oXCIsXCIpLHM9JC50ZXN0KGEpJiZxYShiLnBhcmVudE5vZGUpfHxifWlmKHIpdHJ5e3JldHVybiBHLmFwcGx5KGQscy5xdWVyeVNlbGVjdG9yQWxsKHIpKSxkfWNhdGNoKHgpe31maW5hbGx5e2s9PT11JiZiLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpfX19cmV0dXJuIGkoYS5yZXBsYWNlKFAsXCIkMVwiKSxiLGQsZSl9ZnVuY3Rpb24gaGEoKXt2YXIgYT1bXTtmdW5jdGlvbiBiKGMsZSl7cmV0dXJuIGEucHVzaChjK1wiIFwiKT5kLmNhY2hlTGVuZ3RoJiZkZWxldGUgYlthLnNoaWZ0KCldLGJbYytcIiBcIl09ZX1yZXR1cm4gYn1mdW5jdGlvbiBpYShhKXtyZXR1cm4gYVt1XT0hMCxhfWZ1bmN0aW9uIGphKGEpe3ZhciBiPW4uY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO3RyeXtyZXR1cm4hIWEoYil9Y2F0Y2goYyl7cmV0dXJuITF9ZmluYWxseXtiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKSxiPW51bGx9fWZ1bmN0aW9uIGthKGEsYil7dmFyIGM9YS5zcGxpdChcInxcIiksZT1jLmxlbmd0aDt3aGlsZShlLS0pZC5hdHRySGFuZGxlW2NbZV1dPWJ9ZnVuY3Rpb24gbGEoYSxiKXt2YXIgYz1iJiZhLGQ9YyYmMT09PWEubm9kZVR5cGUmJjE9PT1iLm5vZGVUeXBlJiZhLnNvdXJjZUluZGV4LWIuc291cmNlSW5kZXg7aWYoZClyZXR1cm4gZDtpZihjKXdoaWxlKGM9Yy5uZXh0U2libGluZylpZihjPT09YilyZXR1cm4tMTtyZXR1cm4gYT8xOi0xfWZ1bmN0aW9uIG1hKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYz1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09YyYmYi50eXBlPT09YX19ZnVuY3Rpb24gbmEoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4oXCJpbnB1dFwiPT09Y3x8XCJidXR0b25cIj09PWMpJiZiLnR5cGU9PT1hfX1mdW5jdGlvbiBvYShhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuXCJmb3JtXCJpbiBiP2IucGFyZW50Tm9kZSYmYi5kaXNhYmxlZD09PSExP1wibGFiZWxcImluIGI/XCJsYWJlbFwiaW4gYi5wYXJlbnROb2RlP2IucGFyZW50Tm9kZS5kaXNhYmxlZD09PWE6Yi5kaXNhYmxlZD09PWE6Yi5pc0Rpc2FibGVkPT09YXx8Yi5pc0Rpc2FibGVkIT09IWEmJmVhKGIpPT09YTpiLmRpc2FibGVkPT09YTpcImxhYmVsXCJpbiBiJiZiLmRpc2FibGVkPT09YX19ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGlhKGZ1bmN0aW9uKGIpe3JldHVybiBiPStiLGlhKGZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hKFtdLGMubGVuZ3RoLGIpLGc9Zi5sZW5ndGg7d2hpbGUoZy0tKWNbZT1mW2ddXSYmKGNbZV09IShkW2VdPWNbZV0pKX0pfSl9ZnVuY3Rpb24gcWEoYSl7cmV0dXJuIGEmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEVsZW1lbnRzQnlUYWdOYW1lJiZhfWM9Z2Euc3VwcG9ydD17fSxmPWdhLmlzWE1MPWZ1bmN0aW9uKGEpe3ZhciBiPWEmJihhLm93bmVyRG9jdW1lbnR8fGEpLmRvY3VtZW50RWxlbWVudDtyZXR1cm4hIWImJlwiSFRNTFwiIT09Yi5ub2RlTmFtZX0sbT1nYS5zZXREb2N1bWVudD1mdW5jdGlvbihhKXt2YXIgYixlLGc9YT9hLm93bmVyRG9jdW1lbnR8fGE6djtyZXR1cm4gZyE9PW4mJjk9PT1nLm5vZGVUeXBlJiZnLmRvY3VtZW50RWxlbWVudD8obj1nLG89bi5kb2N1bWVudEVsZW1lbnQscD0hZihuKSx2IT09biYmKGU9bi5kZWZhdWx0VmlldykmJmUudG9wIT09ZSYmKGUuYWRkRXZlbnRMaXN0ZW5lcj9lLmFkZEV2ZW50TGlzdGVuZXIoXCJ1bmxvYWRcIixkYSwhMSk6ZS5hdHRhY2hFdmVudCYmZS5hdHRhY2hFdmVudChcIm9udW5sb2FkXCIsZGEpKSxjLmF0dHJpYnV0ZXM9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuY2xhc3NOYW1lPVwiaVwiLCFhLmdldEF0dHJpYnV0ZShcImNsYXNzTmFtZVwiKX0pLGMuZ2V0RWxlbWVudHNCeVRhZ05hbWU9amEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuYXBwZW5kQ2hpbGQobi5jcmVhdGVDb21tZW50KFwiXCIpKSwhYS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RofSksYy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPVkudGVzdChuLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGMuZ2V0QnlJZD1qYShmdW5jdGlvbihhKXtyZXR1cm4gby5hcHBlbmRDaGlsZChhKS5pZD11LCFuLmdldEVsZW1lbnRzQnlOYW1lfHwhbi5nZXRFbGVtZW50c0J5TmFtZSh1KS5sZW5ndGh9KSxjLmdldEJ5SWQ/KGQuZmlsdGVyLklEPWZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShfLGFhKTtyZXR1cm4gZnVuY3Rpb24oYSl7cmV0dXJuIGEuZ2V0QXR0cmlidXRlKFwiaWRcIik9PT1ifX0sZC5maW5kLklEPWZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudEJ5SWQmJnApe3ZhciBjPWIuZ2V0RWxlbWVudEJ5SWQoYSk7cmV0dXJuIGM/W2NdOltdfX0pOihkLmZpbHRlci5JRD1mdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoXyxhYSk7cmV0dXJuIGZ1bmN0aW9uKGEpe3ZhciBjPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZU5vZGUmJmEuZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiBjJiZjLnZhbHVlPT09Yn19LGQuZmluZC5JRD1mdW5jdGlvbihhLGIpe2lmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBiLmdldEVsZW1lbnRCeUlkJiZwKXt2YXIgYyxkLGUsZj1iLmdldEVsZW1lbnRCeUlkKGEpO2lmKGYpe2lmKGM9Zi5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIiksYyYmYy52YWx1ZT09PWEpcmV0dXJuW2ZdO2U9Yi5nZXRFbGVtZW50c0J5TmFtZShhKSxkPTA7d2hpbGUoZj1lW2QrK10paWYoYz1mLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSxjJiZjLnZhbHVlPT09YSlyZXR1cm5bZl19cmV0dXJuW119fSksZC5maW5kLlRBRz1jLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGEsYil7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudHNCeVRhZ05hbWU/Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTpjLnFzYT9iLnF1ZXJ5U2VsZWN0b3JBbGwoYSk6dm9pZCAwfTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT0wLGY9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShhKTtpZihcIipcIj09PWEpe3doaWxlKGM9ZltlKytdKTE9PT1jLm5vZGVUeXBlJiZkLnB1c2goYyk7cmV0dXJuIGR9cmV0dXJuIGZ9LGQuZmluZC5DTEFTUz1jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGEsYil7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmcClyZXR1cm4gYi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGEpfSxyPVtdLHE9W10sKGMucXNhPVkudGVzdChuLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGphKGZ1bmN0aW9uKGEpe28uYXBwZW5kQ2hpbGQoYSkuaW5uZXJIVE1MPVwiPGEgaWQ9J1wiK3UrXCInPjwvYT48c2VsZWN0IGlkPSdcIit1K1wiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCIsYS5xdWVyeVNlbGVjdG9yQWxsKFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIikubGVuZ3RoJiZxLnB1c2goXCJbKl4kXT1cIitLK1wiKig/OicnfFxcXCJcXFwiKVwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aHx8cS5wdXNoKFwiXFxcXFtcIitLK1wiKig/OnZhbHVlfFwiK0orXCIpXCIpLGEucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIrdStcIi1dXCIpLmxlbmd0aHx8cS5wdXNoKFwifj1cIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHxxLnB1c2goXCI6Y2hlY2tlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiK3UrXCIrKlwiKS5sZW5ndGh8fHEucHVzaChcIi4jLitbK35dXCIpfSksamEoZnVuY3Rpb24oYSl7YS5pbm5lckhUTUw9XCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjt2YXIgYj1uLmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtiLnNldEF0dHJpYnV0ZShcInR5cGVcIixcImhpZGRlblwiKSxhLmFwcGVuZENoaWxkKGIpLnNldEF0dHJpYnV0ZShcIm5hbWVcIixcIkRcIiksYS5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoJiZxLnB1c2goXCJuYW1lXCIrSytcIipbKl4kfCF+XT89XCIpLDIhPT1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZW5hYmxlZFwiKS5sZW5ndGgmJnEucHVzaChcIjplbmFibGVkXCIsXCI6ZGlzYWJsZWRcIiksby5hcHBlbmRDaGlsZChhKS5kaXNhYmxlZD0hMCwyIT09YS5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCYmcS5wdXNoKFwiOmVuYWJsZWRcIixcIjpkaXNhYmxlZFwiKSxhLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLHEucHVzaChcIiwuKjpcIil9KSksKGMubWF0Y2hlc1NlbGVjdG9yPVkudGVzdChzPW8ubWF0Y2hlc3x8by53ZWJraXRNYXRjaGVzU2VsZWN0b3J8fG8ubW96TWF0Y2hlc1NlbGVjdG9yfHxvLm9NYXRjaGVzU2VsZWN0b3J8fG8ubXNNYXRjaGVzU2VsZWN0b3IpKSYmamEoZnVuY3Rpb24oYSl7Yy5kaXNjb25uZWN0ZWRNYXRjaD1zLmNhbGwoYSxcIipcIikscy5jYWxsKGEsXCJbcyE9JyddOnhcIiksci5wdXNoKFwiIT1cIixOKX0pLHE9cS5sZW5ndGgmJm5ldyBSZWdFeHAocS5qb2luKFwifFwiKSkscj1yLmxlbmd0aCYmbmV3IFJlZ0V4cChyLmpvaW4oXCJ8XCIpKSxiPVkudGVzdChvLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSx0PWJ8fFkudGVzdChvLmNvbnRhaW5zKT9mdW5jdGlvbihhLGIpe3ZhciBjPTk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEsZD1iJiZiLnBhcmVudE5vZGU7cmV0dXJuIGE9PT1kfHwhKCFkfHwxIT09ZC5ub2RlVHlwZXx8IShjLmNvbnRhaW5zP2MuY29udGFpbnMoZCk6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiYmMTYmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihkKSkpfTpmdW5jdGlvbihhLGIpe2lmKGIpd2hpbGUoYj1iLnBhcmVudE5vZGUpaWYoYj09PWEpcmV0dXJuITA7cmV0dXJuITF9LEI9Yj9mdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGQ9IWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24tIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247cmV0dXJuIGQ/ZDooZD0oYS5vd25lckRvY3VtZW50fHxhKT09PShiLm93bmVyRG9jdW1lbnR8fGIpP2EuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYik6MSwxJmR8fCFjLnNvcnREZXRhY2hlZCYmYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhKT09PWQ/YT09PW58fGEub3duZXJEb2N1bWVudD09PXYmJnQodixhKT8tMTpiPT09bnx8Yi5vd25lckRvY3VtZW50PT09diYmdCh2LGIpPzE6az9JKGssYSktSShrLGIpOjA6NCZkPy0xOjEpfTpmdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBsPSEwLDA7dmFyIGMsZD0wLGU9YS5wYXJlbnROb2RlLGY9Yi5wYXJlbnROb2RlLGc9W2FdLGg9W2JdO2lmKCFlfHwhZilyZXR1cm4gYT09PW4/LTE6Yj09PW4/MTplPy0xOmY/MTprP0koayxhKS1JKGssYik6MDtpZihlPT09ZilyZXR1cm4gbGEoYSxiKTtjPWE7d2hpbGUoYz1jLnBhcmVudE5vZGUpZy51bnNoaWZ0KGMpO2M9Yjt3aGlsZShjPWMucGFyZW50Tm9kZSloLnVuc2hpZnQoYyk7d2hpbGUoZ1tkXT09PWhbZF0pZCsrO3JldHVybiBkP2xhKGdbZF0saFtkXSk6Z1tkXT09PXY/LTE6aFtkXT09PXY/MTowfSxuKTpufSxnYS5tYXRjaGVzPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGdhKGEsbnVsbCxudWxsLGIpfSxnYS5tYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oYSxiKXtpZigoYS5vd25lckRvY3VtZW50fHxhKSE9PW4mJm0oYSksYj1iLnJlcGxhY2UoUyxcIj0nJDEnXVwiKSxjLm1hdGNoZXNTZWxlY3RvciYmcCYmIUFbYitcIiBcIl0mJighcnx8IXIudGVzdChiKSkmJighcXx8IXEudGVzdChiKSkpdHJ5e3ZhciBkPXMuY2FsbChhLGIpO2lmKGR8fGMuZGlzY29ubmVjdGVkTWF0Y2h8fGEuZG9jdW1lbnQmJjExIT09YS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gZH1jYXRjaChlKXt9cmV0dXJuIGdhKGIsbixudWxsLFthXSkubGVuZ3RoPjB9LGdhLmNvbnRhaW5zPWZ1bmN0aW9uKGEsYil7cmV0dXJuKGEub3duZXJEb2N1bWVudHx8YSkhPT1uJiZtKGEpLHQoYSxiKX0sZ2EuYXR0cj1mdW5jdGlvbihhLGIpeyhhLm93bmVyRG9jdW1lbnR8fGEpIT09biYmbShhKTt2YXIgZT1kLmF0dHJIYW5kbGVbYi50b0xvd2VyQ2FzZSgpXSxmPWUmJkMuY2FsbChkLmF0dHJIYW5kbGUsYi50b0xvd2VyQ2FzZSgpKT9lKGEsYiwhcCk6dm9pZCAwO3JldHVybiB2b2lkIDAhPT1mP2Y6Yy5hdHRyaWJ1dGVzfHwhcD9hLmdldEF0dHJpYnV0ZShiKTooZj1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZmLnNwZWNpZmllZD9mLnZhbHVlOm51bGx9LGdhLmVzY2FwZT1mdW5jdGlvbihhKXtyZXR1cm4oYStcIlwiKS5yZXBsYWNlKGJhLGNhKX0sZ2EuZXJyb3I9ZnVuY3Rpb24oYSl7dGhyb3cgbmV3IEVycm9yKFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIrYSl9LGdhLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oYSl7dmFyIGIsZD1bXSxlPTAsZj0wO2lmKGw9IWMuZGV0ZWN0RHVwbGljYXRlcyxrPSFjLnNvcnRTdGFibGUmJmEuc2xpY2UoMCksYS5zb3J0KEIpLGwpe3doaWxlKGI9YVtmKytdKWI9PT1hW2ZdJiYoZT1kLnB1c2goZikpO3doaWxlKGUtLSlhLnNwbGljZShkW2VdLDEpfXJldHVybiBrPW51bGwsYX0sZT1nYS5nZXRUZXh0PWZ1bmN0aW9uKGEpe3ZhciBiLGM9XCJcIixkPTAsZj1hLm5vZGVUeXBlO2lmKGYpe2lmKDE9PT1mfHw5PT09Znx8MTE9PT1mKXtpZihcInN0cmluZ1wiPT10eXBlb2YgYS50ZXh0Q29udGVudClyZXR1cm4gYS50ZXh0Q29udGVudDtmb3IoYT1hLmZpcnN0Q2hpbGQ7YTthPWEubmV4dFNpYmxpbmcpYys9ZShhKX1lbHNlIGlmKDM9PT1mfHw0PT09ZilyZXR1cm4gYS5ub2RlVmFsdWV9ZWxzZSB3aGlsZShiPWFbZCsrXSljKz1lKGIpO3JldHVybiBjfSxkPWdhLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmlhLG1hdGNoOlYsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOntcIj5cIjp7ZGlyOlwicGFyZW50Tm9kZVwiLGZpcnN0OiEwfSxcIiBcIjp7ZGlyOlwicGFyZW50Tm9kZVwifSxcIitcIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCIsZmlyc3Q6ITB9LFwiflwiOntkaXI6XCJwcmV2aW91c1NpYmxpbmdcIn19LHByZUZpbHRlcjp7QVRUUjpmdW5jdGlvbihhKXtyZXR1cm4gYVsxXT1hWzFdLnJlcGxhY2UoXyxhYSksYVszXT0oYVszXXx8YVs0XXx8YVs1XXx8XCJcIikucmVwbGFjZShfLGFhKSxcIn49XCI9PT1hWzJdJiYoYVszXT1cIiBcIithWzNdK1wiIFwiKSxhLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKGEpe3JldHVybiBhWzFdPWFbMV0udG9Mb3dlckNhc2UoKSxcIm50aFwiPT09YVsxXS5zbGljZSgwLDMpPyhhWzNdfHxnYS5lcnJvcihhWzBdKSxhWzRdPSsoYVs0XT9hWzVdKyhhWzZdfHwxKToyKihcImV2ZW5cIj09PWFbM118fFwib2RkXCI9PT1hWzNdKSksYVs1XT0rKGFbN10rYVs4XXx8XCJvZGRcIj09PWFbM10pKTphWzNdJiZnYS5lcnJvcihhWzBdKSxhfSxQU0VVRE86ZnVuY3Rpb24oYSl7dmFyIGIsYz0hYVs2XSYmYVsyXTtyZXR1cm4gVi5DSElMRC50ZXN0KGFbMF0pP251bGw6KGFbM10/YVsyXT1hWzRdfHxhWzVdfHxcIlwiOmMmJlQudGVzdChjKSYmKGI9ZyhjLCEwKSkmJihiPWMuaW5kZXhPZihcIilcIixjLmxlbmd0aC1iKS1jLmxlbmd0aCkmJihhWzBdPWFbMF0uc2xpY2UoMCxiKSxhWzJdPWMuc2xpY2UoMCxiKSksYS5zbGljZSgwLDMpKX19LGZpbHRlcjp7VEFHOmZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShfLGFhKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09YT9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihhKXtyZXR1cm4gYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09Yn19LENMQVNTOmZ1bmN0aW9uKGEpe3ZhciBiPXlbYStcIiBcIl07cmV0dXJuIGJ8fChiPW5ldyBSZWdFeHAoXCIoXnxcIitLK1wiKVwiK2ErXCIoXCIrSytcInwkKVwiKSkmJnkoYSxmdW5jdGlvbihhKXtyZXR1cm4gYi50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBhLmNsYXNzTmFtZSYmYS5jbGFzc05hbWV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIil9KX0sQVRUUjpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGZ1bmN0aW9uKGQpe3ZhciBlPWdhLmF0dHIoZCxhKTtyZXR1cm4gbnVsbD09ZT9cIiE9XCI9PT1iOiFifHwoZSs9XCJcIixcIj1cIj09PWI/ZT09PWM6XCIhPVwiPT09Yj9lIT09YzpcIl49XCI9PT1iP2MmJjA9PT1lLmluZGV4T2YoYyk6XCIqPVwiPT09Yj9jJiZlLmluZGV4T2YoYyk+LTE6XCIkPVwiPT09Yj9jJiZlLnNsaWNlKC1jLmxlbmd0aCk9PT1jOlwifj1cIj09PWI/KFwiIFwiK2UucmVwbGFjZShPLFwiIFwiKStcIiBcIikuaW5kZXhPZihjKT4tMTpcInw9XCI9PT1iJiYoZT09PWN8fGUuc2xpY2UoMCxjLmxlbmd0aCsxKT09PWMrXCItXCIpKX19LENISUxEOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJudGhcIiE9PWEuc2xpY2UoMCwzKSxnPVwibGFzdFwiIT09YS5zbGljZSgtNCksaD1cIm9mLXR5cGVcIj09PWI7cmV0dXJuIDE9PT1kJiYwPT09ZT9mdW5jdGlvbihhKXtyZXR1cm4hIWEucGFyZW50Tm9kZX06ZnVuY3Rpb24oYixjLGkpe3ZhciBqLGssbCxtLG4sbyxwPWYhPT1nP1wibmV4dFNpYmxpbmdcIjpcInByZXZpb3VzU2libGluZ1wiLHE9Yi5wYXJlbnROb2RlLHI9aCYmYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHM9IWkmJiFoLHQ9ITE7aWYocSl7aWYoZil7d2hpbGUocCl7bT1iO3doaWxlKG09bVtwXSlpZihoP20ubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXI6MT09PW0ubm9kZVR5cGUpcmV0dXJuITE7bz1wPVwib25seVwiPT09YSYmIW8mJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZihvPVtnP3EuZmlyc3RDaGlsZDpxLmxhc3RDaGlsZF0sZyYmcyl7bT1xLGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGo9a1thXXx8W10sbj1qWzBdPT09dyYmalsxXSx0PW4mJmpbMl0sbT1uJiZxLmNoaWxkTm9kZXNbbl07d2hpbGUobT0rK24mJm0mJm1bcF18fCh0PW49MCl8fG8ucG9wKCkpaWYoMT09PW0ubm9kZVR5cGUmJisrdCYmbT09PWIpe2tbYV09W3csbix0XTticmVha319ZWxzZSBpZihzJiYobT1iLGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGo9a1thXXx8W10sbj1qWzBdPT09dyYmalsxXSx0PW4pLHQ9PT0hMSl3aGlsZShtPSsrbiYmbSYmbVtwXXx8KHQ9bj0wKXx8by5wb3AoKSlpZigoaD9tLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1yOjE9PT1tLm5vZGVUeXBlKSYmKyt0JiYocyYmKGw9bVt1XXx8KG1bdV09e30pLGs9bFttLnVuaXF1ZUlEXXx8KGxbbS51bmlxdWVJRF09e30pLGtbYV09W3csdF0pLG09PT1iKSlicmVhaztyZXR1cm4gdC09ZSx0PT09ZHx8dCVkPT09MCYmdC9kPj0wfX19LFBTRVVETzpmdW5jdGlvbihhLGIpe3ZhciBjLGU9ZC5wc2V1ZG9zW2FdfHxkLnNldEZpbHRlcnNbYS50b0xvd2VyQ2FzZSgpXXx8Z2EuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiK2EpO3JldHVybiBlW3VdP2UoYik6ZS5sZW5ndGg+MT8oYz1bYSxhLFwiXCIsYl0sZC5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KGEudG9Mb3dlckNhc2UoKSk/aWEoZnVuY3Rpb24oYSxjKXt2YXIgZCxmPWUoYSxiKSxnPWYubGVuZ3RoO3doaWxlKGctLSlkPUkoYSxmW2ddKSxhW2RdPSEoY1tkXT1mW2ddKX0pOmZ1bmN0aW9uKGEpe3JldHVybiBlKGEsMCxjKX0pOmV9fSxwc2V1ZG9zOntub3Q6aWEoZnVuY3Rpb24oYSl7dmFyIGI9W10sYz1bXSxkPWgoYS5yZXBsYWNlKFAsXCIkMVwiKSk7cmV0dXJuIGRbdV0/aWEoZnVuY3Rpb24oYSxiLGMsZSl7dmFyIGYsZz1kKGEsbnVsbCxlLFtdKSxoPWEubGVuZ3RoO3doaWxlKGgtLSkoZj1nW2hdKSYmKGFbaF09IShiW2hdPWYpKX0pOmZ1bmN0aW9uKGEsZSxmKXtyZXR1cm4gYlswXT1hLGQoYixudWxsLGYsYyksYlswXT1udWxsLCFjLnBvcCgpfX0pLGhhczppYShmdW5jdGlvbihhKXtyZXR1cm4gZnVuY3Rpb24oYil7cmV0dXJuIGdhKGEsYikubGVuZ3RoPjB9fSksY29udGFpbnM6aWEoZnVuY3Rpb24oYSl7cmV0dXJuIGE9YS5yZXBsYWNlKF8sYWEpLGZ1bmN0aW9uKGIpe3JldHVybihiLnRleHRDb250ZW50fHxiLmlubmVyVGV4dHx8ZShiKSkuaW5kZXhPZihhKT4tMX19KSxsYW5nOmlhKGZ1bmN0aW9uKGEpe3JldHVybiBVLnRlc3QoYXx8XCJcIil8fGdhLmVycm9yKFwidW5zdXBwb3J0ZWQgbGFuZzogXCIrYSksYT1hLnJlcGxhY2UoXyxhYSkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbihiKXt2YXIgYztkbyBpZihjPXA/Yi5sYW5nOmIuZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIil8fGIuZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSlyZXR1cm4gYz1jLnRvTG93ZXJDYXNlKCksYz09PWF8fDA9PT1jLmluZGV4T2YoYStcIi1cIik7d2hpbGUoKGI9Yi5wYXJlbnROb2RlKSYmMT09PWIubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihiKXt2YXIgYz1hLmxvY2F0aW9uJiZhLmxvY2F0aW9uLmhhc2g7cmV0dXJuIGMmJmMuc2xpY2UoMSk9PT1iLmlkfSxyb290OmZ1bmN0aW9uKGEpe3JldHVybiBhPT09b30sZm9jdXM6ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1uLmFjdGl2ZUVsZW1lbnQmJighbi5oYXNGb2N1c3x8bi5oYXNGb2N1cygpKSYmISEoYS50eXBlfHxhLmhyZWZ8fH5hLnRhYkluZGV4KX0sZW5hYmxlZDpvYSghMSksZGlzYWJsZWQ6b2EoITApLGNoZWNrZWQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWImJiEhYS5jaGVja2VkfHxcIm9wdGlvblwiPT09YiYmISFhLnNlbGVjdGVkfSxzZWxlY3RlZDpmdW5jdGlvbihhKXtyZXR1cm4gYS5wYXJlbnROb2RlJiZhLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxhLnNlbGVjdGVkPT09ITB9LGVtcHR5OmZ1bmN0aW9uKGEpe2ZvcihhPWEuZmlyc3RDaGlsZDthO2E9YS5uZXh0U2libGluZylpZihhLm5vZGVUeXBlPDYpcmV0dXJuITE7cmV0dXJuITB9LHBhcmVudDpmdW5jdGlvbihhKXtyZXR1cm4hZC5wc2V1ZG9zLmVtcHR5KGEpfSxoZWFkZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIFgudGVzdChhLm5vZGVOYW1lKX0saW5wdXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFcudGVzdChhLm5vZGVOYW1lKX0sYnV0dG9uOmZ1bmN0aW9uKGEpe3ZhciBiPWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iJiZcImJ1dHRvblwiPT09YS50eXBlfHxcImJ1dHRvblwiPT09Yn0sdGV4dDpmdW5jdGlvbihhKXt2YXIgYjtyZXR1cm5cImlucHV0XCI9PT1hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJlwidGV4dFwiPT09YS50eXBlJiYobnVsbD09KGI9YS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKXx8XCJ0ZXh0XCI9PT1iLnRvTG93ZXJDYXNlKCkpfSxmaXJzdDpwYShmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6cGEoZnVuY3Rpb24oYSxiKXtyZXR1cm5bYi0xXX0pLGVxOnBhKGZ1bmN0aW9uKGEsYixjKXtyZXR1cm5bYzwwP2MrYjpjXX0pLGV2ZW46cGEoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtjPGI7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxvZGQ6cGEoZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MTtjPGI7Yys9MilhLnB1c2goYyk7cmV0dXJuIGF9KSxsdDpwYShmdW5jdGlvbihhLGIsYyl7Zm9yKHZhciBkPWM8MD9jK2I6YzstLWQ+PTA7KWEucHVzaChkKTtyZXR1cm4gYX0pLGd0OnBhKGZ1bmN0aW9uKGEsYixjKXtmb3IodmFyIGQ9YzwwP2MrYjpjOysrZDxiOylhLnB1c2goZCk7cmV0dXJuIGF9KX19LGQucHNldWRvcy5udGg9ZC5wc2V1ZG9zLmVxO2ZvcihiIGlue3JhZGlvOiEwLGNoZWNrYm94OiEwLGZpbGU6ITAscGFzc3dvcmQ6ITAsaW1hZ2U6ITB9KWQucHNldWRvc1tiXT1tYShiKTtmb3IoYiBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KWQucHNldWRvc1tiXT1uYShiKTtmdW5jdGlvbiByYSgpe31yYS5wcm90b3R5cGU9ZC5maWx0ZXJzPWQucHNldWRvcyxkLnNldEZpbHRlcnM9bmV3IHJhLGc9Z2EudG9rZW5pemU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxlLGYsZyxoLGksaixrPXpbYStcIiBcIl07aWYoaylyZXR1cm4gYj8wOmsuc2xpY2UoMCk7aD1hLGk9W10saj1kLnByZUZpbHRlcjt3aGlsZShoKXtjJiYhKGU9US5leGVjKGgpKXx8KGUmJihoPWguc2xpY2UoZVswXS5sZW5ndGgpfHxoKSxpLnB1c2goZj1bXSkpLGM9ITEsKGU9Ui5leGVjKGgpKSYmKGM9ZS5zaGlmdCgpLGYucHVzaCh7dmFsdWU6Yyx0eXBlOmVbMF0ucmVwbGFjZShQLFwiIFwiKX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2ZvcihnIGluIGQuZmlsdGVyKSEoZT1WW2ddLmV4ZWMoaCkpfHxqW2ddJiYhKGU9altnXShlKSl8fChjPWUuc2hpZnQoKSxmLnB1c2goe3ZhbHVlOmMsdHlwZTpnLG1hdGNoZXM6ZX0pLGg9aC5zbGljZShjLmxlbmd0aCkpO2lmKCFjKWJyZWFrfXJldHVybiBiP2gubGVuZ3RoOmg/Z2EuZXJyb3IoYSk6eihhLGkpLnNsaWNlKDApfTtmdW5jdGlvbiBzYShhKXtmb3IodmFyIGI9MCxjPWEubGVuZ3RoLGQ9XCJcIjtiPGM7YisrKWQrPWFbYl0udmFsdWU7cmV0dXJuIGR9ZnVuY3Rpb24gdGEoYSxiLGMpe3ZhciBkPWIuZGlyLGU9Yi5uZXh0LGY9ZXx8ZCxnPWMmJlwicGFyZW50Tm9kZVwiPT09ZixoPXgrKztyZXR1cm4gYi5maXJzdD9mdW5jdGlvbihiLGMsZSl7d2hpbGUoYj1iW2RdKWlmKDE9PT1iLm5vZGVUeXBlfHxnKXJldHVybiBhKGIsYyxlKTtyZXR1cm4hMX06ZnVuY3Rpb24oYixjLGkpe3ZhciBqLGssbCxtPVt3LGhdO2lmKGkpe3doaWxlKGI9YltkXSlpZigoMT09PWIubm9kZVR5cGV8fGcpJiZhKGIsYyxpKSlyZXR1cm4hMH1lbHNlIHdoaWxlKGI9YltkXSlpZigxPT09Yi5ub2RlVHlwZXx8ZylpZihsPWJbdV18fChiW3VdPXt9KSxrPWxbYi51bmlxdWVJRF18fChsW2IudW5pcXVlSURdPXt9KSxlJiZlPT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKWI9YltkXXx8YjtlbHNle2lmKChqPWtbZl0pJiZqWzBdPT09dyYmalsxXT09PWgpcmV0dXJuIG1bMl09alsyXTtpZihrW2ZdPW0sbVsyXT1hKGIsYyxpKSlyZXR1cm4hMH1yZXR1cm4hMX19ZnVuY3Rpb24gdWEoYSl7cmV0dXJuIGEubGVuZ3RoPjE/ZnVuY3Rpb24oYixjLGQpe3ZhciBlPWEubGVuZ3RoO3doaWxlKGUtLSlpZighYVtlXShiLGMsZCkpcmV0dXJuITE7cmV0dXJuITB9OmFbMF19ZnVuY3Rpb24gdmEoYSxiLGMpe2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrKylnYShhLGJbZF0sYyk7cmV0dXJuIGN9ZnVuY3Rpb24gd2EoYSxiLGMsZCxlKXtmb3IodmFyIGYsZz1bXSxoPTAsaT1hLmxlbmd0aCxqPW51bGwhPWI7aDxpO2grKykoZj1hW2hdKSYmKGMmJiFjKGYsZCxlKXx8KGcucHVzaChmKSxqJiZiLnB1c2goaCkpKTtyZXR1cm4gZ31mdW5jdGlvbiB4YShhLGIsYyxkLGUsZil7cmV0dXJuIGQmJiFkW3VdJiYoZD14YShkKSksZSYmIWVbdV0mJihlPXhhKGUsZikpLGlhKGZ1bmN0aW9uKGYsZyxoLGkpe3ZhciBqLGssbCxtPVtdLG49W10sbz1nLmxlbmd0aCxwPWZ8fHZhKGJ8fFwiKlwiLGgubm9kZVR5cGU/W2hdOmgsW10pLHE9IWF8fCFmJiZiP3A6d2EocCxtLGEsaCxpKSxyPWM/ZXx8KGY/YTpvfHxkKT9bXTpnOnE7aWYoYyYmYyhxLHIsaCxpKSxkKXtqPXdhKHIsbiksZChqLFtdLGgsaSksaz1qLmxlbmd0aDt3aGlsZShrLS0pKGw9altrXSkmJihyW25ba11dPSEocVtuW2tdXT1sKSl9aWYoZil7aWYoZXx8YSl7aWYoZSl7aj1bXSxrPXIubGVuZ3RoO3doaWxlKGstLSkobD1yW2tdKSYmai5wdXNoKHFba109bCk7ZShudWxsLHI9W10saixpKX1rPXIubGVuZ3RoO3doaWxlKGstLSkobD1yW2tdKSYmKGo9ZT9JKGYsbCk6bVtrXSk+LTEmJihmW2pdPSEoZ1tqXT1sKSl9fWVsc2Ugcj13YShyPT09Zz9yLnNwbGljZShvLHIubGVuZ3RoKTpyKSxlP2UobnVsbCxnLHIsaSk6Ry5hcHBseShnLHIpfSl9ZnVuY3Rpb24geWEoYSl7Zm9yKHZhciBiLGMsZSxmPWEubGVuZ3RoLGc9ZC5yZWxhdGl2ZVthWzBdLnR5cGVdLGg9Z3x8ZC5yZWxhdGl2ZVtcIiBcIl0saT1nPzE6MCxrPXRhKGZ1bmN0aW9uKGEpe3JldHVybiBhPT09Yn0saCwhMCksbD10YShmdW5jdGlvbihhKXtyZXR1cm4gSShiLGEpPi0xfSxoLCEwKSxtPVtmdW5jdGlvbihhLGMsZCl7dmFyIGU9IWcmJihkfHxjIT09ail8fCgoYj1jKS5ub2RlVHlwZT9rKGEsYyxkKTpsKGEsYyxkKSk7cmV0dXJuIGI9bnVsbCxlfV07aTxmO2krKylpZihjPWQucmVsYXRpdmVbYVtpXS50eXBlXSltPVt0YSh1YShtKSxjKV07ZWxzZXtpZihjPWQuZmlsdGVyW2FbaV0udHlwZV0uYXBwbHkobnVsbCxhW2ldLm1hdGNoZXMpLGNbdV0pe2ZvcihlPSsraTtlPGY7ZSsrKWlmKGQucmVsYXRpdmVbYVtlXS50eXBlXSlicmVhaztyZXR1cm4geGEoaT4xJiZ1YShtKSxpPjEmJnNhKGEuc2xpY2UoMCxpLTEpLmNvbmNhdCh7dmFsdWU6XCIgXCI9PT1hW2ktMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UoUCxcIiQxXCIpLGMsaTxlJiZ5YShhLnNsaWNlKGksZSkpLGU8ZiYmeWEoYT1hLnNsaWNlKGUpKSxlPGYmJnNhKGEpKX1tLnB1c2goYyl9cmV0dXJuIHVhKG0pfWZ1bmN0aW9uIHphKGEsYil7dmFyIGM9Yi5sZW5ndGg+MCxlPWEubGVuZ3RoPjAsZj1mdW5jdGlvbihmLGcsaCxpLGspe3ZhciBsLG8scSxyPTAscz1cIjBcIix0PWYmJltdLHU9W10sdj1qLHg9Znx8ZSYmZC5maW5kLlRBRyhcIipcIixrKSx5PXcrPW51bGw9PXY/MTpNYXRoLnJhbmRvbSgpfHwuMSx6PXgubGVuZ3RoO2ZvcihrJiYoaj1nPT09bnx8Z3x8ayk7cyE9PXomJm51bGwhPShsPXhbc10pO3MrKyl7aWYoZSYmbCl7bz0wLGd8fGwub3duZXJEb2N1bWVudD09PW58fChtKGwpLGg9IXApO3doaWxlKHE9YVtvKytdKWlmKHEobCxnfHxuLGgpKXtpLnB1c2gobCk7YnJlYWt9ayYmKHc9eSl9YyYmKChsPSFxJiZsKSYmci0tLGYmJnQucHVzaChsKSl9aWYocis9cyxjJiZzIT09cil7bz0wO3doaWxlKHE9YltvKytdKXEodCx1LGcsaCk7aWYoZil7aWYocj4wKXdoaWxlKHMtLSl0W3NdfHx1W3NdfHwodVtzXT1FLmNhbGwoaSkpO3U9d2EodSl9Ry5hcHBseShpLHUpLGsmJiFmJiZ1Lmxlbmd0aD4wJiZyK2IubGVuZ3RoPjEmJmdhLnVuaXF1ZVNvcnQoaSl9cmV0dXJuIGsmJih3PXksaj12KSx0fTtyZXR1cm4gYz9pYShmKTpmfXJldHVybiBoPWdhLmNvbXBpbGU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkPVtdLGU9W10sZj1BW2ErXCIgXCJdO2lmKCFmKXtifHwoYj1nKGEpKSxjPWIubGVuZ3RoO3doaWxlKGMtLSlmPXlhKGJbY10pLGZbdV0/ZC5wdXNoKGYpOmUucHVzaChmKTtmPUEoYSx6YShlLGQpKSxmLnNlbGVjdG9yPWF9cmV0dXJuIGZ9LGk9Z2Euc2VsZWN0PWZ1bmN0aW9uKGEsYixjLGUpe3ZhciBmLGksaixrLGwsbT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBhJiZhLG49IWUmJmcoYT1tLnNlbGVjdG9yfHxhKTtpZihjPWN8fFtdLDE9PT1uLmxlbmd0aCl7aWYoaT1uWzBdPW5bMF0uc2xpY2UoMCksaS5sZW5ndGg+MiYmXCJJRFwiPT09KGo9aVswXSkudHlwZSYmOT09PWIubm9kZVR5cGUmJnAmJmQucmVsYXRpdmVbaVsxXS50eXBlXSl7aWYoYj0oZC5maW5kLklEKGoubWF0Y2hlc1swXS5yZXBsYWNlKF8sYWEpLGIpfHxbXSlbMF0sIWIpcmV0dXJuIGM7bSYmKGI9Yi5wYXJlbnROb2RlKSxhPWEuc2xpY2UoaS5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9Zj1WLm5lZWRzQ29udGV4dC50ZXN0KGEpPzA6aS5sZW5ndGg7d2hpbGUoZi0tKXtpZihqPWlbZl0sZC5yZWxhdGl2ZVtrPWoudHlwZV0pYnJlYWs7aWYoKGw9ZC5maW5kW2tdKSYmKGU9bChqLm1hdGNoZXNbMF0ucmVwbGFjZShfLGFhKSwkLnRlc3QoaVswXS50eXBlKSYmcWEoYi5wYXJlbnROb2RlKXx8YikpKXtpZihpLnNwbGljZShmLDEpLGE9ZS5sZW5ndGgmJnNhKGkpLCFhKXJldHVybiBHLmFwcGx5KGMsZSksYzticmVha319fXJldHVybihtfHxoKGEsbikpKGUsYiwhcCxjLCFifHwkLnRlc3QoYSkmJnFhKGIucGFyZW50Tm9kZSl8fGIpLGN9LGMuc29ydFN0YWJsZT11LnNwbGl0KFwiXCIpLnNvcnQoQikuam9pbihcIlwiKT09PXUsYy5kZXRlY3REdXBsaWNhdGVzPSEhbCxtKCksYy5zb3J0RGV0YWNoZWQ9amEoZnVuY3Rpb24oYSl7cmV0dXJuIDEmYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuLmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSl9KSxqYShmdW5jdGlvbihhKXtyZXR1cm4gYS5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsXCIjXCI9PT1hLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKX0pfHxrYShcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIixmdW5jdGlvbihhLGIsYyl7aWYoIWMpcmV0dXJuIGEuZ2V0QXR0cmlidXRlKGIsXCJ0eXBlXCI9PT1iLnRvTG93ZXJDYXNlKCk/MToyKX0pLGMuYXR0cmlidXRlcyYmamEoZnVuY3Rpb24oYSl7cmV0dXJuIGEuaW5uZXJIVE1MPVwiPGlucHV0Lz5cIixhLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiKSxcIlwiPT09YS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fGthKFwidmFsdWVcIixmdW5jdGlvbihhLGIsYyl7aWYoIWMmJlwiaW5wdXRcIj09PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKSlyZXR1cm4gYS5kZWZhdWx0VmFsdWV9KSxqYShmdW5jdGlvbihhKXtyZXR1cm4gbnVsbD09YS5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKX0pfHxrYShKLGZ1bmN0aW9uKGEsYixjKXt2YXIgZDtpZighYylyZXR1cm4gYVtiXT09PSEwP2IudG9Mb3dlckNhc2UoKTooZD1hLmdldEF0dHJpYnV0ZU5vZGUoYikpJiZkLnNwZWNpZmllZD9kLnZhbHVlOm51bGx9KSxnYX0oYSk7ci5maW5kPXgsci5leHByPXguc2VsZWN0b3JzLHIuZXhwcltcIjpcIl09ci5leHByLnBzZXVkb3Msci51bmlxdWVTb3J0PXIudW5pcXVlPXgudW5pcXVlU29ydCxyLnRleHQ9eC5nZXRUZXh0LHIuaXNYTUxEb2M9eC5pc1hNTCxyLmNvbnRhaW5zPXguY29udGFpbnMsci5lc2NhcGVTZWxlY3Rvcj14LmVzY2FwZTt2YXIgeT1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9W10sZT12b2lkIDAhPT1jO3doaWxlKChhPWFbYl0pJiY5IT09YS5ub2RlVHlwZSlpZigxPT09YS5ub2RlVHlwZSl7aWYoZSYmcihhKS5pcyhjKSlicmVhaztkLnB1c2goYSl9cmV0dXJuIGR9LHo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9W107YTthPWEubmV4dFNpYmxpbmcpMT09PWEubm9kZVR5cGUmJmEhPT1iJiZjLnB1c2goYSk7cmV0dXJuIGN9LEE9ci5leHByLm1hdGNoLm5lZWRzQ29udGV4dCxCPS9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pLEM9L14uW146I1xcW1xcLixdKiQvO2Z1bmN0aW9uIEQoYSxiLGMpe3JldHVybiByLmlzRnVuY3Rpb24oYik/ci5ncmVwKGEsZnVuY3Rpb24oYSxkKXtyZXR1cm4hIWIuY2FsbChhLGQsYSkhPT1jfSk6Yi5ub2RlVHlwZT9yLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYT09PWIhPT1jfSk6XCJzdHJpbmdcIiE9dHlwZW9mIGI/ci5ncmVwKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGkuY2FsbChiLGEpPi0xIT09Y30pOkMudGVzdChiKT9yLmZpbHRlcihiLGEsYyk6KGI9ci5maWx0ZXIoYixhKSxyLmdyZXAoYSxmdW5jdGlvbihhKXtyZXR1cm4gaS5jYWxsKGIsYSk+LTEhPT1jJiYxPT09YS5ub2RlVHlwZX0pKX1yLmZpbHRlcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9YlswXTtyZXR1cm4gYyYmKGE9XCI6bm90KFwiK2ErXCIpXCIpLDE9PT1iLmxlbmd0aCYmMT09PWQubm9kZVR5cGU/ci5maW5kLm1hdGNoZXNTZWxlY3RvcihkLGEpP1tkXTpbXTpyLmZpbmQubWF0Y2hlcyhhLHIuZ3JlcChiLGZ1bmN0aW9uKGEpe3JldHVybiAxPT09YS5ub2RlVHlwZX0pKX0sci5mbi5leHRlbmQoe2ZpbmQ6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkPXRoaXMubGVuZ3RoLGU9dGhpcztpZihcInN0cmluZ1wiIT10eXBlb2YgYSlyZXR1cm4gdGhpcy5wdXNoU3RhY2socihhKS5maWx0ZXIoZnVuY3Rpb24oKXtmb3IoYj0wO2I8ZDtiKyspaWYoci5jb250YWlucyhlW2JdLHRoaXMpKXJldHVybiEwfSkpO2ZvcihjPXRoaXMucHVzaFN0YWNrKFtdKSxiPTA7YjxkO2IrKylyLmZpbmQoYSxlW2JdLGMpO3JldHVybiBkPjE/ci51bmlxdWVTb3J0KGMpOmN9LGZpbHRlcjpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soRCh0aGlzLGF8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soRCh0aGlzLGF8fFtdLCEwKSl9LGlzOmZ1bmN0aW9uKGEpe3JldHVybiEhRCh0aGlzLFwic3RyaW5nXCI9PXR5cGVvZiBhJiZBLnRlc3QoYSk/cihhKTphfHxbXSwhMSkubGVuZ3RofX0pO3ZhciBFLEY9L14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sRz1yLmZuLmluaXQ9ZnVuY3Rpb24oYSxiLGMpe3ZhciBlLGY7aWYoIWEpcmV0dXJuIHRoaXM7aWYoYz1jfHxFLFwic3RyaW5nXCI9PXR5cGVvZiBhKXtpZihlPVwiPFwiPT09YVswXSYmXCI+XCI9PT1hW2EubGVuZ3RoLTFdJiZhLmxlbmd0aD49Mz9bbnVsbCxhLG51bGxdOkYuZXhlYyhhKSwhZXx8IWVbMV0mJmIpcmV0dXJuIWJ8fGIuanF1ZXJ5PyhifHxjKS5maW5kKGEpOnRoaXMuY29uc3RydWN0b3IoYikuZmluZChhKTtpZihlWzFdKXtpZihiPWIgaW5zdGFuY2VvZiByP2JbMF06YixyLm1lcmdlKHRoaXMsci5wYXJzZUhUTUwoZVsxXSxiJiZiLm5vZGVUeXBlP2Iub3duZXJEb2N1bWVudHx8YjpkLCEwKSksQi50ZXN0KGVbMV0pJiZyLmlzUGxhaW5PYmplY3QoYikpZm9yKGUgaW4gYilyLmlzRnVuY3Rpb24odGhpc1tlXSk/dGhpc1tlXShiW2VdKTp0aGlzLmF0dHIoZSxiW2VdKTtyZXR1cm4gdGhpc31yZXR1cm4gZj1kLmdldEVsZW1lbnRCeUlkKGVbMl0pLGYmJih0aGlzWzBdPWYsdGhpcy5sZW5ndGg9MSksdGhpc31yZXR1cm4gYS5ub2RlVHlwZT8odGhpc1swXT1hLHRoaXMubGVuZ3RoPTEsdGhpcyk6ci5pc0Z1bmN0aW9uKGEpP3ZvaWQgMCE9PWMucmVhZHk/Yy5yZWFkeShhKTphKHIpOnIubWFrZUFycmF5KGEsdGhpcyl9O0cucHJvdG90eXBlPXIuZm4sRT1yKGQpO3ZhciBIPS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLEk9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07ci5mbi5leHRlbmQoe2hhczpmdW5jdGlvbihhKXt2YXIgYj1yKGEsdGhpcyksYz1iLmxlbmd0aDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24oKXtmb3IodmFyIGE9MDthPGM7YSsrKWlmKHIuY29udGFpbnModGhpcyxiW2FdKSlyZXR1cm4hMH0pfSxjbG9zZXN0OmZ1bmN0aW9uKGEsYil7dmFyIGMsZD0wLGU9dGhpcy5sZW5ndGgsZj1bXSxnPVwic3RyaW5nXCIhPXR5cGVvZiBhJiZyKGEpO2lmKCFBLnRlc3QoYSkpZm9yKDtkPGU7ZCsrKWZvcihjPXRoaXNbZF07YyYmYyE9PWI7Yz1jLnBhcmVudE5vZGUpaWYoYy5ub2RlVHlwZTwxMSYmKGc/Zy5pbmRleChjKT4tMToxPT09Yy5ub2RlVHlwZSYmci5maW5kLm1hdGNoZXNTZWxlY3RvcihjLGEpKSl7Zi5wdXNoKGMpO2JyZWFrfXJldHVybiB0aGlzLnB1c2hTdGFjayhmLmxlbmd0aD4xP3IudW5pcXVlU29ydChmKTpmKX0saW5kZXg6ZnVuY3Rpb24oYSl7cmV0dXJuIGE/XCJzdHJpbmdcIj09dHlwZW9mIGE/aS5jYWxsKHIoYSksdGhpc1swXSk6aS5jYWxsKHRoaXMsYS5qcXVlcnk/YVswXTphKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnB1c2hTdGFjayhyLnVuaXF1ZVNvcnQoci5tZXJnZSh0aGlzLmdldCgpLHIoYSxiKSkpKX0sYWRkQmFjazpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09YT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihhKSl9fSk7ZnVuY3Rpb24gSihhLGIpe3doaWxlKChhPWFbYl0pJiYxIT09YS5ub2RlVHlwZSk7cmV0dXJuIGF9ci5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO3JldHVybiBiJiYxMSE9PWIubm9kZVR5cGU/YjpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGEpe3JldHVybiB5KGEsXCJwYXJlbnROb2RlXCIpfSxwYXJlbnRzVW50aWw6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiB5KGEsXCJwYXJlbnROb2RlXCIsYyl9LG5leHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIEooYSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2OmZ1bmN0aW9uKGEpe3JldHVybiBKKGEsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRBbGw6ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSxcIm5leHRTaWJsaW5nXCIpfSxwcmV2QWxsOmZ1bmN0aW9uKGEpe3JldHVybiB5KGEsXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHkoYSxcIm5leHRTaWJsaW5nXCIsYyl9LHByZXZVbnRpbDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHkoYSxcInByZXZpb3VzU2libGluZ1wiLGMpfSxzaWJsaW5nczpmdW5jdGlvbihhKXtyZXR1cm4geigoYS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxhKX0sY2hpbGRyZW46ZnVuY3Rpb24oYSl7cmV0dXJuIHooYS5maXJzdENoaWxkKX0sY29udGVudHM6ZnVuY3Rpb24oYSl7cmV0dXJuIGEuY29udGVudERvY3VtZW50fHxyLm1lcmdlKFtdLGEuY2hpbGROb2Rlcyl9fSxmdW5jdGlvbihhLGIpe3IuZm5bYV09ZnVuY3Rpb24oYyxkKXt2YXIgZT1yLm1hcCh0aGlzLGIsYyk7cmV0dXJuXCJVbnRpbFwiIT09YS5zbGljZSgtNSkmJihkPWMpLGQmJlwic3RyaW5nXCI9PXR5cGVvZiBkJiYoZT1yLmZpbHRlcihkLGUpKSx0aGlzLmxlbmd0aD4xJiYoSVthXXx8ci51bmlxdWVTb3J0KGUpLEgudGVzdChhKSYmZS5yZXZlcnNlKCkpLHRoaXMucHVzaFN0YWNrKGUpfX0pO3ZhciBLPS9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZztmdW5jdGlvbiBMKGEpe3ZhciBiPXt9O3JldHVybiByLmVhY2goYS5tYXRjaChLKXx8W10sZnVuY3Rpb24oYSxjKXtiW2NdPSEwfSksYn1yLkNhbGxiYWNrcz1mdW5jdGlvbihhKXthPVwic3RyaW5nXCI9PXR5cGVvZiBhP0woYSk6ci5leHRlbmQoe30sYSk7dmFyIGIsYyxkLGUsZj1bXSxnPVtdLGg9LTEsaT1mdW5jdGlvbigpe2ZvcihlPWEub25jZSxkPWI9ITA7Zy5sZW5ndGg7aD0tMSl7Yz1nLnNoaWZ0KCk7d2hpbGUoKytoPGYubGVuZ3RoKWZbaF0uYXBwbHkoY1swXSxjWzFdKT09PSExJiZhLnN0b3BPbkZhbHNlJiYoaD1mLmxlbmd0aCxjPSExKX1hLm1lbW9yeXx8KGM9ITEpLGI9ITEsZSYmKGY9Yz9bXTpcIlwiKX0saj17YWRkOmZ1bmN0aW9uKCl7cmV0dXJuIGYmJihjJiYhYiYmKGg9Zi5sZW5ndGgtMSxnLnB1c2goYykpLGZ1bmN0aW9uIGQoYil7ci5lYWNoKGIsZnVuY3Rpb24oYixjKXtyLmlzRnVuY3Rpb24oYyk/YS51bmlxdWUmJmouaGFzKGMpfHxmLnB1c2goYyk6YyYmYy5sZW5ndGgmJlwic3RyaW5nXCIhPT1yLnR5cGUoYykmJmQoYyl9KX0oYXJndW1lbnRzKSxjJiYhYiYmaSgpKSx0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gci5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihhLGIpe3ZhciBjO3doaWxlKChjPXIuaW5BcnJheShiLGYsYykpPi0xKWYuc3BsaWNlKGMsMSksYzw9aCYmaC0tfSksdGhpc30saGFzOmZ1bmN0aW9uKGEpe3JldHVybiBhP3IuaW5BcnJheShhLGYpPi0xOmYubGVuZ3RoPjB9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIGYmJihmPVtdKSx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGU9Zz1bXSxmPWM9XCJcIix0aGlzfSxkaXNhYmxlZDpmdW5jdGlvbigpe3JldHVybiFmfSxsb2NrOmZ1bmN0aW9uKCl7cmV0dXJuIGU9Zz1bXSxjfHxifHwoZj1jPVwiXCIpLHRoaXN9LGxvY2tlZDpmdW5jdGlvbigpe3JldHVybiEhZX0sZmlyZVdpdGg6ZnVuY3Rpb24oYSxjKXtyZXR1cm4gZXx8KGM9Y3x8W10sYz1bYSxjLnNsaWNlP2Muc2xpY2UoKTpjXSxnLnB1c2goYyksYnx8aSgpKSx0aGlzfSxmaXJlOmZ1bmN0aW9uKCl7cmV0dXJuIGouZmlyZVdpdGgodGhpcyxhcmd1bWVudHMpLHRoaXN9LGZpcmVkOmZ1bmN0aW9uKCl7cmV0dXJuISFkfX07cmV0dXJuIGp9O2Z1bmN0aW9uIE0oYSl7cmV0dXJuIGF9ZnVuY3Rpb24gTihhKXt0aHJvdyBhfWZ1bmN0aW9uIE8oYSxiLGMpe3ZhciBkO3RyeXthJiZyLmlzRnVuY3Rpb24oZD1hLnByb21pc2UpP2QuY2FsbChhKS5kb25lKGIpLmZhaWwoYyk6YSYmci5pc0Z1bmN0aW9uKGQ9YS50aGVuKT9kLmNhbGwoYSxiLGMpOmIuY2FsbCh2b2lkIDAsYSl9Y2F0Y2goYSl7Yy5jYWxsKHZvaWQgMCxhKX19ci5leHRlbmQoe0RlZmVycmVkOmZ1bmN0aW9uKGIpe3ZhciBjPVtbXCJub3RpZnlcIixcInByb2dyZXNzXCIsci5DYWxsYmFja3MoXCJtZW1vcnlcIiksci5DYWxsYmFja3MoXCJtZW1vcnlcIiksMl0sW1wicmVzb2x2ZVwiLFwiZG9uZVwiLHIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSwwLFwicmVzb2x2ZWRcIl0sW1wicmVqZWN0XCIsXCJmYWlsXCIsci5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxyLkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLDEsXCJyZWplY3RlZFwiXV0sZD1cInBlbmRpbmdcIixlPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBkfSxhbHdheXM6ZnVuY3Rpb24oKXtyZXR1cm4gZi5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLHRoaXN9LFwiY2F0Y2hcIjpmdW5jdGlvbihhKXtyZXR1cm4gZS50aGVuKG51bGwsYSl9LHBpcGU6ZnVuY3Rpb24oKXt2YXIgYT1hcmd1bWVudHM7cmV0dXJuIHIuRGVmZXJyZWQoZnVuY3Rpb24oYil7ci5lYWNoKGMsZnVuY3Rpb24oYyxkKXt2YXIgZT1yLmlzRnVuY3Rpb24oYVtkWzRdXSkmJmFbZFs0XV07ZltkWzFdXShmdW5jdGlvbigpe3ZhciBhPWUmJmUuYXBwbHkodGhpcyxhcmd1bWVudHMpO2EmJnIuaXNGdW5jdGlvbihhLnByb21pc2UpP2EucHJvbWlzZSgpLnByb2dyZXNzKGIubm90aWZ5KS5kb25lKGIucmVzb2x2ZSkuZmFpbChiLnJlamVjdCk6YltkWzBdK1wiV2l0aFwiXSh0aGlzLGU/W2FdOmFyZ3VtZW50cyl9KX0pLGE9bnVsbH0pLnByb21pc2UoKX0sdGhlbjpmdW5jdGlvbihiLGQsZSl7dmFyIGY9MDtmdW5jdGlvbiBnKGIsYyxkLGUpe3JldHVybiBmdW5jdGlvbigpe3ZhciBoPXRoaXMsaT1hcmd1bWVudHMsaj1mdW5jdGlvbigpe3ZhciBhLGo7aWYoIShiPGYpKXtpZihhPWQuYXBwbHkoaCxpKSxhPT09Yy5wcm9taXNlKCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiKTtqPWEmJihcIm9iamVjdFwiPT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT10eXBlb2YgYSkmJmEudGhlbixyLmlzRnVuY3Rpb24oaik/ZT9qLmNhbGwoYSxnKGYsYyxNLGUpLGcoZixjLE4sZSkpOihmKyssai5jYWxsKGEsZyhmLGMsTSxlKSxnKGYsYyxOLGUpLGcoZixjLE0sYy5ub3RpZnlXaXRoKSkpOihkIT09TSYmKGg9dm9pZCAwLGk9W2FdKSwoZXx8Yy5yZXNvbHZlV2l0aCkoaCxpKSl9fSxrPWU/ajpmdW5jdGlvbigpe3RyeXtqKCl9Y2F0Y2goYSl7ci5EZWZlcnJlZC5leGNlcHRpb25Ib29rJiZyLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soYSxrLnN0YWNrVHJhY2UpLGIrMT49ZiYmKGQhPT1OJiYoaD12b2lkIDAsaT1bYV0pLGMucmVqZWN0V2l0aChoLGkpKX19O2I/aygpOihyLkRlZmVycmVkLmdldFN0YWNrSG9vayYmKGsuc3RhY2tUcmFjZT1yLkRlZmVycmVkLmdldFN0YWNrSG9vaygpKSxhLnNldFRpbWVvdXQoaykpfX1yZXR1cm4gci5EZWZlcnJlZChmdW5jdGlvbihhKXtjWzBdWzNdLmFkZChnKDAsYSxyLmlzRnVuY3Rpb24oZSk/ZTpNLGEubm90aWZ5V2l0aCkpLGNbMV1bM10uYWRkKGcoMCxhLHIuaXNGdW5jdGlvbihiKT9iOk0pKSxjWzJdWzNdLmFkZChnKDAsYSxyLmlzRnVuY3Rpb24oZCk/ZDpOKSl9KS5wcm9taXNlKCl9LHByb21pc2U6ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGwhPWE/ci5leHRlbmQoYSxlKTplfX0sZj17fTtyZXR1cm4gci5lYWNoKGMsZnVuY3Rpb24oYSxiKXt2YXIgZz1iWzJdLGg9Yls1XTtlW2JbMV1dPWcuYWRkLGgmJmcuYWRkKGZ1bmN0aW9uKCl7ZD1ofSxjWzMtYV1bMl0uZGlzYWJsZSxjWzBdWzJdLmxvY2spLGcuYWRkKGJbM10uZmlyZSksZltiWzBdXT1mdW5jdGlvbigpe3JldHVybiBmW2JbMF0rXCJXaXRoXCJdKHRoaXM9PT1mP3ZvaWQgMDp0aGlzLGFyZ3VtZW50cyksdGhpc30sZltiWzBdK1wiV2l0aFwiXT1nLmZpcmVXaXRofSksZS5wcm9taXNlKGYpLGImJmIuY2FsbChmLGYpLGZ9LHdoZW46ZnVuY3Rpb24oYSl7dmFyIGI9YXJndW1lbnRzLmxlbmd0aCxjPWIsZD1BcnJheShjKSxlPWYuY2FsbChhcmd1bWVudHMpLGc9ci5EZWZlcnJlZCgpLGg9ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKGMpe2RbYV09dGhpcyxlW2FdPWFyZ3VtZW50cy5sZW5ndGg+MT9mLmNhbGwoYXJndW1lbnRzKTpjLC0tYnx8Zy5yZXNvbHZlV2l0aChkLGUpfX07aWYoYjw9MSYmKE8oYSxnLmRvbmUoaChjKSkucmVzb2x2ZSxnLnJlamVjdCksXCJwZW5kaW5nXCI9PT1nLnN0YXRlKCl8fHIuaXNGdW5jdGlvbihlW2NdJiZlW2NdLnRoZW4pKSlyZXR1cm4gZy50aGVuKCk7d2hpbGUoYy0tKU8oZVtjXSxoKGMpLGcucmVqZWN0KTtyZXR1cm4gZy5wcm9taXNlKCl9fSk7dmFyIFA9L14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87ci5EZWZlcnJlZC5leGNlcHRpb25Ib29rPWZ1bmN0aW9uKGIsYyl7YS5jb25zb2xlJiZhLmNvbnNvbGUud2FybiYmYiYmUC50ZXN0KGIubmFtZSkmJmEuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIrYi5tZXNzYWdlLGIuc3RhY2ssYyl9LHIucmVhZHlFeGNlcHRpb249ZnVuY3Rpb24oYil7YS5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYn0pfTt2YXIgUT1yLkRlZmVycmVkKCk7ci5mbi5yZWFkeT1mdW5jdGlvbihhKXtyZXR1cm4gUS50aGVuKGEpW1wiY2F0Y2hcIl0oZnVuY3Rpb24oYSl7ci5yZWFkeUV4Y2VwdGlvbihhKX0pLHRoaXN9LHIuZXh0ZW5kKHtpc1JlYWR5OiExLHJlYWR5V2FpdDoxLFxuaG9sZFJlYWR5OmZ1bmN0aW9uKGEpe2E/ci5yZWFkeVdhaXQrKzpyLnJlYWR5KCEwKX0scmVhZHk6ZnVuY3Rpb24oYSl7KGE9PT0hMD8tLXIucmVhZHlXYWl0OnIuaXNSZWFkeSl8fChyLmlzUmVhZHk9ITAsYSE9PSEwJiYtLXIucmVhZHlXYWl0PjB8fFEucmVzb2x2ZVdpdGgoZCxbcl0pKX19KSxyLnJlYWR5LnRoZW49US50aGVuO2Z1bmN0aW9uIFIoKXtkLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUiksYS5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLFIpLHIucmVhZHkoKX1cImNvbXBsZXRlXCI9PT1kLnJlYWR5U3RhdGV8fFwibG9hZGluZ1wiIT09ZC5yZWFkeVN0YXRlJiYhZC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGw/YS5zZXRUaW1lb3V0KHIucmVhZHkpOihkLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsUiksYS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLFIpKTt2YXIgUz1mdW5jdGlvbihhLGIsYyxkLGUsZixnKXt2YXIgaD0wLGk9YS5sZW5ndGgsaj1udWxsPT1jO2lmKFwib2JqZWN0XCI9PT1yLnR5cGUoYykpe2U9ITA7Zm9yKGggaW4gYylTKGEsYixoLGNbaF0sITAsZixnKX1lbHNlIGlmKHZvaWQgMCE9PWQmJihlPSEwLHIuaXNGdW5jdGlvbihkKXx8KGc9ITApLGomJihnPyhiLmNhbGwoYSxkKSxiPW51bGwpOihqPWIsYj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIGouY2FsbChyKGEpLGMpfSkpLGIpKWZvcig7aDxpO2grKyliKGFbaF0sYyxnP2Q6ZC5jYWxsKGFbaF0saCxiKGFbaF0sYykpKTtyZXR1cm4gZT9hOmo/Yi5jYWxsKGEpOmk/YihhWzBdLGMpOmZ9LFQ9ZnVuY3Rpb24oYSl7cmV0dXJuIDE9PT1hLm5vZGVUeXBlfHw5PT09YS5ub2RlVHlwZXx8ISthLm5vZGVUeXBlfTtmdW5jdGlvbiBVKCl7dGhpcy5leHBhbmRvPXIuZXhwYW5kbytVLnVpZCsrfVUudWlkPTEsVS5wcm90b3R5cGU9e2NhY2hlOmZ1bmN0aW9uKGEpe3ZhciBiPWFbdGhpcy5leHBhbmRvXTtyZXR1cm4gYnx8KGI9e30sVChhKSYmKGEubm9kZVR5cGU/YVt0aGlzLmV4cGFuZG9dPWI6T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsdGhpcy5leHBhbmRvLHt2YWx1ZTpiLGNvbmZpZ3VyYWJsZTohMH0pKSksYn0sc2V0OmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlPXRoaXMuY2FjaGUoYSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGIpZVtyLmNhbWVsQ2FzZShiKV09YztlbHNlIGZvcihkIGluIGIpZVtyLmNhbWVsQ2FzZShkKV09YltkXTtyZXR1cm4gZX0sZ2V0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHZvaWQgMD09PWI/dGhpcy5jYWNoZShhKTphW3RoaXMuZXhwYW5kb10mJmFbdGhpcy5leHBhbmRvXVtyLmNhbWVsQ2FzZShiKV19LGFjY2VzczpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIHZvaWQgMD09PWJ8fGImJlwic3RyaW5nXCI9PXR5cGVvZiBiJiZ2b2lkIDA9PT1jP3RoaXMuZ2V0KGEsYik6KHRoaXMuc2V0KGEsYixjKSx2b2lkIDAhPT1jP2M6Yil9LHJlbW92ZTpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9YVt0aGlzLmV4cGFuZG9dO2lmKHZvaWQgMCE9PWQpe2lmKHZvaWQgMCE9PWIpe3IuaXNBcnJheShiKT9iPWIubWFwKHIuY2FtZWxDYXNlKTooYj1yLmNhbWVsQ2FzZShiKSxiPWIgaW4gZD9bYl06Yi5tYXRjaChLKXx8W10pLGM9Yi5sZW5ndGg7d2hpbGUoYy0tKWRlbGV0ZSBkW2JbY11dfSh2b2lkIDA9PT1ifHxyLmlzRW1wdHlPYmplY3QoZCkpJiYoYS5ub2RlVHlwZT9hW3RoaXMuZXhwYW5kb109dm9pZCAwOmRlbGV0ZSBhW3RoaXMuZXhwYW5kb10pfX0saGFzRGF0YTpmdW5jdGlvbihhKXt2YXIgYj1hW3RoaXMuZXhwYW5kb107cmV0dXJuIHZvaWQgMCE9PWImJiFyLmlzRW1wdHlPYmplY3QoYil9fTt2YXIgVj1uZXcgVSxXPW5ldyBVLFg9L14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFk9L1tBLVpdL2c7ZnVuY3Rpb24gWihhKXtyZXR1cm5cInRydWVcIj09PWF8fFwiZmFsc2VcIiE9PWEmJihcIm51bGxcIj09PWE/bnVsbDphPT09K2ErXCJcIj8rYTpYLnRlc3QoYSk/SlNPTi5wYXJzZShhKTphKX1mdW5jdGlvbiAkKGEsYixjKXt2YXIgZDtpZih2b2lkIDA9PT1jJiYxPT09YS5ub2RlVHlwZSlpZihkPVwiZGF0YS1cIitiLnJlcGxhY2UoWSxcIi0kJlwiKS50b0xvd2VyQ2FzZSgpLGM9YS5nZXRBdHRyaWJ1dGUoZCksXCJzdHJpbmdcIj09dHlwZW9mIGMpe3RyeXtjPVooYyl9Y2F0Y2goZSl7fVcuc2V0KGEsYixjKX1lbHNlIGM9dm9pZCAwO3JldHVybiBjfXIuZXh0ZW5kKHtoYXNEYXRhOmZ1bmN0aW9uKGEpe3JldHVybiBXLmhhc0RhdGEoYSl8fFYuaGFzRGF0YShhKX0sZGF0YTpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIFcuYWNjZXNzKGEsYixjKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihhLGIpe1cucmVtb3ZlKGEsYil9LF9kYXRhOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gVi5hY2Nlc3MoYSxiLGMpfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihhLGIpe1YucmVtb3ZlKGEsYil9fSksci5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGUsZj10aGlzWzBdLGc9ZiYmZi5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PWEpe2lmKHRoaXMubGVuZ3RoJiYoZT1XLmdldChmKSwxPT09Zi5ub2RlVHlwZSYmIVYuZ2V0KGYsXCJoYXNEYXRhQXR0cnNcIikpKXtjPWcubGVuZ3RoO3doaWxlKGMtLSlnW2NdJiYoZD1nW2NdLm5hbWUsMD09PWQuaW5kZXhPZihcImRhdGEtXCIpJiYoZD1yLmNhbWVsQ2FzZShkLnNsaWNlKDUpKSwkKGYsZCxlW2RdKSkpO1Yuc2V0KGYsXCJoYXNEYXRhQXR0cnNcIiwhMCl9cmV0dXJuIGV9cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGE/dGhpcy5lYWNoKGZ1bmN0aW9uKCl7Vy5zZXQodGhpcyxhKX0pOlModGhpcyxmdW5jdGlvbihiKXt2YXIgYztpZihmJiZ2b2lkIDA9PT1iKXtpZihjPVcuZ2V0KGYsYSksdm9pZCAwIT09YylyZXR1cm4gYztpZihjPSQoZixhKSx2b2lkIDAhPT1jKXJldHVybiBjfWVsc2UgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7Vy5zZXQodGhpcyxhLGIpfSl9LG51bGwsYixhcmd1bWVudHMubGVuZ3RoPjEsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1cucmVtb3ZlKHRoaXMsYSl9KX19KSxyLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkO2lmKGEpcmV0dXJuIGI9KGJ8fFwiZnhcIikrXCJxdWV1ZVwiLGQ9Vi5nZXQoYSxiKSxjJiYoIWR8fHIuaXNBcnJheShjKT9kPVYuYWNjZXNzKGEsYixyLm1ha2VBcnJheShjKSk6ZC5wdXNoKGMpKSxkfHxbXX0sZGVxdWV1ZTpmdW5jdGlvbihhLGIpe2I9Ynx8XCJmeFwiO3ZhciBjPXIucXVldWUoYSxiKSxkPWMubGVuZ3RoLGU9Yy5zaGlmdCgpLGY9ci5fcXVldWVIb29rcyhhLGIpLGc9ZnVuY3Rpb24oKXtyLmRlcXVldWUoYSxiKX07XCJpbnByb2dyZXNzXCI9PT1lJiYoZT1jLnNoaWZ0KCksZC0tKSxlJiYoXCJmeFwiPT09YiYmYy51bnNoaWZ0KFwiaW5wcm9ncmVzc1wiKSxkZWxldGUgZi5zdG9wLGUuY2FsbChhLGcsZikpLCFkJiZmJiZmLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oYSxiKXt2YXIgYz1iK1wicXVldWVIb29rc1wiO3JldHVybiBWLmdldChhLGMpfHxWLmFjY2VzcyhhLGMse2VtcHR5OnIuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCl7Vi5yZW1vdmUoYSxbYitcInF1ZXVlXCIsY10pfSl9KX19KSxyLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz0yO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBhJiYoYj1hLGE9XCJmeFwiLGMtLSksYXJndW1lbnRzLmxlbmd0aDxjP3IucXVldWUodGhpc1swXSxhKTp2b2lkIDA9PT1iP3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGM9ci5xdWV1ZSh0aGlzLGEsYik7ci5fcXVldWVIb29rcyh0aGlzLGEpLFwiZnhcIj09PWEmJlwiaW5wcm9ncmVzc1wiIT09Y1swXSYmci5kZXF1ZXVlKHRoaXMsYSl9KX0sZGVxdWV1ZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ci5kZXF1ZXVlKHRoaXMsYSl9KX0sY2xlYXJRdWV1ZTpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5xdWV1ZShhfHxcImZ4XCIsW10pfSxwcm9taXNlOmZ1bmN0aW9uKGEsYil7dmFyIGMsZD0xLGU9ci5EZWZlcnJlZCgpLGY9dGhpcyxnPXRoaXMubGVuZ3RoLGg9ZnVuY3Rpb24oKXstLWR8fGUucmVzb2x2ZVdpdGgoZixbZl0pfTtcInN0cmluZ1wiIT10eXBlb2YgYSYmKGI9YSxhPXZvaWQgMCksYT1hfHxcImZ4XCI7d2hpbGUoZy0tKWM9Vi5nZXQoZltnXSxhK1wicXVldWVIb29rc1wiKSxjJiZjLmVtcHR5JiYoZCsrLGMuZW1wdHkuYWRkKGgpKTtyZXR1cm4gaCgpLGUucHJvbWlzZShiKX19KTt2YXIgXz0vWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLy5zb3VyY2UsYWE9bmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIrXytcIikoW2EteiVdKikkXCIsXCJpXCIpLGJhPVtcIlRvcFwiLFwiUmlnaHRcIixcIkJvdHRvbVwiLFwiTGVmdFwiXSxjYT1mdW5jdGlvbihhLGIpe3JldHVybiBhPWJ8fGEsXCJub25lXCI9PT1hLnN0eWxlLmRpc3BsYXl8fFwiXCI9PT1hLnN0eWxlLmRpc3BsYXkmJnIuY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpJiZcIm5vbmVcIj09PXIuY3NzKGEsXCJkaXNwbGF5XCIpfSxkYT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmLGc9e307Zm9yKGYgaW4gYilnW2ZdPWEuc3R5bGVbZl0sYS5zdHlsZVtmXT1iW2ZdO2U9Yy5hcHBseShhLGR8fFtdKTtmb3IoZiBpbiBiKWEuc3R5bGVbZl09Z1tmXTtyZXR1cm4gZX07ZnVuY3Rpb24gZWEoYSxiLGMsZCl7dmFyIGUsZj0xLGc9MjAsaD1kP2Z1bmN0aW9uKCl7cmV0dXJuIGQuY3VyKCl9OmZ1bmN0aW9uKCl7cmV0dXJuIHIuY3NzKGEsYixcIlwiKX0saT1oKCksaj1jJiZjWzNdfHwoci5jc3NOdW1iZXJbYl0/XCJcIjpcInB4XCIpLGs9KHIuY3NzTnVtYmVyW2JdfHxcInB4XCIhPT1qJiYraSkmJmFhLmV4ZWMoci5jc3MoYSxiKSk7aWYoayYma1szXSE9PWope2o9anx8a1szXSxjPWN8fFtdLGs9K2l8fDE7ZG8gZj1mfHxcIi41XCIsay89ZixyLnN0eWxlKGEsYixrK2opO3doaWxlKGYhPT0oZj1oKCkvaSkmJjEhPT1mJiYtLWcpfXJldHVybiBjJiYoaz0ra3x8K2l8fDAsZT1jWzFdP2srKGNbMV0rMSkqY1syXTorY1syXSxkJiYoZC51bml0PWosZC5zdGFydD1rLGQuZW5kPWUpKSxlfXZhciBmYT17fTtmdW5jdGlvbiBnYShhKXt2YXIgYixjPWEub3duZXJEb2N1bWVudCxkPWEubm9kZU5hbWUsZT1mYVtkXTtyZXR1cm4gZT9lOihiPWMuYm9keS5hcHBlbmRDaGlsZChjLmNyZWF0ZUVsZW1lbnQoZCkpLGU9ci5jc3MoYixcImRpc3BsYXlcIiksYi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGIpLFwibm9uZVwiPT09ZSYmKGU9XCJibG9ja1wiKSxmYVtkXT1lLGUpfWZ1bmN0aW9uIGhhKGEsYil7Zm9yKHZhciBjLGQsZT1bXSxmPTAsZz1hLmxlbmd0aDtmPGc7ZisrKWQ9YVtmXSxkLnN0eWxlJiYoYz1kLnN0eWxlLmRpc3BsYXksYj8oXCJub25lXCI9PT1jJiYoZVtmXT1WLmdldChkLFwiZGlzcGxheVwiKXx8bnVsbCxlW2ZdfHwoZC5zdHlsZS5kaXNwbGF5PVwiXCIpKSxcIlwiPT09ZC5zdHlsZS5kaXNwbGF5JiZjYShkKSYmKGVbZl09Z2EoZCkpKTpcIm5vbmVcIiE9PWMmJihlW2ZdPVwibm9uZVwiLFYuc2V0KGQsXCJkaXNwbGF5XCIsYykpKTtmb3IoZj0wO2Y8ZztmKyspbnVsbCE9ZVtmXSYmKGFbZl0uc3R5bGUuZGlzcGxheT1lW2ZdKTtyZXR1cm4gYX1yLmZuLmV4dGVuZCh7c2hvdzpmdW5jdGlvbigpe3JldHVybiBoYSh0aGlzLCEwKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiBoYSh0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGEpe3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYT9hP3RoaXMuc2hvdygpOnRoaXMuaGlkZSgpOnRoaXMuZWFjaChmdW5jdGlvbigpe2NhKHRoaXMpP3IodGhpcykuc2hvdygpOnIodGhpcykuaGlkZSgpfSl9fSk7dmFyIGlhPS9eKD86Y2hlY2tib3h8cmFkaW8pJC9pLGphPS88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSxrYT0vXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLGxhPXtvcHRpb246WzEsXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsXCI8L3NlbGVjdD5cIl0sdGhlYWQ6WzEsXCI8dGFibGU+XCIsXCI8L3RhYmxlPlwiXSxjb2w6WzIsXCI8dGFibGU+PGNvbGdyb3VwPlwiLFwiPC9jb2xncm91cD48L3RhYmxlPlwiXSx0cjpbMixcIjx0YWJsZT48dGJvZHk+XCIsXCI8L3Rib2R5PjwvdGFibGU+XCJdLHRkOlszLFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIl0sX2RlZmF1bHQ6WzAsXCJcIixcIlwiXX07bGEub3B0Z3JvdXA9bGEub3B0aW9uLGxhLnRib2R5PWxhLnRmb290PWxhLmNvbGdyb3VwPWxhLmNhcHRpb249bGEudGhlYWQsbGEudGg9bGEudGQ7ZnVuY3Rpb24gbWEoYSxiKXt2YXIgYztyZXR1cm4gYz1cInVuZGVmaW5lZFwiIT10eXBlb2YgYS5nZXRFbGVtZW50c0J5VGFnTmFtZT9hLmdldEVsZW1lbnRzQnlUYWdOYW1lKGJ8fFwiKlwiKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgYS5xdWVyeVNlbGVjdG9yQWxsP2EucXVlcnlTZWxlY3RvckFsbChifHxcIipcIik6W10sdm9pZCAwPT09Ynx8YiYmci5ub2RlTmFtZShhLGIpP3IubWVyZ2UoW2FdLGMpOmN9ZnVuY3Rpb24gbmEoYSxiKXtmb3IodmFyIGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspVi5zZXQoYVtjXSxcImdsb2JhbEV2YWxcIiwhYnx8Vi5nZXQoYltjXSxcImdsb2JhbEV2YWxcIikpfXZhciBvYT0vPHwmIz9cXHcrOy87ZnVuY3Rpb24gcGEoYSxiLGMsZCxlKXtmb3IodmFyIGYsZyxoLGksaixrLGw9Yi5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksbT1bXSxuPTAsbz1hLmxlbmd0aDtuPG87bisrKWlmKGY9YVtuXSxmfHwwPT09ZilpZihcIm9iamVjdFwiPT09ci50eXBlKGYpKXIubWVyZ2UobSxmLm5vZGVUeXBlP1tmXTpmKTtlbHNlIGlmKG9hLnRlc3QoZikpe2c9Z3x8bC5hcHBlbmRDaGlsZChiLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLGg9KGphLmV4ZWMoZil8fFtcIlwiLFwiXCJdKVsxXS50b0xvd2VyQ2FzZSgpLGk9bGFbaF18fGxhLl9kZWZhdWx0LGcuaW5uZXJIVE1MPWlbMV0rci5odG1sUHJlZmlsdGVyKGYpK2lbMl0saz1pWzBdO3doaWxlKGstLSlnPWcubGFzdENoaWxkO3IubWVyZ2UobSxnLmNoaWxkTm9kZXMpLGc9bC5maXJzdENoaWxkLGcudGV4dENvbnRlbnQ9XCJcIn1lbHNlIG0ucHVzaChiLmNyZWF0ZVRleHROb2RlKGYpKTtsLnRleHRDb250ZW50PVwiXCIsbj0wO3doaWxlKGY9bVtuKytdKWlmKGQmJnIuaW5BcnJheShmLGQpPi0xKWUmJmUucHVzaChmKTtlbHNlIGlmKGo9ci5jb250YWlucyhmLm93bmVyRG9jdW1lbnQsZiksZz1tYShsLmFwcGVuZENoaWxkKGYpLFwic2NyaXB0XCIpLGomJm5hKGcpLGMpe2s9MDt3aGlsZShmPWdbaysrXSlrYS50ZXN0KGYudHlwZXx8XCJcIikmJmMucHVzaChmKX1yZXR1cm4gbH0hZnVuY3Rpb24oKXt2YXIgYT1kLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxiPWEuYXBwZW5kQ2hpbGQoZC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSxjPWQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO2Muc2V0QXR0cmlidXRlKFwidHlwZVwiLFwicmFkaW9cIiksYy5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpLGMuc2V0QXR0cmlidXRlKFwibmFtZVwiLFwidFwiKSxiLmFwcGVuZENoaWxkKGMpLG8uY2hlY2tDbG9uZT1iLmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxiLmlubmVySFRNTD1cIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIixvLm5vQ2xvbmVDaGVja2VkPSEhYi5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWV9KCk7dmFyIHFhPWQuZG9jdW1lbnRFbGVtZW50LHJhPS9ea2V5LyxzYT0vXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sdGE9L14oW14uXSopKD86XFwuKC4rKXwpLztmdW5jdGlvbiB1YSgpe3JldHVybiEwfWZ1bmN0aW9uIHZhKCl7cmV0dXJuITF9ZnVuY3Rpb24gd2EoKXt0cnl7cmV0dXJuIGQuYWN0aXZlRWxlbWVudH1jYXRjaChhKXt9fWZ1bmN0aW9uIHhhKGEsYixjLGQsZSxmKXt2YXIgZyxoO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBiKXtcInN0cmluZ1wiIT10eXBlb2YgYyYmKGQ9ZHx8YyxjPXZvaWQgMCk7Zm9yKGggaW4gYil4YShhLGgsYyxkLGJbaF0sZik7cmV0dXJuIGF9aWYobnVsbD09ZCYmbnVsbD09ZT8oZT1jLGQ9Yz12b2lkIDApOm51bGw9PWUmJihcInN0cmluZ1wiPT10eXBlb2YgYz8oZT1kLGQ9dm9pZCAwKTooZT1kLGQ9YyxjPXZvaWQgMCkpLGU9PT0hMSllPXZhO2Vsc2UgaWYoIWUpcmV0dXJuIGE7cmV0dXJuIDE9PT1mJiYoZz1lLGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHIoKS5vZmYoYSksZy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUuZ3VpZD1nLmd1aWR8fChnLmd1aWQ9ci5ndWlkKyspKSxhLmVhY2goZnVuY3Rpb24oKXtyLmV2ZW50LmFkZCh0aGlzLGIsZSxkLGMpfSl9ci5ldmVudD17Z2xvYmFsOnt9LGFkZDpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmLGcsaCxpLGosayxsLG0sbixvLHAscT1WLmdldChhKTtpZihxKXtjLmhhbmRsZXImJihmPWMsYz1mLmhhbmRsZXIsZT1mLnNlbGVjdG9yKSxlJiZyLmZpbmQubWF0Y2hlc1NlbGVjdG9yKHFhLGUpLGMuZ3VpZHx8KGMuZ3VpZD1yLmd1aWQrKyksKGk9cS5ldmVudHMpfHwoaT1xLmV2ZW50cz17fSksKGc9cS5oYW5kbGUpfHwoZz1xLmhhbmRsZT1mdW5jdGlvbihiKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgciYmci5ldmVudC50cmlnZ2VyZWQhPT1iLnR5cGU/ci5ldmVudC5kaXNwYXRjaC5hcHBseShhLGFyZ3VtZW50cyk6dm9pZCAwfSksYj0oYnx8XCJcIikubWF0Y2goSyl8fFtcIlwiXSxqPWIubGVuZ3RoO3doaWxlKGotLSloPXRhLmV4ZWMoYltqXSl8fFtdLG49cD1oWzFdLG89KGhbMl18fFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksbiYmKGw9ci5ldmVudC5zcGVjaWFsW25dfHx7fSxuPShlP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxuLGw9ci5ldmVudC5zcGVjaWFsW25dfHx7fSxrPXIuZXh0ZW5kKHt0eXBlOm4sb3JpZ1R5cGU6cCxkYXRhOmQsaGFuZGxlcjpjLGd1aWQ6Yy5ndWlkLHNlbGVjdG9yOmUsbmVlZHNDb250ZXh0OmUmJnIuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChlKSxuYW1lc3BhY2U6by5qb2luKFwiLlwiKX0sZiksKG09aVtuXSl8fChtPWlbbl09W10sbS5kZWxlZ2F0ZUNvdW50PTAsbC5zZXR1cCYmbC5zZXR1cC5jYWxsKGEsZCxvLGcpIT09ITF8fGEuYWRkRXZlbnRMaXN0ZW5lciYmYS5hZGRFdmVudExpc3RlbmVyKG4sZykpLGwuYWRkJiYobC5hZGQuY2FsbChhLGspLGsuaGFuZGxlci5ndWlkfHwoay5oYW5kbGVyLmd1aWQ9Yy5ndWlkKSksZT9tLnNwbGljZShtLmRlbGVnYXRlQ291bnQrKywwLGspOm0ucHVzaChrKSxyLmV2ZW50Lmdsb2JhbFtuXT0hMCl9fSxyZW1vdmU6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZixnLGgsaSxqLGssbCxtLG4sbyxwLHE9Vi5oYXNEYXRhKGEpJiZWLmdldChhKTtpZihxJiYoaT1xLmV2ZW50cykpe2I9KGJ8fFwiXCIpLm1hdGNoKEspfHxbXCJcIl0saj1iLmxlbmd0aDt3aGlsZShqLS0paWYoaD10YS5leGVjKGJbal0pfHxbXSxuPXA9aFsxXSxvPShoWzJdfHxcIlwiKS5zcGxpdChcIi5cIikuc29ydCgpLG4pe2w9ci5ldmVudC5zcGVjaWFsW25dfHx7fSxuPShkP2wuZGVsZWdhdGVUeXBlOmwuYmluZFR5cGUpfHxuLG09aVtuXXx8W10saD1oWzJdJiZuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrby5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIiksZz1mPW0ubGVuZ3RoO3doaWxlKGYtLSlrPW1bZl0sIWUmJnAhPT1rLm9yaWdUeXBlfHxjJiZjLmd1aWQhPT1rLmd1aWR8fGgmJiFoLnRlc3Qoay5uYW1lc3BhY2UpfHxkJiZkIT09ay5zZWxlY3RvciYmKFwiKipcIiE9PWR8fCFrLnNlbGVjdG9yKXx8KG0uc3BsaWNlKGYsMSksay5zZWxlY3RvciYmbS5kZWxlZ2F0ZUNvdW50LS0sbC5yZW1vdmUmJmwucmVtb3ZlLmNhbGwoYSxrKSk7ZyYmIW0ubGVuZ3RoJiYobC50ZWFyZG93biYmbC50ZWFyZG93bi5jYWxsKGEsbyxxLmhhbmRsZSkhPT0hMXx8ci5yZW1vdmVFdmVudChhLG4scS5oYW5kbGUpLGRlbGV0ZSBpW25dKX1lbHNlIGZvcihuIGluIGkpci5ldmVudC5yZW1vdmUoYSxuK2Jbal0sYyxkLCEwKTtyLmlzRW1wdHlPYmplY3QoaSkmJlYucmVtb3ZlKGEsXCJoYW5kbGUgZXZlbnRzXCIpfX0sZGlzcGF0Y2g6ZnVuY3Rpb24oYSl7dmFyIGI9ci5ldmVudC5maXgoYSksYyxkLGUsZixnLGgsaT1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCksaj0oVi5nZXQodGhpcyxcImV2ZW50c1wiKXx8e30pW2IudHlwZV18fFtdLGs9ci5ldmVudC5zcGVjaWFsW2IudHlwZV18fHt9O2ZvcihpWzBdPWIsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspaVtjXT1hcmd1bWVudHNbY107aWYoYi5kZWxlZ2F0ZVRhcmdldD10aGlzLCFrLnByZURpc3BhdGNofHxrLnByZURpc3BhdGNoLmNhbGwodGhpcyxiKSE9PSExKXtoPXIuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLGIsaiksYz0wO3doaWxlKChmPWhbYysrXSkmJiFiLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe2IuY3VycmVudFRhcmdldD1mLmVsZW0sZD0wO3doaWxlKChnPWYuaGFuZGxlcnNbZCsrXSkmJiFiLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpYi5ybmFtZXNwYWNlJiYhYi5ybmFtZXNwYWNlLnRlc3QoZy5uYW1lc3BhY2UpfHwoYi5oYW5kbGVPYmo9ZyxiLmRhdGE9Zy5kYXRhLGU9KChyLmV2ZW50LnNwZWNpYWxbZy5vcmlnVHlwZV18fHt9KS5oYW5kbGV8fGcuaGFuZGxlcikuYXBwbHkoZi5lbGVtLGkpLHZvaWQgMCE9PWUmJihiLnJlc3VsdD1lKT09PSExJiYoYi5wcmV2ZW50RGVmYXVsdCgpLGIuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gay5wb3N0RGlzcGF0Y2gmJmsucG9zdERpc3BhdGNoLmNhbGwodGhpcyxiKSxiLnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZyxoPVtdLGk9Yi5kZWxlZ2F0ZUNvdW50LGo9YS50YXJnZXQ7aWYoaSYmai5ub2RlVHlwZSYmIShcImNsaWNrXCI9PT1hLnR5cGUmJmEuYnV0dG9uPj0xKSlmb3IoO2ohPT10aGlzO2o9ai5wYXJlbnROb2RlfHx0aGlzKWlmKDE9PT1qLm5vZGVUeXBlJiYoXCJjbGlja1wiIT09YS50eXBlfHxqLmRpc2FibGVkIT09ITApKXtmb3IoZj1bXSxnPXt9LGM9MDtjPGk7YysrKWQ9YltjXSxlPWQuc2VsZWN0b3IrXCIgXCIsdm9pZCAwPT09Z1tlXSYmKGdbZV09ZC5uZWVkc0NvbnRleHQ/cihlLHRoaXMpLmluZGV4KGopPi0xOnIuZmluZChlLHRoaXMsbnVsbCxbal0pLmxlbmd0aCksZ1tlXSYmZi5wdXNoKGQpO2YubGVuZ3RoJiZoLnB1c2goe2VsZW06aixoYW5kbGVyczpmfSl9cmV0dXJuIGo9dGhpcyxpPGIubGVuZ3RoJiZoLnB1c2goe2VsZW06aixoYW5kbGVyczpiLnNsaWNlKGkpfSksaH0sYWRkUHJvcDpmdW5jdGlvbihhLGIpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLkV2ZW50LnByb3RvdHlwZSxhLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ci5pc0Z1bmN0aW9uKGIpP2Z1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiBiKHRoaXMub3JpZ2luYWxFdmVudCl9OmZ1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbYV19LHNldDpmdW5jdGlvbihiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxhLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMCx2YWx1ZTpifSl9fSl9LGZpeDpmdW5jdGlvbihhKXtyZXR1cm4gYVtyLmV4cGFuZG9dP2E6bmV3IHIuRXZlbnQoYSl9LHNwZWNpYWw6e2xvYWQ6e25vQnViYmxlOiEwfSxmb2N1czp7dHJpZ2dlcjpmdW5jdGlvbigpe2lmKHRoaXMhPT13YSgpJiZ0aGlzLmZvY3VzKXJldHVybiB0aGlzLmZvY3VzKCksITF9LGRlbGVnYXRlVHlwZTpcImZvY3VzaW5cIn0sYmx1cjp7dHJpZ2dlcjpmdW5jdGlvbigpe2lmKHRoaXM9PT13YSgpJiZ0aGlzLmJsdXIpcmV0dXJuIHRoaXMuYmx1cigpLCExfSxkZWxlZ2F0ZVR5cGU6XCJmb2N1c291dFwifSxjbGljazp7dHJpZ2dlcjpmdW5jdGlvbigpe2lmKFwiY2hlY2tib3hcIj09PXRoaXMudHlwZSYmdGhpcy5jbGljayYmci5ub2RlTmFtZSh0aGlzLFwiaW5wdXRcIikpcmV0dXJuIHRoaXMuY2xpY2soKSwhMX0sX2RlZmF1bHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHIubm9kZU5hbWUoYS50YXJnZXQsXCJhXCIpfX0sYmVmb3JldW5sb2FkOntwb3N0RGlzcGF0Y2g6ZnVuY3Rpb24oYSl7dm9pZCAwIT09YS5yZXN1bHQmJmEub3JpZ2luYWxFdmVudCYmKGEub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZT1hLnJlc3VsdCl9fX19LHIucmVtb3ZlRXZlbnQ9ZnVuY3Rpb24oYSxiLGMpe2EucmVtb3ZlRXZlbnRMaXN0ZW5lciYmYS5yZW1vdmVFdmVudExpc3RlbmVyKGIsYyl9LHIuRXZlbnQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIHIuRXZlbnQ/KGEmJmEudHlwZT8odGhpcy5vcmlnaW5hbEV2ZW50PWEsdGhpcy50eXBlPWEudHlwZSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1hLmRlZmF1bHRQcmV2ZW50ZWR8fHZvaWQgMD09PWEuZGVmYXVsdFByZXZlbnRlZCYmYS5yZXR1cm5WYWx1ZT09PSExP3VhOnZhLHRoaXMudGFyZ2V0PWEudGFyZ2V0JiYzPT09YS50YXJnZXQubm9kZVR5cGU/YS50YXJnZXQucGFyZW50Tm9kZTphLnRhcmdldCx0aGlzLmN1cnJlbnRUYXJnZXQ9YS5jdXJyZW50VGFyZ2V0LHRoaXMucmVsYXRlZFRhcmdldD1hLnJlbGF0ZWRUYXJnZXQpOnRoaXMudHlwZT1hLGImJnIuZXh0ZW5kKHRoaXMsYiksdGhpcy50aW1lU3RhbXA9YSYmYS50aW1lU3RhbXB8fHIubm93KCksdm9pZCh0aGlzW3IuZXhwYW5kb109ITApKTpuZXcgci5FdmVudChhLGIpfSxyLkV2ZW50LnByb3RvdHlwZT17Y29uc3RydWN0b3I6ci5FdmVudCxpc0RlZmF1bHRQcmV2ZW50ZWQ6dmEsaXNQcm9wYWdhdGlvblN0b3BwZWQ6dmEsaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6dmEsaXNTaW11bGF0ZWQ6ITEscHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9dWEsYSYmIXRoaXMuaXNTaW11bGF0ZWQmJmEucHJldmVudERlZmF1bHQoKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dWEsYSYmIXRoaXMuaXNTaW11bGF0ZWQmJmEuc3RvcFByb3BhZ2F0aW9uKCl9LHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkPXVhLGEmJiF0aGlzLmlzU2ltdWxhdGVkJiZhLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHRoaXMuc3RvcFByb3BhZ2F0aW9uKCl9fSxyLmVhY2goe2FsdEtleTohMCxidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY2hhbmdlZFRvdWNoZXM6ITAsY3RybEtleTohMCxkZXRhaWw6ITAsZXZlbnRQaGFzZTohMCxtZXRhS2V5OiEwLHBhZ2VYOiEwLHBhZ2VZOiEwLHNoaWZ0S2V5OiEwLHZpZXc6ITAsXCJjaGFyXCI6ITAsY2hhckNvZGU6ITAsa2V5OiEwLGtleUNvZGU6ITAsYnV0dG9uOiEwLGJ1dHRvbnM6ITAsY2xpZW50WDohMCxjbGllbnRZOiEwLG9mZnNldFg6ITAsb2Zmc2V0WTohMCxwb2ludGVySWQ6ITAscG9pbnRlclR5cGU6ITAsc2NyZWVuWDohMCxzY3JlZW5ZOiEwLHRhcmdldFRvdWNoZXM6ITAsdG9FbGVtZW50OiEwLHRvdWNoZXM6ITAsd2hpY2g6ZnVuY3Rpb24oYSl7dmFyIGI9YS5idXR0b247cmV0dXJuIG51bGw9PWEud2hpY2gmJnJhLnRlc3QoYS50eXBlKT9udWxsIT1hLmNoYXJDb2RlP2EuY2hhckNvZGU6YS5rZXlDb2RlOiFhLndoaWNoJiZ2b2lkIDAhPT1iJiZzYS50ZXN0KGEudHlwZSk/MSZiPzE6MiZiPzM6NCZiPzI6MDphLndoaWNofX0sci5ldmVudC5hZGRQcm9wKSxyLmVhY2goe21vdXNlZW50ZXI6XCJtb3VzZW92ZXJcIixtb3VzZWxlYXZlOlwibW91c2VvdXRcIixwb2ludGVyZW50ZXI6XCJwb2ludGVyb3ZlclwiLHBvaW50ZXJsZWF2ZTpcInBvaW50ZXJvdXRcIn0sZnVuY3Rpb24oYSxiKXtyLmV2ZW50LnNwZWNpYWxbYV09e2RlbGVnYXRlVHlwZTpiLGJpbmRUeXBlOmIsaGFuZGxlOmZ1bmN0aW9uKGEpe3ZhciBjLGQ9dGhpcyxlPWEucmVsYXRlZFRhcmdldCxmPWEuaGFuZGxlT2JqO3JldHVybiBlJiYoZT09PWR8fHIuY29udGFpbnMoZCxlKSl8fChhLnR5cGU9Zi5vcmlnVHlwZSxjPWYuaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksYS50eXBlPWIpLGN9fX0pLHIuZm4uZXh0ZW5kKHtvbjpmdW5jdGlvbihhLGIsYyxkKXtyZXR1cm4geGEodGhpcyxhLGIsYyxkKX0sb25lOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB4YSh0aGlzLGEsYixjLGQsMSl9LG9mZjpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZTtpZihhJiZhLnByZXZlbnREZWZhdWx0JiZhLmhhbmRsZU9iailyZXR1cm4gZD1hLmhhbmRsZU9iaixyKGEuZGVsZWdhdGVUYXJnZXQpLm9mZihkLm5hbWVzcGFjZT9kLm9yaWdUeXBlK1wiLlwiK2QubmFtZXNwYWNlOmQub3JpZ1R5cGUsZC5zZWxlY3RvcixkLmhhbmRsZXIpLHRoaXM7aWYoXCJvYmplY3RcIj09dHlwZW9mIGEpe2ZvcihlIGluIGEpdGhpcy5vZmYoZSxiLGFbZV0pO3JldHVybiB0aGlzfXJldHVybiBiIT09ITEmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGJ8fChjPWIsYj12b2lkIDApLGM9PT0hMSYmKGM9dmEpLHRoaXMuZWFjaChmdW5jdGlvbigpe3IuZXZlbnQucmVtb3ZlKHRoaXMsYSxjLGIpfSl9fSk7dmFyIHlhPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLHphPS88c2NyaXB0fDxzdHlsZXw8bGluay9pLEFhPS9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksQmE9L150cnVlXFwvKC4qKS8sQ2E9L15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO2Z1bmN0aW9uIERhKGEsYil7cmV0dXJuIHIubm9kZU5hbWUoYSxcInRhYmxlXCIpJiZyLm5vZGVOYW1lKDExIT09Yi5ub2RlVHlwZT9iOmIuZmlyc3RDaGlsZCxcInRyXCIpP2EuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0Ym9keVwiKVswXXx8YTphfWZ1bmN0aW9uIEVhKGEpe3JldHVybiBhLnR5cGU9KG51bGwhPT1hLmdldEF0dHJpYnV0ZShcInR5cGVcIikpK1wiL1wiK2EudHlwZSxhfWZ1bmN0aW9uIEZhKGEpe3ZhciBiPUJhLmV4ZWMoYS50eXBlKTtyZXR1cm4gYj9hLnR5cGU9YlsxXTphLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIiksYX1mdW5jdGlvbiBHYShhLGIpe3ZhciBjLGQsZSxmLGcsaCxpLGo7aWYoMT09PWIubm9kZVR5cGUpe2lmKFYuaGFzRGF0YShhKSYmKGY9Vi5hY2Nlc3MoYSksZz1WLnNldChiLGYpLGo9Zi5ldmVudHMpKXtkZWxldGUgZy5oYW5kbGUsZy5ldmVudHM9e307Zm9yKGUgaW4gailmb3IoYz0wLGQ9altlXS5sZW5ndGg7YzxkO2MrKylyLmV2ZW50LmFkZChiLGUsaltlXVtjXSl9Vy5oYXNEYXRhKGEpJiYoaD1XLmFjY2VzcyhhKSxpPXIuZXh0ZW5kKHt9LGgpLFcuc2V0KGIsaSkpfX1mdW5jdGlvbiBIYShhLGIpe3ZhciBjPWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcImlucHV0XCI9PT1jJiZpYS50ZXN0KGEudHlwZSk/Yi5jaGVja2VkPWEuY2hlY2tlZDpcImlucHV0XCIhPT1jJiZcInRleHRhcmVhXCIhPT1jfHwoYi5kZWZhdWx0VmFsdWU9YS5kZWZhdWx0VmFsdWUpfWZ1bmN0aW9uIElhKGEsYixjLGQpe2I9Zy5hcHBseShbXSxiKTt2YXIgZSxmLGgsaSxqLGssbD0wLG09YS5sZW5ndGgsbj1tLTEscT1iWzBdLHM9ci5pc0Z1bmN0aW9uKHEpO2lmKHN8fG0+MSYmXCJzdHJpbmdcIj09dHlwZW9mIHEmJiFvLmNoZWNrQ2xvbmUmJkFhLnRlc3QocSkpcmV0dXJuIGEuZWFjaChmdW5jdGlvbihlKXt2YXIgZj1hLmVxKGUpO3MmJihiWzBdPXEuY2FsbCh0aGlzLGUsZi5odG1sKCkpKSxJYShmLGIsYyxkKX0pO2lmKG0mJihlPXBhKGIsYVswXS5vd25lckRvY3VtZW50LCExLGEsZCksZj1lLmZpcnN0Q2hpbGQsMT09PWUuY2hpbGROb2Rlcy5sZW5ndGgmJihlPWYpLGZ8fGQpKXtmb3IoaD1yLm1hcChtYShlLFwic2NyaXB0XCIpLEVhKSxpPWgubGVuZ3RoO2w8bTtsKyspaj1lLGwhPT1uJiYoaj1yLmNsb25lKGosITAsITApLGkmJnIubWVyZ2UoaCxtYShqLFwic2NyaXB0XCIpKSksYy5jYWxsKGFbbF0saixsKTtpZihpKWZvcihrPWhbaC5sZW5ndGgtMV0ub3duZXJEb2N1bWVudCxyLm1hcChoLEZhKSxsPTA7bDxpO2wrKylqPWhbbF0sa2EudGVzdChqLnR5cGV8fFwiXCIpJiYhVi5hY2Nlc3MoaixcImdsb2JhbEV2YWxcIikmJnIuY29udGFpbnMoayxqKSYmKGouc3JjP3IuX2V2YWxVcmwmJnIuX2V2YWxVcmwoai5zcmMpOnAoai50ZXh0Q29udGVudC5yZXBsYWNlKENhLFwiXCIpLGspKX1yZXR1cm4gYX1mdW5jdGlvbiBKYShhLGIsYyl7Zm9yKHZhciBkLGU9Yj9yLmZpbHRlcihiLGEpOmEsZj0wO251bGwhPShkPWVbZl0pO2YrKyljfHwxIT09ZC5ub2RlVHlwZXx8ci5jbGVhbkRhdGEobWEoZCkpLGQucGFyZW50Tm9kZSYmKGMmJnIuY29udGFpbnMoZC5vd25lckRvY3VtZW50LGQpJiZuYShtYShkLFwic2NyaXB0XCIpKSxkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZCkpO3JldHVybiBhfXIuZXh0ZW5kKHtodG1sUHJlZmlsdGVyOmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoeWEsXCI8JDE+PC8kMj5cIil9LGNsb25lOmZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGYsZyxoPWEuY2xvbmVOb2RlKCEwKSxpPXIuY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpO2lmKCEoby5ub0Nsb25lQ2hlY2tlZHx8MSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZXx8ci5pc1hNTERvYyhhKSkpZm9yKGc9bWEoaCksZj1tYShhKSxkPTAsZT1mLmxlbmd0aDtkPGU7ZCsrKUhhKGZbZF0sZ1tkXSk7aWYoYilpZihjKWZvcihmPWZ8fG1hKGEpLGc9Z3x8bWEoaCksZD0wLGU9Zi5sZW5ndGg7ZDxlO2QrKylHYShmW2RdLGdbZF0pO2Vsc2UgR2EoYSxoKTtyZXR1cm4gZz1tYShoLFwic2NyaXB0XCIpLGcubGVuZ3RoPjAmJm5hKGcsIWkmJm1hKGEsXCJzY3JpcHRcIikpLGh9LGNsZWFuRGF0YTpmdW5jdGlvbihhKXtmb3IodmFyIGIsYyxkLGU9ci5ldmVudC5zcGVjaWFsLGY9MDt2b2lkIDAhPT0oYz1hW2ZdKTtmKyspaWYoVChjKSl7aWYoYj1jW1YuZXhwYW5kb10pe2lmKGIuZXZlbnRzKWZvcihkIGluIGIuZXZlbnRzKWVbZF0/ci5ldmVudC5yZW1vdmUoYyxkKTpyLnJlbW92ZUV2ZW50KGMsZCxiLmhhbmRsZSk7Y1tWLmV4cGFuZG9dPXZvaWQgMH1jW1cuZXhwYW5kb10mJihjW1cuZXhwYW5kb109dm9pZCAwKX19fSksci5mbi5leHRlbmQoe2RldGFjaDpmdW5jdGlvbihhKXtyZXR1cm4gSmEodGhpcyxhLCEwKX0scmVtb3ZlOmZ1bmN0aW9uKGEpe3JldHVybiBKYSh0aGlzLGEpfSx0ZXh0OmZ1bmN0aW9uKGEpe3JldHVybiBTKHRoaXMsZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWE/ci50ZXh0KHRoaXMpOnRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCl7MSE9PXRoaXMubm9kZVR5cGUmJjExIT09dGhpcy5ub2RlVHlwZSYmOSE9PXRoaXMubm9kZVR5cGV8fCh0aGlzLnRleHRDb250ZW50PWEpfSl9LG51bGwsYSxhcmd1bWVudHMubGVuZ3RoKX0sYXBwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIElhKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGEpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgYj1EYSh0aGlzLGEpO2IuYXBwZW5kQ2hpbGQoYSl9fSl9LHByZXBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gSWEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciBiPURhKHRoaXMsYSk7Yi5pbnNlcnRCZWZvcmUoYSxiLmZpcnN0Q2hpbGQpfX0pfSxiZWZvcmU6ZnVuY3Rpb24oKXtyZXR1cm4gSWEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsdGhpcyl9KX0sYWZ0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gSWEodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oYSl7dGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsdGhpcy5uZXh0U2libGluZyl9KX0sZW1wdHk6ZnVuY3Rpb24oKXtmb3IodmFyIGEsYj0wO251bGwhPShhPXRoaXNbYl0pO2IrKykxPT09YS5ub2RlVHlwZSYmKHIuY2xlYW5EYXRhKG1hKGEsITEpKSxhLnRleHRDb250ZW50PVwiXCIpO3JldHVybiB0aGlzfSxjbG9uZTpmdW5jdGlvbihhLGIpe3JldHVybiBhPW51bGwhPWEmJmEsYj1udWxsPT1iP2E6Yix0aGlzLm1hcChmdW5jdGlvbigpe3JldHVybiByLmNsb25lKHRoaXMsYSxiKX0pfSxodG1sOmZ1bmN0aW9uKGEpe3JldHVybiBTKHRoaXMsZnVuY3Rpb24oYSl7dmFyIGI9dGhpc1swXXx8e30sYz0wLGQ9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09YSYmMT09PWIubm9kZVR5cGUpcmV0dXJuIGIuaW5uZXJIVE1MO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBhJiYhemEudGVzdChhKSYmIWxhWyhqYS5leGVjKGEpfHxbXCJcIixcIlwiXSlbMV0udG9Mb3dlckNhc2UoKV0pe2E9ci5odG1sUHJlZmlsdGVyKGEpO3RyeXtmb3IoO2M8ZDtjKyspYj10aGlzW2NdfHx7fSwxPT09Yi5ub2RlVHlwZSYmKHIuY2xlYW5EYXRhKG1hKGIsITEpKSxiLmlubmVySFRNTD1hKTtiPTB9Y2F0Y2goZSl7fX1iJiZ0aGlzLmVtcHR5KCkuYXBwZW5kKGEpfSxudWxsLGEsYXJndW1lbnRzLmxlbmd0aCl9LHJlcGxhY2VXaXRoOmZ1bmN0aW9uKCl7dmFyIGE9W107cmV0dXJuIElhKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMucGFyZW50Tm9kZTtyLmluQXJyYXkodGhpcyxhKTwwJiYoci5jbGVhbkRhdGEobWEodGhpcykpLGMmJmMucmVwbGFjZUNoaWxkKGIsdGhpcykpfSxhKX19KSxyLmVhY2goe2FwcGVuZFRvOlwiYXBwZW5kXCIscHJlcGVuZFRvOlwicHJlcGVuZFwiLGluc2VydEJlZm9yZTpcImJlZm9yZVwiLGluc2VydEFmdGVyOlwiYWZ0ZXJcIixyZXBsYWNlQWxsOlwicmVwbGFjZVdpdGhcIn0sZnVuY3Rpb24oYSxiKXtyLmZuW2FdPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYyxkPVtdLGU9cihhKSxmPWUubGVuZ3RoLTEsZz0wO2c8PWY7ZysrKWM9Zz09PWY/dGhpczp0aGlzLmNsb25lKCEwKSxyKGVbZ10pW2JdKGMpLGguYXBwbHkoZCxjLmdldCgpKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soZCl9fSk7dmFyIEthPS9ebWFyZ2luLyxMYT1uZXcgUmVnRXhwKFwiXihcIitfK1wiKSg/IXB4KVthLXolXSskXCIsXCJpXCIpLE1hPWZ1bmN0aW9uKGIpe3ZhciBjPWIub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztyZXR1cm4gYyYmYy5vcGVuZXJ8fChjPWEpLGMuZ2V0Q29tcHV0ZWRTdHlsZShiKX07IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYigpe2lmKGkpe2kuc3R5bGUuY3NzVGV4dD1cImJveC1zaXppbmc6Ym9yZGVyLWJveDtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO21hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7dG9wOjElO3dpZHRoOjUwJVwiLGkuaW5uZXJIVE1MPVwiXCIscWEuYXBwZW5kQ2hpbGQoaCk7dmFyIGI9YS5nZXRDb21wdXRlZFN0eWxlKGkpO2M9XCIxJVwiIT09Yi50b3AsZz1cIjJweFwiPT09Yi5tYXJnaW5MZWZ0LGU9XCI0cHhcIj09PWIud2lkdGgsaS5zdHlsZS5tYXJnaW5SaWdodD1cIjUwJVwiLGY9XCI0cHhcIj09PWIubWFyZ2luUmlnaHQscWEucmVtb3ZlQ2hpbGQoaCksaT1udWxsfX12YXIgYyxlLGYsZyxoPWQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxpPWQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtpLnN0eWxlJiYoaS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD1cImNvbnRlbnQtYm94XCIsaS5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiXCIsby5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09aS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxoLnN0eWxlLmNzc1RleHQ9XCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O3BhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiLGguYXBwZW5kQ2hpbGQoaSksci5leHRlbmQobyx7cGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBiKCksY30sYm94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gYigpLGV9LHBpeGVsTWFyZ2luUmlnaHQ6ZnVuY3Rpb24oKXtyZXR1cm4gYigpLGZ9LHJlbGlhYmxlTWFyZ2luTGVmdDpmdW5jdGlvbigpe3JldHVybiBiKCksZ319KSl9KCk7ZnVuY3Rpb24gTmEoYSxiLGMpe3ZhciBkLGUsZixnLGg9YS5zdHlsZTtyZXR1cm4gYz1jfHxNYShhKSxjJiYoZz1jLmdldFByb3BlcnR5VmFsdWUoYil8fGNbYl0sXCJcIiE9PWd8fHIuY29udGFpbnMoYS5vd25lckRvY3VtZW50LGEpfHwoZz1yLnN0eWxlKGEsYikpLCFvLnBpeGVsTWFyZ2luUmlnaHQoKSYmTGEudGVzdChnKSYmS2EudGVzdChiKSYmKGQ9aC53aWR0aCxlPWgubWluV2lkdGgsZj1oLm1heFdpZHRoLGgubWluV2lkdGg9aC5tYXhXaWR0aD1oLndpZHRoPWcsZz1jLndpZHRoLGgud2lkdGg9ZCxoLm1pbldpZHRoPWUsaC5tYXhXaWR0aD1mKSksdm9pZCAwIT09Zz9nK1wiXCI6Z31mdW5jdGlvbiBPYShhLGIpe3JldHVybntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYSgpP3ZvaWQgZGVsZXRlIHRoaXMuZ2V0Oih0aGlzLmdldD1iKS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fX12YXIgUGE9L14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFFhPXtwb3NpdGlvbjpcImFic29sdXRlXCIsdmlzaWJpbGl0eTpcImhpZGRlblwiLGRpc3BsYXk6XCJibG9ja1wifSxSYT17bGV0dGVyU3BhY2luZzpcIjBcIixmb250V2VpZ2h0OlwiNDAwXCJ9LFNhPVtcIldlYmtpdFwiLFwiTW96XCIsXCJtc1wiXSxUYT1kLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGU7ZnVuY3Rpb24gVWEoYSl7aWYoYSBpbiBUYSlyZXR1cm4gYTt2YXIgYj1hWzBdLnRvVXBwZXJDYXNlKCkrYS5zbGljZSgxKSxjPVNhLmxlbmd0aDt3aGlsZShjLS0paWYoYT1TYVtjXStiLGEgaW4gVGEpcmV0dXJuIGF9ZnVuY3Rpb24gVmEoYSxiLGMpe3ZhciBkPWFhLmV4ZWMoYik7cmV0dXJuIGQ/TWF0aC5tYXgoMCxkWzJdLShjfHwwKSkrKGRbM118fFwicHhcIik6Yn1mdW5jdGlvbiBXYShhLGIsYyxkLGUpe3ZhciBmLGc9MDtmb3IoZj1jPT09KGQ/XCJib3JkZXJcIjpcImNvbnRlbnRcIik/NDpcIndpZHRoXCI9PT1iPzE6MDtmPDQ7Zis9MilcIm1hcmdpblwiPT09YyYmKGcrPXIuY3NzKGEsYytiYVtmXSwhMCxlKSksZD8oXCJjb250ZW50XCI9PT1jJiYoZy09ci5jc3MoYSxcInBhZGRpbmdcIitiYVtmXSwhMCxlKSksXCJtYXJnaW5cIiE9PWMmJihnLT1yLmNzcyhhLFwiYm9yZGVyXCIrYmFbZl0rXCJXaWR0aFwiLCEwLGUpKSk6KGcrPXIuY3NzKGEsXCJwYWRkaW5nXCIrYmFbZl0sITAsZSksXCJwYWRkaW5nXCIhPT1jJiYoZys9ci5jc3MoYSxcImJvcmRlclwiK2JhW2ZdK1wiV2lkdGhcIiwhMCxlKSkpO3JldHVybiBnfWZ1bmN0aW9uIFhhKGEsYixjKXt2YXIgZCxlPSEwLGY9TWEoYSksZz1cImJvcmRlci1ib3hcIj09PXIuY3NzKGEsXCJib3hTaXppbmdcIiwhMSxmKTtpZihhLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiYoZD1hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2JdKSxkPD0wfHxudWxsPT1kKXtpZihkPU5hKGEsYixmKSwoZDwwfHxudWxsPT1kKSYmKGQ9YS5zdHlsZVtiXSksTGEudGVzdChkKSlyZXR1cm4gZDtlPWcmJihvLmJveFNpemluZ1JlbGlhYmxlKCl8fGQ9PT1hLnN0eWxlW2JdKSxkPXBhcnNlRmxvYXQoZCl8fDB9cmV0dXJuIGQrV2EoYSxiLGN8fChnP1wiYm9yZGVyXCI6XCJjb250ZW50XCIpLGUsZikrXCJweFwifXIuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGEsYil7aWYoYil7dmFyIGM9TmEoYSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PWM/XCIxXCI6Y319fX0sY3NzTnVtYmVyOnthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwfSxjc3NQcm9wczp7XCJmbG9hdFwiOlwiY3NzRmxvYXRcIn0sc3R5bGU6ZnVuY3Rpb24oYSxiLGMsZCl7aWYoYSYmMyE9PWEubm9kZVR5cGUmJjghPT1hLm5vZGVUeXBlJiZhLnN0eWxlKXt2YXIgZSxmLGcsaD1yLmNhbWVsQ2FzZShiKSxpPWEuc3R5bGU7cmV0dXJuIGI9ci5jc3NQcm9wc1toXXx8KHIuY3NzUHJvcHNbaF09VWEoaCl8fGgpLGc9ci5jc3NIb29rc1tiXXx8ci5jc3NIb29rc1toXSx2b2lkIDA9PT1jP2cmJlwiZ2V0XCJpbiBnJiZ2b2lkIDAhPT0oZT1nLmdldChhLCExLGQpKT9lOmlbYl06KGY9dHlwZW9mIGMsXCJzdHJpbmdcIj09PWYmJihlPWFhLmV4ZWMoYykpJiZlWzFdJiYoYz1lYShhLGIsZSksZj1cIm51bWJlclwiKSxudWxsIT1jJiZjPT09YyYmKFwibnVtYmVyXCI9PT1mJiYoYys9ZSYmZVszXXx8KHIuY3NzTnVtYmVyW2hdP1wiXCI6XCJweFwiKSksby5jbGVhckNsb25lU3R5bGV8fFwiXCIhPT1jfHwwIT09Yi5pbmRleE9mKFwiYmFja2dyb3VuZFwiKXx8KGlbYl09XCJpbmhlcml0XCIpLGcmJlwic2V0XCJpbiBnJiZ2b2lkIDA9PT0oYz1nLnNldChhLGMsZCkpfHwoaVtiXT1jKSksdm9pZCAwKX19LGNzczpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZSxmLGcsaD1yLmNhbWVsQ2FzZShiKTtyZXR1cm4gYj1yLmNzc1Byb3BzW2hdfHwoci5jc3NQcm9wc1toXT1VYShoKXx8aCksZz1yLmNzc0hvb2tzW2JdfHxyLmNzc0hvb2tzW2hdLGcmJlwiZ2V0XCJpbiBnJiYoZT1nLmdldChhLCEwLGMpKSx2b2lkIDA9PT1lJiYoZT1OYShhLGIsZCkpLFwibm9ybWFsXCI9PT1lJiZiIGluIFJhJiYoZT1SYVtiXSksXCJcIj09PWN8fGM/KGY9cGFyc2VGbG9hdChlKSxjPT09ITB8fGlzRmluaXRlKGYpP2Z8fDA6ZSk6ZX19KSxyLmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihhLGIpe3IuY3NzSG9va3NbYl09e2dldDpmdW5jdGlvbihhLGMsZCl7aWYoYylyZXR1cm4hUGEudGVzdChyLmNzcyhhLFwiZGlzcGxheVwiKSl8fGEuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJmEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg/WGEoYSxiLGQpOmRhKGEsUWEsZnVuY3Rpb24oKXtyZXR1cm4gWGEoYSxiLGQpfSl9LHNldDpmdW5jdGlvbihhLGMsZCl7dmFyIGUsZj1kJiZNYShhKSxnPWQmJldhKGEsYixkLFwiYm9yZGVyLWJveFwiPT09ci5jc3MoYSxcImJveFNpemluZ1wiLCExLGYpLGYpO3JldHVybiBnJiYoZT1hYS5leGVjKGMpKSYmXCJweFwiIT09KGVbM118fFwicHhcIikmJihhLnN0eWxlW2JdPWMsYz1yLmNzcyhhLGIpKSxWYShhLGMsZyl9fX0pLHIuY3NzSG9va3MubWFyZ2luTGVmdD1PYShvLnJlbGlhYmxlTWFyZ2luTGVmdCxmdW5jdGlvbihhLGIpe2lmKGIpcmV0dXJuKHBhcnNlRmxvYXQoTmEoYSxcIm1hcmdpbkxlZnRcIikpfHxhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtZGEoYSx7bWFyZ2luTGVmdDowfSxmdW5jdGlvbigpe3JldHVybiBhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnR9KSkrXCJweFwifSksci5lYWNoKHttYXJnaW46XCJcIixwYWRkaW5nOlwiXCIsYm9yZGVyOlwiV2lkdGhcIn0sZnVuY3Rpb24oYSxiKXtyLmNzc0hvb2tzW2ErYl09e2V4cGFuZDpmdW5jdGlvbihjKXtmb3IodmFyIGQ9MCxlPXt9LGY9XCJzdHJpbmdcIj09dHlwZW9mIGM/Yy5zcGxpdChcIiBcIik6W2NdO2Q8NDtkKyspZVthK2JhW2RdK2JdPWZbZF18fGZbZC0yXXx8ZlswXTtyZXR1cm4gZX19LEthLnRlc3QoYSl8fChyLmNzc0hvb2tzW2ErYl0uc2V0PVZhKX0pLHIuZm4uZXh0ZW5kKHtjc3M6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUyh0aGlzLGZ1bmN0aW9uKGEsYixjKXt2YXIgZCxlLGY9e30sZz0wO2lmKHIuaXNBcnJheShiKSl7Zm9yKGQ9TWEoYSksZT1iLmxlbmd0aDtnPGU7ZysrKWZbYltnXV09ci5jc3MoYSxiW2ddLCExLGQpO3JldHVybiBmfXJldHVybiB2b2lkIDAhPT1jP3Iuc3R5bGUoYSxiLGMpOnIuY3NzKGEsYil9LGEsYixhcmd1bWVudHMubGVuZ3RoPjEpfX0pLHIuZm4uZGVsYXk9ZnVuY3Rpb24oYixjKXtyZXR1cm4gYj1yLmZ4P3IuZnguc3BlZWRzW2JdfHxiOmIsYz1jfHxcImZ4XCIsdGhpcy5xdWV1ZShjLGZ1bmN0aW9uKGMsZCl7dmFyIGU9YS5zZXRUaW1lb3V0KGMsYik7ZC5zdG9wPWZ1bmN0aW9uKCl7YS5jbGVhclRpbWVvdXQoZSl9fSl9LGZ1bmN0aW9uKCl7dmFyIGE9ZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYj1kLmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiksYz1iLmFwcGVuZENoaWxkKGQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSk7YS50eXBlPVwiY2hlY2tib3hcIixvLmNoZWNrT249XCJcIiE9PWEudmFsdWUsby5vcHRTZWxlY3RlZD1jLnNlbGVjdGVkLGE9ZC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksYS52YWx1ZT1cInRcIixhLnR5cGU9XCJyYWRpb1wiLG8ucmFkaW9WYWx1ZT1cInRcIj09PWEudmFsdWV9KCk7dmFyIFlhLFphPXIuZXhwci5hdHRySGFuZGxlO3IuZm4uZXh0ZW5kKHthdHRyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFModGhpcyxyLmF0dHIsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZUF0dHI6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3IucmVtb3ZlQXR0cih0aGlzLGEpfSl9fSksci5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZj1hLm5vZGVUeXBlO2lmKDMhPT1mJiY4IT09ZiYmMiE9PWYpcmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGEuZ2V0QXR0cmlidXRlP3IucHJvcChhLGIsYyk6KDE9PT1mJiZyLmlzWE1MRG9jKGEpfHwoZT1yLmF0dHJIb29rc1tiLnRvTG93ZXJDYXNlKCldfHwoci5leHByLm1hdGNoLmJvb2wudGVzdChiKT9ZYTp2b2lkIDApKSx2b2lkIDAhPT1jP251bGw9PT1jP3ZvaWQgci5yZW1vdmVBdHRyKGEsYik6ZSYmXCJzZXRcImluIGUmJnZvaWQgMCE9PShkPWUuc2V0KGEsYyxiKSk/ZDooYS5zZXRBdHRyaWJ1dGUoYixjK1wiXCIpLGMpOmUmJlwiZ2V0XCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDooZD1yLmZpbmQuYXR0cihhLGIpLG51bGw9PWQ/dm9pZCAwOmQpKX0sYXR0ckhvb2tzOnt0eXBlOntzZXQ6ZnVuY3Rpb24oYSxiKXtpZighby5yYWRpb1ZhbHVlJiZcInJhZGlvXCI9PT1iJiZyLm5vZGVOYW1lKGEsXCJpbnB1dFwiKSl7dmFyIGM9YS52YWx1ZTtyZXR1cm4gYS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsYiksYyYmKGEudmFsdWU9YyksYn19fX0scmVtb3ZlQXR0cjpmdW5jdGlvbihhLGIpe3ZhciBjLGQ9MCxlPWImJmIubWF0Y2goSyk7aWYoZSYmMT09PWEubm9kZVR5cGUpd2hpbGUoYz1lW2QrK10pYS5yZW1vdmVBdHRyaWJ1dGUoYyl9fSksWWE9e3NldDpmdW5jdGlvbihhLGIsYyl7cmV0dXJuIGI9PT0hMT9yLnJlbW92ZUF0dHIoYSxjKTphLnNldEF0dHJpYnV0ZShjLGMpLGN9fSxyLmVhY2goci5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLGZ1bmN0aW9uKGEsYil7dmFyIGM9WmFbYl18fHIuZmluZC5hdHRyO1phW2JdPWZ1bmN0aW9uKGEsYixkKXt2YXIgZSxmLGc9Yi50b0xvd2VyQ2FzZSgpO3JldHVybiBkfHwoZj1aYVtnXSxaYVtnXT1lLGU9bnVsbCE9YyhhLGIsZCk/ZzpudWxsLFphW2ddPWYpLGV9fSk7dmFyICRhPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksX2E9L14oPzphfGFyZWEpJC9pO3IuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGEsYil7cmV0dXJuIFModGhpcyxyLnByb3AsYSxiLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW3IucHJvcEZpeFthXXx8YV19KX19KSxyLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihhLGIsYyl7dmFyIGQsZSxmPWEubm9kZVR5cGU7aWYoMyE9PWYmJjghPT1mJiYyIT09ZilyZXR1cm4gMT09PWYmJnIuaXNYTUxEb2MoYSl8fChiPXIucHJvcEZpeFtiXXx8YixlPXIucHJvcEhvb2tzW2JdKSx2b2lkIDAhPT1jP2UmJlwic2V0XCJpbiBlJiZ2b2lkIDAhPT0oZD1lLnNldChhLGMsYikpP2Q6YVtiXT1jOmUmJlwiZ2V0XCJpbiBlJiZudWxsIT09KGQ9ZS5nZXQoYSxiKSk/ZDphW2JdfSxwcm9wSG9va3M6e3RhYkluZGV4OntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9ci5maW5kLmF0dHIoYSxcInRhYmluZGV4XCIpO3JldHVybiBiP3BhcnNlSW50KGIsMTApOiRhLnRlc3QoYS5ub2RlTmFtZSl8fF9hLnRlc3QoYS5ub2RlTmFtZSkmJmEuaHJlZj8wOi0xfX19LHByb3BGaXg6e1wiZm9yXCI6XCJodG1sRm9yXCIsXCJjbGFzc1wiOlwiY2xhc3NOYW1lXCJ9fSksby5vcHRTZWxlY3RlZHx8KHIucHJvcEhvb2tzLnNlbGVjdGVkPXtnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnROb2RlO3JldHVybiBiJiZiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LG51bGx9LHNldDpmdW5jdGlvbihhKXt2YXIgYj1hLnBhcmVudE5vZGU7YiYmKGIuc2VsZWN0ZWRJbmRleCxiLnBhcmVudE5vZGUmJmIucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4KX19KSxyLmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7ci5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV09dGhpc30pO2Z1bmN0aW9uIGFiKGEpe3ZhciBiPWEubWF0Y2goSyl8fFtdO3JldHVybiBiLmpvaW4oXCIgXCIpfWZ1bmN0aW9uIGJiKGEpe3JldHVybiBhLmdldEF0dHJpYnV0ZSYmYS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIn1yLmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaT0wO2lmKHIuaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe3IodGhpcykuYWRkQ2xhc3MoYS5jYWxsKHRoaXMsYixiYih0aGlzKSkpfSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJmEpe2I9YS5tYXRjaChLKXx8W107d2hpbGUoYz10aGlzW2krK10paWYoZT1iYihjKSxkPTE9PT1jLm5vZGVUeXBlJiZcIiBcIithYihlKStcIiBcIil7Zz0wO3doaWxlKGY9YltnKytdKWQuaW5kZXhPZihcIiBcIitmK1wiIFwiKTwwJiYoZCs9ZitcIiBcIik7aD1hYihkKSxlIT09aCYmYy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGgpfX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZixnLGgsaT0wO2lmKHIuaXNGdW5jdGlvbihhKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGIpe3IodGhpcykucmVtb3ZlQ2xhc3MoYS5jYWxsKHRoaXMsYixiYih0aGlzKSkpfSk7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsXCJcIik7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEmJmEpe2I9YS5tYXRjaChLKXx8W107d2hpbGUoYz10aGlzW2krK10paWYoZT1iYihjKSxkPTE9PT1jLm5vZGVUeXBlJiZcIiBcIithYihlKStcIiBcIil7Zz0wO3doaWxlKGY9YltnKytdKXdoaWxlKGQuaW5kZXhPZihcIiBcIitmK1wiIFwiKT4tMSlkPWQucmVwbGFjZShcIiBcIitmK1wiIFwiLFwiIFwiKTtoPWFiKGQpLGUhPT1oJiZjLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsaCl9fXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihhLGIpe3ZhciBjPXR5cGVvZiBhO3JldHVyblwiYm9vbGVhblwiPT10eXBlb2YgYiYmXCJzdHJpbmdcIj09PWM/Yj90aGlzLmFkZENsYXNzKGEpOnRoaXMucmVtb3ZlQ2xhc3MoYSk6ci5pc0Z1bmN0aW9uKGEpP3RoaXMuZWFjaChmdW5jdGlvbihjKXtyKHRoaXMpLnRvZ2dsZUNsYXNzKGEuY2FsbCh0aGlzLGMsYmIodGhpcyksYiksYil9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYixkLGUsZjtpZihcInN0cmluZ1wiPT09Yyl7ZD0wLGU9cih0aGlzKSxmPWEubWF0Y2goSyl8fFtdO3doaWxlKGI9ZltkKytdKWUuaGFzQ2xhc3MoYik/ZS5yZW1vdmVDbGFzcyhiKTplLmFkZENsYXNzKGIpfWVsc2Ugdm9pZCAwIT09YSYmXCJib29sZWFuXCIhPT1jfHwoYj1iYih0aGlzKSxiJiZWLnNldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiLGIpLHRoaXMuc2V0QXR0cmlidXRlJiZ0aGlzLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsYnx8YT09PSExP1wiXCI6Vi5nZXQodGhpcyxcIl9fY2xhc3NOYW1lX19cIil8fFwiXCIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihhKXt2YXIgYixjLGQ9MDtiPVwiIFwiK2ErXCIgXCI7d2hpbGUoYz10aGlzW2QrK10paWYoMT09PWMubm9kZVR5cGUmJihcIiBcIithYihiYihjKSkrXCIgXCIpLmluZGV4T2YoYik+LTEpcmV0dXJuITA7cmV0dXJuITF9fSk7dmFyIGNiPS9cXHIvZztyLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIGQ9ci5pc0Z1bmN0aW9uKGEpLHRoaXMuZWFjaChmdW5jdGlvbihjKXt2YXIgZTsxPT09dGhpcy5ub2RlVHlwZSYmKGU9ZD9hLmNhbGwodGhpcyxjLHIodGhpcykudmFsKCkpOmEsbnVsbD09ZT9lPVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIGU/ZSs9XCJcIjpyLmlzQXJyYXkoZSkmJihlPXIubWFwKGUsZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PWE/XCJcIjphK1wiXCJ9KSksYj1yLnZhbEhvb2tzW3RoaXMudHlwZV18fHIudmFsSG9va3NbdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSxiJiZcInNldFwiaW4gYiYmdm9pZCAwIT09Yi5zZXQodGhpcyxlLFwidmFsdWVcIil8fCh0aGlzLnZhbHVlPWUpKX0pO2lmKGUpcmV0dXJuIGI9ci52YWxIb29rc1tlLnR5cGVdfHxyLnZhbEhvb2tzW2Uubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0sYiYmXCJnZXRcImluIGImJnZvaWQgMCE9PShjPWIuZ2V0KGUsXCJ2YWx1ZVwiKSk/YzooYz1lLnZhbHVlLFwic3RyaW5nXCI9PXR5cGVvZiBjP2MucmVwbGFjZShjYixcIlwiKTpudWxsPT1jP1wiXCI6Yyl9fX0pLHIuZXh0ZW5kKHt2YWxIb29rczp7b3B0aW9uOntnZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9ci5maW5kLmF0dHIoYSxcInZhbHVlXCIpO3JldHVybiBudWxsIT1iP2I6YWIoci50ZXh0KGEpKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPWEub3B0aW9ucyxmPWEuc2VsZWN0ZWRJbmRleCxnPVwic2VsZWN0LW9uZVwiPT09YS50eXBlLGg9Zz9udWxsOltdLGk9Zz9mKzE6ZS5sZW5ndGg7Zm9yKGQ9ZjwwP2k6Zz9mOjA7ZDxpO2QrKylpZihjPWVbZF0sKGMuc2VsZWN0ZWR8fGQ9PT1mKSYmIWMuZGlzYWJsZWQmJighYy5wYXJlbnROb2RlLmRpc2FibGVkfHwhci5ub2RlTmFtZShjLnBhcmVudE5vZGUsXCJvcHRncm91cFwiKSkpe2lmKGI9cihjKS52YWwoKSxnKXJldHVybiBiO2gucHVzaChiKX1yZXR1cm4gaH0sc2V0OmZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlPWEub3B0aW9ucyxmPXIubWFrZUFycmF5KGIpLGc9ZS5sZW5ndGg7d2hpbGUoZy0tKWQ9ZVtnXSwoZC5zZWxlY3RlZD1yLmluQXJyYXkoci52YWxIb29rcy5vcHRpb24uZ2V0KGQpLGYpPi0xKSYmKGM9ITApO3JldHVybiBjfHwoYS5zZWxlY3RlZEluZGV4PS0xKSxmfX19fSksci5lYWNoKFtcInJhZGlvXCIsXCJjaGVja2JveFwiXSxmdW5jdGlvbigpe3IudmFsSG9va3NbdGhpc109e3NldDpmdW5jdGlvbihhLGIpe2lmKHIuaXNBcnJheShiKSlyZXR1cm4gYS5jaGVja2VkPXIuaW5BcnJheShyKGEpLnZhbCgpLGIpPi0xfX0sby5jaGVja09ufHwoci52YWxIb29rc1t0aGlzXS5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIG51bGw9PT1hLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpP1wib25cIjphLnZhbHVlfSl9KTt2YXIgZGI9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO3IuZXh0ZW5kKHIuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24oYixjLGUsZil7dmFyIGcsaCxpLGosayxtLG4sbz1bZXx8ZF0scD1sLmNhbGwoYixcInR5cGVcIik/Yi50eXBlOmIscT1sLmNhbGwoYixcIm5hbWVzcGFjZVwiKT9iLm5hbWVzcGFjZS5zcGxpdChcIi5cIik6W107aWYoaD1pPWU9ZXx8ZCwzIT09ZS5ub2RlVHlwZSYmOCE9PWUubm9kZVR5cGUmJiFkYi50ZXN0KHArci5ldmVudC50cmlnZ2VyZWQpJiYocC5pbmRleE9mKFwiLlwiKT4tMSYmKHE9cC5zcGxpdChcIi5cIikscD1xLnNoaWZ0KCkscS5zb3J0KCkpLGs9cC5pbmRleE9mKFwiOlwiKTwwJiZcIm9uXCIrcCxiPWJbci5leHBhbmRvXT9iOm5ldyByLkV2ZW50KHAsXCJvYmplY3RcIj09dHlwZW9mIGImJmIpLGIuaXNUcmlnZ2VyPWY/MjozLGIubmFtZXNwYWNlPXEuam9pbihcIi5cIiksYi5ybmFtZXNwYWNlPWIubmFtZXNwYWNlP25ldyBSZWdFeHAoXCIoXnxcXFxcLilcIitxLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKStcIihcXFxcLnwkKVwiKTpudWxsLGIucmVzdWx0PXZvaWQgMCxiLnRhcmdldHx8KGIudGFyZ2V0PWUpLGM9bnVsbD09Yz9bYl06ci5tYWtlQXJyYXkoYyxbYl0pLG49ci5ldmVudC5zcGVjaWFsW3BdfHx7fSxmfHwhbi50cmlnZ2VyfHxuLnRyaWdnZXIuYXBwbHkoZSxjKSE9PSExKSl7aWYoIWYmJiFuLm5vQnViYmxlJiYhci5pc1dpbmRvdyhlKSl7Zm9yKGo9bi5kZWxlZ2F0ZVR5cGV8fHAsZGIudGVzdChqK3ApfHwoaD1oLnBhcmVudE5vZGUpO2g7aD1oLnBhcmVudE5vZGUpby5wdXNoKGgpLGk9aDtpPT09KGUub3duZXJEb2N1bWVudHx8ZCkmJm8ucHVzaChpLmRlZmF1bHRWaWV3fHxpLnBhcmVudFdpbmRvd3x8YSl9Zz0wO3doaWxlKChoPW9bZysrXSkmJiFiLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYi50eXBlPWc+MT9qOm4uYmluZFR5cGV8fHAsbT0oVi5nZXQoaCxcImV2ZW50c1wiKXx8e30pW2IudHlwZV0mJlYuZ2V0KGgsXCJoYW5kbGVcIiksbSYmbS5hcHBseShoLGMpLG09ayYmaFtrXSxtJiZtLmFwcGx5JiZUKGgpJiYoYi5yZXN1bHQ9bS5hcHBseShoLGMpLGIucmVzdWx0PT09ITEmJmIucHJldmVudERlZmF1bHQoKSk7cmV0dXJuIGIudHlwZT1wLGZ8fGIuaXNEZWZhdWx0UHJldmVudGVkKCl8fG4uX2RlZmF1bHQmJm4uX2RlZmF1bHQuYXBwbHkoby5wb3AoKSxjKSE9PSExfHwhVChlKXx8ayYmci5pc0Z1bmN0aW9uKGVbcF0pJiYhci5pc1dpbmRvdyhlKSYmKGk9ZVtrXSxpJiYoZVtrXT1udWxsKSxyLmV2ZW50LnRyaWdnZXJlZD1wLGVbcF0oKSxyLmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsaSYmKGVba109aSkpLGIucmVzdWx0fX0sc2ltdWxhdGU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXIuZXh0ZW5kKG5ldyByLkV2ZW50LGMse3R5cGU6YSxpc1NpbXVsYXRlZDohMH0pO3IuZXZlbnQudHJpZ2dlcihkLG51bGwsYil9fSksci5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ci5ldmVudC50cmlnZ2VyKGEsYix0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihhLGIpe3ZhciBjPXRoaXNbMF07aWYoYylyZXR1cm4gci5ldmVudC50cmlnZ2VyKGEsYixjLCEwKX19KSxyLmVhY2goXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7ci5mbltiXT1mdW5jdGlvbihhLGMpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjA/dGhpcy5vbihiLG51bGwsYSxjKTp0aGlzLnRyaWdnZXIoYil9fSksci5mbi5leHRlbmQoe2hvdmVyOmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMubW91c2VlbnRlcihhKS5tb3VzZWxlYXZlKGJ8fGEpfX0pLG8uZm9jdXNpbj1cIm9uZm9jdXNpblwiaW4gYSxvLmZvY3VzaW58fHIuZWFjaCh7Zm9jdXM6XCJmb2N1c2luXCIsYmx1cjpcImZvY3Vzb3V0XCJ9LGZ1bmN0aW9uKGEsYil7dmFyIGM9ZnVuY3Rpb24oYSl7ci5ldmVudC5zaW11bGF0ZShiLGEudGFyZ2V0LHIuZXZlbnQuZml4KGEpKX07ci5ldmVudC5zcGVjaWFsW2JdPXtzZXR1cDpmdW5jdGlvbigpe3ZhciBkPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyxlPVYuYWNjZXNzKGQsYik7ZXx8ZC5hZGRFdmVudExpc3RlbmVyKGEsYywhMCksVi5hY2Nlc3MoZCxiLChlfHwwKSsxKX0sdGVhcmRvd246ZnVuY3Rpb24oKXt2YXIgZD10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsZT1WLmFjY2VzcyhkLGIpLTE7ZT9WLmFjY2VzcyhkLGIsZSk6KGQucmVtb3ZlRXZlbnRMaXN0ZW5lcihhLGMsITApLFYucmVtb3ZlKGQsYikpfX19KTt2YXIgZWI9L1xcW1xcXSQvLGZiPS9cXHI/XFxuL2csZ2I9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLGhiPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBpYihhLGIsYyxkKXt2YXIgZTtpZihyLmlzQXJyYXkoYikpci5lYWNoKGIsZnVuY3Rpb24oYixlKXtjfHxlYi50ZXN0KGEpP2QoYSxlKTppYihhK1wiW1wiKyhcIm9iamVjdFwiPT10eXBlb2YgZSYmbnVsbCE9ZT9iOlwiXCIpK1wiXVwiLGUsYyxkKTtcbn0pO2Vsc2UgaWYoY3x8XCJvYmplY3RcIiE9PXIudHlwZShiKSlkKGEsYik7ZWxzZSBmb3IoZSBpbiBiKWliKGErXCJbXCIrZStcIl1cIixiW2VdLGMsZCl9ci5wYXJhbT1mdW5jdGlvbihhLGIpe3ZhciBjLGQ9W10sZT1mdW5jdGlvbihhLGIpe3ZhciBjPXIuaXNGdW5jdGlvbihiKT9iKCk6YjtkW2QubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoYSkrXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KG51bGw9PWM/XCJcIjpjKX07aWYoci5pc0FycmF5KGEpfHxhLmpxdWVyeSYmIXIuaXNQbGFpbk9iamVjdChhKSlyLmVhY2goYSxmdW5jdGlvbigpe2UodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IoYyBpbiBhKWliKGMsYVtjXSxiLGUpO3JldHVybiBkLmpvaW4oXCImXCIpfSxyLmZuLmV4dGVuZCh7c2VyaWFsaXplOmZ1bmN0aW9uKCl7cmV0dXJuIHIucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKX0sc2VyaWFsaXplQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXt2YXIgYT1yLnByb3AodGhpcyxcImVsZW1lbnRzXCIpO3JldHVybiBhP3IubWFrZUFycmF5KGEpOnRoaXN9KS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgYT10aGlzLnR5cGU7cmV0dXJuIHRoaXMubmFtZSYmIXIodGhpcykuaXMoXCI6ZGlzYWJsZWRcIikmJmhiLnRlc3QodGhpcy5ub2RlTmFtZSkmJiFnYi50ZXN0KGEpJiYodGhpcy5jaGVja2VkfHwhaWEudGVzdChhKSl9KS5tYXAoZnVuY3Rpb24oYSxiKXt2YXIgYz1yKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1jP251bGw6ci5pc0FycmF5KGMpP3IubWFwKGMsZnVuY3Rpb24oYSl7cmV0dXJue25hbWU6Yi5uYW1lLHZhbHVlOmEucmVwbGFjZShmYixcIlxcclxcblwiKX19KTp7bmFtZTpiLm5hbWUsdmFsdWU6Yy5yZXBsYWNlKGZiLFwiXFxyXFxuXCIpfX0pLmdldCgpfX0pLHIuZm4uZXh0ZW5kKHt3cmFwQWxsOmZ1bmN0aW9uKGEpe3ZhciBiO3JldHVybiB0aGlzWzBdJiYoci5pc0Z1bmN0aW9uKGEpJiYoYT1hLmNhbGwodGhpc1swXSkpLGI9cihhLHRoaXNbMF0ub3duZXJEb2N1bWVudCkuZXEoMCkuY2xvbmUoITApLHRoaXNbMF0ucGFyZW50Tm9kZSYmYi5pbnNlcnRCZWZvcmUodGhpc1swXSksYi5tYXAoZnVuY3Rpb24oKXt2YXIgYT10aGlzO3doaWxlKGEuZmlyc3RFbGVtZW50Q2hpbGQpYT1hLmZpcnN0RWxlbWVudENoaWxkO3JldHVybiBhfSkuYXBwZW5kKHRoaXMpKSx0aGlzfSx3cmFwSW5uZXI6ZnVuY3Rpb24oYSl7cmV0dXJuIHIuaXNGdW5jdGlvbihhKT90aGlzLmVhY2goZnVuY3Rpb24oYil7cih0aGlzKS53cmFwSW5uZXIoYS5jYWxsKHRoaXMsYikpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGI9cih0aGlzKSxjPWIuY29udGVudHMoKTtjLmxlbmd0aD9jLndyYXBBbGwoYSk6Yi5hcHBlbmQoYSl9KX0sd3JhcDpmdW5jdGlvbihhKXt2YXIgYj1yLmlzRnVuY3Rpb24oYSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihjKXtyKHRoaXMpLndyYXBBbGwoYj9hLmNhbGwodGhpcyxjKTphKX0pfSx1bndyYXA6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMucGFyZW50KGEpLm5vdChcImJvZHlcIikuZWFjaChmdW5jdGlvbigpe3IodGhpcykucmVwbGFjZVdpdGgodGhpcy5jaGlsZE5vZGVzKX0pLHRoaXN9fSksci5leHByLnBzZXVkb3MuaGlkZGVuPWZ1bmN0aW9uKGEpe3JldHVybiFyLmV4cHIucHNldWRvcy52aXNpYmxlKGEpfSxyLmV4cHIucHNldWRvcy52aXNpYmxlPWZ1bmN0aW9uKGEpe3JldHVybiEhKGEub2Zmc2V0V2lkdGh8fGEub2Zmc2V0SGVpZ2h0fHxhLmdldENsaWVudFJlY3RzKCkubGVuZ3RoKX0sby5jcmVhdGVIVE1MRG9jdW1lbnQ9ZnVuY3Rpb24oKXt2YXIgYT1kLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKS5ib2R5O3JldHVybiBhLmlubmVySFRNTD1cIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCIsMj09PWEuY2hpbGROb2Rlcy5sZW5ndGh9KCksci5wYXJzZUhUTUw9ZnVuY3Rpb24oYSxiLGMpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBhKXJldHVybltdO1wiYm9vbGVhblwiPT10eXBlb2YgYiYmKGM9YixiPSExKTt2YXIgZSxmLGc7cmV0dXJuIGJ8fChvLmNyZWF0ZUhUTUxEb2N1bWVudD8oYj1kLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSxlPWIuY3JlYXRlRWxlbWVudChcImJhc2VcIiksZS5ocmVmPWQubG9jYXRpb24uaHJlZixiLmhlYWQuYXBwZW5kQ2hpbGQoZSkpOmI9ZCksZj1CLmV4ZWMoYSksZz0hYyYmW10sZj9bYi5jcmVhdGVFbGVtZW50KGZbMV0pXTooZj1wYShbYV0sYixnKSxnJiZnLmxlbmd0aCYmcihnKS5yZW1vdmUoKSxyLm1lcmdlKFtdLGYuY2hpbGROb2RlcykpfTtmdW5jdGlvbiBqYihhKXtyZXR1cm4gci5pc1dpbmRvdyhhKT9hOjk9PT1hLm5vZGVUeXBlJiZhLmRlZmF1bHRWaWV3fXIub2Zmc2V0PXtzZXRPZmZzZXQ6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkLGUsZixnLGgsaSxqLGs9ci5jc3MoYSxcInBvc2l0aW9uXCIpLGw9cihhKSxtPXt9O1wic3RhdGljXCI9PT1rJiYoYS5zdHlsZS5wb3NpdGlvbj1cInJlbGF0aXZlXCIpLGg9bC5vZmZzZXQoKSxmPXIuY3NzKGEsXCJ0b3BcIiksaT1yLmNzcyhhLFwibGVmdFwiKSxqPShcImFic29sdXRlXCI9PT1rfHxcImZpeGVkXCI9PT1rKSYmKGYraSkuaW5kZXhPZihcImF1dG9cIik+LTEsaj8oZD1sLnBvc2l0aW9uKCksZz1kLnRvcCxlPWQubGVmdCk6KGc9cGFyc2VGbG9hdChmKXx8MCxlPXBhcnNlRmxvYXQoaSl8fDApLHIuaXNGdW5jdGlvbihiKSYmKGI9Yi5jYWxsKGEsYyxyLmV4dGVuZCh7fSxoKSkpLG51bGwhPWIudG9wJiYobS50b3A9Yi50b3AtaC50b3ArZyksbnVsbCE9Yi5sZWZ0JiYobS5sZWZ0PWIubGVmdC1oLmxlZnQrZSksXCJ1c2luZ1wiaW4gYj9iLnVzaW5nLmNhbGwoYSxtKTpsLmNzcyhtKX19LHIuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24oYSl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09YT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihiKXtyLm9mZnNldC5zZXRPZmZzZXQodGhpcyxhLGIpfSk7dmFyIGIsYyxkLGUsZj10aGlzWzBdO2lmKGYpcmV0dXJuIGYuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGg/KGQ9Zi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxkLndpZHRofHxkLmhlaWdodD8oZT1mLm93bmVyRG9jdW1lbnQsYz1qYihlKSxiPWUuZG9jdW1lbnRFbGVtZW50LHt0b3A6ZC50b3ArYy5wYWdlWU9mZnNldC1iLmNsaWVudFRvcCxsZWZ0OmQubGVmdCtjLnBhZ2VYT2Zmc2V0LWIuY2xpZW50TGVmdH0pOmQpOnt0b3A6MCxsZWZ0OjB9fSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXNbMF0pe3ZhciBhLGIsYz10aGlzWzBdLGQ9e3RvcDowLGxlZnQ6MH07cmV0dXJuXCJmaXhlZFwiPT09ci5jc3MoYyxcInBvc2l0aW9uXCIpP2I9Yy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTooYT10aGlzLm9mZnNldFBhcmVudCgpLGI9dGhpcy5vZmZzZXQoKSxyLm5vZGVOYW1lKGFbMF0sXCJodG1sXCIpfHwoZD1hLm9mZnNldCgpKSxkPXt0b3A6ZC50b3Arci5jc3MoYVswXSxcImJvcmRlclRvcFdpZHRoXCIsITApLGxlZnQ6ZC5sZWZ0K3IuY3NzKGFbMF0sXCJib3JkZXJMZWZ0V2lkdGhcIiwhMCl9KSx7dG9wOmIudG9wLWQudG9wLXIuY3NzKGMsXCJtYXJnaW5Ub3BcIiwhMCksbGVmdDpiLmxlZnQtZC5sZWZ0LXIuY3NzKGMsXCJtYXJnaW5MZWZ0XCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBhPXRoaXMub2Zmc2V0UGFyZW50O3doaWxlKGEmJlwic3RhdGljXCI9PT1yLmNzcyhhLFwicG9zaXRpb25cIikpYT1hLm9mZnNldFBhcmVudDtyZXR1cm4gYXx8cWF9KX19KSxyLmVhY2goe3Njcm9sbExlZnQ6XCJwYWdlWE9mZnNldFwiLHNjcm9sbFRvcDpcInBhZ2VZT2Zmc2V0XCJ9LGZ1bmN0aW9uKGEsYil7dmFyIGM9XCJwYWdlWU9mZnNldFwiPT09YjtyLmZuW2FdPWZ1bmN0aW9uKGQpe3JldHVybiBTKHRoaXMsZnVuY3Rpb24oYSxkLGUpe3ZhciBmPWpiKGEpO3JldHVybiB2b2lkIDA9PT1lP2Y/ZltiXTphW2RdOnZvaWQoZj9mLnNjcm9sbFRvKGM/Zi5wYWdlWE9mZnNldDplLGM/ZTpmLnBhZ2VZT2Zmc2V0KTphW2RdPWUpfSxhLGQsYXJndW1lbnRzLmxlbmd0aCl9fSksci5lYWNoKFtcInRvcFwiLFwibGVmdFwiXSxmdW5jdGlvbihhLGIpe3IuY3NzSG9va3NbYl09T2Eoby5waXhlbFBvc2l0aW9uLGZ1bmN0aW9uKGEsYyl7aWYoYylyZXR1cm4gYz1OYShhLGIpLExhLnRlc3QoYyk/cihhKS5wb3NpdGlvbigpW2JdK1wicHhcIjpjfSl9KSxyLmVhY2goe0hlaWdodDpcImhlaWdodFwiLFdpZHRoOlwid2lkdGhcIn0sZnVuY3Rpb24oYSxiKXtyLmVhY2goe3BhZGRpbmc6XCJpbm5lclwiK2EsY29udGVudDpiLFwiXCI6XCJvdXRlclwiK2F9LGZ1bmN0aW9uKGMsZCl7ci5mbltkXT1mdW5jdGlvbihlLGYpe3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgmJihjfHxcImJvb2xlYW5cIiE9dHlwZW9mIGUpLGg9Y3x8KGU9PT0hMHx8Zj09PSEwP1wibWFyZ2luXCI6XCJib3JkZXJcIik7cmV0dXJuIFModGhpcyxmdW5jdGlvbihiLGMsZSl7dmFyIGY7cmV0dXJuIHIuaXNXaW5kb3coYik/MD09PWQuaW5kZXhPZihcIm91dGVyXCIpP2JbXCJpbm5lclwiK2FdOmIuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50W1wiY2xpZW50XCIrYV06OT09PWIubm9kZVR5cGU/KGY9Yi5kb2N1bWVudEVsZW1lbnQsTWF0aC5tYXgoYi5ib2R5W1wic2Nyb2xsXCIrYV0sZltcInNjcm9sbFwiK2FdLGIuYm9keVtcIm9mZnNldFwiK2FdLGZbXCJvZmZzZXRcIithXSxmW1wiY2xpZW50XCIrYV0pKTp2b2lkIDA9PT1lP3IuY3NzKGIsYyxoKTpyLnN0eWxlKGIsYyxlLGgpfSxiLGc/ZTp2b2lkIDAsZyl9fSl9KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZShcImpxdWVyeVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIHJ9KTt2YXIga2I9YS5qUXVlcnksbGI9YS4kO3JldHVybiByLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oYil7cmV0dXJuIGEuJD09PXImJihhLiQ9bGIpLGImJmEualF1ZXJ5PT09ciYmKGEualF1ZXJ5PWtiKSxyfSxifHwoYS5qUXVlcnk9YS4kPXIpLHJ9KTtcbiIsIi8qIVxuICogSmF2YVNjcmlwdCBDb29raWUgdjIuMS4zXG4gKiBodHRwczovL2dpdGh1Yi5jb20vanMtY29va2llL2pzLWNvb2tpZVxuICpcbiAqIENvcHlyaWdodCAyMDA2LCAyMDE1IEtsYXVzIEhhcnRsICYgRmFnbmVyIEJyYWNrXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuOyhmdW5jdGlvbiAoZmFjdG9yeSkge1xuXHR2YXIgcmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gZmFsc2U7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZmFjdG9yeSk7XG5cdFx0cmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gdHJ1ZTtcblx0fVxuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdFx0cmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gdHJ1ZTtcblx0fVxuXHRpZiAoIXJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlcikge1xuXHRcdHZhciBPbGRDb29raWVzID0gd2luZG93LkNvb2tpZXM7XG5cdFx0dmFyIGFwaSA9IHdpbmRvdy5Db29raWVzID0gZmFjdG9yeSgpO1xuXHRcdGFwaS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0d2luZG93LkNvb2tpZXMgPSBPbGRDb29raWVzO1xuXHRcdFx0cmV0dXJuIGFwaTtcblx0XHR9O1xuXHR9XG59KGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gZXh0ZW5kICgpIHtcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xuXHRcdGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0cmVzdWx0W2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBpbml0IChjb252ZXJ0ZXIpIHtcblx0XHRmdW5jdGlvbiBhcGkgKGtleSwgdmFsdWUsIGF0dHJpYnV0ZXMpIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cdFx0XHRpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdyaXRlXG5cblx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRhdHRyaWJ1dGVzID0gZXh0ZW5kKHtcblx0XHRcdFx0XHRwYXRoOiAnLydcblx0XHRcdFx0fSwgYXBpLmRlZmF1bHRzLCBhdHRyaWJ1dGVzKTtcblxuXHRcdFx0XHRpZiAodHlwZW9mIGF0dHJpYnV0ZXMuZXhwaXJlcyA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0XHR2YXIgZXhwaXJlcyA9IG5ldyBEYXRlKCk7XG5cdFx0XHRcdFx0ZXhwaXJlcy5zZXRNaWxsaXNlY29uZHMoZXhwaXJlcy5nZXRNaWxsaXNlY29uZHMoKSArIGF0dHJpYnV0ZXMuZXhwaXJlcyAqIDg2NGUrNSk7XG5cdFx0XHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID0gZXhwaXJlcztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdFx0XHRcdGlmICgvXltcXHtcXFtdLy50ZXN0KHJlc3VsdCkpIHtcblx0XHRcdFx0XHRcdHZhbHVlID0gcmVzdWx0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblxuXHRcdFx0XHRpZiAoIWNvbnZlcnRlci53cml0ZSkge1xuXHRcdFx0XHRcdHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh2YWx1ZSkpXG5cdFx0XHRcdFx0XHQucmVwbGFjZSgvJSgyM3wyNHwyNnwyQnwzQXwzQ3wzRXwzRHwyRnwzRnw0MHw1Qnw1RHw1RXw2MHw3Qnw3RHw3QykvZywgZGVjb2RlVVJJQ29tcG9uZW50KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNvbnZlcnRlci53cml0ZSh2YWx1ZSwga2V5KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoa2V5KSk7XG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC8lKDIzfDI0fDI2fDJCfDVFfDYwfDdDKS9nLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXHRcdFx0XHRrZXkgPSBrZXkucmVwbGFjZSgvW1xcKFxcKV0vZywgZXNjYXBlKTtcblxuXHRcdFx0XHRyZXR1cm4gKGRvY3VtZW50LmNvb2tpZSA9IFtcblx0XHRcdFx0XHRrZXksICc9JywgdmFsdWUsXG5cdFx0XHRcdFx0YXR0cmlidXRlcy5leHBpcmVzID8gJzsgZXhwaXJlcz0nICsgYXR0cmlidXRlcy5leHBpcmVzLnRvVVRDU3RyaW5nKCkgOiAnJywgLy8gdXNlIGV4cGlyZXMgYXR0cmlidXRlLCBtYXgtYWdlIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUVcblx0XHRcdFx0XHRhdHRyaWJ1dGVzLnBhdGggPyAnOyBwYXRoPScgKyBhdHRyaWJ1dGVzLnBhdGggOiAnJyxcblx0XHRcdFx0XHRhdHRyaWJ1dGVzLmRvbWFpbiA/ICc7IGRvbWFpbj0nICsgYXR0cmlidXRlcy5kb21haW4gOiAnJyxcblx0XHRcdFx0XHRhdHRyaWJ1dGVzLnNlY3VyZSA/ICc7IHNlY3VyZScgOiAnJ1xuXHRcdFx0XHRdLmpvaW4oJycpKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVhZFxuXG5cdFx0XHRpZiAoIWtleSkge1xuXHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVG8gcHJldmVudCB0aGUgZm9yIGxvb3AgaW4gdGhlIGZpcnN0IHBsYWNlIGFzc2lnbiBhbiBlbXB0eSBhcnJheVxuXHRcdFx0Ly8gaW4gY2FzZSB0aGVyZSBhcmUgbm8gY29va2llcyBhdCBhbGwuIEFsc28gcHJldmVudHMgb2RkIHJlc3VsdCB3aGVuXG5cdFx0XHQvLyBjYWxsaW5nIFwiZ2V0KClcIlxuXHRcdFx0dmFyIGNvb2tpZXMgPSBkb2N1bWVudC5jb29raWUgPyBkb2N1bWVudC5jb29raWUuc3BsaXQoJzsgJykgOiBbXTtcblx0XHRcdHZhciByZGVjb2RlID0gLyglWzAtOUEtWl17Mn0pKy9nO1xuXHRcdFx0dmFyIGkgPSAwO1xuXG5cdFx0XHRmb3IgKDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcnRzID0gY29va2llc1tpXS5zcGxpdCgnPScpO1xuXHRcdFx0XHR2YXIgY29va2llID0gcGFydHMuc2xpY2UoMSkuam9pbignPScpO1xuXG5cdFx0XHRcdGlmIChjb29raWUuY2hhckF0KDApID09PSAnXCInKSB7XG5cdFx0XHRcdFx0Y29va2llID0gY29va2llLnNsaWNlKDEsIC0xKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBwYXJ0c1swXS5yZXBsYWNlKHJkZWNvZGUsIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cdFx0XHRcdFx0Y29va2llID0gY29udmVydGVyLnJlYWQgP1xuXHRcdFx0XHRcdFx0Y29udmVydGVyLnJlYWQoY29va2llLCBuYW1lKSA6IGNvbnZlcnRlcihjb29raWUsIG5hbWUpIHx8XG5cdFx0XHRcdFx0XHRjb29raWUucmVwbGFjZShyZGVjb2RlLCBkZWNvZGVVUklDb21wb25lbnQpO1xuXG5cdFx0XHRcdFx0aWYgKHRoaXMuanNvbikge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0Y29va2llID0gSlNPTi5wYXJzZShjb29raWUpO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoa2V5ID09PSBuYW1lKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSBjb29raWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIWtleSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0W25hbWVdID0gY29va2llO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZSkge31cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblx0XHRhcGkuc2V0ID0gYXBpO1xuXHRcdGFwaS5nZXQgPSBmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRyZXR1cm4gYXBpLmNhbGwoYXBpLCBrZXkpO1xuXHRcdH07XG5cdFx0YXBpLmdldEpTT04gPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZXR1cm4gYXBpLmFwcGx5KHtcblx0XHRcdFx0anNvbjogdHJ1ZVxuXHRcdFx0fSwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcblx0XHR9O1xuXHRcdGFwaS5kZWZhdWx0cyA9IHt9O1xuXG5cdFx0YXBpLnJlbW92ZSA9IGZ1bmN0aW9uIChrZXksIGF0dHJpYnV0ZXMpIHtcblx0XHRcdGFwaShrZXksICcnLCBleHRlbmQoYXR0cmlidXRlcywge1xuXHRcdFx0XHRleHBpcmVzOiAtMVxuXHRcdFx0fSkpO1xuXHRcdH07XG5cblx0XHRhcGkud2l0aENvbnZlcnRlciA9IGluaXQ7XG5cblx0XHRyZXR1cm4gYXBpO1xuXHR9XG5cblx0cmV0dXJuIGluaXQoZnVuY3Rpb24gKCkge30pO1xufSkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJCA9IHJlcXVpcmUoJy4vbGlicy9qcXVlcnkvZGlzdC9qcXVlcnkuc2xpbS5taW4uanMnKTtcbi8vIHZhciBUd2Vlbk1heCA9IHJlcXVpcmUoJy4vbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvVHdlZW5NYXguanMnKTtcbnZhciBpc01vYmlsZSA9IHJlcXVpcmUoJy4vbGlicy9pc01vYmlsZS5taW4uanMnKTtcblxuJChmdW5jdGlvbigpe1xuXG4gICAgLy8gd2luZG93LnJlcXVlc3RBbmltRnJhbWUgPSByZXF1aXJlKCcuL3JlcXVlc3RBbmltRnJhbWUuanMnKTtcbiAgICAvLyB2YXIgdGhyb3R0bGUgPSByZXF1aXJlKCcuL3Rocm90dGxlLmpzJyk7XG5cbiAgICB2YXIgYW5pbUhlYWRlciA9IHJlcXVpcmUoJy4vYW5pbUhlYWRlci5qcycpO1xuICAgIHZhciBhbmltQnRuID0gcmVxdWlyZSgnLi9hbmltQnRuLmpzJyk7XG5cbiAgICB2YXIgYW5pbU1haW5TbGlkZXIgPSByZXF1aXJlKCcuL3NsaWRlck1haW4uanMnKTtcblxuXG4gICAgLy8gdmFyIHdpbmRvd1dpZHRoID0gJCh3aW5kb3cpLm91dGVyV2lkdGgoKSwgd2luZG93SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpLCBkb2NIZWlnaHQgPSAkKGRvY3VtZW50KS5oZWlnaHQoKTtcbiAgICAvLyB2YXIgbXlTY3JvbGwgPSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKTtcblxuICAgIHZhciBib2R5ID0gJCgnYm9keScpO1xuXG4gICAgdmFyIHRoZW1lQ29sb3JzID0ge1xuICAgICAgICAneWVsbG93JzogWyAncmdiKDI1NSwgMjI4LCAwKScsICdyZ2IoNDMsIDI0MCwgMTE3KScgXSxcbiAgICAgICAgJ29yYW5nZSc6IFsgJ3JnYigyNTUsIDEyMCwgMCknLCAncmdiKDI1NSwgMjI4LCAwKScgXSxcbiAgICAgICAgJ3JlZCc6ICAgIFsgJ3JnYigyNTUsIDYsIDApJywgJ3JnYigyNTUsIDEyMCwgMCknIF0sXG4gICAgICAgICdwaW5rJzogICBbICdyZ2IoMjQwLCA0MywgMTQwKScsICdyZ2IoMjU1LCA2LCAwKScgXSxcbiAgICAgICAgJ2JsdWUnOiAgIFsgJ3JnYigyLCAxODcsIDI1NSknLCAncmdiKDEzOCwgMTI2LCAyMjQpJyBdLFxuICAgICAgICAnZ3JlZW4nOiAgWyAncmdiKDQzLCAyNDAsIDExNyknLCAncmdiKDIsIDE4NywgMjU1KScgXVxuICAgIH07XG5cbiAgICB2YXIgc2VhcmNoSW5wdXQgPSAkKCcjc2VhcmNoJyksIGZvcm1Db250YWN0ID0gJCgnI2Zvcm0tY29udGFjdCcpO1xuXG5cblxuICAgIGZ1bmN0aW9uIGNoZWNrRW1wdHlJbnB1dChpbnB1dCl7XG4gICAgICAgIGlmKGlucHV0LmF0dHIoJ3R5cGUnKSA9PT0gJ3JhZGlvJykgcmV0dXJuO1xuICAgICAgICBpbnB1dC52YWwoKSAhPT0gJycgPyBpbnB1dC5hZGRDbGFzcygnb24nKSA6IGlucHV0LnJlbW92ZUNsYXNzKCdvbicpO1xuICAgIH1cblxuXG4gICAgaXNNb2JpbGUuYW55ID8gYm9keS5hZGRDbGFzcygnaXMtbW9iaWxlJykgOiBib2R5LmFkZENsYXNzKCdpcy1kZXNrdG9wJyk7XG5cblxuICAgIC8vIEFuaW0gaGVhZGVyIG9uIHNjcm9sbCArIHNjcm9sbCBpbmRpY2F0b3JcbiAgICBhbmltSGVhZGVyKCk7XG5cbiAgICAvLyBBbmltIGdyYWRpZW50IGluIGJ0biBhbmQgaW4gbWVudSBsaW5rc1xuICAgIGFuaW1CdG4oYm9keSk7XG5cbiAgICAvLyBGb3JtIGlucHV0c1xuICAgIGlmKGZvcm1Db250YWN0Lmxlbmd0aCl7XG4gICAgICAgIGZvcm1Db250YWN0Lm9uKCdpbnB1dCBwcm9wZXJ0eWNoYW5nZScsICdpbnB1dCwgdGV4dGFyZWEnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY2hlY2tFbXB0eUlucHV0KCQodGhpcykpO1xuICAgICAgICB9KS5maW5kKCdpbnB1dCwgdGV4dGFyZWEnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjaGVja0VtcHR5SW5wdXQoJCh0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZigoYm9keS5oYXNDbGFzcygnYXJjaGl2ZScpIHx8IGJvZHkuaGFzQ2xhc3MoJ3NlYXJjaCcpKSAmJiBzZWFyY2hJbnB1dC5sZW5ndGgpe1xuICAgICAgICBzZWFyY2hJbnB1dC5vbignaW5wdXQgcHJvcGVydHljaGFuZ2UnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY2hlY2tFbXB0eUlucHV0KCQodGhpcykpO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tFbXB0eUlucHV0KHNlYXJjaElucHV0KTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZXIgaG9tZVxuICAgIGlmKCQoJyNibG9jLXRvcCcpLmxlbmd0aCl7XG4gICAgICAgIGFuaW1NYWluU2xpZGVyKGJvZHksICQoJyNibG9jLXRvcCcpLCB0aGVtZUNvbG9ycyk7XG4gICAgfVxuXG5cbiAgICAvLyAkKGRvY3VtZW50KS5vbignc2Nyb2xsJywgdGhyb3R0bGUoZnVuY3Rpb24oKXtcblxuICAgIC8vIH0sIDEwKSk7XG5cbiAgICAvLyAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIHRocm90dGxlKGZ1bmN0aW9uKCl7XG5cbiAgICAvLyB9LCA2MCkpO1xuXG59KTtcblxuXG4kKHdpbmRvdykub24oJ2xvYWQnLCBmdW5jdGlvbigpe1xuICAgIHZhciBib2R5ID0gJCgnYm9keScpO1xuXG4gICAgdmFyIGluaXRWaWRlbyA9IHJlcXVpcmUoJy4vaW5pdFZpZGVvLmpzJyk7XG4gICAgdmFyIGFuaW1TbGlkZXIgPSByZXF1aXJlKCcuL3NsaWRlci5qcycpO1xuICAgIHZhciBhbmltSG9vcHMgPSByZXF1aXJlKCcuL2FuaW1Ib29wcy5qcycpO1xuICAgIHZhciBzZXRQb3NDaXJjbGUgPSByZXF1aXJlKCcuL3NldFBvc0NpcmNsZS5qcycpO1xuXG5cbiAgICAvLyBTbGlkZXJzIGRyYWdcbiAgICBpZigkKCcud3JhcHBlci1zbGlkZXJzJykubGVuZ3RoKXtcbiAgICAgICAgYW5pbVNsaWRlcigpO1xuICAgIH1cblxuICAgIC8vIExvYWQgdmlkZW9zXG4gICAgaWYoJCgnLndyYXBwZXItdmlkZW8nKS5sZW5ndGgpe1xuICAgICAgICBpbml0VmlkZW8oKTtcbiAgICB9XG5cbiAgICAvLyBBbmltIGhvb3BzXG4gICAgaWYoYm9keS5oYXNDbGFzcygnaG9tZScpKXtcbiAgICAgICAgYW5pbUhvb3BzKCQoJyNtb3JlLXRoYW4tbW9vY3MnKS5maW5kKCcuaG9vcCcpLCAyMDAsIHRydWUpO1xuICAgIH1cbiAgICBpZihib2R5Lmhhc0NsYXNzKCdwYWdlLXRlbXBsYXRlLWFib3V0Jykpe1xuICAgICAgICBhbmltSG9vcHMoJCgnI21haW4nKS5maW5kKCcuaG9vcCcpLCAzMDAsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZihib2R5Lmhhc0NsYXNzKCdwYWdlLXRlbXBsYXRlLXNvbHV0aW9ucycpKXtcbiAgICAgICAgc2V0UG9zQ2lyY2xlKCQoJyNzb2x1dGlvbnMtaGVhZGVyJykpO1xuICAgIH1cbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgICB8fFxuICAgICAgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgfHxcbiAgICAgICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgICB8fFxuICAgICAgICAgICB3aW5kb3cubXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgIHx8XG4gICAgICAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrKXsgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAvNjApOyB9O1xufSkoKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi9saWJzL2pxdWVyeS9kaXN0L2pxdWVyeS5zbGltLm1pbi5qcycpO1xudmFyIFR3ZWVuTWF4ID0gcmVxdWlyZSgnLi9saWJzL2dzYXAvc3JjL3VuY29tcHJlc3NlZC9Ud2Vlbk1heC5qcycpO1xuXG53aW5kb3cucmVxdWVzdEFuaW1GcmFtZSA9IHJlcXVpcmUoJy4vcmVxdWVzdEFuaW1GcmFtZS5qcycpO1xudmFyIHRocm90dGxlID0gcmVxdWlyZSgnLi90aHJvdHRsZS5qcycpO1xudmFyIGdldEVsdFBvc09uQ292ZXIgPSByZXF1aXJlKCcuL2dldEVsdFBvc09uQ292ZXInKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGNvbnRhaW5lcil7XG4gICAgdmFyIHBvc0NpcmNsZSwgY2lyY2xlID0gY29udGFpbmVyLmZpbmQoJz4gLmhvb3AnKTtcbiAgICB2YXIgaW1nVyA9IGNvbnRhaW5lci5kYXRhKCdpbWctd2lkdGgnKSwgaW1nSCA9IGNvbnRhaW5lci5kYXRhKCdpbWctaGVpZ2h0JyksIGltZ1JhdGlvID0gaW1nSCAvIGltZ1c7XG5cbiAgICBmdW5jdGlvbiBzZXRQb3NDaXJjbGUoKXtcbiAgICAgICAgcG9zQ2lyY2xlID0gZ2V0RWx0UG9zT25Db3Zlcihjb250YWluZXIsIGltZ1JhdGlvLCBpbWdXLCBpbWdILCBjaXJjbGUpO1xuICAgICAgICBUd2Vlbk1heC5zZXQoY2lyY2xlLCB7c2NhbGU6IHBvc0NpcmNsZVsyXSwgbGVmdDogcG9zQ2lyY2xlWzBdICsgJ3B4JywgdG9wOiBwb3NDaXJjbGVbMV0gKyAncHgnLCBmb3JjZTNEOiB0cnVlfSk7XG4gICAgfVxuXG4gICAgc2V0UG9zQ2lyY2xlKCk7XG4gICAgVHdlZW5NYXgudG8oY2lyY2xlLCAxLCB7b3BhY2l0eTogMX0pO1xuXG4gICAgJCh3aW5kb3cpLm9uKCdyZXNpemUnLCB0aHJvdHRsZShmdW5jdGlvbigpe1xuICAgICAgICByZXF1ZXN0QW5pbUZyYW1lKHNldFBvc0NpcmNsZSk7XG4gICAgfSwgNjApKTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi9saWJzL2pxdWVyeS9kaXN0L2pxdWVyeS5zbGltLm1pbi5qcycpO1xudmFyIFR3ZWVuTWF4ID0gcmVxdWlyZSgnLi9saWJzL2dzYXAvc3JjL3VuY29tcHJlc3NlZC9Ud2Vlbk1heC5qcycpO1xudmFyIERyYWdnYWJsZSA9IHJlcXVpcmUoJy4vbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvdXRpbHMvRHJhZ2dhYmxlLmpzJyk7XG52YXIgVGhyb3dQcm9wc1BsdWdpbiA9IHJlcXVpcmUoJy4vbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvcGx1Z2lucy9UaHJvd1Byb3BzUGx1Z2luLmpzJyk7XG52YXIgdGhyb3R0bGUgPSByZXF1aXJlKCcuL3Rocm90dGxlLmpzJyk7XG52YXIgaXNNb2JpbGUgPSByZXF1aXJlKCcuL2xpYnMvaXNNb2JpbGUubWluLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgY29udGFpbmVyU2xpZGVycyA9ICQoJy5jb250YWluZXItc2xpZGVycycpO1xuICAgIHZhciBpLCBqLCBuZXdYLCBjZW50ZXJTbGlkZXIsIGNlbnRlclNsaWRlLCBvcmlnaW5hbFNsaWRlciwgZ2FwTGVmdDtcbiAgICB2YXIgc2xpZGVyVGFyZ2V0LCBvcmlnaW5hbFNsaWRlclRhcmdldCwgd2lkdGhTbGlkZXJUYXJnZXQsIGNlbnRlclNsaWRlclRhcmdldCwgc2xpZGVzVGFyZ2V0LCB3aWR0aFNsaWRlc1RhcmdldCwgbmJTbGlkZXNUYXJnZXQ7XG4gICAgdmFyIHNsaWRlckNsb25lZCwgc2xpZGVyQ2xvbmVkVGFyZ2V0O1xuICAgIHZhciBlcnJvck1hcmdpbiwgbWF4TWFyZ2luLCBtaW5NYXJnaW4sIGhhbGZTbGlkZTtcbiAgICB2YXIgRHJhZ2dhYmxlRWxlbXMgPSBbXTtcbiAgICB2YXIgbmF0aXZlVG91Y2hTY3JvbGxpbmdWYXIgPSBmYWxzZTtcbiAgICB2YXIgZmlyc3RJbml0ID0gdHJ1ZTtcblxuICAgIHZhciB3aW5kb3dXaWR0aCA9ICQod2luZG93KS5vdXRlcldpZHRoKCksIHNtYWxsV2luZG93V2lkdGggPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIGNsZWFyU2xpZGVycygpe1xuICAgICAgICAkKCcuc2xpZGVzLmNsb25lZCcpLnJlbW92ZSgpO1xuICAgICAgICAkKCcuc2xpZGVzID4gbGkuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICBUd2Vlbk1heC5zZXQoWyQoJy5zbGlkZXInKSwgJCgnLmNvbnRhaW5lci1zbGlkZXJzIC5ob29wJyldLCB7Y2xlYXJQcm9wczogJ3RyYW5zZm9ybSd9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3R1YWxpemVTbGlkZXIoc2xpZGVyVG9BY3R1YWxpemUsIHNsaWRlclRoaXMpe1xuICAgICAgICBzbGlkZXJUYXJnZXQgPSBzbGlkZXJUb0FjdHVhbGl6ZTtcbiAgICAgICAgc2xpZGVyQ2xvbmVkVGFyZ2V0ID0gc2xpZGVyVGFyZ2V0LmZpbmQoJy5zbGlkZXMuY2xvbmVkJyk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVyVGFyZ2V0ID0gc2xpZGVyVGFyZ2V0LmZpbmQoJy5zbGlkZXM6bm90KC5jbG9uZWQpJyk7XG4gICAgICAgIHNsaWRlc1RhcmdldCA9IG9yaWdpbmFsU2xpZGVyVGFyZ2V0LmZpbmQoJz4gbGknKTtcbiAgICAgICAgd2lkdGhTbGlkZXNUYXJnZXQgPSBzbGlkZXNUYXJnZXQub3V0ZXJXaWR0aCgpO1xuICAgICAgICBuYlNsaWRlc1RhcmdldCA9IHNsaWRlc1RhcmdldC5sZW5ndGg7XG4gICAgICAgIHdpZHRoU2xpZGVyVGFyZ2V0ID0gbmJTbGlkZXNUYXJnZXQqd2lkdGhTbGlkZXNUYXJnZXQ7XG4gICAgICAgIG5ld1ggPSBzbGlkZXJUaGlzLng7XG5cbiAgICAgICAgaWYobmJTbGlkZXNUYXJnZXQgJSAyID09PSAwKXtcbiAgICAgICAgICAgIGdhcExlZnQgPSB3aWR0aFNsaWRlc1RhcmdldC8yO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIGdhcExlZnQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYobmV3WCA+IDApe1xuICAgICAgICBpZihuZXdYID4gZ2FwTGVmdCl7XG4gICAgICAgICAgICAvLyBHb2luZyBsZWZ0XG4gICAgICAgICAgICBUd2Vlbk1heC5zZXQoc2xpZGVyQ2xvbmVkVGFyZ2V0LCB7eDogLXdpZHRoU2xpZGVyVGFyZ2V0KydweCcsIGZvcmNlM0Q6IHRydWV9KTtcbiAgICAgICAgICAgIGlmKG5ld1ggPiB3aWR0aFNsaWRlclRhcmdldCl7XG4gICAgICAgICAgICAgICAgbmV3WCAtPSB3aWR0aFNsaWRlclRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAvLyBHb2luZyByaWdodFxuICAgICAgICAgICAgVHdlZW5NYXguc2V0KHNsaWRlckNsb25lZFRhcmdldCwge3g6IHdpZHRoU2xpZGVyVGFyZ2V0KydweCcsIGZvcmNlM0Q6IHRydWV9KTtcbiAgICAgICAgICAgIGlmKG5ld1ggPCAtd2lkdGhTbGlkZXJUYXJnZXQpe1xuICAgICAgICAgICAgICAgIG5ld1ggKz0gd2lkdGhTbGlkZXJUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYobmV3WCAhPT0gdGhpcy54KXtcbiAgICAgICAgICAgIFR3ZWVuTWF4LnNldChzbGlkZXJUYXJnZXQsIHt4OiBuZXdYLCBmb3JjZTNEOiB0cnVlLCBvdmVyd3JpdGU6IGZhbHNlfSk7XG4gICAgICAgICAgICBzbGlkZXJUaGlzLnggPSBuZXdYO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUm90YXRlIHN2Z1xuICAgICAgICBUd2Vlbk1heC5zZXQoc2xpZGVyVGFyZ2V0LnBhcmVudHMoJy5jb250YWluZXItc2xpZGVycycpLmZpbmQoJy5ob29wJyksIHtyb3RhdGlvbjogbmV3WC8yLCBmb3JjZTNEOiB0cnVlLCBvdmVyd3JpdGU6IGZhbHNlfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVzYWN0aXZhdGVTbGlkZSgpe1xuICAgICAgICBhY3R1YWxpemVTbGlkZXIoJCh0aGlzLnRhcmdldCksIHRoaXMpO1xuICAgICAgICAkKHRoaXMudGFyZ2V0KS5maW5kKCcuc2xpZGVzID4gbGknKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWN0aXZhdGVTbGlkZSgpe1xuICAgICAgICBhY3R1YWxpemVTbGlkZXIoJCh0aGlzLnRhcmdldCksIHRoaXMpO1xuICAgICAgICAvLyBhY3RpdmF0ZSB0aGUgY2VudGVyZWQgc2xpZGVcbiAgICAgICAgc2xpZGVyVGFyZ2V0ID0gJCh0aGlzLnRhcmdldCk7XG4gICAgICAgIGNlbnRlclNsaWRlclRhcmdldCA9IHNsaWRlclRhcmdldC5wYXJlbnRzKCcuY29udGFpbmVyLXNsaWRlcnMnKS53aWR0aCgpLzI7XG4gICAgICAgIHNsaWRlc1RhcmdldCA9IHNsaWRlclRhcmdldC5maW5kKCcuc2xpZGVzID4gbGknKTtcbiAgICAgICAgZXJyb3JNYXJnaW4gPSBzbGlkZXNUYXJnZXQub3V0ZXJXaWR0aCgpLzQ7XG4gICAgICAgIG1heE1hcmdpbiA9IGNlbnRlclNsaWRlclRhcmdldCtlcnJvck1hcmdpbjtcbiAgICAgICAgbWluTWFyZ2luID0gY2VudGVyU2xpZGVyVGFyZ2V0LWVycm9yTWFyZ2luO1xuICAgICAgICBoYWxmU2xpZGUgPSBzbGlkZXNUYXJnZXQub3V0ZXJXaWR0aCgpLzI7XG5cbiAgICAgICAgc2xpZGVzVGFyZ2V0LmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGNlbnRlclNsaWRlID0gTWF0aC5mbG9vcigkKHRoaXMpLm9mZnNldCgpLmxlZnQgKyBoYWxmU2xpZGUpO1xuICAgICAgICAgICAgaWYoY2VudGVyU2xpZGUgPj0gbWluTWFyZ2luICYmIGNlbnRlclNsaWRlIDw9IG1heE1hcmdpbil7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlU2xpZGVJbml0aWFsKGNvbnRhaW5lclMsIHNsaWRlc1MsIHNsaWRlc1dpZHRoUyl7XG4gICAgICAgIGNlbnRlclNsaWRlciA9IGNvbnRhaW5lclMub3V0ZXJXaWR0aCgpLzI7XG4gICAgICAgIGVycm9yTWFyZ2luID0gc2xpZGVzUy5vdXRlcldpZHRoKCkvMjtcbiAgICAgICAgbWF4TWFyZ2luID0gY2VudGVyU2xpZGVyK2Vycm9yTWFyZ2luO1xuICAgICAgICBtaW5NYXJnaW4gPSBjZW50ZXJTbGlkZXItZXJyb3JNYXJnaW47XG5cbiAgICAgICAgc2xpZGVzUy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBjZW50ZXJTbGlkZSA9IE1hdGguZmxvb3IoJCh0aGlzKS5vZmZzZXQoKS5sZWZ0ICsgc2xpZGVzV2lkdGhTLzIpO1xuICAgICAgICAgICAgLy8gaWYoY2VudGVyU2xpZGUgPT09IGNlbnRlclNsaWRlcil7XG4gICAgICAgICAgICAvLyAgICAgJCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBpZihjZW50ZXJTbGlkZSA+PSBtaW5NYXJnaW4gJiYgY2VudGVyU2xpZGUgPD0gbWF4TWFyZ2luKXtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlU2xpZGVyKCl7XG4gICAgICAgIGFjdHVhbGl6ZVNsaWRlcigkKHRoaXMudGFyZ2V0KSwgdGhpcyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdFNsaWRlcihjb250YWluZXIsIGluZGV4U2xpZGVyKXtcbiAgICAgICAgdmFyIHdyYXBwZXJTbGlkZXJzID0gY29udGFpbmVyLmZpbmQoJy53cmFwcGVyLXNsaWRlcnMnKTtcbiAgICAgICAgdmFyIHNsaWRlcnMgPSBjb250YWluZXIuZmluZCgnLnNsaWRlcicpLCBzbGlkZXIgPSBjb250YWluZXIuZmluZCgnLnNsaWRlcycpO1xuICAgICAgICB2YXIgc2xpZGVzID0gc2xpZGVyLmZpbmQoJz4gbGknKSwgbmJTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICAgICAgICB2YXIgc2xpZGVXaWR0aCA9IHNsaWRlcy5vdXRlcldpZHRoKCksIHNsaWRlSGVpZ2h0ID0gc2xpZGVzLm91dGVySGVpZ2h0KCksIGhhbGZTbGlkZXMgPSBuYlNsaWRlcy8yO1xuICAgICAgICB2YXIgaGFsZlJpZ2h0LCBoYWxmTGVmdCwgd2lkdGhTbGlkZXIgPSBuYlNsaWRlcypzbGlkZVdpZHRoLCBtaWRkbGVTbGlkZXIgPSB3aWR0aFNsaWRlci8yIC0gc2xpZGVXaWR0aC8yO1xuXG4gICAgICAgIC8vIGlmKHNsaWRlcy5oYXNDbGFzcygnYWN0aXZlJykpe1xuICAgICAgICAvLyAgICAgd3JhcHBlclNsaWRlcnMuZmluZCgnLnNsaWRlcy5jbG9uZWQnKS5yZW1vdmUoKTtcbiAgICAgICAgLy8gICAgIHNsaWRlci5maW5kKCc+IGxpLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgLy8gICAgIFR3ZWVuTWF4LnNldChbc2xpZGVycywgY29udGFpbmVyLmZpbmQoJy5ob29wJyldLCB7Y2xlYXJQcm9wczogJ3RyYW5zZm9ybSd9KTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIGlmKG5iU2xpZGVzICUgMiA9PT0gMCl7XG4gICAgICAgICAgICBoYWxmUmlnaHQgPSBoYWxmU2xpZGVzO1xuICAgICAgICAgICAgaGFsZkxlZnQgPSBoYWxmU2xpZGVzO1xuICAgICAgICAgICAgLy8gQ2VudGVyIHRoZSBtaWRkbGUgc2xpZGVcbiAgICAgICAgICAgIC8vVHdlZW5NYXguc2V0KHdyYXBwZXJTbGlkZXJzLCB7cGFkZGluZ1JpZ2h0OiBzbGlkZVdpZHRoKydweCd9KTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBoYWxmUmlnaHQgPSBNYXRoLmNlaWwoaGFsZlNsaWRlcyk7XG4gICAgICAgICAgICBoYWxmTGVmdCA9IG5iU2xpZGVzIC0gaGFsZlJpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRHVwbGljYXRlIGxpc3RcbiAgICAgICAgc2xpZGVyLmNsb25lKCkuYWRkQ2xhc3MoJ2Nsb25lZCcpLmFwcGVuZFRvKHNsaWRlcnMpO1xuICAgICAgICBzbGlkZXIgPSBjb250YWluZXIuZmluZCgnLnNsaWRlcycpO1xuICAgICAgICBzbGlkZXMgPSBzbGlkZXIuZmluZCgnPiBsaScpO1xuICAgICAgICBzbGlkZXJDbG9uZWQgPSBjb250YWluZXIuZmluZCgnLnNsaWRlcy5jbG9uZWQnKTtcbiAgICAgICAgb3JpZ2luYWxTbGlkZXIgPSBjb250YWluZXIuZmluZCgnLnNsaWRlczpub3QoLmNsb25lZCknKTtcblxuICAgICAgICAvLyBSZWFycmFuZ2UgbGlzdFxuICAgICAgICBsZWZ0U2xpZGVzU3RhcnQgPSBtaWRkbGVTbGlkZXIgLSBoYWxmTGVmdCpzbGlkZVdpZHRoO1xuICAgICAgICBUd2Vlbk1heC5zZXQoW3NsaWRlciwgd3JhcHBlclNsaWRlcnNdLCB7d2lkdGg6IHdpZHRoU2xpZGVyKydweCd9KTtcbiAgICAgICAgc2xpZGVyLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaTxoYWxmUmlnaHQ7IGkrKyl7XG4gICAgICAgICAgICAgICAgVHdlZW5NYXguc2V0KCQodGhpcykuZmluZCgnPmxpJykuZXEoaSksIHtsZWZ0OiBtaWRkbGVTbGlkZXIraSpzbGlkZVdpZHRoKydweCd9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihqID0gMDsgajxoYWxmTGVmdDsgaisrKXtcbiAgICAgICAgICAgICAgICBUd2Vlbk1heC5zZXQoJCh0aGlzKS5maW5kKCc+bGknKS5lcShoYWxmUmlnaHQraiksIHtsZWZ0OiBsZWZ0U2xpZGVzU3RhcnQraipzbGlkZVdpZHRoKydweCd9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIFR3ZWVuTWF4LnNldChzbGlkZXJDbG9uZWQsIHt4OiB3aWR0aFNsaWRlcisncHgnLCBmb3JjZTNEOiB0cnVlfSk7XG4gICAgICAgIFR3ZWVuTWF4LnNldChzbGlkZXIsIHttYXJnaW5MZWZ0OiAtd2lkdGhTbGlkZXIvMisncHgnfSk7XG4gICAgICAgIFR3ZWVuTWF4LnNldChjb250YWluZXIsIHtvcGFjaXR5OiAxfSk7XG5cbiAgICAgICAgYWN0aXZhdGVTbGlkZUluaXRpYWwoY29udGFpbmVyLCBzbGlkZXMsIHNsaWRlV2lkdGgpO1xuXG4gICAgICAgIC8vIERyYWdnYWJsZVxuICAgICAgICBpZihpc01vYmlsZS5hbnkpe1xuICAgICAgICAgICAgbmF0aXZlVG91Y2hTY3JvbGxpbmdWYXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIERyYWdnYWJsZUVsZW1zW2luZGV4U2xpZGVyXSA9IERyYWdnYWJsZS5jcmVhdGUoc2xpZGVycywge1xuICAgICAgICAgICAgdHlwZTogJ3gnLFxuICAgICAgICAgICAgdHJpZ2dlcjogd3JhcHBlclNsaWRlcnMsXG4gICAgICAgICAgICB6SW5kZXhCb29zdDogZmFsc2UsXG4gICAgICAgICAgICBkcmFnQ2xpY2thYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGRyYWdSZXNpc3RhbmNlOiAwLFxuICAgICAgICAgICAgZWRnZVJlc2lzdGFuY2U6IDAuNjUsXG4gICAgICAgICAgICB0aHJvd1Byb3BzOiB0cnVlLFxuICAgICAgICAgICAgbWluaW11bU1vdmVtZW50OiAwLFxuICAgICAgICAgICAgYWxsb3dOYXRpdmVUb3VjaFNjcm9sbGluZzogbmF0aXZlVG91Y2hTY3JvbGxpbmdWYXIsXG4gICAgICAgICAgICBvbkRyYWc6IHVwZGF0ZVNsaWRlcixcbiAgICAgICAgICAgIG9uVGhyb3dVcGRhdGU6IHVwZGF0ZVNsaWRlcixcbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBkZXNhY3RpdmF0ZVNsaWRlLFxuICAgICAgICAgICAgb25UaHJvd0NvbXBsZXRlOiBhY3RpdmF0ZVNsaWRlLFxuICAgICAgICAgICAgc25hcDoge1xuICAgICAgICAgICAgICAgIHg6IGZ1bmN0aW9uKGVuZFZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoZW5kVmFsdWUgLyBzbGlkZVdpZHRoKSB8IDApICogc2xpZGVXaWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnRhaW5lclNsaWRlcnMuZWFjaChmdW5jdGlvbihpKXtcbiAgICAgICAgaW5pdFNsaWRlcigkKHRoaXMpLCBpKTtcbiAgICB9KTtcblxuICAgIGlmKHdpbmRvd1dpZHRoIDw9IDU4MCl7XG4gICAgICAgIHNtYWxsV2luZG93V2lkdGggPSB0cnVlO1xuICAgIH1cblxuICAgICQod2luZG93KS5vbigncmVzaXplJywgdGhyb3R0bGUoZnVuY3Rpb24oKXtcbiAgICAgICAgd2luZG93V2lkdGggPSAkKHdpbmRvdykub3V0ZXJXaWR0aCgpO1xuICAgICAgICBpZih3aW5kb3dXaWR0aCA+IDU4MCAmJiBzbWFsbFdpbmRvd1dpZHRoKXtcbiAgICAgICAgICAgIGNsZWFyU2xpZGVycygpO1xuICAgICAgICAgICAgY29udGFpbmVyU2xpZGVycy5lYWNoKGZ1bmN0aW9uKGkpe1xuICAgICAgICAgICAgICAgIGluaXRTbGlkZXIoJCh0aGlzKSwgaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNtYWxsV2luZG93V2lkdGggPSBmYWxzZTtcbiAgICAgICAgfWVsc2UgaWYod2luZG93V2lkdGggPD0gNTgwICYmICFzbWFsbFdpbmRvd1dpZHRoKXtcbiAgICAgICAgICAgIGNsZWFyU2xpZGVycygpO1xuICAgICAgICAgICAgY29udGFpbmVyU2xpZGVycy5lYWNoKGZ1bmN0aW9uKGkpe1xuICAgICAgICAgICAgICAgIGluaXRTbGlkZXIoJCh0aGlzKSwgaSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNtYWxsV2luZG93V2lkdGggPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSwgNjApKTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi9saWJzL2pxdWVyeS9kaXN0L2pxdWVyeS5zbGltLm1pbi5qcycpO1xudmFyIENvb2tpZXMgPSByZXF1aXJlKCcuL2xpYnMvanMtY29va2llL3NyYy9qcy5jb29raWUuanMnKTtcbnZhciBUd2Vlbk1heCA9IHJlcXVpcmUoJy4vbGlicy9nc2FwL3NyYy91bmNvbXByZXNzZWQvVHdlZW5NYXguanMnKTtcbnZhciBDdXN0b21FYXNlID0gcmVxdWlyZSgnLi9saWJzL2dzYXAvc3JjL3VuY29tcHJlc3NlZC9lYXNpbmcvQ3VzdG9tRWFzZS5qcycpO1xuXG53aW5kb3cucmVxdWVzdEFuaW1GcmFtZSA9IHJlcXVpcmUoJy4vcmVxdWVzdEFuaW1GcmFtZS5qcycpO1xudmFyIHRocm90dGxlID0gcmVxdWlyZSgnLi90aHJvdHRsZS5qcycpO1xudmFyIGdldEVsdFBvc09uQ292ZXIgPSByZXF1aXJlKCcuL2dldEVsdFBvc09uQ292ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihib2R5LCBibG9jVG9wLCB0aGVtZUNvbG9ycyl7XG4gICAgdmFyIGJsb2NSZXZlbCA9ICQoJyNibG9jLXJldmVsYXRpb24nKTtcbiAgICB2YXIgc2xpZGVzID0gY3VycmVudFNsaWRlID0gYmxvY1RvcC5maW5kKCcuc2xpZGUtb24nKSwgb2xkU2xpZGU7XG4gICAgdmFyIGN1cnJlbnRUeHQgPSBibG9jUmV2ZWwuZmluZCgnLnR4dC1vbicpO1xuICAgIHZhciBiYXNlbGluZSA9IGN1cnJlbnRTbGlkZS5maW5kKCcuYmFzZWxpbmUnKSwgYmFzZWxpbmVTZWNvbmQgPSBjdXJyZW50U2xpZGUuZmluZCgnLmJhc2VsaW5lLXNlY29uZCcpO1xuICAgIHZhciBpbWdXID0gYmxvY1RvcC5kYXRhKCdpbWctd2lkdGgnKSwgaW1nSCA9IGJsb2NUb3AuZGF0YSgnaW1nLWhlaWdodCcpLCBpbWdSYXRpbyA9IGltZ0ggLyBpbWdXO1xuICAgIHZhciBjaXJjbGUgPSBjdXJyZW50U2xpZGUuZmluZCgnLmhvb3AnKTtcbiAgICB2YXIgbmV3UG9zQmFzZWxpbmUsIG5ld1Bvc0NpcmNsZSwgY29udGFpbmVyVyA9IGJsb2NUb3Aud2lkdGgoKSwgZ3V0dGVyID0gMjA7XG4gICAgdmFyIGhlYWRlciA9ICQoJyNoZWFkZXInKTtcbiAgICB2YXIgZmF2aWNvbnMgPSAkKCcuZmF2aWNvbicpLCBjdXJyZW50Q29sb3IgPSBib2R5LmRhdGEoJ3RoZW1lJyk7XG4gICAgdmFyIG5hdiA9IGJsb2NUb3AuZmluZCgnI3NsaWRlci1ob21lLW5hdicpLCBzdmdIb29wID0gJCgnI2dyYWRpZW50LWhvb3AnKTtcbiAgICB2YXIgc2xpZGVzID0gYmxvY1RvcC5maW5kKCcuc2xpZGUtaG9tZScpLCBuYlNsaWRlcyA9IHNsaWRlcy5sZW5ndGgsIHNsaWRlc1R4dCA9IGJsb2NSZXZlbC5maW5kKCcuc2xpZGUtaG9tZS10eHQnKTtcbiAgICB2YXIgb2xkRGlyTmIsIHRpbWVPdXQsIHNjcm9sbFRvcDtcbiAgICAvLyB2YXIgZWFzZSA9IEN1c3RvbUVhc2UuY3JlYXRlKCdjdXN0b20nLCAnTTAsMCxDMCwwLjUsMC4wMDUsMC43MywwLjExLDAuODUsMC4yMiwwLjk3NSwwLjUwNSwxLDEsMScpO1xuICAgIHZhciBlYXNlID0gQ3VzdG9tRWFzZS5jcmVhdGUoJ2N1c3RvbScsICdNMCwwIEMwLDAgMC4zODIsMCAwLjU0NCwwLjIgMC42NTUsMC4zMzcgMC43LDAuNzUxIDAuOCwwLjkgMC44NzgsMS4wMTYgMSwxIDEsMScpO1xuICAgIHZhciB0d2VlbkluID0ge3g6ICcwcHgnLCBkZWxheTogMC4zLCBmb3JjZTNEOiB0cnVlLCBlYXNlOiBQb3dlcjIuZWFzZU91dH07XG5cblxuICAgIGZ1bmN0aW9uIHNldFBvc0NpcmNsZSgpe1xuICAgICAgICBuZXdQb3NDaXJjbGUgPSBnZXRFbHRQb3NPbkNvdmVyKGJsb2NUb3AsIGltZ1JhdGlvLCBpbWdXLCBpbWdILCBjaXJjbGUpO1xuICAgICAgICBUd2Vlbk1heC5zZXQoY2lyY2xlLCB7c2NhbGU6IG5ld1Bvc0NpcmNsZVsyXSwgbGVmdDogbmV3UG9zQ2lyY2xlWzBdICsgJ3B4JywgdG9wOiBuZXdQb3NDaXJjbGVbMV0gKyAncHgnLCBmb3JjZTNEOiB0cnVlfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UG9zQmFzZWxpbmUoKXtcbiAgICAgICAgbmV3UG9zQmFzZWxpbmUgPSBnZXRFbHRQb3NPbkNvdmVyKGJsb2NUb3AsIGltZ1JhdGlvLCBpbWdXLCBpbWdILCBiYXNlbGluZSk7XG5cbiAgICAgICAgVHdlZW5NYXguc2V0KGJhc2VsaW5lLCB7c2NhbGU6IG5ld1Bvc0Jhc2VsaW5lWzJdLCBsZWZ0OiBuZXdQb3NCYXNlbGluZVswXSArICdweCcsIHRvcDogbmV3UG9zQmFzZWxpbmVbMV0gKyAncHgnLCBmb3JjZTNEOiB0cnVlLCBvbkNvbXBsZXRlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYobmV3UG9zQmFzZWxpbmVbMF0gPCBndXR0ZXIgfHwgbmV3UG9zQmFzZWxpbmVbMF0gKyBiYXNlbGluZS53aWR0aCgpICsgZ3V0dGVyKjIgPiBjb250YWluZXJXIHx8IG5ld1Bvc0Jhc2VsaW5lWzFdIDwgaGVhZGVyLmhlaWdodCgpKXtcbiAgICAgICAgICAgICAgICBiYXNlbGluZS5hZGRDbGFzcygnb2ZmJyk7XG4gICAgICAgICAgICAgICAgYmFzZWxpbmVTZWNvbmQuYWRkQ2xhc3MoJ29uJyk7XG4gICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICBiYXNlbGluZS5yZW1vdmVDbGFzcygnb2ZmJyk7XG4gICAgICAgICAgICAgICAgYmFzZWxpbmVTZWNvbmQucmVtb3ZlQ2xhc3MoJ29uJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH19KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTbGlkZXJUaW1lb3V0KCl7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lT3V0KTtcblxuICAgICAgICB0aW1lT3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgc2xpZGUoY3VycmVudFNsaWRlLm5leHQoJy5zbGlkZS1ob21lJyksIGN1cnJlbnRUeHQubmV4dCgnLnNsaWRlLWhvbWUtdHh0JyksIDAsICduZXh0Jyk7XG4gICAgICAgIH0sIDYwMDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFRoZW1lKCl7XG4gICAgICAgIG5hdi5maW5kKCcuY3VycmVudCcpLmh0bWwoY3VycmVudFNsaWRlLmluZGV4KCcuc2xpZGUtaG9tZScpICsgMSk7XG5cbiAgICAgICAgYm9keS5yZW1vdmVDbGFzcygndGhlbWUtJytjdXJyZW50Q29sb3IpLmFkZENsYXNzKCd0aGVtZS0nK2N1cnJlbnRTbGlkZS5kYXRhKCdjb2xvcicpKS5kYXRhKCd0aGVtZScsIGN1cnJlbnRTbGlkZS5kYXRhKCdjb2xvcicpKTtcbiAgICAgICAgc3ZnSG9vcC5maW5kKCdbZGF0YS10aGVtZS1tYWluXScpLmF0dHIoJ3N0b3AtY29sb3InLCB0aGVtZUNvbG9yc1tjdXJyZW50U2xpZGUuZGF0YSgnY29sb3InKV1bMF0pO1xuICAgICAgICBzdmdIb29wLmZpbmQoJ1tkYXRhLXRoZW1lLXNlY29uZF0nKS5hdHRyKCdzdG9wLWNvbG9yJywgdGhlbWVDb2xvcnNbY3VycmVudFNsaWRlLmRhdGEoJ2NvbG9yJyldWzFdKTtcblxuICAgICAgICAvLyBGYXZpY29ucyB1cmxcbiAgICAgICAgZmF2aWNvbnMuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGhpcy5ocmVmID0gdGhpcy5ocmVmLnJlcGxhY2UoY3VycmVudENvbG9yLCBib2R5LmRhdGEoJ3RoZW1lJykpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhbmltU2xpZGUob2xkRGlyLCBuZXdEaXIpe1xuICAgICAgICBUd2Vlbk1heC50byhvbGRTbGlkZSwgMC43LCB7eDogMTAwKm9sZERpciArICclJywgZGVsYXk6IDAuMywgZm9yY2UzRDogdHJ1ZSwgZWFzZTogZWFzZX0pO1xuICAgICAgICBUd2Vlbk1heC5mcm9tVG8oY3VycmVudFNsaWRlLCAwLjcsIHt4OiAxMDAqbmV3RGlyICsgJyUnfSwge3g6ICcwJScsIGRlbGF5OiAwLjMsIGZvcmNlM0Q6IHRydWUsIGVhc2U6IGVhc2V9KTtcblxuICAgICAgICBUd2Vlbk1heC5mcm9tVG8oY3VycmVudFNsaWRlLmZpbmQoJy5zbGlkZXItcGxhbnMnKSwgMiwge3g6IG5ld0Rpcipjb250YWluZXJXLzUrJ3B4J30sIHR3ZWVuSW4pO1xuICAgICAgICBUd2Vlbk1heC5mcm9tVG8oY2lyY2xlLCAyLjUsIHt4OiBuZXdEaXIqY29udGFpbmVyVy81KydweCd9LCB0d2VlbkluKTtcbiAgICAgICAgVHdlZW5NYXguZnJvbVRvKFtiYXNlbGluZS5maW5kKCc+IHNwYW4nKS5lcSgwKSwgYmFzZWxpbmVTZWNvbmQuZmluZCgnPiBzcGFuJyldLCAzLCB7eDogbmV3RGlyKmNvbnRhaW5lclcvNSsncHgnfSwgdHdlZW5Jbik7XG4gICAgICAgIFR3ZWVuTWF4LmZyb21UbyhiYXNlbGluZS5maW5kKCc+IHNwYW4nKS5lcSgxKSwgMy41LCB7eDogbmV3RGlyKmNvbnRhaW5lclcvNSsncHgnfSwgdHdlZW5Jbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2xpZGUobmV4dFNsaWRlLCBuZXh0VHh0LCBsYXN0U2xpZGVJbmRleCwgZGlyKXtcbiAgICAgICAgbmV4dFNsaWRlLmxlbmd0aCA/IG5leHRTbGlkZS5hZGRDbGFzcygnc2xpZGUtb24nKSA6IHNsaWRlcy5lcShsYXN0U2xpZGVJbmRleCkuYWRkQ2xhc3MoJ3NsaWRlLW9uJyk7XG4gICAgICAgIGN1cnJlbnRTbGlkZS5yZW1vdmVDbGFzcygnc2xpZGUtb24nKTtcblxuICAgICAgICBuZXh0VHh0Lmxlbmd0aCA/IG5leHRUeHQuYWRkQ2xhc3MoJ3R4dC1vbicpIDogc2xpZGVzVHh0LmVxKGxhc3RTbGlkZUluZGV4KS5hZGRDbGFzcygndHh0LW9uJyk7XG4gICAgICAgIGN1cnJlbnRUeHQucmVtb3ZlQ2xhc3MoJ3R4dC1vbicpO1xuXG4gICAgICAgIG9sZFNsaWRlID0gY3VycmVudFNsaWRlO1xuICAgICAgICBjdXJyZW50U2xpZGUgPSBibG9jVG9wLmZpbmQoJy5zbGlkZS1vbicpO1xuICAgICAgICBjdXJyZW50VHh0ID0gYmxvY1JldmVsLmZpbmQoJy50eHQtb24nKTtcbiAgICAgICAgY3VycmVudENvbG9yID0gYm9keS5kYXRhKCd0aGVtZScpO1xuICAgICAgICBiYXNlbGluZSA9IGN1cnJlbnRTbGlkZS5maW5kKCcuYmFzZWxpbmUnKTtcbiAgICAgICAgYmFzZWxpbmVTZWNvbmQgPSBjdXJyZW50U2xpZGUuZmluZCgnLmJhc2VsaW5lLXNlY29uZCcpO1xuICAgICAgICBjaXJjbGUgPSBjdXJyZW50U2xpZGUuZmluZCgnLmhvb3AnKTtcblxuICAgICAgICBvbGREaXJOYiA9IGRpciA9PT0gJ25leHQnID8gLTEgOiAxO1xuXG4gICAgICAgIFR3ZWVuTWF4LnRvKFtcbiAgICAgICAgICAgICAgICBvbGRTbGlkZS5maW5kKCcuaG9vcCcpLFxuICAgICAgICAgICAgICAgIG9sZFNsaWRlLmZpbmQoJy5iYXNlbGluZScpLmZpbmQoJz4gc3BhbicpLFxuICAgICAgICAgICAgICAgIG9sZFNsaWRlLmZpbmQoJy5iYXNlbGluZS1zZWNvbmQnKS5maW5kKCc+IHNwYW4nKSxcbiAgICAgICAgICAgICAgICBvbGRTbGlkZS5maW5kKCcuc2xpZGVyLXBsYW5zJylcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAwLjcsIHt4OiBvbGREaXJOYiozMDAgKyAncHgnLCBmb3JjZTNEOiB0cnVlLCBlYXNlOiBQb3dlcjIuZWFzZUluLCBvbkNvbXBsZXRlOiBzZXRUaGVtZX1cbiAgICAgICAgKTtcblxuICAgICAgICBzZXRQb3NCYXNlbGluZSgpO1xuICAgICAgICBzZXRQb3NDaXJjbGUoKTtcbiAgICAgICAgZGlyID09PSAnbmV4dCcgPyBhbmltU2xpZGUoLTEsIDEpIDogYW5pbVNsaWRlKDEsIC0xKTtcbiAgICAgICAgc2V0U2xpZGVyVGltZW91dCgpO1xuXG4gICAgICAgIENvb2tpZXMuc2V0KCd0aGluay1kZWNsaScsIGN1cnJlbnRTbGlkZS5pbmRleCgnLnNsaWRlLWhvbWUnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U2xpZGVyKCl7XG4gICAgICAgIFR3ZWVuTWF4LnNldChzbGlkZXMsIHt4OiAnMTAwJScsIG9wYWNpdHk6IDEsIGZvcmNlM0Q6IHRydWV9KTtcbiAgICAgICAgVHdlZW5NYXguc2V0KGN1cnJlbnRTbGlkZSwge3g6ICcwJScsIGZvcmNlM0Q6IHRydWV9KTtcblxuICAgICAgICBzZXRUaGVtZSgpO1xuICAgICAgICBzZXRTbGlkZXJUaW1lb3V0KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tJZkluVmlldygpe1xuICAgICAgICBzY3JvbGxUb3AgPSAkKGRvY3VtZW50KS5zY3JvbGxUb3AoKTtcbiAgICAgICAgc2Nyb2xsVG9wID4gYmxvY1RvcC5oZWlnaHQoKSAtIDUwMCA/IGNsZWFyVGltZW91dCh0aW1lT3V0KSA6IHNldFNsaWRlclRpbWVvdXQoKTtcbiAgICB9XG5cblxuICAgIG5hdi5vbignY2xpY2snLCAnLnByZXYnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZU91dCk7XG4gICAgICAgIHNsaWRlKGN1cnJlbnRTbGlkZS5wcmV2KCcuc2xpZGUtaG9tZScpLCBjdXJyZW50VHh0LnByZXYoJy5zbGlkZS1ob21lLXR4dCcpLCBuYlNsaWRlcy0xLCAncHJldicpO1xuICAgIH0pLm9uKCdjbGljaycsICcubmV4dCcsIGZ1bmN0aW9uKGUpe1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lT3V0KTtcbiAgICAgICAgc2xpZGUoY3VycmVudFNsaWRlLm5leHQoJy5zbGlkZS1ob21lJyksIGN1cnJlbnRUeHQubmV4dCgnLnNsaWRlLWhvbWUtdHh0JyksIDAsICduZXh0Jyk7XG4gICAgfSk7XG5cblxuICAgICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgc2V0UG9zQmFzZWxpbmUoKTtcbiAgICAgICAgc2V0UG9zQ2lyY2xlKCk7XG4gICAgICAgIHNldFNsaWRlcigpO1xuXG4gICAgfSkub24oJ3Jlc2l6ZScsIHRocm90dGxlKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgY29udGFpbmVyVyA9IGJsb2NUb3Aud2lkdGgoKTtcblxuICAgICAgICByZXF1ZXN0QW5pbUZyYW1lKHNldFBvc0Jhc2VsaW5lKTtcbiAgICAgICAgcmVxdWVzdEFuaW1GcmFtZShzZXRQb3NDaXJjbGUpO1xuXG4gICAgfSwgNjApKS5vbignYmx1cicsIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVPdXQpO1xuXG4gICAgfSkub24oJ2ZvY3VzJywgc2V0U2xpZGVyVGltZW91dCk7XG5cbiAgICAkKGRvY3VtZW50KS5vbignc2Nyb2xsJywgdGhyb3R0bGUoZnVuY3Rpb24oKXtcbiAgICAgICAgcmVxdWVzdEFuaW1GcmFtZShjaGVja0lmSW5WaWV3KTtcbiAgICB9LCA0MCkpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXkpe1xuICAgIHZhciBsYXN0LCB0aW1lcjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCl7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgbm93ID0gK25ldyBEYXRlKCksIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGlmKGxhc3QgJiYgbm93IDwgbGFzdCArIGRlbGF5KXtcbiAgICAgICAgICAgIC8vIGxlIGTDqWxhaSBuJ2VzdCBwYXMgw6ljb3Vsw6kgb24gcmVzZXQgbGUgdGltZXJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCl7XG4gICAgICAgICAgICAgICAgbGFzdCA9IG5vdztcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICBsYXN0ID0gbm93O1xuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuIl19
