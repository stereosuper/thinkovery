!function t(e,i,n){function r(o,a){if(!i[o]){if(!e[o]){var l="function"==typeof require&&require;if(!a&&l)return l(o,!0);if(s)return s(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var u=i[o]={exports:{}};e[o][0].call(u.exports,function(t){var i=e[o][1][t];return r(i?i:t)},u,u.exports,t,e,i,n)}return i[o].exports}for(var s="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");e.exports=function(t){function e(t,e,i){return[t.data("x")-e,t.data("y")-i]}var i,s;t.on("mouseenter",".btn, #menu-main a",function(t){i=n(this).find("> i"),i.data("x",i.position().left+i.width()/2).data("y",i.position().top+i.height()/2),n(this).data("x",n(this).offset().left).data("y",n(this).offset().top),s=e(i,t.pageX-n(this).data("x"),t.pageY-n(this).data("y")),r.to(i,.1,{x:-s[0]+"px",y:-s[1]+"px"})}).on("mousemove",".btn, #menu-main a",function(t){i=n(this).find("> i"),s=e(i,t.pageX-n(this).data("x"),t.pageY-n(this).data("y")),r.isTweening(i)||r.set(i,{x:-s[0]+"px",y:-s[1]+"px"})}).on("mouseleave",".btn, #menu-main a",function(){r.to(n(this).find("> i"),.3,{x:"0px",y:"0px"})})}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13}],2:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");window.requestAnimFrame=t("./requestAnimFrame.js");var s=t("./throttle.js");e.exports=function(){function t(){p.addClass("on"),d.hasClass("on")||(d.addClass("on"),h>580&&(r.to(m,.3,{opacity:1}),r.set(g,{opacity:0})))}function e(){p.removeClass("on"),d.hasClass("on")&&(d.removeClass("on"),h>580&&(r.to(m,.3,{opacity:0}),r.set(g,{opacity:1})))}function i(){f=n(document).scrollTop(),a=(f-10)/(c-u),l=227.7*a,f>10?(t(),h>580&&r.set(m,{x:l+"px",force3D:!0})):e()}function o(){h=n(window).outerWidth(),u=n(window).height(),c=n(document).height()}var a,l,h=n(window).outerWidth(),u=n(window).height(),c=n(document).height(),f=n(document).scrollTop(),p=n("#header"),d=n("#logo"),m=d.find("#logo-o"),g=d.find("#logo-o1");p.on("mouseenter",e).on("mouseleave",function(){f>10&&t()}),n(document).on("scroll",s(function(){requestAnimFrame(i)},10)),n(window).on("resize",s(function(){requestAnimFrame(o)},60))}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13,"./requestAnimFrame.js":17,"./throttle.js":21}],3:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./throttle.js");window.requestAnimFrame=t("./requestAnimFrame.js"),e.exports=function(t,e){function i(){t.length&&(f=n(window).scrollTop(),p=f+m,t.each(function(t){a=n(this),h=a.data("check-top"),u=a.data("check-bottom"),c=f*e/(d-m)-e/2,u-g>=f&&h+g<=p&&r.set(a,{y:c+"px",force3D:!0})}))}function o(){t.length&&t.each(function(){a=n(this),l=a.outerHeight(),h=a.offset().top,u=h+l,a.data({"check-top":h,"check-bottom":u})})}var a,l,h,u,c,f,p,d=n(document).height(),m=n(window).height(),g=0,g=0;o(),i(),t.length&&r.set(t,{opacity:.8}),n(document).on("scroll",s(function(){requestAnimFrame(i)},40)),n(window).on("resize",s(function(){m=n(window).height(),d=n(document).height(),requestAnimFrame(o),requestAnimFrame(i)},40))}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13,"./requestAnimFrame.js":17,"./throttle.js":21}],4:[function(t,e,i){t("./libs/jquery/dist/jquery.slim.min.js");e.exports=function(t,e,i,n,r){return containerH=t.outerHeight(),containerW=t.width(),containerRatio=containerH/containerW,posX=r.data("x"),posY=r.data("y"),containerRatio>e?(finalH=containerH,finalW=i*finalH/n,newX=finalW*posX/i-(finalW-containerW)/2,newY=finalH*posY/n):(finalW=containerW,finalH=n*finalW/i,newX=finalW*posX/i,newY=finalH*posY/n-(finalH-containerH)/2),ratioScale=finalH/n,[newX,newY,ratioScale]}},{"./libs/jquery/dist/jquery.slim.min.js":13}],5:[function(t,e,i){(function(i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");e.exports=function(){var t=document.createElement("script"),e=document.getElementsByTagName("script")[0],s=n(".wrapper-video"),o=[];i.onYouTubeIframeAPIReady=function(){function t(t){t.on("click",function(){r.to(n(this).find(".cover-video"),.5,{opacity:0,display:"none"}),o[n(this).index(".wrapper-video")].playVideo()})}s.each(function(e){o[e]=new YT.Player(n(this).find("iframe").get(0),{events:{onReady:t(n(this))}})})},t.src="https://www.youtube.com/iframe_api",e.parentNode.insertBefore(t,e)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13}],6:[function(t,e,i){(function(t){!function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,o,a,l,h,u=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=u("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},m=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),g={},_=function(s,o,a,l){this.sc=g[s]?g[s].sc:[],g[s]=this,this.gsClass=null,this.func=a;var h=[];this.check=function(c){for(var f,p,d,m,v,y=o.length,x=y;--y>-1;)(f=g[o[y]]||new _(o[y],[])).gsClass?(h[y]=f.gsClass,x--):c&&f.sc.push(this);if(0===x&&a){if(p=("com.greensock."+s).split("."),d=p.pop(),m=u(p.join("."))[d]=this.gsClass=a.apply(a,h),l)if(r[d]=n[d]=m,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return m});else if(v)if(s===i){e.exports=n[i]=m;for(y in n)m[y]=n[y]}else n[i]&&(n[i][d]=m);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new _(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var x=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?x.concat(e):x},!0),b=w.map={},T=w.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(s=l[h],r=n?y("easing."+s,null,!0):c.easing[s]||{},o=u.length;--o>-1;)a=u[o],b[s+"."+a]=b[a+s]=r[a]=t.getRatio?t:t[a]||new t};for(a=w.prototype,a._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],o=s.length;--o>-1;)a=s[o]+",Power"+o,T(new w(null,null,1,o),a,"easeOut",!0),T(new w(null,null,2,o),a,"easeIn"+(0===o?",easeNone":"")),T(new w(null,null,3,o),a,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});a=P.prototype,a.addEventListener=function(t,e,i,n,r){r=r||0;var s,o,a=this._listeners[t],u=0;for(this!==l||h||l.wake(),null==a&&(this._listeners[t]=a=[]),o=a.length;--o>-1;)s=a[o],s.c===e&&s.s===i?a.splice(o,1):0===u&&s.pr<r&&(u=o+1);a.splice(u,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var k=t.requestAnimationFrame,S=t.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},O=C();for(s=["ms","moz","webkit","o"],o=s.length;--o>-1&&!k;)k=t[s[o]+"RequestAnimationFrame"],S=t[s[o]+"CancelAnimationFrame"]||t[s[o]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,o,a=this,u=C(),c=!(e===!1||!k)&&"auto",p=500,m=33,g="tick",_=function(t){var e,l,h=C()-O;h>p&&(u+=h-m),O+=h,a.time=(O-u)/1e3,e=a.time-o,(!i||e>0||t===!0)&&(a.frame++,o+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(_)),l&&a.dispatchEvent(g)};P.call(a),a.time=a.frame=0,a.tick=function(){_(!0)},a.lagSmoothing=function(t,e){p=t||1/f,m=Math.min(e,p,0)},a.sleep=function(){null!=r&&(c&&S?S(r):clearTimeout(r),n=d,r=null,a===l&&(h=!1))},a.wake=function(t){null!==r?a.sleep():t?u+=-O+(O=C()):a.frame>10&&(O=C()-p+5),n=0===i?d:c&&k?k:function(t){return setTimeout(t,1e3*(o-a.time)+1|0)},a===l&&(h=!0),_(2)},a.fps=function(t){return arguments.length?(i=t,s=1/(i||60),o=this.time+s,void a.wake()):i},a.useRAF=function(t){return arguments.length?(a.sleep(),c=t,void a.fps(i)):c},a.fps(t),setTimeout(function(){"auto"===c&&a.frame<5&&"hidden"!==document.visibilityState&&a.useRAF(!1)},1500)}),a=c.Ticker.prototype=new c.events.EventDispatcher,a.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){h||l.wake();var i=this.vars.useFrames?U:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,a=A.prototype,a._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var R=function(){h&&C()-O>2e3&&l.wake(),setTimeout(R,2e3)};R(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},a._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=m(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(E.length&&Z(),this.render(t,e,!1),E.length&&Z())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(h||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});a=D.prototype=new A,a.constructor=D,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return h||l.wake(),this._totalTime};var M=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=M.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:M.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?H[M.defaultOverwrite]:"number"==typeof l?l>>0:H[l],(a||e instanceof Array||e.push&&m(e))&&"number"!=typeof e[0])for(this._targets=o=p(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)s=o[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(p(s))):(this._siblings[r]=Q(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=o[r--]=M.selector(s),"string"==typeof s&&o.splice(r+1,1)):o.splice(r--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)))},!0),N=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},F=function(t,e){var i,n={};for(i in t)V[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!B[i]||B[i]&&B[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};a=M.prototype=new A,a.constructor=M,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,M.version="1.19.0",M.defaultEase=a._ease=new w(null,null,1,1),M.defaultOverwrite="auto",M.ticker=l,M.autoSleep=120,M.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},M.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(M.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var E=[],L={},j=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,X=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},Y=function(t,e,i,n){var r,s,o,a,l,h,u,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(j)||[],s=e.match(j)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,a=0;a<l;a++)u=s[a],h=e.substr(f,e.indexOf(u,f)-f),p+=h||!a?h:",",f+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),u===r[a]||r.length<=a?p+=u:(p&&(c.push(p),p=""),o=parseFloat(r[a]),c.push(o),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:o,c:("="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*parseFloat(u.substr(2)):parseFloat(u)-o)||0,f:0,m:d&&d<4?Math.round:0}),f+=u.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=X,c},I=function(t,e,i,n,r,s,o,a,l){"function"==typeof n&&(n=n(l||0,t));var h,u,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(u=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=o?t[u](o):t[u]()),"string"==typeof c&&(o||isNaN(c))?(d.fp=o,h=Y(c,n,a||M.defaultStringFilter,d),d={t:h,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},z=M._internals={isArray:m,isSelector:N,lazyTweens:E,blobDif:Y},B=M._plugins={},q=z.tweenLookup={},W=0,V=z.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},H={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},U=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Z=z.lazyRender=function(){var t,e=E.length;for(L={};--e>-1;)t=E[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);E.length=0};$._startTime=l.time,U._startTime=l.frame,$._active=U._active=!0,setTimeout(Z,1),A._updateRoot=M.render=function(){var t,e,i;if(E.length&&Z(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),U.render((l.frame-U._startTime)*U._timeScale,!1,!1),E.length&&Z(),l.frame>=G){G=l.frame+(parseInt(M.autoSleep,10)||120);for(i in q){for(e=q[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete q[i]}if(i=$._first,(!i||i._paused)&&M.autoSleep&&!U._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Q=function(t,e,i){var n,r,s=t._gsTweenID;if(q[s||(t._gsTweenID=s="t"+W++)]||(q[s]={target:t,tweens:[]}),e&&(n=q[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return q[s].tweens},K=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),o=M.onOverwrite,o&&(s=o(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var h,u=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(h=h||tt(e,0,d),0===tt(a,h,d)&&(c[p++]=a)):a._startTime<=u&&a._startTime+a.totalDuration()/a._timeScale>u&&((d||!a._initted)&&u-a._startTime<=2e-10||(c[p++]=a)));for(s=p;--s>-1;)if(a=c[s],2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};a._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,l=this._duration,h=!!o.immediateRender,u=o.ease;if(o.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in o.startAt)r[n]=o.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&o.lazy!==!1,r.startAt=r.delay=null,this._startAt=M.to(this.target,0,r),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(h=!1),i={};for(n in o)V[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&o.lazy!==!1,i.immediateRender=h,this._startAt=M.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof w?u:"function"==typeof u?new w(u,o.easeParams):b[u]||M.defaultEase:M.defaultEase,o.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&M._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,s){var o,a,l,h,u,c;if(null==e)return!1;L[e._gsTweenID]&&Z(),this.vars.css||e.style&&e!==t&&e.nodeType&&B.css&&this.vars.autoCSS!==!1&&F(this.vars,e);for(o in this.vars)if(c=this.vars[o],V[o])c&&(c instanceof Array||c.push&&m(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(B[o]&&(h=new B[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=u={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:h._priority,m:0},a=h._overwriteProps.length;--a>-1;)i[h._overwriteProps[a]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else i[o]=I.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||h===f&&"isPause"!==this.data)&&h!==t&&(i=!0,h>f&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||h===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&h>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(h!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||h===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===p?u*=u:2===p?u*=u*u:3===p?u*=u*u*u:4===p&&(u*=u*u*u*u),1===c?this.ratio=1-u:2===c?this.ratio=u:t/l<.5?this.ratio=u/2:this.ratio=1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=h,E.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&o!==f&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:M.selector(e)||e;var n,r,s,o,a,l,h,u,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((m(e)||N(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(h=t||a,u=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(M.onOverwrite||this.vars.onOverwrite)){for(s in h)a[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in h)(o=a[s])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(h)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),u&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&M._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Q(n[i],this,!0);else this._siblings=Q(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&M._onPluginEvent(t?"_onEnable":"_onDisable",this)},M.to=function(t,e,i){return new M(t,e,i)},M.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new M(t,e,i)},M.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new M(t,e,n)},M.delayedCall=function(t,e,i,n,r){return new M(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},M.set=function(t,e){return new M(t,0,e)},M.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:M.selector(t)||t;var i,n,r,s;if((m(t)||N(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(M.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Q(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},M.killTweensOf=M.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=M.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(a=et.prototype,et.version="1.19.0",et.API=2,a._firstPT=null,a._addTween=I,a.setRatio=X,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},M._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(B[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),a=o.prototype=new et(i);a.constructor=o,o.API=t.API;for(e in s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,et.activate([o]),o},s=t._gsQueue){for(o=0;o<s.length;o++)s[o]();for(a in g)g[a].func||t.console.log("GSAP encountered missing dependency: "+a)}h=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenLite")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});
},{}],7:[function(t,e,i){(function(t){var i="undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window;(i._gsQueue||(i._gsQueue=[])).push(function(){"use strict";i._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},r=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},s=function(t,e,n){i.call(this,t,e,n),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=s.prototype.render},o=1e-10,a=i._internals,l=a.isSelector,h=a.isArray,u=s.prototype=i.to({},.1,{}),c=[];s.version="1.19.0",u.constructor=s,u.kill()._gc=!1,s.killTweensOf=s.killDelayedCallsTo=i.killTweensOf,s.getTweensOf=i.getTweensOf,s.lagSmoothing=i.lagSmoothing,s.ticker=i.ticker,s.render=i.render,u.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),i.prototype.invalidate.call(this)},u.updateTo=function(t,e){var n,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(n in t)this.vars[n]=t[n];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var o=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(o,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var a,l=1/(1-r),h=this._firstPT;h;)a=h.s+h.c,h.c*=l,h.s=a-h.c,h=h._next;return this},u.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,r,s,l,h,u,c,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,m=this._totalTime,g=this._cycle,_=this._duration,v=this._rawPrevTime;if(t>=p-1e-7?(this._totalTime=p,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=_,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===_&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(v<0||t<=0&&t>=-1e-7||v===o&&"isPause"!==this.data)&&v!==t&&(i=!0,v>o&&(r="onReverseComplete")),this._rawPrevTime=f=!e||t||v===t?t:o)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==m||0===_&&v>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===_&&(this._initted||!this.vars.lazy||i)&&(v>=0&&(i=!0),this._rawPrevTime=f=!e||t||v===t?t:o)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=_+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=_-this._time),this._time>_?this._time=_:this._time<0&&(this._time=0)),this._easeType?(h=this._time/_,u=this._easeType,c=this._easePower,(1===u||3===u&&h>=.5)&&(h=1-h),3===u&&(h*=2),1===c?h*=h:2===c?h*=h*h:3===c?h*=h*h*h:4===c&&(h*=h*h*h*h),1===u?this.ratio=1-h:2===u?this.ratio=h:this._time/_<.5?this.ratio=h/2:this.ratio=1-h/2):this.ratio=this._ease.getRatio(this._time/_)),d===this._time&&!i&&g===this._cycle)return void(m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=d,this._totalTime=m,this._rawPrevTime=v,this._cycle=g,a.lazyTweens.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/_):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==d&&t>=0&&(this._active=!0),0===m&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==_||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,e,i),e||(this._totalTime!==m||r)&&this._callback("onUpdate")),this._cycle!==g&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===_&&this._rawPrevTime===o&&f!==o&&(this._rawPrevTime=0)))},s.to=function(t,e,i){return new s(t,e,i)},s.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new s(t,e,i)},s.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new s(t,e,n)},s.staggerTo=s.allTo=function(t,e,o,a,u,f,p){a=a||0;var d,m,g,_,v=0,y=[],x=function(){o.onComplete&&o.onComplete.apply(o.onCompleteScope||this,arguments),u.apply(p||o.callbackScope||this,f||c)},w=o.cycle,b=o.startAt&&o.startAt.cycle;for(h(t)||("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t))),t=t||[],a<0&&(t=n(t),t.reverse(),a*=-1),d=t.length-1,g=0;g<=d;g++){m={};for(_ in o)m[_]=o[_];if(w&&(r(m,t,g),null!=m.duration&&(e=m.duration,delete m.duration)),b){b=m.startAt={};for(_ in o.startAt)b[_]=o.startAt[_];r(m.startAt,t,g)}m.delay=v+(m.delay||0),g===d&&u&&(m.onComplete=x),y[g]=new s(t[g],e,m),v+=a}return y},s.staggerFrom=s.allFrom=function(t,e,i,n,r,o,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,s.staggerTo(t,e,i,n,r,o,a)},s.staggerFromTo=s.allFromTo=function(t,e,i,n,r,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,s.staggerTo(t,e,n,r,o,a,l)},s.delayedCall=function(t,e,i,n,r){return new s(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},s.set=function(t,e){return new s(t,0,e)},s.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var f=function(t,e){for(var n=[],r=0,s=t._first;s;)s instanceof i?n[r++]=s:(e&&(n[r++]=s),n=n.concat(f(s,e)),r=n.length),s=s._next;return n},p=s.getAllTweens=function(e){return f(t._rootTimeline,e).concat(f(t._rootFramesTimeline,e))};s.killAll=function(t,i,n,r){null==i&&(i=!0),null==n&&(n=!0);var s,o,a,l=p(0!=r),h=l.length,u=i&&n&&r;for(a=0;a<h;a++)o=l[a],(u||o instanceof e||(s=o.target===o.vars.onComplete)&&n||i&&!s)&&(t?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},s.killChildTweensOf=function(t,e){if(null!=t){var r,o,u,c,f,p=a.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t)),h(t))for(c=t.length;--c>-1;)s.killChildTweensOf(t[c],e);else{r=[];for(u in p)for(o=p[u].target.parentNode;o;)o===t&&(r=r.concat(p[u].tweens)),o=o.parentNode;for(f=r.length,c=0;c<f;c++)e&&r[c].totalTime(r[c].totalDuration()),r[c]._enabled(!1,!1)}}};var d=function(t,i,n,r){i=i!==!1,n=n!==!1,r=r!==!1;for(var s,o,a=p(r),l=i&&n&&r,h=a.length;--h>-1;)o=a[h],(l||o instanceof e||(s=o.target===o.vars.onComplete)&&n||i&&!s)&&o.paused(t)};return s.pauseAll=function(t,e,i){d(!0,t,e,i)},s.resumeAll=function(t,e,i){d(!1,t,e,i)},s.globalTimeScale=function(e){var n=t._rootTimeline,r=i.ticker.time;return arguments.length?(e=e||o,n._startTime=r-(r-n._startTime)*n._timeScale/e,n=t._rootFramesTimeline,r=i.ticker.frame,n._startTime=r-(r-n._startTime)*n._timeScale/e,n._timeScale=t._rootTimeline._timeScale=e,e):n._timeScale},u.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},u.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},u.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},u.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},u.totalDuration=function(t){return arguments.length?this._repeat===-1?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},u.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},u.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},u.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},s},!0),i._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,n){var r=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,n,r=this.vars;for(n in r)i=r[n],h(i)&&i.join("").indexOf("{self}")!==-1&&(r[n]=this._swapSelfInParams(i));h(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},s=1e-10,o=n._internals,a=r._internals={},l=o.isSelector,h=o.isArray,u=o.lazyTweens,c=o.lazyRender,f=i._gsDefine.globals,p=function(t){var e,i={};for(e in t)i[e]=t[e];return i},d=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r.call(e[i],i):r[i%r.length];delete t.cycle},m=a.pauseCallback=function(){},g=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},_=r.prototype=new e;return r.version="1.19.0",_.constructor=r,_.kill()._gc=_._forcingPlayhead=_._hasPause=!1,_.to=function(t,e,i,r){var s=i.repeat&&f.TweenMax||n;return e?this.add(new s(t,e,i),r):this.set(t,i,r)},_.from=function(t,e,i,r){return this.add((i.repeat&&f.TweenMax||n).from(t,e,i),r)},_.fromTo=function(t,e,i,r,s){var o=r.repeat&&f.TweenMax||n;return e?this.add(o.fromTo(t,e,i,r),s):this.set(t,r,s)},_.staggerTo=function(t,e,i,s,o,a,h,u){var c,f,m=new r({onComplete:a,onCompleteParams:h,callbackScope:u,smoothChildTiming:this.smoothChildTiming}),_=i.cycle;for("string"==typeof t&&(t=n.selector(t)||t),t=t||[],l(t)&&(t=g(t)),s=s||0,s<0&&(t=g(t),t.reverse(),s*=-1),f=0;f<t.length;f++)c=p(i),c.startAt&&(c.startAt=p(c.startAt),c.startAt.cycle&&d(c.startAt,t,f)),_&&(d(c,t,f),null!=c.duration&&(e=c.duration,delete c.duration)),m.to(t[f],e,c,f*s);return this.add(m,o)},_.staggerFrom=function(t,e,i,n,r,s,o,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,o,a)},_.staggerFromTo=function(t,e,i,n,r,s,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,o,a,l)},_.call=function(t,e,i,r){return this.add(n.delayedCall(0,t,e,i),r)},_.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new n(t,0,e),i)},r.exportRoot=function(t,e){t=t||{},null==t.smoothChildTiming&&(t.smoothChildTiming=!0);var i,s,o=new r(t),a=o._timeline;for(null==e&&(e=!0),a._remove(o,!0),o._startTime=0,o._rawPrevTime=o._time=o._totalTime=a._time,i=a._first;i;)s=i._next,e&&i instanceof n&&i.target===i.vars.onComplete||o.add(i,i._startTime-i._delay),i=s;return a.add(o,0),o},_.add=function(i,s,o,a){var l,u,c,f,p,d;if("number"!=typeof s&&(s=this._parseTimeOrLabel(s,0,!0,i)),!(i instanceof t)){if(i instanceof Array||i&&i.push&&h(i)){for(o=o||"normal",a=a||0,l=s,u=i.length,c=0;c<u;c++)h(f=i[c])&&(f=new r({tweens:f})),this.add(f,l),"string"!=typeof f&&"function"!=typeof f&&("sequence"===o?l=f._startTime+f.totalDuration()/f._timeScale:"start"===o&&(f._startTime-=f.delay())),l+=a;return this._uncache(!0)}if("string"==typeof i)return this.addLabel(i,s);if("function"!=typeof i)throw"Cannot add "+i+" into the timeline; it is not a tween, timeline, function, or string.";i=n.delayedCall(0,i)}if(e.prototype.add.call(this,i,s),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=this,d=p.rawTime()>i._startTime;p._timeline;)d&&p._timeline.smoothChildTiming?p.totalTime(p._totalTime,!0):p._gc&&p._enabled(!0,!1),p=p._timeline;return this},_.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&h(e)){for(var n=e.length;--n>-1;)this.remove(e[n]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},_._remove=function(t,i){e.prototype._remove.call(this,t,i);var n=this._last;return n?this._time>n._startTime+n._totalDuration/n._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},_.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},_.insert=_.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},_.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},_.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},_.addPause=function(t,e,i,r){var s=n.delayedCall(0,m,i,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},_.removeLabel=function(t){return delete this._labels[t],this},_.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},_._parseTimeOrLabel=function(e,i,n,r){var s;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&h(r)))for(s=r.length;--s>-1;)r[s]instanceof t&&r[s].timeline===this&&this.remove(r[s]);if("string"==typeof i)return this._parseTimeOrLabel(i,n&&"number"==typeof e&&null==this._labels[i]?e-this.duration():0,n);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=this.duration());else{if(s=e.indexOf("="),s===-1)return null==this._labels[e]?n?this._labels[e]=this.duration()+i:i:this._labels[e]+i;i=parseInt(e.charAt(s-1)+"1",10)*Number(e.substr(s+1)),e=s>1?this._parseTimeOrLabel(e.substr(0,s-1),0,n):this.duration()}return Number(e)+i},_.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),e!==!1)},_.stop=function(){return this.paused(!0)},_.gotoAndPlay=function(t,e){return this.play(t,e)},_.gotoAndStop=function(t,e){return this.pause(t,e)},_.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,o,a,l,h,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,m=this._startTime,g=this._timeScale,_=this._paused;if(t>=p-1e-7)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,a="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===s)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>s&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==d||0===this._duration&&this._rawPrevTime!==s&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(a="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=r=!0,a="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(l=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=d)for(n=this._first;n&&n._startTime<=t&&!h;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(h=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!h;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(h=n),n=n._prev;h&&(this._time=t=h._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==d&&this._first||i||l||h){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==d&&t>0&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),f=this._time,f>=d)for(n=this._first;n&&(o=n._next,f===this._time&&(!this._paused||_));)(n._active||n._startTime<=f&&!n._paused&&!n._gc)&&(h===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,f===this._time&&(!this._paused||_));){if(n._active||n._startTime<=d&&!n._paused&&!n._gc){if(h===n){for(h=n._prev;h&&h.endTime()>this._time;)h.render(h._reversed?h.totalDuration()-(t-h._startTime)*h._timeScale:(t-h._startTime)*h._timeScale,e,i),h=h._prev;h=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=o}this._onUpdate&&(e||(u.length&&c(),this._callback("onUpdate"))),a&&(this._gc||m!==this._startTime&&g===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(u.length&&c(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}},_._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof r&&t._hasPausedChild())return!0;t=t._next}return!1},_.getChildren=function(t,e,i,r){r=r||-9999999999;for(var s=[],o=this._first,a=0;o;)o._startTime<r||(o instanceof n?e!==!1&&(s[a++]=o):(i!==!1&&(s[a++]=o),t!==!1&&(s=s.concat(o.getChildren(!0,e,i)),a=s.length))),o=o._next;return s},_.getTweensOf=function(t,e){var i,r,s=this._gc,o=[],a=0;for(s&&this._enabled(!0,!0),i=n.getTweensOf(t),r=i.length;--r>-1;)(i[r].timeline===this||e&&this._contains(i[r]))&&(o[a++]=i[r]);return s&&this._enabled(!1,!0),o},_.recent=function(){return this._recent},_._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},_.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},_._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},_.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return t!==!1&&(this._labels={}),this._uncache(!0)},_.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},_._enabled=function(t,i){if(t===this._gc)for(var n=this._first;n;)n._enabled(t,!0),n=n._next;return e.prototype._enabled.call(this,t,i)},_.totalTime=function(e,i,n){this._forcingPlayhead=!0;var r=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},_.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},_.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused?this.add(r,r._startTime-r._delay):s=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),i=r._startTime+r._totalDuration/r._timeScale,i>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},_.paused=function(e){if(!e)for(var i=this._first,n=this._time;i;)i._startTime===n&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},_.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},_.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},r},!0),i._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,n){var r=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},s=1e-10,o=e._internals,a=o.lazyTweens,l=o.lazyRender,h=i._gsDefine.globals,u=new n(null,null,1,0),c=r.prototype=new t;return c.constructor=r,c.kill()._gc=!1,r.version="1.19.0",c.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},c.addCallback=function(t,i,n,r){return this.add(e.delayedCall(0,t,n,r),i)},c.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},c.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},c.tweenTo=function(t,i){i=i||{};var n,r,s,o={ease:u,useFrames:this.usesFrames(),immediateRender:!1},a=i.repeat&&h.TweenMax||e;for(r in i)o[r]=i[r];return o.time=this._parseTimeOrLabel(t),n=Math.abs(Number(o.time)-this._time)/this._timeScale||.001,s=new a(this,n,o),o.onStart=function(){s.target.paused(!0),s.vars.time!==s.target.time()&&n===s.duration()&&s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale),i.onStart&&s._callback("onStart")},s},c.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=i.immediateRender!==!1;var n=this.tweenTo(e,i);return n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},c.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,o,h,u,c,f,p,d=this._dirty?this.totalDuration():this._totalDuration,m=this._duration,g=this._time,_=this._totalTime,v=this._startTime,y=this._timeScale,x=this._rawPrevTime,w=this._paused,b=this._cycle;if(t>=d-1e-7)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,h="onComplete",u=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||x<0||x===s)&&x!==t&&this._first&&(u=!0,x>s&&(h="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,this._yoyo&&0!==(1&this._cycle)?this._time=t=0:(this._time=m,t=m+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==g||0===m&&x!==s&&(x>0||t<0&&x>=0)&&!this._locked)&&(h="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(u=r=!0,h="onReverseComplete"):x>=0&&this._first&&(u=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=m||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(u=!0)}else if(0===m&&x<0&&(u=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=m+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&_<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!==(1&this._cycle)&&(this._time=m-this._time),this._time>m?(this._time=m,t=m+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(t=this._time,t>=g)for(n=this._first;n&&n._startTime<=t&&!f;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(f=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!f;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(f=n),n=n._prev;f&&(this._time=t=f._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var T=this._yoyo&&0!==(1&b),P=T===(this._yoyo&&0!==(1&this._cycle)),k=this._totalTime,S=this._cycle,C=this._rawPrevTime,O=this._time;if(this._totalTime=b*m,this._cycle<b?T=!T:this._totalTime+=m,this._time=g,this._rawPrevTime=0===m?x-1e-4:x,this._cycle=b,this._locked=!0,g=T?0:m,this.render(g,e,0===m),e||this._gc||this.vars.onRepeat&&this._callback("onRepeat"),g!==this._time)return;if(P&&(g=T?m+1e-4:-1e-4,this.render(g,!0,!1)),this._locked=!1,this._paused&&!w)return;this._time=O,this._totalTime=k,this._cycle=S,this._rawPrevTime=C}if(!(this._time!==g&&this._first||i||u||f))return void(_!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==_&&t>0&&(this._active=!0),0===_&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),p=this._time,p>=g)for(n=this._first;n&&(o=n._next,p===this._time&&(!this._paused||w));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(f===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,p===this._time&&(!this._paused||w));){if(n._active||n._startTime<=g&&!n._paused&&!n._gc){if(f===n){for(f=n._prev;f&&f.endTime()>this._time;)f.render(f._reversed?f.totalDuration()-(t-f._startTime)*f._timeScale:(t-f._startTime)*f._timeScale,e,i),f=f._prev;f=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=o}this._onUpdate&&(e||(a.length&&l(),this._callback("onUpdate"))),h&&(this._locked||this._gc||v!==this._startTime&&y===this._timeScale||(0===this._time||d>=this.totalDuration())&&(r&&(a.length&&l(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[h]&&this._callback(h)))},c.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],o=this.getChildren(t,e,i),a=0,l=o.length;for(n=0;n<l;n++)r=o[n],r.isActive()&&(s[a++]=r);return s},c.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},c.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},c.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},c.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},c.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},c.totalDuration=function(e){return arguments.length?this._repeat!==-1&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},c.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},c.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},c.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},c.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},c.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},r},!0),function(){var t=180/Math.PI,e=[],n=[],r=[],s={},o=i._gsDefine.globals,a=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},l=",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",h=function(t,e,i,n){var r={a:t},s={},o={},a={c:n},l=(t+e)/2,h=(e+i)/2,u=(i+n)/2,c=(l+h)/2,f=(h+u)/2,p=(f-c)/8;return r.b=l+(t-l)/4,s.b=c+p,r.c=s.a=(r.b+s.b)/2,s.c=o.a=(c+f)/2,o.b=f-p,a.b=u+(n-u)/4,o.c=a.a=(o.b+a.b)/2,[r,s,o,a]},u=function(t,i,s,o,a){var l,u,c,f,p,d,m,g,_,v,y,x,w,b=t.length-1,T=0,P=t[0].a;for(l=0;l<b;l++)p=t[T],u=p.a,c=p.d,f=t[T+1].d,a?(y=e[l],x=n[l],w=(x+y)*i*.25/(o?.5:r[l]||.5),d=c-(c-u)*(o?.5*i:0!==y?w/y:0),m=c+(f-c)*(o?.5*i:0!==x?w/x:0),g=c-(d+((m-d)*(3*y/(y+x)+.5)/4||0))):(d=c-(c-u)*i*.5,m=c+(f-c)*i*.5,g=c-(d+m)/2),d+=g,m+=g,p.c=_=d,0!==l?p.b=P:p.b=P=p.a+.6*(p.c-p.a),p.da=c-u,p.ca=_-u,p.ba=P-u,s?(v=h(u,P,_,c),t.splice(T,1,v[0],v[1],v[2],v[3]),T+=4):T++,P=m;p=t[T],p.b=P,p.c=P+.4*(p.d-P),p.da=p.d-p.a,p.ca=p.c-p.a,p.ba=P-p.a,s&&(v=h(p.a,P,p.c,p.d),t.splice(T,1,v[0],v[1],v[2],v[3]))},c=function(t,i,r,s){var o,l,h,u,c,f,p=[];if(s)for(t=[s].concat(t),l=t.length;--l>-1;)"string"==typeof(f=t[l][i])&&"="===f.charAt(1)&&(t[l][i]=s[i]+Number(f.charAt(0)+f.substr(2)));if(o=t.length-2,o<0)return p[0]=new a(t[0][i],0,0,t[o<-1?0:1][i]),p;for(l=0;l<o;l++)h=t[l][i],u=t[l+1][i],p[l]=new a(h,0,0,u),r&&(c=t[l+2][i],e[l]=(e[l]||0)+(u-h)*(u-h),n[l]=(n[l]||0)+(c-u)*(c-u));return p[l]=new a(t[l][i],0,0,t[l+1][i]),p},f=function(t,i,o,a,h,f){var p,d,m,g,_,v,y,x,w={},b=[],T=f||t[0];h="string"==typeof h?","+h+",":l,null==i&&(i=1);for(d in t[0])b.push(d);if(t.length>1){for(x=t[t.length-1],y=!0,p=b.length;--p>-1;)if(d=b[p],Math.abs(T[d]-x[d])>.05){y=!1;break}y&&(t=t.concat(),f&&t.unshift(f),t.push(t[1]),f=t[t.length-3])}for(e.length=n.length=r.length=0,p=b.length;--p>-1;)d=b[p],s[d]=h.indexOf(","+d+",")!==-1,w[d]=c(t,d,s[d],f);for(p=e.length;--p>-1;)e[p]=Math.sqrt(e[p]),n[p]=Math.sqrt(n[p]);if(!a){for(p=b.length;--p>-1;)if(s[d])for(m=w[b[p]],v=m.length-1,g=0;g<v;g++)_=m[g+1].da/n[g]+m[g].da/e[g]||0,r[g]=(r[g]||0)+_*_;for(p=r.length;--p>-1;)r[p]=Math.sqrt(r[p])}for(p=b.length,g=o?4:1;--p>-1;)d=b[p],m=w[d],u(m,i,o,a,s[d]),y&&(m.splice(0,g),m.splice(m.length-g,g));return w},p=function(t,e,i){e=e||"soft";var n,r,s,o,l,h,u,c,f,p,d,m={},g="cubic"===e?3:2,_="soft"===e,v=[];if(_&&i&&(t=[i].concat(t)),null==t||t.length<g+1)throw"invalid Bezier data";for(f in t[0])v.push(f);for(h=v.length;--h>-1;){for(f=v[h],m[f]=l=[],p=0,c=t.length,u=0;u<c;u++)n=null==i?t[u][f]:"string"==typeof(d=t[u][f])&&"="===d.charAt(1)?i[f]+Number(d.charAt(0)+d.substr(2)):Number(d),_&&u>1&&u<c-1&&(l[p++]=(n+l[p-2])/2),l[p++]=n;for(c=p-g+1,p=0,u=0;u<c;u+=g)n=l[u],r=l[u+1],s=l[u+2],o=2===g?0:l[u+3],l[p++]=d=3===g?new a(n,r,s,o):new a(n,(2*r+n)/3,(2*r+s)/3,s);l.length=p}return m},d=function(t,e,i){for(var n,r,s,o,a,l,h,u,c,f,p,d=1/i,m=t.length;--m>-1;)for(f=t[m],s=f.a,o=f.d-s,a=f.c-s,l=f.b-s,n=r=0,u=1;u<=i;u++)h=d*u,c=1-h,n=r-(r=(h*h*o+3*c*(h*a+c*l))*h),p=m*i+u-1,e[p]=(e[p]||0)+n*n},m=function(t,e){e=e>>0||6;var i,n,r,s,o=[],a=[],l=0,h=0,u=e-1,c=[],f=[];for(i in t)d(t[i],o,e);for(r=o.length,n=0;n<r;n++)l+=Math.sqrt(o[n]),s=n%e,f[s]=l,s===u&&(h+=l,s=n/e>>0,c[s]=f,a[s]=h,l=0,f=[]);return{length:h,lengths:a,segments:c}},g=i._gsDefine.plugin({propName:"bezier",
priority:-1,version:"1.3.7",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,o,a,l=e.values||[],h={},u=l[0],c=e.autoRotate||i.vars.orientToBezier;this._autoRotate=c?c instanceof Array?c:[["x","y","rotation",c===!0?0:Number(c)||0]]:null;for(n in u)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],h[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||h[n]!==l[0][n]&&(a=h);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?f(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):p(l,e.type,h),this._segCount=this._beziers[n].length,this._timeRes){var d=m(this._beziers,this._timeRes);this._length=d.length,this._lengths=d.lengths,this._segments=d.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(c=this._autoRotate)for(this._initialRotations=[],c[0]instanceof Array||(this._autoRotate=c=[c]),s=c.length;--s>-1;){for(o=0;o<3;o++)n=c[s][o],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=c[s][2],this._initialRotations[s]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,n,r,s,o,a,l,h,u,c,f=this._segCount,p=this._func,d=this._target,m=e!==this._startRatio;if(this._timeRes){if(u=this._lengths,c=this._curSeg,e*=this._length,r=this._li,e>this._l2&&r<f-1){for(h=f-1;r<h&&(this._l2=u[++r])<=e;);this._l1=u[r-1],this._li=r,this._curSeg=c=this._segments[r],this._s2=c[this._s1=this._si=0]}else if(e<this._l1&&r>0){for(;r>0&&(this._l1=u[--r])>=e;);0===r&&e<this._l1?this._l1=0:r++,this._l2=u[r],this._li=r,this._curSeg=c=this._segments[r],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(i=r,e-=this._l1,r=this._si,e>this._s2&&r<c.length-1){for(h=c.length-1;r<h&&(this._s2=c[++r])<=e;);this._s1=c[r-1],this._si=r}else if(e<this._s1&&r>0){for(;r>0&&(this._s1=c[--r])>=e;);0===r&&e<this._s1?this._s1=0:r++,this._s2=c[r],this._si=r}a=(r+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else i=e<0?0:e>=1?f-1:f*e>>0,a=(e-i*(1/f))*f;for(n=1-a,r=this._props.length;--r>-1;)s=this._props[r],o=this._beziers[s][i],l=(a*a*o.da+3*n*(a*o.ca+n*o.ba))*a+o.a,this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l;if(this._autoRotate){var g,_,v,y,x,w,b,T=this._autoRotate;for(r=T.length;--r>-1;)s=T[r][2],w=T[r][3]||0,b=T[r][4]===!0?1:t,o=this._beziers[T[r][0]],g=this._beziers[T[r][1]],o&&g&&(o=o[i],g=g[i],_=o.a+(o.b-o.a)*a,y=o.b+(o.c-o.b)*a,_+=(y-_)*a,y+=(o.c+(o.d-o.c)*a-y)*a,v=g.a+(g.b-g.a)*a,x=g.b+(g.c-g.b)*a,v+=(x-v)*a,x+=(g.c+(g.d-g.c)*a-x)*a,l=m?Math.atan2(x-v,y-_)*b+w:this._initialRotations[r],this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l)}}}),_=g.prototype;g.bezierThrough=f,g.cubicToQuadratic=h,g._autoCSS=!0,g.quadraticToCubic=function(t,e,i){return new a(t,(2*e+t)/3,(2*e+i)/3,i)},g._cssRegister=function(){var t=o.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,o,a,l){e instanceof Array&&(e={values:e}),l=new g;var h,u,c,f=e.values,p=f.length-1,d=[],m={};if(p<0)return a;for(h=0;h<=p;h++)c=i(t,f[h],o,a,l,p!==h),d[h]=c.end;for(u in e)m[u]=e[u];return m.values=d,a=new r(t,"bezier",0,0,c.pt,2),a.data=c,a.plugin=l,a.setRatio=n,0===m.autoRotate&&(m.autoRotate=!0),!m.autoRotate||m.autoRotate instanceof Array||(h=m.autoRotate===!0?0:Number(m.autoRotate),m.autoRotate=null!=c.end.left?[["left","top","rotation",h,!1]]:null!=c.end.x&&[["x","y","rotation",h,!1]]),m.autoRotate&&(o._transform||o._enableTransforms(!1),c.autoRotate=o._target._gsTransform,c.proxy.rotation=c.autoRotate.rotation||0,o._overwriteProps.push("rotation")),l._onInitTween(c.proxy,m,o._tween),a}})}},_._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)e=t[i[n]],e&&"function"==typeof e&&(this._mod[i[n]]=e)},_._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)}}(),i._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var n,r,s,o,a=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},l=i._gsDefine.globals,h={},u=a.prototype=new t("css");u.constructor=a,a.version="1.19.0",a.API=2,a.defaultTransformPerspective=0,a.defaultSkewType="compensated",a.defaultSmoothOrigin=!0,u="px",a.suffixMap={top:u,right:u,bottom:u,left:u,width:u,height:u,fontSize:u,padding:u,margin:u,perspective:u,lineHeight:""};var c,f,p,d,m,g,_,v,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,x=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,w=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,T=/(?:\d|\-|\+|=|#|\.)*/g,P=/opacity *= *([^)]*)/i,k=/opacity:([^;]*)/i,S=/alpha\(opacity *=.+?\)/i,C=/^(rgb|hsl)/,O=/([A-Z])/g,A=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,D=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,N=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,F=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,E=/,(?=[^\)]*(?:\(|$))/gi,L=/[\s,\(]/i,j=Math.PI/180,X=180/Math.PI,Y={},I=document,z=function(t){return I.createElementNS?I.createElementNS("http://www.w3.org/1999/xhtml",t):I.createElement(t)},B=z("div"),q=z("img"),W=a._internals={_specialProps:h},V=navigator.userAgent,H=function(){var t=V.indexOf("Android"),e=z("a");return p=V.indexOf("Safari")!==-1&&V.indexOf("Chrome")===-1&&(t===-1||Number(V.substr(t+8,1))>3),m=p&&Number(V.substr(V.indexOf("Version/")+8,1))<6,d=V.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(V)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(V))&&(g=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),U=function(t){return P.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},$=function(t){window.console&&console.log(t)},G="",Z="",Q=function(t,e){e=e||B;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Z=3===n?"ms":i[n],G="-"+Z.toLowerCase()+"-",Z+t):null},K=I.defaultView?I.defaultView.getComputedStyle:function(){},J=a.getStyle=function(t,e,i,n,r){var s;return H||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(O,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):U(t)},tt=W.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var o,l,h,u=M.test(i),c=t,f=B.style,p=n<0,d=1===n;if(p&&(n=-n),d&&(n*=100),"%"===r&&i.indexOf("border")!==-1)o=n/100*(u?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[u?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(c=t.parentNode||I.body,l=c._gsCache,h=e.ticker.frame,l&&u&&l.time===h)return l.width*n/100;f[u?"width":"height"]=n+r}c.appendChild(B),o=parseFloat(B[u?"offsetWidth":"offsetHeight"]),c.removeChild(B),u&&"%"===r&&a.cacheWidths!==!1&&(l=c._gsCache=c._gsCache||{},l.time=h,l.width=o/n*100),0!==o||s||(o=tt(t,i,n,r,!0))}return d&&(o/=100),p?-o:o},et=W.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(T,""))||0)},it=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)r=e[i],r.indexOf("-transform")!==-1&&At!==r||(s[r.replace(A,D)]=e.getPropertyValue(r));else for(i in e)i.indexOf("Transform")!==-1&&Ot!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(A,D)]=e[i]);return H||(s.opacity=U(t)),n=Bt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Dt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},nt=function(t,e,i,n,r){var s,o,a,l={},h=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&o.indexOf("Origin")===-1&&("number"!=typeof s&&"string"!=typeof s||(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(b,"")?s:0:et(t,o),void 0!==h[o]&&(a=new vt(h,o,h[o],a))));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},rt={width:["Left","Right"],height:["Top","Bottom"]},st=["marginLeft","marginRight","marginTop","marginBottom"],ot=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getBBox&&Yt(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(J(t,"padding"+r[s],i,!0))||0,n-=parseFloat(J(t,"border"+r[s]+"Width",i,!0))||0;return n},at=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":n[0],s=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(at(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&(r+"").indexOf("=")===-1)&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=r.indexOf("%")!==-1,e.oyp=s.indexOf("%")!==-1,e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ht=function(t,e){return"function"==typeof t&&(t=t(v,_)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ut=function(t,e,i,n){var r,s,o,a,l,h=1e-6;return"function"==typeof t&&(t=t(v,_)),null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),l="="===t.charAt(1),o=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(t.indexOf("rad")===-1?1:X)-(l?0:e),s.length&&(n&&(n[i]=e+o),t.indexOf("short")!==-1&&(o%=r,o!==o%(r/2)&&(o=o<0?o+r:o-r)),t.indexOf("_cw")!==-1&&o<0?o=(o+9999999999*r)%r-(o/r|0)*r:t.indexOf("ccw")!==-1&&o>0&&(o=(o-9999999999*r)%r-(o/r|0)*r)),a=e+o),a<h&&a>-h&&(a=0),a},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},pt=a.parseColor=function(t,e){var i,n,r,s,o,a,l,h,u,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(t.indexOf("=")!==-1)return t.match(x)}else o=Number(i[0])%360/360,a=Number(i[1])/100,l=Number(i[2])/100,r=l<=.5?l*(a+1):l+a-l*a,n=2*l-r,i.length>3&&(i[3]=Number(t[3])),i[0]=ft(o+1/3,n,r),i[1]=ft(o,n,r),i[2]=ft(o-1/3,n,r);else i=t.match(y)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,h=Math.max(n,r,s),u=Math.min(n,r,s),l=(h+u)/2,h===u?o=a=0:(c=h-u,a=l>.5?c/(2-h-u):c/(h+u),o=h===n?(r-s)/c+(r<s?6:0):h===r?(s-n)/c+2:(n-r)/c+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(mt)||[],o=0,a=s.length?"":t;for(i=0;i<s.length;i++)n=s[i],r=t.substr(o,t.indexOf(n,o)-o),o+=r.length+n.length,n=pt(n,e),3===n.length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},mt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(u in ct)mt+="|"+u+"\\b";mt=new RegExp(mt+")","gi"),a.colorStringFilter=function(t){var e,i=t[0]+t[1];mt.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=dt(t[0],e),t[1]=dt(t[1],e)),mt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=a.colorStringFilter);var gt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(mt)||[""])[0]:"",o=t.split(s).join("").match(w)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",h=t.indexOf(" ")!==-1?" ":",",u=o.length,c=u>0?o[0].replace(y,""):"";return u?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(d=t.replace(E,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(mt)||[s])[0],f=t.split(e).join("").match(w)||[],p=f.length,u>p--)for(;++p<u;)f[p]=i?f[(p-1)/2|0]:o[p];return a+f.join(h)+h+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(s=t.replace(E,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(e=t.match(w)||[],f=e.length,u>f--)for(;++f<u;)e[f]=i?e[(f-1)/2|0]:o[f];return a+e.join(h)+l}:function(t){return t}},_t=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,h=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return r.parse(e,a,s,o)}},vt=(W._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,l=o.firstMPT,h=1e-6;l;)e=a[l.v],l.r?e=Math.round(e):e<h&&e>-h&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod(a.rotation,this.t):a.rotation),1===t||0===t)for(l=o.firstMPT,s=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(W._parseToProxy=function(t,e,i,n,r,s){var o,a,l,h,u,c=n,f={},p={},d=i._transform,m=Y;for(i._transform=null,Y=e,n=u=i.parse(t,e,n,r),Y=m,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(a=n.p,p[a]=n.s+n.c,f[a]=n.s,s||(h=new vt(n,"s",a,h,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,a=n.p+"_"+l,p[a]=n.data[l],f[a]=n[l],s||(h=new vt(n,l,a,h,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:h,pt:u}},W.CSSPropTween=function(t,e,i,r,s,a,l,h,u,c,f){this.t=t,this.p=e,this.s=i,this.c=r,this.n=l||e,t instanceof yt||o.push(this.n),this.r=h,this.type=a||0,u&&(this.pr=u,n=!0),this.b=void 0===c?i:c,this.e=void 0===f?i+r:f,s&&(this._next=s,s._prev=this)}),xt=function(t,e,i,n,r,s){var o=new yt(t,e,i,n-i,r,(-1),s);return o.b=i,o.e=o.xs0=n,o},wt=a.parseComplex=function(t,e,i,n,r,s,o,l,h,u){i=i||s||"","function"==typeof n&&(n=n(v,_)),o=new yt(t,e,0,0,o,u?2:1,null,(!1),l,i,n),n+="",r&&mt.test(n+i)&&(n=[i,n],a.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,m,g,w,b,T,P,k,S,C,O,A=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),D=A.length,M=c!==!1;for(n.indexOf(",")===-1&&i.indexOf(",")===-1||(A=A.join(" ").replace(E,", ").split(" "),R=R.join(" ").replace(E,", ").split(" "),D=A.length),D!==R.length&&(A=(s||"").split(" "),D=A.length),o.plugin=h,o.setRatio=u,mt.lastIndex=0,f=0;f<D;f++)if(m=A[f],g=R[f],T=parseFloat(m),T||0===T)o.appendXtra("",T,lt(g,T),g.replace(x,""),M&&g.indexOf("px")!==-1,!0);else if(r&&mt.test(m))C=g.indexOf(")")+1,C=")"+(C?g.substr(C):""),O=g.indexOf("hsl")!==-1&&H,m=pt(m,O),g=pt(g,O),P=m.length+g.length>6,P&&!H&&0===g[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(R[f]).join("transparent")):(H||(P=!1),O?o.appendXtra(P?"hsla(":"hsl(",m[0],lt(g[0],m[0]),",",!1,!0).appendXtra("",m[1],lt(g[1],m[1]),"%,",!1).appendXtra("",m[2],lt(g[2],m[2]),P?"%,":"%"+C,!1):o.appendXtra(P?"rgba(":"rgb(",m[0],g[0]-m[0],",",!0,!0).appendXtra("",m[1],g[1]-m[1],",",!0).appendXtra("",m[2],g[2]-m[2],P?",":C,!0),P&&(m=m.length<4?1:m[3],o.appendXtra("",m,(g.length<4?1:g[3])-m,C,!1))),mt.lastIndex=0;else if(w=m.match(y)){if(b=g.match(x),!b||b.length!==w.length)return o;for(d=0,p=0;p<w.length;p++)S=w[p],k=m.indexOf(S,d),o.appendXtra(m.substr(d,k-d),Number(S),lt(b[p],S),"",M&&"px"===m.substr(k+S.length,2),0===p),d=k+S.length;o["xs"+o.l]+=m.substr(d)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+g:g;if(n.indexOf("=")!==-1&&o.data){for(C=o.xs0+o.data.s,f=1;f<o.l;f++)C+=o["xs"+f]+o.data["xn"+f];o.e=C+o["xs"+f]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},bt=9;for(u=yt.prototype,u.l=u.pr=0;--bt>0;)u["xn"+bt]=0,u["xs"+bt]="";u.xs0="",u._next=u._prev=u.xfirst=u.data=u.plugin=u.setRatio=u.rxp=null,u.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new yt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var Tt=function(t,e){e=e||{},this.p=e.prefix?Q(t)||t:t,h[t]=h[this.p]=this,this.format=e.formatter||gt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=W._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;n<s.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,r=new Tt(s[n],e)},kt=W._registerPluginProp=function(t){if(!h[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,o,a){var u=l.com.greensock.plugins[e];return u?(u._cssRegister(),h[n].parse(t,i,n,r,s,o,a)):($("Error: "+e+" js file not loaded."),s)}})}};u=Tt.prototype,u.parseComplex=function(t,e,i,n,r,s){var o,a,l,h,u,c,f=this.keyword;if(this.multi&&(E.test(i)||E.test(e)?(a=e.replace(E,"|").split("|"),l=i.replace(E,"|").split("|")):f&&(a=[e],l=[i])),l){for(h=l.length>a.length?l.length:a.length,o=0;o<h;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(u=e.indexOf(f),c=i.indexOf(f),u!==c&&(c===-1?a[o]=a[o].split(f).join(""):u===-1&&(a[o]+=" "+f)));e=a.join(", "),i=l.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},u.parse=function(t,e,i,n,r,o,a){return this.parseComplex(t.style,this.format(J(t,this.p,s,!1,this.dflt)),this.format(e),r,o)},a.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,o,a,l){var h=new yt(t,r,0,0,o,2,r,(!1),i);return h.plugin=a,h.setRatio=e(t,n,s._tween,r),h},priority:i})},a.useSVGTransformAttr=p||d;var St,Ct="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ot=Q("transform"),At=G+"transform",Rt=Q("transformOrigin"),Dt=null!==Q("perspective"),Mt=W.Transform=function(){this.perspective=parseFloat(a.defaultTransformPerspective)||0,this.force3D=!(a.defaultForce3D===!1||!Dt)&&(a.defaultForce3D||"auto")},Nt=window.SVGElement,Ft=function(t,e,i){var n,r=I.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Et=I.documentElement,Lt=function(){var t,e,i,n=g||/Android/i.test(V)&&!window.chrome;return I.createElementNS&&!n&&(t=Ft("svg",Et),e=Ft("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[Ot]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Et.removeChild(t)),n}(),jt=function(t,e,i,n,r,s){var o,l,h,u,c,f,p,d,m,g,_,v,y,x,w=t._gsTransform,b=zt(t,!0);w&&(y=w.xOrigin,x=w.yOrigin),(!n||(o=n.split(" ")).length<2)&&(p=t.getBBox(),e=at(e).split(" "),o=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=u=parseFloat(o[0]),i.yOrigin=c=parseFloat(o[1]),n&&b!==It&&(f=b[0],p=b[1],d=b[2],m=b[3],g=b[4],_=b[5],v=f*m-p*d,l=u*(m/v)+c*(-d/v)+(d*_-m*g)/v,h=u*(-p/v)+c*(f/v)-(f*_-p*g)/v,u=i.xOrigin=o[0]=l,c=i.yOrigin=o[1]=h),w&&(s&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),r||r!==!1&&a.defaultSmoothOrigin!==!1?(l=u-y,h=c-x,w.xOffset+=l*b[0]+h*b[2]-l,w.yOffset+=l*b[1]+h*b[3]-h):w.xOffset=w.yOffset=0),s||t.setAttribute("data-svg-origin",o.join(" "))},Xt=function(t){try{return t.getBBox()}catch(t){}},Yt=function(t){return!!(Nt&&t.getBBox&&t.getCTM&&Xt(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},It=[1,0,0,1,0,0],zt=function(t,e){var i,n,r,s,o,a,l=t._gsTransform||new Mt,h=1e5,u=t.style;if(Ot?n=J(t,At,null,!0):t.currentStyle&&(n=t.currentStyle.filter.match(N),n=n&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,i&&Ot&&((a="none"===K(t).display)||!t.parentNode)&&(a&&(s=u.display,u.display="block"),t.parentNode||(o=1,Et.appendChild(t)),n=J(t,At,null,!0),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?u.display=s:a&&Ht(u,"display"),o&&Et.removeChild(t)),(l.svg||t.getBBox&&Yt(t))&&(i&&(u[Ot]+"").indexOf("matrix")!==-1&&(n=u[Ot],i=0),r=t.getAttribute("transform"),i&&r&&(r.indexOf("matrix")!==-1?(n=r,i=0):r.indexOf("translate")!==-1&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return It;for(r=(n||"").match(y)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(o=s-(s|=0))?(o*h+(o<0?-.5:.5)|0)/h+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Bt=W.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var s,o,l,h,u,c,f=n?t._gsTransform||new Mt:new Mt,p=f.scaleX<0,d=2e-5,m=1e5,g=Dt?parseFloat(J(t,Rt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,_=parseFloat(a.defaultTransformPerspective)||0;if(f.svg=!(!t.getBBox||!Yt(t)),f.svg&&(jt(t,J(t,Rt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),St=a.useSVGTransformAttr||Lt),s=zt(t),s!==It){if(16===s.length){var v,y,x,w,b,T=s[0],P=s[1],k=s[2],S=s[3],C=s[4],O=s[5],A=s[6],R=s[7],D=s[8],M=s[9],N=s[10],F=s[12],E=s[13],L=s[14],j=s[11],Y=Math.atan2(A,N);f.zOrigin&&(L=-f.zOrigin,F=D*L-s[12],E=M*L-s[13],L=N*L+f.zOrigin-s[14]),f.rotationX=Y*X,Y&&(w=Math.cos(-Y),b=Math.sin(-Y),v=C*w+D*b,y=O*w+M*b,x=A*w+N*b,D=C*-b+D*w,M=O*-b+M*w,N=A*-b+N*w,j=R*-b+j*w,C=v,O=y,A=x),Y=Math.atan2(-k,N),f.rotationY=Y*X,Y&&(w=Math.cos(-Y),b=Math.sin(-Y),v=T*w-D*b,y=P*w-M*b,x=k*w-N*b,M=P*b+M*w,N=k*b+N*w,j=S*b+j*w,T=v,P=y,k=x),Y=Math.atan2(P,T),f.rotation=Y*X,Y&&(w=Math.cos(-Y),b=Math.sin(-Y),T=T*w+C*b,y=P*w+O*b,O=P*-b+O*w,A=k*-b+A*w,P=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),f.scaleX=(Math.sqrt(T*T+P*P)*m+.5|0)/m,f.scaleY=(Math.sqrt(O*O+M*M)*m+.5|0)/m,f.scaleZ=(Math.sqrt(A*A+N*N)*m+.5|0)/m,f.rotationX||f.rotationY?f.skewX=0:(f.skewX=C||O?Math.atan2(C,O)*X+f.rotation:f.skewX||0,Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180))),f.perspective=j?1/(j<0?-j:j):0,f.x=F,f.y=E,f.z=L,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*T-f.yOrigin*C),f.y-=f.yOrigin-(f.yOrigin*P-f.xOrigin*O))}else if(!Dt||r||!s.length||f.x!==s[4]||f.y!==s[5]||!f.rotationX&&!f.rotationY){var I=s.length>=6,z=I?s[0]:1,B=s[1]||0,q=s[2]||0,W=I?s[3]:1;f.x=s[4]||0,f.y=s[5]||0,l=Math.sqrt(z*z+B*B),h=Math.sqrt(W*W+q*q),u=z||B?Math.atan2(B,z)*X:f.rotation||0,c=q||W?Math.atan2(q,W)*X+u:f.skewX||0,Math.abs(c)>90&&Math.abs(c)<270&&(p?(l*=-1,c+=u<=0?180:-180,u+=u<=0?180:-180):(h*=-1,c+=c<=0?180:-180)),f.scaleX=l,f.scaleY=h,f.rotation=u,f.skewX=c,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*z+f.yOrigin*q),f.y-=f.yOrigin-(f.xOrigin*B+f.yOrigin*W))}f.zOrigin=g;for(o in f)f[o]<d&&f[o]>-d&&(f[o]=0)}return n&&(t._gsTransform=f,f.svg&&(St&&t.style[Ot]?e.delayedCall(.001,function(){Ht(t.style,Ot)}):!St&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},qt=function(t){var e,i,n=this.data,r=-n.rotation*j,s=r+n.skewX*j,o=1e5,a=(Math.cos(r)*n.scaleX*o|0)/o,l=(Math.sin(r)*n.scaleX*o|0)/o,h=(Math.sin(s)*-n.scaleY*o|0)/o,u=(Math.cos(s)*n.scaleY*o|0)/o,c=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-h,h=-i,e=f.filter,c.filter="";var p,d,m=this.t.offsetWidth,_=this.t.offsetHeight,v="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+h+", M22="+u,x=n.x+m*n.xPercent/100,w=n.y+_*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?m*n.ox*.01:n.ox)-m/2,d=(n.oyp?_*n.oy*.01:n.oy)-_/2,x+=p-(p*a+d*l),w+=d-(p*h+d*u)),v?(p=m/2,d=_/2,y+=", Dx="+(p-(p*a+d*l)+x)+", Dy="+(d-(p*h+d*u)+w)+")"):y+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?c.filter=e.replace(F,y):c.filter=y+" "+e,0!==t&&1!==t||1===a&&0===l&&0===h&&1===u&&(v&&y.indexOf("Dx=0, Dy=0")===-1||P.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&c.removeAttribute("filter")),!v){var b,k,S,C=g<8?1:-1;for(p=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((m-((a<0?-a:a)*m+(l<0?-l:l)*_))/2+x),n.ieOffsetY=Math.round((_-((u<0?-u:u)*_+(h<0?-h:h)*m))/2+w),bt=0;bt<4;bt++)k=st[bt],b=f[k],i=b.indexOf("px")!==-1?parseFloat(b):tt(this.t,k,parseFloat(b),b.replace(T,""))||0,S=i!==n[k]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?p-n.ieOffsetX:d-n.ieOffsetY,c[k]=(n[k]=Math.round(i-S*(0===bt||2===bt?1:C)))+"px"}}},Wt=W.set3DTransformRatio=W.setTransformRatio=function(t){var e,i,n,r,s,o,a,l,h,u,c,f,p,m,g,_,v,y,x,w,b,T,P,k=this.data,S=this.t.style,C=k.rotation,O=k.rotationX,A=k.rotationY,R=k.scaleX,D=k.scaleY,M=k.scaleZ,N=k.x,F=k.y,E=k.z,L=k.svg,X=k.perspective,Y=k.force3D;if(((1===t||0===t)&&"auto"===Y&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!Y)&&!E&&!X&&!A&&!O&&1===M||St&&L||!Dt)return void(C||k.skewX||L?(C*=j,T=k.skewX*j,P=1e5,e=Math.cos(C)*R,r=Math.sin(C)*R,i=Math.sin(C-T)*-D,s=Math.cos(C-T)*D,T&&"simple"===k.skewType&&(v=Math.tan(T-k.skewY*j),v=Math.sqrt(1+v*v),i*=v,s*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v)),L&&(N+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,F+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset,St&&(k.xPercent||k.yPercent)&&(m=this.t.getBBox(),N+=.01*k.xPercent*m.width,F+=.01*k.yPercent*m.height),m=1e-6,N<m&&N>-m&&(N=0),F<m&&F>-m&&(F=0)),x=(e*P|0)/P+","+(r*P|0)/P+","+(i*P|0)/P+","+(s*P|0)/P+","+N+","+F+")",L&&St?this.t.setAttribute("transform","matrix("+x):S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+x):S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+D+","+N+","+F+")");if(d&&(m=1e-4,R<m&&R>-m&&(R=M=2e-5),D<m&&D>-m&&(D=M=2e-5),!X||k.z||k.rotationX||k.rotationY||(X=0)),C||k.skewX)C*=j,g=e=Math.cos(C),_=r=Math.sin(C),k.skewX&&(C-=k.skewX*j,g=Math.cos(C),_=Math.sin(C),"simple"===k.skewType&&(v=Math.tan((k.skewX-k.skewY)*j),v=Math.sqrt(1+v*v),g*=v,_*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v))),i=-_,s=g;else{if(!(A||O||1!==M||X||L))return void(S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) translate3d(":"translate3d(")+N+"px,"+F+"px,"+E+"px)"+(1!==R||1!==D?" scale("+R+","+D+")":""));e=s=1,i=r=0}h=1,n=o=a=l=u=c=0,f=X?-1/X:0,p=k.zOrigin,m=1e-6,w=",",b="0",C=A*j,C&&(g=Math.cos(C),_=Math.sin(C),a=-_,u=f*-_,n=e*_,o=r*_,h=g,f*=g,e*=g,r*=g),C=O*j,C&&(g=Math.cos(C),_=Math.sin(C),v=i*g+n*_,y=s*g+o*_,l=h*_,c=f*_,n=i*-_+n*g,o=s*-_+o*g,h*=g,f*=g,i=v,s=y),1!==M&&(n*=M,o*=M,h*=M,f*=M),1!==D&&(i*=D,s*=D,l*=D,c*=D),1!==R&&(e*=R,r*=R,a*=R,u*=R),(p||L)&&(p&&(N+=n*-p,F+=o*-p,E+=h*-p+p),L&&(N+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,F+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset),N<m&&N>-m&&(N=b),F<m&&F>-m&&(F=b),E<m&&E>-m&&(E=0)),x=k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix3d(":"matrix3d(",x+=(e<m&&e>-m?b:e)+w+(r<m&&r>-m?b:r)+w+(a<m&&a>-m?b:a),x+=w+(u<m&&u>-m?b:u)+w+(i<m&&i>-m?b:i)+w+(s<m&&s>-m?b:s),O||A||1!==M?(x+=w+(l<m&&l>-m?b:l)+w+(c<m&&c>-m?b:c)+w+(n<m&&n>-m?b:n),x+=w+(o<m&&o>-m?b:o)+w+(h<m&&h>-m?b:h)+w+(f<m&&f>-m?b:f)+w):x+=",0,0,0,0,1,0,",x+=N+w+F+w+E+w+(X?1+-E/X:1)+")",S[Ot]=x};u=Mt.prototype,u.x=u.y=u.z=u.skewX=u.skewY=u.rotation=u.rotationX=u.rotationY=u.zOrigin=u.xPercent=u.yPercent=u.xOffset=u.yOffset=0,u.scaleX=u.scaleY=u.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,r,o,l){if(n._lastParsedTransform===l)return r;n._lastParsedTransform=l;var h;"function"==typeof l[i]&&(h=l[i],l[i]=e);var u,c,f,p,d,m,g,y,x,w=t._gsTransform,b=t.style,T=1e-6,P=Ct.length,k=l,S={},C="transformOrigin",O=Bt(t,s,!0,k.parseTransform),A=k.transform&&("function"==typeof k.transform?k.transform(v,_):k.transform);if(n._transform=O,A&&"string"==typeof A&&Ot)c=B.style,c[Ot]=A,c.display="block",c.position="absolute",I.body.appendChild(B),u=Bt(B,null,!1),O.svg&&(m=O.xOrigin,g=O.yOrigin,u.x-=O.xOffset,u.y-=O.yOffset,(k.transformOrigin||k.svgOrigin)&&(A={},jt(t,at(k.transformOrigin),A,k.svgOrigin,k.smoothOrigin,!0),m=A.xOrigin,g=A.yOrigin,u.x-=A.xOffset-O.xOffset,u.y-=A.yOffset-O.yOffset),(m||g)&&(y=zt(B,!0),u.x-=m-(m*y[0]+g*y[2]),u.y-=g-(m*y[1]+g*y[3]))),I.body.removeChild(B),u.perspective||(u.perspective=O.perspective),null!=k.xPercent&&(u.xPercent=ht(k.xPercent,O.xPercent)),null!=k.yPercent&&(u.yPercent=ht(k.yPercent,O.yPercent));else if("object"==typeof k){if(u={scaleX:ht(null!=k.scaleX?k.scaleX:k.scale,O.scaleX),scaleY:ht(null!=k.scaleY?k.scaleY:k.scale,O.scaleY),scaleZ:ht(k.scaleZ,O.scaleZ),x:ht(k.x,O.x),y:ht(k.y,O.y),z:ht(k.z,O.z),xPercent:ht(k.xPercent,O.xPercent),yPercent:ht(k.yPercent,O.yPercent),perspective:ht(k.transformPerspective,O.perspective)},d=k.directionalRotation,null!=d)if("object"==typeof d)for(c in d)k[c]=d[c];else k.rotation=d;"string"==typeof k.x&&k.x.indexOf("%")!==-1&&(u.x=0,u.xPercent=ht(k.x,O.xPercent)),"string"==typeof k.y&&k.y.indexOf("%")!==-1&&(u.y=0,u.yPercent=ht(k.y,O.yPercent)),u.rotation=ut("rotation"in k?k.rotation:"shortRotation"in k?k.shortRotation+"_short":"rotationZ"in k?k.rotationZ:O.rotation-O.skewY,O.rotation-O.skewY,"rotation",S),Dt&&(u.rotationX=ut("rotationX"in k?k.rotationX:"shortRotationX"in k?k.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",S),u.rotationY=ut("rotationY"in k?k.rotationY:"shortRotationY"in k?k.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",S)),u.skewX=ut(k.skewX,O.skewX-O.skewY),(u.skewY=ut(k.skewY,O.skewY))&&(u.skewX+=u.skewY,u.rotation+=u.skewY)}for(Dt&&null!=k.force3D&&(O.force3D=k.force3D,p=!0),O.skewType=k.skewType||O.skewType||a.defaultSkewType,f=O.force3D||O.z||O.rotationX||O.rotationY||u.z||u.rotationX||u.rotationY||u.perspective,f||null==k.scale||(u.scaleZ=1);--P>-1;)x=Ct[P],A=u[x]-O[x],(A>T||A<-T||null!=k[x]||null!=Y[x])&&(p=!0,r=new yt(O,x,O[x],A,r),x in S&&(r.e=S[x]),r.xs0=0,r.plugin=o,n._overwriteProps.push(r.n));
return A=k.transformOrigin,O.svg&&(A||k.svgOrigin)&&(m=O.xOffset,g=O.yOffset,jt(t,at(A),u,k.svgOrigin,k.smoothOrigin),r=xt(O,"xOrigin",(w?O:u).xOrigin,u.xOrigin,r,C),r=xt(O,"yOrigin",(w?O:u).yOrigin,u.yOrigin,r,C),m===O.xOffset&&g===O.yOffset||(r=xt(O,"xOffset",w?m:O.xOffset,O.xOffset,r,C),r=xt(O,"yOffset",w?g:O.yOffset,O.yOffset,r,C)),A=St?null:"0px 0px"),(A||Dt&&f&&O.zOrigin)&&(Ot?(p=!0,x=Rt,A=(A||J(t,x,s,!1,"50% 50%"))+"",r=new yt(b,x,0,0,r,(-1),C),r.b=b[x],r.plugin=o,Dt?(c=O.zOrigin,A=A.split(" "),O.zOrigin=(A.length>2&&(0===c||"0px"!==A[2])?parseFloat(A[2]):c)||0,r.xs0=r.e=A[0]+" "+(A[1]||"50%")+" 0px",r=new yt(O,"zOrigin",0,0,r,(-1),r.n),r.b=c,r.xs0=r.e=O.zOrigin):r.xs0=r.e=A):at(A+"",O)),p&&(n._transformType=O.svg&&St||!f&&3!==this._transformType?2:3),h&&(l[i]=h),r},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,o,a){e=this.format(e);var l,h,u,c,f,p,d,m,g,_,v,y,x,w,b,T,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(g=parseFloat(t.offsetWidth),_=parseFloat(t.offsetHeight),l=e.split(" "),h=0;h<P.length;h++)this.p.indexOf("border")&&(P[h]=Q(P[h])),f=c=J(t,P[h],s,!1,"0px"),f.indexOf(" ")!==-1&&(c=f.split(" "),f=c[0],c=c[1]),p=u=l[h],d=parseFloat(f),y=f.substr((d+"").length),x="="===p.charAt(1),x?(m=parseInt(p.charAt(0)+"1",10),p=p.substr(2),m*=parseFloat(p),v=p.substr((m+"").length-(m<0?1:0))||""):(m=parseFloat(p),v=p.substr((m+"").length)),""===v&&(v=r[i]||y),v!==y&&(w=tt(t,"borderLeft",d,y),b=tt(t,"borderTop",d,y),"%"===v?(f=w/g*100+"%",c=b/_*100+"%"):"em"===v?(T=tt(t,"borderLeft",1,"em"),f=w/T+"em",c=b/T+"em"):(f=w+"px",c=b+"px"),x&&(p=parseFloat(f)+m+v,u=parseFloat(c)+m+v)),o=wt(k,P[h],f+" "+c,p+" "+u,!1,"0px",o);return o},prefix:!0,formatter:gt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,r,o){return wt(t.style,i,this.format(J(t,i,s,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:gt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,r,o){var a,l,h,u,c,f,p="background-position",d=s||K(t,null),m=this.format((d?g?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),_=this.format(e);if(m.indexOf("%")!==-1!=(_.indexOf("%")!==-1)&&_.split(",").length<2&&(f=J(t,"backgroundImage").replace(R,""),f&&"none"!==f)){for(a=m.split(" "),l=_.split(" "),q.setAttribute("src",f),h=2;--h>-1;)m=a[h],u=m.indexOf("%")!==-1,u!==(l[h].indexOf("%")!==-1)&&(c=0===h?t.offsetWidth-q.width:t.offsetHeight-q.height,a[h]=u?parseFloat(m)/100*c+"px":parseFloat(m)/c*100+"%");m=a.join(" ")}return this.parseComplex(t.style,m,_,r,o)},formatter:at}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",at(t.indexOf(" ")===-1?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:_t("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:_t("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,r,o){var a,l,h;return g<9?(l=t.currentStyle,h=g<8?" ":",",a="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(a=this.format(J(t,this.p,s,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,r,o)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,r,o){var a=J(t,"borderTopWidth",s,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(T,"");return"px"!==h&&(a=parseFloat(a)/tt(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(a+" "+J(t,"borderTopStyle",s,!1,"solid")+" "+J(t,"borderTopColor",s,!1,"#000")),l.join(" "),r,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(mt)||["#000"])[0]}}),Pt("borderWidth",{parser:_t("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new yt(o,a,0,0,r,(-1),i,(!1),0,o[a],e)}});var Vt=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(n.indexOf("atrix(")===-1&&n.indexOf("radient(")===-1&&n.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(S,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),n.indexOf("pacity")===-1?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(P,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,r,o){var a=parseFloat(J(t,"opacity",s,!1,"1")),l=t.style,h="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),h&&1===a&&"hidden"===J(t,"visibility",s)&&0!==e&&(a=0),H?r=new yt(l,"opacity",a,e-a,r):(r=new yt(l,"opacity",100*a,100*(e-a),r),r.xn1=h?1:0,l.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=o,r.setRatio=Vt),h&&(r=new yt(l,"visibility",0,0,r,(-1),null,(!1),0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),r.xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Ht=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(O,"-$1").toLowerCase())):t.removeAttribute(e))},Ut=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ht(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,i,r,o,a,l){var h,u,c,f,p,d=t.getAttribute("class")||"",m=t.style.cssText;if(o=r._classNamePT=new yt(t,i,0,0,o,2),o.setRatio=Ut,o.pr=-11,n=!0,o.b=d,u=it(t,s),c=t._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=o,o.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",o.e),h=nt(t,u,it(t),l,f),t.setAttribute("class",d),o.data=h.firstMPT,t.style.cssText=m,o=o.xfirst=r.parse(t,h.difs,o,a)}});var $t=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,a=h.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],h[i]&&(h[i].parse===a?r=!0:i="transformOrigin"===i?Rt:h[i].p),Ht(o,i);r&&(Ht(o,Ot),s=this.t._gsTransform,s&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,i,r,s){return s=new yt(t,i,0,0,s,2),s.setRatio=$t,s.e=e,s.pr=-10,s.data=r._tween,n=!0,s}}),u="bezier,throwProps,physicsProps,physics2D".split(","),bt=u.length;bt--;)kt(u[bt]);u=a.prototype,u._firstPT=u._lastParsedTransform=u._transform=null,u._onInitTween=function(t,e,i,l){if(!t.nodeType)return!1;this._target=_=t,this._tween=i,this._vars=e,v=l,c=e.autoRound,n=!1,r=e.suffixMap||a.suffixMap,s=K(t,""),o=this._overwriteProps;var u,d,g,y,x,w,b,T,P,S=t.style;if(f&&""===S.zIndex&&(u=J(t,"zIndex",s),"auto"!==u&&""!==u||this._addLazySet(S,"zIndex",0)),"string"==typeof e&&(y=S.cssText,u=it(t,s),S.cssText=y+";"+e,u=nt(t,u,it(t)).difs,!H&&k.test(e)&&(u.opacity=parseFloat(RegExp.$1)),e=u,S.cssText=y),e.className?this._firstPT=d=h.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(P=3===this._transformType,Ot?p&&(f=!0,""===S.zIndex&&(b=J(t,"zIndex",s),"auto"!==b&&""!==b||this._addLazySet(S,"zIndex",0)),m&&this._addLazySet(S,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):S.zoom=1,g=d;g&&g._next;)g=g._next;T=new yt(t,"transform",0,0,null,2),this._linkCSSP(T,null,g),T.setRatio=Ot?Wt:qt,T.data=this._transform||Bt(t,s,!0),T.tween=i,T.pr=-1,o.pop()}if(n){for(;d;){for(w=d._next,g=y;g&&g.pr>d.pr;)g=g._next;(d._prev=g?g._prev:x)?d._prev._next=d:y=d,(d._next=g)?g._prev=d:x=d,d=w}this._firstPT=y}return!0},u.parse=function(t,e,i,n){var o,a,l,u,f,p,d,m,g,y,x=t.style;for(o in e)p=e[o],"function"==typeof p&&(p=p(v,_)),a=h[o],a?i=a.parse(t,p,o,this,i,n,e):(f=J(t,o,s)+"",g="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||o.indexOf("Color")!==-1||g&&C.test(p)?(g||(p=pt(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=wt(x,o,f,p,!0,"transparent",i,0,n)):g&&L.test(p)?i=wt(x,o,f,p,!0,null,i,0,n):(l=parseFloat(f),d=l||0===l?f.substr((l+"").length):"",""!==f&&"auto"!==f||("width"===o||"height"===o?(l=ot(t,o,s),d="px"):"left"===o||"top"===o?(l=et(t,o,s),d="px"):(l="opacity"!==o?0:1,d="")),y=g&&"="===p.charAt(1),y?(u=parseInt(p.charAt(0)+"1",10),p=p.substr(2),u*=parseFloat(p),m=p.replace(T,"")):(u=parseFloat(p),m=g?p.replace(T,""):""),""===m&&(m=o in r?r[o]:d),p=u||0===u?(y?u+l:u)+m:e[o],d!==m&&""!==m&&(u||0===u)&&l&&(l=tt(t,o,l,d),"%"===m?(l/=tt(t,o,100,"%")/100,e.strictUnits!==!0&&(f=l+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?l/=tt(t,o,1,m):"px"!==m&&(u=tt(t,o,u,m),m="px"),y&&(u||0===u)&&(p=u+l+m)),y&&(u+=l),!l&&0!==l||!u&&0!==u?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(i=new yt(x,o,u||l||0,0,i,(-1),o,(!1),0,f,p),i.xs0="none"!==p||"display"!==o&&o.indexOf("Style")===-1?p:f):$("invalid "+o+" tween value: "+e[o]):(i=new yt(x,o,l,u-l,i,0,o,c!==!1&&("px"===m||"zIndex"===o),0,f,p),i.xs0=m))),n&&i&&!i.plugin&&(i.plugin=n);return i},u.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<s&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else r.type===-1?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&r.type!==-1)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},u._enableTransforms=function(t){this._transform=this._transform||Bt(this._target,s,!0),this._transformType=this._transform.svg&&St||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};u._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},u._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},u._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},u._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,s)};var Zt=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)Zt(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],o=s.type,s.style&&(e.push(it(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||Zt(s,e,i)};return a.cascadeTo=function(t,i,n){var r,s,o,a,l=e.to(t,i,n),h=[l],u=[],c=[],f=[],p=e._internals.reservedProps;for(t=l._targets||l.target,Zt(t,u,f),l.render(i,!0,!0),Zt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if(s=nt(f[r],u[r],c[r]),s.firstMPT){s=s.difs;for(o in n)p[o]&&(s[o]=n[o]);a={};for(o in s)a[o]=u[r][o];h.push(e.fromTo(f[r],i,a,s))}return h},t.activate([a]),a},!0),function(){var t=i._gsDefine.plugin({propName:"roundProps",version:"1.6.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),e=function(t){for(;t;)t.f||t.blob||(t.m=Math.round),t=t._next},n=t.prototype;n._onInitAllProps=function(){for(var t,i,n,r=this._tween,s=r.vars.roundProps.join?r.vars.roundProps:r.vars.roundProps.split(","),o=s.length,a={},l=r._propLookup.roundProps;--o>-1;)a[s[o]]=Math.round;for(o=s.length;--o>-1;)for(t=s[o],i=r._firstPT;i;)n=i._next,i.pg?i.t._mod(a):i.n===t&&(2===i.f&&i.t?e(i.t._firstPT):(this._add(i.t,t,i.s,i.c),n&&(n._prev=i._prev),i._prev?i._prev._next=n:r._firstPT===i&&(r._firstPT=n),i._next=i._prev=null,r._propLookup[t]=l)),i=n;return!1},n._add=function(t,e,i,n){this._addTween(t,e,i,i+n,e,Math.round),this._overwriteProps.push(e)}}(),function(){i._gsDefine.plugin({propName:"attr",API:2,version:"0.6.0",init:function(t,e,i,n){var r,s;if("function"!=typeof t.setAttribute)return!1;for(r in e)s=e[r],"function"==typeof s&&(s=s(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",s+"",r,!1,r),this._overwriteProps.push(r);return!0}})}(),i._gsDefine.plugin({propName:"directionalRotation",version:"0.3.0",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,s,o,a,l,h,u=e.useRadians===!0?2*Math.PI:360,c=1e-6;for(r in e)"useRadians"!==r&&(a=e[r],"function"==typeof a&&(a=a(n,t)),h=(a+"").split("_"),s=h[0],o=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),a=this.finals[r]="string"==typeof s&&"="===s.charAt(1)?o+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0,l=a-o,h.length&&(s=h.join("_"),s.indexOf("short")!==-1&&(l%=u,l!==l%(u/2)&&(l=l<0?l+u:l-u)),s.indexOf("_cw")!==-1&&l<0?l=(l+9999999999*u)%u-(l/u|0)*u:s.indexOf("ccw")!==-1&&l>0&&(l=(l-9999999999*u)%u-(l/u|0)*u)),(l>c||l<-c)&&(this._addTween(t,r,o,o+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,i._gsDefine("easing.Back",["easing.Ease"],function(t){var e,n,r,s=i.GreenSockGlobals||i,o=s.com.greensock,a=2*Math.PI,l=Math.PI/2,h=o._class,u=function(e,i){var n=h("easing."+e,function(){},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,n},c=t.register||function(){},f=function(t,e,i,n,r){var s=h("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return c(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(e,i){var n=h("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,r.config=function(t){return new n(t)},n},m=f("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),g=h("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),_=g.prototype=new t;return _.constructor=g,_.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},g.ease=new g(.7,.7),_.config=g.config=function(t,e,i){return new g(t,e,i)},e=h("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),_=e.prototype=new t,_.constructor=e,_.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},_.config=e.config=function(t){return new e(t)},n=h("easing.RoughEase",function(e){e=e||{};for(var i,n,r,s,o,a,l=e.taper||"none",h=[],u=0,c=0|(e.points||20),f=c,d=e.randomize!==!1,m=e.clamp===!0,g=e.template instanceof t?e.template:null,_="number"==typeof e.strength?.4*e.strength:.4;--f>-1;)i=d?Math.random():1/c*f,n=g?g.getRatio(i):i,"none"===l?r=_:"out"===l?(s=1-i,r=s*s*_):"in"===l?r=i*i*_:i<.5?(s=2*i,r=s*s*.5*_):(s=2*(1-i),r=s*s*.5*_),d?n+=Math.random()*r-.5*r:f%2?n+=.5*r:n-=.5*r,m&&(n>1?n=1:n<0&&(n=0)),h[u++]={x:i,y:n};for(h.sort(function(t,e){return t.x-e.x}),a=new p(1,1,null),f=c;--f>-1;)o=h[f],a=new p(o.x,o.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)},!0),_=n.prototype=new t,_.constructor=n,_.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},_.config=function(t){return new n(t)},n.ease=new n,f("Bounce",u("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),u("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),u("BounceInOut",function(t){var e=t<.5;return t=e?1-2*t:2*t-1,t=t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",u("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),u("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),u("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),r=function(e,i,n){var r=h("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||n)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),s=r.prototype=new t;return s.constructor=r,s.getRatio=i,s.config=function(t,e){return new r(t,e)},r},f("Elastic",r("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2))},.3),r("ElasticInOut",function(t){return(t*=2)<1?-.5*(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",u("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),u("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),u("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",u("SineOut",function(t){return Math.sin(t*l)}),u("SineIn",function(t){return-Math.cos(t*l)+1}),u("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),h("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),c(s.SlowMo,"SlowMo","ease,"),c(n,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),m},!0)}),i._gsDefine&&i._gsQueue.pop()(),function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,o,a,l,h,u=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=u("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},m=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),g={},_=function(s,o,a,l){this.sc=g[s]?g[s].sc:[],g[s]=this,this.gsClass=null,this.func=a;var h=[];this.check=function(c){for(var f,p,d,m,v,y=o.length,x=y;--y>-1;)(f=g[o[y]]||new _(o[y],[])).gsClass?(h[y]=f.gsClass,x--):c&&f.sc.push(this);if(0===x&&a){if(p=("com.greensock."+s).split("."),d=p.pop(),m=u(p.join("."))[d]=this.gsClass=a.apply(a,h),l)if(r[d]=n[d]=m,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return m});else if(v)if(s===i){e.exports=n[i]=m;for(y in n)m[y]=n[y]}else n[i]&&(n[i][d]=m);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new _(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var x=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?x.concat(e):x},!0),b=w.map={},T=w.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),h=l.length,u=(i||"easeIn,easeOut,easeInOut").split(",");--h>-1;)for(s=l[h],r=n?y("easing."+s,null,!0):c.easing[s]||{},o=u.length;--o>-1;)a=u[o],b[s+"."+a]=b[a+s]=r[a]=t.getRatio?t:t[a]||new t};for(a=w.prototype,a._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],o=s.length;--o>-1;)a=s[o]+",Power"+o,T(new w(null,null,1,o),a,"easeOut",!0),T(new w(null,null,2,o),a,"easeIn"+(0===o?",easeNone":"")),T(new w(null,null,3,o),a,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});a=P.prototype,a.addEventListener=function(t,e,i,n,r){r=r||0;var s,o,a=this._listeners[t],u=0;for(this!==l||h||l.wake(),null==a&&(this._listeners[t]=a=[]),o=a.length;--o>-1;)s=a[o],s.c===e&&s.s===i?a.splice(o,1):0===u&&s.pr<r&&(u=o+1);a.splice(u,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var k=t.requestAnimationFrame,S=t.cancelAnimationFrame,C=Date.now||function(){return(new Date).getTime()},O=C();for(s=["ms","moz","webkit","o"],o=s.length;--o>-1&&!k;)k=t[s[o]+"RequestAnimationFrame"],S=t[s[o]+"CancelAnimationFrame"]||t[s[o]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,o,a=this,u=C(),c=!(e===!1||!k)&&"auto",p=500,m=33,g="tick",_=function(t){var e,l,h=C()-O;h>p&&(u+=h-m),O+=h,a.time=(O-u)/1e3,e=a.time-o,(!i||e>0||t===!0)&&(a.frame++,o+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(_)),l&&a.dispatchEvent(g)};P.call(a),a.time=a.frame=0,a.tick=function(){_(!0)},a.lagSmoothing=function(t,e){p=t||1/f,m=Math.min(e,p,0)},a.sleep=function(){null!=r&&(c&&S?S(r):clearTimeout(r),n=d,r=null,a===l&&(h=!1))},a.wake=function(t){null!==r?a.sleep():t?u+=-O+(O=C()):a.frame>10&&(O=C()-p+5),n=0===i?d:c&&k?k:function(t){return setTimeout(t,1e3*(o-a.time)+1|0)},a===l&&(h=!0),_(2)},a.fps=function(t){return arguments.length?(i=t,s=1/(i||60),o=this.time+s,void a.wake()):i},a.useRAF=function(t){return arguments.length?(a.sleep(),c=t,void a.fps(i)):c},a.fps(t),setTimeout(function(){"auto"===c&&a.frame<5&&"hidden"!==document.visibilityState&&a.useRAF(!1)},1500)}),a=c.Ticker.prototype=new c.events.EventDispatcher,a.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){h||l.wake();var i=this.vars.useFrames?U:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,a=A.prototype,a._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var R=function(){h&&C()-O>2e3&&l.wake(),setTimeout(R,2e3)};R(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},a._enabled=function(t,e){return h||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=m(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(h||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(E.length&&Z(),this.render(t,e,!1),E.length&&Z())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(h||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});a=D.prototype=new A,a.constructor=D,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return h||l.wake(),this._totalTime};var M=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=M.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:M.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?H[M.defaultOverwrite]:"number"==typeof l?l>>0:H[l],(a||e instanceof Array||e.push&&m(e))&&"number"!=typeof e[0])for(this._targets=o=p(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)s=o[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(p(s))):(this._siblings[r]=Q(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=o[r--]=M.selector(s),"string"==typeof s&&o.splice(r+1,1)):o.splice(r--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)))},!0),N=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},F=function(t,e){var i,n={};for(i in t)V[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!B[i]||B[i]&&B[i]._autoCSS)||(n[i]=t[i],
delete t[i]);t.css=n};a=M.prototype=new A,a.constructor=M,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,M.version="1.19.0",M.defaultEase=a._ease=new w(null,null,1,1),M.defaultOverwrite="auto",M.ticker=l,M.autoSleep=120,M.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},M.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(M.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var E=[],L={},j=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,X=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},Y=function(t,e,i,n){var r,s,o,a,l,h,u,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(j)||[],s=e.match(j)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,a=0;a<l;a++)u=s[a],h=e.substr(f,e.indexOf(u,f)-f),p+=h||!a?h:",",f+=h.length,d?d=(d+1)%5:"rgba("===h.substr(-5)&&(d=1),u===r[a]||r.length<=a?p+=u:(p&&(c.push(p),p=""),o=parseFloat(r[a]),c.push(o),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:o,c:("="===u.charAt(1)?parseInt(u.charAt(0)+"1",10)*parseFloat(u.substr(2)):parseFloat(u)-o)||0,f:0,m:d&&d<4?Math.round:0}),f+=u.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=X,c},I=function(t,e,i,n,r,s,o,a,l){"function"==typeof n&&(n=n(l||0,t));var h,u,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(u=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=o?t[u](o):t[u]()),"string"==typeof c&&(o||isNaN(c))?(d.fp=o,h=Y(c,n,a||M.defaultStringFilter,d),d={t:h,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},z=M._internals={isArray:m,isSelector:N,lazyTweens:E,blobDif:Y},B=M._plugins={},q=z.tweenLookup={},W=0,V=z.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},H={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},U=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Z=z.lazyRender=function(){var t,e=E.length;for(L={};--e>-1;)t=E[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);E.length=0};$._startTime=l.time,U._startTime=l.frame,$._active=U._active=!0,setTimeout(Z,1),A._updateRoot=M.render=function(){var t,e,i;if(E.length&&Z(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),U.render((l.frame-U._startTime)*U._timeScale,!1,!1),E.length&&Z(),l.frame>=G){G=l.frame+(parseInt(M.autoSleep,10)||120);for(i in q){for(e=q[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete q[i]}if(i=$._first,(!i||i._paused)&&M.autoSleep&&!U._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Q=function(t,e,i){var n,r,s=t._gsTweenID;if(q[s||(t._gsTweenID=s="t"+W++)]||(q[s]={target:t,tweens:[]}),e&&(n=q[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return q[s].tweens},K=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),o=M.onOverwrite,o&&(s=o(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var h,u=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(h=h||tt(e,0,d),0===tt(a,h,d)&&(c[p++]=a)):a._startTime<=u&&a._startTime+a.totalDuration()/a._timeScale>u&&((d||!a._initted)&&u-a._startTime<=2e-10||(c[p++]=a)));for(s=p;--s>-1;)if(a=c[s],2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};a._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,l=this._duration,h=!!o.immediateRender,u=o.ease;if(o.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in o.startAt)r[n]=o.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=h&&o.lazy!==!1,r.startAt=r.delay=null,this._startAt=M.to(this.target,0,r),h)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(h=!1),i={};for(n in o)V[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=h&&o.lazy!==!1,i.immediateRender=h,this._startAt=M.to(this.target,0,i),h){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=u=u?u instanceof w?u:"function"==typeof u?new w(u,o.easeParams):b[u]||M.defaultEase:M.defaultEase,o.easeParams instanceof Array&&u.config&&(this._ease=u.config.apply(u,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&M._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,s){var o,a,l,h,u,c;if(null==e)return!1;L[e._gsTweenID]&&Z(),this.vars.css||e.style&&e!==t&&e.nodeType&&B.css&&this.vars.autoCSS!==!1&&F(this.vars,e);for(o in this.vars)if(c=this.vars[o],V[o])c&&(c instanceof Array||c.push&&m(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(B[o]&&(h=new B[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=u={_next:this._firstPT,t:h,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:h._priority,m:0},a=h._overwriteProps.length;--a>-1;)i[h._overwriteProps[a]]=this._firstPT;(h._priority||h._onInitAllProps)&&(l=!0),(h._onDisable||h._onEnable)&&(this._notifyPluginsOfEnabled=!0),u._next&&(u._next._prev=u)}else i[o]=I.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,h=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(h<0||t<=0&&t>=-1e-7||h===f&&"isPause"!==this.data)&&h!==t&&(i=!0,h>f&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||h===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&h>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(h>=0&&(h!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||h===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var u=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&u>=.5)&&(u=1-u),3===c&&(u*=2),1===p?u*=u:2===p?u*=u*u:3===p?u*=u*u*u:4===p&&(u*=u*u*u*u),1===c?this.ratio=1-u:2===c?this.ratio=u:t/l<.5?this.ratio=u/2:this.ratio=1-u/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=h,E.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&o!==f&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:M.selector(e)||e;var n,r,s,o,a,l,h,u,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((m(e)||N(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(h=t||a,u=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(M.onOverwrite||this.vars.onOverwrite)){for(s in h)a[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in h)(o=a[s])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(h)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),u&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&M._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(h||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Q(n[i],this,!0);else this._siblings=Q(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&M._onPluginEvent(t?"_onEnable":"_onDisable",this)},M.to=function(t,e,i){return new M(t,e,i)},M.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new M(t,e,i)},M.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new M(t,e,n)},M.delayedCall=function(t,e,i,n,r){return new M(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},M.set=function(t,e){return new M(t,0,e)},M.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:M.selector(t)||t;var i,n,r,s;if((m(t)||N(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(M.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Q(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},M.killTweensOf=M.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=M.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(a=et.prototype,et.version="1.19.0",et.API=2,a._firstPT=null,a._addTween=I,a.setRatio=X,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},M._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(B[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),a=o.prototype=new et(i);a.constructor=o,o.API=t.API;for(e in s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,et.activate([o]),o},s=t._gsQueue){for(o=0;o<s.length;o++)s[o]();for(a in g)g[a].func||t.console.log("GSAP encountered missing dependency: "+a)}h=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenMax")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],8:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("easing.CustomEase",["easing.Ease"],function(t){var e=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,i=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,n=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,r=/[cLlsS]/g,s="CustomEase only accepts Cubic Bezier data.",o=function(t,e,i,n,r,s,a,l,h,u,c){var f,p=(t+i)/2,d=(e+n)/2,m=(i+r)/2,g=(n+s)/2,_=(r+a)/2,v=(s+l)/2,y=(p+m)/2,x=(d+g)/2,w=(m+_)/2,b=(g+v)/2,T=(y+w)/2,P=(x+b)/2,k=a-t,S=l-e,C=Math.abs((i-a)*S-(n-l)*k),O=Math.abs((r-a)*S-(s-l)*k);return u||(u=[{x:t,y:e},{x:a,y:l}],c=1),u.splice(c||u.length-1,0,{x:T,y:P}),(C+O)*(C+O)>h*(k*k+S*S)&&(f=u.length,o(t,e,p,d,y,x,T,P,h,u,c),o(T,P,w,b,_,v,a,l,h,u,c+1+(u.length-f))),u},a=function(t){var e,r,o,a,l,h,u,c,f,p,d,m=(t+"").replace(n,function(t){var e=+t;return e<1e-4&&e>-1e-4?0:e}).match(i)||[],g=[],_=0,v=0,y=m.length,x=2;for(e=0;e<y;e++)if(f=a,isNaN(m[e])?(a=m[e].toUpperCase(),l=a!==m[e]):e--,r=+m[e+1],o=+m[e+2],l&&(r+=_,o+=v),e||(u=r,c=o),"M"===a)h&&h.length<8&&(g.length-=1,x=0),_=u=r,v=c=o,h=[r,o],x=2,g.push(h),e+=2,a="L";else if("C"===a)h||(h=[0,0]),h[x++]=r,h[x++]=o,l||(_=v=0),h[x++]=_+1*m[e+3],h[x++]=v+1*m[e+4],h[x++]=_+=1*m[e+5],h[x++]=v+=1*m[e+6],e+=6;else if("S"===a)"C"===f||"S"===f?(p=_-h[x-4],d=v-h[x-3],h[x++]=_+p,h[x++]=v+d):(h[x++]=_,h[x++]=v),h[x++]=r,h[x++]=o,l||(_=v=0),h[x++]=_+=1*m[e+3],h[x++]=v+=1*m[e+4],e+=4;else{if("L"!==a&&"Z"!==a)throw s;"Z"===a&&(r=u,o=c,h.closed=!0),("L"===a||Math.abs(_-r)>.5||Math.abs(v-o)>.5)&&(h[x++]=_+(r-_)/3,h[x++]=v+(o-v)/3,h[x++]=_+2*(r-_)/3,h[x++]=v+2*(o-v)/3,h[x++]=r,h[x++]=o,"L"===a&&(e+=2)),_=r,v=o}return g[0]},l=function(t){var e,i=t.length,n=999999999999;for(e=1;e<i;e+=6)+t[e]<n&&(n=+t[e]);return n},h=function(t,e,i){i||0===i||(i=Math.max(+t[t.length-1],+t[1]));var n,r=+t[0]*-1,s=-i,o=t.length,a=1/(+t[o-2]+r),h=-e||(Math.abs(+t[o-1]-+t[1])<.01*(+t[o-2]-+t[0])?l(t)+s:+t[o-1]+s);for(h=h?1/h:-a,n=0;n<o;n+=2)t[n]=(+t[n]+r)*a,t[n+1]=(+t[n+1]+s)*h},u=function(t){var e=this.lookup[t*this.l|0]||this.lookup[this.l-1];return e.nx<t&&(e=e.n),e.y+(t-e.x)/e.cx*e.cy},c=function(e,i,n){this._calcEnd=!0,this.id=e,e&&(t.map[e]=this),this.getRatio=u,this.setData(i,n)},f=c.prototype=new t;return f.constructor=c,f.setData=function(t,i){t=t||"0,0,1,1";var n,l,u,c,f,p,d,m,g,_,v=t.match(e),y=1,x=[];if(i=i||{},_=i.precision||1,this.data=t,this.lookup=[],this.points=x,this.fast=_<=1,(r.test(t)||t.indexOf("M")!==-1&&t.indexOf("C")===-1)&&(v=a(t)),n=v.length,4===n)v.unshift(0,0),v.push(1,1),n=8;else if((n-2)%6)throw s;for(0===+v[0]&&1===+v[n-2]||h(v,i.height,i.originY),this.rawBezier=v,c=2;c<n;c+=6)l={x:+v[c-2],y:+v[c-1]},u={x:+v[c+4],y:+v[c+5]},x.push(l,u),o(l.x,l.y,+v[c],+v[c+1],+v[c+2],+v[c+3],u.x,u.y,1/(2e5*_),x,x.length-1);for(n=x.length,c=0;c<n;c++)d=x[c],m=x[c-1]||d,d.x>m.x||m.y!==d.y&&m.x===d.x||d===m?(m.cx=d.x-m.x,m.cy=d.y-m.y,m.n=d,m.nx=d.x,this.fast&&c>1&&Math.abs(m.cy/m.cx-x[c-2].cy/x[c-2].cx)>2&&(this.fast=!1),m.cx<y&&(m.cx?y=m.cx:m.cx=.001)):(x.splice(c--,1),n--);if(n=1/y+1|0,this.l=n,f=1/n,p=0,d=x[0],this.fast){for(c=0;c<n;c++)g=c*f,d.nx<g&&(d=x[++p]),l=d.y+(g-d.x)/d.cx*d.cy,this.lookup[c]={x:g,cx:f,y:l,cy:0,nx:9},c&&(this.lookup[c-1].cy=l-this.lookup[c-1].y);this.lookup[n-1].cy=x[x.length-1].y-l}else for(c=0;c<n;c++)d.nx<c*f&&(d=x[++p]),this.lookup[c]=d;return this},f.getRatio=u,f.getSVGData=function(t){return c.getSVGData(this,t)},c.create=function(t,e,i){return new c(t,e,i)},c.version="0.2.0",c.bezierToPoints=o,c.get=function(e){return t.map[e]},c.getSVGData=function(e,i){i=i||{};var n,r,s,o,a,l,h,u,c,f,p=1e3,d=i.width||100,m=i.height||100,g=i.x||0,_=(i.y||0)+m,v=i.path;if(i.invert&&(m=-m,_=0),e=e.getRatio?e:t.map[e]||console.log("No ease found: ",e),e.rawBezier){for(n=[],h=e.rawBezier.length,s=0;s<h;s+=2)n.push(((g+e.rawBezier[s]*d)*p|0)/p+","+((_+e.rawBezier[s+1]*-m)*p|0)/p);n[0]="M"+n[0],n[1]="C"+n[1]}else for(n=["M"+g+","+_],h=Math.max(5,200*(i.precision||1)),o=1/h,h+=2,u=5/h,c=((g+o*d)*p|0)/p,f=((_+e.getRatio(o)*-m)*p|0)/p,r=(f-_)/(c-g),s=2;s<h;s++)a=((g+s*o*d)*p|0)/p,l=((_+e.getRatio(s*o)*-m)*p|0)/p,(Math.abs((l-f)/(a-c)-r)>u||s===h-1)&&(n.push(c+","+f),r=(l-f)/(a-c)),c=a,f=l;return v&&("string"==typeof v?document.querySelector(v):v).setAttribute("d",n.join(" ")),n.join(" ")},c},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("CustomEase")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],9:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,r,s,o,a=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},l=n._gsDefine.globals,h={},u=a.prototype=new t("css");u.constructor=a,a.version="1.19.0",a.API=2,a.defaultTransformPerspective=0,a.defaultSkewType="compensated",a.defaultSmoothOrigin=!0,u="px",a.suffixMap={top:u,right:u,bottom:u,left:u,width:u,height:u,fontSize:u,padding:u,margin:u,perspective:u,lineHeight:""};var c,f,p,d,m,g,_,v,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,x=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,w=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,T=/(?:\d|\-|\+|=|#|\.)*/g,P=/opacity *= *([^)]*)/i,k=/opacity:([^;]*)/i,S=/alpha\(opacity *=.+?\)/i,C=/^(rgb|hsl)/,O=/([A-Z])/g,A=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,D=function(t,e){return e.toUpperCase()},M=/(?:Left|Right|Width)/i,N=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,F=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,E=/,(?=[^\)]*(?:\(|$))/gi,L=/[\s,\(]/i,j=Math.PI/180,X=180/Math.PI,Y={},I=document,z=function(t){return I.createElementNS?I.createElementNS("http://www.w3.org/1999/xhtml",t):I.createElement(t)},B=z("div"),q=z("img"),W=a._internals={_specialProps:h},V=navigator.userAgent,H=function(){var t=V.indexOf("Android"),e=z("a");return p=V.indexOf("Safari")!==-1&&V.indexOf("Chrome")===-1&&(t===-1||Number(V.substr(t+8,1))>3),m=p&&Number(V.substr(V.indexOf("Version/")+8,1))<6,d=V.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(V)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(V))&&(g=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),U=function(t){return P.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},$=function(t){window.console&&console.log(t)},G="",Z="",Q=function(t,e){e=e||B;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Z=3===n?"ms":i[n],G="-"+Z.toLowerCase()+"-",Z+t):null},K=I.defaultView?I.defaultView.getComputedStyle:function(){},J=a.getStyle=function(t,e,i,n,r){var s;return H||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(O,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):U(t)},tt=W.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var o,l,h,u=M.test(i),c=t,f=B.style,p=n<0,d=1===n;if(p&&(n=-n),d&&(n*=100),"%"===r&&i.indexOf("border")!==-1)o=n/100*(u?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[u?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(c=t.parentNode||I.body,l=c._gsCache,h=e.ticker.frame,l&&u&&l.time===h)return l.width*n/100;f[u?"width":"height"]=n+r}c.appendChild(B),o=parseFloat(B[u?"offsetWidth":"offsetHeight"]),c.removeChild(B),u&&"%"===r&&a.cacheWidths!==!1&&(l=c._gsCache=c._gsCache||{},l.time=h,l.width=o/n*100),0!==o||s||(o=tt(t,i,n,r,!0))}return d&&(o/=100),p?-o:o},et=W.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(T,""))||0)},it=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)r=e[i],r.indexOf("-transform")!==-1&&At!==r||(s[r.replace(A,D)]=e.getPropertyValue(r));else for(i in e)i.indexOf("Transform")!==-1&&Ot!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(A,D)]=e[i]);return H||(s.opacity=U(t)),n=Bt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Dt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},nt=function(t,e,i,n,r){var s,o,a,l={},h=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&o.indexOf("Origin")===-1&&("number"!=typeof s&&"string"!=typeof s||(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(b,"")?s:0:et(t,o),void 0!==h[o]&&(a=new vt(h,o,h[o],a))));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},rt={width:["Left","Right"],height:["Top","Bottom"]},st=["marginLeft","marginRight","marginTop","marginBottom"],ot=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getBBox&&Yt(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(J(t,"padding"+r[s],i,!0))||0,n-=parseFloat(J(t,"border"+r[s]+"Width",i,!0))||0;return n},at=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":n[0],s=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(at(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&(r+"").indexOf("=")===-1)&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=r.indexOf("%")!==-1,e.oyp=s.indexOf("%")!==-1,e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ht=function(t,e){return"function"==typeof t&&(t=t(v,_)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ut=function(t,e,i,n){var r,s,o,a,l,h=1e-6;return"function"==typeof t&&(t=t(v,_)),null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),l="="===t.charAt(1),o=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(t.indexOf("rad")===-1?1:X)-(l?0:e),s.length&&(n&&(n[i]=e+o),t.indexOf("short")!==-1&&(o%=r,o!==o%(r/2)&&(o=o<0?o+r:o-r)),t.indexOf("_cw")!==-1&&o<0?o=(o+9999999999*r)%r-(o/r|0)*r:t.indexOf("ccw")!==-1&&o>0&&(o=(o-9999999999*r)%r-(o/r|0)*r)),a=e+o),a<h&&a>-h&&(a=0),a},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},pt=a.parseColor=function(t,e){var i,n,r,s,o,a,l,h,u,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(t.indexOf("=")!==-1)return t.match(x)}else o=Number(i[0])%360/360,a=Number(i[1])/100,l=Number(i[2])/100,r=l<=.5?l*(a+1):l+a-l*a,n=2*l-r,i.length>3&&(i[3]=Number(t[3])),i[0]=ft(o+1/3,n,r),i[1]=ft(o,n,r),i[2]=ft(o-1/3,n,r);else i=t.match(y)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,h=Math.max(n,r,s),u=Math.min(n,r,s),l=(h+u)/2,h===u?o=a=0:(c=h-u,a=l>.5?c/(2-h-u):c/(h+u),o=h===n?(r-s)/c+(r<s?6:0):h===r?(s-n)/c+2:(n-r)/c+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(mt)||[],o=0,a=s.length?"":t;for(i=0;i<s.length;i++)n=s[i],r=t.substr(o,t.indexOf(n,o)-o),o+=r.length+n.length,n=pt(n,e),3===n.length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},mt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(u in ct)mt+="|"+u+"\\b";mt=new RegExp(mt+")","gi"),a.colorStringFilter=function(t){var e,i=t[0]+t[1];mt.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=dt(t[0],e),t[1]=dt(t[1],e)),mt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=a.colorStringFilter);var gt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(mt)||[""])[0]:"",o=t.split(s).join("").match(w)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",h=t.indexOf(" ")!==-1?" ":",",u=o.length,c=u>0?o[0].replace(y,""):"";return u?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(d=t.replace(E,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(mt)||[s])[0],f=t.split(e).join("").match(w)||[],p=f.length,u>p--)for(;++p<u;)f[p]=i?f[(p-1)/2|0]:o[p];return a+f.join(h)+h+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&E.test(t)){for(s=t.replace(E,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(e=t.match(w)||[],f=e.length,u>f--)for(;++f<u;)e[f]=i?e[(f-1)/2|0]:o[f];return a+e.join(h)+l}:function(t){return t}},_t=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,h=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=h[l]=h[l]||h[(l-1)/2>>0];return r.parse(e,a,s,o)}},vt=(W._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,l=o.firstMPT,h=1e-6;l;)e=a[l.v],l.r?e=Math.round(e):e<h&&e>-h&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod(a.rotation,this.t):a.rotation),1===t||0===t)for(l=o.firstMPT,s=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(W._parseToProxy=function(t,e,i,n,r,s){var o,a,l,h,u,c=n,f={},p={},d=i._transform,m=Y;for(i._transform=null,Y=e,n=u=i.parse(t,e,n,r),Y=m,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(a=n.p,p[a]=n.s+n.c,f[a]=n.s,s||(h=new vt(n,"s",a,h,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,a=n.p+"_"+l,p[a]=n.data[l],f[a]=n[l],s||(h=new vt(n,l,a,h,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:h,pt:u}},W.CSSPropTween=function(t,e,n,r,s,a,l,h,u,c,f){this.t=t,this.p=e,this.s=n,this.c=r,this.n=l||e,t instanceof yt||o.push(this.n),this.r=h,this.type=a||0,u&&(this.pr=u,i=!0),this.b=void 0===c?n:c,this.e=void 0===f?n+r:f,s&&(this._next=s,s._prev=this)}),xt=function(t,e,i,n,r,s){var o=new yt(t,e,i,n-i,r,(-1),s);return o.b=i,o.e=o.xs0=n,o},wt=a.parseComplex=function(t,e,i,n,r,s,o,l,h,u){i=i||s||"","function"==typeof n&&(n=n(v,_)),o=new yt(t,e,0,0,o,u?2:1,null,(!1),l,i,n),n+="",r&&mt.test(n+i)&&(n=[i,n],a.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,m,g,w,b,T,P,k,S,C,O,A=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),D=A.length,M=c!==!1;for(n.indexOf(",")===-1&&i.indexOf(",")===-1||(A=A.join(" ").replace(E,", ").split(" "),R=R.join(" ").replace(E,", ").split(" "),D=A.length),D!==R.length&&(A=(s||"").split(" "),D=A.length),o.plugin=h,o.setRatio=u,mt.lastIndex=0,f=0;f<D;f++)if(m=A[f],g=R[f],T=parseFloat(m),T||0===T)o.appendXtra("",T,lt(g,T),g.replace(x,""),M&&g.indexOf("px")!==-1,!0);else if(r&&mt.test(m))C=g.indexOf(")")+1,C=")"+(C?g.substr(C):""),O=g.indexOf("hsl")!==-1&&H,m=pt(m,O),g=pt(g,O),P=m.length+g.length>6,P&&!H&&0===g[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(R[f]).join("transparent")):(H||(P=!1),O?o.appendXtra(P?"hsla(":"hsl(",m[0],lt(g[0],m[0]),",",!1,!0).appendXtra("",m[1],lt(g[1],m[1]),"%,",!1).appendXtra("",m[2],lt(g[2],m[2]),P?"%,":"%"+C,!1):o.appendXtra(P?"rgba(":"rgb(",m[0],g[0]-m[0],",",!0,!0).appendXtra("",m[1],g[1]-m[1],",",!0).appendXtra("",m[2],g[2]-m[2],P?",":C,!0),
P&&(m=m.length<4?1:m[3],o.appendXtra("",m,(g.length<4?1:g[3])-m,C,!1))),mt.lastIndex=0;else if(w=m.match(y)){if(b=g.match(x),!b||b.length!==w.length)return o;for(d=0,p=0;p<w.length;p++)S=w[p],k=m.indexOf(S,d),o.appendXtra(m.substr(d,k-d),Number(S),lt(b[p],S),"",M&&"px"===m.substr(k+S.length,2),0===p),d=k+S.length;o["xs"+o.l]+=m.substr(d)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+g:g;if(n.indexOf("=")!==-1&&o.data){for(C=o.xs0+o.data.s,f=1;f<o.l;f++)C+=o["xs"+f]+o.data["xn"+f];o.e=C+o["xs"+f]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},bt=9;for(u=yt.prototype,u.l=u.pr=0;--bt>0;)u["xn"+bt]=0,u["xs"+bt]="";u.xs0="",u._next=u._prev=u.xfirst=u.data=u.plugin=u.setRatio=u.rxp=null,u.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new yt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var Tt=function(t,e){e=e||{},this.p=e.prefix?Q(t)||t:t,h[t]=h[this.p]=this,this.format=e.formatter||gt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=W._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;n<s.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,r=new Tt(s[n],e)},kt=W._registerPluginProp=function(t){if(!h[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,o,a){var u=l.com.greensock.plugins[e];return u?(u._cssRegister(),h[n].parse(t,i,n,r,s,o,a)):($("Error: "+e+" js file not loaded."),s)}})}};u=Tt.prototype,u.parseComplex=function(t,e,i,n,r,s){var o,a,l,h,u,c,f=this.keyword;if(this.multi&&(E.test(i)||E.test(e)?(a=e.replace(E,"|").split("|"),l=i.replace(E,"|").split("|")):f&&(a=[e],l=[i])),l){for(h=l.length>a.length?l.length:a.length,o=0;o<h;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(u=e.indexOf(f),c=i.indexOf(f),u!==c&&(c===-1?a[o]=a[o].split(f).join(""):u===-1&&(a[o]+=" "+f)));e=a.join(", "),i=l.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},u.parse=function(t,e,i,n,r,o,a){return this.parseComplex(t.style,this.format(J(t,this.p,s,!1,this.dflt)),this.format(e),r,o)},a.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,o,a,l){var h=new yt(t,r,0,0,o,2,r,(!1),i);return h.plugin=a,h.setRatio=e(t,n,s._tween,r),h},priority:i})},a.useSVGTransformAttr=p||d;var St,Ct="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),Ot=Q("transform"),At=G+"transform",Rt=Q("transformOrigin"),Dt=null!==Q("perspective"),Mt=W.Transform=function(){this.perspective=parseFloat(a.defaultTransformPerspective)||0,this.force3D=!(a.defaultForce3D===!1||!Dt)&&(a.defaultForce3D||"auto")},Nt=window.SVGElement,Ft=function(t,e,i){var n,r=I.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Et=I.documentElement,Lt=function(){var t,e,i,n=g||/Android/i.test(V)&&!window.chrome;return I.createElementNS&&!n&&(t=Ft("svg",Et),e=Ft("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[Ot]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Et.removeChild(t)),n}(),jt=function(t,e,i,n,r,s){var o,l,h,u,c,f,p,d,m,g,_,v,y,x,w=t._gsTransform,b=zt(t,!0);w&&(y=w.xOrigin,x=w.yOrigin),(!n||(o=n.split(" ")).length<2)&&(p=t.getBBox(),e=at(e).split(" "),o=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=u=parseFloat(o[0]),i.yOrigin=c=parseFloat(o[1]),n&&b!==It&&(f=b[0],p=b[1],d=b[2],m=b[3],g=b[4],_=b[5],v=f*m-p*d,l=u*(m/v)+c*(-d/v)+(d*_-m*g)/v,h=u*(-p/v)+c*(f/v)-(f*_-p*g)/v,u=i.xOrigin=o[0]=l,c=i.yOrigin=o[1]=h),w&&(s&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),r||r!==!1&&a.defaultSmoothOrigin!==!1?(l=u-y,h=c-x,w.xOffset+=l*b[0]+h*b[2]-l,w.yOffset+=l*b[1]+h*b[3]-h):w.xOffset=w.yOffset=0),s||t.setAttribute("data-svg-origin",o.join(" "))},Xt=function(t){try{return t.getBBox()}catch(t){}},Yt=function(t){return!!(Nt&&t.getBBox&&t.getCTM&&Xt(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},It=[1,0,0,1,0,0],zt=function(t,e){var i,n,r,s,o,a,l=t._gsTransform||new Mt,h=1e5,u=t.style;if(Ot?n=J(t,At,null,!0):t.currentStyle&&(n=t.currentStyle.filter.match(N),n=n&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,i&&Ot&&((a="none"===K(t).display)||!t.parentNode)&&(a&&(s=u.display,u.display="block"),t.parentNode||(o=1,Et.appendChild(t)),n=J(t,At,null,!0),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?u.display=s:a&&Ht(u,"display"),o&&Et.removeChild(t)),(l.svg||t.getBBox&&Yt(t))&&(i&&(u[Ot]+"").indexOf("matrix")!==-1&&(n=u[Ot],i=0),r=t.getAttribute("transform"),i&&r&&(r.indexOf("matrix")!==-1?(n=r,i=0):r.indexOf("translate")!==-1&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return It;for(r=(n||"").match(y)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(o=s-(s|=0))?(o*h+(o<0?-.5:.5)|0)/h+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Bt=W.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var s,o,l,h,u,c,f=n?t._gsTransform||new Mt:new Mt,p=f.scaleX<0,d=2e-5,m=1e5,g=Dt?parseFloat(J(t,Rt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,_=parseFloat(a.defaultTransformPerspective)||0;if(f.svg=!(!t.getBBox||!Yt(t)),f.svg&&(jt(t,J(t,Rt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),St=a.useSVGTransformAttr||Lt),s=zt(t),s!==It){if(16===s.length){var v,y,x,w,b,T=s[0],P=s[1],k=s[2],S=s[3],C=s[4],O=s[5],A=s[6],R=s[7],D=s[8],M=s[9],N=s[10],F=s[12],E=s[13],L=s[14],j=s[11],Y=Math.atan2(A,N);f.zOrigin&&(L=-f.zOrigin,F=D*L-s[12],E=M*L-s[13],L=N*L+f.zOrigin-s[14]),f.rotationX=Y*X,Y&&(w=Math.cos(-Y),b=Math.sin(-Y),v=C*w+D*b,y=O*w+M*b,x=A*w+N*b,D=C*-b+D*w,M=O*-b+M*w,N=A*-b+N*w,j=R*-b+j*w,C=v,O=y,A=x),Y=Math.atan2(-k,N),f.rotationY=Y*X,Y&&(w=Math.cos(-Y),b=Math.sin(-Y),v=T*w-D*b,y=P*w-M*b,x=k*w-N*b,M=P*b+M*w,N=k*b+N*w,j=S*b+j*w,T=v,P=y,k=x),Y=Math.atan2(P,T),f.rotation=Y*X,Y&&(w=Math.cos(-Y),b=Math.sin(-Y),T=T*w+C*b,y=P*w+O*b,O=P*-b+O*w,A=k*-b+A*w,P=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),f.scaleX=(Math.sqrt(T*T+P*P)*m+.5|0)/m,f.scaleY=(Math.sqrt(O*O+M*M)*m+.5|0)/m,f.scaleZ=(Math.sqrt(A*A+N*N)*m+.5|0)/m,f.rotationX||f.rotationY?f.skewX=0:(f.skewX=C||O?Math.atan2(C,O)*X+f.rotation:f.skewX||0,Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180))),f.perspective=j?1/(j<0?-j:j):0,f.x=F,f.y=E,f.z=L,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*T-f.yOrigin*C),f.y-=f.yOrigin-(f.yOrigin*P-f.xOrigin*O))}else if(!Dt||r||!s.length||f.x!==s[4]||f.y!==s[5]||!f.rotationX&&!f.rotationY){var I=s.length>=6,z=I?s[0]:1,B=s[1]||0,q=s[2]||0,W=I?s[3]:1;f.x=s[4]||0,f.y=s[5]||0,l=Math.sqrt(z*z+B*B),h=Math.sqrt(W*W+q*q),u=z||B?Math.atan2(B,z)*X:f.rotation||0,c=q||W?Math.atan2(q,W)*X+u:f.skewX||0,Math.abs(c)>90&&Math.abs(c)<270&&(p?(l*=-1,c+=u<=0?180:-180,u+=u<=0?180:-180):(h*=-1,c+=c<=0?180:-180)),f.scaleX=l,f.scaleY=h,f.rotation=u,f.skewX=c,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*z+f.yOrigin*q),f.y-=f.yOrigin-(f.xOrigin*B+f.yOrigin*W))}f.zOrigin=g;for(o in f)f[o]<d&&f[o]>-d&&(f[o]=0)}return n&&(t._gsTransform=f,f.svg&&(St&&t.style[Ot]?e.delayedCall(.001,function(){Ht(t.style,Ot)}):!St&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},qt=function(t){var e,i,n=this.data,r=-n.rotation*j,s=r+n.skewX*j,o=1e5,a=(Math.cos(r)*n.scaleX*o|0)/o,l=(Math.sin(r)*n.scaleX*o|0)/o,h=(Math.sin(s)*-n.scaleY*o|0)/o,u=(Math.cos(s)*n.scaleY*o|0)/o,c=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-h,h=-i,e=f.filter,c.filter="";var p,d,m=this.t.offsetWidth,_=this.t.offsetHeight,v="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+h+", M22="+u,x=n.x+m*n.xPercent/100,w=n.y+_*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?m*n.ox*.01:n.ox)-m/2,d=(n.oyp?_*n.oy*.01:n.oy)-_/2,x+=p-(p*a+d*l),w+=d-(p*h+d*u)),v?(p=m/2,d=_/2,y+=", Dx="+(p-(p*a+d*l)+x)+", Dy="+(d-(p*h+d*u)+w)+")"):y+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?c.filter=e.replace(F,y):c.filter=y+" "+e,0!==t&&1!==t||1===a&&0===l&&0===h&&1===u&&(v&&y.indexOf("Dx=0, Dy=0")===-1||P.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&c.removeAttribute("filter")),!v){var b,k,S,C=g<8?1:-1;for(p=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((m-((a<0?-a:a)*m+(l<0?-l:l)*_))/2+x),n.ieOffsetY=Math.round((_-((u<0?-u:u)*_+(h<0?-h:h)*m))/2+w),bt=0;bt<4;bt++)k=st[bt],b=f[k],i=b.indexOf("px")!==-1?parseFloat(b):tt(this.t,k,parseFloat(b),b.replace(T,""))||0,S=i!==n[k]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?p-n.ieOffsetX:d-n.ieOffsetY,c[k]=(n[k]=Math.round(i-S*(0===bt||2===bt?1:C)))+"px"}}},Wt=W.set3DTransformRatio=W.setTransformRatio=function(t){var e,i,n,r,s,o,a,l,h,u,c,f,p,m,g,_,v,y,x,w,b,T,P,k=this.data,S=this.t.style,C=k.rotation,O=k.rotationX,A=k.rotationY,R=k.scaleX,D=k.scaleY,M=k.scaleZ,N=k.x,F=k.y,E=k.z,L=k.svg,X=k.perspective,Y=k.force3D;if(((1===t||0===t)&&"auto"===Y&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!Y)&&!E&&!X&&!A&&!O&&1===M||St&&L||!Dt)return void(C||k.skewX||L?(C*=j,T=k.skewX*j,P=1e5,e=Math.cos(C)*R,r=Math.sin(C)*R,i=Math.sin(C-T)*-D,s=Math.cos(C-T)*D,T&&"simple"===k.skewType&&(v=Math.tan(T-k.skewY*j),v=Math.sqrt(1+v*v),i*=v,s*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v)),L&&(N+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,F+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset,St&&(k.xPercent||k.yPercent)&&(m=this.t.getBBox(),N+=.01*k.xPercent*m.width,F+=.01*k.yPercent*m.height),m=1e-6,N<m&&N>-m&&(N=0),F<m&&F>-m&&(F=0)),x=(e*P|0)/P+","+(r*P|0)/P+","+(i*P|0)/P+","+(s*P|0)/P+","+N+","+F+")",L&&St?this.t.setAttribute("transform","matrix("+x):S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+x):S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+D+","+N+","+F+")");if(d&&(m=1e-4,R<m&&R>-m&&(R=M=2e-5),D<m&&D>-m&&(D=M=2e-5),!X||k.z||k.rotationX||k.rotationY||(X=0)),C||k.skewX)C*=j,g=e=Math.cos(C),_=r=Math.sin(C),k.skewX&&(C-=k.skewX*j,g=Math.cos(C),_=Math.sin(C),"simple"===k.skewType&&(v=Math.tan((k.skewX-k.skewY)*j),v=Math.sqrt(1+v*v),g*=v,_*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v))),i=-_,s=g;else{if(!(A||O||1!==M||X||L))return void(S[Ot]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) translate3d(":"translate3d(")+N+"px,"+F+"px,"+E+"px)"+(1!==R||1!==D?" scale("+R+","+D+")":""));e=s=1,i=r=0}h=1,n=o=a=l=u=c=0,f=X?-1/X:0,p=k.zOrigin,m=1e-6,w=",",b="0",C=A*j,C&&(g=Math.cos(C),_=Math.sin(C),a=-_,u=f*-_,n=e*_,o=r*_,h=g,f*=g,e*=g,r*=g),C=O*j,C&&(g=Math.cos(C),_=Math.sin(C),v=i*g+n*_,y=s*g+o*_,l=h*_,c=f*_,n=i*-_+n*g,o=s*-_+o*g,h*=g,f*=g,i=v,s=y),1!==M&&(n*=M,o*=M,h*=M,f*=M),1!==D&&(i*=D,s*=D,l*=D,c*=D),1!==R&&(e*=R,r*=R,a*=R,u*=R),(p||L)&&(p&&(N+=n*-p,F+=o*-p,E+=h*-p+p),L&&(N+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,F+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset),N<m&&N>-m&&(N=b),F<m&&F>-m&&(F=b),E<m&&E>-m&&(E=0)),x=k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix3d(":"matrix3d(",x+=(e<m&&e>-m?b:e)+w+(r<m&&r>-m?b:r)+w+(a<m&&a>-m?b:a),x+=w+(u<m&&u>-m?b:u)+w+(i<m&&i>-m?b:i)+w+(s<m&&s>-m?b:s),O||A||1!==M?(x+=w+(l<m&&l>-m?b:l)+w+(c<m&&c>-m?b:c)+w+(n<m&&n>-m?b:n),x+=w+(o<m&&o>-m?b:o)+w+(h<m&&h>-m?b:h)+w+(f<m&&f>-m?b:f)+w):x+=",0,0,0,0,1,0,",x+=N+w+F+w+E+w+(X?1+-E/X:1)+")",S[Ot]=x};u=Mt.prototype,u.x=u.y=u.z=u.skewX=u.skewY=u.rotation=u.rotationX=u.rotationY=u.zOrigin=u.xPercent=u.yPercent=u.xOffset=u.yOffset=0,u.scaleX=u.scaleY=u.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,r,o,l){if(n._lastParsedTransform===l)return r;n._lastParsedTransform=l;var h;"function"==typeof l[i]&&(h=l[i],l[i]=e);var u,c,f,p,d,m,g,y,x,w=t._gsTransform,b=t.style,T=1e-6,P=Ct.length,k=l,S={},C="transformOrigin",O=Bt(t,s,!0,k.parseTransform),A=k.transform&&("function"==typeof k.transform?k.transform(v,_):k.transform);if(n._transform=O,A&&"string"==typeof A&&Ot)c=B.style,c[Ot]=A,c.display="block",c.position="absolute",I.body.appendChild(B),u=Bt(B,null,!1),O.svg&&(m=O.xOrigin,g=O.yOrigin,u.x-=O.xOffset,u.y-=O.yOffset,(k.transformOrigin||k.svgOrigin)&&(A={},jt(t,at(k.transformOrigin),A,k.svgOrigin,k.smoothOrigin,!0),m=A.xOrigin,g=A.yOrigin,u.x-=A.xOffset-O.xOffset,u.y-=A.yOffset-O.yOffset),(m||g)&&(y=zt(B,!0),u.x-=m-(m*y[0]+g*y[2]),u.y-=g-(m*y[1]+g*y[3]))),I.body.removeChild(B),u.perspective||(u.perspective=O.perspective),null!=k.xPercent&&(u.xPercent=ht(k.xPercent,O.xPercent)),null!=k.yPercent&&(u.yPercent=ht(k.yPercent,O.yPercent));else if("object"==typeof k){if(u={scaleX:ht(null!=k.scaleX?k.scaleX:k.scale,O.scaleX),scaleY:ht(null!=k.scaleY?k.scaleY:k.scale,O.scaleY),scaleZ:ht(k.scaleZ,O.scaleZ),x:ht(k.x,O.x),y:ht(k.y,O.y),z:ht(k.z,O.z),xPercent:ht(k.xPercent,O.xPercent),yPercent:ht(k.yPercent,O.yPercent),perspective:ht(k.transformPerspective,O.perspective)},d=k.directionalRotation,null!=d)if("object"==typeof d)for(c in d)k[c]=d[c];else k.rotation=d;"string"==typeof k.x&&k.x.indexOf("%")!==-1&&(u.x=0,u.xPercent=ht(k.x,O.xPercent)),"string"==typeof k.y&&k.y.indexOf("%")!==-1&&(u.y=0,u.yPercent=ht(k.y,O.yPercent)),u.rotation=ut("rotation"in k?k.rotation:"shortRotation"in k?k.shortRotation+"_short":"rotationZ"in k?k.rotationZ:O.rotation-O.skewY,O.rotation-O.skewY,"rotation",S),Dt&&(u.rotationX=ut("rotationX"in k?k.rotationX:"shortRotationX"in k?k.shortRotationX+"_short":O.rotationX||0,O.rotationX,"rotationX",S),u.rotationY=ut("rotationY"in k?k.rotationY:"shortRotationY"in k?k.shortRotationY+"_short":O.rotationY||0,O.rotationY,"rotationY",S)),u.skewX=ut(k.skewX,O.skewX-O.skewY),(u.skewY=ut(k.skewY,O.skewY))&&(u.skewX+=u.skewY,u.rotation+=u.skewY)}for(Dt&&null!=k.force3D&&(O.force3D=k.force3D,p=!0),O.skewType=k.skewType||O.skewType||a.defaultSkewType,f=O.force3D||O.z||O.rotationX||O.rotationY||u.z||u.rotationX||u.rotationY||u.perspective,f||null==k.scale||(u.scaleZ=1);--P>-1;)x=Ct[P],A=u[x]-O[x],(A>T||A<-T||null!=k[x]||null!=Y[x])&&(p=!0,r=new yt(O,x,O[x],A,r),x in S&&(r.e=S[x]),r.xs0=0,r.plugin=o,n._overwriteProps.push(r.n));return A=k.transformOrigin,O.svg&&(A||k.svgOrigin)&&(m=O.xOffset,g=O.yOffset,jt(t,at(A),u,k.svgOrigin,k.smoothOrigin),r=xt(O,"xOrigin",(w?O:u).xOrigin,u.xOrigin,r,C),r=xt(O,"yOrigin",(w?O:u).yOrigin,u.yOrigin,r,C),m===O.xOffset&&g===O.yOffset||(r=xt(O,"xOffset",w?m:O.xOffset,O.xOffset,r,C),r=xt(O,"yOffset",w?g:O.yOffset,O.yOffset,r,C)),A=St?null:"0px 0px"),(A||Dt&&f&&O.zOrigin)&&(Ot?(p=!0,x=Rt,A=(A||J(t,x,s,!1,"50% 50%"))+"",r=new yt(b,x,0,0,r,(-1),C),r.b=b[x],r.plugin=o,Dt?(c=O.zOrigin,A=A.split(" "),O.zOrigin=(A.length>2&&(0===c||"0px"!==A[2])?parseFloat(A[2]):c)||0,r.xs0=r.e=A[0]+" "+(A[1]||"50%")+" 0px",r=new yt(O,"zOrigin",0,0,r,(-1),r.n),r.b=c,r.xs0=r.e=O.zOrigin):r.xs0=r.e=A):at(A+"",O)),p&&(n._transformType=O.svg&&St||!f&&3!==this._transformType?2:3),h&&(l[i]=h),r},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,o,a){e=this.format(e);var l,h,u,c,f,p,d,m,g,_,v,y,x,w,b,T,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(g=parseFloat(t.offsetWidth),_=parseFloat(t.offsetHeight),l=e.split(" "),h=0;h<P.length;h++)this.p.indexOf("border")&&(P[h]=Q(P[h])),f=c=J(t,P[h],s,!1,"0px"),f.indexOf(" ")!==-1&&(c=f.split(" "),f=c[0],c=c[1]),p=u=l[h],d=parseFloat(f),y=f.substr((d+"").length),x="="===p.charAt(1),x?(m=parseInt(p.charAt(0)+"1",10),p=p.substr(2),m*=parseFloat(p),v=p.substr((m+"").length-(m<0?1:0))||""):(m=parseFloat(p),v=p.substr((m+"").length)),""===v&&(v=r[i]||y),v!==y&&(w=tt(t,"borderLeft",d,y),b=tt(t,"borderTop",d,y),"%"===v?(f=w/g*100+"%",c=b/_*100+"%"):"em"===v?(T=tt(t,"borderLeft",1,"em"),f=w/T+"em",c=b/T+"em"):(f=w+"px",c=b+"px"),x&&(p=parseFloat(f)+m+v,u=parseFloat(c)+m+v)),o=wt(k,P[h],f+" "+c,p+" "+u,!1,"0px",o);return o},prefix:!0,formatter:gt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,r,o){return wt(t.style,i,this.format(J(t,i,s,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:gt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,r,o){var a,l,h,u,c,f,p="background-position",d=s||K(t,null),m=this.format((d?g?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),_=this.format(e);if(m.indexOf("%")!==-1!=(_.indexOf("%")!==-1)&&_.split(",").length<2&&(f=J(t,"backgroundImage").replace(R,""),f&&"none"!==f)){for(a=m.split(" "),l=_.split(" "),q.setAttribute("src",f),h=2;--h>-1;)m=a[h],u=m.indexOf("%")!==-1,u!==(l[h].indexOf("%")!==-1)&&(c=0===h?t.offsetWidth-q.width:t.offsetHeight-q.height,a[h]=u?parseFloat(m)/100*c+"px":parseFloat(m)/c*100+"%");m=a.join(" ")}return this.parseComplex(t.style,m,_,r,o)},formatter:at}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",at(t.indexOf(" ")===-1?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:_t("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:_t("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,r,o){var a,l,h;return g<9?(l=t.currentStyle,h=g<8?" ":",",a="rect("+l.clipTop+h+l.clipRight+h+l.clipBottom+h+l.clipLeft+")",e=this.format(e).split(",").join(h)):(a=this.format(J(t,this.p,s,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,r,o)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,r,o){var a=J(t,"borderTopWidth",s,!1,"0px"),l=this.format(e).split(" "),h=l[0].replace(T,"");return"px"!==h&&(a=parseFloat(a)/tt(t,"borderTopWidth",1,h)+h),this.parseComplex(t.style,this.format(a+" "+J(t,"borderTopStyle",s,!1,"solid")+" "+J(t,"borderTopColor",s,!1,"#000")),l.join(" "),r,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(mt)||["#000"])[0]}}),Pt("borderWidth",{parser:_t("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new yt(o,a,0,0,r,(-1),i,(!1),0,o[a],e)}});var Vt=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(n.indexOf("atrix(")===-1&&n.indexOf("radient(")===-1&&n.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(S,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),n.indexOf("pacity")===-1?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(P,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,r,o){var a=parseFloat(J(t,"opacity",s,!1,"1")),l=t.style,h="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),h&&1===a&&"hidden"===J(t,"visibility",s)&&0!==e&&(a=0),H?r=new yt(l,"opacity",a,e-a,r):(r=new yt(l,"opacity",100*a,100*(e-a),r),r.xn1=h?1:0,l.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=o,r.setRatio=Vt),h&&(r=new yt(l,"visibility",0,0,r,(-1),null,(!1),0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),r.xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Ht=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(O,"-$1").toLowerCase())):t.removeAttribute(e))},Ut=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ht(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,n,r,o,a,l){var h,u,c,f,p,d=t.getAttribute("class")||"",m=t.style.cssText;if(o=r._classNamePT=new yt(t,n,0,0,o,2),o.setRatio=Ut,o.pr=-11,i=!0,o.b=d,u=it(t,s),c=t._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=o,o.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",o.e),h=nt(t,u,it(t),l,f),t.setAttribute("class",d),o.data=h.firstMPT,t.style.cssText=m,o=o.xfirst=r.parse(t,h.difs,o,a)}});var $t=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,a=h.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],h[i]&&(h[i].parse===a?r=!0:i="transformOrigin"===i?Rt:h[i].p),Ht(o,i);r&&(Ht(o,Ot),s=this.t._gsTransform,s&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,n,r,s){return s=new yt(t,n,0,0,s,2),s.setRatio=$t,s.e=e,s.pr=-10,s.data=r._tween,i=!0,s}}),u="bezier,throwProps,physicsProps,physics2D".split(","),bt=u.length;bt--;)kt(u[bt]);u=a.prototype,u._firstPT=u._lastParsedTransform=u._transform=null,u._onInitTween=function(t,e,n,l){if(!t.nodeType)return!1;this._target=_=t,this._tween=n,this._vars=e,v=l,c=e.autoRound,i=!1,r=e.suffixMap||a.suffixMap,s=K(t,""),o=this._overwriteProps;var u,d,g,y,x,w,b,T,P,S=t.style;if(f&&""===S.zIndex&&(u=J(t,"zIndex",s),"auto"!==u&&""!==u||this._addLazySet(S,"zIndex",0)),"string"==typeof e&&(y=S.cssText,u=it(t,s),S.cssText=y+";"+e,u=nt(t,u,it(t)).difs,!H&&k.test(e)&&(u.opacity=parseFloat(RegExp.$1)),e=u,S.cssText=y),e.className?this._firstPT=d=h.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(P=3===this._transformType,Ot?p&&(f=!0,""===S.zIndex&&(b=J(t,"zIndex",s),"auto"!==b&&""!==b||this._addLazySet(S,"zIndex",0)),m&&this._addLazySet(S,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):S.zoom=1,g=d;g&&g._next;)g=g._next;T=new yt(t,"transform",0,0,null,2),this._linkCSSP(T,null,g),T.setRatio=Ot?Wt:qt,T.data=this._transform||Bt(t,s,!0),T.tween=n,T.pr=-1,o.pop()}if(i){for(;d;){for(w=d._next,g=y;g&&g.pr>d.pr;)g=g._next;(d._prev=g?g._prev:x)?d._prev._next=d:y=d,(d._next=g)?g._prev=d:x=d,d=w}this._firstPT=y}return!0},u.parse=function(t,e,i,n){var o,a,l,u,f,p,d,m,g,y,x=t.style;for(o in e)p=e[o],"function"==typeof p&&(p=p(v,_)),a=h[o],a?i=a.parse(t,p,o,this,i,n,e):(f=J(t,o,s)+"",g="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||o.indexOf("Color")!==-1||g&&C.test(p)?(g||(p=pt(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=wt(x,o,f,p,!0,"transparent",i,0,n)):g&&L.test(p)?i=wt(x,o,f,p,!0,null,i,0,n):(l=parseFloat(f),d=l||0===l?f.substr((l+"").length):"",""!==f&&"auto"!==f||("width"===o||"height"===o?(l=ot(t,o,s),d="px"):"left"===o||"top"===o?(l=et(t,o,s),d="px"):(l="opacity"!==o?0:1,d="")),y=g&&"="===p.charAt(1),y?(u=parseInt(p.charAt(0)+"1",10),p=p.substr(2),u*=parseFloat(p),m=p.replace(T,"")):(u=parseFloat(p),m=g?p.replace(T,""):""),""===m&&(m=o in r?r[o]:d),p=u||0===u?(y?u+l:u)+m:e[o],d!==m&&""!==m&&(u||0===u)&&l&&(l=tt(t,o,l,d),"%"===m?(l/=tt(t,o,100,"%")/100,e.strictUnits!==!0&&(f=l+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?l/=tt(t,o,1,m):"px"!==m&&(u=tt(t,o,u,m),m="px"),y&&(u||0===u)&&(p=u+l+m)),y&&(u+=l),!l&&0!==l||!u&&0!==u?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(i=new yt(x,o,u||l||0,0,i,(-1),o,(!1),0,f,p),i.xs0="none"!==p||"display"!==o&&o.indexOf("Style")===-1?p:f):$("invalid "+o+" tween value: "+e[o]):(i=new yt(x,o,l,u-l,i,0,o,c!==!1&&("px"===m||"zIndex"===o),0,f,p),i.xs0=m))),n&&i&&!i.plugin&&(i.plugin=n);return i},u.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<s&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else r.type===-1?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&r.type!==-1)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},u._enableTransforms=function(t){this._transform=this._transform||Bt(this._target,s,!0),this._transformType=this._transform.svg&&St||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};u._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},u._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},u._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},u._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,s)};var Zt=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)Zt(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],o=s.type,s.style&&(e.push(it(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||Zt(s,e,i)};return a.cascadeTo=function(t,i,n){var r,s,o,a,l=e.to(t,i,n),h=[l],u=[],c=[],f=[],p=e._internals.reservedProps;for(t=l._targets||l.target,Zt(t,u,f),l.render(i,!0,!0),Zt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if(s=nt(f[r],u[r],c[r]),s.firstMPT){s=s.difs;for(o in n)p[o]&&(s[o]=n[o]);a={};for(o in s)a[o]=u[r][o];h.push(e.fromTo(f[r],i,a,s))}return h},t.activate([a]),a},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("CSSPlugin")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],10:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("plugins.ThrowPropsPlugin",["plugins.TweenPlugin","TweenLite","easing.Ease","utils.VelocityTracker"],function(t,e,i,r){var s,o,a,l,h=function(e,i){t.call(this,"throwProps"),this._overwriteProps.length=0},u=999999999999999,c=1e-10,f=n._gsDefine.globals,p=!1,d={x:1,y:1,z:2,scale:1,scaleX:1,scaleY:1,rotation:1,rotationZ:1,rotationX:2,rotationY:2,skewX:1,skewY:1,xPercent:1,yPercent:1},m=function(t,e,i,n){for(var r,s,o=e.length,a=0,l=u;--o>-1;)r=e[o],s=r-t,s<0&&(s=-s),s<l&&r>=n&&r<=i&&(a=o,l=s);return e[a]},g=function(t,e,i,n){if("auto"===t.end)return t;i=isNaN(i)?u:i,n=isNaN(n)?-u:n;var r="function"==typeof t.end?t.end(e):t.end instanceof Array?m(e,t.end,i,n):Number(t.end);return r>i?r=i:r<n&&(r=n),{max:r,min:r,unitFactor:t.unitFactor}},_=function(t,e,i){for(var n in e)void 0===t[n]&&n!==i&&(t[n]=e[n]);return t},v=h.calculateChange=function(t,n,r,s){null==s&&(s=.05);var o=n instanceof i?n:n?new i(n):e.defaultEase;return r*s*t/o.getRatio(s)},y=h.calculateDuration=function(t,n,r,s,o){o=o||.05;var a=s instanceof i?s:s?new i(s):e.defaultEase;return Math.abs((n-t)*a.getRatio(o)/r/o)},x=h.calculateTweenDuration=function(t,n,s,o,a,l){if("string"==typeof t&&(t=e.selector(t)),!t)return 0;null==s&&(s=10),null==o&&(o=.2),null==a&&(a=1),t.length&&(t=t[0]||t);var u,f,d,m,x,w,b,T,P,k,S=0,C=9999999999,O=n.throwProps||n,A=n.ease instanceof i?n.ease:n.ease?new i(n.ease):e.defaultEase,R=isNaN(O.checkpoint)?.05:Number(O.checkpoint),D=isNaN(O.resistance)?h.defaultResistance:Number(O.resistance);for(u in O)"resistance"!==u&&"checkpoint"!==u&&"preventOvershoot"!==u&&(f=O[u],"object"!=typeof f&&(P=P||r.getByTarget(t),P&&P.isTrackingProp(u)?f="number"==typeof f?{velocity:f}:{velocity:P.getVelocity(u)}:(m=Number(f)||0,d=m*D>0?m/D:m/-D)),"object"==typeof f&&(void 0!==f.velocity&&"number"==typeof f.velocity?m=Number(f.velocity)||0:(P=P||r.getByTarget(t),m=P&&P.isTrackingProp(u)?P.getVelocity(u):0),x=isNaN(f.resistance)?D:Number(f.resistance),d=m*x>0?m/x:m/-x,w="function"==typeof t[u]?t[u.indexOf("set")||"function"!=typeof t["get"+u.substr(3)]?u:"get"+u.substr(3)]():t[u]||0,b=w+v(m,A,d,R),void 0!==f.end&&(f=g(f,b,f.max,f.min),(l||p)&&(O[u]=_(f,O[u],"end"))),void 0!==f.max&&b>Number(f.max)+c?(k=f.unitFactor||h.defaultUnitFactors[u]||1,T=w>f.max&&f.min!==f.max||m*k>-15&&m*k<45?o+.1*(s-o):y(w,f.max,m,A,R),T+a<C&&(C=T+a)):void 0!==f.min&&b<Number(f.min)-c&&(k=f.unitFactor||h.defaultUnitFactors[u]||1,T=w<f.min&&f.min!==f.max||m*k>-45&&m*k<15?o+.1*(s-o):y(w,f.min,m,A,R),T+a<C&&(C=T+a)),T>S&&(S=T)),d>S&&(S=d));return S>C&&(S=C),S>s?s:S<o?o:S},w=h.prototype=new t("throwProps");return w.constructor=h,h.version="0.10.0",h.API=2,h._autoCSS=!0,h.defaultResistance=100,h.defaultUnitFactors={time:1e3,totalTime:1e3},h.track=function(t,e,i){return r.track(t,e,i)},h.untrack=function(t,e){r.untrack(t,e)},h.isTracking=function(t,e){return r.isTracking(t,e)},h.getVelocity=function(t,e){var i=r.getByTarget(t);return i?i.getVelocity(e):NaN},h._cssRegister=function(){var t=f.com.greensock.plugins.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,a=e.CSSPropTween;e._registerComplexSpecialProp("throwProps",{parser:function(t,e,l,u,c,f){f=new h;var p,m,g,_,v,y={},x={},w={},b={},T={},P={};o={};for(g in e)"resistance"!==g&&"preventOvershoot"!==g&&(m=e[g],
"object"==typeof m?(void 0!==m.velocity&&"number"==typeof m.velocity?y[g]=Number(m.velocity)||0:(v=v||r.getByTarget(t),y[g]=v&&v.isTrackingProp(g)?v.getVelocity(g):0),void 0!==m.end&&(b[g]=m.end),void 0!==m.min&&(x[g]=m.min),void 0!==m.max&&(w[g]=m.max),m.preventOvershoot&&(P[g]=!0),void 0!==m.resistance&&(p=!0,T[g]=m.resistance)):"number"==typeof m?y[g]=m:(v=v||r.getByTarget(t),v&&v.isTrackingProp(g)?y[g]=v.getVelocity(g):y[g]=m||0),d[g]&&u._enableTransforms(2===d[g]));_=i(t,y,u,c,f),s=_.proxy,y=_.end;for(g in s)o[g]={velocity:y[g],min:x[g],max:w[g],end:b[g],resistance:T[g],preventOvershoot:P[g]};return null!=e.resistance&&(o.resistance=e.resistance),e.preventOvershoot&&(o.preventOvershoot=!0),c=new a(t,"throwProps",0,0,_.pt,2),u._overwriteProps.pop(),c.plugin=f,c.setRatio=n,c.data=_,f._onInitTween(s,o,u._tween),c}})}},h.to=function(t,i,n,r,h){i.throwProps||(i={throwProps:i}),0===h&&(i.throwProps.preventOvershoot=!0),p=!0;var u=new e(t,r||1,i);return u.render(0,!0,!0),u.vars.css?(u.duration(x(s,{throwProps:o,ease:i.ease},n,r,h)),u._delay&&!u.vars.immediateRender?u.invalidate():a._onInitTween(s,l,u),p=!1,u):(u.kill(),u=new e(t,x(t,i,n,r,h),i),p=!1,u)},w._onInitTween=function(t,e,i,n){this.target=t,this._props=[],a=this,l=e;var s,o,h,u,c,f,d,m,y,x=i._ease,w=isNaN(e.checkpoint)?.05:Number(e.checkpoint),b=i._duration,T=e.preventOvershoot,P=0;for(s in e)if("resistance"!==s&&"checkpoint"!==s&&"preventOvershoot"!==s){if(o=e[s],"function"==typeof o&&(o=o(n,t)),"number"==typeof o)c=Number(o)||0;else if("object"!=typeof o||isNaN(o.velocity)){if(y=y||r.getByTarget(t),!y||!y.isTrackingProp(s))throw"ERROR: No velocity was defined in the throwProps tween of "+t+" property: "+s;c=y.getVelocity(s)}else c=Number(o.velocity);f=v(c,x,b,w),m=0,u="function"==typeof t[s],h=u?t[s.indexOf("set")||"function"!=typeof t["get"+s.substr(3)]?s:"get"+s.substr(3)]():t[s],"object"==typeof o&&(d=h+f,void 0!==o.end&&(o=g(o,d,o.max,o.min),p&&(e[s]=_(o,e[s],"end"))),void 0!==o.max&&Number(o.max)<d?T||o.preventOvershoot?f=o.max-h:m=o.max-h-f:void 0!==o.min&&Number(o.min)>d&&(T||o.preventOvershoot?f=o.min-h:m=o.min-h-f)),this._overwriteProps[P]=s,this._props[P++]={p:s,s:h,c1:f,c2:m,f:u,r:!1}}return!0},w._kill=function(e){for(var i=this._props.length;--i>-1;)null!=e[this._props[i].p]&&this._props.splice(i,1);return t.prototype._kill.call(this,e)},w._mod=function(t){for(var e,i=this._props,n=i.length;--n>-1;)e=t[i[n].p]||t.throwProps,"function"==typeof e&&(i[n].m=e)},w.setRatio=function(t){for(var e,i,n=this._props.length;--n>-1;)e=this._props[n],i=e.s+e.c1*t+e.c2*t*t,e.m?i=e.m(i,this.target):1===t&&(i=(1e4*i+(i<0?-.5:.5)|0)/1e4),e.f?this.target[e.p](i):this.target[e.p]=i},t.activate([h]),h},!0),n._gsDefine("utils.VelocityTracker",["TweenLite"],function(t){var e,i,n,r,s=/([A-Z])/g,o={},a={x:1,y:1,z:2,scale:1,scaleX:1,scaleY:1,rotation:1,rotationZ:1,rotationX:2,rotationY:2,skewX:1,skewY:1,xPercent:1,yPercent:1},l=document.defaultView?document.defaultView.getComputedStyle:function(){},h=function(t,e,i){var n=(t._gsTransform||o)[e];return n||0===n?n:(t.style[e]?n=t.style[e]:(i=i||l(t,null))?n=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(s,"-$1").toLowerCase()):t.currentStyle&&(n=t.currentStyle[e]),parseFloat(n)||0)},u=t.ticker,c=function(t,e,i){this.p=t,this.f=e,this.v1=this.v2=0,this.t1=this.t2=u.time,this.css=!1,this.type="",this._prev=null,i&&(this._next=i,i._prev=this)},f=function(){var t,i,s=e,o=u.time;if(o-n>=.03)for(r=n,n=o;s;){for(i=s._firstVP;i;)t=i.css?h(s.target,i.p):i.f?s.target[i.p]():s.target[i.p],(t!==i.v1||o-i.t1>.15)&&(i.v2=i.v1,i.v1=t,i.t2=i.t1,i.t1=o),i=i._next;s=s._next}},p=function(t){this._lookup={},this.target=t,this.elem=!(!t.style||!t.nodeType),i||(u.addEventListener("tick",f,null,!1,-100),n=r=u.time,i=!0),e&&(this._next=e,e._prev=this),e=this},d=p.getByTarget=function(t){for(var i=e;i;){if(i.target===t)return i;i=i._next}},m=p.prototype;return m.addProp=function(e,i){if(!this._lookup[e]){var n=this.target,r="function"==typeof n[e],s=r?this._altProp(e):e,o=this._firstVP;this._firstVP=this._lookup[e]=this._lookup[s]=o=new c(s!==e&&0===e.indexOf("set")?s:e,r,o),o.css=this.elem&&(void 0!==this.target.style[o.p]||a[o.p]),o.css&&a[o.p]&&!n._gsTransform&&t.set(n,{x:"+=0",overwrite:!1}),o.type=i||o.css&&0===e.indexOf("rotation")?"deg":"",o.v1=o.v2=o.css?h(n,o.p):r?n[o.p]():n[o.p]}},m.removeProp=function(t){var e=this._lookup[t];e&&(e._prev?e._prev._next=e._next:e===this._firstVP&&(this._firstVP=e._next),e._next&&(e._next._prev=e._prev),this._lookup[t]=0,e.f&&(this._lookup[this._altProp(t)]=0))},m.isTrackingProp=function(t){return this._lookup[t]instanceof c},m.getVelocity=function(t){var e,i,n,r=this._lookup[t],s=this.target;if(!r)throw"The velocity of "+t+" is not being tracked.";return e=r.css?h(s,r.p):r.f?s[r.p]():s[r.p],i=e-r.v2,"rad"!==r.type&&"deg"!==r.type||(n="rad"===r.type?2*Math.PI:360,i%=n,i!==i%(n/2)&&(i=i<0?i+n:i-n)),i/(u.time-r.t2)},m._altProp=function(t){var e=t.substr(0,3),i=("get"===e?"set":"set"===e?"get":e)+t.substr(3);return"function"==typeof this.target[i]?i:t},p.getByTarget=function(i){var n=e;for("string"==typeof i&&(i=t.selector(i)),i.length&&i!==window&&i[0]&&i[0].style&&!i.nodeType&&(i=i[0]);n;){if(n.target===i)return n;n=n._next}},p.track=function(t,e,i){var n=d(t),r=e.split(","),s=r.length;for(i=(i||"").split(","),n||(n=new p(t));--s>-1;)n.addProp(r[s],i[s]||i[0]);return n},p.untrack=function(t,i){var n=d(t),r=(i||"").split(","),s=r.length;if(n){for(;--s>-1;)n.removeProp(r[s]);n._firstVP&&i||(n._prev?n._prev._next=n._next:n===e&&(e=n._next),n._next&&(n._next._prev=n._prev))}},p.isTracking=function(t,e){var i=d(t);return!!i&&(!(e||!i._firstVP)||i.isTrackingProp(e))},p},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("ThrowPropsPlugin")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],11:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("utils.Draggable",["events.EventDispatcher","TweenLite","plugins.CSSPlugin"],function(t,e,i){var r,s,o,a,l,h,u,c,f,p={css:{}},d={css:{}},m={css:{}},g={css:{}},_=n._gsDefine.globals,v={},y=document,x=y.documentElement||{},w=function(t){return y.createElementNS?y.createElementNS("http://www.w3.org/1999/xhtml",t):y.createElement(t)},b=w("div"),T=[],P=function(){return!1},k=180/Math.PI,S=999999999999999,C=Date.now||function(){return(new Date).getTime()},O=!(y.addEventListener||!y.all),A=y.createElement("div"),R=[],D={},M=0,N=/^(?:a|input|textarea|button|select)$/i,F=0,E=navigator.userAgent.toLowerCase().indexOf("android")!==-1,L=0,j={},X={},Y=function(t){if("string"==typeof t&&(t=e.selector(t)),!t||t.nodeType)return[t];var i,n=[],r=t.length;for(i=0;i!==r;n.push(t[i++]));return n},I=function(t){var e,i={};for(e in t)i[e]=t[e];return i},z=function(){for(var t=R.length;--t>-1;)R[t]()},B=function(t){R.push(t),1===R.length&&e.ticker.addEventListener("tick",z,this,!1,1)},q=function(t){for(var i=R.length;--i>-1;)R[i]===t&&R.splice(i,1);e.to(W,0,{overwrite:"all",delay:15,onComplete:W})},W=function(){R.length||e.ticker.removeEventListener("tick",z)},V=function(t,e){var i;for(i in e)void 0===t[i]&&(t[i]=e[i]);return t},H=function(){return null!=window.pageYOffset?window.pageYOffset:null!=y.scrollTop?y.scrollTop:x.scrollTop||y.body.scrollTop||0},U=function(){return null!=window.pageXOffset?window.pageXOffset:null!=y.scrollLeft?y.scrollLeft:x.scrollLeft||y.body.scrollLeft||0},$=function(t,e){Et(t,"scroll",e),Z(t.parentNode)||$(t.parentNode,e)},G=function(t,e){Lt(t,"scroll",e),Z(t.parentNode)||G(t.parentNode,e)},Z=function(t){return!(t&&t!==x&&t!==y&&t!==y.body&&t!==window&&t.nodeType&&t.parentNode)},Q=function(t,e){var i="x"===e?"Width":"Height",n="scroll"+i,r="client"+i,s=y.body;return Math.max(0,Z(t)?Math.max(x[n],s[n])-(window["inner"+i]||x[r]||s[r]):t[n]-t[r])},K=function(t){var e=Z(t),i=Q(t,"x"),n=Q(t,"y");e?t=X:K(t.parentNode),t._gsMaxScrollX=i,t._gsMaxScrollY=n,t._gsScrollX=t.scrollLeft||0,t._gsScrollY=t.scrollTop||0},J=function(t,e){return t=t||window.event,v.pageX=t.clientX+y.body.scrollLeft+x.scrollLeft,v.pageY=t.clientY+y.body.scrollTop+x.scrollTop,e&&(t.returnValue=!1),v},tt=function(t){return t?("string"==typeof t&&(t=e.selector(t)),t.length&&t!==window&&t[0]&&t[0].style&&!t.nodeType&&(t=t[0]),t===window||t.nodeType&&t.style?t:null):t},et=function(t,e){var i,n,s,o=t.style;if(void 0===o[e]){for(s=["O","Moz","ms","Ms","Webkit"],n=5,i=e.charAt(0).toUpperCase()+e.substr(1);--n>-1&&void 0===o[s[n]+i];);if(n<0)return"";r=3===n?"ms":s[n],e=r+i}return e},it=function(t,e,i){var n=t.style;n&&(void 0===n[e]&&(e=et(t,e)),null==i?n.removeProperty?n.removeProperty(e.replace(/([A-Z])/g,"-$1").toLowerCase()):n.removeAttribute(e):void 0!==n[e]&&(n[e]=i))},nt=y.defaultView?y.defaultView.getComputedStyle:P,rt=/(?:Left|Right|Width)/i,st=/(?:\d|\-|\+|=|#|\.)*/g,ot=function(t,e,i,n,r){if("px"===n||!n)return i;if("auto"===n||!i)return 0;var s,o=rt.test(e),a=t,l=b.style,h=i<0;return h&&(i=-i),"%"===n&&e.indexOf("border")!==-1?s=i/100*(o?t.clientWidth:t.clientHeight):(l.cssText="border:0 solid red;position:"+lt(t,"position",!0)+";line-height:0;","%"!==n&&a.appendChild?l[o?"borderLeftWidth":"borderTopWidth"]=i+n:(a=t.parentNode||y.body,l[o?"width":"height"]=i+n),a.appendChild(b),s=parseFloat(b[o?"offsetWidth":"offsetHeight"]),a.removeChild(b),0!==s||r||(s=ot(t,e,i,n,!0))),h?-s:s},at=function(t,e){if("absolute"!==lt(t,"position",!0))return 0;var i="left"===e?"Left":"Top",n=lt(t,"margin"+i,!0);return t["offset"+i]-(ot(t,e,parseFloat(n),(n+"").replace(st,""))||0)},lt=function(t,e,i){var n,r=(t._gsTransform||{})[e];return r||0===r?r:(t.style[e]?r=t.style[e]:(n=nt(t))?(r=n.getPropertyValue(e.replace(/([A-Z])/g,"-$1").toLowerCase()),r=r||n.length?r:n[e]):t.currentStyle&&(r=t.currentStyle[e]),"auto"!==r||"top"!==e&&"left"!==e||(r=at(t,e)),i?r:parseFloat(r)||0)},ht=function(t,e,i){var n=t.vars,r=n[i],s=t._listeners[e];"function"==typeof r&&r.apply(n[i+"Scope"]||n.callbackScope||t,n[i+"Params"]||[t.pointerEvent]),s&&t.dispatchEvent(e)},ut=function(t,e){var i,n,r,s=tt(t);return s?Rt(s,e):void 0!==t.left?(r=Pt(e),{left:t.left-r.x,top:t.top-r.y,width:t.width,height:t.height}):(n=t.min||t.minX||t.minRotation||0,i=t.min||t.minY||0,{left:n,top:i,width:(t.max||t.maxX||t.maxRotation||0)-n,height:(t.max||t.maxY||0)-i})},ct=function(){if(!y.createElementNS)return a=0,void(l=!1);var t,e,i,n,r=w("div"),s=y.createElementNS("http://www.w3.org/2000/svg","svg"),o=w("div"),f=r.style,p=y.body||x;y.body&&dt&&(f.position="absolute",p.appendChild(o),o.appendChild(r),n=r.offsetParent,o.style[dt]="rotate(1deg)",c=r.offsetParent===n,o.style.position="absolute",f.height="10px",n=r.offsetTop,o.style.border="5px solid red",u=n!==r.offsetTop,p.removeChild(o)),f=s.style,s.setAttributeNS(null,"width","400px"),s.setAttributeNS(null,"height","400px"),s.setAttributeNS(null,"viewBox","0 0 400 400"),f.display="block",f.boxSizing="border-box",f.border="0px solid red",f.transform="none",r.style.cssText="width:100px;height:100px;overflow:scroll;-ms-overflow-style:none;",p.appendChild(r),r.appendChild(s),i=s.createSVGPoint().matrixTransform(s.getScreenCTM()),e=i.y,r.scrollTop=100,i.x=i.y=0,i=i.matrixTransform(s.getScreenCTM()),h=e-i.y<100.1?0:e-i.y-150,r.removeChild(s),p.removeChild(r),p.appendChild(s),t=s.getScreenCTM(),e=t.e,f.border="50px solid red",t=s.getScreenCTM(),0===e&&0===t.e&&0===t.f&&1===t.a?(a=1,l=!0):(a=e!==t.e?1:0,l=1!==t.a),p.removeChild(s)},ft=""!==et(b,"perspective"),pt=et(b,"transformOrigin").replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),dt=et(b,"transform"),mt=dt.replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),gt={},_t={},vt=window.SVGElement,yt=function(t){return!!(vt&&"function"==typeof t.getBBox&&t.getCTM&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},xt=(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent))&&parseFloat(RegExp.$1)<11,wt=[],bt=[],Tt=function(t){if(!t.getBoundingClientRect||!t.parentNode||!dt)return{offsetTop:0,offsetLeft:0,scaleX:1,scaleY:1,offsetParent:x};if(Vt.cacheSVGData!==!1&&t._dCache&&t._dCache.lastUpdate===e.ticker.frame)return t._dCache;var i,n,r,s,o,u,c,f,p,d,m,g,_=t,v=kt(t);if(v.lastUpdate=e.ticker.frame,t.getBBox&&!v.isSVGRoot){for(_=t.parentNode,i=t.getBBox();_&&"svg"!==(_.nodeName+"").toLowerCase();)_=_.parentNode;return s=Tt(_),v.offsetTop=i.y*s.scaleY,v.offsetLeft=i.x*s.scaleX,v.scaleX=s.scaleX,v.scaleY=s.scaleY,v.offsetParent=_||x,v}for(r=v.offsetParent,r===y.body&&(r=x),bt.length=wt.length=0;_&&(o=lt(_,dt,!0),"matrix(1, 0, 0, 1, 0, 0)"!==o&&"none"!==o&&"translate3d(0px, 0px, 0px)"!==o&&(bt.push(_),wt.push(_.style[dt]),_.style[dt]="none"),_!==r);)_=_.parentNode;for(n=r.getBoundingClientRect(),o=t.getScreenCTM(),f=t.createSVGPoint(),c=f.matrixTransform(o),f.x=f.y=10,f=f.matrixTransform(o),v.scaleX=(f.x-c.x)/10,v.scaleY=(f.y-c.y)/10,void 0===a&&ct(),v.borderBox&&!l&&t.getAttribute("width")&&(s=nt(t)||{},p=parseFloat(s.borderLeftWidth)+parseFloat(s.borderRightWidth)||0,d=parseFloat(s.borderTopWidth)+parseFloat(s.borderBottomWidth)||0,m=parseFloat(s.width)||0,g=parseFloat(s.height)||0,v.scaleX*=(m-p)/m,v.scaleY*=(g-d)/g),h?(i=t.getBoundingClientRect(),v.offsetLeft=i.left-n.left,v.offsetTop=i.top-n.top):(v.offsetLeft=c.x-n.left,v.offsetTop=c.y-n.top),v.offsetParent=r,u=bt.length;--u>-1;)bt[u].style[dt]=wt[u];return v},Pt=function(t,i){if(i=i||{},!t||t===x||!t.parentNode||t===window)return{x:0,y:0};var n=nt(t),r=pt&&n?n.getPropertyValue(pt):"50% 50%",s=r.split(" "),o=r.indexOf("left")!==-1?"0%":r.indexOf("right")!==-1?"100%":s[0],a=r.indexOf("top")!==-1?"0%":r.indexOf("bottom")!==-1?"100%":s[1];return"center"!==a&&null!=a||(a="50%"),("center"===o||isNaN(parseFloat(o)))&&(o="50%"),t.getBBox&&yt(t)?(t._gsTransform||(e.set(t,{x:"+=0",overwrite:!1}),void 0===t._gsTransform.xOrigin&&console.log("Draggable requires at least GSAP 1.17.0")),r=t.getBBox(),i.x=t._gsTransform.xOrigin-r.x,i.y=t._gsTransform.yOrigin-r.y):(t.getBBox&&(o+a).indexOf("%")!==-1&&(t=t.getBBox(),t={offsetWidth:t.width,offsetHeight:t.height}),i.x=o.indexOf("%")!==-1?t.offsetWidth*parseFloat(o)/100:parseFloat(o),i.y=a.indexOf("%")!==-1?t.offsetHeight*parseFloat(a)/100:parseFloat(a)),i},kt=function(t){if(Vt.cacheSVGData!==!1&&t._dCache&&t._dCache.lastUpdate===e.ticker.frame)return t._dCache;var i,n=t._dCache=t._dCache||{},r=nt(t),s=t.getBBox&&yt(t),o="svg"===(t.nodeName+"").toLowerCase();if(n.isSVG=s,n.isSVGRoot=o,n.borderBox="border-box"===r.boxSizing,n.computedStyle=r,o)i=t.parentNode||x,i.insertBefore(b,t),n.offsetParent=b.offsetParent||x,i.removeChild(b);else if(s){for(i=t.parentNode;i&&"svg"!==(i.nodeName+"").toLowerCase();)i=i.parentNode;n.offsetParent=i}else n.offsetParent=t.offsetParent;return n},St=function(t,e,i,n){if(t===window||!t||!t.style||!t.parentNode)return[1,0,0,1,0,0];var r,s,o,l,h,f,p,d,m,g,_,v,w,b,T=t._dCache||kt(t),P=t.parentNode,k=P._dCache||kt(P),S=T.computedStyle,C=T.isSVG?k.offsetParent:P.offsetParent;return r=T.isSVG&&(t.style[dt]+"").indexOf("matrix")!==-1?t.style[dt]:S?S.getPropertyValue(mt):t.currentStyle?t.currentStyle[dt]:"1,0,0,1,0,0",t.getBBox&&(t.getAttribute("transform")+"").indexOf("matrix")!==-1&&(r=t.getAttribute("transform")),r=(r+"").match(/(?:\-|\.|\b)(\d|\.|e\-)+/g)||[1,0,0,1,0,0],r.length>6&&(r=[r[0],r[1],r[4],r[5],r[12],r[13]]),n?r[4]=r[5]=0:T.isSVG&&(h=t._gsTransform)&&(h.xOrigin||h.yOrigin)&&(r[0]=parseFloat(r[0]),r[1]=parseFloat(r[1]),r[2]=parseFloat(r[2]),r[3]=parseFloat(r[3]),r[4]=parseFloat(r[4])-(h.xOrigin-(h.xOrigin*r[0]+h.yOrigin*r[2])),r[5]=parseFloat(r[5])-(h.yOrigin-(h.xOrigin*r[1]+h.yOrigin*r[3]))),e&&(void 0===a&&ct(),o=T.isSVG||T.isSVGRoot?Tt(t):t,T.isSVG?(l=t.getBBox(),g=k.isSVGRoot?{x:0,y:0}:P.getBBox(),o={offsetLeft:l.x-g.x,offsetTop:l.y-g.y,offsetParent:T.offsetParent}):T.isSVGRoot?(_=parseInt(S.borderTopWidth,10)||0,v=parseInt(S.borderLeftWidth,10)||0,w=(r[0]-a)*v+r[2]*_,b=r[1]*v+(r[3]-a)*_,f=e.x,p=e.y,d=f-(f*r[0]+p*r[2]),m=p-(f*r[1]+p*r[3]),r[4]=parseFloat(r[4])+d,r[5]=parseFloat(r[5])+m,e.x-=d,e.y-=m,f=o.scaleX,p=o.scaleY,e.x*=f,e.y*=p,r[0]*=f,r[1]*=p,r[2]*=f,r[3]*=p,xt||(e.x+=w,e.y+=b)):!u&&t.offsetParent&&(e.x+=parseInt(lt(t.offsetParent,"borderLeftWidth"),10)||0,e.y+=parseInt(lt(t.offsetParent,"borderTopWidth"),10)||0),s=P===x||P===y.body,r[4]=Number(r[4])+e.x+(o.offsetLeft||0)-i.x-(s?0:P.scrollLeft||0),r[5]=Number(r[5])+e.y+(o.offsetTop||0)-i.y-(s?0:P.scrollTop||0),P&&"fixed"===lt(t,"position",S)&&(r[4]+=U(),r[5]+=H()),!P||P===x||C!==o.offsetParent||k.isSVG||c&&"100100"!==St(P).join("")||(o=k.isSVGRoot?Tt(P):P,r[4]-=o.offsetLeft||0,r[5]-=o.offsetTop||0,u||!k.offsetParent||T.isSVG||T.isSVGRoot||(r[4]-=parseInt(lt(k.offsetParent,"borderLeftWidth"),10)||0,r[5]-=parseInt(lt(k.offsetParent,"borderTopWidth"),10)||0))),r},Ct=function(t,e){if(!t||t===window||!t.parentNode)return[1,0,0,1,0,0];for(var i,n,r,s,o,a,l,h,u=Pt(t,gt),c=Pt(t.parentNode,_t),f=St(t,u,c);(t=t.parentNode)&&t.parentNode&&t!==x;)u=c,c=Pt(t.parentNode,u===gt?_t:gt),l=St(t,u,c),i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],f[0]=i*l[0]+n*l[2],f[1]=i*l[1]+n*l[3],f[2]=r*l[0]+s*l[2],f[3]=r*l[1]+s*l[3],f[4]=o*l[0]+a*l[2]+l[4],f[5]=o*l[1]+a*l[3]+l[5];return e&&(i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],h=i*s-n*r,f[0]=s/h,f[1]=-n/h,f[2]=-r/h,f[3]=i/h,f[4]=(r*a-s*o)/h,f[5]=-(i*a-n*o)/h),f},Ot=function(t,e,i,n,r){t=tt(t);var s=Ct(t,!1,r),o=e.x,a=e.y;return i&&(Pt(t,e),o-=e.x,a-=e.y),n=n===!0?e:n||{},n.x=o*s[0]+a*s[2]+s[4],n.y=o*s[1]+a*s[3]+s[5],n},At=function(t,e,i){var n=t.x*e[0]+t.y*e[2]+e[4],r=t.x*e[1]+t.y*e[3]+e[5];return t.x=n*i[0]+r*i[2]+i[4],t.y=n*i[1]+r*i[3]+i[5],t},Rt=function(t,e,i){if(!(t=tt(t)))return null;e=tt(e);var n,r,s,o,a,l,h,u,c,f,p,d,m,g,_,v,w,b,T,P,k,S,C=t.getBBox&&yt(t);if(t===window)o=H(),r=U(),s=r+(x.clientWidth||t.innerWidth||y.body.clientWidth||0),a=o+((t.innerHeight||0)-20<x.clientHeight?x.clientHeight:t.innerHeight||y.body.clientHeight||0);else{if(void 0===e||e===window)return t.getBoundingClientRect();n=Pt(t),r=-n.x,o=-n.y,C?(d=t.getBBox(),m=d.width,g=d.height):"svg"!==(t.nodeName+"").toLowerCase()&&t.offsetWidth?(m=t.offsetWidth,g=t.offsetHeight):(k=nt(t),m=parseFloat(k.width),g=parseFloat(k.height)),s=r+m,a=o+g,"svg"!==t.nodeName.toLowerCase()||O||(_=Tt(t),S=_.computedStyle||{},b=(t.getAttribute("viewBox")||"0 0").split(" "),T=parseFloat(b[0]),P=parseFloat(b[1]),v=parseFloat(S.borderLeftWidth)||0,w=parseFloat(S.borderTopWidth)||0,s-=m-(m-v)/_.scaleX-T,a-=g-(g-w)/_.scaleY-P,r-=v/_.scaleX-T,o-=w/_.scaleY-P,k&&(s+=(parseFloat(S.borderRightWidth)+v)/_.scaleX,a+=(w+parseFloat(S.borderBottomWidth))/_.scaleY))}return t===e?{left:r,top:o,width:s-r,height:a-o}:(l=Ct(t),h=Ct(e,!0),u=At({x:r,y:o},l,h),c=At({x:s,y:o},l,h),f=At({x:s,y:a},l,h),p=At({x:r,y:a},l,h),r=Math.min(u.x,c.x,f.x,p.x),o=Math.min(u.y,c.y,f.y,p.y),j.x=j.y=0,i&&Pt(e,j),{left:r+j.x,top:o+j.y,width:Math.max(u.x,c.x,f.x,p.x)-r,height:Math.max(u.y,c.y,f.y,p.y)-o})},Dt=function(t){return!!(t&&t.length&&t[0]&&(t[0].nodeType&&t[0].style&&!t.nodeType||t[0].length&&t[0][0]))},Mt=function(t){var e,i,n,r=[],s=t.length;for(e=0;e<s;e++)if(i=t[e],Dt(i))for(n=i.length,n=0;n<i.length;n++)r.push(i[n]);else i&&0!==i.length&&r.push(i);return r},Nt="ontouchstart"in x&&"orientation"in window,Ft=function(t){for(var e=t.split(","),i=(void 0!==b.onpointerdown?"pointerdown,pointermove,pointerup,pointercancel":void 0!==b.onmspointerdown?"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel":t).split(","),n={},r=8;--r>-1;)n[e[r]]=i[r],n[i[r]]=e[r];return n}("touchstart,touchmove,touchend,touchcancel"),Et=function(t,e,i,n){t.addEventListener?t.addEventListener(Ft[e]||e,i,n):t.attachEvent&&t.attachEvent("on"+e,i)},Lt=function(t,e,i){t.removeEventListener?t.removeEventListener(Ft[e]||e,i):t.detachEvent&&t.detachEvent("on"+e,i)},jt=function(t,e){for(var i=t.length;--i>-1;)if(t[i].identifier===e)return!0;return!1},Xt=function(t){s=t.touches&&F<t.touches.length,Lt(t.target,"touchend",Xt)},Yt=function(t){s=t.touches&&F<t.touches.length,Et(t.target,"touchend",Xt)},It=function(t,e,i,n,r,s){var o,a,l,h={};if(e)if(1!==r&&e instanceof Array){for(h.end=o=[],l=e.length,a=0;a<l;a++)o[a]=e[a]*r;i+=1.1,n-=1.1}else"function"==typeof e?h.end=function(i){return e.call(t,i)*r}:h.end=e;return(i||0===i)&&(h.max=i),(n||0===n)&&(h.min=n),s&&(h.velocity=0),h},zt=function(t){var e;return!(!t||!t.getAttribute||"BODY"===t.nodeName)&&(!("true"!==(e=t.getAttribute("data-clickable"))&&("false"===e||!t.onclick&&!N.test(t.nodeName+"")&&"true"!==t.getAttribute("contentEditable")))||zt(t.parentNode))},Bt=function(t,e){for(var i,n=t.length;--n>-1;)i=t[n],i.ondragstart=i.onselectstart=e?null:P,it(i,"userSelect",e?"text":"none")},qt=function(){var t,e=y.createElement("div"),i=y.createElement("div"),n=i.style,r=y.body||b;return n.display="inline-block",n.position="relative",e.style.cssText=i.innerHTML="width:90px; height:40px; padding:10px; overflow:auto; visibility: hidden",e.appendChild(i),r.appendChild(e),f=i.offsetHeight+18>e.scrollHeight,n.width="100%",dt||(n.paddingRight="500px",t=e.scrollLeft=e.scrollWidth-e.clientWidth,n.left="-90px",t=t!==e.scrollLeft),r.removeChild(e),t}(),Wt=function(t,i){t=tt(t),i=i||{};var n,r,s,o,a,l,h=y.createElement("div"),u=h.style,c=t.firstChild,p=0,d=0,m=t.scrollTop,g=t.scrollLeft,_=t.scrollWidth,v=t.scrollHeight,x=0,w=0,b=0;ft&&i.force3D!==!1?(a="translate3d(",l="px,0px)"):dt&&(a="translate(",l="px)"),this.scrollTop=function(t,e){return arguments.length?void this.top(-t,e):-this.top()},this.scrollLeft=function(t,e){return arguments.length?void this.left(-t,e):-this.left()},this.left=function(n,r){if(!arguments.length)return-(t.scrollLeft+d);var s=t.scrollLeft-g,o=d;return(s>2||s<-2)&&!r?(g=t.scrollLeft,e.killTweensOf(this,!0,{left:1,scrollLeft:1}),this.left(-g),void(i.onKill&&i.onKill())):(n=-n,n<0?(d=n-.5|0,n=0):n>w?(d=n-w|0,n=w):d=0,(d||o)&&(a?this._suspendTransforms||(u[dt]=a+-d+"px,"+-p+l):u.left=-d+"px",qt&&d+x>=0&&(u.paddingRight=d+x+"px")),t.scrollLeft=0|n,void(g=t.scrollLeft))},this.top=function(n,r){if(!arguments.length)return-(t.scrollTop+p);var s=t.scrollTop-m,o=p;return(s>2||s<-2)&&!r?(m=t.scrollTop,e.killTweensOf(this,!0,{top:1,scrollTop:1}),this.top(-m),void(i.onKill&&i.onKill())):(n=-n,n<0?(p=n-.5|0,n=0):n>b?(p=n-b|0,n=b):p=0,(p||o)&&(a?this._suspendTransforms||(u[dt]=a+-d+"px,"+-p+l):u.top=-p+"px"),t.scrollTop=0|n,void(m=t.scrollTop))},this.maxScrollTop=function(){return b},this.maxScrollLeft=function(){return w},this.disable=function(){for(c=h.firstChild;c;)o=c.nextSibling,t.appendChild(c),c=o;t===h.parentNode&&t.removeChild(h)},this.enable=function(){if(c=t.firstChild,c!==h){for(;c;)o=c.nextSibling,h.appendChild(c),c=o;t.appendChild(h),this.calibrate()}},this.calibrate=function(e){var i,o,a=t.clientWidth===n;m=t.scrollTop,g=t.scrollLeft,a&&t.clientHeight===r&&h.offsetHeight===s&&_===t.scrollWidth&&v===t.scrollHeight&&!e||((p||d)&&(i=this.left(),o=this.top(),this.left(-t.scrollLeft),this.top(-t.scrollTop)),a&&!e||(u.display="block",u.width="auto",u.paddingRight="0px",x=Math.max(0,t.scrollWidth-t.clientWidth),x&&(x+=lt(t,"paddingLeft")+(f?lt(t,"paddingRight"):0))),u.display="inline-block",u.position="relative",u.overflow="visible",u.verticalAlign="top",u.width="100%",u.paddingRight=x+"px",f&&(u.paddingBottom=lt(t,"paddingBottom",!0)),O&&(u.zoom="1"),n=t.clientWidth,r=t.clientHeight,_=t.scrollWidth,v=t.scrollHeight,w=t.scrollWidth-n,b=t.scrollHeight-r,s=h.offsetHeight,u.display="block",(i||o)&&(this.left(i),this.top(o)))},this.content=h,this.element=t,this._suspendTransforms=!1,this.enable()},Vt=function(n,r){t.call(this,n),n=tt(n),o||(o=_.com.greensock.plugins.ThrowPropsPlugin),this.vars=r=I(r||{}),this.target=n,this.x=this.y=this.rotation=0,this.dragResistance=parseFloat(r.dragResistance)||0,this.edgeResistance=isNaN(r.edgeResistance)?1:parseFloat(r.edgeResistance)||0,this.lockAxis=r.lockAxis,this.autoScroll=r.autoScroll||0,this.lockedAxis=null,this.allowEventDefault=!!r.allowEventDefault;var a,l,h,u,c,f,v,w,b,P,R,N,j,z,W,H,U,Q,et,nt,rt,st,ot,at,ct,ft,pt,dt,mt,gt,_t,vt,yt,xt=(r.type||(O?"top,left":"x,y")).toLowerCase(),wt=xt.indexOf("x")!==-1||xt.indexOf("y")!==-1,bt=xt.indexOf("rotation")!==-1,Tt=bt?"rotation":wt?"x":"left",Pt=wt?"y":"top",kt=xt.indexOf("x")!==-1||xt.indexOf("left")!==-1||"scroll"===xt,St=xt.indexOf("y")!==-1||xt.indexOf("top")!==-1||"scroll"===xt,At=r.minimumMovement||2,Rt=this,Dt=Y(r.trigger||r.handle||n),Mt={},Xt=0,qt=!1,Ht=r.clickableTest||zt,Ut=0,$t=function(t){if(Rt.autoScroll&&Rt.isDragging&&(qt||Q)){var e,i,r,s,o,a,h,u,c=n,f=15*Rt.autoScroll;for(qt=!1,X.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=x.scrollTop?x.scrollTop:y.body.scrollTop,X.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=x.scrollLeft?x.scrollLeft:y.body.scrollLeft,s=Rt.pointerX-X.scrollLeft,o=Rt.pointerY-X.scrollTop;c&&!i;)i=Z(c.parentNode),e=i?X:c.parentNode,r=i?{bottom:Math.max(x.clientHeight,window.innerHeight||0),right:Math.max(x.clientWidth,window.innerWidth||0),left:0,top:0}:e.getBoundingClientRect(),a=h=0,St&&(u=e._gsMaxScrollY-e.scrollTop,u<0?h=u:o>r.bottom-40&&u?(qt=!0,h=Math.min(u,f*(1-Math.max(0,r.bottom-o)/40)|0)):o<r.top+40&&e.scrollTop&&(qt=!0,h=-Math.min(e.scrollTop,f*(1-Math.max(0,o-r.top)/40)|0)),h&&(e.scrollTop+=h)),kt&&(u=e._gsMaxScrollX-e.scrollLeft,u<0?a=u:s>r.right-40&&u?(qt=!0,a=Math.min(u,f*(1-Math.max(0,r.right-s)/40)|0)):s<r.left+40&&e.scrollLeft&&(qt=!0,a=-Math.min(e.scrollLeft,f*(1-Math.max(0,s-r.left)/40)|0)),a&&(e.scrollLeft+=a)),i&&(a||h)&&(window.scrollTo(e.scrollLeft,e.scrollTop),le(Rt.pointerX+a,Rt.pointerY+h)),c=e}if(Q){var p=Rt.x,d=Rt.y,m=1e-6;p<m&&p>-m&&(p=0),d<m&&d>-m&&(d=0),bt?(dt.data.rotation=Rt.rotation=p,dt.setRatio(1)):l?(St&&l.top(d),kt&&l.left(p)):wt?(St&&(dt.data.y=d),kt&&(dt.data.x=p),dt.setRatio(1)):(St&&(n.style.top=d+"px"),kt&&(n.style.left=p+"px")),!w||t||_t||(_t=!0,ht(Rt,"drag","onDrag"),_t=!1)}Q=!1},Zt=function(t,i){var r;Rt.x,Rt.y;n._gsTransform||!wt&&!bt||e.set(n,{x:"+=0",overwrite:!1}),wt?(Rt.y=n._gsTransform.y,Rt.x=n._gsTransform.x):bt?Rt.x=Rt.rotation=n._gsTransform.rotation:l?(Rt.y=l.top(),Rt.x=l.left()):(Rt.y=parseInt(n.style.top,10)||0,Rt.x=parseInt(n.style.left,10)||0),!nt&&!rt||i||!Rt.isDragging&&!Rt.isThrowing||(nt&&(r=nt(Rt.x),r!==Rt.x&&(Rt.x=r,bt&&(Rt.rotation=r),Q=!0)),rt&&(r=rt(Rt.y),r!==Rt.y&&(Rt.y=r),Q=!0)),Q&&$t(!0),t||ht(Rt,"throwupdate","onThrowUpdate")},Qt=function(){var t,e,i,s;v=!1,l?(l.calibrate(),Rt.minX=P=-l.maxScrollLeft(),Rt.minY=N=-l.maxScrollTop(),Rt.maxX=b=Rt.maxY=R=0,v=!0):r.bounds&&(t=ut(r.bounds,n.parentNode),bt?(Rt.minX=P=t.left,Rt.maxX=b=t.left+t.width,Rt.minY=N=Rt.maxY=R=0):void 0!==r.bounds.maxX||void 0!==r.bounds.maxY?(t=r.bounds,Rt.minX=P=t.minX,Rt.minY=N=t.minY,Rt.maxX=b=t.maxX,Rt.maxY=R=t.maxY):(e=ut(n,n.parentNode),Rt.minX=P=lt(n,Tt)+t.left-e.left,Rt.minY=N=lt(n,Pt)+t.top-e.top,Rt.maxX=b=P+(t.width-e.width),Rt.maxY=R=N+(t.height-e.height)),P>b&&(Rt.minX=b,Rt.maxX=b=P,P=Rt.minX),N>R&&(Rt.minY=R,Rt.maxY=R=N,N=Rt.minY),bt&&(Rt.minRotation=P,Rt.maxRotation=b),v=!0),r.liveSnap&&(i=r.liveSnap===!0?r.snap||{}:r.liveSnap,s=i instanceof Array||"function"==typeof i,bt?(nt=se(s?i:i.rotation,P,b,1),rt=null):(kt&&(nt=se(s?i:i.x||i.left||i.scrollLeft,P,b,l?-1:1)),St&&(rt=se(s?i:i.y||i.top||i.scrollTop,N,R,l?-1:1))))},Kt=function(){Rt.isThrowing=!1,ht(Rt,"throwcomplete","onThrowComplete")},Jt=function(){Rt.isThrowing=!1},te=function(t,e){var i,s,a,h;t&&o?(t===!0&&(i=r.snap||{},s=i instanceof Array||"function"==typeof i,t={resistance:(r.throwResistance||r.resistance||1e3)/(bt?10:1)},bt?t.rotation=It(Rt,s?i:i.rotation,b,P,1,e):(kt&&(t[Tt]=It(Rt,s?i:i.x||i.left||i.scrollLeft,b,P,l?-1:1,e||"x"===Rt.lockedAxis)),St&&(t[Pt]=It(Rt,s?i:i.y||i.top||i.scrollTop,R,N,l?-1:1,e||"y"===Rt.lockedAxis)))),Rt.isThrowing=!0,h=isNaN(r.overshootTolerance)?1===r.edgeResistance?0:1-Rt.edgeResistance+.2:r.overshootTolerance,Rt.tween=a=o.to(l||n,{throwProps:t,ease:r.ease||_.Power3.easeOut,onComplete:Kt,onOverwrite:Jt,onUpdate:r.fastMode?ht:Zt,onUpdateParams:r.fastMode?[Rt,"onthrowupdate","onThrowUpdate"]:T},isNaN(r.maxDuration)?2:r.maxDuration,isNaN(r.minDuration)?0===h?0:.5:r.minDuration,h),r.fastMode||(l&&(l._suspendTransforms=!0),a.render(a.duration(),!0,!0),Zt(!0,!0),Rt.endX=Rt.x,Rt.endY=Rt.y,bt&&(Rt.endRotation=Rt.x),a.play(0),Zt(!0,!0),l&&(l._suspendTransforms=!1))):v&&Rt.applyBounds()},ee=function(t){var e,i,r,s,o,a,l,c,f,p=at||[1,0,0,1,0,0];at=Ct(n.parentNode,!0),t&&Rt.isPressed&&p.join(",")!==at.join(",")&&(e=p[0],i=p[1],r=p[2],s=p[3],o=p[4],a=p[5],l=e*s-i*r,c=h*(s/l)+u*(-r/l)+(r*a-s*o)/l,f=h*(-i/l)+u*(e/l)+-(e*a-i*o)/l,u=c*at[1]+f*at[3]+at[5],h=c*at[0]+f*at[2]+at[4]),at[1]||at[2]||1!=at[0]||1!=at[3]||0!=at[4]||0!=at[5]||(at=null)},ie=function(){var t=1-Rt.edgeResistance;ee(!1),at&&(h=Rt.pointerX*at[0]+Rt.pointerY*at[2]+at[4],u=Rt.pointerX*at[1]+Rt.pointerY*at[3]+at[5]),Q&&(le(Rt.pointerX,Rt.pointerY),$t(!0)),l?(Qt(),f=l.top(),c=l.left()):(ne()?(Zt(!0,!0),Qt()):Rt.applyBounds(),bt?(U=Ot(n,{x:0,y:0}),Zt(!0,!0),c=Rt.x,f=Rt.y=Math.atan2(U.y-Rt.pointerY,Rt.pointerX-U.x)*k):(ft=n.parentNode?n.parentNode.scrollTop||0:0,pt=n.parentNode?n.parentNode.scrollLeft||0:0,f=lt(n,Pt),c=lt(n,Tt))),v&&t&&(c>b?c=b+(c-b)/t:c<P&&(c=P-(P-c)/t),bt||(f>R?f=R+(f-R)/t:f<N&&(f=N-(N-f)/t)))},ne=function(){return Rt.tween&&Rt.tween.isActive()},re=function(){!A.parentNode||ne()||Rt.isDragging||A.parentNode.removeChild(A)},se=function(t,e,i,n){return"function"==typeof t?function(r){var s=Rt.isPressed?1-Rt.edgeResistance:1;return t.call(Rt,r>i?i+(r-i)*s:r<e?e+(r-e)*s:r)*n}:t instanceof Array?function(n){for(var r,s,o=t.length,a=0,l=S;--o>-1;)r=t[o],s=r-n,s<0&&(s=-s),s<l&&r>=e&&r<=i&&(a=o,l=s);return t[a]}:isNaN(t)?function(t){return t}:function(){return t*n}},oe=function(t){var i;if(!a||Rt.isPressed||!t||("mousedown"===t.type||"pointerdown"===t.type)&&C()-Ut<30&&Ft[Rt.pointerEvent.type])return void console.log("RETURN onPress",Rt.isPressed,t.type);if(console.log("onPress",t.type),ct=ne(),Rt.pointerEvent=t,Ft[t.type]?(ot=t.type.indexOf("touch")!==-1?t.currentTarget||t.target:y,Et(ot,"touchend",he),Et(ot,"touchmove",ae),Et(ot,"touchcancel",he),Et(y,"touchstart",Yt)):(ot=null,Et(y,"mousemove",ae)),gt=null,Et(y,"mouseup",he),t&&t.target&&Et(t.target,"mouseup",he),st=Ht.call(Rt,t.target)&&!r.dragClickables)return Et(t.target,"change",he),ht(Rt,"press","onPress"),void Bt(Dt,!0);if(mt=!(!ot||kt===St||Rt.vars.allowNativeTouchScrolling===!1)&&(kt?"y":"x"),O?t=J(t,!0):mt||Rt.allowEventDefault||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()),t.changedTouches?(t=W=t.changedTouches[0],H=t.identifier):t.pointerId?H=t.pointerId:W=H=null,F++,B($t),u=Rt.pointerY=t.pageY,h=Rt.pointerX=t.pageX,(mt||Rt.autoScroll)&&K(n.parentNode),n.parentNode&&(l||Rt.autoScroll&&!bt&&n.parentNode._gsMaxScrollX&&!A.parentNode)&&!n.getBBox&&(A.style.width=n.parentNode.scrollWidth+"px",n.parentNode.appendChild(A)),ie(),Rt.tween&&Rt.tween.kill(),Rt.isThrowing=!1,e.killTweensOf(l||n,!0,Mt),l&&e.killTweensOf(n,!0,{scrollTo:1}),Rt.tween=Rt.lockedAxis=null,(r.zIndexBoost||!bt&&!l&&r.zIndexBoost!==!1)&&(n.style.zIndex=Vt.zIndex++),Rt.isPressed=!0,w=!(!r.onDrag&&!Rt._listeners.drag),!bt)for(i=Dt.length;--i>-1;)it(Dt[i],"cursor",r.cursor||"move");ht(Rt,"press","onPress")},ae=function(t){var e,i,n,r,o,l,c=t;if(a&&!s&&Rt.isPressed&&t){if(Rt.pointerEvent=t,e=t.changedTouches){if(t=e[0],t!==W&&t.identifier!==H){for(r=e.length;--r>-1&&(t=e[r]).identifier!==H;);if(r<0)return}}else if(t.pointerId&&H&&t.pointerId!==H)return;if(O)t=J(t,!0);else{if(ot&&mt&&!gt&&(i=t.pageX,n=t.pageY,at&&(r=i*at[0]+n*at[2]+at[4],n=i*at[1]+n*at[3]+at[5],i=r),o=Math.abs(i-h),l=Math.abs(n-u),(o!==l&&(o>At||l>At)||E&&mt===gt)&&(gt=o>l&&kt?"x":"y",Rt.vars.lockAxisOnTouchScroll!==!1&&(Rt.lockedAxis="x"===gt?"y":"x",
"function"==typeof Rt.vars.onLockAxis&&Rt.vars.onLockAxis.call(Rt,c)),E&&mt===gt)))return void he(c);Rt.allowEventDefault||mt&&(!gt||mt===gt)||c.cancelable===!1||(c.preventDefault(),c.preventManipulation&&c.preventManipulation())}Rt.autoScroll&&(qt=!0),le(t.pageX,t.pageY)}},le=function(t,e){var i,n,r,s,o,a,l=1-Rt.dragResistance,p=1-Rt.edgeResistance;Rt.pointerX=t,Rt.pointerY=e,bt?(s=Math.atan2(U.y-e,t-U.x)*k,o=Rt.y-s,Rt.y=s,o>180?f-=360:o<-180&&(f+=360),r=c+(f-s)*l):(at&&(a=t*at[0]+e*at[2]+at[4],e=t*at[1]+e*at[3]+at[5],t=a),n=e-u,i=t-h,n<At&&n>-At&&(n=0),i<At&&i>-At&&(i=0),(Rt.lockAxis||Rt.lockedAxis)&&(i||n)&&(a=Rt.lockedAxis,a||(Rt.lockedAxis=a=kt&&Math.abs(i)>Math.abs(n)?"y":St?"x":null,a&&"function"==typeof Rt.vars.onLockAxis&&Rt.vars.onLockAxis.call(Rt,Rt.pointerEvent)),"y"===a?n=0:"x"===a&&(i=0)),r=c+i*l,s=f+n*l),!nt&&!rt||Rt.x===r&&(Rt.y===s||bt)?v&&(r>b?r=b+(r-b)*p:r<P&&(r=P+(r-P)*p),bt||(s>R?s=R+(s-R)*p:s<N&&(s=N+(s-N)*p))):(nt&&(r=nt(r)),rt&&(s=rt(s))),bt||(r=Math.round(r),s=Math.round(s)),(Rt.x!==r||Rt.y!==s&&!bt)&&(console.log("setting self ",r,s),bt?Rt.endRotation=Rt.x=Rt.endX=r:(St&&(Rt.y=Rt.endY=s),kt&&(Rt.x=Rt.endX=r)),Q=!0,!Rt.isDragging&&Rt.isPressed&&(Rt.isDragging=!0,ht(Rt,"dragstart","onDragStart")))},he=function(t,i){if(a&&Rt.isPressed&&(!t||null==H||i||!(t.pointerId&&t.pointerId!==H||t.changedTouches&&!jt(t.changedTouches,H)))){Rt.isPressed=!1;var s,o,l,h,u,c=t,f=Rt.isDragging,p=e.delayedCall(.001,re);if(ot?(Lt(ot,"touchend",he),Lt(ot,"touchmove",ae),Lt(ot,"touchcancel",he),Lt(y,"touchstart",Yt)):Lt(y,"mousemove",ae),Lt(y,"mouseup",he),t&&t.target&&Lt(t.target,"mouseup",he),Q=!1,st)return t&&Lt(t.target,"change",he),Bt(Dt,!1),ht(Rt,"release","onRelease"),ht(Rt,"click","onClick"),void(st=!1);if(q($t),!bt)for(o=Dt.length;--o>-1;)it(Dt[o],"cursor",r.cursor||"move");if(f&&(Xt=L=C(),Rt.isDragging=!1),F--,t){if(O&&(t=J(t,!1)),s=t.changedTouches,s&&(t=s[0],t!==W&&t.identifier!==H)){for(o=s.length;--o>-1&&(t=s[o]).identifier!==H;);if(o<0)return}Rt.pointerEvent=c,Rt.pointerX=t.pageX,Rt.pointerY=t.pageY}return c&&!f?(ct&&(r.snap||r.bounds)&&te(r.throwProps),ht(Rt,"release","onRelease"),E&&"touchmove"===c.type||(ht(Rt,"click","onClick"),h=c.target||c.srcElement||n,Ut=C(),u=function(){Ut!==vt&&Rt.enabled()&&!Rt.isPressed&&(h.click?h.click():y.createEvent&&(l=y.createEvent("MouseEvents"),l.initMouseEvent("click",!0,!0,window,1,Rt.pointerEvent.screenX,Rt.pointerEvent.screenY,Rt.pointerX,Rt.pointerY,!1,!1,!1,!1,0,null),h.dispatchEvent(l)))},E||e.delayedCall(1e-5,u))):(te(r.throwProps),O||Rt.allowEventDefault||!c||!r.dragClickables&&Ht.call(Rt,c.target)||!f||mt&&(!gt||mt!==gt)||c.cancelable===!1||(c.preventDefault(),c.preventManipulation&&c.preventManipulation()),ht(Rt,"release","onRelease")),ne()&&p.duration(Rt.tween.duration()),f&&ht(Rt,"dragend","onDragEnd"),!0}},ue=function(t){if(t&&Rt.isDragging&&!l){var e=t.target||t.srcElement||n.parentNode,i=e.scrollLeft-e._gsScrollX,r=e.scrollTop-e._gsScrollY;(i||r)&&(at?(h-=i*at[0]+r*at[2],u-=r*at[3]+i*at[1]):(h-=i,u-=r),e._gsScrollX+=i,e._gsScrollY+=r,le(Rt.pointerX,Rt.pointerY))}},ce=function(t){var e=C(),i=e-Ut<40,n=e-Xt<40,r=i&&vt===Ut,s=!!t.preventDefault,o=i&&yt===Ut,a=t.isTrusted||null==t.isTrusted&&i&&r;return s&&(r||n&&Rt.vars.suppressClickOnDrag!==!1)&&t.stopImmediatePropagation(),!i||r&&a===o?void((Rt.isPressed||n||i)&&(s?a&&t.detail&&i||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()):t.returnValue=!1)):(a&&r&&(yt=Ut),void(vt=Ut))};et=Vt.get(this.target),et&&et.kill(),this.startDrag=function(t){oe(t),Rt.isDragging||(Rt.isDragging=!0,ht(Rt,"dragstart","onDragStart"))},this.drag=ae,this.endDrag=function(t){he(t,!0)},this.timeSinceDrag=function(){return Rt.isDragging?0:(C()-Xt)/1e3},this.hitTest=function(t,e){return Vt.hitTest(Rt.target,t,e)},this.getDirection=function(t,e){var i,n,r,s,a,l,h="velocity"===t&&o?t:"object"!=typeof t||bt?"start":"element";return"element"===h&&(a=Gt(Rt.target),l=Gt(t)),i="start"===h?Rt.x-c:"velocity"===h?o.getVelocity(this.target,Tt):a.left+a.width/2-(l.left+l.width/2),bt?i<0?"counter-clockwise":"clockwise":(e=e||2,n="start"===h?Rt.y-f:"velocity"===h?o.getVelocity(this.target,Pt):a.top+a.height/2-(l.top+l.height/2),r=Math.abs(i/n),s=r<1/e?"":i<0?"left":"right",r<e&&(""!==s&&(s+="-"),s+=n<0?"up":"down"),s)},this.applyBounds=function(t){var e,i,s,o,a,l;if(t&&r.bounds!==t)return r.bounds=t,Rt.update(!0);if(Zt(!0),Qt(),v){if(e=Rt.x,i=Rt.y,e>b?e=b:e<P&&(e=P),i>R?i=R:i<N&&(i=N),(Rt.x!==e||Rt.y!==i)&&(s=!0,Rt.x=Rt.endX=e,bt?Rt.endRotation=e:Rt.y=Rt.endY=i,Q=!0,$t(!0),Rt.autoScroll&&!Rt.isDragging))for(K(n.parentNode),o=n,X.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=x.scrollTop?x.scrollTop:y.body.scrollTop,X.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=x.scrollLeft?x.scrollLeft:y.body.scrollLeft;o&&!l;)l=Z(o.parentNode),a=l?X:o.parentNode,St&&a.scrollTop>a._gsMaxScrollY&&(a.scrollTop=a._gsMaxScrollY),kt&&a.scrollLeft>a._gsMaxScrollX&&(a.scrollLeft=a._gsMaxScrollX),o=a;Rt.isThrowing&&(s||Rt.endX>b||Rt.endX<P||Rt.endY>R||Rt.endY<N)&&te(r.throwProps,s)}return Rt},this.update=function(t,e,i){var r=Rt.x,s=Rt.y;return ee(!e),t?Rt.applyBounds():(Q&&i&&$t(!0),Zt(!0)),e&&(le(Rt.pointerX,Rt.pointerY),Q&&$t(!0)),Rt.isPressed&&!e&&(kt&&Math.abs(r-Rt.x)>.01||St&&Math.abs(s-Rt.y)>.01&&!bt)&&ie(),Rt.autoScroll&&(K(n.parentNode),qt=Rt.isDragging,$t(!0)),Rt.autoScroll&&(G(n,ue),$(n,ue)),Rt},this.enable=function(t){var s,h,u;if("soft"!==t){for(h=Dt.length;--h>-1;)u=Dt[h],Et(u,"mousedown",oe),Et(u,"touchstart",oe),Et(u,"click",ce,!0),bt||it(u,"cursor",r.cursor||"move"),it(u,"touchCallout","none"),it(u,"touchAction",kt===St?"none":kt?"pan-y":"pan-x");Bt(Dt,!1)}return $(n,ue),a=!0,o&&"soft"!==t&&o.track(l||n,wt?"x,y":bt?"rotation":"top,left"),l&&l.enable(),n._gsDragID=s="d"+M++,D[s]=this,l&&(l.element._gsDragID=s),e.set(n,{x:"+=0",overwrite:!1}),dt={t:n,data:O?z:n._gsTransform,tween:{},setRatio:O?function(){e.set(n,j)}:i._internals.setTransformRatio||i._internals.set3DTransformRatio},ie(),Rt.update(!0),Rt},this.disable=function(t){var e,i,r=Rt.isDragging;if(!bt)for(e=Dt.length;--e>-1;)it(Dt[e],"cursor",null);if("soft"!==t){for(e=Dt.length;--e>-1;)i=Dt[e],it(i,"touchCallout",null),it(i,"touchAction",null),Lt(i,"mousedown",oe),Lt(i,"touchstart",oe),Lt(i,"click",ce);Bt(Dt,!0),ot&&(Lt(ot,"touchcancel",he),Lt(ot,"touchend",he),Lt(ot,"touchmove",ae)),Lt(y,"mouseup",he),Lt(y,"mousemove",ae)}return G(n,ue),a=!1,o&&"soft"!==t&&o.untrack(l||n,wt?"x,y":bt?"rotation":"top,left"),l&&l.disable(),q($t),Rt.isDragging=Rt.isPressed=st=!1,r&&ht(Rt,"dragend","onDragEnd"),Rt},this.enabled=function(t,e){return arguments.length?t?Rt.enable(e):Rt.disable(e):a},this.kill=function(){return Rt.isThrowing=!1,e.killTweensOf(l||n,!0,Mt),Rt.disable(),delete D[n._gsDragID],Rt},xt.indexOf("scroll")!==-1&&(l=this.scrollProxy=new Wt(n,V({onKill:function(){Rt.isPressed&&he(null)}},r)),n.style.overflowY=St&&!Nt?"auto":"hidden",n.style.overflowX=kt&&!Nt?"auto":"hidden",n=l.content),r.force3D!==!1&&e.set(n,{force3D:!0}),bt?Mt.rotation=1:(kt&&(Mt[Tt]=1),St&&(Mt[Pt]=1)),bt?(j=g,z=j.css,j.overwrite=!1):wt&&(j=kt&&St?p:kt?d:m,z=j.css,j.overwrite=!1),this.enable()},Ht=Vt.prototype=new t;Ht.constructor=Vt,Ht.pointerX=Ht.pointerY=0,Ht.isDragging=Ht.isPressed=!1,Vt.version="0.14.9",Vt.zIndex=1e3,Et(y,"touchcancel",function(){}),Et(y,"contextmenu",function(t){var e;for(e in D)D[e].isPressed&&D[e].endDrag()}),Vt.create=function(t,i){"string"==typeof t&&(t=e.selector(t));for(var n=t&&0!==t.length?Dt(t)?Mt(t):[t]:[],r=n.length;--r>-1;)n[r]=new Vt(n[r],i);return n},Vt.get=function(t){return D[(tt(t)||{})._gsDragID]},Vt.timeSinceDrag=function(){return(C()-L)/1e3};var Ut={},$t=function(t){var e,i,n=0,r=0;for(t=tt(t),e=t.offsetWidth,i=t.offsetHeight;t;)n+=t.offsetTop,r+=t.offsetLeft,t=t.offsetParent;return{top:n,left:r,width:e,height:i}},Gt=function(t,e){if(t===window)return Ut.left=Ut.top=0,Ut.width=Ut.right=x.clientWidth||t.innerWidth||y.body.clientWidth||0,Ut.height=Ut.bottom=(t.innerHeight||0)-20<x.clientHeight?x.clientHeight:t.innerHeight||y.body.clientHeight||0,Ut;var i=t.pageX!==e?{left:t.pageX-U(),top:t.pageY-H(),right:t.pageX-U()+1,bottom:t.pageY-H()+1}:t.nodeType||t.left===e||t.top===e?O?$t(t):tt(t).getBoundingClientRect():t;return i.right===e&&i.width!==e?(i.right=i.left+i.width,i.bottom=i.top+i.height):i.width===e&&(i={width:i.right-i.left,height:i.bottom-i.top,right:i.right,left:i.left,bottom:i.bottom,top:i.top}),i};return Vt.hitTest=function(t,e,i){if(t===e)return!1;var n,r,s,o=Gt(t),a=Gt(e),l=a.left>o.right||a.right<o.left||a.top>o.bottom||a.bottom<o.top;return l||!i?!l:(s=(i+"").indexOf("%")!==-1,i=parseFloat(i)||0,n={left:Math.max(o.left,a.left),top:Math.max(o.top,a.top)},n.width=Math.min(o.right,a.right)-n.left,n.height=Math.min(o.bottom,a.bottom)-n.top,!(n.width<0||n.height<0)&&(s?(i*=.01,r=n.width*n.height,r>=o.width*o.height*i||r>=a.width*a.height*i):n.width>i&&n.height>i))},A.style.cssText="visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;",Vt},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite","CSSPlugin"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),t("../plugins/CSSPlugin.js"),e.exports=r())}("Draggable")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6,"../plugins/CSSPlugin.js":9}],12:[function(t,e,i){!function(t){var i=/iPhone/i,n=/iPod/i,r=/iPad/i,s=/(?=.*\bAndroid\b)(?=.*\bMobile\b)/i,o=/Android/i,a=/(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,l=/(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,h=/Windows Phone/i,u=/(?=.*\bWindows\b)(?=.*\bARM\b)/i,c=/BlackBerry/i,f=/BB10/i,p=/Opera Mini/i,d=/(CriOS|Chrome)(?=.*\bMobile\b)/i,m=/(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,g=new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)","i"),_=function(t,e){return t.test(e)},v=function(t){var e=t||navigator.userAgent,v=e.split("[FBAN");if("undefined"!=typeof v[1]&&(e=v[0]),v=e.split("Twitter"),"undefined"!=typeof v[1]&&(e=v[0]),this.apple={phone:_(i,e),ipod:_(n,e),tablet:!_(i,e)&&_(r,e),device:_(i,e)||_(n,e)||_(r,e)},this.amazon={phone:_(a,e),tablet:!_(a,e)&&_(l,e),device:_(a,e)||_(l,e)},this.android={phone:_(a,e)||_(s,e),tablet:!_(a,e)&&!_(s,e)&&(_(l,e)||_(o,e)),device:_(a,e)||_(l,e)||_(s,e)||_(o,e)},this.windows={phone:_(h,e),tablet:_(u,e),device:_(h,e)||_(u,e)},this.other={blackberry:_(c,e),blackberry10:_(f,e),opera:_(p,e),firefox:_(m,e),chrome:_(d,e),device:_(c,e)||_(f,e)||_(p,e)||_(m,e)||_(d,e)},this.seven_inch=_(g,e),this.any=this.apple.device||this.android.device||this.windows.device||this.other.device||this.seven_inch,this.phone=this.apple.phone||this.android.phone||this.windows.phone,this.tablet=this.apple.tablet||this.android.tablet||this.windows.tablet,"undefined"==typeof window)return this},y=function(){var t=new v;return t.Class=v,t};"undefined"!=typeof e&&e.exports&&"undefined"==typeof window?e.exports=v:"undefined"!=typeof e&&e.exports&&"undefined"!=typeof window?e.exports=y():"function"==typeof define&&define.amd?define("isMobile",[],t.isMobile=y()):t.isMobile=y()}(this)},{}],13:[function(t,e,i){!function(t,i){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?i(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function i(t,e){e=e||B;var i=e.createElement("script");i.text=t,e.head.appendChild(i).parentNode.removeChild(i)}function n(t){var e=!!t&&"length"in t&&t.length,i=et.type(t);return"function"!==i&&!et.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function r(t,e,i){return et.isFunction(e)?et.grep(t,function(t,n){return!!e.call(t,n,t)!==i}):e.nodeType?et.grep(t,function(t){return t===e!==i}):"string"!=typeof e?et.grep(t,function(t){return U.call(e,t)>-1!==i}):ct.test(e)?et.filter(e,t,i):(e=et.filter(e,t),et.grep(t,function(t){return U.call(e,t)>-1!==i&&1===t.nodeType}))}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e={};return et.each(t.match(_t)||[],function(t,i){e[i]=!0}),e}function a(t){return t}function l(t){throw t}function h(t,e,i){var n;try{t&&et.isFunction(n=t.promise)?n.call(t).done(e).fail(i):t&&et.isFunction(n=t.then)?n.call(t,e,i):e.call(void 0,t)}catch(t){i.call(void 0,t)}}function u(){B.removeEventListener("DOMContentLoaded",u),t.removeEventListener("load",u),et.ready()}function c(){this.expando=et.expando+c.uid++}function f(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Pt.test(t)?JSON.parse(t):t)}function p(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(kt,"-$&").toLowerCase(),i=t.getAttribute(n),"string"==typeof i){try{i=f(i)}catch(t){}Tt.set(t,e,i)}else i=void 0;return i}function d(t,e,i,n){var r,s=1,o=20,a=n?function(){return n.cur()}:function(){return et.css(t,e,"")},l=a(),h=i&&i[3]||(et.cssNumber[e]?"":"px"),u=(et.cssNumber[e]||"px"!==h&&+l)&&Ct.exec(et.css(t,e));if(u&&u[3]!==h){h=h||u[3],i=i||[],u=+l||1;do s=s||".5",u/=s,et.style(t,e,u+h);while(s!==(s=a()/l)&&1!==s&&--o)}return i&&(u=+u||+l||0,r=i[1]?u+(i[1]+1)*i[2]:+i[2],n&&(n.unit=h,n.start=u,n.end=r)),r}function m(t){var e,i=t.ownerDocument,n=t.nodeName,r=Dt[n];return r?r:(e=i.body.appendChild(i.createElement(n)),r=et.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),Dt[n]=r,r)}function g(t,e){for(var i,n,r=[],s=0,o=t.length;s<o;s++)n=t[s],n.style&&(i=n.style.display,e?("none"===i&&(r[s]=bt.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&At(n)&&(r[s]=m(n))):"none"!==i&&(r[s]="none",bt.set(n,"display",i)));for(s=0;s<o;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}function _(t,e){var i;return i="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&et.nodeName(t,e)?et.merge([t],i):i}function v(t,e){for(var i=0,n=t.length;i<n;i++)bt.set(t[i],"globalEval",!e||bt.get(e[i],"globalEval"))}function y(t,e,i,n,r){for(var s,o,a,l,h,u,c=e.createDocumentFragment(),f=[],p=0,d=t.length;p<d;p++)if(s=t[p],s||0===s)if("object"===et.type(s))et.merge(f,s.nodeType?[s]:s);else if(Lt.test(s)){for(o=o||c.appendChild(e.createElement("div")),a=(Nt.exec(s)||["",""])[1].toLowerCase(),l=Et[a]||Et._default,o.innerHTML=l[1]+et.htmlPrefilter(s)+l[2],u=l[0];u--;)o=o.lastChild;et.merge(f,o.childNodes),o=c.firstChild,o.textContent=""}else f.push(e.createTextNode(s));for(c.textContent="",p=0;s=f[p++];)if(n&&et.inArray(s,n)>-1)r&&r.push(s);else if(h=et.contains(s.ownerDocument,s),o=_(c.appendChild(s),"script"),h&&v(o),i)for(u=0;s=o[u++];)Ft.test(s.type||"")&&i.push(s);return c}function x(){return!0}function w(){return!1}function b(){try{return B.activeElement}catch(t){}}function T(t,e,i,n,r,s){var o,a;if("object"==typeof e){"string"!=typeof i&&(n=n||i,i=void 0);for(a in e)T(t,a,i,n,e[a],s);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),r===!1)r=w;else if(!r)return t;return 1===s&&(o=r,r=function(t){return et().off(t),o.apply(this,arguments)},r.guid=o.guid||(o.guid=et.guid++)),t.each(function(){et.event.add(this,e,r,n,i)})}function P(t,e){return et.nodeName(t,"table")&&et.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t:t}function k(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function S(t){var e=Wt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function C(t,e){var i,n,r,s,o,a,l,h;if(1===e.nodeType){if(bt.hasData(t)&&(s=bt.access(t),o=bt.set(e,s),h=s.events)){delete o.handle,o.events={};for(r in h)for(i=0,n=h[r].length;i<n;i++)et.event.add(e,r,h[r][i])}Tt.hasData(t)&&(a=Tt.access(t),l=et.extend({},a),Tt.set(e,l))}}function O(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Mt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function A(t,e,n,r){e=V.apply([],e);var s,o,a,l,h,u,c=0,f=t.length,p=f-1,d=e[0],m=et.isFunction(d);if(m||f>1&&"string"==typeof d&&!J.checkClone&&qt.test(d))return t.each(function(i){var s=t.eq(i);m&&(e[0]=d.call(this,i,s.html())),A(s,e,n,r)});if(f&&(s=y(e,t[0].ownerDocument,!1,t,r),o=s.firstChild,1===s.childNodes.length&&(s=o),o||r)){for(a=et.map(_(s,"script"),k),l=a.length;c<f;c++)h=s,c!==p&&(h=et.clone(h,!0,!0),l&&et.merge(a,_(h,"script"))),n.call(t[c],h,c);if(l)for(u=a[a.length-1].ownerDocument,et.map(a,S),c=0;c<l;c++)h=a[c],Ft.test(h.type||"")&&!bt.access(h,"globalEval")&&et.contains(u,h)&&(h.src?et._evalUrl&&et._evalUrl(h.src):i(h.textContent.replace(Vt,""),u))}return t}function R(t,e,i){for(var n,r=e?et.filter(e,t):t,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||et.cleanData(_(n)),n.parentNode&&(i&&et.contains(n.ownerDocument,n)&&v(_(n,"script")),n.parentNode.removeChild(n));return t}function D(t,e,i){var n,r,s,o,a=t.style;return i=i||$t(t),i&&(o=i.getPropertyValue(e)||i[e],""!==o||et.contains(t.ownerDocument,t)||(o=et.style(t,e)),!J.pixelMarginRight()&&Ut.test(o)&&Ht.test(e)&&(n=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function M(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function N(t){if(t in Jt)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=Kt.length;i--;)if(t=Kt[i]+e,t in Jt)return t}function F(t,e,i){var n=Ct.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function E(t,e,i,n,r){var s,o=0;for(s=i===(n?"border":"content")?4:"width"===e?1:0;s<4;s+=2)"margin"===i&&(o+=et.css(t,i+Ot[s],!0,r)),n?("content"===i&&(o-=et.css(t,"padding"+Ot[s],!0,r)),"margin"!==i&&(o-=et.css(t,"border"+Ot[s]+"Width",!0,r))):(o+=et.css(t,"padding"+Ot[s],!0,r),"padding"!==i&&(o+=et.css(t,"border"+Ot[s]+"Width",!0,r)));return o}function L(t,e,i){var n,r=!0,s=$t(t),o="border-box"===et.css(t,"boxSizing",!1,s);if(t.getClientRects().length&&(n=t.getBoundingClientRect()[e]),n<=0||null==n){if(n=D(t,e,s),(n<0||null==n)&&(n=t.style[e]),Ut.test(n))return n;r=o&&(J.boxSizingReliable()||n===t.style[e]),n=parseFloat(n)||0}return n+E(t,e,i||(o?"border":"content"),r,s)+"px"}function j(t){var e=t.match(_t)||[];return e.join(" ")}function X(t){return t.getAttribute&&t.getAttribute("class")||""}function Y(t,e,i,n){var r;if(et.isArray(e))et.each(e,function(e,r){i||oe.test(t)?n(t,r):Y(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)});else if(i||"object"!==et.type(e))n(t,e);else for(r in e)Y(t+"["+r+"]",e[r],i,n)}function I(t){return et.isWindow(t)?t:9===t.nodeType&&t.defaultView}var z=[],B=t.document,q=Object.getPrototypeOf,W=z.slice,V=z.concat,H=z.push,U=z.indexOf,$={},G=$.toString,Z=$.hasOwnProperty,Q=Z.toString,K=Q.call(Object),J={},tt="3.1.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/animatedSelector,-effects/Tween,-deprecated",et=function(t,e){return new et.fn.init(t,e)},it=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,nt=/^-ms-/,rt=/-([a-z])/g,st=function(t,e){return e.toUpperCase()};et.fn=et.prototype={jquery:tt,constructor:et,length:0,toArray:function(){return W.call(this)},get:function(t){return null==t?W.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=et.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return et.each(this,t)},map:function(t){return this.pushStack(et.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(W.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:H,sort:z.sort,splice:z.splice},et.extend=et.fn.extend=function(){var t,e,i,n,r,s,o=arguments[0]||{},a=1,l=arguments.length,h=!1;for("boolean"==typeof o&&(h=o,o=arguments[a]||{},a++),"object"==typeof o||et.isFunction(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=o[e],n=t[e],o!==n&&(h&&n&&(et.isPlainObject(n)||(r=et.isArray(n)))?(r?(r=!1,s=i&&et.isArray(i)?i:[]):s=i&&et.isPlainObject(i)?i:{},o[e]=et.extend(h,s,n)):void 0!==n&&(o[e]=n));return o},et.extend({expando:"jQuery"+(tt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===et.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=et.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==G.call(t)||(e=q(t))&&(i=Z.call(e,"constructor")&&e.constructor,"function"!=typeof i||Q.call(i)!==K))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?$[G.call(t)]||"object":typeof t},globalEval:function(t){i(t)},camelCase:function(t){return t.replace(nt,"ms-").replace(rt,st)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,r=0;if(n(t))for(i=t.length;r<i&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(it,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?et.merge(i,"string"==typeof t?[t]:t):H.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:U.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;n++)t[r++]=e[n];return t.length=r,t},grep:function(t,e,i){for(var n,r=[],s=0,o=t.length,a=!i;s<o;s++)n=!e(t[s],s),n!==a&&r.push(t[s]);return r},map:function(t,e,i){var r,s,o=0,a=[];if(n(t))for(r=t.length;o<r;o++)s=e(t[o],o,i),null!=s&&a.push(s);else for(o in t)s=e(t[o],o,i),null!=s&&a.push(s);return V.apply([],a)},guid:1,proxy:function(t,e){var i,n,r;if("string"==typeof e&&(i=t[e],e=t,t=i),et.isFunction(t))return n=W.call(arguments,2),r=function(){return t.apply(e||this,n.concat(W.call(arguments)))},r.guid=t.guid=t.guid||et.guid++,r},now:Date.now,support:J}),"function"==typeof Symbol&&(et.fn[Symbol.iterator]=z[Symbol.iterator]),et.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){$["[object "+e+"]"]=e.toLowerCase()});var ot=function(t){function e(t,e,i,n){var r,s,o,a,l,h,u,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return i;if(!n&&((e?e.ownerDocument||e:z)!==N&&M(e),e=e||N,E)){if(11!==d&&(l=_t.exec(t)))if(r=l[1]){if(9===d){if(!(o=e.getElementById(r)))return i;if(o.id===r)return i.push(o),i}else if(f&&(o=f.getElementById(r))&&Y(e,o)&&o.id===r)return i.push(o),i}else{if(l[2])return K.apply(i,e.getElementsByTagName(t)),i;if((r=l[3])&&b.getElementsByClassName&&e.getElementsByClassName)return K.apply(i,e.getElementsByClassName(r)),i}if(b.qsa&&!H[t+" "]&&(!L||!L.test(t))){if(1!==d)f=e,u=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(wt,bt):e.setAttribute("id",a=I),h=S(t),s=h.length;s--;)h[s]="#"+a+" "+p(h[s]);u=h.join(","),f=vt.test(t)&&c(e.parentNode)||e}if(u)try{return K.apply(i,f.querySelectorAll(u)),i}catch(t){}finally{a===I&&e.removeAttribute("id")}}}return O(t.replace(at,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>T.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[I]=!0,t}function r(t){var e=N.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var i=t.split("|"),n=i.length;n--;)T.attrHandle[i[n]]=e}function o(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function h(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Pt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function u(t){return n(function(e){return e=+e,n(function(i,n){for(var r,s=t([],i.length,e),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function f(){}function p(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function d(t,e,i){var n=e.dir,r=e.next,s=r||n,o=i&&"parentNode"===s,a=q++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,r);return!1}:function(e,i,l){var h,u,c,f=[B,a];if(l){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||o)if(c=e[I]||(e[I]={}),u=c[e.uniqueID]||(c[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[n]||e;else{if((h=u[s])&&h[0]===B&&h[1]===a)return f[2]=h[2];if(u[s]=f,f[2]=t(e,i,l))return!0}return!1}}function m(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function g(t,i,n){for(var r=0,s=i.length;r<s;r++)e(t,i[r],n);return n}function _(t,e,i,n,r){for(var s,o=[],a=0,l=t.length,h=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,r)||(o.push(s),h&&e.push(a)));return o}function v(t,e,i,r,s,o){return r&&!r[I]&&(r=v(r)),s&&!s[I]&&(s=v(s,o)),n(function(n,o,a,l){var h,u,c,f=[],p=[],d=o.length,m=n||g(e||"*",a.nodeType?[a]:a,[]),v=!t||!n&&e?m:_(m,f,t,a,l),y=i?s||(n?t:d||r)?[]:o:v;if(i&&i(v,y,a,l),r)for(h=_(y,p),r(h,[],a,l),u=h.length;u--;)(c=h[u])&&(y[p[u]]=!(v[p[u]]=c));if(n){if(s||t){if(s){for(h=[],u=y.length;u--;)(c=y[u])&&h.push(v[u]=c);s(null,y=[],h,l)}for(u=y.length;u--;)(c=y[u])&&(h=s?tt(n,c):f[u])>-1&&(n[h]=!(o[h]=c))}}else y=_(y===o?y.splice(d,y.length):y),s?s(null,o,y,l):K.apply(o,y)})}function y(t){for(var e,i,n,r=t.length,s=T.relative[t[0].type],o=s||T.relative[" "],a=s?1:0,l=d(function(t){return t===e},o,!0),h=d(function(t){return tt(e,t)>-1},o,!0),u=[function(t,i,n){var r=!s&&(n||i!==A)||((e=i).nodeType?l(t,i,n):h(t,i,n));return e=null,r}];a<r;a++)if(i=T.relative[t[a].type])u=[d(m(u),i)];else{if(i=T.filter[t[a].type].apply(null,t[a].matches),i[I]){for(n=++a;n<r&&!T.relative[t[n].type];n++);return v(a>1&&m(u),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),i,a<n&&y(t.slice(a,n)),n<r&&y(t=t.slice(n)),n<r&&p(t))}u.push(i)}return m(u)}function x(t,i){var r=i.length>0,s=t.length>0,o=function(n,o,a,l,h){var u,c,f,p=0,d="0",m=n&&[],g=[],v=A,y=n||s&&T.find.TAG("*",h),x=B+=null==v?1:Math.random()||.1,w=y.length;for(h&&(A=o===N||o||h);d!==w&&null!=(u=y[d]);d++){if(s&&u){for(c=0,o||u.ownerDocument===N||(M(u),a=!E);f=t[c++];)if(f(u,o||N,a)){l.push(u);break}h&&(B=x)}r&&((u=!f&&u)&&p--,n&&m.push(u))}if(p+=d,r&&d!==p){for(c=0;f=i[c++];)f(m,g,o,a);if(n){if(p>0)for(;d--;)m[d]||g[d]||(g[d]=Z.call(l));g=_(g)}K.apply(l,g),h&&!n&&g.length>0&&p+i.length>1&&e.uniqueSort(l)}return h&&(B=x,A=v),m};return r?n(o):o}var w,b,T,P,k,S,C,O,A,R,D,M,N,F,E,L,j,X,Y,I="sizzle"+1*new Date,z=t.document,B=0,q=0,W=i(),V=i(),H=i(),U=function(t,e){return t===e&&(D=!0),0},$={}.hasOwnProperty,G=[],Z=G.pop,Q=G.push,K=G.push,J=G.slice,tt=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",nt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",rt="\\["+it+"*("+nt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+nt+"))|)"+it+"*\\]",st=":("+nt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",ot=new RegExp(it+"+","g"),at=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),lt=new RegExp("^"+it+"*,"+it+"*"),ht=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ut=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),ct=new RegExp(st),ft=new RegExp("^"+nt+"$"),pt={ID:new RegExp("^#("+nt+")"),CLASS:new RegExp("^\\.("+nt+")"),TAG:new RegExp("^("+nt+"|[*])"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,_t=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,vt=/[+~]/,yt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),xt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},Tt=function(){M()},Pt=d(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{K.apply(G=J.call(z.childNodes),z.childNodes),G[z.childNodes.length].nodeType}catch(t){K={apply:G.length?function(t,e){Q.apply(t,J.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}b=e.support={},k=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},M=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:z;return n!==N&&9===n.nodeType&&n.documentElement?(N=n,F=N.documentElement,E=!k(N),z!==N&&(i=N.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",Tt,!1):i.attachEvent&&i.attachEvent("onunload",Tt)),b.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=r(function(t){return t.appendChild(N.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=gt.test(N.getElementsByClassName),b.getById=r(function(t){return F.appendChild(t).id=I,!N.getElementsByName||!N.getElementsByName(I).length}),b.getById?(T.filter.ID=function(t){var e=t.replace(yt,xt);return function(t){return t.getAttribute("id")===e}},T.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&E){var i=e.getElementById(t);return i?[i]:[]}}):(T.filter.ID=function(t){var e=t.replace(yt,xt);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},T.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&E){var i,n,r,s=e.getElementById(t);if(s){if(i=s.getAttributeNode("id"),i&&i.value===t)return[s];for(r=e.getElementsByName(t),n=0;s=r[n++];)if(i=s.getAttributeNode("id"),i&&i.value===t)return[s]}return[]}}),T.find.TAG=b.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},T.find.CLASS=b.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&E)return e.getElementsByClassName(t)},j=[],L=[],(b.qsa=gt.test(N.querySelectorAll))&&(r(function(t){F.appendChild(t).innerHTML="<a id='"+I+"'></a><select id='"+I+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+it+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+I+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+I+"+*").length||L.push(".#.+[+~]")}),r(function(t){
t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=N.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+it+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),F.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(b.matchesSelector=gt.test(X=F.matches||F.webkitMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector||F.msMatchesSelector))&&r(function(t){b.disconnectedMatch=X.call(t,"*"),X.call(t,"[s!='']:x"),j.push("!=",st)}),L=L.length&&new RegExp(L.join("|")),j=j.length&&new RegExp(j.join("|")),e=gt.test(F.compareDocumentPosition),Y=e||gt.test(F.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},U=e?function(t,e){if(t===e)return D=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!b.sortDetached&&e.compareDocumentPosition(t)===i?t===N||t.ownerDocument===z&&Y(z,t)?-1:e===N||e.ownerDocument===z&&Y(z,e)?1:R?tt(R,t)-tt(R,e):0:4&i?-1:1)}:function(t,e){if(t===e)return D=!0,0;var i,n=0,r=t.parentNode,s=e.parentNode,a=[t],l=[e];if(!r||!s)return t===N?-1:e===N?1:r?-1:s?1:R?tt(R,t)-tt(R,e):0;if(r===s)return o(t,e);for(i=t;i=i.parentNode;)a.unshift(i);for(i=e;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?o(a[n],l[n]):a[n]===z?-1:l[n]===z?1:0},N):N},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==N&&M(t),i=i.replace(ut,"='$1']"),b.matchesSelector&&E&&!H[i+" "]&&(!j||!j.test(i))&&(!L||!L.test(i)))try{var n=X.call(t,i);if(n||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return e(i,N,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==N&&M(t),Y(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==N&&M(t);var i=T.attrHandle[e.toLowerCase()],n=i&&$.call(T.attrHandle,e.toLowerCase())?i(t,e,!E):void 0;return void 0!==n?n:b.attributes||!E?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.escape=function(t){return(t+"").replace(wt,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,r=0;if(D=!b.detectDuplicates,R=!b.sortStable&&t.slice(0),t.sort(U),D){for(;e=t[r++];)e===t[r]&&(n=i.push(r));for(;n--;)t.splice(i[n],1)}return R=null,t},P=e.getText=function(t){var e,i="",n=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=P(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[n++];)i+=P(e);return i},T=e.selectors={cacheLength:50,createPseudo:n,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ct.test(i)&&(e=S(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(r){var s=e.attr(r,t);return null==s?"!="===i:!i||(s+="","="===i?s===n:"!="===i?s!==n:"^="===i?n&&0===s.indexOf(n):"*="===i?n&&s.indexOf(n)>-1:"$="===i?n&&s.slice(-n.length)===n:"~="===i?(" "+s.replace(ot," ")+" ").indexOf(n)>-1:"|="===i&&(s===n||s.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,i,n,r){var s="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var h,u,c,f,p,d,m=s!==o?"nextSibling":"previousSibling",g=e.parentNode,_=a&&e.nodeName.toLowerCase(),v=!l&&!a,y=!1;if(g){if(s){for(;m;){for(f=e;f=f[m];)if(a?f.nodeName.toLowerCase()===_:1===f.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[o?g.firstChild:g.lastChild],o&&v){for(f=g,c=f[I]||(f[I]={}),u=c[f.uniqueID]||(c[f.uniqueID]={}),h=u[t]||[],p=h[0]===B&&h[1],y=p&&h[2],f=p&&g.childNodes[p];f=++p&&f&&f[m]||(y=p=0)||d.pop();)if(1===f.nodeType&&++y&&f===e){u[t]=[B,p,y];break}}else if(v&&(f=e,c=f[I]||(f[I]={}),u=c[f.uniqueID]||(c[f.uniqueID]={}),h=u[t]||[],p=h[0]===B&&h[1],y=p),y===!1)for(;(f=++p&&f&&f[m]||(y=p=0)||d.pop())&&((a?f.nodeName.toLowerCase()!==_:1!==f.nodeType)||!++y||(v&&(c=f[I]||(f[I]={}),u=c[f.uniqueID]||(c[f.uniqueID]={}),u[t]=[B,y]),f!==e)););return y-=r,y===n||y%n===0&&y/n>=0}}},PSEUDO:function(t,i){var r,s=T.pseudos[t]||T.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[I]?s(i):s.length>1?(r=[t,t,"",i],T.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,r=s(t,i),o=r.length;o--;)n=tt(t,r[o]),t[n]=!(e[n]=r[o])}):function(t){return s(t,0,r)}):s}},pseudos:{not:n(function(t){var e=[],i=[],r=C(t.replace(at,"$1"));return r[I]?n(function(t,e,i,n){for(var s,o=r(t,null,n,[]),a=t.length;a--;)(s=o[a])&&(t[a]=!(e[a]=s))}):function(t,n,s){return e[0]=t,r(e,null,s,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(yt,xt),function(e){return(e.textContent||e.innerText||P(e)).indexOf(t)>-1}}),lang:n(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,xt).toLowerCase(),function(e){var i;do if(i=E?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===F},focus:function(t){return t===N.activeElement&&(!N.hasFocus||N.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:h(!1),disabled:h(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!T.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:u(function(){return[0]}),last:u(function(t,e){return[e-1]}),eq:u(function(t,e,i){return[i<0?i+e:i]}),even:u(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:u(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:u(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:u(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}},T.pseudos.nth=T.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})T.pseudos[w]=l(w);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,S=e.tokenize=function(t,i){var n,r,s,o,a,l,h,u=V[t+" "];if(u)return i?0:u.slice(0);for(a=t,l=[],h=T.preFilter;a;){n&&!(r=lt.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=ht.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(at," ")}),a=a.slice(n.length));for(o in T.filter)!(r=pt[o].exec(a))||h[o]&&!(r=h[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return i?a.length:a?e.error(t):V(t,l).slice(0)},C=e.compile=function(t,e){var i,n=[],r=[],s=H[t+" "];if(!s){for(e||(e=S(t)),i=e.length;i--;)s=y(e[i]),s[I]?n.push(s):r.push(s);s=H(t,x(r,n)),s.selector=t}return s},O=e.select=function(t,e,i,n){var r,s,o,a,l,h="function"==typeof t&&t,u=!n&&S(t=h.selector||t);if(i=i||[],1===u.length){if(s=u[0]=u[0].slice(0),s.length>2&&"ID"===(o=s[0]).type&&9===e.nodeType&&E&&T.relative[s[1].type]){if(e=(T.find.ID(o.matches[0].replace(yt,xt),e)||[])[0],!e)return i;h&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(r=pt.needsContext.test(t)?0:s.length;r--&&(o=s[r],!T.relative[a=o.type]);)if((l=T.find[a])&&(n=l(o.matches[0].replace(yt,xt),vt.test(s[0].type)&&c(e.parentNode)||e))){if(s.splice(r,1),t=n.length&&p(s),!t)return K.apply(i,n),i;break}}return(h||C(t,u))(n,e,!E,i,!e||vt.test(t)&&c(e.parentNode)||e),i},b.sortStable=I.split("").sort(U).join("")===I,b.detectDuplicates=!!D,M(),b.sortDetached=r(function(t){return 1&t.compareDocumentPosition(N.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,i){var n;if(!i)return t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);et.find=ot,et.expr=ot.selectors,et.expr[":"]=et.expr.pseudos,et.uniqueSort=et.unique=ot.uniqueSort,et.text=ot.getText,et.isXMLDoc=ot.isXML,et.contains=ot.contains,et.escapeSelector=ot.escape;var at=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&et(t).is(i))break;n.push(t)}return n},lt=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},ht=et.expr.match.needsContext,ut=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,ct=/^.[^:#\[\.,]*$/;et.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?et.find.matchesSelector(n,t)?[n]:[]:et.find.matches(t,et.grep(e,function(t){return 1===t.nodeType}))},et.fn.extend({find:function(t){var e,i,n=this.length,r=this;if("string"!=typeof t)return this.pushStack(et(t).filter(function(){for(e=0;e<n;e++)if(et.contains(r[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)et.find(t,r[e],i);return n>1?et.uniqueSort(i):i},filter:function(t){return this.pushStack(r(this,t||[],!1))},not:function(t){return this.pushStack(r(this,t||[],!0))},is:function(t){return!!r(this,"string"==typeof t&&ht.test(t)?et(t):t||[],!1).length}});var ft,pt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,dt=et.fn.init=function(t,e,i){var n,r;if(!t)return this;if(i=i||ft,"string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:pt.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof et?e[0]:e,et.merge(this,et.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:B,!0)),ut.test(n[1])&&et.isPlainObject(e))for(n in e)et.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return r=B.getElementById(n[2]),r&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):et.isFunction(t)?void 0!==i.ready?i.ready(t):t(et):et.makeArray(t,this)};dt.prototype=et.fn,ft=et(B);var mt=/^(?:parents|prev(?:Until|All))/,gt={children:!0,contents:!0,next:!0,prev:!0};et.fn.extend({has:function(t){var e=et(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(et.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,r=this.length,s=[],o="string"!=typeof t&&et(t);if(!ht.test(t))for(;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&et.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?et.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?U.call(et(t),this[0]):U.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(et.uniqueSort(et.merge(this.get(),et(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),et.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return at(t,"parentNode")},parentsUntil:function(t,e,i){return at(t,"parentNode",i)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return at(t,"nextSibling")},prevAll:function(t){return at(t,"previousSibling")},nextUntil:function(t,e,i){return at(t,"nextSibling",i)},prevUntil:function(t,e,i){return at(t,"previousSibling",i)},siblings:function(t){return lt((t.parentNode||{}).firstChild,t)},children:function(t){return lt(t.firstChild)},contents:function(t){return t.contentDocument||et.merge([],t.childNodes)}},function(t,e){et.fn[t]=function(i,n){var r=et.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=et.filter(n,r)),this.length>1&&(gt[t]||et.uniqueSort(r),mt.test(t)&&r.reverse()),this.pushStack(r)}});var _t=/[^\x20\t\r\n\f]+/g;et.Callbacks=function(t){t="string"==typeof t?o(t):et.extend({},t);var e,i,n,r,s=[],a=[],l=-1,h=function(){for(r=t.once,n=e=!0;a.length;l=-1)for(i=a.shift();++l<s.length;)s[l].apply(i[0],i[1])===!1&&t.stopOnFalse&&(l=s.length,i=!1);t.memory||(i=!1),e=!1,r&&(s=i?[]:"")},u={add:function(){return s&&(i&&!e&&(l=s.length-1,a.push(i)),function e(i){et.each(i,function(i,n){et.isFunction(n)?t.unique&&u.has(n)||s.push(n):n&&n.length&&"string"!==et.type(n)&&e(n)})}(arguments),i&&!e&&h()),this},remove:function(){return et.each(arguments,function(t,e){for(var i;(i=et.inArray(e,s,i))>-1;)s.splice(i,1),i<=l&&l--}),this},has:function(t){return t?et.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=a=[],i||e||(s=i=""),this},locked:function(){return!!r},fireWith:function(t,i){return r||(i=i||[],i=[t,i.slice?i.slice():i],a.push(i),e||h()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},et.extend({Deferred:function(e){var i=[["notify","progress",et.Callbacks("memory"),et.Callbacks("memory"),2],["resolve","done",et.Callbacks("once memory"),et.Callbacks("once memory"),0,"resolved"],["reject","fail",et.Callbacks("once memory"),et.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return et.Deferred(function(e){et.each(i,function(i,n){var r=et.isFunction(t[n[4]])&&t[n[4]];s[n[1]](function(){var t=r&&r.apply(this,arguments);t&&et.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(e,n,r){function s(e,i,n,r){return function(){var h=this,u=arguments,c=function(){var t,c;if(!(e<o)){if(t=n.apply(h,u),t===i.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,et.isFunction(c)?r?c.call(t,s(o,i,a,r),s(o,i,l,r)):(o++,c.call(t,s(o,i,a,r),s(o,i,l,r),s(o,i,a,i.notifyWith))):(n!==a&&(h=void 0,u=[t]),(r||i.resolveWith)(h,u))}},f=r?c:function(){try{c()}catch(t){et.Deferred.exceptionHook&&et.Deferred.exceptionHook(t,f.stackTrace),e+1>=o&&(n!==l&&(h=void 0,u=[t]),i.rejectWith(h,u))}};e?f():(et.Deferred.getStackHook&&(f.stackTrace=et.Deferred.getStackHook()),t.setTimeout(f))}}var o=0;return et.Deferred(function(t){i[0][3].add(s(0,t,et.isFunction(r)?r:a,t.notifyWith)),i[1][3].add(s(0,t,et.isFunction(e)?e:a)),i[2][3].add(s(0,t,et.isFunction(n)?n:l))}).promise()},promise:function(t){return null!=t?et.extend(t,r):r}},s={};return et.each(i,function(t,e){var o=e[2],a=e[5];r[e[1]]=o.add,a&&o.add(function(){n=a},i[3-t][2].disable,i[0][2].lock),o.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),r=W.call(arguments),s=et.Deferred(),o=function(t){return function(i){n[t]=this,r[t]=arguments.length>1?W.call(arguments):i,--e||s.resolveWith(n,r)}};if(e<=1&&(h(t,s.done(o(i)).resolve,s.reject),"pending"===s.state()||et.isFunction(r[i]&&r[i].then)))return s.then();for(;i--;)h(r[i],o(i),s.reject);return s.promise()}});var vt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;et.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&vt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},et.readyException=function(e){t.setTimeout(function(){throw e})};var yt=et.Deferred();et.fn.ready=function(t){return yt.then(t).catch(function(t){et.readyException(t)}),this},et.extend({isReady:!1,readyWait:1,holdReady:function(t){t?et.readyWait++:et.ready(!0)},ready:function(t){(t===!0?--et.readyWait:et.isReady)||(et.isReady=!0,t!==!0&&--et.readyWait>0||yt.resolveWith(B,[et]))}}),et.ready.then=yt.then,"complete"===B.readyState||"loading"!==B.readyState&&!B.documentElement.doScroll?t.setTimeout(et.ready):(B.addEventListener("DOMContentLoaded",u),t.addEventListener("load",u));var xt=function(t,e,i,n,r,s,o){var a=0,l=t.length,h=null==i;if("object"===et.type(i)){r=!0;for(a in i)xt(t,e,a,i[a],!0,s,o)}else if(void 0!==n&&(r=!0,et.isFunction(n)||(o=!0),h&&(o?(e.call(t,n),e=null):(h=e,e=function(t,e,i){return h.call(et(t),i)})),e))for(;a<l;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return r?t:h?e.call(t):l?e(t[0],i):s},wt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};c.uid=1,c.prototype={cache:function(t){var e=t[this.expando];return e||(e={},wt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,r=this.cache(t);if("string"==typeof e)r[et.camelCase(e)]=i;else for(n in e)r[et.camelCase(n)]=e[n];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][et.camelCase(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){et.isArray(e)?e=e.map(et.camelCase):(e=et.camelCase(e),e=e in n?[e]:e.match(_t)||[]),i=e.length;for(;i--;)delete n[e[i]]}(void 0===e||et.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!et.isEmptyObject(e)}};var bt=new c,Tt=new c,Pt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,kt=/[A-Z]/g;et.extend({hasData:function(t){return Tt.hasData(t)||bt.hasData(t)},data:function(t,e,i){return Tt.access(t,e,i)},removeData:function(t,e){Tt.remove(t,e)},_data:function(t,e,i){return bt.access(t,e,i)},_removeData:function(t,e){bt.remove(t,e)}}),et.fn.extend({data:function(t,e){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(r=Tt.get(s),1===s.nodeType&&!bt.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&(n=o[i].name,0===n.indexOf("data-")&&(n=et.camelCase(n.slice(5)),p(s,n,r[n])));bt.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Tt.set(this,t)}):xt(this,function(e){var i;if(s&&void 0===e){if(i=Tt.get(s,t),void 0!==i)return i;if(i=p(s,t),void 0!==i)return i}else this.each(function(){Tt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Tt.remove(this,t)})}}),et.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=bt.get(t,e),i&&(!n||et.isArray(i)?n=bt.access(t,e,et.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=et.queue(t,e),n=i.length,r=i.shift(),s=et._queueHooks(t,e),o=function(){et.dequeue(t,e)};"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete s.stop,r.call(t,o,s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return bt.get(t,i)||bt.access(t,i,{empty:et.Callbacks("once memory").add(function(){bt.remove(t,[e+"queue",i])})})}}),et.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?et.queue(this[0],t):void 0===e?this:this.each(function(){var i=et.queue(this,t,e);et._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&et.dequeue(this,t)})},dequeue:function(t){return this.each(function(){et.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=et.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)i=bt.get(s[o],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(e)}});var St=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ct=new RegExp("^(?:([+-])=|)("+St+")([a-z%]*)$","i"),Ot=["Top","Right","Bottom","Left"],At=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&et.contains(t.ownerDocument,t)&&"none"===et.css(t,"display")},Rt=function(t,e,i,n){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];r=i.apply(t,n||[]);for(s in e)t.style[s]=o[s];return r},Dt={};et.fn.extend({show:function(){return g(this,!0)},hide:function(){return g(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){At(this)?et(this).show():et(this).hide()})}});var Mt=/^(?:checkbox|radio)$/i,Nt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ft=/^$|\/(?:java|ecma)script/i,Et={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Et.optgroup=Et.option,Et.tbody=Et.tfoot=Et.colgroup=Et.caption=Et.thead,Et.th=Et.td;var Lt=/<|&#?\w+;/;!function(){var t=B.createDocumentFragment(),e=t.appendChild(B.createElement("div")),i=B.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),J.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",J.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var jt=B.documentElement,Xt=/^key/,Yt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,It=/^([^.]*)(?:\.(.+)|)/;et.event={global:{},add:function(t,e,i,n,r){var s,o,a,l,h,u,c,f,p,d,m,g=bt.get(t);if(g)for(i.handler&&(s=i,i=s.handler,r=s.selector),r&&et.find.matchesSelector(jt,r),i.guid||(i.guid=et.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(e){return"undefined"!=typeof et&&et.event.triggered!==e.type?et.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(_t)||[""],h=e.length;h--;)a=It.exec(e[h])||[],p=m=a[1],d=(a[2]||"").split(".").sort(),p&&(c=et.event.special[p]||{},p=(r?c.delegateType:c.bindType)||p,c=et.event.special[p]||{},u=et.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&et.expr.match.needsContext.test(r),namespace:d.join(".")},s),(f=l[p])||(f=l[p]=[],f.delegateCount=0,c.setup&&c.setup.call(t,n,d,o)!==!1||t.addEventListener&&t.addEventListener(p,o)),c.add&&(c.add.call(t,u),u.handler.guid||(u.handler.guid=i.guid)),r?f.splice(f.delegateCount++,0,u):f.push(u),et.event.global[p]=!0)},remove:function(t,e,i,n,r){var s,o,a,l,h,u,c,f,p,d,m,g=bt.hasData(t)&&bt.get(t);if(g&&(l=g.events)){for(e=(e||"").match(_t)||[""],h=e.length;h--;)if(a=It.exec(e[h])||[],p=m=a[1],d=(a[2]||"").split(".").sort(),p){for(c=et.event.special[p]||{},p=(n?c.delegateType:c.bindType)||p,f=l[p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=f.length;s--;)u=f[s],!r&&m!==u.origType||i&&i.guid!==u.guid||a&&!a.test(u.namespace)||n&&n!==u.selector&&("**"!==n||!u.selector)||(f.splice(s,1),u.selector&&f.delegateCount--,c.remove&&c.remove.call(t,u));o&&!f.length&&(c.teardown&&c.teardown.call(t,d,g.handle)!==!1||et.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)et.event.remove(t,p+e[h],i,n,!0);et.isEmptyObject(l)&&bt.remove(t,"handle events")}},dispatch:function(t){var e,i,n,r,s,o,a=et.event.fix(t),l=new Array(arguments.length),h=(bt.get(this,"events")||{})[a.type]||[],u=et.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||u.preDispatch.call(this,a)!==!1){for(o=et.event.handlers.call(this,a,h),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,n=((et.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l),void 0!==n&&(a.result=n)===!1&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,r,s,o,a=[],l=e.delegateCount,h=t.target;if(l&&h.nodeType&&!("click"===t.type&&t.button>=1))for(;h!==this;h=h.parentNode||this)if(1===h.nodeType&&("click"!==t.type||h.disabled!==!0)){for(s=[],o={},i=0;i<l;i++)n=e[i],r=n.selector+" ",void 0===o[r]&&(o[r]=n.needsContext?et(r,this).index(h)>-1:et.find(r,this,null,[h]).length),o[r]&&s.push(n);s.length&&a.push({elem:h,handlers:s})}return h=this,l<e.length&&a.push({elem:h,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(et.Event.prototype,t,{enumerable:!0,configurable:!0,get:et.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[et.expando]?t:new et.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==b()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===b()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&et.nodeName(this,"input"))return this.click(),!1},_default:function(t){return et.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},et.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},et.Event=function(t,e){return this instanceof et.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?x:w,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&et.extend(this,e),this.timeStamp=t&&t.timeStamp||et.now(),void(this[et.expando]=!0)):new et.Event(t,e)},et.Event.prototype={constructor:et.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=x,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=x,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=x,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},et.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Xt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&Yt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},et.event.addProp),et.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){et.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,r=t.relatedTarget,s=t.handleObj;return r&&(r===n||et.contains(n,r))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}}),et.fn.extend({on:function(t,e,i,n){return T(this,t,e,i,n)},one:function(t,e,i,n){return T(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,et(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(i=e,e=void 0),i===!1&&(i=w),this.each(function(){et.event.remove(this,t,i,e)})}});var zt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Bt=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Wt=/^true\/(.*)/,Vt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;et.extend({htmlPrefilter:function(t){return t.replace(zt,"<$1></$2>")},clone:function(t,e,i){var n,r,s,o,a=t.cloneNode(!0),l=et.contains(t.ownerDocument,t);if(!(J.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||et.isXMLDoc(t)))for(o=_(a),s=_(t),n=0,r=s.length;n<r;n++)O(s[n],o[n]);if(e)if(i)for(s=s||_(t),o=o||_(a),n=0,r=s.length;n<r;n++)C(s[n],o[n]);else C(t,a);return o=_(a,"script"),o.length>0&&v(o,!l&&_(t,"script")),a},cleanData:function(t){for(var e,i,n,r=et.event.special,s=0;void 0!==(i=t[s]);s++)if(wt(i)){if(e=i[bt.expando]){if(e.events)for(n in e.events)r[n]?et.event.remove(i,n):et.removeEvent(i,n,e.handle);i[bt.expando]=void 0}i[Tt.expando]&&(i[Tt.expando]=void 0)}}}),et.fn.extend({detach:function(t){return R(this,t,!0)},remove:function(t){return R(this,t)},text:function(t){return xt(this,function(t){return void 0===t?et.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=P(this,t);e.appendChild(t)}})},prepend:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=P(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(et.cleanData(_(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return et.clone(this,t,e)})},html:function(t){return xt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Bt.test(t)&&!Et[(Nt.exec(t)||["",""])[1].toLowerCase()]){t=et.htmlPrefilter(t);try{for(;i<n;i++)e=this[i]||{},1===e.nodeType&&(et.cleanData(_(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return A(this,arguments,function(e){var i=this.parentNode;et.inArray(this,t)<0&&(et.cleanData(_(this)),i&&i.replaceChild(e,this))},t)}}),et.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",
insertAfter:"after",replaceAll:"replaceWith"},function(t,e){et.fn[t]=function(t){for(var i,n=[],r=et(t),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),et(r[o])[e](i),H.apply(n,i.get());return this.pushStack(n)}});var Ht=/^margin/,Ut=new RegExp("^("+St+")(?!px)[a-z%]+$","i"),$t=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",jt.appendChild(o);var e=t.getComputedStyle(a);i="1%"!==e.top,s="2px"===e.marginLeft,n="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,jt.removeChild(o),a=null}}var i,n,r,s,o=B.createElement("div"),a=B.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",J.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",o.appendChild(a),et.extend(J,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return e(),n},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),s}}))}();var Gt=/^(none|table(?!-c[ea]).+)/,Zt={position:"absolute",visibility:"hidden",display:"block"},Qt={letterSpacing:"0",fontWeight:"400"},Kt=["Webkit","Moz","ms"],Jt=B.createElement("div").style;et.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=D(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=et.camelCase(e),l=t.style;return e=et.cssProps[a]||(et.cssProps[a]=N(a)||a),o=et.cssHooks[e]||et.cssHooks[a],void 0===i?o&&"get"in o&&void 0!==(r=o.get(t,!1,n))?r:l[e]:(s=typeof i,"string"===s&&(r=Ct.exec(i))&&r[1]&&(i=d(t,e,r),s="number"),void(null!=i&&i===i&&("number"===s&&(i+=r&&r[3]||(et.cssNumber[a]?"":"px")),J.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l[e]=i))))}},css:function(t,e,i,n){var r,s,o,a=et.camelCase(e);return e=et.cssProps[a]||(et.cssProps[a]=N(a)||a),o=et.cssHooks[e]||et.cssHooks[a],o&&"get"in o&&(r=o.get(t,!0,i)),void 0===r&&(r=D(t,e,n)),"normal"===r&&e in Qt&&(r=Qt[e]),""===i||i?(s=parseFloat(r),i===!0||isFinite(s)?s||0:r):r}}),et.each(["height","width"],function(t,e){et.cssHooks[e]={get:function(t,i,n){if(i)return!Gt.test(et.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?L(t,e,n):Rt(t,Zt,function(){return L(t,e,n)})},set:function(t,i,n){var r,s=n&&$t(t),o=n&&E(t,e,n,"border-box"===et.css(t,"boxSizing",!1,s),s);return o&&(r=Ct.exec(i))&&"px"!==(r[3]||"px")&&(t.style[e]=i,i=et.css(t,e)),F(t,i,o)}}}),et.cssHooks.marginLeft=M(J.reliableMarginLeft,function(t,e){if(e)return(parseFloat(D(t,"marginLeft"))||t.getBoundingClientRect().left-Rt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),et.each({margin:"",padding:"",border:"Width"},function(t,e){et.cssHooks[t+e]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+Ot[n]+e]=s[n]||s[n-2]||s[0];return r}},Ht.test(t)||(et.cssHooks[t+e].set=F)}),et.fn.extend({css:function(t,e){return xt(this,function(t,e,i){var n,r,s={},o=0;if(et.isArray(e)){for(n=$t(t),r=e.length;o<r;o++)s[e[o]]=et.css(t,e[o],!1,n);return s}return void 0!==i?et.style(t,e,i):et.css(t,e)},t,e,arguments.length>1)}}),et.fn.delay=function(e,i){return e=et.fx?et.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,n){var r=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(r)}})},function(){var t=B.createElement("input"),e=B.createElement("select"),i=e.appendChild(B.createElement("option"));t.type="checkbox",J.checkOn=""!==t.value,J.optSelected=i.selected,t=B.createElement("input"),t.value="t",t.type="radio",J.radioValue="t"===t.value}();var te,ee=et.expr.attrHandle;et.fn.extend({attr:function(t,e){return xt(this,et.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){et.removeAttr(this,t)})}}),et.extend({attr:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof t.getAttribute?et.prop(t,e,i):(1===s&&et.isXMLDoc(t)||(r=et.attrHooks[e.toLowerCase()]||(et.expr.match.bool.test(e)?te:void 0)),void 0!==i?null===i?void et.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:(n=et.find.attr(t,e),null==n?void 0:n))},attrHooks:{type:{set:function(t,e){if(!J.radioValue&&"radio"===e&&et.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,r=e&&e.match(_t);if(r&&1===t.nodeType)for(;i=r[n++];)t.removeAttribute(i)}}),te={set:function(t,e,i){return e===!1?et.removeAttr(t,i):t.setAttribute(i,i),i}},et.each(et.expr.match.bool.source.match(/\w+/g),function(t,e){var i=ee[e]||et.find.attr;ee[e]=function(t,e,n){var r,s,o=e.toLowerCase();return n||(s=ee[o],ee[o]=r,r=null!=i(t,e,n)?o:null,ee[o]=s),r}});var ie=/^(?:input|select|textarea|button)$/i,ne=/^(?:a|area)$/i;et.fn.extend({prop:function(t,e){return xt(this,et.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[et.propFix[t]||t]})}}),et.extend({prop:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&et.isXMLDoc(t)||(e=et.propFix[e]||e,r=et.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=et.find.attr(t,"tabindex");return e?parseInt(e,10):ie.test(t.nodeName)||ne.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),J.optSelected||(et.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),et.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){et.propFix[this.toLowerCase()]=this}),et.fn.extend({addClass:function(t){var e,i,n,r,s,o,a,l=0;if(et.isFunction(t))return this.each(function(e){et(this).addClass(t.call(this,e,X(this)))});if("string"==typeof t&&t)for(e=t.match(_t)||[];i=this[l++];)if(r=X(i),n=1===i.nodeType&&" "+j(r)+" "){for(o=0;s=e[o++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");a=j(n),r!==a&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,r,s,o,a,l=0;if(et.isFunction(t))return this.each(function(e){et(this).removeClass(t.call(this,e,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(_t)||[];i=this[l++];)if(r=X(i),n=1===i.nodeType&&" "+j(r)+" "){for(o=0;s=e[o++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");a=j(n),r!==a&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):et.isFunction(t)?this.each(function(i){et(this).toggleClass(t.call(this,i,X(this),e),e)}):this.each(function(){var e,n,r,s;if("string"===i)for(n=0,r=et(this),s=t.match(_t)||[];e=s[n++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==i||(e=X(this),e&&bt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":bt.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+j(X(i))+" ").indexOf(e)>-1)return!0;return!1}});var re=/\r/g;et.fn.extend({val:function(t){var e,i,n,r=this[0];return arguments.length?(n=et.isFunction(t),this.each(function(i){var r;1===this.nodeType&&(r=n?t.call(this,i,et(this).val()):t,null==r?r="":"number"==typeof r?r+="":et.isArray(r)&&(r=et.map(r,function(t){return null==t?"":t+""})),e=et.valHooks[this.type]||et.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=et.valHooks[r.type]||et.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:(i=r.value,"string"==typeof i?i.replace(re,""):null==i?"":i)):void 0}}),et.extend({valHooks:{option:{get:function(t){var e=et.find.attr(t,"value");return null!=e?e:j(et.text(t))}},select:{get:function(t){var e,i,n,r=t.options,s=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?s+1:r.length;for(n=s<0?l:o?s:0;n<l;n++)if(i=r[n],(i.selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!et.nodeName(i.parentNode,"optgroup"))){if(e=et(i).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var i,n,r=t.options,s=et.makeArray(e),o=r.length;o--;)n=r[o],(n.selected=et.inArray(et.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),et.each(["radio","checkbox"],function(){et.valHooks[this]={set:function(t,e){if(et.isArray(e))return t.checked=et.inArray(et(t).val(),e)>-1}},J.checkOn||(et.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var se=/^(?:focusinfocus|focusoutblur)$/;et.extend(et.event,{trigger:function(e,i,n,r){var s,o,a,l,h,u,c,f=[n||B],p=Z.call(e,"type")?e.type:e,d=Z.call(e,"namespace")?e.namespace.split("."):[];if(o=a=n=n||B,3!==n.nodeType&&8!==n.nodeType&&!se.test(p+et.event.triggered)&&(p.indexOf(".")>-1&&(d=p.split("."),p=d.shift(),d.sort()),h=p.indexOf(":")<0&&"on"+p,e=e[et.expando]?e:new et.Event(p,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:et.makeArray(i,[e]),c=et.event.special[p]||{},r||!c.trigger||c.trigger.apply(n,i)!==!1)){if(!r&&!c.noBubble&&!et.isWindow(n)){for(l=c.delegateType||p,se.test(l+p)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(n.ownerDocument||B)&&f.push(a.defaultView||a.parentWindow||t)}for(s=0;(o=f[s++])&&!e.isPropagationStopped();)e.type=s>1?l:c.bindType||p,u=(bt.get(o,"events")||{})[e.type]&&bt.get(o,"handle"),u&&u.apply(o,i),u=h&&o[h],u&&u.apply&&wt(o)&&(e.result=u.apply(o,i),e.result===!1&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&c._default.apply(f.pop(),i)!==!1||!wt(n)||h&&et.isFunction(n[p])&&!et.isWindow(n)&&(a=n[h],a&&(n[h]=null),et.event.triggered=p,n[p](),et.event.triggered=void 0,a&&(n[h]=a)),e.result}},simulate:function(t,e,i){var n=et.extend(new et.Event,i,{type:t,isSimulated:!0});et.event.trigger(n,null,e)}}),et.fn.extend({trigger:function(t,e){return this.each(function(){et.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return et.event.trigger(t,e,i,!0)}}),et.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){et.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),et.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),J.focusin="onfocusin"in t,J.focusin||et.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){et.event.simulate(e,t.target,et.event.fix(t))};et.event.special[e]={setup:function(){var n=this.ownerDocument||this,r=bt.access(n,e);r||n.addEventListener(t,i,!0),bt.access(n,e,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=bt.access(n,e)-1;r?bt.access(n,e,r):(n.removeEventListener(t,i,!0),bt.remove(n,e))}}});var oe=/\[\]$/,ae=/\r?\n/g,le=/^(?:submit|button|image|reset|file)$/i,he=/^(?:input|select|textarea|keygen)/i;et.param=function(t,e){var i,n=[],r=function(t,e){var i=et.isFunction(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(et.isArray(t)||t.jquery&&!et.isPlainObject(t))et.each(t,function(){r(this.name,this.value)});else for(i in t)Y(i,t[i],e,r);return n.join("&")},et.fn.extend({serialize:function(){return et.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=et.prop(this,"elements");return t?et.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!et(this).is(":disabled")&&he.test(this.nodeName)&&!le.test(t)&&(this.checked||!Mt.test(t))}).map(function(t,e){var i=et(this).val();return null==i?null:et.isArray(i)?et.map(i,function(t){return{name:e.name,value:t.replace(ae,"\r\n")}}):{name:e.name,value:i.replace(ae,"\r\n")}}).get()}}),et.fn.extend({wrapAll:function(t){var e;return this[0]&&(et.isFunction(t)&&(t=t.call(this[0])),e=et(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return et.isFunction(t)?this.each(function(e){et(this).wrapInner(t.call(this,e))}):this.each(function(){var e=et(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=et.isFunction(t);return this.each(function(i){et(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){et(this).replaceWith(this.childNodes)}),this}}),et.expr.pseudos.hidden=function(t){return!et.expr.pseudos.visible(t)},et.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},J.createHTMLDocument=function(){var t=B.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),et.parseHTML=function(t,e,i){if("string"!=typeof t)return[];"boolean"==typeof e&&(i=e,e=!1);var n,r,s;return e||(J.createHTMLDocument?(e=B.implementation.createHTMLDocument(""),n=e.createElement("base"),n.href=B.location.href,e.head.appendChild(n)):e=B),r=ut.exec(t),s=!i&&[],r?[e.createElement(r[1])]:(r=y([t],e,s),s&&s.length&&et(s).remove(),et.merge([],r.childNodes))},et.offset={setOffset:function(t,e,i){var n,r,s,o,a,l,h,u=et.css(t,"position"),c=et(t),f={};"static"===u&&(t.style.position="relative"),a=c.offset(),s=et.css(t,"top"),l=et.css(t,"left"),h=("absolute"===u||"fixed"===u)&&(s+l).indexOf("auto")>-1,h?(n=c.position(),o=n.top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),et.isFunction(e)&&(e=e.call(t,i,et.extend({},a))),null!=e.top&&(f.top=e.top-a.top+o),null!=e.left&&(f.left=e.left-a.left+r),"using"in e?e.using.call(t,f):c.css(f)}},et.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){et.offset.setOffset(this,t,e)});var e,i,n,r,s=this[0];return s?s.getClientRects().length?(n=s.getBoundingClientRect(),n.width||n.height?(r=s.ownerDocument,i=I(r),e=r.documentElement,{top:n.top+i.pageYOffset-e.clientTop,left:n.left+i.pageXOffset-e.clientLeft}):n):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===et.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),et.nodeName(t[0],"html")||(n=t.offset()),n={top:n.top+et.css(t[0],"borderTopWidth",!0),left:n.left+et.css(t[0],"borderLeftWidth",!0)}),{top:e.top-n.top-et.css(i,"marginTop",!0),left:e.left-n.left-et.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===et.css(t,"position");)t=t.offsetParent;return t||jt})}}),et.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;et.fn[t]=function(n){return xt(this,function(t,n,r){var s=I(t);return void 0===r?s?s[e]:t[n]:void(s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):t[n]=r)},t,n,arguments.length)}}),et.each(["top","left"],function(t,e){et.cssHooks[e]=M(J.pixelPosition,function(t,i){if(i)return i=D(t,e),Ut.test(i)?et(t).position()[e]+"px":i})}),et.each({Height:"height",Width:"width"},function(t,e){et.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){et.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(r===!0||s===!0?"margin":"border");return xt(this,function(e,i,r){var s;return et.isWindow(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?et.css(e,i,a):et.style(e,i,r,a)},e,o?r:void 0,o)}})}),"function"==typeof define&&define.amd&&define("jquery",[],function(){return et});var ue=t.jQuery,ce=t.$;return et.noConflict=function(e){return t.$===et&&(t.$=ce),e&&t.jQuery===et&&(t.jQuery=ue),et},e||(t.jQuery=t.$=et),et})},{}],14:[function(t,e,i){!function(t){var n=!1;if("function"==typeof define&&define.amd&&(define(t),n=!0),"object"==typeof i&&(e.exports=t(),n=!0),!n){var r=window.Cookies,s=window.Cookies=t();s.noConflict=function(){return window.Cookies=r,s}}}(function(){function t(){for(var t=0,e={};t<arguments.length;t++){var i=arguments[t];for(var n in i)e[n]=i[n]}return e}function e(i){function n(e,r,s){var o;if("undefined"!=typeof document){if(arguments.length>1){if(s=t({path:"/"},n.defaults,s),"number"==typeof s.expires){var a=new Date;a.setMilliseconds(a.getMilliseconds()+864e5*s.expires),s.expires=a}try{o=JSON.stringify(r),/^[\{\[]/.test(o)&&(r=o)}catch(t){}return r=i.write?i.write(r,e):encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),e=encodeURIComponent(String(e)),e=e.replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent),e=e.replace(/[\(\)]/g,escape),document.cookie=[e,"=",r,s.expires?"; expires="+s.expires.toUTCString():"",s.path?"; path="+s.path:"",s.domain?"; domain="+s.domain:"",s.secure?"; secure":""].join("")}e||(o={});for(var l=document.cookie?document.cookie.split("; "):[],h=/(%[0-9A-Z]{2})+/g,u=0;u<l.length;u++){var c=l[u].split("="),f=c.slice(1).join("=");'"'===f.charAt(0)&&(f=f.slice(1,-1));try{var p=c[0].replace(h,decodeURIComponent);if(f=i.read?i.read(f,p):i(f,p)||f.replace(h,decodeURIComponent),this.json)try{f=JSON.parse(f)}catch(t){}if(e===p){o=f;break}e||(o[p]=f)}catch(t){}}return o}}return n.set=n,n.get=function(t){return n.call(n,t)},n.getJSON=function(){return n.apply({json:!0},[].slice.call(arguments))},n.defaults={},n.remove=function(e,i){n(e,"",t(i,{expires:-1}))},n.withConverter=e,n}return e(function(){})})},{}],15:[function(t,e,i){!function(t,e,i){"use strict";function n(t,e){this.element=t,this.layers=t.getElementsByClassName("layer");var i={calibrateX:this.data(this.element,"calibrate-x"),calibrateY:this.data(this.element,"calibrate-y"),invertX:this.data(this.element,"invert-x"),invertY:this.data(this.element,"invert-y"),limitX:this.data(this.element,"limit-x"),limitY:this.data(this.element,"limit-y"),scalarX:this.data(this.element,"scalar-x"),scalarY:this.data(this.element,"scalar-y"),frictionX:this.data(this.element,"friction-x"),frictionY:this.data(this.element,"friction-y"),originX:this.data(this.element,"origin-x"),originY:this.data(this.element,"origin-y")};for(var n in i)null===i[n]&&delete i[n];this.extend(this,o,e,i),this.calibrationTimer=null,this.calibrationFlag=!0,this.enabled=!1,this.depths=[],this.raf=null,this.bounds=null,this.ex=0,this.ey=0,this.ew=0,this.eh=0,this.ecx=0,this.ecy=0,this.erx=0,this.ery=0,this.cx=0,this.cy=0,this.ix=0,this.iy=0,this.mx=0,this.my=0,this.vx=0,this.vy=0,this.onMouseMove=this.onMouseMove.bind(this),this.onDeviceOrientation=this.onDeviceOrientation.bind(this),this.onOrientationTimer=this.onOrientationTimer.bind(this),this.onCalibrationTimer=this.onCalibrationTimer.bind(this),this.onAnimationFrame=this.onAnimationFrame.bind(this),this.onWindowResize=this.onWindowResize.bind(this),this.initialise()}var r="Parallax",s=30,o={relativeInput:!1,clipRelativeInput:!1,calibrationThreshold:100,calibrationDelay:500,supportDelay:500,calibrateX:!1,calibrateY:!0,invertX:!0,invertY:!0,limitX:!1,limitY:!1,scalarX:10,scalarY:10,frictionX:.1,frictionY:.1,originX:.5,originY:.5};n.prototype.extend=function(){if(arguments.length>1)for(var t=arguments[0],e=1,i=arguments.length;i>e;e++){var n=arguments[e];for(var r in n)t[r]=n[r]}},n.prototype.data=function(t,e){return this.deserialize(t.getAttribute("data-"+e))},n.prototype.deserialize=function(t){return"true"===t||"false"!==t&&("null"===t?null:!isNaN(parseFloat(t))&&isFinite(t)?parseFloat(t):t)},n.prototype.camelCase=function(t){return t.replace(/-+(.)?/g,function(t,e){return e?e.toUpperCase():""})},n.prototype.transformSupport=function(n){for(var r=e.createElement("div"),s=!1,o=null,a=!1,l=null,h=null,u=0,c=this.vendors.length;c>u;u++)if(null!==this.vendors[u]?(l=this.vendors[u][0]+"transform",h=this.vendors[u][1]+"Transform"):(l="transform",h="transform"),r.style[h]!==i){s=!0;break}switch(n){case"2D":a=s;break;case"3D":if(s){var f=e.body||e.createElement("body"),p=e.documentElement,d=p.style.overflow;e.body||(p.style.overflow="hidden",p.appendChild(f),f.style.overflow="hidden",f.style.background=""),f.appendChild(r),r.style[h]="translate3d(1px,1px,1px)",o=t.getComputedStyle(r).getPropertyValue(l),a=o!==i&&o.length>0&&"none"!==o,p.style.overflow=d,f.removeChild(r)}}return a},n.prototype.ww=null,n.prototype.wh=null,n.prototype.wcx=null,n.prototype.wcy=null,n.prototype.wrx=null,n.prototype.wry=null,n.prototype.portrait=null,n.prototype.desktop=!navigator.userAgent.match(/(iPhone|iPod|iPad|Android|BlackBerry|BB10|mobi|tablet|opera mini|nexus 7)/i),n.prototype.vendors=[null,["-webkit-","webkit"],["-moz-","Moz"],["-o-","O"],["-ms-","ms"]],n.prototype.motionSupport=!!t.DeviceMotionEvent,n.prototype.orientationSupport=!!t.DeviceOrientationEvent,n.prototype.orientationStatus=0,n.prototype.propertyCache={},n.prototype.initialise=function(){n.prototype.transform2DSupport===i&&(n.prototype.transform2DSupport=n.prototype.transformSupport("2D"),n.prototype.transform3DSupport=n.prototype.transformSupport("3D")),this.transform3DSupport&&this.accelerate(this.element);var e=t.getComputedStyle(this.element);"static"===e.getPropertyValue("position")&&(this.element.style.position="relative"),this.updateLayers(),this.updateDimensions(),this.enable(),this.queueCalibration(this.calibrationDelay)},n.prototype.updateLayers=function(){this.layers=this.element.getElementsByClassName("layer"),this.depths=[];for(var t=0,e=this.layers.length;e>t;t++){var i=this.layers[t];this.transform3DSupport&&this.accelerate(i),i.style.position=t?"absolute":"relative",i.style.display="block",i.style.left=0,i.style.top=0,this.depths.push(this.data(i,"depth")||0)}},n.prototype.updateDimensions=function(){this.ww=t.innerWidth,this.wh=t.innerHeight,this.wcx=this.ww*this.originX,this.wcy=this.wh*this.originY,this.wrx=Math.max(this.wcx,this.ww-this.wcx),this.wry=Math.max(this.wcy,this.wh-this.wcy)},n.prototype.updateBounds=function(){this.bounds=this.element.getBoundingClientRect(),this.ex=this.bounds.left,this.ey=this.bounds.top,this.ew=this.bounds.width,this.eh=this.bounds.height,this.ecx=this.ew*this.originX,this.ecy=this.eh*this.originY,this.erx=Math.max(this.ecx,this.ew-this.ecx),this.ery=Math.max(this.ecy,this.eh-this.ecy)},n.prototype.queueCalibration=function(t){clearTimeout(this.calibrationTimer),this.calibrationTimer=setTimeout(this.onCalibrationTimer,t)},n.prototype.enable=function(){this.enabled||(this.enabled=!0,this.orientationSupport?(this.portrait=null,t.addEventListener("deviceorientation",this.onDeviceOrientation),setTimeout(this.onOrientationTimer,this.supportDelay)):(this.cx=0,this.cy=0,this.portrait=!1,t.addEventListener("mousemove",this.onMouseMove)),t.addEventListener("resize",this.onWindowResize),this.raf=requestAnimationFrame(this.onAnimationFrame))},n.prototype.disable=function(){this.enabled&&(this.enabled=!1,this.orientationSupport?t.removeEventListener("deviceorientation",this.onDeviceOrientation):t.removeEventListener("mousemove",this.onMouseMove),t.removeEventListener("resize",this.onWindowResize),cancelAnimationFrame(this.raf))},n.prototype.calibrate=function(t,e){this.calibrateX=t===i?this.calibrateX:t,this.calibrateY=e===i?this.calibrateY:e},n.prototype.invert=function(t,e){this.invertX=t===i?this.invertX:t,this.invertY=e===i?this.invertY:e},n.prototype.friction=function(t,e){this.frictionX=t===i?this.frictionX:t,this.frictionY=e===i?this.frictionY:e},n.prototype.scalar=function(t,e){this.scalarX=t===i?this.scalarX:t,this.scalarY=e===i?this.scalarY:e},n.prototype.limit=function(t,e){this.limitX=t===i?this.limitX:t,this.limitY=e===i?this.limitY:e},n.prototype.origin=function(t,e){this.originX=t===i?this.originX:t,this.originY=e===i?this.originY:e},n.prototype.clamp=function(t,e,i){return t=Math.max(t,e),t=Math.min(t,i)},n.prototype.css=function(t,e,n){var r=this.propertyCache[e];if(!r)for(var s=0,o=this.vendors.length;o>s;s++)if(r=null!==this.vendors[s]?this.camelCase(this.vendors[s][1]+"-"+e):e,t.style[r]!==i){this.propertyCache[e]=r;break}t.style[r]=n},n.prototype.accelerate=function(t){this.css(t,"transform","translate3d(0,0,0)"),this.css(t,"transform-style","preserve-3d"),this.css(t,"backface-visibility","hidden")},n.prototype.setPosition=function(t,e,i){e+="px",i+="px",this.transform3DSupport?this.css(t,"transform","translate3d("+e+","+i+",0)"):this.transform2DSupport?this.css(t,"transform","translate("+e+","+i+")"):(t.style.left=e,t.style.top=i)},n.prototype.onOrientationTimer=function(){this.orientationSupport&&0===this.orientationStatus&&(this.disable(),this.orientationSupport=!1,this.enable())},n.prototype.onCalibrationTimer=function(){this.calibrationFlag=!0},n.prototype.onWindowResize=function(){this.updateDimensions()},n.prototype.onAnimationFrame=function(){this.updateBounds();var t=this.ix-this.cx,e=this.iy-this.cy;(Math.abs(t)>this.calibrationThreshold||Math.abs(e)>this.calibrationThreshold)&&this.queueCalibration(0),this.portrait?(this.mx=this.calibrateX?e:this.iy,this.my=this.calibrateY?t:this.ix):(this.mx=this.calibrateX?t:this.ix,this.my=this.calibrateY?e:this.iy),this.mx*=this.ew*(this.scalarX/100),this.my*=this.eh*(this.scalarY/100),isNaN(parseFloat(this.limitX))||(this.mx=this.clamp(this.mx,-this.limitX,this.limitX)),isNaN(parseFloat(this.limitY))||(this.my=this.clamp(this.my,-this.limitY,this.limitY)),this.vx+=(this.mx-this.vx)*this.frictionX,this.vy+=(this.my-this.vy)*this.frictionY;for(var i=0,n=this.layers.length;n>i;i++){var r=this.layers[i],s=this.depths[i],o=this.vx*s*(this.invertX?-1:1),a=this.vy*s*(this.invertY?-1:1);this.setPosition(r,o,a)}this.raf=requestAnimationFrame(this.onAnimationFrame)},n.prototype.onDeviceOrientation=function(t){if(!this.desktop&&null!==t.beta&&null!==t.gamma){this.orientationStatus=1;var e=(t.beta||0)/s,i=(t.gamma||0)/s,n=this.wh>this.ww;this.portrait!==n&&(this.portrait=n,this.calibrationFlag=!0),this.calibrationFlag&&(this.calibrationFlag=!1,this.cx=e,this.cy=i),this.ix=e,this.iy=i}},n.prototype.onMouseMove=function(t){var e=t.clientX,i=t.clientY;!this.orientationSupport&&this.relativeInput?(this.clipRelativeInput&&(e=Math.max(e,this.ex),e=Math.min(e,this.ex+this.ew),i=Math.max(i,this.ey),i=Math.min(i,this.ey+this.eh)),this.ix=(e-this.ex-this.ecx)/this.erx,this.iy=(i-this.ey-this.ecy)/this.ery):(this.ix=(e-this.wcx)/this.wrx,this.iy=(i-this.wcy)/this.wry)},t[r]=n}(window,document),function(){for(var t=0,e=["ms","moz","webkit","o"],i=0;i<e.length&&!window.requestAnimationFrame;++i)window.requestAnimationFrame=window[e[i]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[i]+"CancelAnimationFrame"]||window[e[i]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(e,i){var n=(new Date).getTime(),r=Math.max(0,16-(n-t)),s=window.setTimeout(function(){e(n+r)},r);return t=n+r,s}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(t){clearTimeout(t)})}()},{}],16:[function(t,e,i){"use strict";var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/isMobile.min.js");t("./libs/parallax.min.js");n(function(){function e(t){"radio"!==t.attr("type")&&(""!==t.val()?t.addClass("on"):t.removeClass("on"))}var i,s=t("./animHeader.js"),o=t("./animBtn.js"),a=t("./sliderMain.js"),l=n("body"),h={blue:["rgb(2, 187, 255)","rgb(138, 126, 224)"],green:["rgb(43, 240, 117)","rgb(2, 187, 255)"],yellow:["rgb(255, 228, 0)","rgb(43, 240, 117)"],orange:["rgb(255, 120, 0)","rgb(255, 228, 0)"],red:["rgb(255, 6, 0)","rgb(255, 120, 0)"],pink:["rgb(240, 43, 140)","rgb(255, 6, 0)"]};r.any?l.addClass("is-mobile"):l.addClass("is-desktop"),s(),o(l),n("form").length&&(n("form").on("input propertychange","input, textarea",function(){e(n(this))}).find("input, textarea").each(function(){e(n(this))}),n("#form-contact").on("submit",function(t){ga("send","event",{eventCategory:"Form",eventAction:"submit",eventLabel:window.location.host+"/contact-send"})})),n("#bloc-top").length&&a(l,n("#bloc-top"),h),n("#more-than-moocs").length&&(i=new Parallax(n("#more-than-moocs").get(0))),l.hasClass("page-template-contact")&&(i=new Parallax(n("#main").get(0)))}),n(window).on("load",function(){var e=n("body"),i=t("./initVideo.js"),r=t("./slider.js"),s=t("./animHoops.js"),o=t("./setPosCircle.js");n(".wrapper-sliders").length&&r(),n(".wrapper-video").length&&i(),e.hasClass("page-template-about")&&s(n("#main").find(".hoop"),300),e.hasClass("page-template-solutions")&&o(n("#solutions-header"))})},{"./animBtn.js":1,"./animHeader.js":2,"./animHoops.js":3,"./initVideo.js":5,"./libs/isMobile.min.js":12,"./libs/jquery/dist/jquery.slim.min.js":13,"./libs/parallax.min.js":15,"./setPosCircle.js":18,"./slider.js":19,"./sliderMain.js":20}],17:[function(t,e,i){e.exports=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)}}()},{}],18:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");window.requestAnimFrame=t("./requestAnimFrame.js");var s=t("./throttle.js"),o=t("./getEltPosOnCover");e.exports=function(t){function e(){i=o(t,u,l,h,a),r.set(a,{scale:i[2],left:i[0]+"px",top:i[1]+"px",force3D:!0})}var i,a=t.find("> .hoop"),l=t.data("img-width"),h=t.data("img-height"),u=h/l;e(),r.to(a,1,{opacity:1}),n(window).on("resize",s(function(){requestAnimFrame(e)},60))}},{"./getEltPosOnCover":4,"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":13,"./requestAnimFrame.js":17,"./throttle.js":21}],19:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./libs/gsap/src/uncompressed/utils/Draggable.js"),o=(t("./libs/gsap/src/uncompressed/plugins/ThrowPropsPlugin.js"),t("./throttle.js")),a=t("./libs/isMobile.min.js");e.exports=function(){function t(t,e,i){w=t,R=w.find(".slides.cloned"),b=w.find(".slides:not(.cloned)"),k=b.find("> li"),S=k.outerWidth(),C=k.length,T=C*S,O=C%2===0,g=i?e.x:w.get(0)._gsTransform.x,x=C%2===0?S/2:0,g>x?(r.set(R,{x:-T+"px",force3D:!0}),(!O&&g>T||O&&g>T-S)&&(g-=T)):(r.set(R,{x:T+"px",force3D:!0}),(!O&&g<-T||O&&g<-T+S/2)&&(g+=T)),g!==this.x&&(r.set(w,{x:g,force3D:!0,overwrite:!1}),i&&(e.x=g)),j=C*S,X=360*g/j,r.set(w.parents(".container-sliders").find(".hoop"),{rotation:X,force3D:!0,overwrite:!1})}function e(i,n,r,s){u(i),q[r]=setTimeout(function(){s.set(i.find(".slides > li"),{className:"-=active"}),s.to(i,1,{x:"-="+n,force3D:!0,ease:Power3.easeInOut,onUpdate:t,onUpdateParams:[i,!1,!1],onComplete:e,onCompleteParams:[i,n,r,s]})},5e3)}function i(){n(".slides.cloned").remove(),n(".slides > li.active").removeClass("active"),r.set([n(".slider"),n(".container-sliders .hoop")],{clearProps:"transform"})}function l(){t(n(this.target),this,!0),n(this.target).find(".slides > li").removeClass("active"),E=n(this.target).parents(".container-sliders"),L=E.index(".container-sliders"),B[L].kill(),clearTimeout(q[L])}function h(){t(n(this.target),this,!0),u(n(this.target))}function u(t){P=t.parents(".container-sliders").width()/2,k=t.find(".slides > li"),
D=k.outerWidth()/4,M=P+D,N=P-D,F=k.outerWidth()/2,k.each(function(){v=Math.floor(n(this).offset().left+F),v>=N&&v<=M&&n(this).addClass("active")})}function c(t,e,i){_=t.outerWidth()/2,D=e.outerWidth()/2,M=_+D,N=_-D,e.each(function(){v=Math.floor(n(this).offset().left+i/2),v>=N&&v<=M&&n(this).addClass("active")})}function f(){t(n(this.target),this,!0)}function p(t,e){var i,o,u=t.find(".wrapper-sliders"),p=t.find(".slider"),g=t.find(".slides"),_=g.find("> li"),v=_.length,x=_.outerWidth(),w=(_.outerHeight(),v/2),b=v*x,T=b/2-x/2;v%2===0?(i=w,o=w):(i=Math.ceil(w),o=v-i),g.clone().addClass("cloned").appendTo(p),g=t.find(".slides"),_=g.find("> li"),A=t.find(".slides.cloned"),y=t.find(".slides:not(.cloned)"),leftSlidesStart=T-o*x,r.set([g,u],{width:b+"px"}),g.each(function(){for(d=0;d<i;d++)r.set(n(this).find(">li").eq(d),{left:T+d*x+"px"});for(m=0;m<o;m++)r.set(n(this).find(">li").eq(i+m),{left:leftSlidesStart+m*x+"px"})}),r.set(A,{x:b+"px",force3D:!0}),r.set(g,{marginLeft:-b/2+"px"}),r.set(t,{opacity:1}),c(t,_,x),a.any&&(z=!0),I[e]=s.create(p,{type:"x",trigger:u,zIndexBoost:!1,dragClickables:!0,dragResistance:0,edgeResistance:.65,throwProps:!0,minimumMovement:0,allowNativeTouchScrolling:z,onDrag:f,onThrowUpdate:f,onDragStart:l,onThrowComplete:h,snap:{x:function(t){return(t/x|0)*x}}})}var d,m,g,_,v,y,x,w,b,T,P,k,S,C,O,A,R,D,M,N,F,E,L,j,X,Y=n(".container-sliders"),I=[],z=!1,B=[],q=[],W=n(window).outerWidth(),V=!1;Y.each(function(t){p(n(this),t),B[t]=new TimelineMax;var i=n(this).find(".slider"),r=n(this).find(".slides"),s=r.find("> li"),o=s.outerWidth();e(i,o,t,B[t])}),W<=580&&(V=!0),n(window).on("resize",o(function(){W=n(window).outerWidth(),W>580&&V?(i(),Y.each(function(t){B[t].kill(),clearTimeout(q[t]),p(n(this),t),B[t]=new TimelineMax;var i=n(this).find(".slider"),r=n(this).find(".slides"),s=r.find("> li"),o=s.outerWidth();e(i,o,t,B[t])}),V=!1):W<=580&&!V&&(i(),Y.each(function(t){B[t].kill(),clearTimeout(q[t]),p(n(this),t),B[t]=new TimelineMax;var i=n(this).find(".slider"),r=n(this).find(".slides"),s=r.find("> li"),o=s.outerWidth();e(i,o,t,B[t])}),V=!0)},60))}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/gsap/src/uncompressed/plugins/ThrowPropsPlugin.js":10,"./libs/gsap/src/uncompressed/utils/Draggable.js":11,"./libs/isMobile.min.js":12,"./libs/jquery/dist/jquery.slim.min.js":13,"./throttle.js":21}],20:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/js-cookie/src/js.cookie.js"),s=t("./libs/gsap/src/uncompressed/TweenMax.js"),o=t("./libs/gsap/src/uncompressed/easing/CustomEase.js");window.requestAnimFrame=t("./requestAnimFrame.js");var a=t("./throttle.js"),l=t("./getEltPosOnCover");e.exports=function(t,e,i){function h(){w=l(e,N,D,M,F),s.set(F,{scale:w[2],left:w[0]+"px",top:w[1]+"px",force3D:!0})}function u(){R.each(function(){y=l(e,N,D,M,n(this)),s.set(n(this),{scale:y[2],left:y[0]+"px",top:y[1]+"px",force3D:!0})})}function c(){x=l(e,N,D,M,O),s.set(O,{scale:x[2],left:x[0]+"px",top:x[1]+"px",force3D:!0,onComplete:function(){x[0]<L||x[0]+O.width()+2*L>E||x[1]<j.height()?(O.addClass("off"),A.addClass("on")):(O.removeClass("off"),A.removeClass("on"))}})}function f(){clearTimeout(T),T=setTimeout(function(){m(currentSlide.next(".slide-home"),C.next(".slide-home-txt"),0,"next")},8e3)}function p(){I.find(".current").html(currentSlide.index(".slide-home")+1),t.removeClass("theme-"+Y).addClass("theme-"+currentSlide.data("color")).data("theme",currentSlide.data("color")),z.find("[data-theme-main]").attr("stop-color",i[currentSlide.data("color")][0]),z.find("[data-theme-second]").attr("stop-color",i[currentSlide.data("color")][1]),X.each(function(){this.href=this.href.replace(Y,currentSlide.data("color"))})}function d(t,e){s.to(v,1,{x:100*t+"%",delay:.3,force3D:!0,ease:V}),currentSlide.find(".slide-home-mb").is(":visible")?s.fromTo(currentSlide,1,{x:100*e+"%"},{x:"0%",delay:.3,force3D:!0,ease:V,onComplete:function(){W=!1,s.to(k.find(".slide-anim-txt").eq(0),.7,{y:"0px",opacity:1}),s.to(k.find(".slide-anim-txt").eq(1),.7,{y:"0px",opacity:1,delay:.3})}}):(s.fromTo(currentSlide,1,{x:100*e+"%"},{x:"0%",delay:.3,force3D:!0,ease:V}),s.fromTo(R,1.5,{x:e*E/5+"px"},{x:"0px",delay:.3,force3D:!0,ease:Power2.easeOut}),s.fromTo(F,2,{x:e*E/5+"px"},{x:"0px",delay:.3,force3D:!0,ease:Power2.easeOut}),s.fromTo([O.find("> span").eq(0),A.find("> span")],2.5,{x:e*E/5+"px"},{x:"0px",delay:.3,force3D:!0,ease:Power2.easeOut,onComplete:function(){W=!1}}),s.fromTo(O.find("> span").eq(1),3,{x:e*E/5+"px"},{x:"0px",delay:.3,force3D:!0,ease:Power2.easeOut}),s.to(k.find(".slide-anim-txt").eq(0),.7,{y:"0px",opacity:1,delay:2.65}),s.to(k.find(".slide-anim-txt").eq(1),.7,{y:"0px",opacity:1,delay:3}))}function m(i,n,o,a){W=!0,i.length?i.addClass("slide-on"):S.eq(o).addClass("slide-on"),currentSlide.removeClass("slide-on"),v=currentSlide,currentSlide=e.find(".slide-on"),Y=t.data("theme"),O=currentSlide.find(".baseline"),A=currentSlide.find(".baseline-second"),F=currentSlide.find(".hoop"),R=currentSlide.find(".slider-plans"),b="next"===a?-1:1,s.to(k.find(".slide-anim-txt").eq(1),.3,{y:"20px",opacity:0,delay:.35}),s.to(k.find(".slide-anim-txt").eq(0),.3,{y:"20px",opacity:0,onComplete:function(){n.length?n.addClass("txt-on"):q.eq(o).addClass("txt-on"),C.removeClass("txt-on"),C=k.find(".txt-on"),v.find(".slide-home-mb").is(":visible")?p():s.to([v.find(".hoop"),v.find(".baseline").find("> span"),v.find(".baseline-second").find("> span"),v.find(".slider-plans")],1,{x:300*b+"px",force3D:!0,ease:Power2.easeIn,onComplete:p}),c(),h(),u(),"next"===a?d(-1,1):d(1,-1),f(),r.set("think-decli",currentSlide.index(".slide-home"))}})}function g(){P=n(document).scrollTop(),P>50?clearTimeout(T):f()}function _(){c(),h(),u(),s.set(S,{x:"100%",force3D:!0}),s.set(currentSlide,{x:"0%",force3D:!0}),s.to(currentSlide,1,{opacity:1,onComplete:function(){s.set(S,{opacity:1})}}),s.to(k.find(".container"),.7,{opacity:1,delay:.5}),s.to(I,.5,{opacity:1}),p(),g()}var v,y,x,w,b,T,P,k=n("#bloc-revelation"),S=currentSlide=e.find(".slide-on"),C=k.find(".txt-on"),O=currentSlide.find(".baseline"),A=currentSlide.find(".baseline-second"),R=currentSlide.find(".slider-plans"),D=e.data("img-width"),M=e.data("img-height"),N=M/D,F=currentSlide.find(".hoop"),E=e.width(),L=20,j=n("#header"),X=n(".favicon"),Y=t.data("theme"),I=e.find("#slider-home-nav"),z=n("#gradient-hoop"),S=e.find(".slide-home"),B=S.length,q=k.find(".slide-home-txt"),W=!1,V=o.create("custom","M0,0 C0,0 0.358,-0.02 0.52,0.18 0.631,0.317 0.65,0.713 0.75,0.862 0.828,0.978 1,1 1,1");I.on("click",".prev",function(t){t.preventDefault(),W||(clearTimeout(T),m(currentSlide.prev(".slide-home"),C.prev(".slide-home-txt"),B-1,"prev"))}).on("click",".next",function(t){t.preventDefault(),W||(clearTimeout(T),m(currentSlide.next(".slide-home"),C.next(".slide-home-txt"),0,"next"))}),n(window).on("load",function(){_()}).on("resize",a(function(){E=e.width(),requestAnimFrame(c),requestAnimFrame(h),requestAnimFrame(u)},60)).on("blur",function(){clearTimeout(T)}).on("focus",g),n(document).on("scroll",a(function(){requestAnimFrame(g)},40))}},{"./getEltPosOnCover":4,"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/gsap/src/uncompressed/easing/CustomEase.js":8,"./libs/jquery/dist/jquery.slim.min.js":13,"./libs/js-cookie/src/js.cookie.js":14,"./requestAnimFrame.js":17,"./throttle.js":21}],21:[function(t,e,i){e.exports=function(t,e){var i,n;return function(){var r=this,s=+new Date,o=arguments;i&&s<i+e?(clearTimeout(n),n=setTimeout(function(){i=s,t.apply(r,o)},e)):(i=s,t.apply(r,o))}}},{}]},{},[16]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
