!function t(e,i,n){function r(o,a){if(!i[o]){if(!e[o]){var l="function"==typeof require&&require;if(!a&&l)return l(o,!0);if(s)return s(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var h=i[o]={exports:{}};e[o][0].call(h.exports,function(t){var i=e[o][1][t];return r(i?i:t)},h,h.exports,t,e,i,n)}return i[o].exports}for(var s="function"==typeof require&&require,o=0;o<n.length;o++)r(n[o]);return r}({1:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");e.exports=function(t){function e(t,e,i){return[t.data("x")-e,t.data("y")-i]}var i,s;t.on("mouseenter",".btn, #menu-main a",function(t){i=n(this).find("> i"),i.data("x",i.position().left+i.width()/2).data("y",i.position().top+i.height()/2),n(this).data("x",n(this).offset().left).data("y",n(this).offset().top),s=e(i,t.pageX-n(this).data("x"),t.pageY-n(this).data("y")),r.to(i,.1,{x:-s[0]+"px",y:-s[1]+"px"})}).on("mousemove",".btn, #menu-main a",function(t){i=n(this).find("> i"),s=e(i,t.pageX-n(this).data("x"),t.pageY-n(this).data("y")),r.isTweening(i)||r.set(i,{x:-s[0]+"px",y:-s[1]+"px"})}).on("mouseleave",".btn, #menu-main a",function(){r.to(n(this).find("> i"),.3,{x:"0px",y:"0px"})})}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":12}],2:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");window.requestAnimFrame=t("./requestAnimFrame.js");var s=t("./throttle.js");e.exports=function(){function t(){p.addClass("on"),d.hasClass("on")||(d.addClass("on"),u>580&&(r.to(m,.3,{opacity:1}),r.set(g,{opacity:0})))}function e(){p.removeClass("on"),d.hasClass("on")&&(d.removeClass("on"),u>580&&(r.to(m,.3,{opacity:0}),r.set(g,{opacity:1})))}function i(){f=n(document).scrollTop(),a=(f-10)/(c-h),l=227.7*a,f>10?(t(),u>580&&r.set(m,{x:l+"px",force3D:!0})):e()}function o(){u=n(window).outerWidth(),h=n(window).height(),c=n(document).height(),r.set(m,{opacity:0}),r.set(g,{opacity:1})}var a,l,u=n(window).outerWidth(),h=n(window).height(),c=n(document).height(),f=n(document).scrollTop(),p=n("#header"),d=n("#logo"),m=d.find("#logo-o"),g=d.find("#logo-o1");p.on("mouseenter",e).on("mouseleave",function(){f>10&&t()}),n(document).on("scroll",s(function(){requestAnimFrame(i)},10)),n(window).on("resize",s(function(){requestAnimFrame(o)},60))}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":12,"./requestAnimFrame.js":15,"./throttle.js":19}],3:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./throttle.js");window.requestAnimFrame=t("./requestAnimFrame.js"),e.exports=function(t,e,i){function o(){t.length&&(p=n(window).scrollTop(),d=p+g,t.each(function(t){l=n(this),h=l.data("check-top"),c=l.data("check-bottom"),f=p*e/(m-g)-e/2,i&&(f=f*(t+2)/2),c-_>=p&&h+_<=d&&r.set(l,{y:f+"px",force3D:!0})}))}function a(){t.length&&t.each(function(){l=n(this),u=l.outerHeight(),h=l.offset().top,c=h+u,l.data({"check-top":h,"check-bottom":c})})}var l,u,h,c,f,p,d,m=n(document).height(),g=n(window).height(),_=0,_=0;a(),o(),t.length&&r.to(t,1,{opacity:.8}),n(document).on("scroll",s(function(){requestAnimFrame(o)},40)),n(window).on("resize",s(function(){g=n(window).height(),m=n(document).height(),requestAnimFrame(a),requestAnimFrame(o)},40))}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":12,"./requestAnimFrame.js":15,"./throttle.js":19}],4:[function(t,e,i){t("./libs/jquery/dist/jquery.slim.min.js");e.exports=function(t,e,i,n,r){return containerH=t.outerHeight(),containerW=t.width(),containerRatio=containerH/containerW,posX=r.data("x"),posY=r.data("y"),containerRatio>e?(finalH=containerH,finalW=i*finalH/n,newX=finalW*posX/i-(finalW-containerW)/2,newY=finalH*posY/n):(finalW=containerW,finalH=n*finalW/i,newX=finalW*posX/i,newY=finalH*posY/n-(finalH-containerH)/2),ratioScale=finalH/n,console.log(containerH),[newX,newY,ratioScale]}},{"./libs/jquery/dist/jquery.slim.min.js":12}],5:[function(t,e,i){(function(i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");e.exports=function(){var t,e,s=document.createElement("script"),o=document.getElementsByTagName("script")[0],a=n(".wrapper-video"),l=[];i.onYouTubeIframeAPIReady=function(){function i(t){t.on("click",function(){e=n(this).index(".wrapper-video"),coverVideo=n(this).find(".cover-video"),r.to(coverVideo,.5,{opacity:0,display:"none"}),l[e].playVideo()})}a.each(function(e){t=n(this).find("iframe").get(0),l[e]=new YT.Player(t,{events:{onReady:i(n(this))}})})},s.src="https://www.youtube.com/iframe_api",o.parentNode.insertBefore(s,o)}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":12}],6:[function(t,e,i){(function(t){!function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,o,a,l,u,h=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=h("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},m=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),g={},_=function(s,o,a,l){this.sc=g[s]?g[s].sc:[],g[s]=this,this.gsClass=null,this.func=a;var u=[];this.check=function(c){for(var f,p,d,m,v,y=o.length,x=y;--y>-1;)(f=g[o[y]]||new _(o[y],[])).gsClass?(u[y]=f.gsClass,x--):c&&f.sc.push(this);if(0===x&&a){if(p=("com.greensock."+s).split("."),d=p.pop(),m=h(p.join("."))[d]=this.gsClass=a.apply(a,u),l)if(r[d]=n[d]=m,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return m});else if(v)if(s===i){e.exports=n[i]=m;for(y in n)m[y]=n[y]}else n[i]&&(n[i][d]=m);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new _(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var x=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?x.concat(e):x},!0),b=w.map={},T=w.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),u=l.length,h=(i||"easeIn,easeOut,easeInOut").split(",");--u>-1;)for(s=l[u],r=n?y("easing."+s,null,!0):c.easing[s]||{},o=h.length;--o>-1;)a=h[o],b[s+"."+a]=b[a+s]=r[a]=t.getRatio?t:t[a]||new t};for(a=w.prototype,a._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],o=s.length;--o>-1;)a=s[o]+",Power"+o,T(new w(null,null,1,o),a,"easeOut",!0),T(new w(null,null,2,o),a,"easeIn"+(0===o?",easeNone":"")),T(new w(null,null,3,o),a,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});a=P.prototype,a.addEventListener=function(t,e,i,n,r){r=r||0;var s,o,a=this._listeners[t],h=0;for(this!==l||u||l.wake(),null==a&&(this._listeners[t]=a=[]),o=a.length;--o>-1;)s=a[o],s.c===e&&s.s===i?a.splice(o,1):0===h&&s.pr<r&&(h=o+1);a.splice(h,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var k=t.requestAnimationFrame,C=t.cancelAnimationFrame,O=Date.now||function(){return(new Date).getTime()},S=O();for(s=["ms","moz","webkit","o"],o=s.length;--o>-1&&!k;)k=t[s[o]+"RequestAnimationFrame"],C=t[s[o]+"CancelAnimationFrame"]||t[s[o]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,o,a=this,h=O(),c=!(e===!1||!k)&&"auto",p=500,m=33,g="tick",_=function(t){var e,l,u=O()-S;u>p&&(h+=u-m),S+=u,a.time=(S-h)/1e3,e=a.time-o,(!i||e>0||t===!0)&&(a.frame++,o+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(_)),l&&a.dispatchEvent(g)};P.call(a),a.time=a.frame=0,a.tick=function(){_(!0)},a.lagSmoothing=function(t,e){p=t||1/f,m=Math.min(e,p,0)},a.sleep=function(){null!=r&&(c&&C?C(r):clearTimeout(r),n=d,r=null,a===l&&(u=!1))},a.wake=function(t){null!==r?a.sleep():t?h+=-S+(S=O()):a.frame>10&&(S=O()-p+5),n=0===i?d:c&&k?k:function(t){return setTimeout(t,1e3*(o-a.time)+1|0)},a===l&&(u=!0),_(2)},a.fps=function(t){return arguments.length?(i=t,s=1/(i||60),o=this.time+s,void a.wake()):i},a.useRAF=function(t){return arguments.length?(a.sleep(),c=t,void a.fps(i)):c},a.fps(t),setTimeout(function(){"auto"===c&&a.frame<5&&"hidden"!==document.visibilityState&&a.useRAF(!1)},1500)}),a=c.Ticker.prototype=new c.events.EventDispatcher,a.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){u||l.wake();var i=this.vars.useFrames?U:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,a=A.prototype,a._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var R=function(){u&&O()-S>2e3&&l.wake(),setTimeout(R,2e3)};R(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},a._enabled=function(t,e){return u||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=m(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(u||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(F.length&&Z(),this.render(t,e,!1),F.length&&Z())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(u||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});a=D.prototype=new A,a.constructor=D,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return u||l.wake(),this._totalTime};var N=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=N.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:N.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?H[N.defaultOverwrite]:"number"==typeof l?l>>0:H[l],(a||e instanceof Array||e.push&&m(e))&&"number"!=typeof e[0])for(this._targets=o=p(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)s=o[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(p(s))):(this._siblings[r]=Q(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=o[r--]=N.selector(s),"string"==typeof s&&o.splice(r+1,1)):o.splice(r--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)))},!0),M=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},E=function(t,e){var i,n={};for(i in t)V[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!Y[i]||Y[i]&&Y[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};a=N.prototype=new A,a.constructor=N,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,N.version="1.19.0",N.defaultEase=a._ease=new w(null,null,1,1),N.defaultOverwrite="auto",N.ticker=l,N.autoSleep=120,N.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},N.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(N.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var F=[],L={},j=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,X=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},I=function(t,e,i,n){var r,s,o,a,l,u,h,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(j)||[],s=e.match(j)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,a=0;a<l;a++)h=s[a],u=e.substr(f,e.indexOf(h,f)-f),p+=u||!a?u:",",f+=u.length,d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),h===r[a]||r.length<=a?p+=h:(p&&(c.push(p),p=""),o=parseFloat(r[a]),c.push(o),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:o,c:("="===h.charAt(1)?parseInt(h.charAt(0)+"1",10)*parseFloat(h.substr(2)):parseFloat(h)-o)||0,f:0,m:d&&d<4?Math.round:0}),f+=h.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=X,c},z=function(t,e,i,n,r,s,o,a,l){"function"==typeof n&&(n=n(l||0,t));var u,h,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(h=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=o?t[h](o):t[h]()),"string"==typeof c&&(o||isNaN(c))?(d.fp=o,u=I(c,n,a||N.defaultStringFilter,d),d={t:u,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},B=N._internals={isArray:m,isSelector:M,lazyTweens:F,blobDif:I},Y=N._plugins={},q=B.tweenLookup={},W=0,V=B.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},H={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},U=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Z=B.lazyRender=function(){var t,e=F.length;for(L={};--e>-1;)t=F[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);F.length=0};$._startTime=l.time,U._startTime=l.frame,$._active=U._active=!0,setTimeout(Z,1),A._updateRoot=N.render=function(){var t,e,i;if(F.length&&Z(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),U.render((l.frame-U._startTime)*U._timeScale,!1,!1),F.length&&Z(),l.frame>=G){G=l.frame+(parseInt(N.autoSleep,10)||120);for(i in q){for(e=q[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete q[i]}if(i=$._first,(!i||i._paused)&&N.autoSleep&&!U._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Q=function(t,e,i){var n,r,s=t._gsTweenID;if(q[s||(t._gsTweenID=s="t"+W++)]||(q[s]={target:t,tweens:[]}),e&&(n=q[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return q[s].tweens},K=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),o=N.onOverwrite,o&&(s=o(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var u,h=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(u=u||tt(e,0,d),0===tt(a,u,d)&&(c[p++]=a)):a._startTime<=h&&a._startTime+a.totalDuration()/a._timeScale>h&&((d||!a._initted)&&h-a._startTime<=2e-10||(c[p++]=a)));for(s=p;--s>-1;)if(a=c[s],2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};a._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,l=this._duration,u=!!o.immediateRender,h=o.ease;if(o.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in o.startAt)r[n]=o.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=u&&o.lazy!==!1,r.startAt=r.delay=null,this._startAt=N.to(this.target,0,r),u)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(u=!1),i={};for(n in o)V[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=u&&o.lazy!==!1,i.immediateRender=u,this._startAt=N.to(this.target,0,i),u){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=h=h?h instanceof w?h:"function"==typeof h?new w(h,o.easeParams):b[h]||N.defaultEase:N.defaultEase,o.easeParams instanceof Array&&h.config&&(this._ease=h.config.apply(h,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&N._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,s){var o,a,l,u,h,c;if(null==e)return!1;L[e._gsTweenID]&&Z(),this.vars.css||e.style&&e!==t&&e.nodeType&&Y.css&&this.vars.autoCSS!==!1&&E(this.vars,e);for(o in this.vars)if(c=this.vars[o],V[o])c&&(c instanceof Array||c.push&&m(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(Y[o]&&(u=new Y[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=h={_next:this._firstPT,t:u,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:u._priority,m:0},a=u._overwriteProps.length;--a>-1;)i[u._overwriteProps[a]]=this._firstPT;(u._priority||u._onInitAllProps)&&(l=!0),(u._onDisable||u._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else i[o]=z.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,u=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(u<0||t<=0&&t>=-1e-7||u===f&&"isPause"!==this.data)&&u!==t&&(i=!0,u>f&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||u===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&u>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(u>=0&&(u!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||u===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var h=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&h>=.5)&&(h=1-h),3===c&&(h*=2),1===p?h*=h:2===p?h*=h*h:3===p?h*=h*h*h:4===p&&(h*=h*h*h*h),1===c?this.ratio=1-h:2===c?this.ratio=h:t/l<.5?this.ratio=h/2:this.ratio=1-h/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,F.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&o!==f&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:N.selector(e)||e;var n,r,s,o,a,l,u,h,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((m(e)||M(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(u=t||a,h=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(N.onOverwrite||this.vars.onOverwrite)){for(s in u)a[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in u)(o=a[s])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(u)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),h&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&N._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(u||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Q(n[i],this,!0);else this._siblings=Q(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&N._onPluginEvent(t?"_onEnable":"_onDisable",this)},N.to=function(t,e,i){return new N(t,e,i)},N.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new N(t,e,i)},N.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new N(t,e,n)},N.delayedCall=function(t,e,i,n,r){return new N(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},N.set=function(t,e){return new N(t,0,e)},N.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:N.selector(t)||t;var i,n,r,s;if((m(t)||M(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(N.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Q(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},N.killTweensOf=N.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=N.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(a=et.prototype,et.version="1.19.0",et.API=2,a._firstPT=null,a._addTween=z,a.setRatio=X,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},N._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(Y[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),a=o.prototype=new et(i);a.constructor=o,o.API=t.API;for(e in s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,et.activate([o]),o},s=t._gsQueue){for(o=0;o<s.length;o++)s[o]();for(a in g)g[a].func||t.console.log("GSAP encountered missing dependency: "+a);
}u=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenLite")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],7:[function(t,e,i){(function(t){var i="undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window;(i._gsQueue||(i._gsQueue=[])).push(function(){"use strict";i._gsDefine("TweenMax",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,i){var n=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},r=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r(i,e[i]):r[i%r.length];delete t.cycle},s=function(t,e,n){i.call(this,t,e,n),this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._dirty=!0,this.render=s.prototype.render},o=1e-10,a=i._internals,l=a.isSelector,u=a.isArray,h=s.prototype=i.to({},.1,{}),c=[];s.version="1.19.0",h.constructor=s,h.kill()._gc=!1,s.killTweensOf=s.killDelayedCallsTo=i.killTweensOf,s.getTweensOf=i.getTweensOf,s.lagSmoothing=i.lagSmoothing,s.ticker=i.ticker,s.render=i.render,h.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),i.prototype.invalidate.call(this)},h.updateTo=function(t,e){var n,r=this.ratio,s=this.vars.immediateRender||t.immediateRender;e&&this._startTime<this._timeline._time&&(this._startTime=this._timeline._time,this._uncache(!1),this._gc?this._enabled(!0,!1):this._timeline.insert(this,this._startTime-this._delay));for(n in t)this.vars[n]=t[n];if(this._initted||s)if(e)this._initted=!1,s&&this.render(0,!0,!0);else if(this._gc&&this._enabled(!0,!1),this._notifyPluginsOfEnabled&&this._firstPT&&i._onPluginEvent("_onDisable",this),this._time/this._duration>.998){var o=this._totalTime;this.render(0,!0,!1),this._initted=!1,this.render(o,!0,!1)}else if(this._initted=!1,this._init(),this._time>0||s)for(var a,l=1/(1-r),u=this._firstPT;u;)a=u.s+u.c,u.c*=l,u.s=a-u.c,u=u._next;return this},h.render=function(t,e,i){this._initted||0===this._duration&&this.vars.repeat&&this.invalidate();var n,r,s,l,u,h,c,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,m=this._totalTime,g=this._cycle,_=this._duration,v=this._rawPrevTime;if(t>=p-1e-7?(this._totalTime=p,this._cycle=this._repeat,this._yoyo&&0!==(1&this._cycle)?(this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0):(this._time=_,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1),this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===_&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(v<0||t<=0&&t>=-1e-7||v===o&&"isPause"!==this.data)&&v!==t&&(i=!0,v>o&&(r="onReverseComplete")),this._rawPrevTime=f=!e||t||v===t?t:o)):t<1e-7?(this._totalTime=this._time=this._cycle=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==m||0===_&&v>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===_&&(this._initted||!this.vars.lazy||i)&&(v>=0&&(i=!0),this._rawPrevTime=f=!e||t||v===t?t:o)),this._initted||(i=!0)):(this._totalTime=this._time=t,0!==this._repeat&&(l=_+this._repeatDelay,this._cycle=this._totalTime/l>>0,0!==this._cycle&&this._cycle===this._totalTime/l&&m<=t&&this._cycle--,this._time=this._totalTime-this._cycle*l,this._yoyo&&0!==(1&this._cycle)&&(this._time=_-this._time),this._time>_?this._time=_:this._time<0&&(this._time=0)),this._easeType?(u=this._time/_,h=this._easeType,c=this._easePower,(1===h||3===h&&u>=.5)&&(u=1-u),3===h&&(u*=2),1===c?u*=u:2===c?u*=u*u:3===c?u*=u*u*u:4===c&&(u*=u*u*u*u),1===h?this.ratio=1-u:2===h?this.ratio=u:this._time/_<.5?this.ratio=u/2:this.ratio=1-u/2):this.ratio=this._ease.getRatio(this._time/_)),d===this._time&&!i&&g===this._cycle)return void(m!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=d,this._totalTime=m,this._rawPrevTime=v,this._cycle=g,a.lazyTweens.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/_):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==d&&t>=0&&(this._active=!0),0===m&&(2===this._initted&&t>0&&this._init(),this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._totalTime&&0!==_||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&this._startTime&&this._startAt.render(t,e,i),e||(this._totalTime!==m||r)&&this._callback("onUpdate")),this._cycle!==g&&(e||this._gc||this.vars.onRepeat&&this._callback("onRepeat")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&this._startTime&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===_&&this._rawPrevTime===o&&f!==o&&(this._rawPrevTime=0)))},s.to=function(t,e,i){return new s(t,e,i)},s.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new s(t,e,i)},s.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new s(t,e,n)},s.staggerTo=s.allTo=function(t,e,o,a,h,f,p){a=a||0;var d,m,g,_,v=0,y=[],x=function(){o.onComplete&&o.onComplete.apply(o.onCompleteScope||this,arguments),h.apply(p||o.callbackScope||this,f||c)},w=o.cycle,b=o.startAt&&o.startAt.cycle;for(u(t)||("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t))),t=t||[],a<0&&(t=n(t),t.reverse(),a*=-1),d=t.length-1,g=0;g<=d;g++){m={};for(_ in o)m[_]=o[_];if(w&&(r(m,t,g),null!=m.duration&&(e=m.duration,delete m.duration)),b){b=m.startAt={};for(_ in o.startAt)b[_]=o.startAt[_];r(m.startAt,t,g)}m.delay=v+(m.delay||0),g===d&&h&&(m.onComplete=x),y[g]=new s(t[g],e,m),v+=a}return y},s.staggerFrom=s.allFrom=function(t,e,i,n,r,o,a){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,s.staggerTo(t,e,i,n,r,o,a)},s.staggerFromTo=s.allFromTo=function(t,e,i,n,r,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,s.staggerTo(t,e,n,r,o,a,l)},s.delayedCall=function(t,e,i,n,r){return new s(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,useFrames:r,overwrite:0})},s.set=function(t,e){return new s(t,0,e)},s.isTweening=function(t){return i.getTweensOf(t,!0).length>0};var f=function(t,e){for(var n=[],r=0,s=t._first;s;)s instanceof i?n[r++]=s:(e&&(n[r++]=s),n=n.concat(f(s,e)),r=n.length),s=s._next;return n},p=s.getAllTweens=function(e){return f(t._rootTimeline,e).concat(f(t._rootFramesTimeline,e))};s.killAll=function(t,i,n,r){null==i&&(i=!0),null==n&&(n=!0);var s,o,a,l=p(0!=r),u=l.length,h=i&&n&&r;for(a=0;a<u;a++)o=l[a],(h||o instanceof e||(s=o.target===o.vars.onComplete)&&n||i&&!s)&&(t?o.totalTime(o._reversed?0:o.totalDuration()):o._enabled(!1,!1))},s.killChildTweensOf=function(t,e){if(null!=t){var r,o,h,c,f,p=a.tweenLookup;if("string"==typeof t&&(t=i.selector(t)||t),l(t)&&(t=n(t)),u(t))for(c=t.length;--c>-1;)s.killChildTweensOf(t[c],e);else{r=[];for(h in p)for(o=p[h].target.parentNode;o;)o===t&&(r=r.concat(p[h].tweens)),o=o.parentNode;for(f=r.length,c=0;c<f;c++)e&&r[c].totalTime(r[c].totalDuration()),r[c]._enabled(!1,!1)}}};var d=function(t,i,n,r){i=i!==!1,n=n!==!1,r=r!==!1;for(var s,o,a=p(r),l=i&&n&&r,u=a.length;--u>-1;)o=a[u],(l||o instanceof e||(s=o.target===o.vars.onComplete)&&n||i&&!s)&&o.paused(t)};return s.pauseAll=function(t,e,i){d(!0,t,e,i)},s.resumeAll=function(t,e,i){d(!1,t,e,i)},s.globalTimeScale=function(e){var n=t._rootTimeline,r=i.ticker.time;return arguments.length?(e=e||o,n._startTime=r-(r-n._startTime)*n._timeScale/e,n=t._rootFramesTimeline,r=i.ticker.frame,n._startTime=r-(r-n._startTime)*n._timeScale/e,n._timeScale=t._rootTimeline._timeScale=e,e):n._timeScale},h.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},h.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},h.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},h.duration=function(e){return arguments.length?t.prototype.duration.call(this,e):this._duration},h.totalDuration=function(t){return arguments.length?this._repeat===-1?this:this.duration((t-this._repeat*this._repeatDelay)/(this._repeat+1)):(this._dirty&&(this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat,this._dirty=!1),this._totalDuration)},h.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},h.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},h.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},s},!0),i._gsDefine("TimelineLite",["core.Animation","core.SimpleTimeline","TweenLite"],function(t,e,n){var r=function(t){e.call(this,t),this._labels={},this.autoRemoveChildren=this.vars.autoRemoveChildren===!0,this.smoothChildTiming=this.vars.smoothChildTiming===!0,this._sortChildren=!0,this._onUpdate=this.vars.onUpdate;var i,n,r=this.vars;for(n in r)i=r[n],u(i)&&i.join("").indexOf("{self}")!==-1&&(r[n]=this._swapSelfInParams(i));u(r.tweens)&&this.add(r.tweens,0,r.align,r.stagger)},s=1e-10,o=n._internals,a=r._internals={},l=o.isSelector,u=o.isArray,h=o.lazyTweens,c=o.lazyRender,f=i._gsDefine.globals,p=function(t){var e,i={};for(e in t)i[e]=t[e];return i},d=function(t,e,i){var n,r,s=t.cycle;for(n in s)r=s[n],t[n]="function"==typeof r?r.call(e[i],i):r[i%r.length];delete t.cycle},m=a.pauseCallback=function(){},g=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},_=r.prototype=new e;return r.version="1.19.0",_.constructor=r,_.kill()._gc=_._forcingPlayhead=_._hasPause=!1,_.to=function(t,e,i,r){var s=i.repeat&&f.TweenMax||n;return e?this.add(new s(t,e,i),r):this.set(t,i,r)},_.from=function(t,e,i,r){return this.add((i.repeat&&f.TweenMax||n).from(t,e,i),r)},_.fromTo=function(t,e,i,r,s){var o=r.repeat&&f.TweenMax||n;return e?this.add(o.fromTo(t,e,i,r),s):this.set(t,r,s)},_.staggerTo=function(t,e,i,s,o,a,u,h){var c,f,m=new r({onComplete:a,onCompleteParams:u,callbackScope:h,smoothChildTiming:this.smoothChildTiming}),_=i.cycle;for("string"==typeof t&&(t=n.selector(t)||t),t=t||[],l(t)&&(t=g(t)),s=s||0,s<0&&(t=g(t),t.reverse(),s*=-1),f=0;f<t.length;f++)c=p(i),c.startAt&&(c.startAt=p(c.startAt),c.startAt.cycle&&d(c.startAt,t,f)),_&&(d(c,t,f),null!=c.duration&&(e=c.duration,delete c.duration)),m.to(t[f],e,c,f*s);return this.add(m,o)},_.staggerFrom=function(t,e,i,n,r,s,o,a){return i.immediateRender=0!=i.immediateRender,i.runBackwards=!0,this.staggerTo(t,e,i,n,r,s,o,a)},_.staggerFromTo=function(t,e,i,n,r,s,o,a,l){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,this.staggerTo(t,e,n,r,s,o,a,l)},_.call=function(t,e,i,r){return this.add(n.delayedCall(0,t,e,i),r)},_.set=function(t,e,i){return i=this._parseTimeOrLabel(i,0,!0),null==e.immediateRender&&(e.immediateRender=i===this._time&&!this._paused),this.add(new n(t,0,e),i)},r.exportRoot=function(t,e){t=t||{},null==t.smoothChildTiming&&(t.smoothChildTiming=!0);var i,s,o=new r(t),a=o._timeline;for(null==e&&(e=!0),a._remove(o,!0),o._startTime=0,o._rawPrevTime=o._time=o._totalTime=a._time,i=a._first;i;)s=i._next,e&&i instanceof n&&i.target===i.vars.onComplete||o.add(i,i._startTime-i._delay),i=s;return a.add(o,0),o},_.add=function(i,s,o,a){var l,h,c,f,p,d;if("number"!=typeof s&&(s=this._parseTimeOrLabel(s,0,!0,i)),!(i instanceof t)){if(i instanceof Array||i&&i.push&&u(i)){for(o=o||"normal",a=a||0,l=s,h=i.length,c=0;c<h;c++)u(f=i[c])&&(f=new r({tweens:f})),this.add(f,l),"string"!=typeof f&&"function"!=typeof f&&("sequence"===o?l=f._startTime+f.totalDuration()/f._timeScale:"start"===o&&(f._startTime-=f.delay())),l+=a;return this._uncache(!0)}if("string"==typeof i)return this.addLabel(i,s);if("function"!=typeof i)throw"Cannot add "+i+" into the timeline; it is not a tween, timeline, function, or string.";i=n.delayedCall(0,i)}if(e.prototype.add.call(this,i,s),(this._gc||this._time===this._duration)&&!this._paused&&this._duration<this.duration())for(p=this,d=p.rawTime()>i._startTime;p._timeline;)d&&p._timeline.smoothChildTiming?p.totalTime(p._totalTime,!0):p._gc&&p._enabled(!0,!1),p=p._timeline;return this},_.remove=function(e){if(e instanceof t){this._remove(e,!1);var i=e._timeline=e.vars.useFrames?t._rootFramesTimeline:t._rootTimeline;return e._startTime=(e._paused?e._pauseTime:i._time)-(e._reversed?e.totalDuration()-e._totalTime:e._totalTime)/e._timeScale,this}if(e instanceof Array||e&&e.push&&u(e)){for(var n=e.length;--n>-1;)this.remove(e[n]);return this}return"string"==typeof e?this.removeLabel(e):this.kill(null,e)},_._remove=function(t,i){e.prototype._remove.call(this,t,i);var n=this._last;return n?this._time>n._startTime+n._totalDuration/n._timeScale&&(this._time=this.duration(),this._totalTime=this._totalDuration):this._time=this._totalTime=this._duration=this._totalDuration=0,this},_.append=function(t,e){return this.add(t,this._parseTimeOrLabel(null,e,!0,t))},_.insert=_.insertMultiple=function(t,e,i,n){return this.add(t,e||0,i,n)},_.appendMultiple=function(t,e,i,n){return this.add(t,this._parseTimeOrLabel(null,e,!0,t),i,n)},_.addLabel=function(t,e){return this._labels[t]=this._parseTimeOrLabel(e),this},_.addPause=function(t,e,i,r){var s=n.delayedCall(0,m,i,r||this);return s.vars.onComplete=s.vars.onReverseComplete=e,s.data="isPause",this._hasPause=!0,this.add(s,t)},_.removeLabel=function(t){return delete this._labels[t],this},_.getLabelTime=function(t){return null!=this._labels[t]?this._labels[t]:-1},_._parseTimeOrLabel=function(e,i,n,r){var s;if(r instanceof t&&r.timeline===this)this.remove(r);else if(r&&(r instanceof Array||r.push&&u(r)))for(s=r.length;--s>-1;)r[s]instanceof t&&r[s].timeline===this&&this.remove(r[s]);if("string"==typeof i)return this._parseTimeOrLabel(i,n&&"number"==typeof e&&null==this._labels[i]?e-this.duration():0,n);if(i=i||0,"string"!=typeof e||!isNaN(e)&&null==this._labels[e])null==e&&(e=this.duration());else{if(s=e.indexOf("="),s===-1)return null==this._labels[e]?n?this._labels[e]=this.duration()+i:i:this._labels[e]+i;i=parseInt(e.charAt(s-1)+"1",10)*Number(e.substr(s+1)),e=s>1?this._parseTimeOrLabel(e.substr(0,s-1),0,n):this.duration()}return Number(e)+i},_.seek=function(t,e){return this.totalTime("number"==typeof t?t:this._parseTimeOrLabel(t),e!==!1)},_.stop=function(){return this.paused(!0)},_.gotoAndPlay=function(t,e){return this.play(t,e)},_.gotoAndStop=function(t,e){return this.pause(t,e)},_.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,o,a,l,u,f,p=this._dirty?this.totalDuration():this._totalDuration,d=this._time,m=this._startTime,g=this._timeScale,_=this._paused;if(t>=p-1e-7)this._totalTime=this._time=p,this._reversed||this._hasPausedChild()||(r=!0,a="onComplete",l=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||this._rawPrevTime<0||this._rawPrevTime===s)&&this._rawPrevTime!==t&&this._first&&(l=!0,this._rawPrevTime>s&&(a="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,t=p+1e-4;else if(t<1e-7)if(this._totalTime=this._time=0,(0!==d||0===this._duration&&this._rawPrevTime!==s&&(this._rawPrevTime>0||t<0&&this._rawPrevTime>=0))&&(a="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(l=r=!0,a="onReverseComplete"):this._rawPrevTime>=0&&this._first&&(l=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(l=!0)}else{if(this._hasPause&&!this._forcingPlayhead&&!e){if(t>=d)for(n=this._first;n&&n._startTime<=t&&!u;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(u=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!u;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(u=n),n=n._prev;u&&(this._time=t=u._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}this._totalTime=this._time=this._rawPrevTime=t}if(this._time!==d&&this._first||i||l||u){if(this._initted||(this._initted=!0),this._active||!this._paused&&this._time!==d&&t>0&&(this._active=!0),0===d&&this.vars.onStart&&(0===this._time&&this._duration||e||this._callback("onStart")),f=this._time,f>=d)for(n=this._first;n&&(o=n._next,f===this._time&&(!this._paused||_));)(n._active||n._startTime<=f&&!n._paused&&!n._gc)&&(u===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,f===this._time&&(!this._paused||_));){if(n._active||n._startTime<=d&&!n._paused&&!n._gc){if(u===n){for(u=n._prev;u&&u.endTime()>this._time;)u.render(u._reversed?u.totalDuration()-(t-u._startTime)*u._timeScale:(t-u._startTime)*u._timeScale,e,i),u=u._prev;u=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=o}this._onUpdate&&(e||(h.length&&c(),this._callback("onUpdate"))),a&&(this._gc||m!==this._startTime&&g===this._timeScale||(0===this._time||p>=this.totalDuration())&&(r&&(h.length&&c(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[a]&&this._callback(a)))}},_._hasPausedChild=function(){for(var t=this._first;t;){if(t._paused||t instanceof r&&t._hasPausedChild())return!0;t=t._next}return!1},_.getChildren=function(t,e,i,r){r=r||-9999999999;for(var s=[],o=this._first,a=0;o;)o._startTime<r||(o instanceof n?e!==!1&&(s[a++]=o):(i!==!1&&(s[a++]=o),t!==!1&&(s=s.concat(o.getChildren(!0,e,i)),a=s.length))),o=o._next;return s},_.getTweensOf=function(t,e){var i,r,s=this._gc,o=[],a=0;for(s&&this._enabled(!0,!0),i=n.getTweensOf(t),r=i.length;--r>-1;)(i[r].timeline===this||e&&this._contains(i[r]))&&(o[a++]=i[r]);return s&&this._enabled(!1,!0),o},_.recent=function(){return this._recent},_._contains=function(t){for(var e=t.timeline;e;){if(e===this)return!0;e=e.timeline}return!1},_.shiftChildren=function(t,e,i){i=i||0;for(var n,r=this._first,s=this._labels;r;)r._startTime>=i&&(r._startTime+=t),r=r._next;if(e)for(n in s)s[n]>=i&&(s[n]+=t);return this._uncache(!0)},_._kill=function(t,e){if(!t&&!e)return this._enabled(!1,!1);for(var i=e?this.getTweensOf(e):this.getChildren(!0,!0,!1),n=i.length,r=!1;--n>-1;)i[n]._kill(t,e)&&(r=!0);return r},_.clear=function(t){var e=this.getChildren(!1,!0,!0),i=e.length;for(this._time=this._totalTime=0;--i>-1;)e[i]._enabled(!1,!1);return t!==!1&&(this._labels={}),this._uncache(!0)},_.invalidate=function(){for(var e=this._first;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},_._enabled=function(t,i){if(t===this._gc)for(var n=this._first;n;)n._enabled(t,!0),n=n._next;return e.prototype._enabled.call(this,t,i)},_.totalTime=function(e,i,n){this._forcingPlayhead=!0;var r=t.prototype.totalTime.apply(this,arguments);return this._forcingPlayhead=!1,r},_.duration=function(t){return arguments.length?(0!==this.duration()&&0!==t&&this.timeScale(this._duration/t),this):(this._dirty&&this.totalDuration(),this._duration)},_.totalDuration=function(t){if(!arguments.length){if(this._dirty){for(var e,i,n=0,r=this._last,s=999999999999;r;)e=r._prev,r._dirty&&r.totalDuration(),r._startTime>s&&this._sortChildren&&!r._paused?this.add(r,r._startTime-r._delay):s=r._startTime,r._startTime<0&&!r._paused&&(n-=r._startTime,this._timeline.smoothChildTiming&&(this._startTime+=r._startTime/this._timeScale),this.shiftChildren(-r._startTime,!1,-9999999999),s=0),i=r._startTime+r._totalDuration/r._timeScale,i>n&&(n=i),r=e;this._duration=this._totalDuration=n,this._dirty=!1}return this._totalDuration}return t&&this.totalDuration()?this.timeScale(this._totalDuration/t):this},_.paused=function(e){if(!e)for(var i=this._first,n=this._time;i;)i._startTime===n&&"isPause"===i.data&&(i._rawPrevTime=0),i=i._next;return t.prototype.paused.apply(this,arguments)},_.usesFrames=function(){for(var e=this._timeline;e._timeline;)e=e._timeline;return e===t._rootFramesTimeline},_.rawTime=function(){return this._paused?this._totalTime:(this._timeline.rawTime()-this._startTime)*this._timeScale},r},!0),i._gsDefine("TimelineMax",["TimelineLite","TweenLite","easing.Ease"],function(t,e,n){var r=function(e){t.call(this,e),this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._cycle=0,this._yoyo=this.vars.yoyo===!0,this._dirty=!0},s=1e-10,o=e._internals,a=o.lazyTweens,l=o.lazyRender,u=i._gsDefine.globals,h=new n(null,null,1,0),c=r.prototype=new t;return c.constructor=r,c.kill()._gc=!1,r.version="1.19.0",c.invalidate=function(){return this._yoyo=this.vars.yoyo===!0,this._repeat=this.vars.repeat||0,this._repeatDelay=this.vars.repeatDelay||0,this._uncache(!0),t.prototype.invalidate.call(this)},c.addCallback=function(t,i,n,r){return this.add(e.delayedCall(0,t,n,r),i)},c.removeCallback=function(t,e){if(t)if(null==e)this._kill(null,t);else for(var i=this.getTweensOf(t,!1),n=i.length,r=this._parseTimeOrLabel(e);--n>-1;)i[n]._startTime===r&&i[n]._enabled(!1,!1);return this},c.removePause=function(e){return this.removeCallback(t._internals.pauseCallback,e)},c.tweenTo=function(t,i){i=i||{};var n,r,s,o={ease:h,useFrames:this.usesFrames(),immediateRender:!1},a=i.repeat&&u.TweenMax||e;for(r in i)o[r]=i[r];return o.time=this._parseTimeOrLabel(t),n=Math.abs(Number(o.time)-this._time)/this._timeScale||.001,s=new a(this,n,o),o.onStart=function(){s.target.paused(!0),s.vars.time!==s.target.time()&&n===s.duration()&&s.duration(Math.abs(s.vars.time-s.target.time())/s.target._timeScale),i.onStart&&s._callback("onStart")},s},c.tweenFromTo=function(t,e,i){i=i||{},t=this._parseTimeOrLabel(t),i.startAt={onComplete:this.seek,onCompleteParams:[t],callbackScope:this},i.immediateRender=i.immediateRender!==!1;var n=this.tweenTo(e,i);return n.duration(Math.abs(n.vars.time-t)/this._timeScale||.001)},c.render=function(t,e,i){this._gc&&this._enabled(!0,!1);var n,r,o,u,h,c,f,p,d=this._dirty?this.totalDuration():this._totalDuration,m=this._duration,g=this._time,_=this._totalTime,v=this._startTime,y=this._timeScale,x=this._rawPrevTime,w=this._paused,b=this._cycle;if(t>=d-1e-7)this._locked||(this._totalTime=d,this._cycle=this._repeat),this._reversed||this._hasPausedChild()||(r=!0,u="onComplete",h=!!this._timeline.autoRemoveChildren,0===this._duration&&(t<=0&&t>=-1e-7||x<0||x===s)&&x!==t&&this._first&&(h=!0,x>s&&(u="onReverseComplete"))),this._rawPrevTime=this._duration||!e||t||this._rawPrevTime===t?t:s,this._yoyo&&0!==(1&this._cycle)?this._time=t=0:(this._time=m,t=m+1e-4);else if(t<1e-7)if(this._locked||(this._totalTime=this._cycle=0),this._time=0,(0!==g||0===m&&x!==s&&(x>0||t<0&&x>=0)&&!this._locked)&&(u="onReverseComplete",r=this._reversed),t<0)this._active=!1,this._timeline.autoRemoveChildren&&this._reversed?(h=r=!0,u="onReverseComplete"):x>=0&&this._first&&(h=!0),this._rawPrevTime=t;else{if(this._rawPrevTime=m||!e||t||this._rawPrevTime===t?t:s,0===t&&r)for(n=this._first;n&&0===n._startTime;)n._duration||(r=!1),n=n._next;t=0,this._initted||(h=!0)}else if(0===m&&x<0&&(h=!0),this._time=this._rawPrevTime=t,this._locked||(this._totalTime=t,0!==this._repeat&&(c=m+this._repeatDelay,this._cycle=this._totalTime/c>>0,0!==this._cycle&&this._cycle===this._totalTime/c&&_<=t&&this._cycle--,this._time=this._totalTime-this._cycle*c,this._yoyo&&0!==(1&this._cycle)&&(this._time=m-this._time),this._time>m?(this._time=m,t=m+1e-4):this._time<0?this._time=t=0:t=this._time)),this._hasPause&&!this._forcingPlayhead&&!e){if(t=this._time,t>=g)for(n=this._first;n&&n._startTime<=t&&!f;)n._duration||"isPause"!==n.data||n.ratio||0===n._startTime&&0===this._rawPrevTime||(f=n),n=n._next;else for(n=this._last;n&&n._startTime>=t&&!f;)n._duration||"isPause"===n.data&&n._rawPrevTime>0&&(f=n),n=n._prev;f&&(this._time=t=f._startTime,this._totalTime=t+this._cycle*(this._totalDuration+this._repeatDelay))}if(this._cycle!==b&&!this._locked){var T=this._yoyo&&0!==(1&b),P=T===(this._yoyo&&0!==(1&this._cycle)),k=this._totalTime,C=this._cycle,O=this._rawPrevTime,S=this._time;if(this._totalTime=b*m,this._cycle<b?T=!T:this._totalTime+=m,this._time=g,this._rawPrevTime=0===m?x-1e-4:x,this._cycle=b,this._locked=!0,g=T?0:m,this.render(g,e,0===m),e||this._gc||this.vars.onRepeat&&this._callback("onRepeat"),g!==this._time)return;if(P&&(g=T?m+1e-4:-1e-4,this.render(g,!0,!1)),this._locked=!1,this._paused&&!w)return;this._time=S,this._totalTime=k,this._cycle=C,this._rawPrevTime=O}if(!(this._time!==g&&this._first||i||h||f))return void(_!==this._totalTime&&this._onUpdate&&(e||this._callback("onUpdate")));if(this._initted||(this._initted=!0),this._active||!this._paused&&this._totalTime!==_&&t>0&&(this._active=!0),0===_&&this.vars.onStart&&(0===this._totalTime&&this._totalDuration||e||this._callback("onStart")),p=this._time,p>=g)for(n=this._first;n&&(o=n._next,p===this._time&&(!this._paused||w));)(n._active||n._startTime<=this._time&&!n._paused&&!n._gc)&&(f===n&&this.pause(),n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)),n=o;else for(n=this._last;n&&(o=n._prev,p===this._time&&(!this._paused||w));){if(n._active||n._startTime<=g&&!n._paused&&!n._gc){if(f===n){for(f=n._prev;f&&f.endTime()>this._time;)f.render(f._reversed?f.totalDuration()-(t-f._startTime)*f._timeScale:(t-f._startTime)*f._timeScale,e,i),f=f._prev;f=null,this.pause()}n._reversed?n.render((n._dirty?n.totalDuration():n._totalDuration)-(t-n._startTime)*n._timeScale,e,i):n.render((t-n._startTime)*n._timeScale,e,i)}n=o}this._onUpdate&&(e||(a.length&&l(),this._callback("onUpdate"))),u&&(this._locked||this._gc||v!==this._startTime&&y===this._timeScale||(0===this._time||d>=this.totalDuration())&&(r&&(a.length&&l(),this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[u]&&this._callback(u)))},c.getActive=function(t,e,i){null==t&&(t=!0),null==e&&(e=!0),null==i&&(i=!1);var n,r,s=[],o=this.getChildren(t,e,i),a=0,l=o.length;for(n=0;n<l;n++)r=o[n],r.isActive()&&(s[a++]=r);return s},c.getLabelAfter=function(t){t||0!==t&&(t=this._time);var e,i=this.getLabelsArray(),n=i.length;for(e=0;e<n;e++)if(i[e].time>t)return i[e].name;return null},c.getLabelBefore=function(t){null==t&&(t=this._time);for(var e=this.getLabelsArray(),i=e.length;--i>-1;)if(e[i].time<t)return e[i].name;return null},c.getLabelsArray=function(){var t,e=[],i=0;for(t in this._labels)e[i++]={time:this._labels[t],name:t};return e.sort(function(t,e){return t.time-e.time}),e},c.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(this._yoyo&&0!==(1&this._cycle)?1-t:t)+this._cycle*(this._duration+this._repeatDelay),e):this._time/this.duration()},c.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this._totalTime/this.totalDuration()},c.totalDuration=function(e){return arguments.length?this._repeat!==-1&&e?this.timeScale(this.totalDuration()/e):this:(this._dirty&&(t.prototype.totalDuration.call(this),this._totalDuration=this._repeat===-1?999999999999:this._duration*(this._repeat+1)+this._repeatDelay*this._repeat),this._totalDuration)},c.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),t>this._duration&&(t=this._duration),this._yoyo&&0!==(1&this._cycle)?t=this._duration-t+this._cycle*(this._duration+this._repeatDelay):0!==this._repeat&&(t+=this._cycle*(this._duration+this._repeatDelay)),this.totalTime(t,e)):this._time},c.repeat=function(t){return arguments.length?(this._repeat=t,this._uncache(!0)):this._repeat},c.repeatDelay=function(t){return arguments.length?(this._repeatDelay=t,this._uncache(!0)):this._repeatDelay},c.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},c.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.getLabelBefore(this._time+1e-8)},r},!0),function(){var t=180/Math.PI,e=[],n=[],r=[],s={},o=i._gsDefine.globals,a=function(t,e,i,n){i===n&&(i=n-(n-e)/1e6),t===e&&(e=t+(i-t)/1e6),this.a=t,this.b=e,this.c=i,this.d=n,this.da=n-t,this.ca=i-t,this.ba=e-t},l=",x,y,z,left,top,right,bottom,marginTop,marginLeft,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom,backgroundPosition,backgroundPosition_y,",u=function(t,e,i,n){var r={a:t},s={},o={},a={c:n},l=(t+e)/2,u=(e+i)/2,h=(i+n)/2,c=(l+u)/2,f=(u+h)/2,p=(f-c)/8;return r.b=l+(t-l)/4,s.b=c+p,r.c=s.a=(r.b+s.b)/2,s.c=o.a=(c+f)/2,o.b=f-p,a.b=h+(n-h)/4,o.c=a.a=(o.b+a.b)/2,[r,s,o,a]},h=function(t,i,s,o,a){var l,h,c,f,p,d,m,g,_,v,y,x,w,b=t.length-1,T=0,P=t[0].a;for(l=0;l<b;l++)p=t[T],h=p.a,c=p.d,f=t[T+1].d,a?(y=e[l],x=n[l],w=(x+y)*i*.25/(o?.5:r[l]||.5),d=c-(c-h)*(o?.5*i:0!==y?w/y:0),m=c+(f-c)*(o?.5*i:0!==x?w/x:0),g=c-(d+((m-d)*(3*y/(y+x)+.5)/4||0))):(d=c-(c-h)*i*.5,m=c+(f-c)*i*.5,g=c-(d+m)/2),d+=g,m+=g,p.c=_=d,0!==l?p.b=P:p.b=P=p.a+.6*(p.c-p.a),p.da=c-h,p.ca=_-h,p.ba=P-h,s?(v=u(h,P,_,c),t.splice(T,1,v[0],v[1],v[2],v[3]),T+=4):T++,P=m;p=t[T],p.b=P,p.c=P+.4*(p.d-P),p.da=p.d-p.a,p.ca=p.c-p.a,p.ba=P-p.a,s&&(v=u(p.a,P,p.c,p.d),t.splice(T,1,v[0],v[1],v[2],v[3]))},c=function(t,i,r,s){var o,l,u,h,c,f,p=[];if(s)for(t=[s].concat(t),l=t.length;--l>-1;)"string"==typeof(f=t[l][i])&&"="===f.charAt(1)&&(t[l][i]=s[i]+Number(f.charAt(0)+f.substr(2)));if(o=t.length-2,o<0)return p[0]=new a(t[0][i],0,0,t[o<-1?0:1][i]),p;for(l=0;l<o;l++)u=t[l][i],h=t[l+1][i],p[l]=new a(u,0,0,h),r&&(c=t[l+2][i],e[l]=(e[l]||0)+(h-u)*(h-u),n[l]=(n[l]||0)+(c-h)*(c-h));return p[l]=new a(t[l][i],0,0,t[l+1][i]),p},f=function(t,i,o,a,u,f){var p,d,m,g,_,v,y,x,w={},b=[],T=f||t[0];u="string"==typeof u?","+u+",":l,null==i&&(i=1);for(d in t[0])b.push(d);if(t.length>1){for(x=t[t.length-1],y=!0,p=b.length;--p>-1;)if(d=b[p],Math.abs(T[d]-x[d])>.05){y=!1;break}y&&(t=t.concat(),f&&t.unshift(f),t.push(t[1]),f=t[t.length-3])}for(e.length=n.length=r.length=0,p=b.length;--p>-1;)d=b[p],s[d]=u.indexOf(","+d+",")!==-1,w[d]=c(t,d,s[d],f);for(p=e.length;--p>-1;)e[p]=Math.sqrt(e[p]),n[p]=Math.sqrt(n[p]);if(!a){for(p=b.length;--p>-1;)if(s[d])for(m=w[b[p]],v=m.length-1,g=0;g<v;g++)_=m[g+1].da/n[g]+m[g].da/e[g]||0,r[g]=(r[g]||0)+_*_;for(p=r.length;--p>-1;)r[p]=Math.sqrt(r[p])}for(p=b.length,g=o?4:1;--p>-1;)d=b[p],m=w[d],h(m,i,o,a,s[d]),y&&(m.splice(0,g),m.splice(m.length-g,g));return w},p=function(t,e,i){e=e||"soft";var n,r,s,o,l,u,h,c,f,p,d,m={},g="cubic"===e?3:2,_="soft"===e,v=[];if(_&&i&&(t=[i].concat(t)),null==t||t.length<g+1)throw"invalid Bezier data";for(f in t[0])v.push(f);for(u=v.length;--u>-1;){for(f=v[u],m[f]=l=[],p=0,c=t.length,h=0;h<c;h++)n=null==i?t[h][f]:"string"==typeof(d=t[h][f])&&"="===d.charAt(1)?i[f]+Number(d.charAt(0)+d.substr(2)):Number(d),_&&h>1&&h<c-1&&(l[p++]=(n+l[p-2])/2),l[p++]=n;for(c=p-g+1,p=0,h=0;h<c;h+=g)n=l[h],r=l[h+1],s=l[h+2],o=2===g?0:l[h+3],l[p++]=d=3===g?new a(n,r,s,o):new a(n,(2*r+n)/3,(2*r+s)/3,s);l.length=p}return m},d=function(t,e,i){for(var n,r,s,o,a,l,u,h,c,f,p,d=1/i,m=t.length;--m>-1;)for(f=t[m],s=f.a,o=f.d-s,a=f.c-s,l=f.b-s,n=r=0,h=1;h<=i;h++)u=d*h,c=1-u,n=r-(r=(u*u*o+3*c*(u*a+c*l))*u),p=m*i+h-1,e[p]=(e[p]||0)+n*n},m=function(t,e){e=e>>0||6;var i,n,r,s,o=[],a=[],l=0,u=0,h=e-1,c=[],f=[];
for(i in t)d(t[i],o,e);for(r=o.length,n=0;n<r;n++)l+=Math.sqrt(o[n]),s=n%e,f[s]=l,s===h&&(u+=l,s=n/e>>0,c[s]=f,a[s]=u,l=0,f=[]);return{length:u,lengths:a,segments:c}},g=i._gsDefine.plugin({propName:"bezier",priority:-1,version:"1.3.7",API:2,global:!0,init:function(t,e,i){this._target=t,e instanceof Array&&(e={values:e}),this._func={},this._mod={},this._props=[],this._timeRes=null==e.timeResolution?6:parseInt(e.timeResolution,10);var n,r,s,o,a,l=e.values||[],u={},h=l[0],c=e.autoRotate||i.vars.orientToBezier;this._autoRotate=c?c instanceof Array?c:[["x","y","rotation",c===!0?0:Number(c)||0]]:null;for(n in h)this._props.push(n);for(s=this._props.length;--s>-1;)n=this._props[s],this._overwriteProps.push(n),r=this._func[n]="function"==typeof t[n],u[n]=r?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():parseFloat(t[n]),a||u[n]!==l[0][n]&&(a=u);if(this._beziers="cubic"!==e.type&&"quadratic"!==e.type&&"soft"!==e.type?f(l,isNaN(e.curviness)?1:e.curviness,!1,"thruBasic"===e.type,e.correlate,a):p(l,e.type,u),this._segCount=this._beziers[n].length,this._timeRes){var d=m(this._beziers,this._timeRes);this._length=d.length,this._lengths=d.lengths,this._segments=d.segments,this._l1=this._li=this._s1=this._si=0,this._l2=this._lengths[0],this._curSeg=this._segments[0],this._s2=this._curSeg[0],this._prec=1/this._curSeg.length}if(c=this._autoRotate)for(this._initialRotations=[],c[0]instanceof Array||(this._autoRotate=c=[c]),s=c.length;--s>-1;){for(o=0;o<3;o++)n=c[s][o],this._func[n]="function"==typeof t[n]&&t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)];n=c[s][2],this._initialRotations[s]=(this._func[n]?this._func[n].call(this._target):this._target[n])||0,this._overwriteProps.push(n)}return this._startRatio=i.vars.runBackwards?1:0,!0},set:function(e){var i,n,r,s,o,a,l,u,h,c,f=this._segCount,p=this._func,d=this._target,m=e!==this._startRatio;if(this._timeRes){if(h=this._lengths,c=this._curSeg,e*=this._length,r=this._li,e>this._l2&&r<f-1){for(u=f-1;r<u&&(this._l2=h[++r])<=e;);this._l1=h[r-1],this._li=r,this._curSeg=c=this._segments[r],this._s2=c[this._s1=this._si=0]}else if(e<this._l1&&r>0){for(;r>0&&(this._l1=h[--r])>=e;);0===r&&e<this._l1?this._l1=0:r++,this._l2=h[r],this._li=r,this._curSeg=c=this._segments[r],this._s1=c[(this._si=c.length-1)-1]||0,this._s2=c[this._si]}if(i=r,e-=this._l1,r=this._si,e>this._s2&&r<c.length-1){for(u=c.length-1;r<u&&(this._s2=c[++r])<=e;);this._s1=c[r-1],this._si=r}else if(e<this._s1&&r>0){for(;r>0&&(this._s1=c[--r])>=e;);0===r&&e<this._s1?this._s1=0:r++,this._s2=c[r],this._si=r}a=(r+(e-this._s1)/(this._s2-this._s1))*this._prec||0}else i=e<0?0:e>=1?f-1:f*e>>0,a=(e-i*(1/f))*f;for(n=1-a,r=this._props.length;--r>-1;)s=this._props[r],o=this._beziers[s][i],l=(a*a*o.da+3*n*(a*o.ca+n*o.ba))*a+o.a,this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l;if(this._autoRotate){var g,_,v,y,x,w,b,T=this._autoRotate;for(r=T.length;--r>-1;)s=T[r][2],w=T[r][3]||0,b=T[r][4]===!0?1:t,o=this._beziers[T[r][0]],g=this._beziers[T[r][1]],o&&g&&(o=o[i],g=g[i],_=o.a+(o.b-o.a)*a,y=o.b+(o.c-o.b)*a,_+=(y-_)*a,y+=(o.c+(o.d-o.c)*a-y)*a,v=g.a+(g.b-g.a)*a,x=g.b+(g.c-g.b)*a,v+=(x-v)*a,x+=(g.c+(g.d-g.c)*a-x)*a,l=m?Math.atan2(x-v,y-_)*b+w:this._initialRotations[r],this._mod[s]&&(l=this._mod[s](l,d)),p[s]?d[s](l):d[s]=l)}}}),_=g.prototype;g.bezierThrough=f,g.cubicToQuadratic=u,g._autoCSS=!0,g.quadraticToCubic=function(t,e,i){return new a(t,(2*e+t)/3,(2*e+i)/3,i)},g._cssRegister=function(){var t=o.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,r=e.CSSPropTween;e._registerComplexSpecialProp("bezier",{parser:function(t,e,s,o,a,l){e instanceof Array&&(e={values:e}),l=new g;var u,h,c,f=e.values,p=f.length-1,d=[],m={};if(p<0)return a;for(u=0;u<=p;u++)c=i(t,f[u],o,a,l,p!==u),d[u]=c.end;for(h in e)m[h]=e[h];return m.values=d,a=new r(t,"bezier",0,0,c.pt,2),a.data=c,a.plugin=l,a.setRatio=n,0===m.autoRotate&&(m.autoRotate=!0),!m.autoRotate||m.autoRotate instanceof Array||(u=m.autoRotate===!0?0:Number(m.autoRotate),m.autoRotate=null!=c.end.left?[["left","top","rotation",u,!1]]:null!=c.end.x&&[["x","y","rotation",u,!1]]),m.autoRotate&&(o._transform||o._enableTransforms(!1),c.autoRotate=o._target._gsTransform,c.proxy.rotation=c.autoRotate.rotation||0,o._overwriteProps.push("rotation")),l._onInitTween(c.proxy,m,o._tween),a}})}},_._mod=function(t){for(var e,i=this._overwriteProps,n=i.length;--n>-1;)e=t[i[n]],e&&"function"==typeof e&&(this._mod[i[n]]=e)},_._kill=function(t){var e,i,n=this._props;for(e in this._beziers)if(e in t)for(delete this._beziers[e],delete this._func[e],i=n.length;--i>-1;)n[i]===e&&n.splice(i,1);if(n=this._autoRotate)for(i=n.length;--i>-1;)t[n[i][2]]&&n.splice(i,1);return this._super._kill.call(this,t)}}(),i._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var n,r,s,o,a=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},l=i._gsDefine.globals,u={},h=a.prototype=new t("css");h.constructor=a,a.version="1.19.0",a.API=2,a.defaultTransformPerspective=0,a.defaultSkewType="compensated",a.defaultSmoothOrigin=!0,h="px",a.suffixMap={top:h,right:h,bottom:h,left:h,width:h,height:h,fontSize:h,padding:h,margin:h,perspective:h,lineHeight:""};var c,f,p,d,m,g,_,v,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,x=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,w=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,T=/(?:\d|\-|\+|=|#|\.)*/g,P=/opacity *= *([^)]*)/i,k=/opacity:([^;]*)/i,C=/alpha\(opacity *=.+?\)/i,O=/^(rgb|hsl)/,S=/([A-Z])/g,A=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,D=function(t,e){return e.toUpperCase()},N=/(?:Left|Right|Width)/i,M=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,E=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,F=/,(?=[^\)]*(?:\(|$))/gi,L=/[\s,\(]/i,j=Math.PI/180,X=180/Math.PI,I={},z=document,B=function(t){return z.createElementNS?z.createElementNS("http://www.w3.org/1999/xhtml",t):z.createElement(t)},Y=B("div"),q=B("img"),W=a._internals={_specialProps:u},V=navigator.userAgent,H=function(){var t=V.indexOf("Android"),e=B("a");return p=V.indexOf("Safari")!==-1&&V.indexOf("Chrome")===-1&&(t===-1||Number(V.substr(t+8,1))>3),m=p&&Number(V.substr(V.indexOf("Version/")+8,1))<6,d=V.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(V)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(V))&&(g=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),U=function(t){return P.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},$=function(t){window.console&&console.log(t)},G="",Z="",Q=function(t,e){e=e||Y;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Z=3===n?"ms":i[n],G="-"+Z.toLowerCase()+"-",Z+t):null},K=z.defaultView?z.defaultView.getComputedStyle:function(){},J=a.getStyle=function(t,e,i,n,r){var s;return H||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(S,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):U(t)},tt=W.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var o,l,u,h=N.test(i),c=t,f=Y.style,p=n<0,d=1===n;if(p&&(n=-n),d&&(n*=100),"%"===r&&i.indexOf("border")!==-1)o=n/100*(h?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[h?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(c=t.parentNode||z.body,l=c._gsCache,u=e.ticker.frame,l&&h&&l.time===u)return l.width*n/100;f[h?"width":"height"]=n+r}c.appendChild(Y),o=parseFloat(Y[h?"offsetWidth":"offsetHeight"]),c.removeChild(Y),h&&"%"===r&&a.cacheWidths!==!1&&(l=c._gsCache=c._gsCache||{},l.time=u,l.width=o/n*100),0!==o||s||(o=tt(t,i,n,r,!0))}return d&&(o/=100),p?-o:o},et=W.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(T,""))||0)},it=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)r=e[i],r.indexOf("-transform")!==-1&&At!==r||(s[r.replace(A,D)]=e.getPropertyValue(r));else for(i in e)i.indexOf("Transform")!==-1&&St!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(A,D)]=e[i]);return H||(s.opacity=U(t)),n=Yt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Dt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},nt=function(t,e,i,n,r){var s,o,a,l={},u=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&o.indexOf("Origin")===-1&&("number"!=typeof s&&"string"!=typeof s||(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(b,"")?s:0:et(t,o),void 0!==u[o]&&(a=new vt(u,o,u[o],a))));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},rt={width:["Left","Right"],height:["Top","Bottom"]},st=["marginLeft","marginRight","marginTop","marginBottom"],ot=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getBBox&&It(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(J(t,"padding"+r[s],i,!0))||0,n-=parseFloat(J(t,"border"+r[s]+"Width",i,!0))||0;return n},at=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":n[0],s=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(at(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&(r+"").indexOf("=")===-1)&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=r.indexOf("%")!==-1,e.oyp=s.indexOf("%")!==-1,e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ut=function(t,e){return"function"==typeof t&&(t=t(v,_)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ht=function(t,e,i,n){var r,s,o,a,l,u=1e-6;return"function"==typeof t&&(t=t(v,_)),null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),l="="===t.charAt(1),o=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(t.indexOf("rad")===-1?1:X)-(l?0:e),s.length&&(n&&(n[i]=e+o),t.indexOf("short")!==-1&&(o%=r,o!==o%(r/2)&&(o=o<0?o+r:o-r)),t.indexOf("_cw")!==-1&&o<0?o=(o+9999999999*r)%r-(o/r|0)*r:t.indexOf("ccw")!==-1&&o>0&&(o=(o-9999999999*r)%r-(o/r|0)*r)),a=e+o),a<u&&a>-u&&(a=0),a},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},pt=a.parseColor=function(t,e){var i,n,r,s,o,a,l,u,h,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(t.indexOf("=")!==-1)return t.match(x)}else o=Number(i[0])%360/360,a=Number(i[1])/100,l=Number(i[2])/100,r=l<=.5?l*(a+1):l+a-l*a,n=2*l-r,i.length>3&&(i[3]=Number(t[3])),i[0]=ft(o+1/3,n,r),i[1]=ft(o,n,r),i[2]=ft(o-1/3,n,r);else i=t.match(y)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,u=Math.max(n,r,s),h=Math.min(n,r,s),l=(u+h)/2,u===h?o=a=0:(c=u-h,a=l>.5?c/(2-u-h):c/(u+h),o=u===n?(r-s)/c+(r<s?6:0):u===r?(s-n)/c+2:(n-r)/c+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(mt)||[],o=0,a=s.length?"":t;for(i=0;i<s.length;i++)n=s[i],r=t.substr(o,t.indexOf(n,o)-o),o+=r.length+n.length,n=pt(n,e),3===n.length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},mt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(h in ct)mt+="|"+h+"\\b";mt=new RegExp(mt+")","gi"),a.colorStringFilter=function(t){var e,i=t[0]+t[1];mt.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=dt(t[0],e),t[1]=dt(t[1],e)),mt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=a.colorStringFilter);var gt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(mt)||[""])[0]:"",o=t.split(s).join("").match(w)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",u=t.indexOf(" ")!==-1?" ":",",h=o.length,c=h>0?o[0].replace(y,""):"";return h?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&F.test(t)){for(d=t.replace(F,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(mt)||[s])[0],f=t.split(e).join("").match(w)||[],p=f.length,h>p--)for(;++p<h;)f[p]=i?f[(p-1)/2|0]:o[p];return a+f.join(u)+u+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&F.test(t)){for(s=t.replace(F,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(e=t.match(w)||[],f=e.length,h>f--)for(;++f<h;)e[f]=i?e[(f-1)/2|0]:o[f];return a+e.join(u)+l}:function(t){return t}},_t=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,u=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=u[l]=u[l]||u[(l-1)/2>>0];return r.parse(e,a,s,o)}},vt=(W._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,l=o.firstMPT,u=1e-6;l;)e=a[l.v],l.r?e=Math.round(e):e<u&&e>-u&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod(a.rotation,this.t):a.rotation),1===t||0===t)for(l=o.firstMPT,s=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(W._parseToProxy=function(t,e,i,n,r,s){var o,a,l,u,h,c=n,f={},p={},d=i._transform,m=I;for(i._transform=null,I=e,n=h=i.parse(t,e,n,r),I=m,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(a=n.p,p[a]=n.s+n.c,f[a]=n.s,s||(u=new vt(n,"s",a,u,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,a=n.p+"_"+l,p[a]=n.data[l],f[a]=n[l],s||(u=new vt(n,l,a,u,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:u,pt:h}},W.CSSPropTween=function(t,e,i,r,s,a,l,u,h,c,f){this.t=t,this.p=e,this.s=i,this.c=r,this.n=l||e,t instanceof yt||o.push(this.n),this.r=u,this.type=a||0,h&&(this.pr=h,n=!0),this.b=void 0===c?i:c,this.e=void 0===f?i+r:f,s&&(this._next=s,s._prev=this)}),xt=function(t,e,i,n,r,s){var o=new yt(t,e,i,n-i,r,(-1),s);return o.b=i,o.e=o.xs0=n,o},wt=a.parseComplex=function(t,e,i,n,r,s,o,l,u,h){i=i||s||"","function"==typeof n&&(n=n(v,_)),o=new yt(t,e,0,0,o,h?2:1,null,(!1),l,i,n),n+="",r&&mt.test(n+i)&&(n=[i,n],a.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,m,g,w,b,T,P,k,C,O,S,A=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),D=A.length,N=c!==!1;for(n.indexOf(",")===-1&&i.indexOf(",")===-1||(A=A.join(" ").replace(F,", ").split(" "),R=R.join(" ").replace(F,", ").split(" "),D=A.length),D!==R.length&&(A=(s||"").split(" "),D=A.length),o.plugin=u,o.setRatio=h,mt.lastIndex=0,f=0;f<D;f++)if(m=A[f],g=R[f],T=parseFloat(m),T||0===T)o.appendXtra("",T,lt(g,T),g.replace(x,""),N&&g.indexOf("px")!==-1,!0);else if(r&&mt.test(m))O=g.indexOf(")")+1,O=")"+(O?g.substr(O):""),S=g.indexOf("hsl")!==-1&&H,m=pt(m,S),g=pt(g,S),P=m.length+g.length>6,P&&!H&&0===g[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(R[f]).join("transparent")):(H||(P=!1),S?o.appendXtra(P?"hsla(":"hsl(",m[0],lt(g[0],m[0]),",",!1,!0).appendXtra("",m[1],lt(g[1],m[1]),"%,",!1).appendXtra("",m[2],lt(g[2],m[2]),P?"%,":"%"+O,!1):o.appendXtra(P?"rgba(":"rgb(",m[0],g[0]-m[0],",",!0,!0).appendXtra("",m[1],g[1]-m[1],",",!0).appendXtra("",m[2],g[2]-m[2],P?",":O,!0),P&&(m=m.length<4?1:m[3],o.appendXtra("",m,(g.length<4?1:g[3])-m,O,!1))),mt.lastIndex=0;else if(w=m.match(y)){if(b=g.match(x),!b||b.length!==w.length)return o;for(d=0,p=0;p<w.length;p++)C=w[p],k=m.indexOf(C,d),o.appendXtra(m.substr(d,k-d),Number(C),lt(b[p],C),"",N&&"px"===m.substr(k+C.length,2),0===p),d=k+C.length;o["xs"+o.l]+=m.substr(d)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+g:g;if(n.indexOf("=")!==-1&&o.data){for(O=o.xs0+o.data.s,f=1;f<o.l;f++)O+=o["xs"+f]+o.data["xn"+f];o.e=O+o["xs"+f]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},bt=9;for(h=yt.prototype,h.l=h.pr=0;--bt>0;)h["xn"+bt]=0,h["xs"+bt]="";h.xs0="",h._next=h._prev=h.xfirst=h.data=h.plugin=h.setRatio=h.rxp=null,h.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new yt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var Tt=function(t,e){e=e||{},this.p=e.prefix?Q(t)||t:t,u[t]=u[this.p]=this,this.format=e.formatter||gt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=W._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;n<s.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,r=new Tt(s[n],e)},kt=W._registerPluginProp=function(t){if(!u[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,o,a){var h=l.com.greensock.plugins[e];return h?(h._cssRegister(),u[n].parse(t,i,n,r,s,o,a)):($("Error: "+e+" js file not loaded."),s)}})}};h=Tt.prototype,h.parseComplex=function(t,e,i,n,r,s){var o,a,l,u,h,c,f=this.keyword;if(this.multi&&(F.test(i)||F.test(e)?(a=e.replace(F,"|").split("|"),l=i.replace(F,"|").split("|")):f&&(a=[e],l=[i])),l){for(u=l.length>a.length?l.length:a.length,o=0;o<u;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(h=e.indexOf(f),c=i.indexOf(f),h!==c&&(c===-1?a[o]=a[o].split(f).join(""):h===-1&&(a[o]+=" "+f)));e=a.join(", "),i=l.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},h.parse=function(t,e,i,n,r,o,a){return this.parseComplex(t.style,this.format(J(t,this.p,s,!1,this.dflt)),this.format(e),r,o)},a.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,o,a,l){var u=new yt(t,r,0,0,o,2,r,(!1),i);return u.plugin=a,u.setRatio=e(t,n,s._tween,r),u},priority:i})},a.useSVGTransformAttr=p||d;var Ct,Ot="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),St=Q("transform"),At=G+"transform",Rt=Q("transformOrigin"),Dt=null!==Q("perspective"),Nt=W.Transform=function(){this.perspective=parseFloat(a.defaultTransformPerspective)||0,this.force3D=!(a.defaultForce3D===!1||!Dt)&&(a.defaultForce3D||"auto")},Mt=window.SVGElement,Et=function(t,e,i){var n,r=z.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Ft=z.documentElement,Lt=function(){var t,e,i,n=g||/Android/i.test(V)&&!window.chrome;return z.createElementNS&&!n&&(t=Et("svg",Ft),e=Et("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[St]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Ft.removeChild(t)),n}(),jt=function(t,e,i,n,r,s){var o,l,u,h,c,f,p,d,m,g,_,v,y,x,w=t._gsTransform,b=Bt(t,!0);w&&(y=w.xOrigin,x=w.yOrigin),(!n||(o=n.split(" ")).length<2)&&(p=t.getBBox(),e=at(e).split(" "),o=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=h=parseFloat(o[0]),i.yOrigin=c=parseFloat(o[1]),n&&b!==zt&&(f=b[0],p=b[1],d=b[2],m=b[3],g=b[4],_=b[5],v=f*m-p*d,l=h*(m/v)+c*(-d/v)+(d*_-m*g)/v,u=h*(-p/v)+c*(f/v)-(f*_-p*g)/v,h=i.xOrigin=o[0]=l,c=i.yOrigin=o[1]=u),w&&(s&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),r||r!==!1&&a.defaultSmoothOrigin!==!1?(l=h-y,u=c-x,w.xOffset+=l*b[0]+u*b[2]-l,w.yOffset+=l*b[1]+u*b[3]-u):w.xOffset=w.yOffset=0),s||t.setAttribute("data-svg-origin",o.join(" "))},Xt=function(t){try{return t.getBBox()}catch(t){}},It=function(t){return!!(Mt&&t.getBBox&&t.getCTM&&Xt(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},zt=[1,0,0,1,0,0],Bt=function(t,e){var i,n,r,s,o,a,l=t._gsTransform||new Nt,u=1e5,h=t.style;if(St?n=J(t,At,null,!0):t.currentStyle&&(n=t.currentStyle.filter.match(M),n=n&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,i&&St&&((a="none"===K(t).display)||!t.parentNode)&&(a&&(s=h.display,h.display="block"),t.parentNode||(o=1,Ft.appendChild(t)),n=J(t,At,null,!0),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?h.display=s:a&&Ht(h,"display"),o&&Ft.removeChild(t)),(l.svg||t.getBBox&&It(t))&&(i&&(h[St]+"").indexOf("matrix")!==-1&&(n=h[St],i=0),r=t.getAttribute("transform"),i&&r&&(r.indexOf("matrix")!==-1?(n=r,i=0):r.indexOf("translate")!==-1&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return zt;for(r=(n||"").match(y)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(o=s-(s|=0))?(o*u+(o<0?-.5:.5)|0)/u+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Yt=W.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var s,o,l,u,h,c,f=n?t._gsTransform||new Nt:new Nt,p=f.scaleX<0,d=2e-5,m=1e5,g=Dt?parseFloat(J(t,Rt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,_=parseFloat(a.defaultTransformPerspective)||0;if(f.svg=!(!t.getBBox||!It(t)),f.svg&&(jt(t,J(t,Rt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),Ct=a.useSVGTransformAttr||Lt),s=Bt(t),s!==zt){if(16===s.length){var v,y,x,w,b,T=s[0],P=s[1],k=s[2],C=s[3],O=s[4],S=s[5],A=s[6],R=s[7],D=s[8],N=s[9],M=s[10],E=s[12],F=s[13],L=s[14],j=s[11],I=Math.atan2(A,M);f.zOrigin&&(L=-f.zOrigin,E=D*L-s[12],F=N*L-s[13],L=M*L+f.zOrigin-s[14]),f.rotationX=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),v=O*w+D*b,y=S*w+N*b,x=A*w+M*b,D=O*-b+D*w,N=S*-b+N*w,M=A*-b+M*w,j=R*-b+j*w,O=v,S=y,A=x),I=Math.atan2(-k,M),f.rotationY=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),v=T*w-D*b,y=P*w-N*b,x=k*w-M*b,N=P*b+N*w,M=k*b+M*w,j=C*b+j*w,T=v,P=y,k=x),I=Math.atan2(P,T),f.rotation=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),T=T*w+O*b,y=P*w+S*b,S=P*-b+S*w,A=k*-b+A*w,P=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),f.scaleX=(Math.sqrt(T*T+P*P)*m+.5|0)/m,f.scaleY=(Math.sqrt(S*S+N*N)*m+.5|0)/m,f.scaleZ=(Math.sqrt(A*A+M*M)*m+.5|0)/m,f.rotationX||f.rotationY?f.skewX=0:(f.skewX=O||S?Math.atan2(O,S)*X+f.rotation:f.skewX||0,Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180))),f.perspective=j?1/(j<0?-j:j):0,f.x=E,f.y=F,f.z=L,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*T-f.yOrigin*O),f.y-=f.yOrigin-(f.yOrigin*P-f.xOrigin*S))}else if(!Dt||r||!s.length||f.x!==s[4]||f.y!==s[5]||!f.rotationX&&!f.rotationY){var z=s.length>=6,B=z?s[0]:1,Y=s[1]||0,q=s[2]||0,W=z?s[3]:1;f.x=s[4]||0,f.y=s[5]||0,l=Math.sqrt(B*B+Y*Y),u=Math.sqrt(W*W+q*q),h=B||Y?Math.atan2(Y,B)*X:f.rotation||0,c=q||W?Math.atan2(q,W)*X+h:f.skewX||0,Math.abs(c)>90&&Math.abs(c)<270&&(p?(l*=-1,c+=h<=0?180:-180,h+=h<=0?180:-180):(u*=-1,c+=c<=0?180:-180)),f.scaleX=l,f.scaleY=u,f.rotation=h,f.skewX=c,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*B+f.yOrigin*q),f.y-=f.yOrigin-(f.xOrigin*Y+f.yOrigin*W))}f.zOrigin=g;for(o in f)f[o]<d&&f[o]>-d&&(f[o]=0)}return n&&(t._gsTransform=f,f.svg&&(Ct&&t.style[St]?e.delayedCall(.001,function(){Ht(t.style,St)}):!Ct&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},qt=function(t){var e,i,n=this.data,r=-n.rotation*j,s=r+n.skewX*j,o=1e5,a=(Math.cos(r)*n.scaleX*o|0)/o,l=(Math.sin(r)*n.scaleX*o|0)/o,u=(Math.sin(s)*-n.scaleY*o|0)/o,h=(Math.cos(s)*n.scaleY*o|0)/o,c=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-u,u=-i,e=f.filter,c.filter="";var p,d,m=this.t.offsetWidth,_=this.t.offsetHeight,v="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+u+", M22="+h,x=n.x+m*n.xPercent/100,w=n.y+_*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?m*n.ox*.01:n.ox)-m/2,d=(n.oyp?_*n.oy*.01:n.oy)-_/2,x+=p-(p*a+d*l),w+=d-(p*u+d*h)),v?(p=m/2,d=_/2,y+=", Dx="+(p-(p*a+d*l)+x)+", Dy="+(d-(p*u+d*h)+w)+")"):y+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?c.filter=e.replace(E,y):c.filter=y+" "+e,0!==t&&1!==t||1===a&&0===l&&0===u&&1===h&&(v&&y.indexOf("Dx=0, Dy=0")===-1||P.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&c.removeAttribute("filter")),!v){var b,k,C,O=g<8?1:-1;for(p=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((m-((a<0?-a:a)*m+(l<0?-l:l)*_))/2+x),n.ieOffsetY=Math.round((_-((h<0?-h:h)*_+(u<0?-u:u)*m))/2+w),bt=0;bt<4;bt++)k=st[bt],b=f[k],i=b.indexOf("px")!==-1?parseFloat(b):tt(this.t,k,parseFloat(b),b.replace(T,""))||0,C=i!==n[k]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?p-n.ieOffsetX:d-n.ieOffsetY,c[k]=(n[k]=Math.round(i-C*(0===bt||2===bt?1:O)))+"px"}}},Wt=W.set3DTransformRatio=W.setTransformRatio=function(t){var e,i,n,r,s,o,a,l,u,h,c,f,p,m,g,_,v,y,x,w,b,T,P,k=this.data,C=this.t.style,O=k.rotation,S=k.rotationX,A=k.rotationY,R=k.scaleX,D=k.scaleY,N=k.scaleZ,M=k.x,E=k.y,F=k.z,L=k.svg,X=k.perspective,I=k.force3D;if(((1===t||0===t)&&"auto"===I&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!I)&&!F&&!X&&!A&&!S&&1===N||Ct&&L||!Dt)return void(O||k.skewX||L?(O*=j,T=k.skewX*j,P=1e5,e=Math.cos(O)*R,r=Math.sin(O)*R,i=Math.sin(O-T)*-D,s=Math.cos(O-T)*D,T&&"simple"===k.skewType&&(v=Math.tan(T-k.skewY*j),v=Math.sqrt(1+v*v),i*=v,s*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v)),L&&(M+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,E+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset,Ct&&(k.xPercent||k.yPercent)&&(m=this.t.getBBox(),M+=.01*k.xPercent*m.width,E+=.01*k.yPercent*m.height),m=1e-6,M<m&&M>-m&&(M=0),E<m&&E>-m&&(E=0)),x=(e*P|0)/P+","+(r*P|0)/P+","+(i*P|0)/P+","+(s*P|0)/P+","+M+","+E+")",L&&Ct?this.t.setAttribute("transform","matrix("+x):C[St]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+x):C[St]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+D+","+M+","+E+")");if(d&&(m=1e-4,R<m&&R>-m&&(R=N=2e-5),D<m&&D>-m&&(D=N=2e-5),!X||k.z||k.rotationX||k.rotationY||(X=0)),O||k.skewX)O*=j,g=e=Math.cos(O),_=r=Math.sin(O),k.skewX&&(O-=k.skewX*j,g=Math.cos(O),_=Math.sin(O),"simple"===k.skewType&&(v=Math.tan((k.skewX-k.skewY)*j),v=Math.sqrt(1+v*v),g*=v,_*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v))),i=-_,s=g;else{if(!(A||S||1!==N||X||L))return void(C[St]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) translate3d(":"translate3d(")+M+"px,"+E+"px,"+F+"px)"+(1!==R||1!==D?" scale("+R+","+D+")":""));e=s=1,i=r=0}u=1,n=o=a=l=h=c=0,f=X?-1/X:0,p=k.zOrigin,m=1e-6,w=",",b="0",O=A*j,O&&(g=Math.cos(O),_=Math.sin(O),a=-_,h=f*-_,n=e*_,o=r*_,u=g,f*=g,e*=g,r*=g),O=S*j,O&&(g=Math.cos(O),_=Math.sin(O),v=i*g+n*_,y=s*g+o*_,l=u*_,c=f*_,n=i*-_+n*g,o=s*-_+o*g,u*=g,f*=g,i=v,s=y),1!==N&&(n*=N,o*=N,u*=N,f*=N),1!==D&&(i*=D,s*=D,l*=D,c*=D),1!==R&&(e*=R,r*=R,a*=R,h*=R),(p||L)&&(p&&(M+=n*-p,E+=o*-p,F+=u*-p+p),L&&(M+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,E+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset),M<m&&M>-m&&(M=b),E<m&&E>-m&&(E=b),F<m&&F>-m&&(F=0)),x=k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix3d(":"matrix3d(",x+=(e<m&&e>-m?b:e)+w+(r<m&&r>-m?b:r)+w+(a<m&&a>-m?b:a),x+=w+(h<m&&h>-m?b:h)+w+(i<m&&i>-m?b:i)+w+(s<m&&s>-m?b:s),S||A||1!==N?(x+=w+(l<m&&l>-m?b:l)+w+(c<m&&c>-m?b:c)+w+(n<m&&n>-m?b:n),x+=w+(o<m&&o>-m?b:o)+w+(u<m&&u>-m?b:u)+w+(f<m&&f>-m?b:f)+w):x+=",0,0,0,0,1,0,",x+=M+w+E+w+F+w+(X?1+-F/X:1)+")",C[St]=x};h=Nt.prototype,h.x=h.y=h.z=h.skewX=h.skewY=h.rotation=h.rotationX=h.rotationY=h.zOrigin=h.xPercent=h.yPercent=h.xOffset=h.yOffset=0,h.scaleX=h.scaleY=h.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,r,o,l){if(n._lastParsedTransform===l)return r;n._lastParsedTransform=l;var u;"function"==typeof l[i]&&(u=l[i],l[i]=e);var h,c,f,p,d,m,g,y,x,w=t._gsTransform,b=t.style,T=1e-6,P=Ot.length,k=l,C={},O="transformOrigin",S=Yt(t,s,!0,k.parseTransform),A=k.transform&&("function"==typeof k.transform?k.transform(v,_):k.transform);if(n._transform=S,A&&"string"==typeof A&&St)c=Y.style,c[St]=A,c.display="block",c.position="absolute",z.body.appendChild(Y),h=Yt(Y,null,!1),S.svg&&(m=S.xOrigin,g=S.yOrigin,h.x-=S.xOffset,h.y-=S.yOffset,(k.transformOrigin||k.svgOrigin)&&(A={},jt(t,at(k.transformOrigin),A,k.svgOrigin,k.smoothOrigin,!0),m=A.xOrigin,g=A.yOrigin,h.x-=A.xOffset-S.xOffset,h.y-=A.yOffset-S.yOffset),(m||g)&&(y=Bt(Y,!0),h.x-=m-(m*y[0]+g*y[2]),h.y-=g-(m*y[1]+g*y[3]))),z.body.removeChild(Y),h.perspective||(h.perspective=S.perspective),null!=k.xPercent&&(h.xPercent=ut(k.xPercent,S.xPercent)),null!=k.yPercent&&(h.yPercent=ut(k.yPercent,S.yPercent));else if("object"==typeof k){if(h={scaleX:ut(null!=k.scaleX?k.scaleX:k.scale,S.scaleX),scaleY:ut(null!=k.scaleY?k.scaleY:k.scale,S.scaleY),scaleZ:ut(k.scaleZ,S.scaleZ),x:ut(k.x,S.x),y:ut(k.y,S.y),z:ut(k.z,S.z),xPercent:ut(k.xPercent,S.xPercent),yPercent:ut(k.yPercent,S.yPercent),perspective:ut(k.transformPerspective,S.perspective)},d=k.directionalRotation,null!=d)if("object"==typeof d)for(c in d)k[c]=d[c];else k.rotation=d;"string"==typeof k.x&&k.x.indexOf("%")!==-1&&(h.x=0,h.xPercent=ut(k.x,S.xPercent)),"string"==typeof k.y&&k.y.indexOf("%")!==-1&&(h.y=0,h.yPercent=ut(k.y,S.yPercent)),h.rotation=ht("rotation"in k?k.rotation:"shortRotation"in k?k.shortRotation+"_short":"rotationZ"in k?k.rotationZ:S.rotation-S.skewY,S.rotation-S.skewY,"rotation",C),Dt&&(h.rotationX=ht("rotationX"in k?k.rotationX:"shortRotationX"in k?k.shortRotationX+"_short":S.rotationX||0,S.rotationX,"rotationX",C),h.rotationY=ht("rotationY"in k?k.rotationY:"shortRotationY"in k?k.shortRotationY+"_short":S.rotationY||0,S.rotationY,"rotationY",C)),h.skewX=ht(k.skewX,S.skewX-S.skewY),(h.skewY=ht(k.skewY,S.skewY))&&(h.skewX+=h.skewY,h.rotation+=h.skewY)}for(Dt&&null!=k.force3D&&(S.force3D=k.force3D,p=!0),S.skewType=k.skewType||S.skewType||a.defaultSkewType,f=S.force3D||S.z||S.rotationX||S.rotationY||h.z||h.rotationX||h.rotationY||h.perspective,
f||null==k.scale||(h.scaleZ=1);--P>-1;)x=Ot[P],A=h[x]-S[x],(A>T||A<-T||null!=k[x]||null!=I[x])&&(p=!0,r=new yt(S,x,S[x],A,r),x in C&&(r.e=C[x]),r.xs0=0,r.plugin=o,n._overwriteProps.push(r.n));return A=k.transformOrigin,S.svg&&(A||k.svgOrigin)&&(m=S.xOffset,g=S.yOffset,jt(t,at(A),h,k.svgOrigin,k.smoothOrigin),r=xt(S,"xOrigin",(w?S:h).xOrigin,h.xOrigin,r,O),r=xt(S,"yOrigin",(w?S:h).yOrigin,h.yOrigin,r,O),m===S.xOffset&&g===S.yOffset||(r=xt(S,"xOffset",w?m:S.xOffset,S.xOffset,r,O),r=xt(S,"yOffset",w?g:S.yOffset,S.yOffset,r,O)),A=Ct?null:"0px 0px"),(A||Dt&&f&&S.zOrigin)&&(St?(p=!0,x=Rt,A=(A||J(t,x,s,!1,"50% 50%"))+"",r=new yt(b,x,0,0,r,(-1),O),r.b=b[x],r.plugin=o,Dt?(c=S.zOrigin,A=A.split(" "),S.zOrigin=(A.length>2&&(0===c||"0px"!==A[2])?parseFloat(A[2]):c)||0,r.xs0=r.e=A[0]+" "+(A[1]||"50%")+" 0px",r=new yt(S,"zOrigin",0,0,r,(-1),r.n),r.b=c,r.xs0=r.e=S.zOrigin):r.xs0=r.e=A):at(A+"",S)),p&&(n._transformType=S.svg&&Ct||!f&&3!==this._transformType?2:3),u&&(l[i]=u),r},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,o,a){e=this.format(e);var l,u,h,c,f,p,d,m,g,_,v,y,x,w,b,T,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(g=parseFloat(t.offsetWidth),_=parseFloat(t.offsetHeight),l=e.split(" "),u=0;u<P.length;u++)this.p.indexOf("border")&&(P[u]=Q(P[u])),f=c=J(t,P[u],s,!1,"0px"),f.indexOf(" ")!==-1&&(c=f.split(" "),f=c[0],c=c[1]),p=h=l[u],d=parseFloat(f),y=f.substr((d+"").length),x="="===p.charAt(1),x?(m=parseInt(p.charAt(0)+"1",10),p=p.substr(2),m*=parseFloat(p),v=p.substr((m+"").length-(m<0?1:0))||""):(m=parseFloat(p),v=p.substr((m+"").length)),""===v&&(v=r[i]||y),v!==y&&(w=tt(t,"borderLeft",d,y),b=tt(t,"borderTop",d,y),"%"===v?(f=w/g*100+"%",c=b/_*100+"%"):"em"===v?(T=tt(t,"borderLeft",1,"em"),f=w/T+"em",c=b/T+"em"):(f=w+"px",c=b+"px"),x&&(p=parseFloat(f)+m+v,h=parseFloat(c)+m+v)),o=wt(k,P[u],f+" "+c,p+" "+h,!1,"0px",o);return o},prefix:!0,formatter:gt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,r,o){return wt(t.style,i,this.format(J(t,i,s,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:gt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,r,o){var a,l,u,h,c,f,p="background-position",d=s||K(t,null),m=this.format((d?g?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),_=this.format(e);if(m.indexOf("%")!==-1!=(_.indexOf("%")!==-1)&&_.split(",").length<2&&(f=J(t,"backgroundImage").replace(R,""),f&&"none"!==f)){for(a=m.split(" "),l=_.split(" "),q.setAttribute("src",f),u=2;--u>-1;)m=a[u],h=m.indexOf("%")!==-1,h!==(l[u].indexOf("%")!==-1)&&(c=0===u?t.offsetWidth-q.width:t.offsetHeight-q.height,a[u]=h?parseFloat(m)/100*c+"px":parseFloat(m)/c*100+"%");m=a.join(" ")}return this.parseComplex(t.style,m,_,r,o)},formatter:at}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",at(t.indexOf(" ")===-1?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:_t("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:_t("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,r,o){var a,l,u;return g<9?(l=t.currentStyle,u=g<8?" ":",",a="rect("+l.clipTop+u+l.clipRight+u+l.clipBottom+u+l.clipLeft+")",e=this.format(e).split(",").join(u)):(a=this.format(J(t,this.p,s,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,r,o)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,r,o){var a=J(t,"borderTopWidth",s,!1,"0px"),l=this.format(e).split(" "),u=l[0].replace(T,"");return"px"!==u&&(a=parseFloat(a)/tt(t,"borderTopWidth",1,u)+u),this.parseComplex(t.style,this.format(a+" "+J(t,"borderTopStyle",s,!1,"solid")+" "+J(t,"borderTopColor",s,!1,"#000")),l.join(" "),r,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(mt)||["#000"])[0]}}),Pt("borderWidth",{parser:_t("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new yt(o,a,0,0,r,(-1),i,(!1),0,o[a],e)}});var Vt=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(n.indexOf("atrix(")===-1&&n.indexOf("radient(")===-1&&n.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(C,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),n.indexOf("pacity")===-1?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(P,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,r,o){var a=parseFloat(J(t,"opacity",s,!1,"1")),l=t.style,u="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),u&&1===a&&"hidden"===J(t,"visibility",s)&&0!==e&&(a=0),H?r=new yt(l,"opacity",a,e-a,r):(r=new yt(l,"opacity",100*a,100*(e-a),r),r.xn1=u?1:0,l.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=o,r.setRatio=Vt),u&&(r=new yt(l,"visibility",0,0,r,(-1),null,(!1),0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),r.xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Ht=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(S,"-$1").toLowerCase())):t.removeAttribute(e))},Ut=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ht(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,i,r,o,a,l){var u,h,c,f,p,d=t.getAttribute("class")||"",m=t.style.cssText;if(o=r._classNamePT=new yt(t,i,0,0,o,2),o.setRatio=Ut,o.pr=-11,n=!0,o.b=d,h=it(t,s),c=t._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=o,o.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",o.e),u=nt(t,h,it(t),l,f),t.setAttribute("class",d),o.data=u.firstMPT,t.style.cssText=m,o=o.xfirst=r.parse(t,u.difs,o,a)}});var $t=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,a=u.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],u[i]&&(u[i].parse===a?r=!0:i="transformOrigin"===i?Rt:u[i].p),Ht(o,i);r&&(Ht(o,St),s=this.t._gsTransform,s&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,i,r,s){return s=new yt(t,i,0,0,s,2),s.setRatio=$t,s.e=e,s.pr=-10,s.data=r._tween,n=!0,s}}),h="bezier,throwProps,physicsProps,physics2D".split(","),bt=h.length;bt--;)kt(h[bt]);h=a.prototype,h._firstPT=h._lastParsedTransform=h._transform=null,h._onInitTween=function(t,e,i,l){if(!t.nodeType)return!1;this._target=_=t,this._tween=i,this._vars=e,v=l,c=e.autoRound,n=!1,r=e.suffixMap||a.suffixMap,s=K(t,""),o=this._overwriteProps;var h,d,g,y,x,w,b,T,P,C=t.style;if(f&&""===C.zIndex&&(h=J(t,"zIndex",s),"auto"!==h&&""!==h||this._addLazySet(C,"zIndex",0)),"string"==typeof e&&(y=C.cssText,h=it(t,s),C.cssText=y+";"+e,h=nt(t,h,it(t)).difs,!H&&k.test(e)&&(h.opacity=parseFloat(RegExp.$1)),e=h,C.cssText=y),e.className?this._firstPT=d=u.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(P=3===this._transformType,St?p&&(f=!0,""===C.zIndex&&(b=J(t,"zIndex",s),"auto"!==b&&""!==b||this._addLazySet(C,"zIndex",0)),m&&this._addLazySet(C,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):C.zoom=1,g=d;g&&g._next;)g=g._next;T=new yt(t,"transform",0,0,null,2),this._linkCSSP(T,null,g),T.setRatio=St?Wt:qt,T.data=this._transform||Yt(t,s,!0),T.tween=i,T.pr=-1,o.pop()}if(n){for(;d;){for(w=d._next,g=y;g&&g.pr>d.pr;)g=g._next;(d._prev=g?g._prev:x)?d._prev._next=d:y=d,(d._next=g)?g._prev=d:x=d,d=w}this._firstPT=y}return!0},h.parse=function(t,e,i,n){var o,a,l,h,f,p,d,m,g,y,x=t.style;for(o in e)p=e[o],"function"==typeof p&&(p=p(v,_)),a=u[o],a?i=a.parse(t,p,o,this,i,n,e):(f=J(t,o,s)+"",g="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||o.indexOf("Color")!==-1||g&&O.test(p)?(g||(p=pt(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=wt(x,o,f,p,!0,"transparent",i,0,n)):g&&L.test(p)?i=wt(x,o,f,p,!0,null,i,0,n):(l=parseFloat(f),d=l||0===l?f.substr((l+"").length):"",""!==f&&"auto"!==f||("width"===o||"height"===o?(l=ot(t,o,s),d="px"):"left"===o||"top"===o?(l=et(t,o,s),d="px"):(l="opacity"!==o?0:1,d="")),y=g&&"="===p.charAt(1),y?(h=parseInt(p.charAt(0)+"1",10),p=p.substr(2),h*=parseFloat(p),m=p.replace(T,"")):(h=parseFloat(p),m=g?p.replace(T,""):""),""===m&&(m=o in r?r[o]:d),p=h||0===h?(y?h+l:h)+m:e[o],d!==m&&""!==m&&(h||0===h)&&l&&(l=tt(t,o,l,d),"%"===m?(l/=tt(t,o,100,"%")/100,e.strictUnits!==!0&&(f=l+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?l/=tt(t,o,1,m):"px"!==m&&(h=tt(t,o,h,m),m="px"),y&&(h||0===h)&&(p=h+l+m)),y&&(h+=l),!l&&0!==l||!h&&0!==h?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(i=new yt(x,o,h||l||0,0,i,(-1),o,(!1),0,f,p),i.xs0="none"!==p||"display"!==o&&o.indexOf("Style")===-1?p:f):$("invalid "+o+" tween value: "+e[o]):(i=new yt(x,o,l,h-l,i,0,o,c!==!1&&("px"===m||"zIndex"===o),0,f,p),i.xs0=m))),n&&i&&!i.plugin&&(i.plugin=n);return i},h.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<s&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else r.type===-1?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&r.type!==-1)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},h._enableTransforms=function(t){this._transform=this._transform||Yt(this._target,s,!0),this._transformType=this._transform.svg&&Ct||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};h._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},h._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},h._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},h._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,s)};var Zt=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)Zt(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],o=s.type,s.style&&(e.push(it(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||Zt(s,e,i)};return a.cascadeTo=function(t,i,n){var r,s,o,a,l=e.to(t,i,n),u=[l],h=[],c=[],f=[],p=e._internals.reservedProps;for(t=l._targets||l.target,Zt(t,h,f),l.render(i,!0,!0),Zt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if(s=nt(f[r],h[r],c[r]),s.firstMPT){s=s.difs;for(o in n)p[o]&&(s[o]=n[o]);a={};for(o in s)a[o]=h[r][o];u.push(e.fromTo(f[r],i,a,s))}return u},t.activate([a]),a},!0),function(){var t=i._gsDefine.plugin({propName:"roundProps",version:"1.6.0",priority:-1,API:2,init:function(t,e,i){return this._tween=i,!0}}),e=function(t){for(;t;)t.f||t.blob||(t.m=Math.round),t=t._next},n=t.prototype;n._onInitAllProps=function(){for(var t,i,n,r=this._tween,s=r.vars.roundProps.join?r.vars.roundProps:r.vars.roundProps.split(","),o=s.length,a={},l=r._propLookup.roundProps;--o>-1;)a[s[o]]=Math.round;for(o=s.length;--o>-1;)for(t=s[o],i=r._firstPT;i;)n=i._next,i.pg?i.t._mod(a):i.n===t&&(2===i.f&&i.t?e(i.t._firstPT):(this._add(i.t,t,i.s,i.c),n&&(n._prev=i._prev),i._prev?i._prev._next=n:r._firstPT===i&&(r._firstPT=n),i._next=i._prev=null,r._propLookup[t]=l)),i=n;return!1},n._add=function(t,e,i,n){this._addTween(t,e,i,i+n,e,Math.round),this._overwriteProps.push(e)}}(),function(){i._gsDefine.plugin({propName:"attr",API:2,version:"0.6.0",init:function(t,e,i,n){var r,s;if("function"!=typeof t.setAttribute)return!1;for(r in e)s=e[r],"function"==typeof s&&(s=s(n,t)),this._addTween(t,"setAttribute",t.getAttribute(r)+"",s+"",r,!1,r),this._overwriteProps.push(r);return!0}})}(),i._gsDefine.plugin({propName:"directionalRotation",version:"0.3.0",API:2,init:function(t,e,i,n){"object"!=typeof e&&(e={rotation:e}),this.finals={};var r,s,o,a,l,u,h=e.useRadians===!0?2*Math.PI:360,c=1e-6;for(r in e)"useRadians"!==r&&(a=e[r],"function"==typeof a&&(a=a(n,t)),u=(a+"").split("_"),s=u[0],o=parseFloat("function"!=typeof t[r]?t[r]:t[r.indexOf("set")||"function"!=typeof t["get"+r.substr(3)]?r:"get"+r.substr(3)]()),a=this.finals[r]="string"==typeof s&&"="===s.charAt(1)?o+parseInt(s.charAt(0)+"1",10)*Number(s.substr(2)):Number(s)||0,l=a-o,u.length&&(s=u.join("_"),s.indexOf("short")!==-1&&(l%=h,l!==l%(h/2)&&(l=l<0?l+h:l-h)),s.indexOf("_cw")!==-1&&l<0?l=(l+9999999999*h)%h-(l/h|0)*h:s.indexOf("ccw")!==-1&&l>0&&(l=(l-9999999999*h)%h-(l/h|0)*h)),(l>c||l<-c)&&(this._addTween(t,r,o,o+l,r),this._overwriteProps.push(r)));return!0},set:function(t){var e;if(1!==t)this._super.setRatio.call(this,t);else for(e=this._firstPT;e;)e.f?e.t[e.p](this.finals[e.p]):e.t[e.p]=this.finals[e.p],e=e._next}})._autoCSS=!0,i._gsDefine("easing.Back",["easing.Ease"],function(t){var e,n,r,s=i.GreenSockGlobals||i,o=s.com.greensock,a=2*Math.PI,l=Math.PI/2,u=o._class,h=function(e,i){var n=u("easing."+e,function(){},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,n},c=t.register||function(){},f=function(t,e,i,n,r){var s=u("easing."+t,{easeOut:new e,easeIn:new i,easeInOut:new n},!0);return c(s,t),s},p=function(t,e,i){this.t=t,this.v=e,i&&(this.next=i,i.prev=this,this.c=i.v-e,this.gap=i.t-t)},d=function(e,i){var n=u("easing."+e,function(t){this._p1=t||0===t?t:1.70158,this._p2=1.525*this._p1},!0),r=n.prototype=new t;return r.constructor=n,r.getRatio=i,r.config=function(t){return new n(t)},n},m=f("Back",d("BackOut",function(t){return(t-=1)*t*((this._p1+1)*t+this._p1)+1}),d("BackIn",function(t){return t*t*((this._p1+1)*t-this._p1)}),d("BackInOut",function(t){return(t*=2)<1?.5*t*t*((this._p2+1)*t-this._p2):.5*((t-=2)*t*((this._p2+1)*t+this._p2)+2)})),g=u("easing.SlowMo",function(t,e,i){e=e||0===e?e:.7,null==t?t=.7:t>1&&(t=1),this._p=1!==t?e:0,this._p1=(1-t)/2,this._p2=t,this._p3=this._p1+this._p2,this._calcEnd=i===!0},!0),_=g.prototype=new t;return _.constructor=g,_.getRatio=function(t){var e=t+(.5-t)*this._p;return t<this._p1?this._calcEnd?1-(t=1-t/this._p1)*t:e-(t=1-t/this._p1)*t*t*t*e:t>this._p3?this._calcEnd?1-(t=(t-this._p3)/this._p1)*t:e+(t-e)*(t=(t-this._p3)/this._p1)*t*t*t:this._calcEnd?1:e},g.ease=new g(.7,.7),_.config=g.config=function(t,e,i){return new g(t,e,i)},e=u("easing.SteppedEase",function(t){t=t||1,this._p1=1/t,this._p2=t+1},!0),_=e.prototype=new t,_.constructor=e,_.getRatio=function(t){return t<0?t=0:t>=1&&(t=.999999999),(this._p2*t>>0)*this._p1},_.config=e.config=function(t){return new e(t)},n=u("easing.RoughEase",function(e){e=e||{};for(var i,n,r,s,o,a,l=e.taper||"none",u=[],h=0,c=0|(e.points||20),f=c,d=e.randomize!==!1,m=e.clamp===!0,g=e.template instanceof t?e.template:null,_="number"==typeof e.strength?.4*e.strength:.4;--f>-1;)i=d?Math.random():1/c*f,n=g?g.getRatio(i):i,"none"===l?r=_:"out"===l?(s=1-i,r=s*s*_):"in"===l?r=i*i*_:i<.5?(s=2*i,r=s*s*.5*_):(s=2*(1-i),r=s*s*.5*_),d?n+=Math.random()*r-.5*r:f%2?n+=.5*r:n-=.5*r,m&&(n>1?n=1:n<0&&(n=0)),u[h++]={x:i,y:n};for(u.sort(function(t,e){return t.x-e.x}),a=new p(1,1,null),f=c;--f>-1;)o=u[f],a=new p(o.x,o.y,a);this._prev=new p(0,0,0!==a.t?a:a.next)},!0),_=n.prototype=new t,_.constructor=n,_.getRatio=function(t){var e=this._prev;if(t>e.t){for(;e.next&&t>=e.t;)e=e.next;e=e.prev}else for(;e.prev&&t<=e.t;)e=e.prev;return this._prev=e,e.v+(t-e.t)/e.gap*e.c},_.config=function(t){return new n(t)},n.ease=new n,f("Bounce",h("BounceOut",function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}),h("BounceIn",function(t){return(t=1-t)<1/2.75?1-7.5625*t*t:t<2/2.75?1-(7.5625*(t-=1.5/2.75)*t+.75):t<2.5/2.75?1-(7.5625*(t-=2.25/2.75)*t+.9375):1-(7.5625*(t-=2.625/2.75)*t+.984375)}),h("BounceInOut",function(t){var e=t<.5;return t=e?1-2*t:2*t-1,t=t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375,e?.5*(1-t):.5*t+.5})),f("Circ",h("CircOut",function(t){return Math.sqrt(1-(t-=1)*t)}),h("CircIn",function(t){return-(Math.sqrt(1-t*t)-1)}),h("CircInOut",function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)})),r=function(e,i,n){var r=u("easing."+e,function(t,e){this._p1=t>=1?t:1,this._p2=(e||n)/(t<1?t:1),this._p3=this._p2/a*(Math.asin(1/this._p1)||0),this._p2=a/this._p2},!0),s=r.prototype=new t;return s.constructor=r,s.getRatio=i,s.config=function(t,e){return new r(t,e)},r},f("Elastic",r("ElasticOut",function(t){return this._p1*Math.pow(2,-10*t)*Math.sin((t-this._p3)*this._p2)+1},.3),r("ElasticIn",function(t){return-(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2))},.3),r("ElasticInOut",function(t){return(t*=2)<1?-.5*(this._p1*Math.pow(2,10*(t-=1))*Math.sin((t-this._p3)*this._p2)):this._p1*Math.pow(2,-10*(t-=1))*Math.sin((t-this._p3)*this._p2)*.5+1},.45)),f("Expo",h("ExpoOut",function(t){return 1-Math.pow(2,-10*t)}),h("ExpoIn",function(t){return Math.pow(2,10*(t-1))-.001}),h("ExpoInOut",function(t){return(t*=2)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*(t-1)))})),f("Sine",h("SineOut",function(t){return Math.sin(t*l)}),h("SineIn",function(t){return-Math.cos(t*l)+1}),h("SineInOut",function(t){return-.5*(Math.cos(Math.PI*t)-1)})),u("easing.EaseLookup",{find:function(e){return t.map[e]}},!0),c(s.SlowMo,"SlowMo","ease,"),c(n,"RoughEase","ease,"),c(e,"SteppedEase","ease,"),m},!0)}),i._gsDefine&&i._gsQueue.pop()(),function(t,i){"use strict";var n={},r=t.GreenSockGlobals=t.GreenSockGlobals||t;if(!r.TweenLite){var s,o,a,l,u,h=function(t){var e,i=t.split("."),n=r;for(e=0;e<i.length;e++)n[i[e]]=n=n[i[e]]||{};return n},c=h("com.greensock"),f=1e-10,p=function(t){var e,i=[],n=t.length;for(e=0;e!==n;i.push(t[e++]));return i},d=function(){},m=function(){var t=Object.prototype.toString,e=t.call([]);return function(i){return null!=i&&(i instanceof Array||"object"==typeof i&&!!i.push&&t.call(i)===e)}}(),g={},_=function(s,o,a,l){this.sc=g[s]?g[s].sc:[],g[s]=this,this.gsClass=null,this.func=a;var u=[];this.check=function(c){for(var f,p,d,m,v,y=o.length,x=y;--y>-1;)(f=g[o[y]]||new _(o[y],[])).gsClass?(u[y]=f.gsClass,x--):c&&f.sc.push(this);if(0===x&&a){if(p=("com.greensock."+s).split("."),d=p.pop(),m=h(p.join("."))[d]=this.gsClass=a.apply(a,u),l)if(r[d]=n[d]=m,v="undefined"!=typeof e&&e.exports,!v&&"function"==typeof define&&define.amd)define((t.GreenSockAMDPath?t.GreenSockAMDPath+"/":"")+s.split(".").pop(),[],function(){return m});else if(v)if(s===i){e.exports=n[i]=m;for(y in n)m[y]=n[y]}else n[i]&&(n[i][d]=m);for(y=0;y<this.sc.length;y++)this.sc[y].check()}},this.check(!0)},v=t._gsDefine=function(t,e,i,n){return new _(t,e,i,n)},y=c._class=function(t,e,i){return e=e||function(){},v(t,[],function(){return e},i),e};v.globals=r;var x=[0,0,1,1],w=y("easing.Ease",function(t,e,i,n){this._func=t,this._type=i||0,this._power=n||0,this._params=e?x.concat(e):x},!0),b=w.map={},T=w.register=function(t,e,i,n){for(var r,s,o,a,l=e.split(","),u=l.length,h=(i||"easeIn,easeOut,easeInOut").split(",");--u>-1;)for(s=l[u],r=n?y("easing."+s,null,!0):c.easing[s]||{},o=h.length;--o>-1;)a=h[o],b[s+"."+a]=b[a+s]=r[a]=t.getRatio?t:t[a]||new t};for(a=w.prototype,a._calcEnd=!1,a.getRatio=function(t){if(this._func)return this._params[0]=t,this._func.apply(null,this._params);var e=this._type,i=this._power,n=1===e?1-t:2===e?t:t<.5?2*t:2*(1-t);return 1===i?n*=n:2===i?n*=n*n:3===i?n*=n*n*n:4===i&&(n*=n*n*n*n),1===e?1-n:2===e?n:t<.5?n/2:1-n/2},s=["Linear","Quad","Cubic","Quart","Quint,Strong"],o=s.length;--o>-1;)a=s[o]+",Power"+o,T(new w(null,null,1,o),a,"easeOut",!0),T(new w(null,null,2,o),a,"easeIn"+(0===o?",easeNone":"")),T(new w(null,null,3,o),a,"easeInOut");b.linear=c.easing.Linear.easeIn,b.swing=c.easing.Quad.easeInOut;var P=y("events.EventDispatcher",function(t){this._listeners={},this._eventTarget=t||this});a=P.prototype,a.addEventListener=function(t,e,i,n,r){r=r||0;var s,o,a=this._listeners[t],h=0;for(this!==l||u||l.wake(),null==a&&(this._listeners[t]=a=[]),o=a.length;--o>-1;)s=a[o],s.c===e&&s.s===i?a.splice(o,1):0===h&&s.pr<r&&(h=o+1);a.splice(h,0,{c:e,s:i,up:n,pr:r})},a.removeEventListener=function(t,e){var i,n=this._listeners[t];if(n)for(i=n.length;--i>-1;)if(n[i].c===e)return void n.splice(i,1)},a.dispatchEvent=function(t){var e,i,n,r=this._listeners[t];if(r)for(e=r.length,e>1&&(r=r.slice(0)),i=this._eventTarget;--e>-1;)n=r[e],n&&(n.up?n.c.call(n.s||i,{type:t,target:i}):n.c.call(n.s||i))};var k=t.requestAnimationFrame,C=t.cancelAnimationFrame,O=Date.now||function(){return(new Date).getTime()},S=O();for(s=["ms","moz","webkit","o"],o=s.length;--o>-1&&!k;)k=t[s[o]+"RequestAnimationFrame"],C=t[s[o]+"CancelAnimationFrame"]||t[s[o]+"CancelRequestAnimationFrame"];y("Ticker",function(t,e){var i,n,r,s,o,a=this,h=O(),c=!(e===!1||!k)&&"auto",p=500,m=33,g="tick",_=function(t){var e,l,u=O()-S;u>p&&(h+=u-m),S+=u,a.time=(S-h)/1e3,e=a.time-o,(!i||e>0||t===!0)&&(a.frame++,o+=e+(e>=s?.004:s-e),l=!0),t!==!0&&(r=n(_)),l&&a.dispatchEvent(g)};P.call(a),a.time=a.frame=0,a.tick=function(){_(!0)},a.lagSmoothing=function(t,e){p=t||1/f,m=Math.min(e,p,0)},a.sleep=function(){null!=r&&(c&&C?C(r):clearTimeout(r),n=d,r=null,a===l&&(u=!1))},a.wake=function(t){null!==r?a.sleep():t?h+=-S+(S=O()):a.frame>10&&(S=O()-p+5),n=0===i?d:c&&k?k:function(t){return setTimeout(t,1e3*(o-a.time)+1|0)},a===l&&(u=!0),_(2)},a.fps=function(t){return arguments.length?(i=t,s=1/(i||60),o=this.time+s,void a.wake()):i},a.useRAF=function(t){return arguments.length?(a.sleep(),c=t,void a.fps(i)):c},a.fps(t),setTimeout(function(){"auto"===c&&a.frame<5&&"hidden"!==document.visibilityState&&a.useRAF(!1)},1500)}),a=c.Ticker.prototype=new c.events.EventDispatcher,a.constructor=c.Ticker;var A=y("core.Animation",function(t,e){if(this.vars=e=e||{},this._duration=this._totalDuration=t||0,this._delay=Number(e.delay)||0,this._timeScale=1,this._active=e.immediateRender===!0,this.data=e.data,this._reversed=e.reversed===!0,$){u||l.wake();var i=this.vars.useFrames?U:$;i.add(this,i._time),this.vars.paused&&this.paused(!0)}});l=A.ticker=new c.Ticker,a=A.prototype,a._dirty=a._gc=a._initted=a._paused=!1,a._totalTime=a._time=0,a._rawPrevTime=-1,a._next=a._last=a._onUpdate=a._timeline=a.timeline=null,a._paused=!1;var R=function(){u&&O()-S>2e3&&l.wake(),setTimeout(R,2e3)};R(),a.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},a.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},a.resume=function(t,e){return null!=t&&this.seek(t,e),this.paused(!1)},a.seek=function(t,e){return this.totalTime(Number(t),e!==!1)},a.restart=function(t,e){return this.reversed(!1).paused(!1).totalTime(t?-this._delay:0,e!==!1,!0)},a.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},a.render=function(t,e,i){},a.invalidate=function(){return this._time=this._totalTime=0,this._initted=this._gc=!1,this._rawPrevTime=-1,!this._gc&&this.timeline||this._enabled(!0),this},a.isActive=function(){var t,e=this._timeline,i=this._startTime;return!e||!this._gc&&!this._paused&&e.isActive()&&(t=e.rawTime())>=i&&t<i+this.totalDuration()/this._timeScale},a._enabled=function(t,e){return u||l.wake(),this._gc=!t,this._active=this.isActive(),e!==!0&&(t&&!this.timeline?this._timeline.add(this,this._startTime-this._delay):!t&&this.timeline&&this._timeline._remove(this,!0)),!1},a._kill=function(t,e){return this._enabled(!1,!1)},a.kill=function(t,e){return this._kill(t,e),this},a._uncache=function(t){for(var e=t?this:this.timeline;e;)e._dirty=!0,e=e.timeline;return this},a._swapSelfInParams=function(t){for(var e=t.length,i=t.concat();--e>-1;)"{self}"===t[e]&&(i[e]=this);return i},a._callback=function(t){var e=this.vars,i=e[t],n=e[t+"Params"],r=e[t+"Scope"]||e.callbackScope||this,s=n?n.length:0;switch(s){case 0:i.call(r);break;case 1:i.call(r,n[0]);break;case 2:i.call(r,n[0],n[1]);break;default:i.apply(r,n)}},a.eventCallback=function(t,e,i,n){if("on"===(t||"").substr(0,2)){var r=this.vars;if(1===arguments.length)return r[t];null==e?delete r[t]:(r[t]=e,r[t+"Params"]=m(i)&&i.join("").indexOf("{self}")!==-1?this._swapSelfInParams(i):i,r[t+"Scope"]=n),"onUpdate"===t&&(this._onUpdate=e)}return this},a.delay=function(t){return arguments.length?(this._timeline.smoothChildTiming&&this.startTime(this._startTime+t-this._delay),this._delay=t,this):this._delay},a.duration=function(t){return arguments.length?(this._duration=this._totalDuration=t,this._uncache(!0),this._timeline.smoothChildTiming&&this._time>0&&this._time<this._duration&&0!==t&&this.totalTime(this._totalTime*(t/this._duration),!0),this):(this._dirty=!1,this._duration)},a.totalDuration=function(t){return this._dirty=!1,arguments.length?this.duration(t):this._totalDuration},a.time=function(t,e){return arguments.length?(this._dirty&&this.totalDuration(),this.totalTime(t>this._duration?this._duration:t,e)):this._time},a.totalTime=function(t,e,i){if(u||l.wake(),!arguments.length)return this._totalTime;if(this._timeline){if(t<0&&!i&&(t+=this.totalDuration()),this._timeline.smoothChildTiming){this._dirty&&this.totalDuration();var n=this._totalDuration,r=this._timeline;if(t>n&&!i&&(t=n),this._startTime=(this._paused?this._pauseTime:r._time)-(this._reversed?n-t:t)/this._timeScale,r._dirty||this._uncache(!1),r._timeline)for(;r._timeline;)r._timeline._time!==(r._startTime+r._totalTime)/r._timeScale&&r.totalTime(r._totalTime,!0),r=r._timeline}this._gc&&this._enabled(!0,!1),this._totalTime===t&&0!==this._duration||(F.length&&Z(),this.render(t,e,!1),F.length&&Z())}return this},a.progress=a.totalProgress=function(t,e){var i=this.duration();return arguments.length?this.totalTime(i*t,e):i?this._time/i:this.ratio},a.startTime=function(t){return arguments.length?(t!==this._startTime&&(this._startTime=t,this.timeline&&this.timeline._sortChildren&&this.timeline.add(this,t-this._delay)),this):this._startTime},a.endTime=function(t){return this._startTime+(0!=t?this.totalDuration():this.duration())/this._timeScale},a.timeScale=function(t){if(!arguments.length)return this._timeScale;if(t=t||f,this._timeline&&this._timeline.smoothChildTiming){var e=this._pauseTime,i=e||0===e?e:this._timeline.totalTime();this._startTime=i-(i-this._startTime)*this._timeScale/t}return this._timeScale=t,this._uncache(!1)},a.reversed=function(t){return arguments.length?(t!=this._reversed&&(this._reversed=t,this.totalTime(this._timeline&&!this._timeline.smoothChildTiming?this.totalDuration()-this._totalTime:this._totalTime,!0)),this):this._reversed},a.paused=function(t){if(!arguments.length)return this._paused;var e,i,n=this._timeline;return t!=this._paused&&n&&(u||t||l.wake(),e=n.rawTime(),i=e-this._pauseTime,!t&&n.smoothChildTiming&&(this._startTime+=i,this._uncache(!1)),this._pauseTime=t?e:null,this._paused=t,this._active=this.isActive(),!t&&0!==i&&this._initted&&this.duration()&&(e=n.smoothChildTiming?this._totalTime:(e-this._startTime)/this._timeScale,this.render(e,e===this._totalTime,!0))),this._gc&&!t&&this._enabled(!0,!1),this};var D=y("core.SimpleTimeline",function(t){A.call(this,0,t),this.autoRemoveChildren=this.smoothChildTiming=!0});a=D.prototype=new A,a.constructor=D,a.kill()._gc=!1,a._first=a._last=a._recent=null,a._sortChildren=!1,a.add=a.insert=function(t,e,i,n){var r,s;if(t._startTime=Number(e||0)+t._delay,t._paused&&this!==t._timeline&&(t._pauseTime=t._startTime+(this.rawTime()-t._startTime)/t._timeScale),t.timeline&&t.timeline._remove(t,!0),t.timeline=t._timeline=this,t._gc&&t._enabled(!0,!0),r=this._last,this._sortChildren)for(s=t._startTime;r&&r._startTime>s;)r=r._prev;return r?(t._next=r._next,r._next=t):(t._next=this._first,this._first=t),t._next?t._next._prev=t:this._last=t,t._prev=r,this._recent=t,this._timeline&&this._uncache(!0),this},a._remove=function(t,e){return t.timeline===this&&(e||t._enabled(!1,!0),t._prev?t._prev._next=t._next:this._first===t&&(this._first=t._next),t._next?t._next._prev=t._prev:this._last===t&&(this._last=t._prev),t._next=t._prev=t.timeline=null,t===this._recent&&(this._recent=this._last),this._timeline&&this._uncache(!0)),this},a.render=function(t,e,i){var n,r=this._first;for(this._totalTime=this._time=this._rawPrevTime=t;r;)n=r._next,(r._active||t>=r._startTime&&!r._paused)&&(r._reversed?r.render((r._dirty?r.totalDuration():r._totalDuration)-(t-r._startTime)*r._timeScale,e,i):r.render((t-r._startTime)*r._timeScale,e,i)),r=n},a.rawTime=function(){return u||l.wake(),this._totalTime};var N=y("TweenLite",function(e,i,n){if(A.call(this,i,n),this.render=N.prototype.render,null==e)throw"Cannot tween a null target.";this.target=e="string"!=typeof e?e:N.selector(e)||e;var r,s,o,a=e.jquery||e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType),l=this.vars.overwrite;if(this._overwrite=l=null==l?H[N.defaultOverwrite]:"number"==typeof l?l>>0:H[l],(a||e instanceof Array||e.push&&m(e))&&"number"!=typeof e[0])for(this._targets=o=p(e),this._propLookup=[],this._siblings=[],r=0;r<o.length;r++)s=o[r],s?"string"!=typeof s?s.length&&s!==t&&s[0]&&(s[0]===t||s[0].nodeType&&s[0].style&&!s.nodeType)?(o.splice(r--,1),this._targets=o=o.concat(p(s))):(this._siblings[r]=Q(s,this,!1),1===l&&this._siblings[r].length>1&&J(s,this,null,1,this._siblings[r])):(s=o[r--]=N.selector(s),"string"==typeof s&&o.splice(r+1,1)):o.splice(r--,1);else this._propLookup={},this._siblings=Q(e,this,!1),1===l&&this._siblings.length>1&&J(e,this,null,1,this._siblings);(this.vars.immediateRender||0===i&&0===this._delay&&this.vars.immediateRender!==!1)&&(this._time=-f,this.render(Math.min(0,-this._delay)));
},!0),M=function(e){return e&&e.length&&e!==t&&e[0]&&(e[0]===t||e[0].nodeType&&e[0].style&&!e.nodeType)},E=function(t,e){var i,n={};for(i in t)V[i]||i in e&&"transform"!==i&&"x"!==i&&"y"!==i&&"width"!==i&&"height"!==i&&"className"!==i&&"border"!==i||!(!Y[i]||Y[i]&&Y[i]._autoCSS)||(n[i]=t[i],delete t[i]);t.css=n};a=N.prototype=new A,a.constructor=N,a.kill()._gc=!1,a.ratio=0,a._firstPT=a._targets=a._overwrittenProps=a._startAt=null,a._notifyPluginsOfEnabled=a._lazy=!1,N.version="1.19.0",N.defaultEase=a._ease=new w(null,null,1,1),N.defaultOverwrite="auto",N.ticker=l,N.autoSleep=120,N.lagSmoothing=function(t,e){l.lagSmoothing(t,e)},N.selector=t.$||t.jQuery||function(e){var i=t.$||t.jQuery;return i?(N.selector=i,i(e)):"undefined"==typeof document?e:document.querySelectorAll?document.querySelectorAll(e):document.getElementById("#"===e.charAt(0)?e.substr(1):e)};var F=[],L={},j=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,X=function(t){for(var e,i=this._firstPT,n=1e-6;i;)e=i.blob?t?this.join(""):this.start:i.c*t+i.s,i.m?e=i.m(e,this._target||i.t):e<n&&e>-n&&(e=0),i.f?i.fp?i.t[i.p](i.fp,e):i.t[i.p](e):i.t[i.p]=e,i=i._next},I=function(t,e,i,n){var r,s,o,a,l,u,h,c=[t,e],f=0,p="",d=0;for(c.start=t,i&&(i(c),t=c[0],e=c[1]),c.length=0,r=t.match(j)||[],s=e.match(j)||[],n&&(n._next=null,n.blob=1,c._firstPT=c._applyPT=n),l=s.length,a=0;a<l;a++)h=s[a],u=e.substr(f,e.indexOf(h,f)-f),p+=u||!a?u:",",f+=u.length,d?d=(d+1)%5:"rgba("===u.substr(-5)&&(d=1),h===r[a]||r.length<=a?p+=h:(p&&(c.push(p),p=""),o=parseFloat(r[a]),c.push(o),c._firstPT={_next:c._firstPT,t:c,p:c.length-1,s:o,c:("="===h.charAt(1)?parseInt(h.charAt(0)+"1",10)*parseFloat(h.substr(2)):parseFloat(h)-o)||0,f:0,m:d&&d<4?Math.round:0}),f+=h.length;return p+=e.substr(f),p&&c.push(p),c.setRatio=X,c},z=function(t,e,i,n,r,s,o,a,l){"function"==typeof n&&(n=n(l||0,t));var u,h,c="get"===i?t[e]:i,f=typeof t[e],p="string"==typeof n&&"="===n.charAt(1),d={t:t,p:e,s:c,f:"function"===f,pg:0,n:r||e,m:s?"function"==typeof s?s:Math.round:0,pr:0,c:p?parseInt(n.charAt(0)+"1",10)*parseFloat(n.substr(2)):parseFloat(n)-c||0};if("number"!==f&&("function"===f&&"get"===i&&(h=e.indexOf("set")||"function"!=typeof t["get"+e.substr(3)]?e:"get"+e.substr(3),d.s=c=o?t[h](o):t[h]()),"string"==typeof c&&(o||isNaN(c))?(d.fp=o,u=I(c,n,a||N.defaultStringFilter,d),d={t:u,p:"setRatio",s:0,c:1,f:2,pg:0,n:r||e,pr:0,m:0}):p||(d.s=parseFloat(c),d.c=parseFloat(n)-d.s||0)),d.c)return(d._next=this._firstPT)&&(d._next._prev=d),this._firstPT=d,d},B=N._internals={isArray:m,isSelector:M,lazyTweens:F,blobDif:I},Y=N._plugins={},q=B.tweenLookup={},W=0,V=B.reservedProps={ease:1,delay:1,overwrite:1,onComplete:1,onCompleteParams:1,onCompleteScope:1,useFrames:1,runBackwards:1,startAt:1,onUpdate:1,onUpdateParams:1,onUpdateScope:1,onStart:1,onStartParams:1,onStartScope:1,onReverseComplete:1,onReverseCompleteParams:1,onReverseCompleteScope:1,onRepeat:1,onRepeatParams:1,onRepeatScope:1,easeParams:1,yoyo:1,immediateRender:1,repeat:1,repeatDelay:1,data:1,paused:1,reversed:1,autoCSS:1,lazy:1,onOverwrite:1,callbackScope:1,stringFilter:1,id:1},H={none:0,all:1,auto:2,concurrent:3,allOnStart:4,preexisting:5,true:1,false:0},U=A._rootFramesTimeline=new D,$=A._rootTimeline=new D,G=30,Z=B.lazyRender=function(){var t,e=F.length;for(L={};--e>-1;)t=F[e],t&&t._lazy!==!1&&(t.render(t._lazy[0],t._lazy[1],!0),t._lazy=!1);F.length=0};$._startTime=l.time,U._startTime=l.frame,$._active=U._active=!0,setTimeout(Z,1),A._updateRoot=N.render=function(){var t,e,i;if(F.length&&Z(),$.render((l.time-$._startTime)*$._timeScale,!1,!1),U.render((l.frame-U._startTime)*U._timeScale,!1,!1),F.length&&Z(),l.frame>=G){G=l.frame+(parseInt(N.autoSleep,10)||120);for(i in q){for(e=q[i].tweens,t=e.length;--t>-1;)e[t]._gc&&e.splice(t,1);0===e.length&&delete q[i]}if(i=$._first,(!i||i._paused)&&N.autoSleep&&!U._first&&1===l._listeners.tick.length){for(;i&&i._paused;)i=i._next;i||l.sleep()}}},l.addEventListener("tick",A._updateRoot);var Q=function(t,e,i){var n,r,s=t._gsTweenID;if(q[s||(t._gsTweenID=s="t"+W++)]||(q[s]={target:t,tweens:[]}),e&&(n=q[s].tweens,n[r=n.length]=e,i))for(;--r>-1;)n[r]===e&&n.splice(r,1);return q[s].tweens},K=function(t,e,i,n){var r,s,o=t.vars.onOverwrite;return o&&(r=o(t,e,i,n)),o=N.onOverwrite,o&&(s=o(t,e,i,n)),r!==!1&&s!==!1},J=function(t,e,i,n,r){var s,o,a,l;if(1===n||n>=4){for(l=r.length,s=0;s<l;s++)if((a=r[s])!==e)a._gc||a._kill(null,t,e)&&(o=!0);else if(5===n)break;return o}var u,h=e._startTime+f,c=[],p=0,d=0===e._duration;for(s=r.length;--s>-1;)(a=r[s])===e||a._gc||a._paused||(a._timeline!==e._timeline?(u=u||tt(e,0,d),0===tt(a,u,d)&&(c[p++]=a)):a._startTime<=h&&a._startTime+a.totalDuration()/a._timeScale>h&&((d||!a._initted)&&h-a._startTime<=2e-10||(c[p++]=a)));for(s=p;--s>-1;)if(a=c[s],2===n&&a._kill(i,t,e)&&(o=!0),2!==n||!a._firstPT&&a._initted){if(2!==n&&!K(a,e))continue;a._enabled(!1,!1)&&(o=!0)}return o},tt=function(t,e,i){for(var n=t._timeline,r=n._timeScale,s=t._startTime;n._timeline;){if(s+=n._startTime,r*=n._timeScale,n._paused)return-100;n=n._timeline}return s/=r,s>e?s-e:i&&s===e||!t._initted&&s-e<2*f?f:(s+=t.totalDuration()/t._timeScale/r)>e+f?0:s-e-f};a._init=function(){var t,e,i,n,r,s,o=this.vars,a=this._overwrittenProps,l=this._duration,u=!!o.immediateRender,h=o.ease;if(o.startAt){this._startAt&&(this._startAt.render(-1,!0),this._startAt.kill()),r={};for(n in o.startAt)r[n]=o.startAt[n];if(r.overwrite=!1,r.immediateRender=!0,r.lazy=u&&o.lazy!==!1,r.startAt=r.delay=null,this._startAt=N.to(this.target,0,r),u)if(this._time>0)this._startAt=null;else if(0!==l)return}else if(o.runBackwards&&0!==l)if(this._startAt)this._startAt.render(-1,!0),this._startAt.kill(),this._startAt=null;else{0!==this._time&&(u=!1),i={};for(n in o)V[n]&&"autoCSS"!==n||(i[n]=o[n]);if(i.overwrite=0,i.data="isFromStart",i.lazy=u&&o.lazy!==!1,i.immediateRender=u,this._startAt=N.to(this.target,0,i),u){if(0===this._time)return}else this._startAt._init(),this._startAt._enabled(!1),this.vars.immediateRender&&(this._startAt=null)}if(this._ease=h=h?h instanceof w?h:"function"==typeof h?new w(h,o.easeParams):b[h]||N.defaultEase:N.defaultEase,o.easeParams instanceof Array&&h.config&&(this._ease=h.config.apply(h,o.easeParams)),this._easeType=this._ease._type,this._easePower=this._ease._power,this._firstPT=null,this._targets)for(s=this._targets.length,t=0;t<s;t++)this._initProps(this._targets[t],this._propLookup[t]={},this._siblings[t],a?a[t]:null,t)&&(e=!0);else e=this._initProps(this.target,this._propLookup,this._siblings,a,0);if(e&&N._onPluginEvent("_onInitAllProps",this),a&&(this._firstPT||"function"!=typeof this.target&&this._enabled(!1,!1)),o.runBackwards)for(i=this._firstPT;i;)i.s+=i.c,i.c=-i.c,i=i._next;this._onUpdate=o.onUpdate,this._initted=!0},a._initProps=function(e,i,n,r,s){var o,a,l,u,h,c;if(null==e)return!1;L[e._gsTweenID]&&Z(),this.vars.css||e.style&&e!==t&&e.nodeType&&Y.css&&this.vars.autoCSS!==!1&&E(this.vars,e);for(o in this.vars)if(c=this.vars[o],V[o])c&&(c instanceof Array||c.push&&m(c))&&c.join("").indexOf("{self}")!==-1&&(this.vars[o]=c=this._swapSelfInParams(c,this));else if(Y[o]&&(u=new Y[o])._onInitTween(e,this.vars[o],this,s)){for(this._firstPT=h={_next:this._firstPT,t:u,p:"setRatio",s:0,c:1,f:1,n:o,pg:1,pr:u._priority,m:0},a=u._overwriteProps.length;--a>-1;)i[u._overwriteProps[a]]=this._firstPT;(u._priority||u._onInitAllProps)&&(l=!0),(u._onDisable||u._onEnable)&&(this._notifyPluginsOfEnabled=!0),h._next&&(h._next._prev=h)}else i[o]=z.call(this,e,o,"get",c,o,0,null,this.vars.stringFilter,s);return r&&this._kill(r,e)?this._initProps(e,i,n,r,s):this._overwrite>1&&this._firstPT&&n.length>1&&J(e,this,i,this._overwrite,n)?(this._kill(i,e),this._initProps(e,i,n,r,s)):(this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration)&&(L[e._gsTweenID]=!0),l)},a.render=function(t,e,i){var n,r,s,o,a=this._time,l=this._duration,u=this._rawPrevTime;if(t>=l-1e-7)this._totalTime=this._time=l,this.ratio=this._ease._calcEnd?this._ease.getRatio(1):1,this._reversed||(n=!0,r="onComplete",i=i||this._timeline.autoRemoveChildren),0===l&&(this._initted||!this.vars.lazy||i)&&(this._startTime===this._timeline._duration&&(t=0),(u<0||t<=0&&t>=-1e-7||u===f&&"isPause"!==this.data)&&u!==t&&(i=!0,u>f&&(r="onReverseComplete")),this._rawPrevTime=o=!e||t||u===t?t:f);else if(t<1e-7)this._totalTime=this._time=0,this.ratio=this._ease._calcEnd?this._ease.getRatio(0):0,(0!==a||0===l&&u>0)&&(r="onReverseComplete",n=this._reversed),t<0&&(this._active=!1,0===l&&(this._initted||!this.vars.lazy||i)&&(u>=0&&(u!==f||"isPause"!==this.data)&&(i=!0),this._rawPrevTime=o=!e||t||u===t?t:f)),this._initted||(i=!0);else if(this._totalTime=this._time=t,this._easeType){var h=t/l,c=this._easeType,p=this._easePower;(1===c||3===c&&h>=.5)&&(h=1-h),3===c&&(h*=2),1===p?h*=h:2===p?h*=h*h:3===p?h*=h*h*h:4===p&&(h*=h*h*h*h),1===c?this.ratio=1-h:2===c?this.ratio=h:t/l<.5?this.ratio=h/2:this.ratio=1-h/2}else this.ratio=this._ease.getRatio(t/l);if(this._time!==a||i){if(!this._initted){if(this._init(),!this._initted||this._gc)return;if(!i&&this._firstPT&&(this.vars.lazy!==!1&&this._duration||this.vars.lazy&&!this._duration))return this._time=this._totalTime=a,this._rawPrevTime=u,F.push(this),void(this._lazy=[t,e]);this._time&&!n?this.ratio=this._ease.getRatio(this._time/l):n&&this._ease._calcEnd&&(this.ratio=this._ease.getRatio(0===this._time?0:1))}for(this._lazy!==!1&&(this._lazy=!1),this._active||!this._paused&&this._time!==a&&t>=0&&(this._active=!0),0===a&&(this._startAt&&(t>=0?this._startAt.render(t,e,i):r||(r="_dummyGS")),this.vars.onStart&&(0===this._time&&0!==l||e||this._callback("onStart"))),s=this._firstPT;s;)s.f?s.t[s.p](s.c*this.ratio+s.s):s.t[s.p]=s.c*this.ratio+s.s,s=s._next;this._onUpdate&&(t<0&&this._startAt&&t!==-1e-4&&this._startAt.render(t,e,i),e||(this._time!==a||n||i)&&this._callback("onUpdate")),r&&(this._gc&&!i||(t<0&&this._startAt&&!this._onUpdate&&t!==-1e-4&&this._startAt.render(t,e,i),n&&(this._timeline.autoRemoveChildren&&this._enabled(!1,!1),this._active=!1),!e&&this.vars[r]&&this._callback(r),0===l&&this._rawPrevTime===f&&o!==f&&(this._rawPrevTime=0)))}},a._kill=function(t,e,i){if("all"===t&&(t=null),null==t&&(null==e||e===this.target))return this._lazy=!1,this._enabled(!1,!1);e="string"!=typeof e?e||this._targets||this.target:N.selector(e)||e;var n,r,s,o,a,l,u,h,c,f=i&&this._time&&i._startTime===this._startTime&&this._timeline===i._timeline;if((m(e)||M(e))&&"number"!=typeof e[0])for(n=e.length;--n>-1;)this._kill(t,e[n],i)&&(l=!0);else{if(this._targets){for(n=this._targets.length;--n>-1;)if(e===this._targets[n]){a=this._propLookup[n]||{},this._overwrittenProps=this._overwrittenProps||[],r=this._overwrittenProps[n]=t?this._overwrittenProps[n]||{}:"all";break}}else{if(e!==this.target)return!1;a=this._propLookup,r=this._overwrittenProps=t?this._overwrittenProps||{}:"all"}if(a){if(u=t||a,h=t!==r&&"all"!==r&&t!==a&&("object"!=typeof t||!t._tempKill),i&&(N.onOverwrite||this.vars.onOverwrite)){for(s in u)a[s]&&(c||(c=[]),c.push(s));if((c||!t)&&!K(this,i,e,c))return!1}for(s in u)(o=a[s])&&(f&&(o.f?o.t[o.p](o.s):o.t[o.p]=o.s,l=!0),o.pg&&o.t._kill(u)&&(l=!0),o.pg&&0!==o.t._overwriteProps.length||(o._prev?o._prev._next=o._next:o===this._firstPT&&(this._firstPT=o._next),o._next&&(o._next._prev=o._prev),o._next=o._prev=null),delete a[s]),h&&(r[s]=1);!this._firstPT&&this._initted&&this._enabled(!1,!1)}}return l},a.invalidate=function(){return this._notifyPluginsOfEnabled&&N._onPluginEvent("_onDisable",this),this._firstPT=this._overwrittenProps=this._startAt=this._onUpdate=null,this._notifyPluginsOfEnabled=this._active=this._lazy=!1,this._propLookup=this._targets?{}:[],A.prototype.invalidate.call(this),this.vars.immediateRender&&(this._time=-f,this.render(Math.min(0,-this._delay))),this},a._enabled=function(t,e){if(u||l.wake(),t&&this._gc){var i,n=this._targets;if(n)for(i=n.length;--i>-1;)this._siblings[i]=Q(n[i],this,!0);else this._siblings=Q(this.target,this,!0)}return A.prototype._enabled.call(this,t,e),!(!this._notifyPluginsOfEnabled||!this._firstPT)&&N._onPluginEvent(t?"_onEnable":"_onDisable",this)},N.to=function(t,e,i){return new N(t,e,i)},N.from=function(t,e,i){return i.runBackwards=!0,i.immediateRender=0!=i.immediateRender,new N(t,e,i)},N.fromTo=function(t,e,i,n){return n.startAt=i,n.immediateRender=0!=n.immediateRender&&0!=i.immediateRender,new N(t,e,n)},N.delayedCall=function(t,e,i,n,r){return new N(e,0,{delay:t,onComplete:e,onCompleteParams:i,callbackScope:n,onReverseComplete:e,onReverseCompleteParams:i,immediateRender:!1,lazy:!1,useFrames:r,overwrite:0})},N.set=function(t,e){return new N(t,0,e)},N.getTweensOf=function(t,e){if(null==t)return[];t="string"!=typeof t?t:N.selector(t)||t;var i,n,r,s;if((m(t)||M(t))&&"number"!=typeof t[0]){for(i=t.length,n=[];--i>-1;)n=n.concat(N.getTweensOf(t[i],e));for(i=n.length;--i>-1;)for(s=n[i],r=i;--r>-1;)s===n[r]&&n.splice(i,1)}else for(n=Q(t).concat(),i=n.length;--i>-1;)(n[i]._gc||e&&!n[i].isActive())&&n.splice(i,1);return n},N.killTweensOf=N.killDelayedCallsTo=function(t,e,i){"object"==typeof e&&(i=e,e=!1);for(var n=N.getTweensOf(t,e),r=n.length;--r>-1;)n[r]._kill(i,t)};var et=y("plugins.TweenPlugin",function(t,e){this._overwriteProps=(t||"").split(","),this._propName=this._overwriteProps[0],this._priority=e||0,this._super=et.prototype},!0);if(a=et.prototype,et.version="1.19.0",et.API=2,a._firstPT=null,a._addTween=z,a.setRatio=X,a._kill=function(t){var e,i=this._overwriteProps,n=this._firstPT;if(null!=t[this._propName])this._overwriteProps=[];else for(e=i.length;--e>-1;)null!=t[i[e]]&&i.splice(e,1);for(;n;)null!=t[n.n]&&(n._next&&(n._next._prev=n._prev),n._prev?(n._prev._next=n._next,n._prev=null):this._firstPT===n&&(this._firstPT=n._next)),n=n._next;return!1},a._mod=a._roundProps=function(t){for(var e,i=this._firstPT;i;)e=t[this._propName]||null!=i.n&&t[i.n.split(this._propName+"_").join("")],e&&"function"==typeof e&&(2===i.f?i.t._applyPT.m=e:i.m=e),i=i._next},N._onPluginEvent=function(t,e){var i,n,r,s,o,a=e._firstPT;if("_onInitAllProps"===t){for(;a;){for(o=a._next,n=r;n&&n.pr>a.pr;)n=n._next;(a._prev=n?n._prev:s)?a._prev._next=a:r=a,(a._next=n)?n._prev=a:s=a,a=o}a=e._firstPT=r}for(;a;)a.pg&&"function"==typeof a.t[t]&&a.t[t]()&&(i=!0),a=a._next;return i},et.activate=function(t){for(var e=t.length;--e>-1;)t[e].API===et.API&&(Y[(new t[e])._propName]=t[e]);return!0},v.plugin=function(t){if(!(t&&t.propName&&t.init&&t.API))throw"illegal plugin definition.";var e,i=t.propName,n=t.priority||0,r=t.overwriteProps,s={init:"_onInitTween",set:"setRatio",kill:"_kill",round:"_mod",mod:"_mod",initAll:"_onInitAllProps"},o=y("plugins."+i.charAt(0).toUpperCase()+i.substr(1)+"Plugin",function(){et.call(this,i,n),this._overwriteProps=r||[]},t.global===!0),a=o.prototype=new et(i);a.constructor=o,o.API=t.API;for(e in s)"function"==typeof t[e]&&(a[s[e]]=t[e]);return o.version=t.version,et.activate([o]),o},s=t._gsQueue){for(o=0;o<s.length;o++)s[o]();for(a in g)g[a].func||t.console.log("GSAP encountered missing dependency: "+a)}u=!1}}("undefined"!=typeof e&&e.exports&&"undefined"!=typeof t?t:this||window,"TweenMax")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],8:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("plugins.CSSPlugin",["plugins.TweenPlugin","TweenLite"],function(t,e){var i,r,s,o,a=function(){t.call(this,"css"),this._overwriteProps.length=0,this.setRatio=a.prototype.setRatio},l=n._gsDefine.globals,u={},h=a.prototype=new t("css");h.constructor=a,a.version="1.19.0",a.API=2,a.defaultTransformPerspective=0,a.defaultSkewType="compensated",a.defaultSmoothOrigin=!0,h="px",a.suffixMap={top:h,right:h,bottom:h,left:h,width:h,height:h,fontSize:h,padding:h,margin:h,perspective:h,lineHeight:""};var c,f,p,d,m,g,_,v,y=/(?:\-|\.|\b)(\d|\.|e\-)+/g,x=/(?:\d|\-\d|\.\d|\-\.\d|\+=\d|\-=\d|\+=.\d|\-=\.\d)+/g,w=/(?:\+=|\-=|\-|\b)[\d\-\.]+[a-zA-Z0-9]*(?:%|\b)/gi,b=/(?![+-]?\d*\.?\d+|[+-]|e[+-]\d+)[^0-9]/g,T=/(?:\d|\-|\+|=|#|\.)*/g,P=/opacity *= *([^)]*)/i,k=/opacity:([^;]*)/i,C=/alpha\(opacity *=.+?\)/i,O=/^(rgb|hsl)/,S=/([A-Z])/g,A=/-([a-z])/gi,R=/(^(?:url\(\"|url\())|(?:(\"\))$|\)$)/gi,D=function(t,e){return e.toUpperCase()},N=/(?:Left|Right|Width)/i,M=/(M11|M12|M21|M22)=[\d\-\.e]+/gi,E=/progid\:DXImageTransform\.Microsoft\.Matrix\(.+?\)/i,F=/,(?=[^\)]*(?:\(|$))/gi,L=/[\s,\(]/i,j=Math.PI/180,X=180/Math.PI,I={},z=document,B=function(t){return z.createElementNS?z.createElementNS("http://www.w3.org/1999/xhtml",t):z.createElement(t)},Y=B("div"),q=B("img"),W=a._internals={_specialProps:u},V=navigator.userAgent,H=function(){var t=V.indexOf("Android"),e=B("a");return p=V.indexOf("Safari")!==-1&&V.indexOf("Chrome")===-1&&(t===-1||Number(V.substr(t+8,1))>3),m=p&&Number(V.substr(V.indexOf("Version/")+8,1))<6,d=V.indexOf("Firefox")!==-1,(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(V)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(V))&&(g=parseFloat(RegExp.$1)),!!e&&(e.style.cssText="top:1px;opacity:.55;",/^0.55/.test(e.style.opacity))}(),U=function(t){return P.test("string"==typeof t?t:(t.currentStyle?t.currentStyle.filter:t.style.filter)||"")?parseFloat(RegExp.$1)/100:1},$=function(t){window.console&&console.log(t)},G="",Z="",Q=function(t,e){e=e||Y;var i,n,r=e.style;if(void 0!==r[t])return t;for(t=t.charAt(0).toUpperCase()+t.substr(1),i=["O","Moz","ms","Ms","Webkit"],n=5;--n>-1&&void 0===r[i[n]+t];);return n>=0?(Z=3===n?"ms":i[n],G="-"+Z.toLowerCase()+"-",Z+t):null},K=z.defaultView?z.defaultView.getComputedStyle:function(){},J=a.getStyle=function(t,e,i,n,r){var s;return H||"opacity"!==e?(!n&&t.style[e]?s=t.style[e]:(i=i||K(t))?s=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(S,"-$1").toLowerCase()):t.currentStyle&&(s=t.currentStyle[e]),null==r||s&&"none"!==s&&"auto"!==s&&"auto auto"!==s?s:r):U(t)},tt=W.convertToPixels=function(t,i,n,r,s){if("px"===r||!r)return n;if("auto"===r||!n)return 0;var o,l,u,h=N.test(i),c=t,f=Y.style,p=n<0,d=1===n;if(p&&(n=-n),d&&(n*=100),"%"===r&&i.indexOf("border")!==-1)o=n/100*(h?t.clientWidth:t.clientHeight);else{if(f.cssText="border:0 solid red;position:"+J(t,"position")+";line-height:0;","%"!==r&&c.appendChild&&"v"!==r.charAt(0)&&"rem"!==r)f[h?"borderLeftWidth":"borderTopWidth"]=n+r;else{if(c=t.parentNode||z.body,l=c._gsCache,u=e.ticker.frame,l&&h&&l.time===u)return l.width*n/100;f[h?"width":"height"]=n+r}c.appendChild(Y),o=parseFloat(Y[h?"offsetWidth":"offsetHeight"]),c.removeChild(Y),h&&"%"===r&&a.cacheWidths!==!1&&(l=c._gsCache=c._gsCache||{},l.time=u,l.width=o/n*100),0!==o||s||(o=tt(t,i,n,r,!0))}return d&&(o/=100),p?-o:o},et=W.calculateOffset=function(t,e,i){if("absolute"!==J(t,"position",i))return 0;var n="left"===e?"Left":"Top",r=J(t,"margin"+n,i);return t["offset"+n]-(tt(t,e,parseFloat(r),r.replace(T,""))||0)},it=function(t,e){var i,n,r,s={};if(e=e||K(t,null))if(i=e.length)for(;--i>-1;)r=e[i],r.indexOf("-transform")!==-1&&At!==r||(s[r.replace(A,D)]=e.getPropertyValue(r));else for(i in e)i.indexOf("Transform")!==-1&&St!==i||(s[i]=e[i]);else if(e=t.currentStyle||t.style)for(i in e)"string"==typeof i&&void 0===s[i]&&(s[i.replace(A,D)]=e[i]);return H||(s.opacity=U(t)),n=Yt(t,e,!1),s.rotation=n.rotation,s.skewX=n.skewX,s.scaleX=n.scaleX,s.scaleY=n.scaleY,s.x=n.x,s.y=n.y,Dt&&(s.z=n.z,s.rotationX=n.rotationX,s.rotationY=n.rotationY,s.scaleZ=n.scaleZ),s.filters&&delete s.filters,s},nt=function(t,e,i,n,r){var s,o,a,l={},u=t.style;for(o in i)"cssText"!==o&&"length"!==o&&isNaN(o)&&(e[o]!==(s=i[o])||r&&r[o])&&o.indexOf("Origin")===-1&&("number"!=typeof s&&"string"!=typeof s||(l[o]="auto"!==s||"left"!==o&&"top"!==o?""!==s&&"auto"!==s&&"none"!==s||"string"!=typeof e[o]||""===e[o].replace(b,"")?s:0:et(t,o),void 0!==u[o]&&(a=new vt(u,o,u[o],a))));if(n)for(o in n)"className"!==o&&(l[o]=n[o]);return{difs:l,firstMPT:a}},rt={width:["Left","Right"],height:["Top","Bottom"]},st=["marginLeft","marginRight","marginTop","marginBottom"],ot=function(t,e,i){if("svg"===(t.nodeName+"").toLowerCase())return(i||K(t))[e]||0;if(t.getBBox&&It(t))return t.getBBox()[e]||0;var n=parseFloat("width"===e?t.offsetWidth:t.offsetHeight),r=rt[e],s=r.length;for(i=i||K(t,null);--s>-1;)n-=parseFloat(J(t,"padding"+r[s],i,!0))||0,n-=parseFloat(J(t,"border"+r[s]+"Width",i,!0))||0;return n},at=function(t,e){if("contain"===t||"auto"===t||"auto auto"===t)return t+" ";null!=t&&""!==t||(t="0 0");var i,n=t.split(" "),r=t.indexOf("left")!==-1?"0%":t.indexOf("right")!==-1?"100%":n[0],s=t.indexOf("top")!==-1?"0%":t.indexOf("bottom")!==-1?"100%":n[1];if(n.length>3&&!e){for(n=t.split(", ").join(",").split(","),t=[],i=0;i<n.length;i++)t.push(at(n[i]));return t.join(",")}return null==s?s="center"===r?"50%":"0":"center"===s&&(s="50%"),("center"===r||isNaN(parseFloat(r))&&(r+"").indexOf("=")===-1)&&(r="50%"),t=r+" "+s+(n.length>2?" "+n[2]:""),e&&(e.oxp=r.indexOf("%")!==-1,e.oyp=s.indexOf("%")!==-1,e.oxr="="===r.charAt(1),e.oyr="="===s.charAt(1),e.ox=parseFloat(r.replace(b,"")),e.oy=parseFloat(s.replace(b,"")),e.v=t),e||t},lt=function(t,e){return"function"==typeof t&&(t=t(v,_)),"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2)):parseFloat(t)-parseFloat(e)||0},ut=function(t,e){return"function"==typeof t&&(t=t(v,_)),null==t?e:"string"==typeof t&&"="===t.charAt(1)?parseInt(t.charAt(0)+"1",10)*parseFloat(t.substr(2))+e:parseFloat(t)||0},ht=function(t,e,i,n){var r,s,o,a,l,u=1e-6;return"function"==typeof t&&(t=t(v,_)),null==t?a=e:"number"==typeof t?a=t:(r=360,s=t.split("_"),l="="===t.charAt(1),o=(l?parseInt(t.charAt(0)+"1",10)*parseFloat(s[0].substr(2)):parseFloat(s[0]))*(t.indexOf("rad")===-1?1:X)-(l?0:e),s.length&&(n&&(n[i]=e+o),t.indexOf("short")!==-1&&(o%=r,o!==o%(r/2)&&(o=o<0?o+r:o-r)),t.indexOf("_cw")!==-1&&o<0?o=(o+9999999999*r)%r-(o/r|0)*r:t.indexOf("ccw")!==-1&&o>0&&(o=(o-9999999999*r)%r-(o/r|0)*r)),a=e+o),a<u&&a>-u&&(a=0),a},ct={aqua:[0,255,255],lime:[0,255,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,255],navy:[0,0,128],white:[255,255,255],fuchsia:[255,0,255],olive:[128,128,0],yellow:[255,255,0],orange:[255,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[255,0,0],pink:[255,192,203],cyan:[0,255,255],transparent:[255,255,255,0]},ft=function(t,e,i){return t=t<0?t+1:t>1?t-1:t,255*(6*t<1?e+(i-e)*t*6:t<.5?i:3*t<2?e+(i-e)*(2/3-t)*6:e)+.5|0},pt=a.parseColor=function(t,e){var i,n,r,s,o,a,l,u,h,c,f;if(t)if("number"==typeof t)i=[t>>16,t>>8&255,255&t];else{if(","===t.charAt(t.length-1)&&(t=t.substr(0,t.length-1)),ct[t])i=ct[t];else if("#"===t.charAt(0))4===t.length&&(n=t.charAt(1),r=t.charAt(2),s=t.charAt(3),t="#"+n+n+r+r+s+s),t=parseInt(t.substr(1),16),i=[t>>16,t>>8&255,255&t];else if("hsl"===t.substr(0,3))if(i=f=t.match(y),e){if(t.indexOf("=")!==-1)return t.match(x)}else o=Number(i[0])%360/360,a=Number(i[1])/100,l=Number(i[2])/100,r=l<=.5?l*(a+1):l+a-l*a,n=2*l-r,i.length>3&&(i[3]=Number(t[3])),i[0]=ft(o+1/3,n,r),i[1]=ft(o,n,r),i[2]=ft(o-1/3,n,r);else i=t.match(y)||ct.transparent;i[0]=Number(i[0]),i[1]=Number(i[1]),i[2]=Number(i[2]),i.length>3&&(i[3]=Number(i[3]))}else i=ct.black;return e&&!f&&(n=i[0]/255,r=i[1]/255,s=i[2]/255,u=Math.max(n,r,s),h=Math.min(n,r,s),l=(u+h)/2,u===h?o=a=0:(c=u-h,a=l>.5?c/(2-u-h):c/(u+h),o=u===n?(r-s)/c+(r<s?6:0):u===r?(s-n)/c+2:(n-r)/c+4,o*=60),i[0]=o+.5|0,i[1]=100*a+.5|0,i[2]=100*l+.5|0),i},dt=function(t,e){var i,n,r,s=t.match(mt)||[],o=0,a=s.length?"":t;for(i=0;i<s.length;i++)n=s[i],r=t.substr(o,t.indexOf(n,o)-o),o+=r.length+n.length,n=pt(n,e),3===n.length&&n.push(1),a+=r+(e?"hsla("+n[0]+","+n[1]+"%,"+n[2]+"%,"+n[3]:"rgba("+n.join(","))+")";return a+t.substr(o)},mt="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3}){1,2}\\b";for(h in ct)mt+="|"+h+"\\b";mt=new RegExp(mt+")","gi"),a.colorStringFilter=function(t){var e,i=t[0]+t[1];mt.test(i)&&(e=i.indexOf("hsl(")!==-1||i.indexOf("hsla(")!==-1,t[0]=dt(t[0],e),t[1]=dt(t[1],e)),mt.lastIndex=0},e.defaultStringFilter||(e.defaultStringFilter=a.colorStringFilter);var gt=function(t,e,i,n){if(null==t)return function(t){return t};var r,s=e?(t.match(mt)||[""])[0]:"",o=t.split(s).join("").match(w)||[],a=t.substr(0,t.indexOf(o[0])),l=")"===t.charAt(t.length-1)?")":"",u=t.indexOf(" ")!==-1?" ":",",h=o.length,c=h>0?o[0].replace(y,""):"";return h?r=e?function(t){var e,f,p,d;if("number"==typeof t)t+=c;else if(n&&F.test(t)){for(d=t.replace(F,"|").split("|"),p=0;p<d.length;p++)d[p]=r(d[p]);return d.join(",")}if(e=(t.match(mt)||[s])[0],f=t.split(e).join("").match(w)||[],p=f.length,h>p--)for(;++p<h;)f[p]=i?f[(p-1)/2|0]:o[p];return a+f.join(u)+u+e+l+(t.indexOf("inset")!==-1?" inset":"")}:function(t){var e,s,f;if("number"==typeof t)t+=c;else if(n&&F.test(t)){for(s=t.replace(F,"|").split("|"),f=0;f<s.length;f++)s[f]=r(s[f]);return s.join(",")}if(e=t.match(w)||[],f=e.length,h>f--)for(;++f<h;)e[f]=i?e[(f-1)/2|0]:o[f];return a+e.join(u)+l}:function(t){return t}},_t=function(t){return t=t.split(","),function(e,i,n,r,s,o,a){var l,u=(i+"").split(" ");for(a={},l=0;l<4;l++)a[t[l]]=u[l]=u[l]||u[(l-1)/2>>0];return r.parse(e,a,s,o)}},vt=(W._setPluginRatio=function(t){this.plugin.setRatio(t);for(var e,i,n,r,s,o=this.data,a=o.proxy,l=o.firstMPT,u=1e-6;l;)e=a[l.v],l.r?e=Math.round(e):e<u&&e>-u&&(e=0),l.t[l.p]=e,l=l._next;if(o.autoRotate&&(o.autoRotate.rotation=o.mod?o.mod(a.rotation,this.t):a.rotation),1===t||0===t)for(l=o.firstMPT,s=1===t?"e":"b";l;){if(i=l.t,i.type){if(1===i.type){for(r=i.xs0+i.s+i.xs1,n=1;n<i.l;n++)r+=i["xn"+n]+i["xs"+(n+1)];i[s]=r}}else i[s]=i.s+i.xs0;l=l._next}},function(t,e,i,n,r){this.t=t,this.p=e,this.v=i,this.r=r,n&&(n._prev=this,this._next=n)}),yt=(W._parseToProxy=function(t,e,i,n,r,s){var o,a,l,u,h,c=n,f={},p={},d=i._transform,m=I;for(i._transform=null,I=e,n=h=i.parse(t,e,n,r),I=m,s&&(i._transform=d,c&&(c._prev=null,c._prev&&(c._prev._next=null)));n&&n!==c;){if(n.type<=1&&(a=n.p,p[a]=n.s+n.c,f[a]=n.s,s||(u=new vt(n,"s",a,u,n.r),n.c=0),1===n.type))for(o=n.l;--o>0;)l="xn"+o,a=n.p+"_"+l,p[a]=n.data[l],f[a]=n[l],s||(u=new vt(n,l,a,u,n.rxp[l]));n=n._next}return{proxy:f,end:p,firstMPT:u,pt:h}},W.CSSPropTween=function(t,e,n,r,s,a,l,u,h,c,f){this.t=t,this.p=e,this.s=n,this.c=r,this.n=l||e,t instanceof yt||o.push(this.n),this.r=u,this.type=a||0,h&&(this.pr=h,i=!0),this.b=void 0===c?n:c,this.e=void 0===f?n+r:f,s&&(this._next=s,s._prev=this)}),xt=function(t,e,i,n,r,s){var o=new yt(t,e,i,n-i,r,(-1),s);return o.b=i,o.e=o.xs0=n,o},wt=a.parseComplex=function(t,e,i,n,r,s,o,l,u,h){i=i||s||"","function"==typeof n&&(n=n(v,_)),o=new yt(t,e,0,0,o,h?2:1,null,(!1),l,i,n),n+="",r&&mt.test(n+i)&&(n=[i,n],a.colorStringFilter(n),i=n[0],n=n[1]);var f,p,d,m,g,w,b,T,P,k,C,O,S,A=i.split(", ").join(",").split(" "),R=n.split(", ").join(",").split(" "),D=A.length,N=c!==!1;for(n.indexOf(",")===-1&&i.indexOf(",")===-1||(A=A.join(" ").replace(F,", ").split(" "),R=R.join(" ").replace(F,", ").split(" "),D=A.length),D!==R.length&&(A=(s||"").split(" "),D=A.length),o.plugin=u,o.setRatio=h,mt.lastIndex=0,f=0;f<D;f++)if(m=A[f],g=R[f],T=parseFloat(m),T||0===T)o.appendXtra("",T,lt(g,T),g.replace(x,""),N&&g.indexOf("px")!==-1,!0);else if(r&&mt.test(m))O=g.indexOf(")")+1,O=")"+(O?g.substr(O):""),S=g.indexOf("hsl")!==-1&&H,m=pt(m,S),g=pt(g,S),P=m.length+g.length>6,P&&!H&&0===g[3]?(o["xs"+o.l]+=o.l?" transparent":"transparent",o.e=o.e.split(R[f]).join("transparent")):(H||(P=!1),S?o.appendXtra(P?"hsla(":"hsl(",m[0],lt(g[0],m[0]),",",!1,!0).appendXtra("",m[1],lt(g[1],m[1]),"%,",!1).appendXtra("",m[2],lt(g[2],m[2]),P?"%,":"%"+O,!1):o.appendXtra(P?"rgba(":"rgb(",m[0],g[0]-m[0],",",!0,!0).appendXtra("",m[1],g[1]-m[1],",",!0).appendXtra("",m[2],g[2]-m[2],P?",":O,!0),P&&(m=m.length<4?1:m[3],o.appendXtra("",m,(g.length<4?1:g[3])-m,O,!1))),mt.lastIndex=0;else if(w=m.match(y)){if(b=g.match(x),!b||b.length!==w.length)return o;for(d=0,p=0;p<w.length;p++)C=w[p],k=m.indexOf(C,d),o.appendXtra(m.substr(d,k-d),Number(C),lt(b[p],C),"",N&&"px"===m.substr(k+C.length,2),0===p),d=k+C.length;o["xs"+o.l]+=m.substr(d)}else o["xs"+o.l]+=o.l||o["xs"+o.l]?" "+g:g;if(n.indexOf("=")!==-1&&o.data){for(O=o.xs0+o.data.s,f=1;f<o.l;f++)O+=o["xs"+f]+o.data["xn"+f];o.e=O+o["xs"+f]}return o.l||(o.type=-1,o.xs0=o.e),o.xfirst||o},bt=9;for(h=yt.prototype,h.l=h.pr=0;--bt>0;)h["xn"+bt]=0,h["xs"+bt]="";h.xs0="",h._next=h._prev=h.xfirst=h.data=h.plugin=h.setRatio=h.rxp=null,h.appendXtra=function(t,e,i,n,r,s){var o=this,a=o.l;return o["xs"+a]+=s&&(a||o["xs"+a])?" "+t:t||"",i||0===a||o.plugin?(o.l++,o.type=o.setRatio?2:1,o["xs"+o.l]=n||"",a>0?(o.data["xn"+a]=e+i,o.rxp["xn"+a]=r,o["xn"+a]=e,o.plugin||(o.xfirst=new yt(o,"xn"+a,e,i,o.xfirst||o,0,o.n,r,o.pr),o.xfirst.xs0=0),o):(o.data={s:e+i},o.rxp={},o.s=e,o.c=i,o.r=r,o)):(o["xs"+a]+=e+(n||""),o)};var Tt=function(t,e){e=e||{},this.p=e.prefix?Q(t)||t:t,u[t]=u[this.p]=this,this.format=e.formatter||gt(e.defaultValue,e.color,e.collapsible,e.multi),e.parser&&(this.parse=e.parser),this.clrs=e.color,this.multi=e.multi,this.keyword=e.keyword,this.dflt=e.defaultValue,this.pr=e.priority||0},Pt=W._registerComplexSpecialProp=function(t,e,i){"object"!=typeof e&&(e={parser:i});var n,r,s=t.split(","),o=e.defaultValue;for(i=i||[o],n=0;n<s.length;n++)e.prefix=0===n&&e.prefix,e.defaultValue=i[n]||o,r=new Tt(s[n],e)},kt=W._registerPluginProp=function(t){if(!u[t]){var e=t.charAt(0).toUpperCase()+t.substr(1)+"Plugin";Pt(t,{parser:function(t,i,n,r,s,o,a){var h=l.com.greensock.plugins[e];return h?(h._cssRegister(),u[n].parse(t,i,n,r,s,o,a)):($("Error: "+e+" js file not loaded."),s)}})}};h=Tt.prototype,h.parseComplex=function(t,e,i,n,r,s){var o,a,l,u,h,c,f=this.keyword;if(this.multi&&(F.test(i)||F.test(e)?(a=e.replace(F,"|").split("|"),l=i.replace(F,"|").split("|")):f&&(a=[e],l=[i])),l){for(u=l.length>a.length?l.length:a.length,o=0;o<u;o++)e=a[o]=a[o]||this.dflt,i=l[o]=l[o]||this.dflt,f&&(h=e.indexOf(f),c=i.indexOf(f),h!==c&&(c===-1?a[o]=a[o].split(f).join(""):h===-1&&(a[o]+=" "+f)));e=a.join(", "),i=l.join(", ")}return wt(t,this.p,e,i,this.clrs,this.dflt,n,this.pr,r,s)},h.parse=function(t,e,i,n,r,o,a){return this.parseComplex(t.style,this.format(J(t,this.p,s,!1,this.dflt)),this.format(e),r,o)},a.registerSpecialProp=function(t,e,i){Pt(t,{parser:function(t,n,r,s,o,a,l){var u=new yt(t,r,0,0,o,2,r,(!1),i);return u.plugin=a,u.setRatio=e(t,n,s._tween,r),u},priority:i})},a.useSVGTransformAttr=p||d;var Ct,Ot="scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent".split(","),St=Q("transform"),At=G+"transform",Rt=Q("transformOrigin"),Dt=null!==Q("perspective"),Nt=W.Transform=function(){this.perspective=parseFloat(a.defaultTransformPerspective)||0,this.force3D=!(a.defaultForce3D===!1||!Dt)&&(a.defaultForce3D||"auto")},Mt=window.SVGElement,Et=function(t,e,i){var n,r=z.createElementNS("http://www.w3.org/2000/svg",t),s=/([a-z])([A-Z])/g;for(n in i)r.setAttributeNS(null,n.replace(s,"$1-$2").toLowerCase(),i[n]);return e.appendChild(r),r},Ft=z.documentElement,Lt=function(){var t,e,i,n=g||/Android/i.test(V)&&!window.chrome;return z.createElementNS&&!n&&(t=Et("svg",Ft),e=Et("rect",t,{width:100,height:50,x:100}),i=e.getBoundingClientRect().width,e.style[Rt]="50% 50%",e.style[St]="scaleX(0.5)",n=i===e.getBoundingClientRect().width&&!(d&&Dt),Ft.removeChild(t)),n}(),jt=function(t,e,i,n,r,s){var o,l,u,h,c,f,p,d,m,g,_,v,y,x,w=t._gsTransform,b=Bt(t,!0);w&&(y=w.xOrigin,x=w.yOrigin),(!n||(o=n.split(" ")).length<2)&&(p=t.getBBox(),e=at(e).split(" "),o=[(e[0].indexOf("%")!==-1?parseFloat(e[0])/100*p.width:parseFloat(e[0]))+p.x,(e[1].indexOf("%")!==-1?parseFloat(e[1])/100*p.height:parseFloat(e[1]))+p.y]),i.xOrigin=h=parseFloat(o[0]),i.yOrigin=c=parseFloat(o[1]),n&&b!==zt&&(f=b[0],p=b[1],d=b[2],m=b[3],g=b[4],_=b[5],v=f*m-p*d,l=h*(m/v)+c*(-d/v)+(d*_-m*g)/v,u=h*(-p/v)+c*(f/v)-(f*_-p*g)/v,h=i.xOrigin=o[0]=l,c=i.yOrigin=o[1]=u),w&&(s&&(i.xOffset=w.xOffset,i.yOffset=w.yOffset,w=i),r||r!==!1&&a.defaultSmoothOrigin!==!1?(l=h-y,u=c-x,w.xOffset+=l*b[0]+u*b[2]-l,w.yOffset+=l*b[1]+u*b[3]-u):w.xOffset=w.yOffset=0),s||t.setAttribute("data-svg-origin",o.join(" "))},Xt=function(t){try{
return t.getBBox()}catch(t){}},It=function(t){return!!(Mt&&t.getBBox&&t.getCTM&&Xt(t)&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},zt=[1,0,0,1,0,0],Bt=function(t,e){var i,n,r,s,o,a,l=t._gsTransform||new Nt,u=1e5,h=t.style;if(St?n=J(t,At,null,!0):t.currentStyle&&(n=t.currentStyle.filter.match(M),n=n&&4===n.length?[n[0].substr(4),Number(n[2].substr(4)),Number(n[1].substr(4)),n[3].substr(4),l.x||0,l.y||0].join(","):""),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,i&&St&&((a="none"===K(t).display)||!t.parentNode)&&(a&&(s=h.display,h.display="block"),t.parentNode||(o=1,Ft.appendChild(t)),n=J(t,At,null,!0),i=!n||"none"===n||"matrix(1, 0, 0, 1, 0, 0)"===n,s?h.display=s:a&&Ht(h,"display"),o&&Ft.removeChild(t)),(l.svg||t.getBBox&&It(t))&&(i&&(h[St]+"").indexOf("matrix")!==-1&&(n=h[St],i=0),r=t.getAttribute("transform"),i&&r&&(r.indexOf("matrix")!==-1?(n=r,i=0):r.indexOf("translate")!==-1&&(n="matrix(1,0,0,1,"+r.match(/(?:\-|\b)[\d\-\.e]+\b/gi).join(",")+")",i=0))),i)return zt;for(r=(n||"").match(y)||[],bt=r.length;--bt>-1;)s=Number(r[bt]),r[bt]=(o=s-(s|=0))?(o*u+(o<0?-.5:.5)|0)/u+s:s;return e&&r.length>6?[r[0],r[1],r[4],r[5],r[12],r[13]]:r},Yt=W.getTransform=function(t,i,n,r){if(t._gsTransform&&n&&!r)return t._gsTransform;var s,o,l,u,h,c,f=n?t._gsTransform||new Nt:new Nt,p=f.scaleX<0,d=2e-5,m=1e5,g=Dt?parseFloat(J(t,Rt,i,!1,"0 0 0").split(" ")[2])||f.zOrigin||0:0,_=parseFloat(a.defaultTransformPerspective)||0;if(f.svg=!(!t.getBBox||!It(t)),f.svg&&(jt(t,J(t,Rt,i,!1,"50% 50%")+"",f,t.getAttribute("data-svg-origin")),Ct=a.useSVGTransformAttr||Lt),s=Bt(t),s!==zt){if(16===s.length){var v,y,x,w,b,T=s[0],P=s[1],k=s[2],C=s[3],O=s[4],S=s[5],A=s[6],R=s[7],D=s[8],N=s[9],M=s[10],E=s[12],F=s[13],L=s[14],j=s[11],I=Math.atan2(A,M);f.zOrigin&&(L=-f.zOrigin,E=D*L-s[12],F=N*L-s[13],L=M*L+f.zOrigin-s[14]),f.rotationX=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),v=O*w+D*b,y=S*w+N*b,x=A*w+M*b,D=O*-b+D*w,N=S*-b+N*w,M=A*-b+M*w,j=R*-b+j*w,O=v,S=y,A=x),I=Math.atan2(-k,M),f.rotationY=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),v=T*w-D*b,y=P*w-N*b,x=k*w-M*b,N=P*b+N*w,M=k*b+M*w,j=C*b+j*w,T=v,P=y,k=x),I=Math.atan2(P,T),f.rotation=I*X,I&&(w=Math.cos(-I),b=Math.sin(-I),T=T*w+O*b,y=P*w+S*b,S=P*-b+S*w,A=k*-b+A*w,P=y),f.rotationX&&Math.abs(f.rotationX)+Math.abs(f.rotation)>359.9&&(f.rotationX=f.rotation=0,f.rotationY=180-f.rotationY),f.scaleX=(Math.sqrt(T*T+P*P)*m+.5|0)/m,f.scaleY=(Math.sqrt(S*S+N*N)*m+.5|0)/m,f.scaleZ=(Math.sqrt(A*A+M*M)*m+.5|0)/m,f.rotationX||f.rotationY?f.skewX=0:(f.skewX=O||S?Math.atan2(O,S)*X+f.rotation:f.skewX||0,Math.abs(f.skewX)>90&&Math.abs(f.skewX)<270&&(p?(f.scaleX*=-1,f.skewX+=f.rotation<=0?180:-180,f.rotation+=f.rotation<=0?180:-180):(f.scaleY*=-1,f.skewX+=f.skewX<=0?180:-180))),f.perspective=j?1/(j<0?-j:j):0,f.x=E,f.y=F,f.z=L,f.svg&&(f.x-=f.xOrigin-(f.xOrigin*T-f.yOrigin*O),f.y-=f.yOrigin-(f.yOrigin*P-f.xOrigin*S))}else if(!Dt||r||!s.length||f.x!==s[4]||f.y!==s[5]||!f.rotationX&&!f.rotationY){var z=s.length>=6,B=z?s[0]:1,Y=s[1]||0,q=s[2]||0,W=z?s[3]:1;f.x=s[4]||0,f.y=s[5]||0,l=Math.sqrt(B*B+Y*Y),u=Math.sqrt(W*W+q*q),h=B||Y?Math.atan2(Y,B)*X:f.rotation||0,c=q||W?Math.atan2(q,W)*X+h:f.skewX||0,Math.abs(c)>90&&Math.abs(c)<270&&(p?(l*=-1,c+=h<=0?180:-180,h+=h<=0?180:-180):(u*=-1,c+=c<=0?180:-180)),f.scaleX=l,f.scaleY=u,f.rotation=h,f.skewX=c,Dt&&(f.rotationX=f.rotationY=f.z=0,f.perspective=_,f.scaleZ=1),f.svg&&(f.x-=f.xOrigin-(f.xOrigin*B+f.yOrigin*q),f.y-=f.yOrigin-(f.xOrigin*Y+f.yOrigin*W))}f.zOrigin=g;for(o in f)f[o]<d&&f[o]>-d&&(f[o]=0)}return n&&(t._gsTransform=f,f.svg&&(Ct&&t.style[St]?e.delayedCall(.001,function(){Ht(t.style,St)}):!Ct&&t.getAttribute("transform")&&e.delayedCall(.001,function(){t.removeAttribute("transform")}))),f},qt=function(t){var e,i,n=this.data,r=-n.rotation*j,s=r+n.skewX*j,o=1e5,a=(Math.cos(r)*n.scaleX*o|0)/o,l=(Math.sin(r)*n.scaleX*o|0)/o,u=(Math.sin(s)*-n.scaleY*o|0)/o,h=(Math.cos(s)*n.scaleY*o|0)/o,c=this.t.style,f=this.t.currentStyle;if(f){i=l,l=-u,u=-i,e=f.filter,c.filter="";var p,d,m=this.t.offsetWidth,_=this.t.offsetHeight,v="absolute"!==f.position,y="progid:DXImageTransform.Microsoft.Matrix(M11="+a+", M12="+l+", M21="+u+", M22="+h,x=n.x+m*n.xPercent/100,w=n.y+_*n.yPercent/100;if(null!=n.ox&&(p=(n.oxp?m*n.ox*.01:n.ox)-m/2,d=(n.oyp?_*n.oy*.01:n.oy)-_/2,x+=p-(p*a+d*l),w+=d-(p*u+d*h)),v?(p=m/2,d=_/2,y+=", Dx="+(p-(p*a+d*l)+x)+", Dy="+(d-(p*u+d*h)+w)+")"):y+=", sizingMethod='auto expand')",e.indexOf("DXImageTransform.Microsoft.Matrix(")!==-1?c.filter=e.replace(E,y):c.filter=y+" "+e,0!==t&&1!==t||1===a&&0===l&&0===u&&1===h&&(v&&y.indexOf("Dx=0, Dy=0")===-1||P.test(e)&&100!==parseFloat(RegExp.$1)||e.indexOf(e.indexOf("Alpha"))===-1&&c.removeAttribute("filter")),!v){var b,k,C,O=g<8?1:-1;for(p=n.ieOffsetX||0,d=n.ieOffsetY||0,n.ieOffsetX=Math.round((m-((a<0?-a:a)*m+(l<0?-l:l)*_))/2+x),n.ieOffsetY=Math.round((_-((h<0?-h:h)*_+(u<0?-u:u)*m))/2+w),bt=0;bt<4;bt++)k=st[bt],b=f[k],i=b.indexOf("px")!==-1?parseFloat(b):tt(this.t,k,parseFloat(b),b.replace(T,""))||0,C=i!==n[k]?bt<2?-n.ieOffsetX:-n.ieOffsetY:bt<2?p-n.ieOffsetX:d-n.ieOffsetY,c[k]=(n[k]=Math.round(i-C*(0===bt||2===bt?1:O)))+"px"}}},Wt=W.set3DTransformRatio=W.setTransformRatio=function(t){var e,i,n,r,s,o,a,l,u,h,c,f,p,m,g,_,v,y,x,w,b,T,P,k=this.data,C=this.t.style,O=k.rotation,S=k.rotationX,A=k.rotationY,R=k.scaleX,D=k.scaleY,N=k.scaleZ,M=k.x,E=k.y,F=k.z,L=k.svg,X=k.perspective,I=k.force3D;if(((1===t||0===t)&&"auto"===I&&(this.tween._totalTime===this.tween._totalDuration||!this.tween._totalTime)||!I)&&!F&&!X&&!A&&!S&&1===N||Ct&&L||!Dt)return void(O||k.skewX||L?(O*=j,T=k.skewX*j,P=1e5,e=Math.cos(O)*R,r=Math.sin(O)*R,i=Math.sin(O-T)*-D,s=Math.cos(O-T)*D,T&&"simple"===k.skewType&&(v=Math.tan(T-k.skewY*j),v=Math.sqrt(1+v*v),i*=v,s*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v)),L&&(M+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,E+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset,Ct&&(k.xPercent||k.yPercent)&&(m=this.t.getBBox(),M+=.01*k.xPercent*m.width,E+=.01*k.yPercent*m.height),m=1e-6,M<m&&M>-m&&(M=0),E<m&&E>-m&&(E=0)),x=(e*P|0)/P+","+(r*P|0)/P+","+(i*P|0)/P+","+(s*P|0)/P+","+M+","+E+")",L&&Ct?this.t.setAttribute("transform","matrix("+x):C[St]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+x):C[St]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix(":"matrix(")+R+",0,0,"+D+","+M+","+E+")");if(d&&(m=1e-4,R<m&&R>-m&&(R=N=2e-5),D<m&&D>-m&&(D=N=2e-5),!X||k.z||k.rotationX||k.rotationY||(X=0)),O||k.skewX)O*=j,g=e=Math.cos(O),_=r=Math.sin(O),k.skewX&&(O-=k.skewX*j,g=Math.cos(O),_=Math.sin(O),"simple"===k.skewType&&(v=Math.tan((k.skewX-k.skewY)*j),v=Math.sqrt(1+v*v),g*=v,_*=v,k.skewY&&(v=Math.tan(k.skewY*j),v=Math.sqrt(1+v*v),e*=v,r*=v))),i=-_,s=g;else{if(!(A||S||1!==N||X||L))return void(C[St]=(k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) translate3d(":"translate3d(")+M+"px,"+E+"px,"+F+"px)"+(1!==R||1!==D?" scale("+R+","+D+")":""));e=s=1,i=r=0}u=1,n=o=a=l=h=c=0,f=X?-1/X:0,p=k.zOrigin,m=1e-6,w=",",b="0",O=A*j,O&&(g=Math.cos(O),_=Math.sin(O),a=-_,h=f*-_,n=e*_,o=r*_,u=g,f*=g,e*=g,r*=g),O=S*j,O&&(g=Math.cos(O),_=Math.sin(O),v=i*g+n*_,y=s*g+o*_,l=u*_,c=f*_,n=i*-_+n*g,o=s*-_+o*g,u*=g,f*=g,i=v,s=y),1!==N&&(n*=N,o*=N,u*=N,f*=N),1!==D&&(i*=D,s*=D,l*=D,c*=D),1!==R&&(e*=R,r*=R,a*=R,h*=R),(p||L)&&(p&&(M+=n*-p,E+=o*-p,F+=u*-p+p),L&&(M+=k.xOrigin-(k.xOrigin*e+k.yOrigin*i)+k.xOffset,E+=k.yOrigin-(k.xOrigin*r+k.yOrigin*s)+k.yOffset),M<m&&M>-m&&(M=b),E<m&&E>-m&&(E=b),F<m&&F>-m&&(F=0)),x=k.xPercent||k.yPercent?"translate("+k.xPercent+"%,"+k.yPercent+"%) matrix3d(":"matrix3d(",x+=(e<m&&e>-m?b:e)+w+(r<m&&r>-m?b:r)+w+(a<m&&a>-m?b:a),x+=w+(h<m&&h>-m?b:h)+w+(i<m&&i>-m?b:i)+w+(s<m&&s>-m?b:s),S||A||1!==N?(x+=w+(l<m&&l>-m?b:l)+w+(c<m&&c>-m?b:c)+w+(n<m&&n>-m?b:n),x+=w+(o<m&&o>-m?b:o)+w+(u<m&&u>-m?b:u)+w+(f<m&&f>-m?b:f)+w):x+=",0,0,0,0,1,0,",x+=M+w+E+w+F+w+(X?1+-F/X:1)+")",C[St]=x};h=Nt.prototype,h.x=h.y=h.z=h.skewX=h.skewY=h.rotation=h.rotationX=h.rotationY=h.zOrigin=h.xPercent=h.yPercent=h.xOffset=h.yOffset=0,h.scaleX=h.scaleY=h.scaleZ=1,Pt("transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin",{parser:function(t,e,i,n,r,o,l){if(n._lastParsedTransform===l)return r;n._lastParsedTransform=l;var u;"function"==typeof l[i]&&(u=l[i],l[i]=e);var h,c,f,p,d,m,g,y,x,w=t._gsTransform,b=t.style,T=1e-6,P=Ot.length,k=l,C={},O="transformOrigin",S=Yt(t,s,!0,k.parseTransform),A=k.transform&&("function"==typeof k.transform?k.transform(v,_):k.transform);if(n._transform=S,A&&"string"==typeof A&&St)c=Y.style,c[St]=A,c.display="block",c.position="absolute",z.body.appendChild(Y),h=Yt(Y,null,!1),S.svg&&(m=S.xOrigin,g=S.yOrigin,h.x-=S.xOffset,h.y-=S.yOffset,(k.transformOrigin||k.svgOrigin)&&(A={},jt(t,at(k.transformOrigin),A,k.svgOrigin,k.smoothOrigin,!0),m=A.xOrigin,g=A.yOrigin,h.x-=A.xOffset-S.xOffset,h.y-=A.yOffset-S.yOffset),(m||g)&&(y=Bt(Y,!0),h.x-=m-(m*y[0]+g*y[2]),h.y-=g-(m*y[1]+g*y[3]))),z.body.removeChild(Y),h.perspective||(h.perspective=S.perspective),null!=k.xPercent&&(h.xPercent=ut(k.xPercent,S.xPercent)),null!=k.yPercent&&(h.yPercent=ut(k.yPercent,S.yPercent));else if("object"==typeof k){if(h={scaleX:ut(null!=k.scaleX?k.scaleX:k.scale,S.scaleX),scaleY:ut(null!=k.scaleY?k.scaleY:k.scale,S.scaleY),scaleZ:ut(k.scaleZ,S.scaleZ),x:ut(k.x,S.x),y:ut(k.y,S.y),z:ut(k.z,S.z),xPercent:ut(k.xPercent,S.xPercent),yPercent:ut(k.yPercent,S.yPercent),perspective:ut(k.transformPerspective,S.perspective)},d=k.directionalRotation,null!=d)if("object"==typeof d)for(c in d)k[c]=d[c];else k.rotation=d;"string"==typeof k.x&&k.x.indexOf("%")!==-1&&(h.x=0,h.xPercent=ut(k.x,S.xPercent)),"string"==typeof k.y&&k.y.indexOf("%")!==-1&&(h.y=0,h.yPercent=ut(k.y,S.yPercent)),h.rotation=ht("rotation"in k?k.rotation:"shortRotation"in k?k.shortRotation+"_short":"rotationZ"in k?k.rotationZ:S.rotation-S.skewY,S.rotation-S.skewY,"rotation",C),Dt&&(h.rotationX=ht("rotationX"in k?k.rotationX:"shortRotationX"in k?k.shortRotationX+"_short":S.rotationX||0,S.rotationX,"rotationX",C),h.rotationY=ht("rotationY"in k?k.rotationY:"shortRotationY"in k?k.shortRotationY+"_short":S.rotationY||0,S.rotationY,"rotationY",C)),h.skewX=ht(k.skewX,S.skewX-S.skewY),(h.skewY=ht(k.skewY,S.skewY))&&(h.skewX+=h.skewY,h.rotation+=h.skewY)}for(Dt&&null!=k.force3D&&(S.force3D=k.force3D,p=!0),S.skewType=k.skewType||S.skewType||a.defaultSkewType,f=S.force3D||S.z||S.rotationX||S.rotationY||h.z||h.rotationX||h.rotationY||h.perspective,f||null==k.scale||(h.scaleZ=1);--P>-1;)x=Ot[P],A=h[x]-S[x],(A>T||A<-T||null!=k[x]||null!=I[x])&&(p=!0,r=new yt(S,x,S[x],A,r),x in C&&(r.e=C[x]),r.xs0=0,r.plugin=o,n._overwriteProps.push(r.n));return A=k.transformOrigin,S.svg&&(A||k.svgOrigin)&&(m=S.xOffset,g=S.yOffset,jt(t,at(A),h,k.svgOrigin,k.smoothOrigin),r=xt(S,"xOrigin",(w?S:h).xOrigin,h.xOrigin,r,O),r=xt(S,"yOrigin",(w?S:h).yOrigin,h.yOrigin,r,O),m===S.xOffset&&g===S.yOffset||(r=xt(S,"xOffset",w?m:S.xOffset,S.xOffset,r,O),r=xt(S,"yOffset",w?g:S.yOffset,S.yOffset,r,O)),A=Ct?null:"0px 0px"),(A||Dt&&f&&S.zOrigin)&&(St?(p=!0,x=Rt,A=(A||J(t,x,s,!1,"50% 50%"))+"",r=new yt(b,x,0,0,r,(-1),O),r.b=b[x],r.plugin=o,Dt?(c=S.zOrigin,A=A.split(" "),S.zOrigin=(A.length>2&&(0===c||"0px"!==A[2])?parseFloat(A[2]):c)||0,r.xs0=r.e=A[0]+" "+(A[1]||"50%")+" 0px",r=new yt(S,"zOrigin",0,0,r,(-1),r.n),r.b=c,r.xs0=r.e=S.zOrigin):r.xs0=r.e=A):at(A+"",S)),p&&(n._transformType=S.svg&&Ct||!f&&3!==this._transformType?2:3),u&&(l[i]=u),r},prefix:!0}),Pt("boxShadow",{defaultValue:"0px 0px 0px 0px #999",prefix:!0,color:!0,multi:!0,keyword:"inset"}),Pt("borderRadius",{defaultValue:"0px",parser:function(t,e,i,n,o,a){e=this.format(e);var l,u,h,c,f,p,d,m,g,_,v,y,x,w,b,T,P=["borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius"],k=t.style;for(g=parseFloat(t.offsetWidth),_=parseFloat(t.offsetHeight),l=e.split(" "),u=0;u<P.length;u++)this.p.indexOf("border")&&(P[u]=Q(P[u])),f=c=J(t,P[u],s,!1,"0px"),f.indexOf(" ")!==-1&&(c=f.split(" "),f=c[0],c=c[1]),p=h=l[u],d=parseFloat(f),y=f.substr((d+"").length),x="="===p.charAt(1),x?(m=parseInt(p.charAt(0)+"1",10),p=p.substr(2),m*=parseFloat(p),v=p.substr((m+"").length-(m<0?1:0))||""):(m=parseFloat(p),v=p.substr((m+"").length)),""===v&&(v=r[i]||y),v!==y&&(w=tt(t,"borderLeft",d,y),b=tt(t,"borderTop",d,y),"%"===v?(f=w/g*100+"%",c=b/_*100+"%"):"em"===v?(T=tt(t,"borderLeft",1,"em"),f=w/T+"em",c=b/T+"em"):(f=w+"px",c=b+"px"),x&&(p=parseFloat(f)+m+v,h=parseFloat(c)+m+v)),o=wt(k,P[u],f+" "+c,p+" "+h,!1,"0px",o);return o},prefix:!0,formatter:gt("0px 0px 0px 0px",!1,!0)}),Pt("borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius",{defaultValue:"0px",parser:function(t,e,i,n,r,o){return wt(t.style,i,this.format(J(t,i,s,!1,"0px 0px")),this.format(e),!1,"0px",r)},prefix:!0,formatter:gt("0px 0px",!1,!0)}),Pt("backgroundPosition",{defaultValue:"0 0",parser:function(t,e,i,n,r,o){var a,l,u,h,c,f,p="background-position",d=s||K(t,null),m=this.format((d?g?d.getPropertyValue(p+"-x")+" "+d.getPropertyValue(p+"-y"):d.getPropertyValue(p):t.currentStyle.backgroundPositionX+" "+t.currentStyle.backgroundPositionY)||"0 0"),_=this.format(e);if(m.indexOf("%")!==-1!=(_.indexOf("%")!==-1)&&_.split(",").length<2&&(f=J(t,"backgroundImage").replace(R,""),f&&"none"!==f)){for(a=m.split(" "),l=_.split(" "),q.setAttribute("src",f),u=2;--u>-1;)m=a[u],h=m.indexOf("%")!==-1,h!==(l[u].indexOf("%")!==-1)&&(c=0===u?t.offsetWidth-q.width:t.offsetHeight-q.height,a[u]=h?parseFloat(m)/100*c+"px":parseFloat(m)/c*100+"%");m=a.join(" ")}return this.parseComplex(t.style,m,_,r,o)},formatter:at}),Pt("backgroundSize",{defaultValue:"0 0",formatter:function(t){return t+="",at(t.indexOf(" ")===-1?t+" "+t:t)}}),Pt("perspective",{defaultValue:"0px",prefix:!0}),Pt("perspectiveOrigin",{defaultValue:"50% 50%",prefix:!0}),Pt("transformStyle",{prefix:!0}),Pt("backfaceVisibility",{prefix:!0}),Pt("userSelect",{prefix:!0}),Pt("margin",{parser:_t("marginTop,marginRight,marginBottom,marginLeft")}),Pt("padding",{parser:_t("paddingTop,paddingRight,paddingBottom,paddingLeft")}),Pt("clip",{defaultValue:"rect(0px,0px,0px,0px)",parser:function(t,e,i,n,r,o){var a,l,u;return g<9?(l=t.currentStyle,u=g<8?" ":",",a="rect("+l.clipTop+u+l.clipRight+u+l.clipBottom+u+l.clipLeft+")",e=this.format(e).split(",").join(u)):(a=this.format(J(t,this.p,s,!1,this.dflt)),e=this.format(e)),this.parseComplex(t.style,a,e,r,o)}}),Pt("textShadow",{defaultValue:"0px 0px 0px #999",color:!0,multi:!0}),Pt("autoRound,strictUnits",{parser:function(t,e,i,n,r){return r}}),Pt("border",{defaultValue:"0px solid #000",parser:function(t,e,i,n,r,o){var a=J(t,"borderTopWidth",s,!1,"0px"),l=this.format(e).split(" "),u=l[0].replace(T,"");return"px"!==u&&(a=parseFloat(a)/tt(t,"borderTopWidth",1,u)+u),this.parseComplex(t.style,this.format(a+" "+J(t,"borderTopStyle",s,!1,"solid")+" "+J(t,"borderTopColor",s,!1,"#000")),l.join(" "),r,o)},color:!0,formatter:function(t){var e=t.split(" ");return e[0]+" "+(e[1]||"solid")+" "+(t.match(mt)||["#000"])[0]}}),Pt("borderWidth",{parser:_t("borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth")}),Pt("float,cssFloat,styleFloat",{parser:function(t,e,i,n,r,s){var o=t.style,a="cssFloat"in o?"cssFloat":"styleFloat";return new yt(o,a,0,0,r,(-1),i,(!1),0,o[a],e)}});var Vt=function(t){var e,i=this.t,n=i.filter||J(this.data,"filter")||"",r=this.s+this.c*t|0;100===r&&(n.indexOf("atrix(")===-1&&n.indexOf("radient(")===-1&&n.indexOf("oader(")===-1?(i.removeAttribute("filter"),e=!J(this.data,"filter")):(i.filter=n.replace(C,""),e=!0)),e||(this.xn1&&(i.filter=n=n||"alpha(opacity="+r+")"),n.indexOf("pacity")===-1?0===r&&this.xn1||(i.filter=n+" alpha(opacity="+r+")"):i.filter=n.replace(P,"opacity="+r))};Pt("opacity,alpha,autoAlpha",{defaultValue:"1",parser:function(t,e,i,n,r,o){var a=parseFloat(J(t,"opacity",s,!1,"1")),l=t.style,u="autoAlpha"===i;return"string"==typeof e&&"="===e.charAt(1)&&(e=("-"===e.charAt(0)?-1:1)*parseFloat(e.substr(2))+a),u&&1===a&&"hidden"===J(t,"visibility",s)&&0!==e&&(a=0),H?r=new yt(l,"opacity",a,e-a,r):(r=new yt(l,"opacity",100*a,100*(e-a),r),r.xn1=u?1:0,l.zoom=1,r.type=2,r.b="alpha(opacity="+r.s+")",r.e="alpha(opacity="+(r.s+r.c)+")",r.data=t,r.plugin=o,r.setRatio=Vt),u&&(r=new yt(l,"visibility",0,0,r,(-1),null,(!1),0,0!==a?"inherit":"hidden",0===e?"hidden":"inherit"),r.xs0="inherit",n._overwriteProps.push(r.n),n._overwriteProps.push(i)),r}});var Ht=function(t,e){e&&(t.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),t.removeProperty(e.replace(S,"-$1").toLowerCase())):t.removeAttribute(e))},Ut=function(t){if(this.t._gsClassPT=this,1===t||0===t){this.t.setAttribute("class",0===t?this.b:this.e);for(var e=this.data,i=this.t.style;e;)e.v?i[e.p]=e.v:Ht(i,e.p),e=e._next;1===t&&this.t._gsClassPT===this&&(this.t._gsClassPT=null)}else this.t.getAttribute("class")!==this.e&&this.t.setAttribute("class",this.e)};Pt("className",{parser:function(t,e,n,r,o,a,l){var u,h,c,f,p,d=t.getAttribute("class")||"",m=t.style.cssText;if(o=r._classNamePT=new yt(t,n,0,0,o,2),o.setRatio=Ut,o.pr=-11,i=!0,o.b=d,h=it(t,s),c=t._gsClassPT){for(f={},p=c.data;p;)f[p.p]=1,p=p._next;c.setRatio(1)}return t._gsClassPT=o,o.e="="!==e.charAt(1)?e:d.replace(new RegExp("(?:\\s|^)"+e.substr(2)+"(?![\\w-])"),"")+("+"===e.charAt(0)?" "+e.substr(2):""),t.setAttribute("class",o.e),u=nt(t,h,it(t),l,f),t.setAttribute("class",d),o.data=u.firstMPT,t.style.cssText=m,o=o.xfirst=r.parse(t,u.difs,o,a)}});var $t=function(t){if((1===t||0===t)&&this.data._totalTime===this.data._totalDuration&&"isFromStart"!==this.data.data){var e,i,n,r,s,o=this.t.style,a=u.transform.parse;if("all"===this.e)o.cssText="",r=!0;else for(e=this.e.split(" ").join("").split(","),n=e.length;--n>-1;)i=e[n],u[i]&&(u[i].parse===a?r=!0:i="transformOrigin"===i?Rt:u[i].p),Ht(o,i);r&&(Ht(o,St),s=this.t._gsTransform,s&&(s.svg&&(this.t.removeAttribute("data-svg-origin"),this.t.removeAttribute("transform")),delete this.t._gsTransform))}};for(Pt("clearProps",{parser:function(t,e,n,r,s){return s=new yt(t,n,0,0,s,2),s.setRatio=$t,s.e=e,s.pr=-10,s.data=r._tween,i=!0,s}}),h="bezier,throwProps,physicsProps,physics2D".split(","),bt=h.length;bt--;)kt(h[bt]);h=a.prototype,h._firstPT=h._lastParsedTransform=h._transform=null,h._onInitTween=function(t,e,n,l){if(!t.nodeType)return!1;this._target=_=t,this._tween=n,this._vars=e,v=l,c=e.autoRound,i=!1,r=e.suffixMap||a.suffixMap,s=K(t,""),o=this._overwriteProps;var h,d,g,y,x,w,b,T,P,C=t.style;if(f&&""===C.zIndex&&(h=J(t,"zIndex",s),"auto"!==h&&""!==h||this._addLazySet(C,"zIndex",0)),"string"==typeof e&&(y=C.cssText,h=it(t,s),C.cssText=y+";"+e,h=nt(t,h,it(t)).difs,!H&&k.test(e)&&(h.opacity=parseFloat(RegExp.$1)),e=h,C.cssText=y),e.className?this._firstPT=d=u.className.parse(t,e.className,"className",this,null,null,e):this._firstPT=d=this.parse(t,e,null),this._transformType){for(P=3===this._transformType,St?p&&(f=!0,""===C.zIndex&&(b=J(t,"zIndex",s),"auto"!==b&&""!==b||this._addLazySet(C,"zIndex",0)),m&&this._addLazySet(C,"WebkitBackfaceVisibility",this._vars.WebkitBackfaceVisibility||(P?"visible":"hidden"))):C.zoom=1,g=d;g&&g._next;)g=g._next;T=new yt(t,"transform",0,0,null,2),this._linkCSSP(T,null,g),T.setRatio=St?Wt:qt,T.data=this._transform||Yt(t,s,!0),T.tween=n,T.pr=-1,o.pop()}if(i){for(;d;){for(w=d._next,g=y;g&&g.pr>d.pr;)g=g._next;(d._prev=g?g._prev:x)?d._prev._next=d:y=d,(d._next=g)?g._prev=d:x=d,d=w}this._firstPT=y}return!0},h.parse=function(t,e,i,n){var o,a,l,h,f,p,d,m,g,y,x=t.style;for(o in e)p=e[o],"function"==typeof p&&(p=p(v,_)),a=u[o],a?i=a.parse(t,p,o,this,i,n,e):(f=J(t,o,s)+"",g="string"==typeof p,"color"===o||"fill"===o||"stroke"===o||o.indexOf("Color")!==-1||g&&O.test(p)?(g||(p=pt(p),p=(p.length>3?"rgba(":"rgb(")+p.join(",")+")"),i=wt(x,o,f,p,!0,"transparent",i,0,n)):g&&L.test(p)?i=wt(x,o,f,p,!0,null,i,0,n):(l=parseFloat(f),d=l||0===l?f.substr((l+"").length):"",""!==f&&"auto"!==f||("width"===o||"height"===o?(l=ot(t,o,s),d="px"):"left"===o||"top"===o?(l=et(t,o,s),d="px"):(l="opacity"!==o?0:1,d="")),y=g&&"="===p.charAt(1),y?(h=parseInt(p.charAt(0)+"1",10),p=p.substr(2),h*=parseFloat(p),m=p.replace(T,"")):(h=parseFloat(p),m=g?p.replace(T,""):""),""===m&&(m=o in r?r[o]:d),p=h||0===h?(y?h+l:h)+m:e[o],d!==m&&""!==m&&(h||0===h)&&l&&(l=tt(t,o,l,d),"%"===m?(l/=tt(t,o,100,"%")/100,e.strictUnits!==!0&&(f=l+"%")):"em"===m||"rem"===m||"vw"===m||"vh"===m?l/=tt(t,o,1,m):"px"!==m&&(h=tt(t,o,h,m),m="px"),y&&(h||0===h)&&(p=h+l+m)),y&&(h+=l),!l&&0!==l||!h&&0!==h?void 0!==x[o]&&(p||p+""!="NaN"&&null!=p)?(i=new yt(x,o,h||l||0,0,i,(-1),o,(!1),0,f,p),i.xs0="none"!==p||"display"!==o&&o.indexOf("Style")===-1?p:f):$("invalid "+o+" tween value: "+e[o]):(i=new yt(x,o,l,h-l,i,0,o,c!==!1&&("px"===m||"zIndex"===o),0,f,p),i.xs0=m))),n&&i&&!i.plugin&&(i.plugin=n);return i},h.setRatio=function(t){var e,i,n,r=this._firstPT,s=1e-6;if(1!==t||this._tween._time!==this._tween._duration&&0!==this._tween._time)if(t||this._tween._time!==this._tween._duration&&0!==this._tween._time||this._tween._rawPrevTime===-1e-6)for(;r;){if(e=r.c*t+r.s,r.r?e=Math.round(e):e<s&&e>-s&&(e=0),r.type)if(1===r.type)if(n=r.l,2===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2;else if(3===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3;else if(4===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4;else if(5===n)r.t[r.p]=r.xs0+e+r.xs1+r.xn1+r.xs2+r.xn2+r.xs3+r.xn3+r.xs4+r.xn4+r.xs5;else{for(i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}else r.type===-1?r.t[r.p]=r.xs0:r.setRatio&&r.setRatio(t);else r.t[r.p]=e+r.xs0;r=r._next}else for(;r;)2!==r.type?r.t[r.p]=r.b:r.setRatio(t),r=r._next;else for(;r;){if(2!==r.type)if(r.r&&r.type!==-1)if(e=Math.round(r.s+r.c),r.type){if(1===r.type){for(n=r.l,i=r.xs0+e+r.xs1,n=1;n<r.l;n++)i+=r["xn"+n]+r["xs"+(n+1)];r.t[r.p]=i}}else r.t[r.p]=e+r.xs0;else r.t[r.p]=r.e;else r.setRatio(t);r=r._next}},h._enableTransforms=function(t){this._transform=this._transform||Yt(this._target,s,!0),this._transformType=this._transform.svg&&Ct||!t&&3!==this._transformType?2:3};var Gt=function(t){this.t[this.p]=this.e,this.data._linkCSSP(this,this._next,null,!0)};h._addLazySet=function(t,e,i){var n=this._firstPT=new yt(t,e,0,0,this._firstPT,2);n.e=i,n.setRatio=Gt,n.data=this},h._linkCSSP=function(t,e,i,n){return t&&(e&&(e._prev=t),t._next&&(t._next._prev=t._prev),t._prev?t._prev._next=t._next:this._firstPT===t&&(this._firstPT=t._next,n=!0),i?i._next=t:n||null!==this._firstPT||(this._firstPT=t),t._next=e,t._prev=i),t},h._mod=function(t){for(var e=this._firstPT;e;)"function"==typeof t[e.p]&&t[e.p]===Math.round&&(e.r=1),e=e._next},h._kill=function(e){var i,n,r,s=e;if(e.autoAlpha||e.alpha){s={};for(n in e)s[n]=e[n];s.opacity=1,s.autoAlpha&&(s.visibility=1)}for(e.className&&(i=this._classNamePT)&&(r=i.xfirst,r&&r._prev?this._linkCSSP(r._prev,i._next,r._prev._prev):r===this._firstPT&&(this._firstPT=i._next),i._next&&this._linkCSSP(i._next,i._next._next,r._prev),this._classNamePT=null),i=this._firstPT;i;)i.plugin&&i.plugin!==n&&i.plugin._kill&&(i.plugin._kill(e),n=i.plugin),i=i._next;return t.prototype._kill.call(this,s)};var Zt=function(t,e,i){var n,r,s,o;if(t.slice)for(r=t.length;--r>-1;)Zt(t[r],e,i);else for(n=t.childNodes,r=n.length;--r>-1;)s=n[r],o=s.type,s.style&&(e.push(it(s)),i&&i.push(s)),1!==o&&9!==o&&11!==o||!s.childNodes.length||Zt(s,e,i)};return a.cascadeTo=function(t,i,n){var r,s,o,a,l=e.to(t,i,n),u=[l],h=[],c=[],f=[],p=e._internals.reservedProps;for(t=l._targets||l.target,Zt(t,h,f),l.render(i,!0,!0),Zt(t,c),l.render(0,!0,!0),l._enabled(!0),r=f.length;--r>-1;)if(s=nt(f[r],h[r],c[r]),s.firstMPT){s=s.difs;for(o in n)p[o]&&(s[o]=n[o]);a={};for(o in s)a[o]=h[r][o];u.push(e.fromTo(f[r],i,a,s))}return u},t.activate([a]),a},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("CSSPlugin")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],9:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("easing.CustomEase",["easing.Ease"],function(t){var e=/(?:(-|-=|\+=)?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,i=/[achlmqstvz]|(-?\d*\.?\d*(?:e[\-+]?\d+)?)[0-9]/gi,n=/[\+\-]?\d*\.?\d+e[\+\-]?\d+/gi,r=/[cLlsS]/g,s="CustomEase only accepts Cubic Bezier data.",o=function(t,e,i,n,r,s,a,l,u,h,c){var f,p=(t+i)/2,d=(e+n)/2,m=(i+r)/2,g=(n+s)/2,_=(r+a)/2,v=(s+l)/2,y=(p+m)/2,x=(d+g)/2,w=(m+_)/2,b=(g+v)/2,T=(y+w)/2,P=(x+b)/2,k=a-t,C=l-e,O=Math.abs((i-a)*C-(n-l)*k),S=Math.abs((r-a)*C-(s-l)*k);return h||(h=[{x:t,y:e},{x:a,y:l}],c=1),h.splice(c||h.length-1,0,{x:T,y:P}),(O+S)*(O+S)>u*(k*k+C*C)&&(f=h.length,o(t,e,p,d,y,x,T,P,u,h,c),o(T,P,w,b,_,v,a,l,u,h,c+1+(h.length-f))),h},a=function(t){var e,r,o,a,l,u,h,c,f,p,d,m=(t+"").replace(n,function(t){var e=+t;return e<1e-4&&e>-1e-4?0:e}).match(i)||[],g=[],_=0,v=0,y=m.length,x=2;for(e=0;e<y;e++)if(f=a,isNaN(m[e])?(a=m[e].toUpperCase(),l=a!==m[e]):e--,r=+m[e+1],o=+m[e+2],l&&(r+=_,o+=v),e||(h=r,c=o),"M"===a)u&&u.length<8&&(g.length-=1,x=0),_=h=r,v=c=o,u=[r,o],x=2,g.push(u),e+=2,a="L";else if("C"===a)u||(u=[0,0]),u[x++]=r,u[x++]=o,l||(_=v=0),u[x++]=_+1*m[e+3],u[x++]=v+1*m[e+4],u[x++]=_+=1*m[e+5],u[x++]=v+=1*m[e+6],e+=6;else if("S"===a)"C"===f||"S"===f?(p=_-u[x-4],d=v-u[x-3],u[x++]=_+p,u[x++]=v+d):(u[x++]=_,u[x++]=v),u[x++]=r,u[x++]=o,l||(_=v=0),u[x++]=_+=1*m[e+3],u[x++]=v+=1*m[e+4],e+=4;else{if("L"!==a&&"Z"!==a)throw s;"Z"===a&&(r=h,o=c,u.closed=!0),("L"===a||Math.abs(_-r)>.5||Math.abs(v-o)>.5)&&(u[x++]=_+(r-_)/3,u[x++]=v+(o-v)/3,u[x++]=_+2*(r-_)/3,u[x++]=v+2*(o-v)/3,u[x++]=r,u[x++]=o,"L"===a&&(e+=2)),_=r,v=o}return g[0]},l=function(t){var e,i=t.length,n=999999999999;for(e=1;e<i;e+=6)+t[e]<n&&(n=+t[e]);return n},u=function(t,e,i){i||0===i||(i=Math.max(+t[t.length-1],+t[1]));var n,r=+t[0]*-1,s=-i,o=t.length,a=1/(+t[o-2]+r),u=-e||(Math.abs(+t[o-1]-+t[1])<.01*(+t[o-2]-+t[0])?l(t)+s:+t[o-1]+s);for(u=u?1/u:-a,n=0;n<o;n+=2)t[n]=(+t[n]+r)*a,t[n+1]=(+t[n+1]+s)*u},h=function(t){var e=this.lookup[t*this.l|0]||this.lookup[this.l-1];return e.nx<t&&(e=e.n),e.y+(t-e.x)/e.cx*e.cy},c=function(e,i,n){this._calcEnd=!0,this.id=e,e&&(t.map[e]=this),this.getRatio=h,this.setData(i,n)},f=c.prototype=new t;return f.constructor=c,f.setData=function(t,i){t=t||"0,0,1,1";var n,l,h,c,f,p,d,m,g,_,v=t.match(e),y=1,x=[];if(i=i||{},_=i.precision||1,this.data=t,this.lookup=[],this.points=x,this.fast=_<=1,(r.test(t)||t.indexOf("M")!==-1&&t.indexOf("C")===-1)&&(v=a(t)),n=v.length,4===n)v.unshift(0,0),v.push(1,1),n=8;else if((n-2)%6)throw s;for(0===+v[0]&&1===+v[n-2]||u(v,i.height,i.originY),this.rawBezier=v,c=2;c<n;c+=6)l={x:+v[c-2],y:+v[c-1]},h={x:+v[c+4],y:+v[c+5]},x.push(l,h),o(l.x,l.y,+v[c],+v[c+1],+v[c+2],+v[c+3],h.x,h.y,1/(2e5*_),x,x.length-1);for(n=x.length,c=0;c<n;c++)d=x[c],m=x[c-1]||d,d.x>m.x||m.y!==d.y&&m.x===d.x||d===m?(m.cx=d.x-m.x,m.cy=d.y-m.y,m.n=d,m.nx=d.x,this.fast&&c>1&&Math.abs(m.cy/m.cx-x[c-2].cy/x[c-2].cx)>2&&(this.fast=!1),m.cx<y&&(m.cx?y=m.cx:m.cx=.001)):(x.splice(c--,1),n--);if(n=1/y+1|0,this.l=n,f=1/n,p=0,d=x[0],this.fast){for(c=0;c<n;c++)g=c*f,d.nx<g&&(d=x[++p]),l=d.y+(g-d.x)/d.cx*d.cy,this.lookup[c]={x:g,cx:f,y:l,cy:0,nx:9},c&&(this.lookup[c-1].cy=l-this.lookup[c-1].y);this.lookup[n-1].cy=x[x.length-1].y-l}else for(c=0;c<n;c++)d.nx<c*f&&(d=x[++p]),this.lookup[c]=d;return this},f.getRatio=h,f.getSVGData=function(t){return c.getSVGData(this,t)},c.create=function(t,e,i){return new c(t,e,i)},c.version="0.2.0",c.bezierToPoints=o,c.get=function(e){return t.map[e]},c.getSVGData=function(e,i){i=i||{};var n,r,s,o,a,l,u,h,c,f,p=1e3,d=i.width||100,m=i.height||100,g=i.x||0,_=(i.y||0)+m,v=i.path;if(i.invert&&(m=-m,_=0),e=e.getRatio?e:t.map[e]||console.log("No ease found: ",e),e.rawBezier){for(n=[],u=e.rawBezier.length,s=0;s<u;s+=2)n.push(((g+e.rawBezier[s]*d)*p|0)/p+","+((_+e.rawBezier[s+1]*-m)*p|0)/p);n[0]="M"+n[0],n[1]="C"+n[1]}else for(n=["M"+g+","+_],u=Math.max(5,200*(i.precision||1)),o=1/u,u+=2,h=5/u,c=((g+o*d)*p|0)/p,f=((_+e.getRatio(o)*-m)*p|0)/p,r=(f-_)/(c-g),s=2;s<u;s++)a=((g+s*o*d)*p|0)/p,l=((_+e.getRatio(s*o)*-m)*p|0)/p,(Math.abs((l-f)/(a-c)-r)>h||s===u-1)&&(n.push(c+","+f),r=(l-f)/(a-c)),c=a,f=l;return v&&("string"==typeof v?document.querySelector(v):v).setAttribute("d",n.join(" ")),n.join(" ")},c},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("CustomEase")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],10:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("plugins.ThrowPropsPlugin",["plugins.TweenPlugin","TweenLite","easing.Ease","utils.VelocityTracker"],function(t,e,i,r){var s,o,a,l,u=function(){t.call(this,"throwProps"),this._overwriteProps.length=0},h=999999999999999,c=1e-10,f=n._gsDefine.globals,p=!1,d={x:1,y:1,z:2,scale:1,scaleX:1,scaleY:1,rotation:1,rotationZ:1,rotationX:2,rotationY:2,skewX:1,skewY:1,xPercent:1,yPercent:1},m=function(t,e,i,n){for(var r,s,o=e.length,a=0,l=h;--o>-1;)r=e[o],s=r-t,0>s&&(s=-s),l>s&&r>=n&&i>=r&&(a=o,l=s);return e[a]},g=function(t,e,i,n){if("auto"===t.end)return t;i=isNaN(i)?h:i,n=isNaN(n)?-h:n;var r="function"==typeof t.end?t.end(e):t.end instanceof Array?m(e,t.end,i,n):Number(t.end);return r>i?r=i:n>r&&(r=n),{max:r,min:r,unitFactor:t.unitFactor}},_=function(t,e,i){for(var n in e)void 0===t[n]&&n!==i&&(t[n]=e[n]);return t},v=u.calculateChange=function(t,n,r,s){null==s&&(s=.05);var o=n instanceof i?n:n?new i(n):e.defaultEase;return r*s*t/o.getRatio(s)},y=u.calculateDuration=function(t,n,r,s,o){o=o||.05;var a=s instanceof i?s:s?new i(s):e.defaultEase;return Math.abs((n-t)*a.getRatio(o)/r/o)},x=u.calculateTweenDuration=function(t,n,s,o,a,l){if("string"==typeof t&&(t=e.selector(t)),!t)return 0;null==s&&(s=10),null==o&&(o=.2),null==a&&(a=1),t.length&&(t=t[0]||t);var h,f,d,m,x,w,b,T,P,k,C=0,O=9999999999,S=n.throwProps||n,A=n.ease instanceof i?n.ease:n.ease?new i(n.ease):e.defaultEase,R=isNaN(S.checkpoint)?.05:Number(S.checkpoint),D=isNaN(S.resistance)?u.defaultResistance:Number(S.resistance);for(h in S)"resistance"!==h&&"checkpoint"!==h&&"preventOvershoot"!==h&&(f=S[h],"object"!=typeof f&&(P=P||r.getByTarget(t),P&&P.isTrackingProp(h)?f="number"==typeof f?{velocity:f}:{velocity:P.getVelocity(h)}:(m=Number(f)||0,d=m*D>0?m/D:m/-D)),"object"==typeof f&&(void 0!==f.velocity&&"number"==typeof f.velocity?m=Number(f.velocity)||0:(P=P||r.getByTarget(t),m=P&&P.isTrackingProp(h)?P.getVelocity(h):0),x=isNaN(f.resistance)?D:Number(f.resistance),d=m*x>0?m/x:m/-x,w="function"==typeof t[h]?t[h.indexOf("set")||"function"!=typeof t["get"+h.substr(3)]?h:"get"+h.substr(3)]():t[h]||0,b=w+v(m,A,d,R),void 0!==f.end&&(f=g(f,b,f.max,f.min),(l||p)&&(S[h]=_(f,S[h],"end"))),void 0!==f.max&&b>Number(f.max)+c?(k=f.unitFactor||u.defaultUnitFactors[h]||1,T=w>f.max&&f.min!==f.max||m*k>-15&&45>m*k?o+.1*(s-o):y(w,f.max,m,A,R),O>T+a&&(O=T+a)):void 0!==f.min&&Number(f.min)-c>b&&(k=f.unitFactor||u.defaultUnitFactors[h]||1,T=f.min>w&&f.min!==f.max||m*k>-45&&15>m*k?o+.1*(s-o):y(w,f.min,m,A,R),O>T+a&&(O=T+a)),T>C&&(C=T)),d>C&&(C=d));return C>O&&(C=O),C>s?s:o>C?o:C},w=u.prototype=new t("throwProps");return w.constructor=u,u.version="0.9.9",u.API=2,u._autoCSS=!0,u.defaultResistance=100,u.defaultUnitFactors={time:1e3,totalTime:1e3},u.track=function(t,e,i){return r.track(t,e,i)},u.untrack=function(t,e){r.untrack(t,e)},u.isTracking=function(t,e){return r.isTracking(t,e);
},u.getVelocity=function(t,e){var i=r.getByTarget(t);return i?i.getVelocity(e):NaN},u._cssRegister=function(){var t=f.com.greensock.plugins.CSSPlugin;if(t){var e=t._internals,i=e._parseToProxy,n=e._setPluginRatio,a=e.CSSPropTween;e._registerComplexSpecialProp("throwProps",{parser:function(t,e,l,h,c,f){f=new u;var p,m,g,_,v,y={},x={},w={},b={},T={},P={};o={};for(g in e)"resistance"!==g&&"preventOvershoot"!==g&&(m=e[g],"object"==typeof m?(void 0!==m.velocity&&"number"==typeof m.velocity?y[g]=Number(m.velocity)||0:(v=v||r.getByTarget(t),y[g]=v&&v.isTrackingProp(g)?v.getVelocity(g):0),void 0!==m.end&&(b[g]=m.end),void 0!==m.min&&(x[g]=m.min),void 0!==m.max&&(w[g]=m.max),m.preventOvershoot&&(P[g]=!0),void 0!==m.resistance&&(p=!0,T[g]=m.resistance)):"number"==typeof m?y[g]=m:(v=v||r.getByTarget(t),y[g]=v&&v.isTrackingProp(g)?v.getVelocity(g):m||0),d[g]&&h._enableTransforms(2===d[g]));_=i(t,y,h,c,f),s=_.proxy,y=_.end;for(g in s)o[g]={velocity:y[g],min:x[g],max:w[g],end:b[g],resistance:T[g],preventOvershoot:P[g]};return null!=e.resistance&&(o.resistance=e.resistance),e.preventOvershoot&&(o.preventOvershoot=!0),c=new a(t,"throwProps",0,0,_.pt,2),h._overwriteProps.pop(),c.plugin=f,c.setRatio=n,c.data=_,f._onInitTween(s,o,h._tween),c}})}},u.to=function(t,i,n,r,u){i.throwProps||(i={throwProps:i}),0===u&&(i.throwProps.preventOvershoot=!0),p=!0;var h=new e(t,r||1,i);return h.render(0,!0,!0),h.vars.css?(h.duration(x(s,{throwProps:o,ease:i.ease},n,r,u)),h._delay&&!h.vars.immediateRender?h.invalidate():a._onInitTween(s,l,h),p=!1,h):(h.kill(),h=new e(t,x(t,i,n,r,u),i),p=!1,h)},w._onInitTween=function(t,e,i){this.target=t,this._props=[],a=this,l=e;var n,s,o,u,h,c,f,d,m,y=i._ease,x=isNaN(e.checkpoint)?.05:Number(e.checkpoint),w=i._duration,b=e.preventOvershoot,T=0;for(n in e)if("resistance"!==n&&"checkpoint"!==n&&"preventOvershoot"!==n){if(s=e[n],"number"==typeof s)h=Number(s)||0;else if("object"!=typeof s||isNaN(s.velocity)){if(m=m||r.getByTarget(t),!m||!m.isTrackingProp(n))throw"ERROR: No velocity was defined in the throwProps tween of "+t+" property: "+n;h=m.getVelocity(n)}else h=Number(s.velocity);c=v(h,y,w,x),d=0,u="function"==typeof t[n],o=u?t[n.indexOf("set")||"function"!=typeof t["get"+n.substr(3)]?n:"get"+n.substr(3)]():t[n],"object"==typeof s&&(f=o+c,void 0!==s.end&&(s=g(s,f,s.max,s.min),p&&(e[n]=_(s,e[n],"end"))),void 0!==s.max&&f>Number(s.max)?b||s.preventOvershoot?c=s.max-o:d=s.max-o-c:void 0!==s.min&&Number(s.min)>f&&(b||s.preventOvershoot?c=s.min-o:d=s.min-o-c)),this._overwriteProps[T]=n,this._props[T++]={p:n,s:o,c1:c,c2:d,f:u,r:!1}}return!0},w._kill=function(e){for(var i=this._props.length;--i>-1;)null!=e[this._props[i].p]&&this._props.splice(i,1);return t.prototype._kill.call(this,e)},w._roundProps=function(t,e){for(var i=this._props,n=i.length;--n>-1;)(t[i[n].p]||t.throwProps)&&(i[n].r=e)},w.setRatio=function(t){for(var e,i,n=this._props.length;--n>-1;)e=this._props[n],i=e.s+e.c1*t+e.c2*t*t,e.r&&(i=Math.round(i)),e.f?this.target[e.p](i):this.target[e.p]=i},t.activate([u]),u},!0),n._gsDefine("utils.VelocityTracker",["TweenLite"],function(t){var e,i,n,r,s=/([A-Z])/g,o={},a={x:1,y:1,z:2,scale:1,scaleX:1,scaleY:1,rotation:1,rotationZ:1,rotationX:2,rotationY:2,skewX:1,skewY:1,xPercent:1,yPercent:1},l=document.defaultView?document.defaultView.getComputedStyle:function(){},u=function(t,e,i){var n=(t._gsTransform||o)[e];return n||0===n?n:(t.style[e]?n=t.style[e]:(i=i||l(t,null))?n=i[e]||i.getPropertyValue(e)||i.getPropertyValue(e.replace(s,"-$1").toLowerCase()):t.currentStyle&&(n=t.currentStyle[e]),parseFloat(n)||0)},h=t.ticker,c=function(t,e,i){this.p=t,this.f=e,this.v1=this.v2=0,this.t1=this.t2=h.time,this.css=!1,this.type="",this._prev=null,i&&(this._next=i,i._prev=this)},f=function(){var t,i,s=e,o=h.time;if(o-n>=.03)for(r=n,n=o;s;){for(i=s._firstVP;i;)t=i.css?u(s.target,i.p):i.f?s.target[i.p]():s.target[i.p],(t!==i.v1||o-i.t1>.15)&&(i.v2=i.v1,i.v1=t,i.t2=i.t1,i.t1=o),i=i._next;s=s._next}},p=function(t){this._lookup={},this.target=t,this.elem=!(!t.style||!t.nodeType),i||(h.addEventListener("tick",f,null,!1,-100),n=r=h.time,i=!0),e&&(this._next=e,e._prev=this),e=this},d=p.getByTarget=function(t){for(var i=e;i;){if(i.target===t)return i;i=i._next}},m=p.prototype;return m.addProp=function(e,i){if(!this._lookup[e]){var n=this.target,r="function"==typeof n[e],s=r?this._altProp(e):e,o=this._firstVP;this._firstVP=this._lookup[e]=this._lookup[s]=o=new c(s!==e&&0===e.indexOf("set")?s:e,r,o),o.css=this.elem&&(void 0!==this.target.style[o.p]||a[o.p]),o.css&&a[o.p]&&!n._gsTransform&&t.set(n,{x:"+=0",overwrite:!1}),o.type=i||o.css&&0===e.indexOf("rotation")?"deg":"",o.v1=o.v2=o.css?u(n,o.p):r?n[o.p]():n[o.p]}},m.removeProp=function(t){var e=this._lookup[t];e&&(e._prev?e._prev._next=e._next:e===this._firstVP&&(this._firstVP=e._next),e._next&&(e._next._prev=e._prev),this._lookup[t]=0,e.f&&(this._lookup[this._altProp(t)]=0))},m.isTrackingProp=function(t){return this._lookup[t]instanceof c},m.getVelocity=function(t){var e,i,n,r=this._lookup[t],s=this.target;if(!r)throw"The velocity of "+t+" is not being tracked.";return e=r.css?u(s,r.p):r.f?s[r.p]():s[r.p],i=e-r.v2,("rad"===r.type||"deg"===r.type)&&(n="rad"===r.type?2*Math.PI:360,i%=n,i!==i%(n/2)&&(i=0>i?i+n:i-n)),i/(h.time-r.t2)},m._altProp=function(t){var e=t.substr(0,3),i=("get"===e?"set":"set"===e?"get":e)+t.substr(3);return"function"==typeof this.target[i]?i:t},p.getByTarget=function(i){var n=e;for("string"==typeof i&&(i=t.selector(i)),i.length&&i!==window&&i[0]&&i[0].style&&!i.nodeType&&(i=i[0]);n;){if(n.target===i)return n;n=n._next}},p.track=function(t,e,i){var n=d(t),r=e.split(","),s=r.length;for(i=(i||"").split(","),n||(n=new p(t));--s>-1;)n.addProp(r[s],i[s]||i[0]);return n},p.untrack=function(t,i){var n=d(t),r=(i||"").split(","),s=r.length;if(n){for(;--s>-1;)n.removeProp(r[s]);n._firstVP&&i||(n._prev?n._prev._next=n._next:n===e&&(e=n._next),n._next&&(n._next._prev=n._prev))}},p.isTracking=function(t,e){var i=d(t);return!!i&&(!(e||!i._firstVP)||i.isTrackingProp(e))},p},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),e.exports=r())}("ThrowPropsPlugin")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6}],11:[function(t,e,i){(function(i){var n="undefined"!=typeof e&&e.exports&&"undefined"!=typeof i?i:this||window;(n._gsQueue||(n._gsQueue=[])).push(function(){"use strict";n._gsDefine("utils.Draggable",["events.EventDispatcher","TweenLite","plugins.CSSPlugin"],function(t,e,i){var r,s,o,a,l,u,h,c,f,p={css:{}},d={css:{}},m={css:{}},g={css:{}},_=n._gsDefine.globals,v={},y=document,x=y.documentElement||{},w=function(t){return y.createElementNS?y.createElementNS("http://www.w3.org/1999/xhtml",t):y.createElement(t)},b=w("div"),T=[],P=function(){return!1},k=180/Math.PI,C=999999999999999,O=Date.now||function(){return(new Date).getTime()},S=!(y.addEventListener||!y.all),A=y.createElement("div"),R=[],D={},N=0,M=/^(?:a|input|textarea|button|select)$/i,E=0,F=navigator.userAgent.toLowerCase().indexOf("android")!==-1,L=0,j={},X={},I=function(t){if("string"==typeof t&&(t=e.selector(t)),!t||t.nodeType)return[t];var i,n=[],r=t.length;for(i=0;i!==r;n.push(t[i++]));return n},z=function(t){var e,i={};for(e in t)i[e]=t[e];return i},B=function(){for(var t=R.length;--t>-1;)R[t]()},Y=function(t){R.push(t),1===R.length&&e.ticker.addEventListener("tick",B,this,!1,1)},q=function(t){for(var i=R.length;--i>-1;)R[i]===t&&R.splice(i,1);e.to(W,0,{overwrite:"all",delay:15,onComplete:W})},W=function(){R.length||e.ticker.removeEventListener("tick",B)},V=function(t,e){var i;for(i in e)void 0===t[i]&&(t[i]=e[i]);return t},H=function(){return null!=window.pageYOffset?window.pageYOffset:null!=y.scrollTop?y.scrollTop:x.scrollTop||y.body.scrollTop||0},U=function(){return null!=window.pageXOffset?window.pageXOffset:null!=y.scrollLeft?y.scrollLeft:x.scrollLeft||y.body.scrollLeft||0},$=function(t,e){Ft(t,"scroll",e),Z(t.parentNode)||$(t.parentNode,e)},G=function(t,e){Lt(t,"scroll",e),Z(t.parentNode)||G(t.parentNode,e)},Z=function(t){return!(t&&t!==x&&t!==y&&t!==y.body&&t!==window&&t.nodeType&&t.parentNode)},Q=function(t,e){var i="x"===e?"Width":"Height",n="scroll"+i,r="client"+i,s=y.body;return Math.max(0,Z(t)?Math.max(x[n],s[n])-(window["inner"+i]||x[r]||s[r]):t[n]-t[r])},K=function(t){var e=Z(t),i=Q(t,"x"),n=Q(t,"y");e?t=X:K(t.parentNode),t._gsMaxScrollX=i,t._gsMaxScrollY=n,t._gsScrollX=t.scrollLeft||0,t._gsScrollY=t.scrollTop||0},J=function(t,e){return t=t||window.event,v.pageX=t.clientX+y.body.scrollLeft+x.scrollLeft,v.pageY=t.clientY+y.body.scrollTop+x.scrollTop,e&&(t.returnValue=!1),v},tt=function(t){return t?("string"==typeof t&&(t=e.selector(t)),t.length&&t!==window&&t[0]&&t[0].style&&!t.nodeType&&(t=t[0]),t===window||t.nodeType&&t.style?t:null):t},et=function(t,e){var i,n,s,o=t.style;if(void 0===o[e]){for(s=["O","Moz","ms","Ms","Webkit"],n=5,i=e.charAt(0).toUpperCase()+e.substr(1);--n>-1&&void 0===o[s[n]+i];);if(n<0)return"";r=3===n?"ms":s[n],e=r+i}return e},it=function(t,e,i){var n=t.style;n&&(void 0===n[e]&&(e=et(t,e)),null==i?n.removeProperty?n.removeProperty(e.replace(/([A-Z])/g,"-$1").toLowerCase()):n.removeAttribute(e):void 0!==n[e]&&(n[e]=i))},nt=y.defaultView?y.defaultView.getComputedStyle:P,rt=/(?:Left|Right|Width)/i,st=/(?:\d|\-|\+|=|#|\.)*/g,ot=function(t,e,i,n,r){if("px"===n||!n)return i;if("auto"===n||!i)return 0;var s,o=rt.test(e),a=t,l=b.style,u=i<0;return u&&(i=-i),"%"===n&&e.indexOf("border")!==-1?s=i/100*(o?t.clientWidth:t.clientHeight):(l.cssText="border:0 solid red;position:"+lt(t,"position",!0)+";line-height:0;","%"!==n&&a.appendChild?l[o?"borderLeftWidth":"borderTopWidth"]=i+n:(a=t.parentNode||y.body,l[o?"width":"height"]=i+n),a.appendChild(b),s=parseFloat(b[o?"offsetWidth":"offsetHeight"]),a.removeChild(b),0!==s||r||(s=ot(t,e,i,n,!0))),u?-s:s},at=function(t,e){if("absolute"!==lt(t,"position",!0))return 0;var i="left"===e?"Left":"Top",n=lt(t,"margin"+i,!0);return t["offset"+i]-(ot(t,e,parseFloat(n),(n+"").replace(st,""))||0)},lt=function(t,e,i){var n,r=(t._gsTransform||{})[e];return r||0===r?r:(t.style[e]?r=t.style[e]:(n=nt(t))?(r=n.getPropertyValue(e.replace(/([A-Z])/g,"-$1").toLowerCase()),r=r||n.length?r:n[e]):t.currentStyle&&(r=t.currentStyle[e]),"auto"!==r||"top"!==e&&"left"!==e||(r=at(t,e)),i?r:parseFloat(r)||0)},ut=function(t,e,i){var n=t.vars,r=n[i],s=t._listeners[e];"function"==typeof r&&r.apply(n[i+"Scope"]||n.callbackScope||t,n[i+"Params"]||[t.pointerEvent]),s&&t.dispatchEvent(e)},ht=function(t,e){var i,n,r,s=tt(t);return s?Rt(s,e):void 0!==t.left?(r=Pt(e),{left:t.left-r.x,top:t.top-r.y,width:t.width,height:t.height}):(n=t.min||t.minX||t.minRotation||0,i=t.min||t.minY||0,{left:n,top:i,width:(t.max||t.maxX||t.maxRotation||0)-n,height:(t.max||t.maxY||0)-i})},ct=function(){if(!y.createElementNS)return a=0,void(l=!1);var t,e,i,n,r=w("div"),s=y.createElementNS("http://www.w3.org/2000/svg","svg"),o=w("div"),f=r.style,p=y.body||x;y.body&&dt&&(f.position="absolute",p.appendChild(o),o.appendChild(r),n=r.offsetParent,o.style[dt]="rotate(1deg)",c=r.offsetParent===n,o.style.position="absolute",f.height="10px",n=r.offsetTop,o.style.border="5px solid red",h=n!==r.offsetTop,p.removeChild(o)),f=s.style,s.setAttributeNS(null,"width","400px"),s.setAttributeNS(null,"height","400px"),s.setAttributeNS(null,"viewBox","0 0 400 400"),f.display="block",f.boxSizing="border-box",f.border="0px solid red",f.transform="none",r.style.cssText="width:100px;height:100px;overflow:scroll;-ms-overflow-style:none;",p.appendChild(r),r.appendChild(s),i=s.createSVGPoint().matrixTransform(s.getScreenCTM()),e=i.y,r.scrollTop=100,i.x=i.y=0,i=i.matrixTransform(s.getScreenCTM()),u=e-i.y<100.1?0:e-i.y-150,r.removeChild(s),p.removeChild(r),p.appendChild(s),t=s.getScreenCTM(),e=t.e,f.border="50px solid red",t=s.getScreenCTM(),0===e&&0===t.e&&0===t.f&&1===t.a?(a=1,l=!0):(a=e!==t.e?1:0,l=1!==t.a),p.removeChild(s)},ft=""!==et(b,"perspective"),pt=et(b,"transformOrigin").replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),dt=et(b,"transform"),mt=dt.replace(/^ms/g,"Ms").replace(/([A-Z])/g,"-$1").toLowerCase(),gt={},_t={},vt=window.SVGElement,yt=function(t){return!!(vt&&"function"==typeof t.getBBox&&t.getCTM&&(!t.parentNode||t.parentNode.getBBox&&t.parentNode.getCTM))},xt=(/MSIE ([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent)||/Trident\/.*rv:([0-9]{1,}[\.0-9]{0,})/.exec(navigator.userAgent))&&parseFloat(RegExp.$1)<11,wt=[],bt=[],Tt=function(t){if(!t.getBoundingClientRect||!t.parentNode||!dt)return{offsetTop:0,offsetLeft:0,scaleX:1,scaleY:1,offsetParent:x};if(Vt.cacheSVGData!==!1&&t._gsCache&&t._gsCache.lastUpdate===e.ticker.frame)return t._gsCache;var i,n,r,s,o,h,c,f,p,d,m,g,_=t,v=kt(t);if(v.lastUpdate=e.ticker.frame,t.getBBox&&!v.isSVGRoot){for(_=t.parentNode,i=t.getBBox();_&&"svg"!==(_.nodeName+"").toLowerCase();)_=_.parentNode;return s=Tt(_),v.offsetTop=i.y*s.scaleY,v.offsetLeft=i.x*s.scaleX,v.scaleX=s.scaleX,v.scaleY=s.scaleY,v.offsetParent=_||x,v}for(r=v.offsetParent,r===y.body&&(r=x),bt.length=wt.length=0;_&&(o=lt(_,dt,!0),"matrix(1, 0, 0, 1, 0, 0)"!==o&&"none"!==o&&"translate3d(0px, 0px, 0px)"!==o&&(bt.push(_),wt.push(_.style[dt]),_.style[dt]="none"),_!==r);)_=_.parentNode;for(n=r.getBoundingClientRect(),o=t.getScreenCTM(),f=t.createSVGPoint(),c=f.matrixTransform(o),f.x=f.y=10,f=f.matrixTransform(o),v.scaleX=(f.x-c.x)/10,v.scaleY=(f.y-c.y)/10,void 0===a&&ct(),v.borderBox&&!l&&t.getAttribute("width")&&(s=nt(t)||{},p=parseFloat(s.borderLeftWidth)+parseFloat(s.borderRightWidth)||0,d=parseFloat(s.borderTopWidth)+parseFloat(s.borderBottomWidth)||0,m=parseFloat(s.width)||0,g=parseFloat(s.height)||0,v.scaleX*=(m-p)/m,v.scaleY*=(g-d)/g),u?(i=t.getBoundingClientRect(),v.offsetLeft=i.left-n.left,v.offsetTop=i.top-n.top):(v.offsetLeft=c.x-n.left,v.offsetTop=c.y-n.top),v.offsetParent=r,h=bt.length;--h>-1;)bt[h].style[dt]=wt[h];return v},Pt=function(t,i){if(i=i||{},!t||t===x||!t.parentNode||t===window)return{x:0,y:0};var n=nt(t),r=pt&&n?n.getPropertyValue(pt):"50% 50%",s=r.split(" "),o=r.indexOf("left")!==-1?"0%":r.indexOf("right")!==-1?"100%":s[0],a=r.indexOf("top")!==-1?"0%":r.indexOf("bottom")!==-1?"100%":s[1];return"center"!==a&&null!=a||(a="50%"),("center"===o||isNaN(parseFloat(o)))&&(o="50%"),t.getBBox&&yt(t)?(t._gsTransform||(e.set(t,{x:"+=0",overwrite:!1}),void 0===t._gsTransform.xOrigin&&console.log("Draggable requires at least GSAP 1.17.0")),r=t.getBBox(),i.x=t._gsTransform.xOrigin-r.x,i.y=t._gsTransform.yOrigin-r.y):(t.getBBox&&(o+a).indexOf("%")!==-1&&(t=t.getBBox(),t={offsetWidth:t.width,offsetHeight:t.height}),i.x=o.indexOf("%")!==-1?t.offsetWidth*parseFloat(o)/100:parseFloat(o),i.y=a.indexOf("%")!==-1?t.offsetHeight*parseFloat(a)/100:parseFloat(a)),i},kt=function(t){if(Vt.cacheSVGData!==!1&&t._gsCache&&t._gsCache.lastUpdate===e.ticker.frame)return t._gsCache;var i,n=t._gsCache=t._gsCache||{},r=nt(t),s=t.getBBox&&yt(t),o="svg"===(t.nodeName+"").toLowerCase();if(n.isSVG=s,n.isSVGRoot=o,n.borderBox="border-box"===r.boxSizing,n.computedStyle=r,o)i=t.parentNode||x,i.insertBefore(b,t),n.offsetParent=b.offsetParent||x,i.removeChild(b);else if(s){for(i=t.parentNode;i&&"svg"!==(i.nodeName+"").toLowerCase();)i=i.parentNode;n.offsetParent=i}else n.offsetParent=t.offsetParent;return n},Ct=function(t,e,i,n){if(t===window||!t||!t.style||!t.parentNode)return[1,0,0,1,0,0];var r,s,o,l,u,f,p,d,m,g,_,v,w,b,T=t._gsCache||kt(t),P=t.parentNode,k=P._gsCache||kt(P),C=T.computedStyle,O=T.isSVG?k.offsetParent:P.offsetParent;return r=T.isSVG&&(t.style[dt]+"").indexOf("matrix")!==-1?t.style[dt]:C?C.getPropertyValue(mt):t.currentStyle?t.currentStyle[dt]:"1,0,0,1,0,0",t.getBBox&&(t.getAttribute("transform")+"").indexOf("matrix")!==-1&&(r=t.getAttribute("transform")),r=(r+"").match(/(?:\-|\.|\b)(\d|\.|e\-)+/g)||[1,0,0,1,0,0],r.length>6&&(r=[r[0],r[1],r[4],r[5],r[12],r[13]]),n?r[4]=r[5]=0:T.isSVG&&(u=t._gsTransform)&&(u.xOrigin||u.yOrigin)&&(r[0]=parseFloat(r[0]),r[1]=parseFloat(r[1]),r[2]=parseFloat(r[2]),r[3]=parseFloat(r[3]),r[4]=parseFloat(r[4])-(u.xOrigin-(u.xOrigin*r[0]+u.yOrigin*r[2])),r[5]=parseFloat(r[5])-(u.yOrigin-(u.xOrigin*r[1]+u.yOrigin*r[3]))),e&&(void 0===a&&ct(),o=T.isSVG||T.isSVGRoot?Tt(t):t,T.isSVG?(l=t.getBBox(),g=k.isSVGRoot?{x:0,y:0}:P.getBBox(),o={offsetLeft:l.x-g.x,offsetTop:l.y-g.y,offsetParent:T.offsetParent}):T.isSVGRoot?(_=parseInt(C.borderTopWidth,10)||0,v=parseInt(C.borderLeftWidth,10)||0,w=(r[0]-a)*v+r[2]*_,b=r[1]*v+(r[3]-a)*_,f=e.x,p=e.y,d=f-(f*r[0]+p*r[2]),m=p-(f*r[1]+p*r[3]),r[4]=parseFloat(r[4])+d,r[5]=parseFloat(r[5])+m,e.x-=d,e.y-=m,f=o.scaleX,p=o.scaleY,e.x*=f,e.y*=p,r[0]*=f,r[1]*=p,r[2]*=f,r[3]*=p,xt||(e.x+=w,e.y+=b)):!h&&t.offsetParent&&(e.x+=parseInt(lt(t.offsetParent,"borderLeftWidth"),10)||0,e.y+=parseInt(lt(t.offsetParent,"borderTopWidth"),10)||0),s=P===x||P===y.body,r[4]=Number(r[4])+e.x+(o.offsetLeft||0)-i.x-(s?0:P.scrollLeft||0),r[5]=Number(r[5])+e.y+(o.offsetTop||0)-i.y-(s?0:P.scrollTop||0),P&&"fixed"===lt(t,"position",C)&&(r[4]+=U(),r[5]+=H()),!P||P===x||O!==o.offsetParent||k.isSVG||c&&"100100"!==Ct(P).join("")||(o=k.isSVGRoot?Tt(P):P,r[4]-=o.offsetLeft||0,r[5]-=o.offsetTop||0,h||!k.offsetParent||T.isSVG||T.isSVGRoot||(r[4]-=parseInt(lt(k.offsetParent,"borderLeftWidth"),10)||0,r[5]-=parseInt(lt(k.offsetParent,"borderTopWidth"),10)||0))),r},Ot=function(t,e){if(!t||t===window||!t.parentNode)return[1,0,0,1,0,0];for(var i,n,r,s,o,a,l,u,h=Pt(t,gt),c=Pt(t.parentNode,_t),f=Ct(t,h,c);(t=t.parentNode)&&t.parentNode&&t!==x;)h=c,c=Pt(t.parentNode,h===gt?_t:gt),l=Ct(t,h,c),i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],f[0]=i*l[0]+n*l[2],f[1]=i*l[1]+n*l[3],f[2]=r*l[0]+s*l[2],f[3]=r*l[1]+s*l[3],f[4]=o*l[0]+a*l[2]+l[4],f[5]=o*l[1]+a*l[3]+l[5];return e&&(i=f[0],n=f[1],r=f[2],s=f[3],o=f[4],a=f[5],u=i*s-n*r,f[0]=s/u,f[1]=-n/u,f[2]=-r/u,f[3]=i/u,f[4]=(r*a-s*o)/u,f[5]=-(i*a-n*o)/u),f},St=function(t,e,i,n,r){t=tt(t);var s=Ot(t,!1,r),o=e.x,a=e.y;return i&&(Pt(t,e),o-=e.x,a-=e.y),n=n===!0?e:n||{},n.x=o*s[0]+a*s[2]+s[4],n.y=o*s[1]+a*s[3]+s[5],n},At=function(t,e,i){var n=t.x*e[0]+t.y*e[2]+e[4],r=t.x*e[1]+t.y*e[3]+e[5];return t.x=n*i[0]+r*i[2]+i[4],t.y=n*i[1]+r*i[3]+i[5],t},Rt=function(t,e,i){if(!(t=tt(t)))return null;e=tt(e);var n,r,s,o,a,l,u,h,c,f,p,d,m,g,_,v,w,b,T,P,k,C,O=t.getBBox&&yt(t);if(t===window)o=H(),r=U(),s=r+(x.clientWidth||t.innerWidth||y.body.clientWidth||0),a=o+((t.innerHeight||0)-20<x.clientHeight?x.clientHeight:t.innerHeight||y.body.clientHeight||0);else{if(void 0===e||e===window)return t.getBoundingClientRect();n=Pt(t),r=-n.x,o=-n.y,O?(d=t.getBBox(),m=d.width,g=d.height):"svg"!==(t.nodeName+"").toLowerCase()&&t.offsetWidth?(m=t.offsetWidth,g=t.offsetHeight):(k=nt(t),m=parseFloat(k.width),g=parseFloat(k.height)),s=r+m,a=o+g,"svg"!==t.nodeName.toLowerCase()||S||(_=Tt(t),C=_.computedStyle||{},b=(t.getAttribute("viewBox")||"0 0").split(" "),T=parseFloat(b[0]),P=parseFloat(b[1]),v=parseFloat(C.borderLeftWidth)||0,w=parseFloat(C.borderTopWidth)||0,s-=m-(m-v)/_.scaleX-T,a-=g-(g-w)/_.scaleY-P,r-=v/_.scaleX-T,o-=w/_.scaleY-P,k&&(s+=(parseFloat(C.borderRightWidth)+v)/_.scaleX,a+=(w+parseFloat(C.borderBottomWidth))/_.scaleY))}return t===e?{left:r,top:o,width:s-r,height:a-o}:(l=Ot(t),u=Ot(e,!0),h=At({x:r,y:o},l,u),c=At({x:s,y:o},l,u),f=At({x:s,y:a},l,u),p=At({x:r,y:a},l,u),r=Math.min(h.x,c.x,f.x,p.x),o=Math.min(h.y,c.y,f.y,p.y),j.x=j.y=0,i&&Pt(e,j),{left:r+j.x,top:o+j.y,width:Math.max(h.x,c.x,f.x,p.x)-r,height:Math.max(h.y,c.y,f.y,p.y)-o})},Dt=function(t){return!!(t&&t.length&&t[0]&&(t[0].nodeType&&t[0].style&&!t.nodeType||t[0].length&&t[0][0]))},Nt=function(t){var e,i,n,r=[],s=t.length;for(e=0;e<s;e++)if(i=t[e],Dt(i))for(n=i.length,n=0;n<i.length;n++)r.push(i[n]);else i&&0!==i.length&&r.push(i);return r},Mt="ontouchstart"in x&&"orientation"in window,Et=function(t){for(var e=t.split(","),i=(void 0!==b.onpointerdown?"pointerdown,pointermove,pointerup,pointercancel":void 0!==b.onmspointerdown?"MSPointerDown,MSPointerMove,MSPointerUp,MSPointerCancel":t).split(","),n={},r=8;--r>-1;)n[e[r]]=i[r],n[i[r]]=e[r];return n}("touchstart,touchmove,touchend,touchcancel"),Ft=function(t,e,i,n){t.addEventListener?t.addEventListener(Et[e]||e,i,n):t.attachEvent&&t.attachEvent("on"+e,i)},Lt=function(t,e,i){t.removeEventListener?t.removeEventListener(Et[e]||e,i):t.detachEvent&&t.detachEvent("on"+e,i)},jt=function(t,e){for(var i=t.length;--i>-1;)if(t[i].identifier===e)return!0;return!1},Xt=function(t){s=t.touches&&E<t.touches.length,Lt(t.target,"touchend",Xt)},It=function(t){s=t.touches&&E<t.touches.length,Ft(t.target,"touchend",Xt)},zt=function(t,e,i,n,r,s){var o,a,l,u={};if(e)if(1!==r&&e instanceof Array){for(u.end=o=[],l=e.length,a=0;a<l;a++)o[a]=e[a]*r;i+=1.1,n-=1.1}else"function"==typeof e?u.end=function(i){return e.call(t,i)*r}:u.end=e;return(i||0===i)&&(u.max=i),(n||0===n)&&(u.min=n),s&&(u.velocity=0),u},Bt=function(t){var e;return!(!t||!t.getAttribute||"BODY"===t.nodeName)&&(!("true"!==(e=t.getAttribute("data-clickable"))&&("false"===e||!t.onclick&&!M.test(t.nodeName+"")&&"true"!==t.getAttribute("contentEditable")))||Bt(t.parentNode))},Yt=function(t,e){for(var i,n=t.length;--n>-1;)i=t[n],i.ondragstart=i.onselectstart=e?null:P,it(i,"userSelect",e?"text":"none")},qt=function(){var t,e=y.createElement("div"),i=y.createElement("div"),n=i.style,r=y.body||b;return n.display="inline-block",n.position="relative",e.style.cssText=i.innerHTML="width:90px; height:40px; padding:10px; overflow:auto; visibility: hidden",e.appendChild(i),r.appendChild(e),f=i.offsetHeight+18>e.scrollHeight,n.width="100%",dt||(n.paddingRight="500px",t=e.scrollLeft=e.scrollWidth-e.clientWidth,n.left="-90px",t=t!==e.scrollLeft),r.removeChild(e),t}(),Wt=function(t,i){t=tt(t),i=i||{};var n,r,s,o,a,l,u=y.createElement("div"),h=u.style,c=t.firstChild,p=0,d=0,m=t.scrollTop,g=t.scrollLeft,_=t.scrollWidth,v=t.scrollHeight,x=0,w=0,b=0;ft&&i.force3D!==!1?(a="translate3d(",l="px,0px)"):dt&&(a="translate(",l="px)"),this.scrollTop=function(t,e){return arguments.length?void this.top(-t,e):-this.top()},this.scrollLeft=function(t,e){return arguments.length?void this.left(-t,e):-this.left()},this.left=function(n,r){if(!arguments.length)return-(t.scrollLeft+d);var s=t.scrollLeft-g,o=d;return(s>2||s<-2)&&!r?(g=t.scrollLeft,e.killTweensOf(this,!0,{left:1,scrollLeft:1}),this.left(-g),void(i.onKill&&i.onKill())):(n=-n,n<0?(d=n-.5|0,n=0):n>w?(d=n-w|0,n=w):d=0,(d||o)&&(a?this._suspendTransforms||(h[dt]=a+-d+"px,"+-p+l):h.left=-d+"px",qt&&d+x>=0&&(h.paddingRight=d+x+"px")),t.scrollLeft=0|n,void(g=t.scrollLeft))},this.top=function(n,r){if(!arguments.length)return-(t.scrollTop+p);var s=t.scrollTop-m,o=p;return(s>2||s<-2)&&!r?(m=t.scrollTop,e.killTweensOf(this,!0,{top:1,scrollTop:1}),this.top(-m),void(i.onKill&&i.onKill())):(n=-n,n<0?(p=n-.5|0,n=0):n>b?(p=n-b|0,n=b):p=0,(p||o)&&(a?this._suspendTransforms||(h[dt]=a+-d+"px,"+-p+l):h.top=-p+"px"),t.scrollTop=0|n,void(m=t.scrollTop))},this.maxScrollTop=function(){return b},this.maxScrollLeft=function(){return w},this.disable=function(){for(c=u.firstChild;c;)o=c.nextSibling,t.appendChild(c),c=o;t===u.parentNode&&t.removeChild(u)},this.enable=function(){if(c=t.firstChild,c!==u){for(;c;)o=c.nextSibling,u.appendChild(c),c=o;t.appendChild(u),this.calibrate()}},this.calibrate=function(e){var i,o,a=t.clientWidth===n;m=t.scrollTop,g=t.scrollLeft,a&&t.clientHeight===r&&u.offsetHeight===s&&_===t.scrollWidth&&v===t.scrollHeight&&!e||((p||d)&&(i=this.left(),o=this.top(),this.left(-t.scrollLeft),this.top(-t.scrollTop)),a&&!e||(h.display="block",h.width="auto",h.paddingRight="0px",x=Math.max(0,t.scrollWidth-t.clientWidth),x&&(x+=lt(t,"paddingLeft")+(f?lt(t,"paddingRight"):0))),h.display="inline-block",h.position="relative",h.overflow="visible",h.verticalAlign="top",h.width="100%",h.paddingRight=x+"px",f&&(h.paddingBottom=lt(t,"paddingBottom",!0)),S&&(h.zoom="1"),n=t.clientWidth,r=t.clientHeight,_=t.scrollWidth,v=t.scrollHeight,w=t.scrollWidth-n,b=t.scrollHeight-r,s=u.offsetHeight,h.display="block",(i||o)&&(this.left(i),this.top(o)))},this.content=u,this.element=t,this._suspendTransforms=!1,this.enable()},Vt=function(n,r){t.call(this,n),n=tt(n),o||(o=_.com.greensock.plugins.ThrowPropsPlugin),this.vars=r=z(r||{}),this.target=n,this.x=this.y=this.rotation=0,this.dragResistance=parseFloat(r.dragResistance)||0,this.edgeResistance=isNaN(r.edgeResistance)?1:parseFloat(r.edgeResistance)||0,this.lockAxis=r.lockAxis,this.autoScroll=r.autoScroll||0,this.lockedAxis=null,this.allowEventDefault=!!r.allowEventDefault;var a,l,u,h,c,f,v,w,b,P,R,M,j,B,W,H,U,Q,et,nt,rt,st,ot,at,ct,ft,pt,dt,mt,gt,_t,vt,yt,xt=(r.type||(S?"top,left":"x,y")).toLowerCase(),wt=xt.indexOf("x")!==-1||xt.indexOf("y")!==-1,bt=xt.indexOf("rotation")!==-1,Tt=bt?"rotation":wt?"x":"left",Pt=wt?"y":"top",kt=xt.indexOf("x")!==-1||xt.indexOf("left")!==-1||"scroll"===xt,Ct=xt.indexOf("y")!==-1||xt.indexOf("top")!==-1||"scroll"===xt,At=r.minimumMovement||2,Rt=this,Dt=I(r.trigger||r.handle||n),Nt={},Xt=0,qt=!1,Ht=r.clickableTest||Bt,Ut=0,$t=function(t){if(Rt.autoScroll&&Rt.isDragging&&(qt||Q)){var e,i,r,s,o,a,u,h,c=n,f=15*Rt.autoScroll;for(qt=!1,X.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=x.scrollTop?x.scrollTop:y.body.scrollTop,X.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=x.scrollLeft?x.scrollLeft:y.body.scrollLeft,s=Rt.pointerX-X.scrollLeft,o=Rt.pointerY-X.scrollTop;c&&!i;)i=Z(c.parentNode),e=i?X:c.parentNode,r=i?{bottom:Math.max(x.clientHeight,window.innerHeight||0),right:Math.max(x.clientWidth,window.innerWidth||0),left:0,top:0}:e.getBoundingClientRect(),a=u=0,Ct&&(h=e._gsMaxScrollY-e.scrollTop,h<0?u=h:o>r.bottom-40&&h?(qt=!0,u=Math.min(h,f*(1-Math.max(0,r.bottom-o)/40)|0)):o<r.top+40&&e.scrollTop&&(qt=!0,u=-Math.min(e.scrollTop,f*(1-Math.max(0,o-r.top)/40)|0)),u&&(e.scrollTop+=u)),kt&&(h=e._gsMaxScrollX-e.scrollLeft,h<0?a=h:s>r.right-40&&h?(qt=!0,a=Math.min(h,f*(1-Math.max(0,r.right-s)/40)|0)):s<r.left+40&&e.scrollLeft&&(qt=!0,a=-Math.min(e.scrollLeft,f*(1-Math.max(0,s-r.left)/40)|0)),a&&(e.scrollLeft+=a)),i&&(a||u)&&(window.scrollTo(e.scrollLeft,e.scrollTop),le(Rt.pointerX+a,Rt.pointerY+u)),c=e}if(Q){var p=Rt.x,d=Rt.y,m=1e-6;p<m&&p>-m&&(p=0),d<m&&d>-m&&(d=0),bt?(dt.data.rotation=Rt.rotation=p,dt.setRatio(1)):l?(Ct&&l.top(d),kt&&l.left(p)):wt?(Ct&&(dt.data.y=d),kt&&(dt.data.x=p),dt.setRatio(1)):(Ct&&(n.style.top=d+"px"),kt&&(n.style.left=p+"px")),!w||t||_t||(_t=!0,ut(Rt,"drag","onDrag"),_t=!1)}Q=!1},Zt=function(t,i){var r;Rt.x,Rt.y;n._gsTransform||!wt&&!bt||e.set(n,{x:"+=0",overwrite:!1}),wt?(Rt.y=n._gsTransform.y,Rt.x=n._gsTransform.x):bt?Rt.x=Rt.rotation=n._gsTransform.rotation:l?(Rt.y=l.top(),Rt.x=l.left()):(Rt.y=parseInt(n.style.top,10)||0,Rt.x=parseInt(n.style.left,10)||0),!nt&&!rt||i||(nt&&(r=nt(Rt.x),r!==Rt.x&&(Rt.x=r,bt&&(Rt.rotation=r),Q=!0)),rt&&(r=rt(Rt.y),r!==Rt.y&&(Rt.y=r),Q=!0)),Q&&$t(!0),t||ut(Rt,"throwupdate","onThrowUpdate")},Qt=function(){var t,e,i,s;v=!1,l?(l.calibrate(),Rt.minX=P=-l.maxScrollLeft(),Rt.minY=M=-l.maxScrollTop(),Rt.maxX=b=Rt.maxY=R=0,v=!0):r.bounds&&(t=ht(r.bounds,n.parentNode),bt?(Rt.minX=P=t.left,Rt.maxX=b=t.left+t.width,Rt.minY=M=Rt.maxY=R=0):void 0!==r.bounds.maxX||void 0!==r.bounds.maxY?(t=r.bounds,Rt.minX=P=t.minX,Rt.minY=M=t.minY,Rt.maxX=b=t.maxX,Rt.maxY=R=t.maxY):(e=ht(n,n.parentNode),Rt.minX=P=lt(n,Tt)+t.left-e.left,Rt.minY=M=lt(n,Pt)+t.top-e.top,Rt.maxX=b=P+(t.width-e.width),Rt.maxY=R=M+(t.height-e.height)),P>b&&(Rt.minX=b,Rt.maxX=b=P,P=Rt.minX),M>R&&(Rt.minY=R,Rt.maxY=R=M,M=Rt.minY),bt&&(Rt.minRotation=P,Rt.maxRotation=b),v=!0),r.liveSnap&&(i=r.liveSnap===!0?r.snap||{}:r.liveSnap,s=i instanceof Array||"function"==typeof i,bt?(nt=se(s?i:i.rotation,P,b,1),rt=null):(kt&&(nt=se(s?i:i.x||i.left||i.scrollLeft,P,b,l?-1:1)),Ct&&(rt=se(s?i:i.y||i.top||i.scrollTop,M,R,l?-1:1))))},Kt=function(){Rt.isThrowing=!1,ut(Rt,"throwcomplete","onThrowComplete")},Jt=function(){Rt.isThrowing=!1},te=function(t,e){var i,s,a,u;t&&o?(t===!0&&(i=r.snap||{},s=i instanceof Array||"function"==typeof i,t={resistance:(r.throwResistance||r.resistance||1e3)/(bt?10:1)},bt?t.rotation=zt(Rt,s?i:i.rotation,b,P,1,e):(kt&&(t[Tt]=zt(Rt,s?i:i.x||i.left||i.scrollLeft,b,P,l?-1:1,e||"x"===Rt.lockedAxis)),Ct&&(t[Pt]=zt(Rt,s?i:i.y||i.top||i.scrollTop,R,M,l?-1:1,e||"y"===Rt.lockedAxis)))),Rt.isThrowing=!0,u=isNaN(r.overshootTolerance)?1===r.edgeResistance?0:1-Rt.edgeResistance+.2:r.overshootTolerance,Rt.tween=a=o.to(l||n,{throwProps:t,ease:r.ease||_.Power3.easeOut,onComplete:Kt,onOverwrite:Jt,onUpdate:r.fastMode?ut:Zt,onUpdateParams:r.fastMode?[Rt,"onthrowupdate","onThrowUpdate"]:T},isNaN(r.maxDuration)?2:r.maxDuration,isNaN(r.minDuration)?0===u?0:.5:r.minDuration,u),r.fastMode||(l&&(l._suspendTransforms=!0),a.render(a.duration(),!0,!0),Zt(!0,!0),Rt.endX=Rt.x,Rt.endY=Rt.y,bt&&(Rt.endRotation=Rt.x),a.play(0),Zt(!0,!0),l&&(l._suspendTransforms=!1))):v&&Rt.applyBounds()},ee=function(t){var e,i,r,s,o,a,l,c,f,p=at||[1,0,0,1,0,0];at=Ot(n.parentNode,!0),t&&Rt.isPressed&&p.join(",")!==at.join(",")&&(e=p[0],i=p[1],r=p[2],s=p[3],o=p[4],a=p[5],l=e*s-i*r,c=u*(s/l)+h*(-r/l)+(r*a-s*o)/l,f=u*(-i/l)+h*(e/l)+-(e*a-i*o)/l,h=c*at[1]+f*at[3]+at[5],u=c*at[0]+f*at[2]+at[4]),at[1]||at[2]||1!=at[0]||1!=at[3]||0!=at[4]||0!=at[5]||(at=null)},ie=function(){var t=1-Rt.edgeResistance;ee(!1),at&&(u=Rt.pointerX*at[0]+Rt.pointerY*at[2]+at[4],h=Rt.pointerX*at[1]+Rt.pointerY*at[3]+at[5]),Q&&(le(Rt.pointerX,Rt.pointerY),$t(!0)),l?(Qt(),f=l.top(),c=l.left()):(ne()?(Zt(!0,!0),Qt()):Rt.applyBounds(),bt?(U=St(n,{x:0,y:0}),Zt(!0,!0),c=Rt.x,f=Rt.y=Math.atan2(U.y-Rt.pointerY,Rt.pointerX-U.x)*k):(ft=n.parentNode?n.parentNode.scrollTop||0:0,pt=n.parentNode?n.parentNode.scrollLeft||0:0,f=lt(n,Pt),c=lt(n,Tt))),v&&t&&(c>b?c=b+(c-b)/t:c<P&&(c=P-(P-c)/t),bt||(f>R?f=R+(f-R)/t:f<M&&(f=M-(M-f)/t)))},ne=function(){return Rt.tween&&Rt.tween.isActive()},re=function(){!A.parentNode||ne()||Rt.isDragging||A.parentNode.removeChild(A)},se=function(t,e,i,n){return"function"==typeof t?function(r){var s=Rt.isPressed?1-Rt.edgeResistance:1;return t.call(Rt,r>i?i+(r-i)*s:r<e?e+(r-e)*s:r)*n}:t instanceof Array?function(n){for(var r,s,o=t.length,a=0,l=C;--o>-1;)r=t[o],s=r-n,s<0&&(s=-s),s<l&&r>=e&&r<=i&&(a=o,l=s);return t[a]}:isNaN(t)?function(t){return t}:function(){return t*n}},oe=function(t){var i;if(!(!a||Rt.isPressed||!t||("mousedown"===t.type||"pointerdown"===t.type)&&O()-Ut<30&&Et[Rt.pointerEvent.type])){if(ct=ne(),Rt.pointerEvent=t,Et[t.type]?(ot=t.type.indexOf("touch")!==-1?t.currentTarget||t.target:y,Ft(ot,"touchend",ue),Ft(ot,"touchmove",ae),Ft(ot,"touchcancel",ue),Ft(y,"touchstart",It)):(ot=null,Ft(y,"mousemove",ae)),gt=null,Ft(y,"mouseup",ue),t&&t.target&&Ft(t.target,"mouseup",ue),st=Ht.call(Rt,t.target)&&!r.dragClickables)return Ft(t.target,"change",ue),ut(Rt,"press","onPress"),void Yt(Dt,!0);if(mt=!(!ot||kt===Ct||l||Rt.vars.allowNativeTouchScrolling===!1)&&(kt?"y":"x"),S?t=J(t,!0):mt||Rt.allowEventDefault||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()),t.changedTouches?(t=W=t.changedTouches[0],H=t.identifier):t.pointerId?H=t.pointerId:W=H=null,E++,Y($t),h=Rt.pointerY=t.pageY,u=Rt.pointerX=t.pageX,(mt||Rt.autoScroll)&&K(n.parentNode),n.parentNode&&(l||Rt.autoScroll&&!bt&&n.parentNode._gsMaxScrollX&&!A.parentNode)&&!n.getBBox&&(A.style.width=n.parentNode.scrollWidth+"px",n.parentNode.appendChild(A)),ie(),Rt.tween&&Rt.tween.kill(),Rt.isThrowing=!1,e.killTweensOf(l||n,!0,Nt),l&&e.killTweensOf(n,!0,{scrollTo:1}),Rt.tween=Rt.lockedAxis=null,(r.zIndexBoost||!bt&&!l&&r.zIndexBoost!==!1)&&(n.style.zIndex=Vt.zIndex++),Rt.isPressed=!0,w=!(!r.onDrag&&!Rt._listeners.drag),!bt)for(i=Dt.length;--i>-1;)it(Dt[i],"cursor",r.cursor||"move");ut(Rt,"press","onPress")}},ae=function(t){var e,i,n,r,o=t;if(a&&!s&&Rt.isPressed&&t){if(Rt.pointerEvent=t,e=t.changedTouches){if(t=e[0],t!==W&&t.identifier!==H){for(r=e.length;--r>-1&&(t=e[r]).identifier!==H;);if(r<0)return}}else if(t.pointerId&&H&&t.pointerId!==H)return;if(S)t=J(t,!0);else{if(ot&&mt&&!gt&&(i=t.pageX,
n=t.pageY,at&&(r=i*at[0]+n*at[2]+at[4],n=i*at[1]+n*at[3]+at[5],i=r),gt=Math.abs(i-u)>Math.abs(n-h)&&kt?"x":"y",Rt.vars.lockAxisOnTouchScroll!==!1&&(Rt.lockedAxis="x"===gt?"y":"x","function"==typeof Rt.vars.onLockAxis&&Rt.vars.onLockAxis.call(Rt,o)),F&&mt===gt))return void ue(o);Rt.allowEventDefault||mt&&(!gt||mt===gt)||o.cancelable===!1||(o.preventDefault(),o.preventManipulation&&o.preventManipulation())}Rt.autoScroll&&(qt=!0),le(t.pageX,t.pageY)}},le=function(t,e){var i,n,r,s,o,a,l=1-Rt.dragResistance,p=1-Rt.edgeResistance;Rt.pointerX=t,Rt.pointerY=e,bt?(s=Math.atan2(U.y-e,t-U.x)*k,o=Rt.y-s,Rt.y=s,o>180?f-=360:o<-180&&(f+=360),r=c+(f-s)*l):(at&&(a=t*at[0]+e*at[2]+at[4],e=t*at[1]+e*at[3]+at[5],t=a),n=e-h,i=t-u,n<At&&n>-At&&(n=0),i<At&&i>-At&&(i=0),(Rt.lockAxis||Rt.lockedAxis)&&(i||n)&&(a=Rt.lockedAxis,a||(Rt.lockedAxis=a=kt&&Math.abs(i)>Math.abs(n)?"y":Ct?"x":null,a&&"function"==typeof Rt.vars.onLockAxis&&Rt.vars.onLockAxis.call(Rt,Rt.pointerEvent)),"y"===a?n=0:"x"===a&&(i=0)),r=c+i*l,s=f+n*l),nt||rt?(nt&&(r=nt(r)),rt&&(s=rt(s))):v&&(r>b?r=b+(r-b)*p:r<P&&(r=P+(r-P)*p),bt||(s>R?s=R+(s-R)*p:s<M&&(s=M+(s-M)*p))),bt||(r=Math.round(r),s=Math.round(s)),(Rt.x!==r||Rt.y!==s&&!bt)&&(bt?Rt.endRotation=Rt.x=Rt.endX=r:(Ct&&(Rt.y=Rt.endY=s),kt&&(Rt.x=Rt.endX=r)),Q=!0,!Rt.isDragging&&Rt.isPressed&&(Rt.isDragging=!0,ut(Rt,"dragstart","onDragStart")))},ue=function(t,i){if(a&&Rt.isPressed&&(!t||null==H||i||!(t.pointerId&&t.pointerId!==H||t.changedTouches&&!jt(t.changedTouches,H)))){Rt.isPressed=!1;var s,o,l,u,h,c=t,f=Rt.isDragging,p=e.delayedCall(.001,re);if(ot?(Lt(ot,"touchend",ue),Lt(ot,"touchmove",ae),Lt(ot,"touchcancel",ue),Lt(y,"touchstart",It)):Lt(y,"mousemove",ae),Lt(y,"mouseup",ue),t&&t.target&&Lt(t.target,"mouseup",ue),Q=!1,st)return t&&Lt(t.target,"change",ue),Yt(Dt,!1),ut(Rt,"release","onRelease"),ut(Rt,"click","onClick"),void(st=!1);if(q($t),!bt)for(o=Dt.length;--o>-1;)it(Dt[o],"cursor",r.cursor||"move");if(f&&(Xt=L=O(),Rt.isDragging=!1),E--,t){if(S&&(t=J(t,!1)),s=t.changedTouches,s&&(t=s[0],t!==W&&t.identifier!==H)){for(o=s.length;--o>-1&&(t=s[o]).identifier!==H;);if(o<0)return}Rt.pointerEvent=c,Rt.pointerX=t.pageX,Rt.pointerY=t.pageY}return c&&!f?(ct&&(r.snap||r.bounds)&&te(r.throwProps),ut(Rt,"release","onRelease"),F&&"touchmove"===c.type||(ut(Rt,"click","onClick"),u=c.target||c.srcElement||n,Ut=O(),h=function(){Ut!==vt&&Rt.enabled()&&!Rt.isPressed&&(u.click?u.click():y.createEvent&&(l=y.createEvent("MouseEvents"),l.initMouseEvent("click",!0,!0,window,1,Rt.pointerEvent.screenX,Rt.pointerEvent.screenY,Rt.pointerX,Rt.pointerY,!1,!1,!1,!1,0,null),u.dispatchEvent(l)))},F||e.delayedCall(1e-5,h))):(te(r.throwProps),S||Rt.allowEventDefault||!c||!r.dragClickables&&Ht.call(Rt,c.target)||!f||mt&&(!gt||mt!==gt)||c.cancelable===!1||(c.preventDefault(),c.preventManipulation&&c.preventManipulation()),ut(Rt,"release","onRelease")),ne()&&p.duration(Rt.tween.duration()),f&&ut(Rt,"dragend","onDragEnd"),!0}},he=function(t){if(t&&Rt.isDragging){var e=t.target||t.srcElement||n.parentNode,i=e.scrollLeft-e._gsScrollX,r=e.scrollTop-e._gsScrollY;(i||r)&&(at?(u-=i*at[0]+r*at[2],h-=r*at[3]+i*at[1]):(u-=i,h-=r),e._gsScrollX+=i,e._gsScrollY+=r,le(Rt.pointerX,Rt.pointerY))}},ce=function(t){var e=O(),i=e-Ut<40,n=e-Xt<40,r=i&&vt===Ut,s=!!t.preventDefault,o=i&&yt===Ut,a=t.isTrusted||null==t.isTrusted&&i&&r;return s&&(r||n&&Rt.vars.suppressClickOnDrag!==!1)&&t.stopImmediatePropagation(),!i||r&&a===o?void((Rt.isPressed||n||i)&&(s?a&&t.detail&&i||(t.preventDefault(),t.preventManipulation&&t.preventManipulation()):t.returnValue=!1)):(a&&r&&(yt=Ut),void(vt=Ut))};et=Vt.get(this.target),et&&et.kill(),this.startDrag=function(t){oe(t),Rt.isDragging||(Rt.isDragging=!0,ut(Rt,"dragstart","onDragStart"))},this.drag=ae,this.endDrag=function(t){ue(t,!0)},this.timeSinceDrag=function(){return Rt.isDragging?0:(O()-Xt)/1e3},this.hitTest=function(t,e){return Vt.hitTest(Rt.target,t,e)},this.getDirection=function(t,e){var i,n,r,s,a,l,u="velocity"===t&&o?t:"object"!=typeof t||bt?"start":"element";return"element"===u&&(a=Gt(Rt.target),l=Gt(t)),i="start"===u?Rt.x-c:"velocity"===u?o.getVelocity(this.target,Tt):a.left+a.width/2-(l.left+l.width/2),bt?i<0?"counter-clockwise":"clockwise":(e=e||2,n="start"===u?Rt.y-f:"velocity"===u?o.getVelocity(this.target,Pt):a.top+a.height/2-(l.top+l.height/2),r=Math.abs(i/n),s=r<1/e?"":i<0?"left":"right",r<e&&(""!==s&&(s+="-"),s+=n<0?"up":"down"),s)},this.applyBounds=function(t){var e,i,s,o,a,l;if(t&&r.bounds!==t)return r.bounds=t,Rt.update(!0);if(Zt(!0),Qt(),v){if(e=Rt.x,i=Rt.y,e>b?e=b:e<P&&(e=P),i>R?i=R:i<M&&(i=M),(Rt.x!==e||Rt.y!==i)&&(s=!0,Rt.x=Rt.endX=e,bt?Rt.endRotation=e:Rt.y=Rt.endY=i,Q=!0,$t(!0),Rt.autoScroll&&!Rt.isDragging))for(K(n.parentNode),o=n,X.scrollTop=null!=window.pageYOffset?window.pageYOffset:null!=x.scrollTop?x.scrollTop:y.body.scrollTop,X.scrollLeft=null!=window.pageXOffset?window.pageXOffset:null!=x.scrollLeft?x.scrollLeft:y.body.scrollLeft;o&&!l;)l=Z(o.parentNode),a=l?X:o.parentNode,Ct&&a.scrollTop>a._gsMaxScrollY&&(a.scrollTop=a._gsMaxScrollY),kt&&a.scrollLeft>a._gsMaxScrollX&&(a.scrollLeft=a._gsMaxScrollX),o=a;Rt.isThrowing&&(s||Rt.endX>b||Rt.endX<P||Rt.endY>R||Rt.endY<M)&&te(r.throwProps,s)}return Rt},this.update=function(t,e,i){var r=Rt.x,s=Rt.y;return ee(!e),t?Rt.applyBounds():(Q&&i&&$t(!0),Zt(!0)),e&&(le(Rt.pointerX,Rt.pointerY),Q&&$t(!0)),Rt.isPressed&&!e&&(kt&&Math.abs(r-Rt.x)>.01||Ct&&Math.abs(s-Rt.y)>.01&&!bt)&&ie(),Rt.autoScroll&&(K(n.parentNode),qt=Rt.isDragging,$t(!0)),Rt.autoScroll&&(G(n,he),$(n,he)),Rt},this.enable=function(t){var s,u,h;if("soft"!==t){for(u=Dt.length;--u>-1;)h=Dt[u],Ft(h,"mousedown",oe),Ft(h,"touchstart",oe),Ft(h,"click",ce,!0),bt||it(h,"cursor",r.cursor||"move"),it(h,"touchCallout","none"),it(h,"touchAction",kt===Ct||l?"none":kt?"pan-y":"pan-x");Yt(Dt,!1)}return $(n,he),a=!0,o&&"soft"!==t&&o.track(l||n,wt?"x,y":bt?"rotation":"top,left"),l&&l.enable(),n._gsDragID=s="d"+N++,D[s]=this,l&&(l.element._gsDragID=s),e.set(n,{x:"+=0",overwrite:!1}),dt={t:n,data:S?B:n._gsTransform,tween:{},setRatio:S?function(){e.set(n,j)}:i._internals.setTransformRatio||i._internals.set3DTransformRatio},ie(),Rt.update(!0),Rt},this.disable=function(t){var e,i,r=Rt.isDragging;if(!bt)for(e=Dt.length;--e>-1;)it(Dt[e],"cursor",null);if("soft"!==t){for(e=Dt.length;--e>-1;)i=Dt[e],it(i,"touchCallout",null),it(i,"touchAction",null),Lt(i,"mousedown",oe),Lt(i,"touchstart",oe),Lt(i,"click",ce);Yt(Dt,!0),ot&&(Lt(ot,"touchcancel",ue),Lt(ot,"touchend",ue),Lt(ot,"touchmove",ae)),Lt(y,"mouseup",ue),Lt(y,"mousemove",ae)}return G(n,he),a=!1,o&&"soft"!==t&&o.untrack(l||n,wt?"x,y":bt?"rotation":"top,left"),l&&l.disable(),q($t),Rt.isDragging=Rt.isPressed=st=!1,r&&ut(Rt,"dragend","onDragEnd"),Rt},this.enabled=function(t,e){return arguments.length?t?Rt.enable(e):Rt.disable(e):a},this.kill=function(){return Rt.isThrowing=!1,e.killTweensOf(l||n,!0,Nt),Rt.disable(),delete D[n._gsDragID],Rt},xt.indexOf("scroll")!==-1&&(l=this.scrollProxy=new Wt(n,V({onKill:function(){Rt.isPressed&&ue(null)}},r)),n.style.overflowY=Ct&&!Mt?"auto":"hidden",n.style.overflowX=kt&&!Mt?"auto":"hidden",n=l.content),r.force3D!==!1&&e.set(n,{force3D:!0}),bt?Nt.rotation=1:(kt&&(Nt[Tt]=1),Ct&&(Nt[Pt]=1)),bt?(j=g,B=j.css,j.overwrite=!1):wt&&(j=kt&&Ct?p:kt?d:m,B=j.css,j.overwrite=!1),this.enable()},Ht=Vt.prototype=new t;Ht.constructor=Vt,Ht.pointerX=Ht.pointerY=0,Ht.isDragging=Ht.isPressed=!1,Vt.version="0.14.8",Vt.zIndex=1e3,Ft(y,"touchcancel",function(){}),Ft(y,"contextmenu",function(t){var e;for(e in D)D[e].isPressed&&D[e].endDrag()}),Vt.create=function(t,i){"string"==typeof t&&(t=e.selector(t));for(var n=t&&0!==t.length?Dt(t)?Nt(t):[t]:[],r=n.length;--r>-1;)n[r]=new Vt(n[r],i);return n},Vt.get=function(t){return D[(tt(t)||{})._gsDragID]},Vt.timeSinceDrag=function(){return(O()-L)/1e3};var Ut={},$t=function(t){var e,i,n=0,r=0;for(t=tt(t),e=t.offsetWidth,i=t.offsetHeight;t;)n+=t.offsetTop,r+=t.offsetLeft,t=t.offsetParent;return{top:n,left:r,width:e,height:i}},Gt=function(t,e){if(t===window)return Ut.left=Ut.top=0,Ut.width=Ut.right=x.clientWidth||t.innerWidth||y.body.clientWidth||0,Ut.height=Ut.bottom=(t.innerHeight||0)-20<x.clientHeight?x.clientHeight:t.innerHeight||y.body.clientHeight||0,Ut;var i=t.pageX!==e?{left:t.pageX-U(),top:t.pageY-H(),right:t.pageX-U()+1,bottom:t.pageY-H()+1}:t.nodeType||t.left===e||t.top===e?S?$t(t):tt(t).getBoundingClientRect():t;return i.right===e&&i.width!==e?(i.right=i.left+i.width,i.bottom=i.top+i.height):i.width===e&&(i={width:i.right-i.left,height:i.bottom-i.top,right:i.right,left:i.left,bottom:i.bottom,top:i.top}),i};return Vt.hitTest=function(t,e,i){if(t===e)return!1;var n,r,s,o=Gt(t),a=Gt(e),l=a.left>o.right||a.right<o.left||a.top>o.bottom||a.bottom<o.top;return l||!i?!l:(s=(i+"").indexOf("%")!==-1,i=parseFloat(i)||0,n={left:Math.max(o.left,a.left),top:Math.max(o.top,a.top)},n.width=Math.min(o.right,a.right)-n.left,n.height=Math.min(o.bottom,a.bottom)-n.top,!(n.width<0||n.height<0)&&(s?(i*=.01,r=n.width*n.height,r>=o.width*o.height*i||r>=a.width*a.height*i):n.width>i&&n.height>i))},A.style.cssText="visibility:hidden;height:1px;top:-1px;pointer-events:none;position:relative;clear:both;",Vt},!0)}),n._gsDefine&&n._gsQueue.pop()(),function(i){"use strict";var r=function(){return(n.GreenSockGlobals||n)[i]};"function"==typeof define&&define.amd?define(["TweenLite","CSSPlugin"],r):"undefined"!=typeof e&&e.exports&&(t("../TweenLite.js"),t("../plugins/CSSPlugin.js"),e.exports=r())}("Draggable")}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../TweenLite.js":6,"../plugins/CSSPlugin.js":8}],12:[function(t,e,i){!function(t,i){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?i(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return i(t)}:i(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function i(t,e){e=e||Y;var i=e.createElement("script");i.text=t,e.head.appendChild(i).parentNode.removeChild(i)}function n(t){var e=!!t&&"length"in t&&t.length,i=et.type(t);return"function"!==i&&!et.isWindow(t)&&("array"===i||0===e||"number"==typeof e&&e>0&&e-1 in t)}function r(t,e,i){return et.isFunction(e)?et.grep(t,function(t,n){return!!e.call(t,n,t)!==i}):e.nodeType?et.grep(t,function(t){return t===e!==i}):"string"!=typeof e?et.grep(t,function(t){return U.call(e,t)>-1!==i}):ct.test(e)?et.filter(e,t,i):(e=et.filter(e,t),et.grep(t,function(t){return U.call(e,t)>-1!==i&&1===t.nodeType}))}function s(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function o(t){var e={};return et.each(t.match(_t)||[],function(t,i){e[i]=!0}),e}function a(t){return t}function l(t){throw t}function u(t,e,i){var n;try{t&&et.isFunction(n=t.promise)?n.call(t).done(e).fail(i):t&&et.isFunction(n=t.then)?n.call(t,e,i):e.call(void 0,t)}catch(t){i.call(void 0,t)}}function h(){Y.removeEventListener("DOMContentLoaded",h),t.removeEventListener("load",h),et.ready()}function c(){this.expando=et.expando+c.uid++}function f(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Pt.test(t)?JSON.parse(t):t)}function p(t,e,i){var n;if(void 0===i&&1===t.nodeType)if(n="data-"+e.replace(kt,"-$&").toLowerCase(),i=t.getAttribute(n),"string"==typeof i){try{i=f(i)}catch(t){}Tt.set(t,e,i)}else i=void 0;return i}function d(t,e,i,n){var r,s=1,o=20,a=n?function(){return n.cur()}:function(){return et.css(t,e,"")},l=a(),u=i&&i[3]||(et.cssNumber[e]?"":"px"),h=(et.cssNumber[e]||"px"!==u&&+l)&&Ot.exec(et.css(t,e));if(h&&h[3]!==u){u=u||h[3],i=i||[],h=+l||1;do s=s||".5",h/=s,et.style(t,e,h+u);while(s!==(s=a()/l)&&1!==s&&--o)}return i&&(h=+h||+l||0,r=i[1]?h+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=h,n.end=r)),r}function m(t){var e,i=t.ownerDocument,n=t.nodeName,r=Dt[n];return r?r:(e=i.body.appendChild(i.createElement(n)),r=et.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),Dt[n]=r,r)}function g(t,e){for(var i,n,r=[],s=0,o=t.length;s<o;s++)n=t[s],n.style&&(i=n.style.display,e?("none"===i&&(r[s]=bt.get(n,"display")||null,r[s]||(n.style.display="")),""===n.style.display&&At(n)&&(r[s]=m(n))):"none"!==i&&(r[s]="none",bt.set(n,"display",i)));for(s=0;s<o;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}function _(t,e){var i;return i="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&et.nodeName(t,e)?et.merge([t],i):i}function v(t,e){for(var i=0,n=t.length;i<n;i++)bt.set(t[i],"globalEval",!e||bt.get(e[i],"globalEval"))}function y(t,e,i,n,r){for(var s,o,a,l,u,h,c=e.createDocumentFragment(),f=[],p=0,d=t.length;p<d;p++)if(s=t[p],s||0===s)if("object"===et.type(s))et.merge(f,s.nodeType?[s]:s);else if(Lt.test(s)){for(o=o||c.appendChild(e.createElement("div")),a=(Mt.exec(s)||["",""])[1].toLowerCase(),l=Ft[a]||Ft._default,o.innerHTML=l[1]+et.htmlPrefilter(s)+l[2],h=l[0];h--;)o=o.lastChild;et.merge(f,o.childNodes),o=c.firstChild,o.textContent=""}else f.push(e.createTextNode(s));for(c.textContent="",p=0;s=f[p++];)if(n&&et.inArray(s,n)>-1)r&&r.push(s);else if(u=et.contains(s.ownerDocument,s),o=_(c.appendChild(s),"script"),u&&v(o),i)for(h=0;s=o[h++];)Et.test(s.type||"")&&i.push(s);return c}function x(){return!0}function w(){return!1}function b(){try{return Y.activeElement}catch(t){}}function T(t,e,i,n,r,s){var o,a;if("object"==typeof e){"string"!=typeof i&&(n=n||i,i=void 0);for(a in e)T(t,a,i,n,e[a],s);return t}if(null==n&&null==r?(r=i,n=i=void 0):null==r&&("string"==typeof i?(r=n,n=void 0):(r=n,n=i,i=void 0)),r===!1)r=w;else if(!r)return t;return 1===s&&(o=r,r=function(t){return et().off(t),o.apply(this,arguments)},r.guid=o.guid||(o.guid=et.guid++)),t.each(function(){et.event.add(this,e,r,n,i)})}function P(t,e){return et.nodeName(t,"table")&&et.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t:t}function k(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function C(t){var e=Wt.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function O(t,e){var i,n,r,s,o,a,l,u;if(1===e.nodeType){if(bt.hasData(t)&&(s=bt.access(t),o=bt.set(e,s),u=s.events)){delete o.handle,o.events={};for(r in u)for(i=0,n=u[r].length;i<n;i++)et.event.add(e,r,u[r][i])}Tt.hasData(t)&&(a=Tt.access(t),l=et.extend({},a),Tt.set(e,l))}}function S(t,e){var i=e.nodeName.toLowerCase();"input"===i&&Nt.test(t.type)?e.checked=t.checked:"input"!==i&&"textarea"!==i||(e.defaultValue=t.defaultValue)}function A(t,e,n,r){e=V.apply([],e);var s,o,a,l,u,h,c=0,f=t.length,p=f-1,d=e[0],m=et.isFunction(d);if(m||f>1&&"string"==typeof d&&!J.checkClone&&qt.test(d))return t.each(function(i){var s=t.eq(i);m&&(e[0]=d.call(this,i,s.html())),A(s,e,n,r)});if(f&&(s=y(e,t[0].ownerDocument,!1,t,r),o=s.firstChild,1===s.childNodes.length&&(s=o),o||r)){for(a=et.map(_(s,"script"),k),l=a.length;c<f;c++)u=s,c!==p&&(u=et.clone(u,!0,!0),l&&et.merge(a,_(u,"script"))),n.call(t[c],u,c);if(l)for(h=a[a.length-1].ownerDocument,et.map(a,C),c=0;c<l;c++)u=a[c],Et.test(u.type||"")&&!bt.access(u,"globalEval")&&et.contains(h,u)&&(u.src?et._evalUrl&&et._evalUrl(u.src):i(u.textContent.replace(Vt,""),h))}return t}function R(t,e,i){for(var n,r=e?et.filter(e,t):t,s=0;null!=(n=r[s]);s++)i||1!==n.nodeType||et.cleanData(_(n)),n.parentNode&&(i&&et.contains(n.ownerDocument,n)&&v(_(n,"script")),n.parentNode.removeChild(n));return t}function D(t,e,i){var n,r,s,o,a=t.style;return i=i||$t(t),i&&(o=i.getPropertyValue(e)||i[e],""!==o||et.contains(t.ownerDocument,t)||(o=et.style(t,e)),!J.pixelMarginRight()&&Ut.test(o)&&Ht.test(e)&&(n=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=i.width,a.width=n,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function N(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function M(t){if(t in Jt)return t;for(var e=t[0].toUpperCase()+t.slice(1),i=Kt.length;i--;)if(t=Kt[i]+e,t in Jt)return t}function E(t,e,i){var n=Ot.exec(e);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):e}function F(t,e,i,n,r){var s,o=0;for(s=i===(n?"border":"content")?4:"width"===e?1:0;s<4;s+=2)"margin"===i&&(o+=et.css(t,i+St[s],!0,r)),n?("content"===i&&(o-=et.css(t,"padding"+St[s],!0,r)),"margin"!==i&&(o-=et.css(t,"border"+St[s]+"Width",!0,r))):(o+=et.css(t,"padding"+St[s],!0,r),"padding"!==i&&(o+=et.css(t,"border"+St[s]+"Width",!0,r)));return o}function L(t,e,i){var n,r=!0,s=$t(t),o="border-box"===et.css(t,"boxSizing",!1,s);if(t.getClientRects().length&&(n=t.getBoundingClientRect()[e]),n<=0||null==n){if(n=D(t,e,s),(n<0||null==n)&&(n=t.style[e]),Ut.test(n))return n;r=o&&(J.boxSizingReliable()||n===t.style[e]),n=parseFloat(n)||0}return n+F(t,e,i||(o?"border":"content"),r,s)+"px"}function j(t){var e=t.match(_t)||[];return e.join(" ")}function X(t){return t.getAttribute&&t.getAttribute("class")||""}function I(t,e,i,n){var r;if(et.isArray(e))et.each(e,function(e,r){i||oe.test(t)?n(t,r):I(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,i,n)});else if(i||"object"!==et.type(e))n(t,e);else for(r in e)I(t+"["+r+"]",e[r],i,n)}function z(t){return et.isWindow(t)?t:9===t.nodeType&&t.defaultView}var B=[],Y=t.document,q=Object.getPrototypeOf,W=B.slice,V=B.concat,H=B.push,U=B.indexOf,$={},G=$.toString,Z=$.hasOwnProperty,Q=Z.toString,K=Q.call(Object),J={},tt="3.1.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/animatedSelector,-effects/Tween,-deprecated",et=function(t,e){return new et.fn.init(t,e)},it=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,nt=/^-ms-/,rt=/-([a-z])/g,st=function(t,e){return e.toUpperCase()};et.fn=et.prototype={jquery:tt,constructor:et,length:0,toArray:function(){return W.call(this)},get:function(t){return null==t?W.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=et.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return et.each(this,t)},map:function(t){return this.pushStack(et.map(this,function(e,i){return t.call(e,i,e)}))},slice:function(){return this.pushStack(W.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(i>=0&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:H,sort:B.sort,splice:B.splice},et.extend=et.fn.extend=function(){var t,e,i,n,r,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||et.isFunction(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)i=o[e],n=t[e],o!==n&&(u&&n&&(et.isPlainObject(n)||(r=et.isArray(n)))?(r?(r=!1,s=i&&et.isArray(i)?i:[]):s=i&&et.isPlainObject(i)?i:{},o[e]=et.extend(u,s,n)):void 0!==n&&(o[e]=n));return o},et.extend({expando:"jQuery"+(tt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===et.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=et.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==G.call(t)||(e=q(t))&&(i=Z.call(e,"constructor")&&e.constructor,"function"!=typeof i||Q.call(i)!==K))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?$[G.call(t)]||"object":typeof t},globalEval:function(t){i(t)},camelCase:function(t){return t.replace(nt,"ms-").replace(rt,st)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var i,r=0;if(n(t))for(i=t.length;r<i&&e.call(t[r],r,t[r])!==!1;r++);else for(r in t)if(e.call(t[r],r,t[r])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(it,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(n(Object(t))?et.merge(i,"string"==typeof t?[t]:t):H.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:U.call(e,t,i)},merge:function(t,e){for(var i=+e.length,n=0,r=t.length;n<i;n++)t[r++]=e[n];return t.length=r,t},grep:function(t,e,i){for(var n,r=[],s=0,o=t.length,a=!i;s<o;s++)n=!e(t[s],s),n!==a&&r.push(t[s]);return r},map:function(t,e,i){var r,s,o=0,a=[];if(n(t))for(r=t.length;o<r;o++)s=e(t[o],o,i),null!=s&&a.push(s);else for(o in t)s=e(t[o],o,i),null!=s&&a.push(s);return V.apply([],a)},guid:1,proxy:function(t,e){var i,n,r;if("string"==typeof e&&(i=t[e],e=t,t=i),et.isFunction(t))return n=W.call(arguments,2),r=function(){return t.apply(e||this,n.concat(W.call(arguments)))},r.guid=t.guid=t.guid||et.guid++,r},now:Date.now,support:J}),"function"==typeof Symbol&&(et.fn[Symbol.iterator]=B[Symbol.iterator]),et.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){$["[object "+e+"]"]=e.toLowerCase()});var ot=function(t){function e(t,e,i,n){var r,s,o,a,l,u,h,f=e&&e.ownerDocument,d=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return i;if(!n&&((e?e.ownerDocument||e:B)!==M&&N(e),e=e||M,F)){if(11!==d&&(l=_t.exec(t)))if(r=l[1]){if(9===d){if(!(o=e.getElementById(r)))return i;if(o.id===r)return i.push(o),i}else if(f&&(o=f.getElementById(r))&&I(e,o)&&o.id===r)return i.push(o),i}else{if(l[2])return K.apply(i,e.getElementsByTagName(t)),i;if((r=l[3])&&b.getElementsByClassName&&e.getElementsByClassName)return K.apply(i,e.getElementsByClassName(r)),i}if(b.qsa&&!H[t+" "]&&(!L||!L.test(t))){if(1!==d)f=e,h=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(wt,bt):e.setAttribute("id",a=z),u=C(t),s=u.length;s--;)u[s]="#"+a+" "+p(u[s]);h=u.join(","),f=vt.test(t)&&c(e.parentNode)||e}if(h)try{return K.apply(i,f.querySelectorAll(h)),i}catch(t){}finally{a===z&&e.removeAttribute("id")}}}return S(t.replace(at,"$1"),e,i,n)}function i(){function t(i,n){return e.push(i+" ")>T.cacheLength&&delete t[e.shift()],t[i+" "]=n}var e=[];return t}function n(t){return t[z]=!0,t}function r(t){var e=M.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var i=t.split("|"),n=i.length;n--;)T.attrHandle[i[n]]=e}function o(t,e){var i=e&&t,n=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function a(t){return function(e){var i=e.nodeName.toLowerCase();return"input"===i&&e.type===t}}function l(t){return function(e){var i=e.nodeName.toLowerCase();return("input"===i||"button"===i)&&e.type===t}}function u(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Pt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function h(t){return n(function(e){return e=+e,n(function(i,n){for(var r,s=t([],i.length,e),o=s.length;o--;)i[r=s[o]]&&(i[r]=!(n[r]=i[r]))})})}function c(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function f(){}function p(t){for(var e=0,i=t.length,n="";e<i;e++)n+=t[e].value;return n}function d(t,e,i){var n=e.dir,r=e.next,s=r||n,o=i&&"parentNode"===s,a=q++;return e.first?function(e,i,r){for(;e=e[n];)if(1===e.nodeType||o)return t(e,i,r);return!1}:function(e,i,l){var u,h,c,f=[Y,a];if(l){for(;e=e[n];)if((1===e.nodeType||o)&&t(e,i,l))return!0}else for(;e=e[n];)if(1===e.nodeType||o)if(c=e[z]||(e[z]={}),h=c[e.uniqueID]||(c[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[n]||e;else{if((u=h[s])&&u[0]===Y&&u[1]===a)return f[2]=u[2];if(h[s]=f,f[2]=t(e,i,l))return!0}return!1}}function m(t){return t.length>1?function(e,i,n){for(var r=t.length;r--;)if(!t[r](e,i,n))return!1;return!0}:t[0]}function g(t,i,n){for(var r=0,s=i.length;r<s;r++)e(t,i[r],n);return n}function _(t,e,i,n,r){for(var s,o=[],a=0,l=t.length,u=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,n,r)||(o.push(s),u&&e.push(a)));return o}function v(t,e,i,r,s,o){return r&&!r[z]&&(r=v(r)),s&&!s[z]&&(s=v(s,o)),n(function(n,o,a,l){var u,h,c,f=[],p=[],d=o.length,m=n||g(e||"*",a.nodeType?[a]:a,[]),v=!t||!n&&e?m:_(m,f,t,a,l),y=i?s||(n?t:d||r)?[]:o:v;if(i&&i(v,y,a,l),r)for(u=_(y,p),r(u,[],a,l),h=u.length;h--;)(c=u[h])&&(y[p[h]]=!(v[p[h]]=c));if(n){if(s||t){if(s){for(u=[],h=y.length;h--;)(c=y[h])&&u.push(v[h]=c);s(null,y=[],u,l)}for(h=y.length;h--;)(c=y[h])&&(u=s?tt(n,c):f[h])>-1&&(n[u]=!(o[u]=c))}}else y=_(y===o?y.splice(d,y.length):y),s?s(null,o,y,l):K.apply(o,y)})}function y(t){for(var e,i,n,r=t.length,s=T.relative[t[0].type],o=s||T.relative[" "],a=s?1:0,l=d(function(t){return t===e},o,!0),u=d(function(t){return tt(e,t)>-1},o,!0),h=[function(t,i,n){var r=!s&&(n||i!==A)||((e=i).nodeType?l(t,i,n):u(t,i,n));return e=null,r}];a<r;a++)if(i=T.relative[t[a].type])h=[d(m(h),i)];else{if(i=T.filter[t[a].type].apply(null,t[a].matches),i[z]){for(n=++a;n<r&&!T.relative[t[n].type];n++);return v(a>1&&m(h),a>1&&p(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),i,a<n&&y(t.slice(a,n)),n<r&&y(t=t.slice(n)),n<r&&p(t))}h.push(i)}return m(h)}function x(t,i){var r=i.length>0,s=t.length>0,o=function(n,o,a,l,u){var h,c,f,p=0,d="0",m=n&&[],g=[],v=A,y=n||s&&T.find.TAG("*",u),x=Y+=null==v?1:Math.random()||.1,w=y.length;for(u&&(A=o===M||o||u);d!==w&&null!=(h=y[d]);d++){if(s&&h){for(c=0,o||h.ownerDocument===M||(N(h),a=!F);f=t[c++];)if(f(h,o||M,a)){l.push(h);break}u&&(Y=x)}r&&((h=!f&&h)&&p--,n&&m.push(h))}if(p+=d,r&&d!==p){for(c=0;f=i[c++];)f(m,g,o,a);if(n){if(p>0)for(;d--;)m[d]||g[d]||(g[d]=Z.call(l));g=_(g)}K.apply(l,g),u&&!n&&g.length>0&&p+i.length>1&&e.uniqueSort(l)}return u&&(Y=x,A=v),m};return r?n(o):o}var w,b,T,P,k,C,O,S,A,R,D,N,M,E,F,L,j,X,I,z="sizzle"+1*new Date,B=t.document,Y=0,q=0,W=i(),V=i(),H=i(),U=function(t,e){return t===e&&(D=!0),0},$={}.hasOwnProperty,G=[],Z=G.pop,Q=G.push,K=G.push,J=G.slice,tt=function(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",it="[\\x20\\t\\r\\n\\f]",nt="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",rt="\\["+it+"*("+nt+")(?:"+it+"*([*^$|!~]?=)"+it+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+nt+"))|)"+it+"*\\]",st=":("+nt+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",ot=new RegExp(it+"+","g"),at=new RegExp("^"+it+"+|((?:^|[^\\\\])(?:\\\\.)*)"+it+"+$","g"),lt=new RegExp("^"+it+"*,"+it+"*"),ut=new RegExp("^"+it+"*([>+~]|"+it+")"+it+"*"),ht=new RegExp("="+it+"*([^\\]'\"]*?)"+it+"*\\]","g"),ct=new RegExp(st),ft=new RegExp("^"+nt+"$"),pt={ID:new RegExp("^#("+nt+")"),CLASS:new RegExp("^\\.("+nt+")"),TAG:new RegExp("^("+nt+"|[*])"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+it+"*(even|odd|(([+-]|)(\\d*)n|)"+it+"*(?:([+-]|)"+it+"*(\\d+)|))"+it+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+it+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+it+"*((?:-\\d)?\\d*)"+it+"*\\)|)(?=[^-]|$)","i")},dt=/^(?:input|select|textarea|button)$/i,mt=/^h\d$/i,gt=/^[^{]+\{\s*\[native \w/,_t=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,vt=/[+~]/,yt=new RegExp("\\\\([\\da-f]{1,6}"+it+"?|("+it+")|.)","ig"),xt=function(t,e,i){var n="0x"+e-65536;return n!==n||i?e:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},Tt=function(){N()},Pt=d(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{K.apply(G=J.call(B.childNodes),B.childNodes),G[B.childNodes.length].nodeType}catch(t){K={apply:G.length?function(t,e){Q.apply(t,J.call(e))}:function(t,e){for(var i=t.length,n=0;t[i++]=e[n++];);t.length=i-1}}}b=e.support={},k=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},N=e.setDocument=function(t){var e,i,n=t?t.ownerDocument||t:B;return n!==M&&9===n.nodeType&&n.documentElement?(M=n,E=M.documentElement,F=!k(M),B!==M&&(i=M.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",Tt,!1):i.attachEvent&&i.attachEvent("onunload",Tt)),b.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=r(function(t){return t.appendChild(M.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=gt.test(M.getElementsByClassName),b.getById=r(function(t){return E.appendChild(t).id=z,!M.getElementsByName||!M.getElementsByName(z).length}),b.getById?(T.filter.ID=function(t){var e=t.replace(yt,xt);return function(t){return t.getAttribute("id")===e}},T.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&F){var i=e.getElementById(t);return i?[i]:[]}}):(T.filter.ID=function(t){var e=t.replace(yt,xt);return function(t){var i="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return i&&i.value===e}},T.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&F){var i,n,r,s=e.getElementById(t);if(s){if(i=s.getAttributeNode("id"),i&&i.value===t)return[s];for(r=e.getElementsByName(t),n=0;s=r[n++];)if(i=s.getAttributeNode("id"),i&&i.value===t)return[s]}return[]}}),T.find.TAG=b.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,n=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;i=s[r++];)1===i.nodeType&&n.push(i);return n}return s},T.find.CLASS=b.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&F)return e.getElementsByClassName(t)},j=[],L=[],(b.qsa=gt.test(M.querySelectorAll))&&(r(function(t){E.appendChild(t).innerHTML="<a id='"+z+"'></a><select id='"+z+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+it+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||L.push("\\["+it+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+z+"-]").length||L.push("~="),t.querySelectorAll(":checked").length||L.push(":checked"),t.querySelectorAll("a#"+z+"+*").length||L.push(".#.+[+~]")}),r(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=M.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&L.push("name"+it+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),E.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),L.push(",.*:")})),(b.matchesSelector=gt.test(X=E.matches||E.webkitMatchesSelector||E.mozMatchesSelector||E.oMatchesSelector||E.msMatchesSelector))&&r(function(t){b.disconnectedMatch=X.call(t,"*"),X.call(t,"[s!='']:x"),j.push("!=",st)}),L=L.length&&new RegExp(L.join("|")),j=j.length&&new RegExp(j.join("|")),e=gt.test(E.compareDocumentPosition),I=e||gt.test(E.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},U=e?function(t,e){if(t===e)return D=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i?i:(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&i||!b.sortDetached&&e.compareDocumentPosition(t)===i?t===M||t.ownerDocument===B&&I(B,t)?-1:e===M||e.ownerDocument===B&&I(B,e)?1:R?tt(R,t)-tt(R,e):0:4&i?-1:1)}:function(t,e){if(t===e)return D=!0,0;var i,n=0,r=t.parentNode,s=e.parentNode,a=[t],l=[e];if(!r||!s)return t===M?-1:e===M?1:r?-1:s?1:R?tt(R,t)-tt(R,e):0;if(r===s)return o(t,e);for(i=t;i=i.parentNode;)a.unshift(i);
for(i=e;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?o(a[n],l[n]):a[n]===B?-1:l[n]===B?1:0},M):M},e.matches=function(t,i){return e(t,null,null,i)},e.matchesSelector=function(t,i){if((t.ownerDocument||t)!==M&&N(t),i=i.replace(ht,"='$1']"),b.matchesSelector&&F&&!H[i+" "]&&(!j||!j.test(i))&&(!L||!L.test(i)))try{var n=X.call(t,i);if(n||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return e(i,M,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==M&&N(t),I(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==M&&N(t);var i=T.attrHandle[e.toLowerCase()],n=i&&$.call(T.attrHandle,e.toLowerCase())?i(t,e,!F):void 0;return void 0!==n?n:b.attributes||!F?t.getAttribute(e):(n=t.getAttributeNode(e))&&n.specified?n.value:null},e.escape=function(t){return(t+"").replace(wt,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,i=[],n=0,r=0;if(D=!b.detectDuplicates,R=!b.sortStable&&t.slice(0),t.sort(U),D){for(;e=t[r++];)e===t[r]&&(n=i.push(r));for(;n--;)t.splice(i[n],1)}return R=null,t},P=e.getText=function(t){var e,i="",n=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=P(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[n++];)i+=P(e);return i},T=e.selectors={cacheLength:50,createPseudo:n,match:pt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(yt,xt),t[3]=(t[3]||t[4]||t[5]||"").replace(yt,xt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return pt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&ct.test(i)&&(e=C(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(yt,xt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=W[t+" "];return e||(e=new RegExp("(^|"+it+")"+t+"("+it+"|$)"))&&W(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,i,n){return function(r){var s=e.attr(r,t);return null==s?"!="===i:!i||(s+="","="===i?s===n:"!="===i?s!==n:"^="===i?n&&0===s.indexOf(n):"*="===i?n&&s.indexOf(n)>-1:"$="===i?n&&s.slice(-n.length)===n:"~="===i?(" "+s.replace(ot," ")+" ").indexOf(n)>-1:"|="===i&&(s===n||s.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,i,n,r){var s="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===n&&0===r?function(t){return!!t.parentNode}:function(e,i,l){var u,h,c,f,p,d,m=s!==o?"nextSibling":"previousSibling",g=e.parentNode,_=a&&e.nodeName.toLowerCase(),v=!l&&!a,y=!1;if(g){if(s){for(;m;){for(f=e;f=f[m];)if(a?f.nodeName.toLowerCase()===_:1===f.nodeType)return!1;d=m="only"===t&&!d&&"nextSibling"}return!0}if(d=[o?g.firstChild:g.lastChild],o&&v){for(f=g,c=f[z]||(f[z]={}),h=c[f.uniqueID]||(c[f.uniqueID]={}),u=h[t]||[],p=u[0]===Y&&u[1],y=p&&u[2],f=p&&g.childNodes[p];f=++p&&f&&f[m]||(y=p=0)||d.pop();)if(1===f.nodeType&&++y&&f===e){h[t]=[Y,p,y];break}}else if(v&&(f=e,c=f[z]||(f[z]={}),h=c[f.uniqueID]||(c[f.uniqueID]={}),u=h[t]||[],p=u[0]===Y&&u[1],y=p),y===!1)for(;(f=++p&&f&&f[m]||(y=p=0)||d.pop())&&((a?f.nodeName.toLowerCase()!==_:1!==f.nodeType)||!++y||(v&&(c=f[z]||(f[z]={}),h=c[f.uniqueID]||(c[f.uniqueID]={}),h[t]=[Y,y]),f!==e)););return y-=r,y===n||y%n===0&&y/n>=0}}},PSEUDO:function(t,i){var r,s=T.pseudos[t]||T.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[z]?s(i):s.length>1?(r=[t,t,"",i],T.setFilters.hasOwnProperty(t.toLowerCase())?n(function(t,e){for(var n,r=s(t,i),o=r.length;o--;)n=tt(t,r[o]),t[n]=!(e[n]=r[o])}):function(t){return s(t,0,r)}):s}},pseudos:{not:n(function(t){var e=[],i=[],r=O(t.replace(at,"$1"));return r[z]?n(function(t,e,i,n){for(var s,o=r(t,null,n,[]),a=t.length;a--;)(s=o[a])&&(t[a]=!(e[a]=s))}):function(t,n,s){return e[0]=t,r(e,null,s,i),e[0]=null,!i.pop()}}),has:n(function(t){return function(i){return e(t,i).length>0}}),contains:n(function(t){return t=t.replace(yt,xt),function(e){return(e.textContent||e.innerText||P(e)).indexOf(t)>-1}}),lang:n(function(t){return ft.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(yt,xt).toLowerCase(),function(e){var i;do if(i=F?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return i=i.toLowerCase(),i===t||0===i.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var i=t.location&&t.location.hash;return i&&i.slice(1)===e.id},root:function(t){return t===E},focus:function(t){return t===M.activeElement&&(!M.hasFocus||M.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:u(!1),disabled:u(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!T.pseudos.empty(t)},header:function(t){return mt.test(t.nodeName)},input:function(t){return dt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:h(function(){return[0]}),last:h(function(t,e){return[e-1]}),eq:h(function(t,e,i){return[i<0?i+e:i]}),even:h(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:h(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:h(function(t,e,i){for(var n=i<0?i+e:i;--n>=0;)t.push(n);return t}),gt:h(function(t,e,i){for(var n=i<0?i+e:i;++n<e;)t.push(n);return t})}},T.pseudos.nth=T.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})T.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})T.pseudos[w]=l(w);return f.prototype=T.filters=T.pseudos,T.setFilters=new f,C=e.tokenize=function(t,i){var n,r,s,o,a,l,u,h=V[t+" "];if(h)return i?0:h.slice(0);for(a=t,l=[],u=T.preFilter;a;){n&&!(r=lt.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=ut.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(at," ")}),a=a.slice(n.length));for(o in T.filter)!(r=pt[o].exec(a))||u[o]&&!(r=u[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return i?a.length:a?e.error(t):V(t,l).slice(0)},O=e.compile=function(t,e){var i,n=[],r=[],s=H[t+" "];if(!s){for(e||(e=C(t)),i=e.length;i--;)s=y(e[i]),s[z]?n.push(s):r.push(s);s=H(t,x(r,n)),s.selector=t}return s},S=e.select=function(t,e,i,n){var r,s,o,a,l,u="function"==typeof t&&t,h=!n&&C(t=u.selector||t);if(i=i||[],1===h.length){if(s=h[0]=h[0].slice(0),s.length>2&&"ID"===(o=s[0]).type&&9===e.nodeType&&F&&T.relative[s[1].type]){if(e=(T.find.ID(o.matches[0].replace(yt,xt),e)||[])[0],!e)return i;u&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(r=pt.needsContext.test(t)?0:s.length;r--&&(o=s[r],!T.relative[a=o.type]);)if((l=T.find[a])&&(n=l(o.matches[0].replace(yt,xt),vt.test(s[0].type)&&c(e.parentNode)||e))){if(s.splice(r,1),t=n.length&&p(s),!t)return K.apply(i,n),i;break}}return(u||O(t,h))(n,e,!F,i,!e||vt.test(t)&&c(e.parentNode)||e),i},b.sortStable=z.split("").sort(U).join("")===z,b.detectDuplicates=!!D,N(),b.sortDetached=r(function(t){return 1&t.compareDocumentPosition(M.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,i){var n;if(!i)return t[e]===!0?e.toLowerCase():(n=t.getAttributeNode(e))&&n.specified?n.value:null}),e}(t);et.find=ot,et.expr=ot.selectors,et.expr[":"]=et.expr.pseudos,et.uniqueSort=et.unique=ot.uniqueSort,et.text=ot.getText,et.isXMLDoc=ot.isXML,et.contains=ot.contains,et.escapeSelector=ot.escape;var at=function(t,e,i){for(var n=[],r=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&et(t).is(i))break;n.push(t)}return n},lt=function(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i},ut=et.expr.match.needsContext,ht=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,ct=/^.[^:#\[\.,]*$/;et.filter=function(t,e,i){var n=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===n.nodeType?et.find.matchesSelector(n,t)?[n]:[]:et.find.matches(t,et.grep(e,function(t){return 1===t.nodeType}))},et.fn.extend({find:function(t){var e,i,n=this.length,r=this;if("string"!=typeof t)return this.pushStack(et(t).filter(function(){for(e=0;e<n;e++)if(et.contains(r[e],this))return!0}));for(i=this.pushStack([]),e=0;e<n;e++)et.find(t,r[e],i);return n>1?et.uniqueSort(i):i},filter:function(t){return this.pushStack(r(this,t||[],!1))},not:function(t){return this.pushStack(r(this,t||[],!0))},is:function(t){return!!r(this,"string"==typeof t&&ut.test(t)?et(t):t||[],!1).length}});var ft,pt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,dt=et.fn.init=function(t,e,i){var n,r;if(!t)return this;if(i=i||ft,"string"==typeof t){if(n="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:pt.exec(t),!n||!n[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(n[1]){if(e=e instanceof et?e[0]:e,et.merge(this,et.parseHTML(n[1],e&&e.nodeType?e.ownerDocument||e:Y,!0)),ht.test(n[1])&&et.isPlainObject(e))for(n in e)et.isFunction(this[n])?this[n](e[n]):this.attr(n,e[n]);return this}return r=Y.getElementById(n[2]),r&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):et.isFunction(t)?void 0!==i.ready?i.ready(t):t(et):et.makeArray(t,this)};dt.prototype=et.fn,ft=et(Y);var mt=/^(?:parents|prev(?:Until|All))/,gt={children:!0,contents:!0,next:!0,prev:!0};et.fn.extend({has:function(t){var e=et(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(et.contains(this,e[t]))return!0})},closest:function(t,e){var i,n=0,r=this.length,s=[],o="string"!=typeof t&&et(t);if(!ut.test(t))for(;n<r;n++)for(i=this[n];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(o?o.index(i)>-1:1===i.nodeType&&et.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(s.length>1?et.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?U.call(et(t),this[0]):U.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(et.uniqueSort(et.merge(this.get(),et(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),et.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return at(t,"parentNode")},parentsUntil:function(t,e,i){return at(t,"parentNode",i)},next:function(t){return s(t,"nextSibling")},prev:function(t){return s(t,"previousSibling")},nextAll:function(t){return at(t,"nextSibling")},prevAll:function(t){return at(t,"previousSibling")},nextUntil:function(t,e,i){return at(t,"nextSibling",i)},prevUntil:function(t,e,i){return at(t,"previousSibling",i)},siblings:function(t){return lt((t.parentNode||{}).firstChild,t)},children:function(t){return lt(t.firstChild)},contents:function(t){return t.contentDocument||et.merge([],t.childNodes)}},function(t,e){et.fn[t]=function(i,n){var r=et.map(this,e,i);return"Until"!==t.slice(-5)&&(n=i),n&&"string"==typeof n&&(r=et.filter(n,r)),this.length>1&&(gt[t]||et.uniqueSort(r),mt.test(t)&&r.reverse()),this.pushStack(r)}});var _t=/[^\x20\t\r\n\f]+/g;et.Callbacks=function(t){t="string"==typeof t?o(t):et.extend({},t);var e,i,n,r,s=[],a=[],l=-1,u=function(){for(r=t.once,n=e=!0;a.length;l=-1)for(i=a.shift();++l<s.length;)s[l].apply(i[0],i[1])===!1&&t.stopOnFalse&&(l=s.length,i=!1);t.memory||(i=!1),e=!1,r&&(s=i?[]:"")},h={add:function(){return s&&(i&&!e&&(l=s.length-1,a.push(i)),function e(i){et.each(i,function(i,n){et.isFunction(n)?t.unique&&h.has(n)||s.push(n):n&&n.length&&"string"!==et.type(n)&&e(n)})}(arguments),i&&!e&&u()),this},remove:function(){return et.each(arguments,function(t,e){for(var i;(i=et.inArray(e,s,i))>-1;)s.splice(i,1),i<=l&&l--}),this},has:function(t){return t?et.inArray(t,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=a=[],s=i="",this},disabled:function(){return!s},lock:function(){return r=a=[],i||e||(s=i=""),this},locked:function(){return!!r},fireWith:function(t,i){return r||(i=i||[],i=[t,i.slice?i.slice():i],a.push(i),e||u()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!n}};return h},et.extend({Deferred:function(e){var i=[["notify","progress",et.Callbacks("memory"),et.Callbacks("memory"),2],["resolve","done",et.Callbacks("once memory"),et.Callbacks("once memory"),0,"resolved"],["reject","fail",et.Callbacks("once memory"),et.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return s.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return et.Deferred(function(e){et.each(i,function(i,n){var r=et.isFunction(t[n[4]])&&t[n[4]];s[n[1]](function(){var t=r&&r.apply(this,arguments);t&&et.isFunction(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(e,n,r){function s(e,i,n,r){return function(){var u=this,h=arguments,c=function(){var t,c;if(!(e<o)){if(t=n.apply(u,h),t===i.promise())throw new TypeError("Thenable self-resolution");c=t&&("object"==typeof t||"function"==typeof t)&&t.then,et.isFunction(c)?r?c.call(t,s(o,i,a,r),s(o,i,l,r)):(o++,c.call(t,s(o,i,a,r),s(o,i,l,r),s(o,i,a,i.notifyWith))):(n!==a&&(u=void 0,h=[t]),(r||i.resolveWith)(u,h))}},f=r?c:function(){try{c()}catch(t){et.Deferred.exceptionHook&&et.Deferred.exceptionHook(t,f.stackTrace),e+1>=o&&(n!==l&&(u=void 0,h=[t]),i.rejectWith(u,h))}};e?f():(et.Deferred.getStackHook&&(f.stackTrace=et.Deferred.getStackHook()),t.setTimeout(f))}}var o=0;return et.Deferred(function(t){i[0][3].add(s(0,t,et.isFunction(r)?r:a,t.notifyWith)),i[1][3].add(s(0,t,et.isFunction(e)?e:a)),i[2][3].add(s(0,t,et.isFunction(n)?n:l))}).promise()},promise:function(t){return null!=t?et.extend(t,r):r}},s={};return et.each(i,function(t,e){var o=e[2],a=e[5];r[e[1]]=o.add,a&&o.add(function(){n=a},i[3-t][2].disable,i[0][2].lock),o.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,i=e,n=Array(i),r=W.call(arguments),s=et.Deferred(),o=function(t){return function(i){n[t]=this,r[t]=arguments.length>1?W.call(arguments):i,--e||s.resolveWith(n,r)}};if(e<=1&&(u(t,s.done(o(i)).resolve,s.reject),"pending"===s.state()||et.isFunction(r[i]&&r[i].then)))return s.then();for(;i--;)u(r[i],o(i),s.reject);return s.promise()}});var vt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;et.Deferred.exceptionHook=function(e,i){t.console&&t.console.warn&&e&&vt.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,i)},et.readyException=function(e){t.setTimeout(function(){throw e})};var yt=et.Deferred();et.fn.ready=function(t){return yt.then(t).catch(function(t){et.readyException(t)}),this},et.extend({isReady:!1,readyWait:1,holdReady:function(t){t?et.readyWait++:et.ready(!0)},ready:function(t){(t===!0?--et.readyWait:et.isReady)||(et.isReady=!0,t!==!0&&--et.readyWait>0||yt.resolveWith(Y,[et]))}}),et.ready.then=yt.then,"complete"===Y.readyState||"loading"!==Y.readyState&&!Y.documentElement.doScroll?t.setTimeout(et.ready):(Y.addEventListener("DOMContentLoaded",h),t.addEventListener("load",h));var xt=function(t,e,i,n,r,s,o){var a=0,l=t.length,u=null==i;if("object"===et.type(i)){r=!0;for(a in i)xt(t,e,a,i[a],!0,s,o)}else if(void 0!==n&&(r=!0,et.isFunction(n)||(o=!0),u&&(o?(e.call(t,n),e=null):(u=e,e=function(t,e,i){return u.call(et(t),i)})),e))for(;a<l;a++)e(t[a],i,o?n:n.call(t[a],a,e(t[a],i)));return r?t:u?e.call(t):l?e(t[0],i):s},wt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};c.uid=1,c.prototype={cache:function(t){var e=t[this.expando];return e||(e={},wt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var n,r=this.cache(t);if("string"==typeof e)r[et.camelCase(e)]=i;else for(n in e)r[et.camelCase(n)]=e[n];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][et.camelCase(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,n=t[this.expando];if(void 0!==n){if(void 0!==e){et.isArray(e)?e=e.map(et.camelCase):(e=et.camelCase(e),e=e in n?[e]:e.match(_t)||[]),i=e.length;for(;i--;)delete n[e[i]]}(void 0===e||et.isEmptyObject(n))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!et.isEmptyObject(e)}};var bt=new c,Tt=new c,Pt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,kt=/[A-Z]/g;et.extend({hasData:function(t){return Tt.hasData(t)||bt.hasData(t)},data:function(t,e,i){return Tt.access(t,e,i)},removeData:function(t,e){Tt.remove(t,e)},_data:function(t,e,i){return bt.access(t,e,i)},_removeData:function(t,e){bt.remove(t,e)}}),et.fn.extend({data:function(t,e){var i,n,r,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(r=Tt.get(s),1===s.nodeType&&!bt.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&(n=o[i].name,0===n.indexOf("data-")&&(n=et.camelCase(n.slice(5)),p(s,n,r[n])));bt.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Tt.set(this,t)}):xt(this,function(e){var i;if(s&&void 0===e){if(i=Tt.get(s,t),void 0!==i)return i;if(i=p(s,t),void 0!==i)return i}else this.each(function(){Tt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Tt.remove(this,t)})}}),et.extend({queue:function(t,e,i){var n;if(t)return e=(e||"fx")+"queue",n=bt.get(t,e),i&&(!n||et.isArray(i)?n=bt.access(t,e,et.makeArray(i)):n.push(i)),n||[]},dequeue:function(t,e){e=e||"fx";var i=et.queue(t,e),n=i.length,r=i.shift(),s=et._queueHooks(t,e),o=function(){et.dequeue(t,e)};"inprogress"===r&&(r=i.shift(),n--),r&&("fx"===e&&i.unshift("inprogress"),delete s.stop,r.call(t,o,s)),!n&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return bt.get(t,i)||bt.access(t,i,{empty:et.Callbacks("once memory").add(function(){bt.remove(t,[e+"queue",i])})})}}),et.fn.extend({queue:function(t,e){var i=2;return"string"!=typeof t&&(e=t,t="fx",i--),arguments.length<i?et.queue(this[0],t):void 0===e?this:this.each(function(){var i=et.queue(this,t,e);et._queueHooks(this,t),"fx"===t&&"inprogress"!==i[0]&&et.dequeue(this,t)})},dequeue:function(t){return this.each(function(){et.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var i,n=1,r=et.Deferred(),s=this,o=this.length,a=function(){--n||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)i=bt.get(s[o],t+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),r.promise(e)}});var Ct=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ot=new RegExp("^(?:([+-])=|)("+Ct+")([a-z%]*)$","i"),St=["Top","Right","Bottom","Left"],At=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&et.contains(t.ownerDocument,t)&&"none"===et.css(t,"display")},Rt=function(t,e,i,n){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];r=i.apply(t,n||[]);for(s in e)t.style[s]=o[s];return r},Dt={};et.fn.extend({show:function(){return g(this,!0)},hide:function(){return g(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){At(this)?et(this).show():et(this).hide()})}});var Nt=/^(?:checkbox|radio)$/i,Mt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Et=/^$|\/(?:java|ecma)script/i,Ft={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Ft.optgroup=Ft.option,Ft.tbody=Ft.tfoot=Ft.colgroup=Ft.caption=Ft.thead,Ft.th=Ft.td;var Lt=/<|&#?\w+;/;!function(){var t=Y.createDocumentFragment(),e=t.appendChild(Y.createElement("div")),i=Y.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),e.appendChild(i),J.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",J.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var jt=Y.documentElement,Xt=/^key/,It=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,zt=/^([^.]*)(?:\.(.+)|)/;et.event={global:{},add:function(t,e,i,n,r){var s,o,a,l,u,h,c,f,p,d,m,g=bt.get(t);if(g)for(i.handler&&(s=i,i=s.handler,r=s.selector),r&&et.find.matchesSelector(jt,r),i.guid||(i.guid=et.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(e){return"undefined"!=typeof et&&et.event.triggered!==e.type?et.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(_t)||[""],u=e.length;u--;)a=zt.exec(e[u])||[],p=m=a[1],d=(a[2]||"").split(".").sort(),p&&(c=et.event.special[p]||{},p=(r?c.delegateType:c.bindType)||p,c=et.event.special[p]||{},h=et.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:r,needsContext:r&&et.expr.match.needsContext.test(r),namespace:d.join(".")},s),(f=l[p])||(f=l[p]=[],f.delegateCount=0,c.setup&&c.setup.call(t,n,d,o)!==!1||t.addEventListener&&t.addEventListener(p,o)),c.add&&(c.add.call(t,h),h.handler.guid||(h.handler.guid=i.guid)),r?f.splice(f.delegateCount++,0,h):f.push(h),et.event.global[p]=!0)},remove:function(t,e,i,n,r){var s,o,a,l,u,h,c,f,p,d,m,g=bt.hasData(t)&&bt.get(t);if(g&&(l=g.events)){for(e=(e||"").match(_t)||[""],u=e.length;u--;)if(a=zt.exec(e[u])||[],p=m=a[1],d=(a[2]||"").split(".").sort(),p){for(c=et.event.special[p]||{},p=(n?c.delegateType:c.bindType)||p,f=l[p]||[],a=a[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=f.length;s--;)h=f[s],!r&&m!==h.origType||i&&i.guid!==h.guid||a&&!a.test(h.namespace)||n&&n!==h.selector&&("**"!==n||!h.selector)||(f.splice(s,1),h.selector&&f.delegateCount--,c.remove&&c.remove.call(t,h));o&&!f.length&&(c.teardown&&c.teardown.call(t,d,g.handle)!==!1||et.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)et.event.remove(t,p+e[u],i,n,!0);et.isEmptyObject(l)&&bt.remove(t,"handle events")}},dispatch:function(t){var e,i,n,r,s,o,a=et.event.fix(t),l=new Array(arguments.length),u=(bt.get(this,"events")||{})[a.type]||[],h=et.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!h.preDispatch||h.preDispatch.call(this,a)!==!1){for(o=et.event.handlers.call(this,a,u),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,i=0;(s=r.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,n=((et.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l),void 0!==n&&(a.result=n)===!1&&(a.preventDefault(),a.stopPropagation()));return h.postDispatch&&h.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,n,r,s,o,a=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||u.disabled!==!0)){for(s=[],o={},i=0;i<l;i++)n=e[i],r=n.selector+" ",void 0===o[r]&&(o[r]=n.needsContext?et(r,this).index(u)>-1:et.find(r,this,null,[u]).length),o[r]&&s.push(n);s.length&&a.push({elem:u,handlers:s})}return u=this,l<e.length&&a.push({elem:u,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(et.Event.prototype,t,{enumerable:!0,configurable:!0,get:et.isFunction(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[et.expando]?t:new et.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==b()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===b()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&et.nodeName(this,"input"))return this.click(),!1},_default:function(t){return et.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},et.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},et.Event=function(t,e){return this instanceof et.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?x:w,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&et.extend(this,e),this.timeStamp=t&&t.timeStamp||et.now(),void(this[et.expando]=!0)):new et.Event(t,e)},et.Event.prototype={constructor:et.Event,isDefaultPrevented:w,isPropagationStopped:w,isImmediatePropagationStopped:w,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=x,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=x,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=x,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},et.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Xt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&It.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},et.event.addProp),et.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){et.event.special[t]={delegateType:e,bindType:e,handle:function(t){var i,n=this,r=t.relatedTarget,s=t.handleObj;return r&&(r===n||et.contains(n,r))||(t.type=s.origType,i=s.handler.apply(this,arguments),t.type=e),i}}}),et.fn.extend({on:function(t,e,i,n){return T(this,t,e,i,n)},one:function(t,e,i,n){return T(this,t,e,i,n,1)},off:function(t,e,i){var n,r;if(t&&t.preventDefault&&t.handleObj)return n=t.handleObj,et(t.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(i=e,e=void 0),i===!1&&(i=w),this.each(function(){et.event.remove(this,t,i,e)})}});var Bt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Yt=/<script|<style|<link/i,qt=/checked\s*(?:[^=]|=\s*.checked.)/i,Wt=/^true\/(.*)/,Vt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;et.extend({htmlPrefilter:function(t){return t.replace(Bt,"<$1></$2>")},clone:function(t,e,i){var n,r,s,o,a=t.cloneNode(!0),l=et.contains(t.ownerDocument,t);if(!(J.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||et.isXMLDoc(t)))for(o=_(a),s=_(t),n=0,r=s.length;n<r;n++)S(s[n],o[n]);if(e)if(i)for(s=s||_(t),o=o||_(a),n=0,r=s.length;n<r;n++)O(s[n],o[n]);else O(t,a);return o=_(a,"script"),o.length>0&&v(o,!l&&_(t,"script")),a},cleanData:function(t){for(var e,i,n,r=et.event.special,s=0;void 0!==(i=t[s]);s++)if(wt(i)){if(e=i[bt.expando]){if(e.events)for(n in e.events)r[n]?et.event.remove(i,n):et.removeEvent(i,n,e.handle);i[bt.expando]=void 0}i[Tt.expando]&&(i[Tt.expando]=void 0)}}}),et.fn.extend({detach:function(t){return R(this,t,!0)},remove:function(t){return R(this,t)},text:function(t){return xt(this,function(t){return void 0===t?et.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=P(this,t);e.appendChild(t)}})},prepend:function(){return A(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=P(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return A(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(et.cleanData(_(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return et.clone(this,t,e)})},html:function(t){return xt(this,function(t){var e=this[0]||{},i=0,n=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Yt.test(t)&&!Ft[(Mt.exec(t)||["",""])[1].toLowerCase()]){t=et.htmlPrefilter(t);try{for(;i<n;i++)e=this[i]||{},1===e.nodeType&&(et.cleanData(_(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return A(this,arguments,function(e){var i=this.parentNode;et.inArray(this,t)<0&&(et.cleanData(_(this)),i&&i.replaceChild(e,this))},t)}}),et.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){et.fn[t]=function(t){for(var i,n=[],r=et(t),s=r.length-1,o=0;o<=s;o++)i=o===s?this:this.clone(!0),et(r[o])[e](i),H.apply(n,i.get());return this.pushStack(n)}});var Ht=/^margin/,Ut=new RegExp("^("+Ct+")(?!px)[a-z%]+$","i"),$t=function(e){var i=e.ownerDocument.defaultView;return i&&i.opener||(i=t),i.getComputedStyle(e)};!function(){function e(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",jt.appendChild(o);var e=t.getComputedStyle(a);i="1%"!==e.top,s="2px"===e.marginLeft,n="4px"===e.width,a.style.marginRight="50%",r="4px"===e.marginRight,jt.removeChild(o),a=null}}var i,n,r,s,o=Y.createElement("div"),a=Y.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",J.clearCloneStyle="content-box"===a.style.backgroundClip,o.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",o.appendChild(a),et.extend(J,{pixelPosition:function(){return e(),i},boxSizingReliable:function(){return e(),n},pixelMarginRight:function(){return e(),r},reliableMarginLeft:function(){return e(),s}}))}();var Gt=/^(none|table(?!-c[ea]).+)/,Zt={position:"absolute",visibility:"hidden",display:"block"},Qt={letterSpacing:"0",fontWeight:"400"},Kt=["Webkit","Moz","ms"],Jt=Y.createElement("div").style;et.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=D(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,
opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:"cssFloat"},style:function(t,e,i,n){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=et.camelCase(e),l=t.style;return e=et.cssProps[a]||(et.cssProps[a]=M(a)||a),o=et.cssHooks[e]||et.cssHooks[a],void 0===i?o&&"get"in o&&void 0!==(r=o.get(t,!1,n))?r:l[e]:(s=typeof i,"string"===s&&(r=Ot.exec(i))&&r[1]&&(i=d(t,e,r),s="number"),void(null!=i&&i===i&&("number"===s&&(i+=r&&r[3]||(et.cssNumber[a]?"":"px")),J.clearCloneStyle||""!==i||0!==e.indexOf("background")||(l[e]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,n))||(l[e]=i))))}},css:function(t,e,i,n){var r,s,o,a=et.camelCase(e);return e=et.cssProps[a]||(et.cssProps[a]=M(a)||a),o=et.cssHooks[e]||et.cssHooks[a],o&&"get"in o&&(r=o.get(t,!0,i)),void 0===r&&(r=D(t,e,n)),"normal"===r&&e in Qt&&(r=Qt[e]),""===i||i?(s=parseFloat(r),i===!0||isFinite(s)?s||0:r):r}}),et.each(["height","width"],function(t,e){et.cssHooks[e]={get:function(t,i,n){if(i)return!Gt.test(et.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?L(t,e,n):Rt(t,Zt,function(){return L(t,e,n)})},set:function(t,i,n){var r,s=n&&$t(t),o=n&&F(t,e,n,"border-box"===et.css(t,"boxSizing",!1,s),s);return o&&(r=Ot.exec(i))&&"px"!==(r[3]||"px")&&(t.style[e]=i,i=et.css(t,e)),E(t,i,o)}}}),et.cssHooks.marginLeft=N(J.reliableMarginLeft,function(t,e){if(e)return(parseFloat(D(t,"marginLeft"))||t.getBoundingClientRect().left-Rt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),et.each({margin:"",padding:"",border:"Width"},function(t,e){et.cssHooks[t+e]={expand:function(i){for(var n=0,r={},s="string"==typeof i?i.split(" "):[i];n<4;n++)r[t+St[n]+e]=s[n]||s[n-2]||s[0];return r}},Ht.test(t)||(et.cssHooks[t+e].set=E)}),et.fn.extend({css:function(t,e){return xt(this,function(t,e,i){var n,r,s={},o=0;if(et.isArray(e)){for(n=$t(t),r=e.length;o<r;o++)s[e[o]]=et.css(t,e[o],!1,n);return s}return void 0!==i?et.style(t,e,i):et.css(t,e)},t,e,arguments.length>1)}}),et.fn.delay=function(e,i){return e=et.fx?et.fx.speeds[e]||e:e,i=i||"fx",this.queue(i,function(i,n){var r=t.setTimeout(i,e);n.stop=function(){t.clearTimeout(r)}})},function(){var t=Y.createElement("input"),e=Y.createElement("select"),i=e.appendChild(Y.createElement("option"));t.type="checkbox",J.checkOn=""!==t.value,J.optSelected=i.selected,t=Y.createElement("input"),t.value="t",t.type="radio",J.radioValue="t"===t.value}();var te,ee=et.expr.attrHandle;et.fn.extend({attr:function(t,e){return xt(this,et.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){et.removeAttr(this,t)})}}),et.extend({attr:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof t.getAttribute?et.prop(t,e,i):(1===s&&et.isXMLDoc(t)||(r=et.attrHooks[e.toLowerCase()]||(et.expr.match.bool.test(e)?te:void 0)),void 0!==i?null===i?void et.removeAttr(t,e):r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:(t.setAttribute(e,i+""),i):r&&"get"in r&&null!==(n=r.get(t,e))?n:(n=et.find.attr(t,e),null==n?void 0:n))},attrHooks:{type:{set:function(t,e){if(!J.radioValue&&"radio"===e&&et.nodeName(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,n=0,r=e&&e.match(_t);if(r&&1===t.nodeType)for(;i=r[n++];)t.removeAttribute(i)}}),te={set:function(t,e,i){return e===!1?et.removeAttr(t,i):t.setAttribute(i,i),i}},et.each(et.expr.match.bool.source.match(/\w+/g),function(t,e){var i=ee[e]||et.find.attr;ee[e]=function(t,e,n){var r,s,o=e.toLowerCase();return n||(s=ee[o],ee[o]=r,r=null!=i(t,e,n)?o:null,ee[o]=s),r}});var ie=/^(?:input|select|textarea|button)$/i,ne=/^(?:a|area)$/i;et.fn.extend({prop:function(t,e){return xt(this,et.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[et.propFix[t]||t]})}}),et.extend({prop:function(t,e,i){var n,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&et.isXMLDoc(t)||(e=et.propFix[e]||e,r=et.propHooks[e]),void 0!==i?r&&"set"in r&&void 0!==(n=r.set(t,i,e))?n:t[e]=i:r&&"get"in r&&null!==(n=r.get(t,e))?n:t[e]},propHooks:{tabIndex:{get:function(t){var e=et.find.attr(t,"tabindex");return e?parseInt(e,10):ie.test(t.nodeName)||ne.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),J.optSelected||(et.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),et.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){et.propFix[this.toLowerCase()]=this}),et.fn.extend({addClass:function(t){var e,i,n,r,s,o,a,l=0;if(et.isFunction(t))return this.each(function(e){et(this).addClass(t.call(this,e,X(this)))});if("string"==typeof t&&t)for(e=t.match(_t)||[];i=this[l++];)if(r=X(i),n=1===i.nodeType&&" "+j(r)+" "){for(o=0;s=e[o++];)n.indexOf(" "+s+" ")<0&&(n+=s+" ");a=j(n),r!==a&&i.setAttribute("class",a)}return this},removeClass:function(t){var e,i,n,r,s,o,a,l=0;if(et.isFunction(t))return this.each(function(e){et(this).removeClass(t.call(this,e,X(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(_t)||[];i=this[l++];)if(r=X(i),n=1===i.nodeType&&" "+j(r)+" "){for(o=0;s=e[o++];)for(;n.indexOf(" "+s+" ")>-1;)n=n.replace(" "+s+" "," ");a=j(n),r!==a&&i.setAttribute("class",a)}return this},toggleClass:function(t,e){var i=typeof t;return"boolean"==typeof e&&"string"===i?e?this.addClass(t):this.removeClass(t):et.isFunction(t)?this.each(function(i){et(this).toggleClass(t.call(this,i,X(this),e),e)}):this.each(function(){var e,n,r,s;if("string"===i)for(n=0,r=et(this),s=t.match(_t)||[];e=s[n++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else void 0!==t&&"boolean"!==i||(e=X(this),e&&bt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":bt.get(this,"__className__")||""))})},hasClass:function(t){var e,i,n=0;for(e=" "+t+" ";i=this[n++];)if(1===i.nodeType&&(" "+j(X(i))+" ").indexOf(e)>-1)return!0;return!1}});var re=/\r/g;et.fn.extend({val:function(t){var e,i,n,r=this[0];return arguments.length?(n=et.isFunction(t),this.each(function(i){var r;1===this.nodeType&&(r=n?t.call(this,i,et(this).val()):t,null==r?r="":"number"==typeof r?r+="":et.isArray(r)&&(r=et.map(r,function(t){return null==t?"":t+""})),e=et.valHooks[this.type]||et.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))})):r?(e=et.valHooks[r.type]||et.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(i=e.get(r,"value"))?i:(i=r.value,"string"==typeof i?i.replace(re,""):null==i?"":i)):void 0}}),et.extend({valHooks:{option:{get:function(t){var e=et.find.attr(t,"value");return null!=e?e:j(et.text(t))}},select:{get:function(t){var e,i,n,r=t.options,s=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?s+1:r.length;for(n=s<0?l:o?s:0;n<l;n++)if(i=r[n],(i.selected||n===s)&&!i.disabled&&(!i.parentNode.disabled||!et.nodeName(i.parentNode,"optgroup"))){if(e=et(i).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var i,n,r=t.options,s=et.makeArray(e),o=r.length;o--;)n=r[o],(n.selected=et.inArray(et.valHooks.option.get(n),s)>-1)&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),et.each(["radio","checkbox"],function(){et.valHooks[this]={set:function(t,e){if(et.isArray(e))return t.checked=et.inArray(et(t).val(),e)>-1}},J.checkOn||(et.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var se=/^(?:focusinfocus|focusoutblur)$/;et.extend(et.event,{trigger:function(e,i,n,r){var s,o,a,l,u,h,c,f=[n||Y],p=Z.call(e,"type")?e.type:e,d=Z.call(e,"namespace")?e.namespace.split("."):[];if(o=a=n=n||Y,3!==n.nodeType&&8!==n.nodeType&&!se.test(p+et.event.triggered)&&(p.indexOf(".")>-1&&(d=p.split("."),p=d.shift(),d.sort()),u=p.indexOf(":")<0&&"on"+p,e=e[et.expando]?e:new et.Event(p,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=d.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),i=null==i?[e]:et.makeArray(i,[e]),c=et.event.special[p]||{},r||!c.trigger||c.trigger.apply(n,i)!==!1)){if(!r&&!c.noBubble&&!et.isWindow(n)){for(l=c.delegateType||p,se.test(l+p)||(o=o.parentNode);o;o=o.parentNode)f.push(o),a=o;a===(n.ownerDocument||Y)&&f.push(a.defaultView||a.parentWindow||t)}for(s=0;(o=f[s++])&&!e.isPropagationStopped();)e.type=s>1?l:c.bindType||p,h=(bt.get(o,"events")||{})[e.type]&&bt.get(o,"handle"),h&&h.apply(o,i),h=u&&o[u],h&&h.apply&&wt(o)&&(e.result=h.apply(o,i),e.result===!1&&e.preventDefault());return e.type=p,r||e.isDefaultPrevented()||c._default&&c._default.apply(f.pop(),i)!==!1||!wt(n)||u&&et.isFunction(n[p])&&!et.isWindow(n)&&(a=n[u],a&&(n[u]=null),et.event.triggered=p,n[p](),et.event.triggered=void 0,a&&(n[u]=a)),e.result}},simulate:function(t,e,i){var n=et.extend(new et.Event,i,{type:t,isSimulated:!0});et.event.trigger(n,null,e)}}),et.fn.extend({trigger:function(t,e){return this.each(function(){et.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return et.event.trigger(t,e,i,!0)}}),et.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){et.fn[e]=function(t,i){return arguments.length>0?this.on(e,null,t,i):this.trigger(e)}}),et.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),J.focusin="onfocusin"in t,J.focusin||et.each({focus:"focusin",blur:"focusout"},function(t,e){var i=function(t){et.event.simulate(e,t.target,et.event.fix(t))};et.event.special[e]={setup:function(){var n=this.ownerDocument||this,r=bt.access(n,e);r||n.addEventListener(t,i,!0),bt.access(n,e,(r||0)+1)},teardown:function(){var n=this.ownerDocument||this,r=bt.access(n,e)-1;r?bt.access(n,e,r):(n.removeEventListener(t,i,!0),bt.remove(n,e))}}});var oe=/\[\]$/,ae=/\r?\n/g,le=/^(?:submit|button|image|reset|file)$/i,ue=/^(?:input|select|textarea|keygen)/i;et.param=function(t,e){var i,n=[],r=function(t,e){var i=et.isFunction(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)};if(et.isArray(t)||t.jquery&&!et.isPlainObject(t))et.each(t,function(){r(this.name,this.value)});else for(i in t)I(i,t[i],e,r);return n.join("&")},et.fn.extend({serialize:function(){return et.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=et.prop(this,"elements");return t?et.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!et(this).is(":disabled")&&ue.test(this.nodeName)&&!le.test(t)&&(this.checked||!Nt.test(t))}).map(function(t,e){var i=et(this).val();return null==i?null:et.isArray(i)?et.map(i,function(t){return{name:e.name,value:t.replace(ae,"\r\n")}}):{name:e.name,value:i.replace(ae,"\r\n")}}).get()}}),et.fn.extend({wrapAll:function(t){var e;return this[0]&&(et.isFunction(t)&&(t=t.call(this[0])),e=et(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return et.isFunction(t)?this.each(function(e){et(this).wrapInner(t.call(this,e))}):this.each(function(){var e=et(this),i=e.contents();i.length?i.wrapAll(t):e.append(t)})},wrap:function(t){var e=et.isFunction(t);return this.each(function(i){et(this).wrapAll(e?t.call(this,i):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){et(this).replaceWith(this.childNodes)}),this}}),et.expr.pseudos.hidden=function(t){return!et.expr.pseudos.visible(t)},et.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},J.createHTMLDocument=function(){var t=Y.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),et.parseHTML=function(t,e,i){if("string"!=typeof t)return[];"boolean"==typeof e&&(i=e,e=!1);var n,r,s;return e||(J.createHTMLDocument?(e=Y.implementation.createHTMLDocument(""),n=e.createElement("base"),n.href=Y.location.href,e.head.appendChild(n)):e=Y),r=ht.exec(t),s=!i&&[],r?[e.createElement(r[1])]:(r=y([t],e,s),s&&s.length&&et(s).remove(),et.merge([],r.childNodes))},et.offset={setOffset:function(t,e,i){var n,r,s,o,a,l,u,h=et.css(t,"position"),c=et(t),f={};"static"===h&&(t.style.position="relative"),a=c.offset(),s=et.css(t,"top"),l=et.css(t,"left"),u=("absolute"===h||"fixed"===h)&&(s+l).indexOf("auto")>-1,u?(n=c.position(),o=n.top,r=n.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),et.isFunction(e)&&(e=e.call(t,i,et.extend({},a))),null!=e.top&&(f.top=e.top-a.top+o),null!=e.left&&(f.left=e.left-a.left+r),"using"in e?e.using.call(t,f):c.css(f)}},et.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){et.offset.setOffset(this,t,e)});var e,i,n,r,s=this[0];return s?s.getClientRects().length?(n=s.getBoundingClientRect(),n.width||n.height?(r=s.ownerDocument,i=z(r),e=r.documentElement,{top:n.top+i.pageYOffset-e.clientTop,left:n.left+i.pageXOffset-e.clientLeft}):n):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i=this[0],n={top:0,left:0};return"fixed"===et.css(i,"position")?e=i.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),et.nodeName(t[0],"html")||(n=t.offset()),n={top:n.top+et.css(t[0],"borderTopWidth",!0),left:n.left+et.css(t[0],"borderLeftWidth",!0)}),{top:e.top-n.top-et.css(i,"marginTop",!0),left:e.left-n.left-et.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===et.css(t,"position");)t=t.offsetParent;return t||jt})}}),et.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var i="pageYOffset"===e;et.fn[t]=function(n){return xt(this,function(t,n,r){var s=z(t);return void 0===r?s?s[e]:t[n]:void(s?s.scrollTo(i?s.pageXOffset:r,i?r:s.pageYOffset):t[n]=r)},t,n,arguments.length)}}),et.each(["top","left"],function(t,e){et.cssHooks[e]=N(J.pixelPosition,function(t,i){if(i)return i=D(t,e),Ut.test(i)?et(t).position()[e]+"px":i})}),et.each({Height:"height",Width:"width"},function(t,e){et.each({padding:"inner"+t,content:e,"":"outer"+t},function(i,n){et.fn[n]=function(r,s){var o=arguments.length&&(i||"boolean"!=typeof r),a=i||(r===!0||s===!0?"margin":"border");return xt(this,function(e,i,r){var s;return et.isWindow(e)?0===n.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?et.css(e,i,a):et.style(e,i,r,a)},e,o?r:void 0,o)}})}),"function"==typeof define&&define.amd&&define("jquery",[],function(){return et});var he=t.jQuery,ce=t.$;return et.noConflict=function(e){return t.$===et&&(t.$=ce),e&&t.jQuery===et&&(t.jQuery=he),et},e||(t.jQuery=t.$=et),et})},{}],13:[function(t,e,i){!function(t){var n=!1;if("function"==typeof define&&define.amd&&(define(t),n=!0),"object"==typeof i&&(e.exports=t(),n=!0),!n){var r=window.Cookies,s=window.Cookies=t();s.noConflict=function(){return window.Cookies=r,s}}}(function(){function t(){for(var t=0,e={};t<arguments.length;t++){var i=arguments[t];for(var n in i)e[n]=i[n]}return e}function e(i){function n(e,r,s){var o;if("undefined"!=typeof document){if(arguments.length>1){if(s=t({path:"/"},n.defaults,s),"number"==typeof s.expires){var a=new Date;a.setMilliseconds(a.getMilliseconds()+864e5*s.expires),s.expires=a}try{o=JSON.stringify(r),/^[\{\[]/.test(o)&&(r=o)}catch(t){}return r=i.write?i.write(r,e):encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),e=encodeURIComponent(String(e)),e=e.replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent),e=e.replace(/[\(\)]/g,escape),document.cookie=[e,"=",r,s.expires?"; expires="+s.expires.toUTCString():"",s.path?"; path="+s.path:"",s.domain?"; domain="+s.domain:"",s.secure?"; secure":""].join("")}e||(o={});for(var l=document.cookie?document.cookie.split("; "):[],u=/(%[0-9A-Z]{2})+/g,h=0;h<l.length;h++){var c=l[h].split("="),f=c.slice(1).join("=");'"'===f.charAt(0)&&(f=f.slice(1,-1));try{var p=c[0].replace(u,decodeURIComponent);if(f=i.read?i.read(f,p):i(f,p)||f.replace(u,decodeURIComponent),this.json)try{f=JSON.parse(f)}catch(t){}if(e===p){o=f;break}e||(o[p]=f)}catch(t){}}return o}}return n.set=n,n.get=function(t){return n.call(n,t)},n.getJSON=function(){return n.apply({json:!0},[].slice.call(arguments))},n.defaults={},n.remove=function(e,i){n(e,"",t(i,{expires:-1}))},n.withConverter=e,n}return e(function(){})})},{}],14:[function(t,e,i){"use strict";var n=t("./libs/jquery/dist/jquery.slim.min.js");n(function(){function e(t){"radio"!==t.attr("type")&&(""!==t.val()?t.addClass("on"):t.removeClass("on"))}var i=t("./animHeader.js"),r=t("./animBtn.js"),s=t("./sliderMain.js"),o=n("body"),a={yellow:["rgb(255, 228, 0)","rgb(43, 240, 117)"],orange:["rgb(255, 120, 0)","rgb(255, 228, 0)"],red:["rgb(255, 6, 0)","rgb(255, 120, 0)"],pink:["rgb(240, 43, 140)","rgb(255, 6, 0)"],blue:["rgb(2, 187, 255)","rgb(138, 126, 224)"],green:["rgb(43, 240, 117)","rgb(2, 187, 255)"]},l=n("#search"),u=n("#form-contact");i(),r(o),u.length&&u.on("input propertychange","input, textarea",function(){e(n(this))}).find("input, textarea").each(function(){e(n(this))}),(o.hasClass("archive")||o.hasClass("search"))&&l.length&&(l.on("input propertychange",function(){e(n(this))}),e(l)),n("#bloc-top").length&&s(o,n("#bloc-top"),a)}),n(window).on("load",function(){var e=n("body"),i=t("./initVideo.js"),r=t("./slider.js"),s=t("./animHoops.js"),o=t("./setPosCircle.js");n(".wrapper-sliders").length&&r(),n(".wrapper-video").length&&i(),e.hasClass("home")&&s(n("#more-than-moocs").find(".hoop"),200,!0),e.hasClass("page-template-about")&&s(n("#main").find(".hoop"),300,!1),e.hasClass("page-template-solutions")&&o(n("#solutions-header"))})},{"./animBtn.js":1,"./animHeader.js":2,"./animHoops.js":3,"./initVideo.js":5,"./libs/jquery/dist/jquery.slim.min.js":12,"./setPosCircle.js":16,"./slider.js":17,"./sliderMain.js":18}],15:[function(t,e,i){e.exports=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)}}()},{}],16:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js");window.requestAnimFrame=t("./requestAnimFrame.js");var s=t("./throttle.js"),o=t("./getEltPosOnCover");e.exports=function(t){function e(){i=o(t,h,l,u,a),r.set(a,{scale:i[2],left:i[0]+"px",top:i[1]+"px",force3D:!0})}var i,a=t.find("> .hoop"),l=t.data("img-width"),u=t.data("img-height"),h=u/l;e(),r.to(a,1,{opacity:1}),n(window).on("resize",s(function(){requestAnimFrame(e)},60))}},{"./getEltPosOnCover":4,"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/jquery/dist/jquery.slim.min.js":12,"./requestAnimFrame.js":15,"./throttle.js":19}],17:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/gsap/src/uncompressed/TweenMax.js"),s=t("./libs/gsap/src/uncompressed/utils/Draggable.js");t("./libs/gsap/src/uncompressed/plugins/ThrowPropsPlugin.min.js");e.exports=function(){function t(){n(this.target).find(".slides > li").removeClass("active")}function e(){d=n(this.target),_=d.parents(".container-sliders").width()/2,v=d.find(".slides > li"),w=v.outerWidth()/2,b=_+w,T=_-w,v.each(function(){f=Math.floor(n(this).offset().left+w),f>=T&&f<=b&&n(this).addClass("active")})}function i(t,e,i){c=t.outerWidth()/2,w=e.outerWidth()/2,b=c+w,T=c-w,e.each(function(){f=Math.floor(n(this).offset().left+i/2),f>=T&&f<=b&&n(this).addClass("active")})}function o(){d=n(this.target),x=d.find(".slides.cloned"),m=d.find(".slides:not(.cloned)"),v=m.find("> li"),g=v.length*v.outerWidth(),h=this.x,h>0?(r.set(x,{x:-g+"px",force3D:!0}),h>g&&(h-=g)):(r.set(x,{x:g+"px",force3D:!0}),h<-g&&(h+=g)),h!==this.x&&(r.set(d,{x:h,force3D:!0,overwrite:!1}),this.x=h),r.set(d.parents(".container-sliders").find(".hoop"),{rotation:h/2,force3D:!0,overwrite:!1})}function a(a){var h,c,f=a.find(".wrapper-sliders"),d=a.find(".slider"),m=a.find(".slides"),g=m.find("> li"),_=g.length,v=g.outerWidth(),x=(g.outerHeight(),_/2),w=_*v,b=w/2-v/2;_%2===0?(h=x,c=x):(h=Math.ceil(x),c=_-h),m.clone().addClass("cloned").appendTo(d),m=a.find(".slides"),g=m.find("> li"),y=a.find(".slides.cloned"),p=a.find(".slides:not(.cloned)"),leftSlidesStart=b-c*v,r.set([m,f],{width:w+"px"}),m.each(function(){for(l=0;l<h;l++)r.set(n(this).find(">li").eq(l),{left:b+l*v+"px"});for(u=0;u<c;u++)r.set(n(this).find(">li").eq(h+u),{left:leftSlidesStart+u*v+"px"})}),r.set(y,{x:w+"px",force3D:!0}),r.set(m,{marginLeft:-w/2+"px"}),i(a,g,v),s.create(d,{type:"x",edgeResistance:.65,throwProps:!0,onDrag:o,onThrowUpdate:o,onDragStart:t,onThrowComplete:e,snap:{x:function(t){return(t/v|0)*v}}})}var l,u,h,c,f,p,d,m,g,_,v,y,x,w,b,T,P=n(".container-sliders");P.each(function(){a(n(this))})}},{"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/gsap/src/uncompressed/plugins/ThrowPropsPlugin.min.js":10,"./libs/gsap/src/uncompressed/utils/Draggable.js":11,"./libs/jquery/dist/jquery.slim.min.js":12}],18:[function(t,e,i){var n=t("./libs/jquery/dist/jquery.slim.min.js"),r=t("./libs/js-cookie/src/js.cookie.js"),s=t("./libs/gsap/src/uncompressed/TweenMax.js"),o=t("./libs/gsap/src/uncompressed/plugins/CustomEase.js");window.requestAnimFrame=t("./requestAnimFrame.js");var a=t("./throttle.js"),l=t("./getEltPosOnCover");e.exports=function(t,e,i){function u(){f=l(e,w,y,x,_),p=e.width(),s.set(_,{scale:f[2],left:f[0]+"px",top:f[1]+"px",force3D:!0,onComplete:function(){f[0]<b||f[0]+_.width()+2*b>p||f[1]<T.height()?(_.addClass("off"),v.addClass("on")):(_.removeClass("off"),v.removeClass("on"))}})}function h(){s.fromTo(_.find("> .icon"),6,{x:700-p+"px",opacity:0},{x:"0px",opacity:.85,force3D:!0,ease:A}),s.fromTo([_.find("> span"),v.find("> span")],4,{x:200-p+"px",opacity:0},R),s.fromTo(m.find(".slider-plans"),4,{x:200-p+"px",opacity:0},R),P.find(".current").html(m.index(".slide-home")+1),t.removeClass("theme-"+t.data("theme")).addClass("theme-"+m.data("color")).data("theme",m.data("color")).dequeue(),k.find("[data-theme-main]").attr("stop-color",i[m.data("color")][0]),k.find("[data-theme-second]").attr("stop-color",i[m.data("color")][1])}function c(t,i,n){t.length?t.addClass("slide-on"):C.eq(n).addClass("slide-on"),m.removeClass("slide-on"),i.length?i.addClass("txt-on"):S.eq(n).addClass("txt-on"),g.removeClass("txt-on"),g=d.find(".txt-on"),s.fromTo(_.find("> .icon"),.5,{x:"0px"},D),s.fromTo([_.find("> span"),v.find("> span")],.5,{x:"0px"},D),s.fromTo(m.find(".slider-plans"),.5,{x:"0px"},{x:"500px",opacity:0,force3D:!0,ease:Power2.easeIn,onComplete:function(){m=e.find(".slide-on"),_=m.find(".baseline"),v=m.find(".baseline-second"),u(),h(),r.set("think-decli",m.index(".slide-home"))}})}var f,p,d=n("#bloc-revelation"),m=e.find(".slide-on"),g=d.find(".txt-on"),_=m.find(".baseline"),v=m.find(".baseline-second"),y=e.data("img-width"),x=e.data("img-height"),w=x/y,b=20,T=n("#header"),P=e.find("#slider-home-nav"),k=n("#gradient-hoop"),C=e.find(".slide-home"),O=C.length,S=d.find(".slide-home-txt"),A=o.create("custom","M0,0,C0,0.5,0.005,0.73,0.11,0.85,0.22,0.975,0.505,1,1,1"),R={x:"0px",opacity:1,force3D:!0,ease:A},D={x:"500px",opacity:0,force3D:!0,ease:Power2.easeIn};P.on("click",".prev",function(t){t.preventDefault(),c(m.prev(".slide-home"),g.prev(".slide-home-txt"),O-1)}).on("click",".next",function(t){t.preventDefault(),c(m.next(".slide-home"),g.next(".slide-home-txt"),0)}),n(window).on("load",function(){e.addClass("loaded"),u(),h()}),n(window).on("resize",a(function(){requestAnimFrame(u)},60))}},{"./getEltPosOnCover":4,"./libs/gsap/src/uncompressed/TweenMax.js":7,"./libs/gsap/src/uncompressed/plugins/CustomEase.js":9,"./libs/jquery/dist/jquery.slim.min.js":12,"./libs/js-cookie/src/js.cookie.js":13,"./requestAnimFrame.js":15,"./throttle.js":19}],19:[function(t,e,i){e.exports=function(t,e){var i,n;return function(){var r=this,s=+new Date,o=arguments;i&&s<i+e?(clearTimeout(n),n=setTimeout(function(){i=s,t.apply(r,o)},e)):(i=s,t.apply(r,o))}}},{}]},{},[14]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
