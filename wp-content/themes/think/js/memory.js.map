{"version":3,"sources":["webpack:///./wp-content/themes/think/src/js/components/memory.js"],"names":["memoryHandler","query","selector","memory","successElement","shapes","cards","cardsArray","active","state","clicked","done","createCard","shape","card","document","createElement","front","svg","createElementNS","use","setAttribute","setAttributeNS","appendChild","sort","Math","random","forEach","ctx","randomCardIndex","floor","length","index","classList","add","addEventListener","contains","remove","getAttribute","every","el","setTimeout"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAAA,eACPC,oDAAK,CAAC;AAAEC,YAAQ,EAAE;AAAZ,GAAD,CADE;AAAA;AAAA,MACjBC,MADiB;;AAGxB,MAAI,CAACA,MAAL,EAAa;;AAHW,gBAICF,oDAAK,CAAC;AAAEC,YAAQ,EAAE;AAAZ,GAAD,CAJN;AAAA;AAAA,MAIjBE,cAJiB;;AAMxB,MAAMC,MAAM,GAAG,CACX,WADW,EAEX,WAFW,EAGX,UAHW,EAIX,UAJW,EAKX,QALW,EAMX,QANW,EAOX,MAPW,EAQX,MARW,EASX,QATW,EAUX,QAVW,CAAf;AAYA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,MAAM,GAAG,IAAb;AACA,MAAMC,KAAK,GAAG;AACVC,WAAO,EAAE,KADC;AAEVC,QAAI,EAAE;AAFI,GAAd;;AAKA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AACxB,QAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAb;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AACA,QAAME,GAAG,GAAGH,QAAQ,CAACI,eAAT,CACR,4BADQ,EAER,KAFQ,CAAZ;AAIA,QAAMC,GAAG,GAAGL,QAAQ,CAACI,eAAT,CACR,4BADQ,EAER,KAFQ,CAAZ;AAKAL,QAAI,CAACO,YAAL,CAAkB,OAAlB,EAA2B,MAA3B;AACAP,QAAI,CAACO,YAAL,CAAkB,YAAlB,EAAgCR,KAAhC;AAEAI,SAAK,CAACI,YAAN,CAAmB,OAAnB,EAA4B,OAA5B;AAEAH,OAAG,CAACG,YAAJ,CAAiB,OAAjB,EAA0B,MAA1B;AAEAD,OAAG,CAACE,cAAJ,CACI,8BADJ,EAEI,YAFJ,kBAGaT,KAHb;AAMAK,OAAG,CAACK,WAAJ,CAAgBH,GAAhB;AACAH,SAAK,CAACM,WAAN,CAAkBL,GAAlB;AACAJ,QAAI,CAACS,WAAL,CAAiBN,KAAjB;AACAd,UAAM,CAACoB,WAAP,CAAmBT,IAAnB;AACH,GA7BD;;AA+BAT,QAAM,CAACmB,IAAP,CAAY;AAAA,WAAM,MAAMC,IAAI,CAACC,MAAL,EAAZ;AAAA,GAAZ;AACAC,wDAAO,CAACtB,MAAD,EAAS,UAAAQ,KAAK,EAAI;AACrBD,cAAU,CAACC,KAAD,CAAV;AACH,GAFM,CAAP;AAIAP,OAAK,GAAGL,oDAAK,CAAC;AAAEC,YAAQ,EAAE,OAAZ;AAAqB0B,OAAG,EAAEzB;AAA1B,GAAD,CAAb;AACAI,YAAU,sBAAOD,KAAP,CAAV;AAEA,MAAMuB,eAAe,GAAGJ,IAAI,CAACK,KAAL,CAAWL,IAAI,CAACC,MAAL,KAAgBpB,KAAK,CAACyB,MAAtB,GAA+B,GAA1C,CAAxB;AAEAJ,wDAAO,CAACrB,KAAD,EAAQ,UAACQ,IAAD,EAAOkB,KAAP,EAAiB;AAC5B,QAAIA,KAAK,KAAKH,eAAd,EAA+B;AAC3Bf,UAAI,CAACmB,SAAL,CAAeC,GAAf,CAAmB,OAAnB;AACH;;AAEDpB,QAAI,CAACqB,gBAAL,CAAsB,OAAtB,EAA+B,YAAM;AACjC,UAAIhC,MAAM,CAAC8B,SAAP,CAAiBG,QAAjB,CAA0B,KAA1B,CAAJ,EAAsC;;AAEtC,UAAI,CAAC3B,KAAK,CAACC,OAAX,EAAoB;AAChBD,aAAK,CAACC,OAAN,GAAgB,IAAhB;AACAP,cAAM,CAAC8B,SAAP,CAAiBC,GAAjB,CAAqB,SAArB;AACH;;AANgC,oBAQtBjC,oDAAK,CAAC;AAAEC,gBAAQ,EAAE,KAAZ;AAAmB0B,WAAG,EAAEzB;AAAxB,OAAD,CARiB;;AAAA;;AAQhCK,YARgC;;AASjC,UAAIA,MAAJ,EAAY;AACRA,cAAM,CAACyB,SAAP,CAAiBC,GAAjB,CAAqB,OAArB;AACA1B,cAAM,CAACyB,SAAP,CAAiBI,MAAjB,CAAwB,IAAxB;AACAvB,YAAI,CAACmB,SAAL,CAAeC,GAAf,CAAmB,IAAnB;;AAEA,YACIpB,IAAI,CAACwB,YAAL,CAAkB,YAAlB,MACA9B,MAAM,CAAC8B,YAAP,CAAoB,YAApB,CAFJ,EAGE;AACExB,cAAI,CAACmB,SAAL,CAAeC,GAAf,CAAmB,MAAnB;AACApB,cAAI,CAACmB,SAAL,CAAeI,MAAf,CAAsB,IAAtB;AACA7B,gBAAM,CAACyB,SAAP,CAAiBC,GAAjB,CAAqB,MAArB;AACA1B,gBAAM,CAACyB,SAAP,CAAiBI,MAAjB,CAAwB,OAAxB;AAEA5B,eAAK,CAACE,IAAN,GAAaJ,UAAU,CAACgC,KAAX,CAAiB,UAAAC,EAAE;AAAA,mBAC5BA,EAAE,CAACP,SAAH,CAAaG,QAAb,CAAsB,MAAtB,CAD4B;AAAA,WAAnB,CAAb;;AAGA,cAAI3B,KAAK,CAACE,IAAV,EAAgB;AACZP,0BAAc,CAAC6B,SAAf,CAAyBC,GAAzB,CAA6B,IAA7B;AACH;AACJ,SAfD,MAeO;AACH/B,gBAAM,CAAC8B,SAAP,CAAiBC,GAAjB,CAAqB,KAArB;AACAO,oBAAU,CAAC,YAAM;AACb3B,gBAAI,CAACmB,SAAL,CAAeI,MAAf,CAAsB,IAAtB;AACA7B,kBAAM,CAACyB,SAAP,CAAiBI,MAAjB,CAAwB,OAAxB;AACAlC,kBAAM,CAAC8B,SAAP,CAAiBI,MAAjB,CAAwB,KAAxB;AACH,WAJS,EAIP,IAJO,CAAV;AAKH;AACJ,OA5BD,MA4BO;AACHvB,YAAI,CAACmB,SAAL,CAAeC,GAAf,CAAmB,IAAnB;AACH;AACJ,KAxCD;AAyCH,GA9CM,CAAP;AA+CH,CAlHD;;AAoHelC,4EAAf,E","file":"memory.js","sourcesContent":["import { forEach, query } from '../utils';\n\nconst memoryHandler = () => {\n    const [memory] = query({ selector: '#memory' });\n\n    if (!memory) return;\n    const [successElement] = query({ selector: '#memory-success' });\n\n    const shapes = [\n        'rectangle',\n        'rectangle',\n        'triangle',\n        'triangle',\n        'square',\n        'square',\n        'drop',\n        'drop',\n        'circle',\n        'circle',\n    ];\n    let cards = null;\n    let cardsArray = [];\n    let active = null;\n    const state = {\n        clicked: false,\n        done: false,\n    };\n\n    const createCard = shape => {\n        const card = document.createElement('div');\n        const front = document.createElement('div');\n        const svg = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'svg'\n        );\n        const use = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'use'\n        );\n\n        card.setAttribute('class', 'card');\n        card.setAttribute('data-shape', shape);\n\n        front.setAttribute('class', 'front');\n\n        svg.setAttribute('class', 'icon');\n\n        use.setAttributeNS(\n            'http://www.w3.org/1999/xlink',\n            'xlink:href',\n            `#icon-${shape}`\n        );\n\n        svg.appendChild(use);\n        front.appendChild(svg);\n        card.appendChild(front);\n        memory.appendChild(card);\n    };\n\n    shapes.sort(() => 0.5 - Math.random());\n    forEach(shapes, shape => {\n        createCard(shape);\n    });\n\n    cards = query({ selector: '.card', ctx: memory });\n    cardsArray = [...cards];\n\n    const randomCardIndex = Math.floor(Math.random() * cards.length * 0.5);\n\n    forEach(cards, (card, index) => {\n        if (index === randomCardIndex) {\n            card.classList.add('blink');\n        }\n\n        card.addEventListener('click', () => {\n            if (memory.classList.contains('off')) return;\n\n            if (!state.clicked) {\n                state.clicked = true;\n                memory.classList.add('clicked');\n            }\n\n            [active] = query({ selector: '.on', ctx: memory });\n            if (active) {\n                active.classList.add('first');\n                active.classList.remove('on');\n                card.classList.add('on');\n\n                if (\n                    card.getAttribute('data-shape') ===\n                    active.getAttribute('data-shape')\n                ) {\n                    card.classList.add('done');\n                    card.classList.remove('on');\n                    active.classList.add('done');\n                    active.classList.remove('first');\n\n                    state.done = cardsArray.every(el =>\n                        el.classList.contains('done')\n                    );\n                    if (state.done) {\n                        successElement.classList.add('on');\n                    }\n                } else {\n                    memory.classList.add('off');\n                    setTimeout(() => {\n                        card.classList.remove('on');\n                        active.classList.remove('first');\n                        memory.classList.remove('off');\n                    }, 1000);\n                }\n            } else {\n                card.classList.add('on');\n            }\n        });\n    });\n};\n\nexport default memoryHandler;\n"],"sourceRoot":""}